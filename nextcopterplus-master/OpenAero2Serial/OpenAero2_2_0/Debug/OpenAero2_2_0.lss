
OpenAero2_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00007dd4  00007e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006e5  0080010c  0080010c  00007e74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007e74  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000005c8  00000000  00000000  00007ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012be2  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000033d4  00000000  00000000  0001b052  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000039cc  00000000  00000000  0001e426  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000de4  00000000  00000000  00021df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023fe  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006514  00000000  00000000  00024fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000460  00000000  00000000  0002b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__ctors_end>
       4:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
       8:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
       c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      10:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      14:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      18:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      1c:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__vector_7>
      20:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      24:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      28:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      2c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      30:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      34:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      38:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      3c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      40:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      44:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      48:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__vector_18>
      4c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      50:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__vector_20>
      54:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      58:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      5c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      60:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      64:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      68:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      6c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      70:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      74:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      78:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      7c:	1d 15       	cp	r17, r13
      7e:	78 15       	cp	r23, r8
      80:	78 15       	cp	r23, r8
      82:	2d 15       	cp	r18, r13
      84:	3a 15       	cp	r19, r10
      86:	44 15       	cp	r20, r4
      88:	40 15       	cp	r20, r0
      8a:	4f 15       	cp	r20, r15
      8c:	5c 15       	cp	r21, r12
      8e:	60 15       	cp	r22, r0
      90:	6d 15       	cp	r22, r13
      92:	16 2b       	or	r17, r22
      94:	18 2b       	or	r17, r24
      96:	1a 2b       	or	r17, r26
      98:	1d 2b       	or	r17, r29
      9a:	20 2b       	or	r18, r16
      9c:	22 2b       	or	r18, r18
      9e:	26 2b       	or	r18, r22
      a0:	28 2b       	or	r18, r24
      a2:	2b 2b       	or	r18, r27
      a4:	2e 2b       	or	r18, r30
      a6:	30 2b       	or	r19, r16
      a8:	32 2b       	or	r19, r18
      aa:	34 2b       	or	r19, r20
      ac:	36 2b       	or	r19, r22
      ae:	38 2b       	or	r19, r24
      b0:	3a 2b       	or	r19, r26
      b2:	3c 2b       	or	r19, r28
      b4:	40 2b       	or	r20, r16
      b6:	42 2b       	or	r20, r18
      b8:	44 2b       	or	r20, r20
      ba:	46 2b       	or	r20, r22
      bc:	48 2b       	or	r20, r24
      be:	4c 2b       	or	r20, r28
      c0:	f2 2e       	mov	r15, r18
      c2:	d6 2e       	mov	r13, r22
      c4:	d9 2e       	mov	r13, r25
      c6:	dc 2e       	mov	r13, r28
      c8:	df 2e       	mov	r13, r31
      ca:	e2 2e       	mov	r14, r18
      cc:	e5 2e       	mov	r14, r21
      ce:	e8 2e       	mov	r14, r24
      d0:	eb 2e       	mov	r14, r27

000000d2 <Acc_Pol>:
      d2:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      e2:	ff ff                                               ..

000000e4 <ACC_RPY_Order>:
      e4:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      f4:	02 01                                               ..

000000f6 <FUTABA>:
      f6:	01 02 00 03 04 05 06 07                             ........

000000fe <JR>:
      fe:	00 01 02 03 04 05 06 07                             ........

00000106 <Wingdings>:
     106:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     116:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     126:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     136:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     146:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     156:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     166:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000170 <Verdana14>:
     170:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     180:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     190:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a0:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b0:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c0:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d0:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e0:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f0:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     200:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     210:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     220:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     230:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     240:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     250:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     260:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     270:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     280:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     290:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a0:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b0:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c0:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d0:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e0:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f0:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     300:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     310:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     320:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     330:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     340:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     350:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     360:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     370:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     380:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     390:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a0:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b0:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c0:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d0:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e0:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f0:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     400:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     410:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     420:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     430:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     440:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     450:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     460:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     470:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     480:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     490:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a0:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b0:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c0:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d0:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e0:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f0:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     500:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     510:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     520:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     530:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     540:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     550:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     560:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     570:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     580:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     590:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a0:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b0:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c0:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d0:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e0:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f0:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     600:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     610:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     620:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     630:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     640:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     650:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     660:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     670:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     680:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     690:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a0:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b0:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c0:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d0:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e0:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f0:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     700:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     710:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     720:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     730:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     740:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     750:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     760:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     770:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     780:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     790:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a0:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b0:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c0:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d0:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e0:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f0:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     800:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     810:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     820:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     830:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     840:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     850:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     860:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     870:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     880:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     890:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a0:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b0:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c0:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d0:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e0:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f0:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     900:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     910:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     920:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     930:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     940:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     950:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     960:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     970:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     980:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     990:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a0:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b0:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c0:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d0:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e0:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f0:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a00:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a10:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a1e <Verdana8>:
     a1e:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a2e:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a3e:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a4e:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a5e:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a6e:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a7e:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a8e:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a9e:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     aae:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     abe:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ace:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ade:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     aee:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     afe:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b0e:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b1e:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b2e:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b3e:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b4e:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b5e:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b6e:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b7e:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b8e:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b9e:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bae:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bbe:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bce:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bde:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bee:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bfe:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c0e:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c1e:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c2e:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c3e:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c4e:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c5e:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c6e:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c7e:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c8e:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c9e:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cae:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cbe:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cce:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cde:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cee:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cfe:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d0e:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d1e:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d2e:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d3e:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d4e:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d5e:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d6e:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d7e:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d8e:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d9e:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     dae:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dbe:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dce:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     dde:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     dee:	01                                                  .

00000def <lcd_commmands>:
     def:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dfd <pagemap>:
     dfd:	07 06 05 04 03 02 01 00                             ........

00000e05 <text_menu>:
     e05:	38 11 32 11 26 11 60 16 45 16 66 13 51 16 4f 16     8.2.&.`.E.f.Q.O.
     e15:	4d 16 43 16 3b 16 41 16 3f 16 3d 16 36 16 31 16     M.C.;.A.?.=.6.1.
     e25:	2c 16 27 16 23 10 72 11 6c 11 6b 14 29 12 22 12     ,.'.#.r.l.k.).".
     e35:	1b 12 23 10 91 14 8c 14 86 14 82 14 7e 14 23 10     ..#.........~.#.
     e45:	a2 11 99 11 aa 11 92 11 8d 11 74 14 80 13 7d 13     ..........t...}.
     e55:	72 13 23 10 23 10 23 10 85 10 7b 10 55 14 60 14     r.#.#.#...{.U.`.
     e65:	d9 12 d3 12 ca 12 c3 12 23 10 23 10 23 10 23 10     ........#.#.#.#.
     e75:	80 13 75 10 70 10 23 10 79 14 1a 11 80 13 1e 10     ..u.p.#.y.......
     e85:	19 10 14 10 0f 10 0a 10 05 10 00 10 fb 0f 23 10     ..............#.
     e95:	65 11 31 10 29 10 62 11 5b 11 1c 16 0a 16 f8 15     e.1.).b.[.......
     ea5:	e5 15 d1 15 bd 15 a9 15 93 15 84 15 76 15 68 15     ............v.h.
     eb5:	5a 15 4c 15 3e 15 30 15 22 15 14 15 02 15 ed 14     Z.L.>.0.".......
     ec5:	d8 14 c3 14 ad 14 96 14 23 10 80 13 7d 13 35 10     ........#...}.5.
     ed5:	23 10 aa 11 a2 11 99 11 92 11 8d 11 88 11 83 11     #...............
     ee5:	7e 11 79 11 23 10 23 10 c0 12 b9 12 23 10 31 10     ~.y.#.#.....#.1.
     ef5:	29 10 24 10 f2 10 e7 10 68 10 5f 10 56 10 52 10     ).$.....h._.V.R.
     f05:	49 10 41 10 55 11 50 11 4a 11 23 10 42 11 0c 11     I.A.U.P.J.#.B...
     f15:	fe 10 f8 10 e6 12 de 12 23 10 3a 10 35 10 80 13     ........#.:.5...
     f25:	7d 13 35 10 8c 14 86 14 82 14 66 13 59 13 4e 13     }.5.......f.Y.N.
     f35:	3f 13 2f 13 21 13 14 13 06 13 fa 12 5d 12 ed 12     ?./.!.......]...
     f45:	5a 16 52 12 99 11 a2 11 92 11 45 16 ac 12 a2 12     Z.R.......E.....
     f55:	95 12 8b 12 7f 12 75 12 68 12 23 10 23 10 23 10     ......u.h.#.#.#.
     f65:	aa 11 a2 11 99 11 92 11 8d 11 88 11 83 11 7e 11     ..............~.
     f75:	be 10 b4 10 ac 10 a4 10 9b 10 93 10 8a 10 79 11     ..............y.
     f85:	60 14 55 14 4a 14 42 14 3a 14 32 14 24 14 16 14     `.U.J.B.:.2.$...
     f95:	0b 14 ff 13 f6 13 ed 13 e4 13 d5 13 c6 13 ba 13     ................
     fa5:	b0 13 a9 13 a2 13 9b 13 8e 13 84 13 23 10 0e 12     ............#...
     fb5:	f6 11 01 12 f6 11 eb 11 df 11 d5 11 cb 11 c0 11     ................
     fc5:	b3 11 f6 11 b3 11 f6 11 23 10 23 10 23 10 23 10     ........#.#.#.#.
     fd5:	e3 10 df 10 db 10 d7 10 d3 10 cf 10 cb 10 c7 10     ................
     fe5:	79 11 4e 12 49 12 44 12 3f 12 3a 12 34 12 2e 12     y.N.I.D.?.:.4...
     ff5:	79 11 23 10 23 10                                   y.#.#.

00000ffb <VBAT39>:
     ffb:	33 2e 39 56 00                                      3.9V.

00001000 <VBAT38>:
    1000:	33 2e 38 56 00                                      3.8V.

00001005 <VBAT37>:
    1005:	33 2e 37 56 00                                      3.7V.

0000100a <VBAT36>:
    100a:	33 2e 36 56 00                                      3.6V.

0000100f <VBAT35>:
    100f:	33 2e 35 56 00                                      3.5V.

00001014 <VBAT34>:
    1014:	33 2e 34 56 00                                      3.4V.

00001019 <VBAT33>:
    1019:	33 2e 33 56 00                                      3.3V.

0000101e <VBAT32>:
    101e:	33 2e 32 56 00                                      3.2V.

00001023 <Dummy0>:
	...

00001024 <GeneralText50>:
    1024:	48 69 67 68 00                                      High.

00001029 <GeneralText5>:
    1029:	53 79 6e 63 20 52 43 00                             Sync RC.

00001031 <GeneralText4>:
    1031:	4c 6f 77 00                                         Low.

00001035 <MixerItem12>:
    1035:	52 65 76 2e 00                                      Rev..

0000103a <MixerItem11>:
    103a:	4e 6f 72 6d 61 6c 00                                Normal.

00001041 <MixerMenuItem7>:
    1041:	50 69 74 63 68 55 70 00                             PitchUp.

00001049 <MixerMenuItem6>:
    1049:	53 69 64 65 77 61 79 73 00                          Sideways.

00001052 <MixerMenuItem5>:
    1052:	41 66 74 00                                         Aft.

00001056 <MixerMenuItem4>:
    1056:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000105f <MixerMenuItem3>:
    105f:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001068 <MixerMenuItem2>:
    1068:	46 6f 72 77 61 72 64 00                             Forward.

00001070 <FSmode1>:
    1070:	41 64 76 2e 00                                      Adv..

00001075 <FSmode0>:
    1075:	46 69 78 65 64 00                                   Fixed.

0000107b <HeadingHold2>:
    107b:	41 78 69 73 20 6c 6f 63 6b 00                       Axis lock.

00001085 <HeadingHold1>:
    1085:	52 61 74 65 00                                      Rate.

0000108a <MixerItem81>:
    108a:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001093 <MixerItem80>:
    1093:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000109b <MixerItem74>:
    109b:	41 63 63 50 69 74 63 68 00                          AccPitch.

000010a4 <MixerItem73>:
    10a4:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000010ac <MixerItem72>:
    10ac:	47 79 72 6f 59 61 77 00                             GyroYaw.

000010b4 <MixerItem71>:
    10b4:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000010be <MixerItem70>:
    10be:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000010c7 <MOUT8>:
    10c7:	43 48 38 00                                         CH8.

000010cb <MOUT7>:
    10cb:	43 48 37 00                                         CH7.

000010cf <MOUT6>:
    10cf:	43 48 36 00                                         CH6.

000010d3 <MOUT5>:
    10d3:	43 48 35 00                                         CH5.

000010d7 <MOUT4>:
    10d7:	43 48 34 00                                         CH4.

000010db <MOUT3>:
    10db:	43 48 33 00                                         CH3.

000010df <MOUT2>:
    10df:	43 48 32 00                                         CH2.

000010e3 <MOUT1>:
    10e3:	43 48 31 00                                         CH1.

000010e7 <Status2>:
    10e7:	66 6f 72 20 73 74 61 74 75 73 00                    for status.

000010f2 <Status0>:
    10f2:	50 72 65 73 73 00                                   Press.

000010f8 <WizardText2>:
    10f8:	44 6f 6e 65 21 00                                   Done!.

000010fe <WizardText1>:
    10fe:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

0000110c <WizardText0>:
    110c:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 3f 00           No RX signal?.

0000111a <PText4>:
    111a:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001126 <PText2>:
    1126:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001132 <PText1>:
    1132:	52 65 73 65 74 00                                   Reset.

00001138 <PText0>:
    1138:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001142 <Status3>:
    1142:	42 61 74 74 65 72 79 00                             Battery.

0000114a <ErrorText7>:
    114a:	4d 6f 64 65 6c 00                                   Model.

00001150 <ErrorText6>:
    1150:	4c 6f 73 74 00                                      Lost.

00001155 <ErrorText5>:
    1155:	45 72 72 6f 72 00                                   Error.

0000115b <ErrorText4>:
    115b:	53 69 67 6e 61 6c 00                                Signal.

00001162 <ErrorText3>:
    1162:	4e 6f 00                                            No.

00001165 <ErrorText0>:
    1165:	53 65 6e 73 6f 72 00                                Sensor.

0000116c <ChannelRef12>:
    116c:	45 6c 65 76 2e 00                                   Elev..

00001172 <ChannelRef10>:
    1172:	54 68 72 6f 74 2e 00                                Throt..

00001179 <ChannelRef8>:
    1179:	4e 6f 6e 65 00                                      None.

0000117e <ChannelRef7>:
    117e:	41 55 58 33 00                                      AUX3.

00001183 <ChannelRef6>:
    1183:	41 55 58 32 00                                      AUX2.

00001188 <ChannelRef5>:
    1188:	41 55 58 31 00                                      AUX1.

0000118d <ChannelRef4>:
    118d:	47 65 61 72 00                                      Gear.

00001192 <ChannelRef3>:
    1192:	52 75 64 64 65 72 00                                Rudder.

00001199 <ChannelRef2>:
    1199:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000011a2 <ChannelRef1>:
    11a2:	41 69 6c 65 72 6f 6e 00                             Aileron.

000011aa <ChannelRef0>:
    11aa:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000011b3 <MixerItem15>:
    11b3:	45 78 74 2e 20 53 6f 75 72 63 65 3a 00              Ext. Source:.

000011c0 <MixerItem3>:
    11c0:	50 69 74 63 68 20 61 63 63 3a 00                    Pitch acc:.

000011cb <MixerItem7>:
    11cb:	52 6f 6c 6c 20 61 63 63 3a 00                       Roll acc:.

000011d5 <MixerItem6>:
    11d5:	59 61 77 20 67 79 72 6f 3a 00                       Yaw gyro:.

000011df <MixerItem5>:
    11df:	50 69 74 63 68 20 67 79 72 6f 3a 00                 Pitch gyro:.

000011eb <MixerItem4>:
    11eb:	52 6f 6c 6c 20 67 79 72 6f 3a 00                    Roll gyro:.

000011f6 <MixerItem2>:
    11f6:	56 6f 6c 75 6d 65 28 25 29 3a 00                    Volume(%):.

00001201 <MixerItem13>:
    1201:	52 43 20 73 6f 75 72 63 65 20 42 3a 00              RC source B:.

0000120e <MixerItem0>:
    120e:	52 43 20 73 6f 75 72 63 65 20 41 3a 00              RC source A:.

0000121b <RXMode6>:
    121b:	4d 61 6e 75 61 6c 00                                Manual.

00001222 <RXMode5>:
    1222:	46 2e 57 69 6e 67 00                                F.Wing.

00001229 <RXMode4>:
    1229:	41 65 72 6f 00                                      Aero.

0000122e <MPU6050LPF7>:
    122e:	32 36 30 48 7a 00                                   260Hz.

00001234 <MPU6050LPF6>:
    1234:	31 38 34 48 7a 00                                   184Hz.

0000123a <MPU6050LPF5>:
    123a:	39 34 48 7a 00                                      94Hz.

0000123f <MPU6050LPF4>:
    123f:	34 34 48 7a 00                                      44Hz.

00001244 <MPU6050LPF3>:
    1244:	32 31 48 7a 00                                      21Hz.

00001249 <MPU6050LPF2>:
    1249:	31 30 48 7a 00                                      10Hz.

0000124e <MPU6050LPF1>:
    124e:	35 48 7a 00                                         5Hz.

00001252 <AutoMenuItem16>:
    1252:	54 48 52 2e 70 6f 73 20 25 3a 00                    THR.pos %:.

0000125d <GeneralText9>:
    125d:	4c 6f 63 6b 20 72 61 74 65 3a 00                    Lock rate:.

00001268 <GeneralText20>:
    1268:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001275 <GeneralText6>:
    1275:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

0000127f <GeneralText7>:
    127f:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

0000128b <GeneralText2>:
    128b:	4c 4d 41 20 74 69 6d 65 3a 00                       LMA time:.

00001295 <BattMenuItem2>:
    1295:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000012a2 <Contrast0>:
    12a2:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000012ac <MixerMenuItem0>:
    12ac:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000012b9 <RCMenuItem7>:
    12b9:	46 75 74 61 62 61 00                                Futaba.

000012c0 <RCMenuItem6>:
    12c0:	4a 52 00                                            JR.

000012c3 <RXMode1>:
    12c3:	58 74 72 65 6d 65 00                                Xtreme.

000012ca <RXMode3>:
    12ca:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000012d3 <RXMode2>:
    12d3:	53 2e 42 75 73 00                                   S.Bus.

000012d9 <RXMode0>:
    12d9:	43 50 50 4d 00                                      CPPM.

000012de <RCMenuItem101>:
    12de:	54 78 20 4f 75 74 3a 00                             Tx Out:.

000012e6 <RCMenuItem100>:
    12e6:	52 78 20 49 6e 3a 00                                Rx In:.

000012ed <RCMenuItem21>:
    12ed:	44 65 61 64 62 61 6e 64 28 25 29 3a 00              Deadband(%):.

000012fa <RCMenuItem20>:
    12fa:	46 6c 61 70 20 73 70 65 65 64 3a 00                 Flap speed:.

00001306 <RCMenuItem11>:
    1306:	44 69 66 66 65 72 65 6e 74 69 61 6c 3a 00           Differential:.

00001314 <StabMenuItem15>:
    1314:	44 79 6e 2e 47 61 69 6e 28 25 29 3a 00              Dyn.Gain(%):.

00001321 <StabMenuItem14>:
    1321:	44 79 6e 2e 47 61 69 6e 20 43 68 2e 3a 00           Dyn.Gain Ch.:.

0000132f <RCMenuItem4>:
    132f:	32 6e 64 20 41 69 6c 2e 20 43 68 61 6e 2e 3a 00     2nd Ail. Chan.:.

0000133f <RCMenuItem2>:
    133f:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

0000134e <RCMenuItem0>:
    134e:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001359 <RCMenuItem51>:
    1359:	52 58 20 74 79 70 65 20 4f 55 54 3a 00              RX type OUT:.

00001366 <RCMenuItem1>:
    1366:	52 58 20 74 79 70 65 20 49 4e 3a 00                 RX type IN:.

00001372 <AutoMenuItem17>:
    1372:	48 61 6e 64 73 20 46 72 65 65 00                    Hands Free.

0000137d <AutoMenuItem15>:
    137d:	4f 4e 00                                            ON.

00001380 <AutoMenuItem11>:
    1380:	4f 46 46 00                                         OFF.

00001384 <StabMenuItem30>:
    1384:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

0000138e <StabMenuItem12>:
    138e:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

0000139b <StabMenuItem9>:
    139b:	59 61 77 20 44 3a 00                                Yaw D:.

000013a2 <StabMenuItem8>:
    13a2:	59 61 77 20 49 3a 00                                Yaw I:.

000013a9 <StabMenuItem7>:
    13a9:	59 61 77 20 50 3a 00                                Yaw P:.

000013b0 <GyroType3>:
    13b0:	59 61 77 20 67 79 72 6f 3a 00                       Yaw gyro:.

000013ba <AutoMenuItem8>:
    13ba:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000013c6 <AutoMenuItem21>:
    13c6:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000013d5 <StabMenuItem11>:
    13d5:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000013e4 <StabMenuItem6>:
    13e4:	50 69 74 63 68 20 44 3a 00                          Pitch D:.

000013ed <StabMenuItem5>:
    13ed:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000013f6 <AutoMenuItem4>:
    13f6:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000013ff <GyroType2>:
    13ff:	50 69 74 63 68 20 67 79 72 6f 3a 00                 Pitch gyro:.

0000140b <AutoMenuItem7>:
    140b:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00001416 <AutoMenuItem20>:
    1416:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001424 <StabMenuItem10>:
    1424:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001432 <StabMenuItem3>:
    1432:	52 6f 6c 6c 20 44 3a 00                             Roll D:.

0000143a <StabMenuItem2>:
    143a:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001442 <AutoMenuItem1>:
    1442:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

0000144a <GyroType1>:
    144a:	52 6f 6c 6c 20 67 79 72 6f 3a 00                    Roll gyro:.

00001455 <AutoMenuItem9>:
    1455:	41 75 74 6f 6c 65 76 65 6c 3a 00                    Autolevel:.

00001460 <AutoMenuItem10>:
    1460:	53 74 61 62 69 6c 69 74 79 3a 00                    Stability:.

0000146b <SensorMenuItem3>:
    146b:	46 61 69 6c 73 61 66 65 00                          Failsafe.

00001474 <SensorMenuItem2>:
    1474:	49 6e 76 2e 00                                      Inv..

00001479 <SensorMenuItem1>:
    1479:	43 61 6c 2e 00                                      Cal..

0000147e <PText19>:
    147e:	41 63 63 00                                         Acc.

00001482 <PText18>:
    1482:	59 61 77 00                                         Yaw.

00001486 <PText17>:
    1486:	50 69 74 63 68 00                                   Pitch.

0000148c <PText16>:
    148c:	52 6f 6c 6c 00                                      Roll.

00001491 <PText15>:
    1491:	47 79 72 6f 00                                      Gyro.

00001496 <MainMenuItem24>:
    1496:	32 33 2e 20 46 61 69 6c 73 61 66 65 20 70 6f 73     23. Failsafe pos
    14a6:	69 74 69 6f 6e 73 00                                itions.

000014ad <MainMenuItem4>:
    14ad:	32 32 2e 20 46 61 69 6c 73 61 66 65 20 73 65 74     22. Failsafe set
    14bd:	74 69 6e 67 73 00                                   tings.

000014c3 <MainMenuItem23>:
    14c3:	32 31 2e 20 50 6f 73 2e 20 74 72 61 76 65 6c 2e     21. Pos. travel.
    14d3:	20 28 25 29 00                                       (%).

000014d8 <MainMenuItem22>:
    14d8:	32 30 2e 20 4e 65 67 2e 20 74 72 61 76 65 6c 2e     20. Neg. travel.
    14e8:	20 28 25 29 00                                       (%).

000014ed <MainMenuItem21>:
    14ed:	31 39 2e 20 43 68 61 6e 6e 65 6c 20 74 72 69 6d     19. Channel trim
    14fd:	20 28 25 29 00                                       (%).

00001502 <MainMenuItem20>:
    1502:	31 38 2e 20 43 68 2e 20 64 69 72 65 63 74 69 6f     18. Ch. directio
    1512:	6e 00                                               n.

00001514 <MainMenuItem18>:
    1514:	31 37 2e 20 43 48 38 20 4d 69 78 65 72 00           17. CH8 Mixer.

00001522 <MainMenuItem17>:
    1522:	31 36 2e 20 43 48 37 20 4d 69 78 65 72 00           16. CH7 Mixer.

00001530 <MainMenuItem16>:
    1530:	31 35 2e 20 43 48 36 20 4d 69 78 65 72 00           15. CH6 Mixer.

0000153e <MainMenuItem15>:
    153e:	31 34 2e 20 43 48 35 20 4d 69 78 65 72 00           14. CH5 Mixer.

0000154c <MainMenuItem14>:
    154c:	31 33 2e 20 43 48 34 20 4d 69 78 65 72 00           13. CH4 Mixer.

0000155a <MainMenuItem13>:
    155a:	31 32 2e 20 43 48 33 20 4d 69 78 65 72 00           12. CH3 Mixer.

00001568 <MainMenuItem12>:
    1568:	31 31 2e 20 43 48 32 20 4d 69 78 65 72 00           11. CH2 Mixer.

00001576 <MainMenuItem110>:
    1576:	31 30 2e 20 43 48 31 20 4d 69 78 65 72 00           10. CH1 Mixer.

00001584 <MainMenuItem10>:
    1584:	39 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        9. Level meter.

00001593 <MainMenuItem8>:
    1593:	38 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     8. Sensor calibr
    15a3:	61 74 69 6f 6e 00                                   ation.

000015a9 <MainMenuItem11>:
    15a9:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    15b9:	65 20 33 00                                         e 3.

000015bd <MainMenuItem3>:
    15bd:	36 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     6. Flight profil
    15cd:	65 20 32 00                                         e 2.

000015d1 <MainMenuItem2>:
    15d1:	35 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     5. Flight profil
    15e1:	65 20 31 00                                         e 1.

000015e5 <MainMenuItem9>:
    15e5:	34 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     4. Receiver inpu
    15f5:	74 73 00                                            ts.

000015f8 <MainMenuItem7>:
    15f8:	33 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     3. Stick polarit
    1608:	79 00                                               y.

0000160a <MainMenuItem1>:
    160a:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    161a:	70 00                                               p.

0000161c <MainMenuItem0>:
    161c:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001627 <MenuFrame8>:
    1627:	53 61 76 65 00                                      Save.

0000162c <MenuFrame7>:
    162c:	44 65 66 2e 00                                      Def..

00001631 <MenuFrame6>:
    1631:	42 61 63 6b 00                                      Back.

00001636 <MenuFrame5>:
    1636:	4d 65 6e 75 00                                      Menu.

0000163b <MenuFrame1>:
    163b:	45 00                                               E.

0000163d <MenuFrame4>:
    163d:	44 00                                               D.

0000163f <MenuFrame3>:
    163f:	43 00                                               C.

00001641 <MenuFrame2>:
    1641:	42 00                                               B.

00001643 <MenuFrame0>:
    1643:	41 00                                               A.

00001645 <StatusText7>:
    1645:	50 72 65 73 65 74 3a 00                             Preset:.

0000164d <StatusText5>:
    164d:	30 00                                               0.

0000164f <StatusText4>:
    164f:	2e 00                                               ..

00001651 <StatusText3>:
    1651:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

0000165a <StatusText1>:
    165a:	4d 6f 64 65 3a 00                                   Mode:.

00001660 <StatusText0>:
    1660:	56 65 72 73 69 6f 6e 3a 20 20 20 53 31 2e 30 20     Version:   S1.0 
    1670:	41 36 00                                            A6.

00001673 <Gyro_Pol>:
    1673:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1683:	01 01                                               ..

00001685 <Gyro_RPY_Order>:
    1685:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1695:	01 00                                               ..

00001697 <LPF_lookup>:
    1697:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    16a7:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

000016b7 <lines>:
    16b7:	03 0f 1b 27                                         ...'

000016bb <flight_menu_ranges>:
    16bb:	00 01 01 01 00 00 02 01 01 00 00 01 01 01 00 00     ................
    16cb:	7f 01 00 50 00 7f 01 00 00 00 7f 01 00 00 00 7d     ...P...........}
    16db:	01 00 00 00 7f 01 00 3c 81 7f 01 00 00 00 01 01     .......<........
    16eb:	01 00 00 7f 01 00 50 00 7f 01 00 00 00 7f 01 00     ......P.........
    16fb:	00 00 7d 01 00 00 00 7f 01 00 3c 81 7f 01 00 00     ..}.......<.....
    170b:	00 01 01 01 00 00 7f 01 00 50 00 7f 01 00 00 00     .........P......
    171b:	7f 01 00 00 00 7d 01 00 00 81 7f 01 00 00           .....}........

00001729 <FlightMenuText>:
    1729:	26 26 2c 00 00 00 00 00 00 2c 00 00 00 00 00 00     &&,......,......
    1739:	2c 00 00 00 00 00                                   ,.....

0000173f <mixer_menu_ranges>:
    173f:	00 08 01 01 00 83 7d 01 00 00 00 08 01 01 08 83     ......}.........
    174f:	7d 01 00 00 00 02 01 01 00 00 02 01 01 00 00 02     }...............
    175f:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 0f 01     ................
    176f:	01 0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00     ...}.........}..
	...

00001780 <MixerMenuText>:
    1780:	69 00 69 00 8f 8f 8f 8f 8f b0 00 b0 00              i.i..........

0000178d <servo_menu_ranges>:
    178d:	00 01 01 01 00 83 7d 01 03 00 83 00 01 03 9c 00     ......}.........
    179d:	7d 01 03 64 83 7d 01 03 00                          }..d.}...

000017a6 <ServoMenuText>:
    17a6:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

000017ce <rc_menu_ranges>:
    17ce:	00 03 01 01 01 01 03 01 01 01 00 01 01 01 00 00     ................
    17de:	08 01 01 04 00 08 01 01 08 00 08 01 01 05 00 64     ...............d
    17ee:	05 00 64 00 64 01 00 00 00 14 01 00 00 00 04 01     ..d.d...........
    17fe:	00 03 00 05 01 00 02 00 02 01 01 00 9c 64 01 00     .............d..
    180e:	9c 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00     ..}....}....}...
	...
    183a:	00 00 00 02 01 01 00 00 05 01 01 00 1c 32 01 00     .............2..
    184a:	24 00 08 01 01 00 00 1e 01 00 03 01 0a 01 00 07     $...............
    185a:	00 07 01 01 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00001873 <RCMenuText>:
    1873:	30 30 74 69 69 69 00 00 00 00 00 38 00 00 00 00     00tiii.....8....
    1883:	00 00 00 00 00 00 16 7c 00 3e 00 00 f1 00 00 00     .......|.>......
	...

00001894 <FLYING_WING_MIX>:
    1894:	00 00 00 64 08 00 00 00 00 00 00 0f 00 0f 00 00     ...d............
    18a4:	00 01 32 02 32 00 00 00 00 00 0f 00 0f 00 00 00     ..2.2...........
    18b4:	01 ce 02 32 00 00 00 00 00 0f 00 0f 00 00 00 03     ...2............
    18c4:	64 08 00 00 00 00 00 00 0f 00 0f 00 00 00 04 00     d...............
    18d4:	08 00 00 00 00 00 00 0f 00 0f 00 00 00 05 00 08     ................
    18e4:	00 00 00 00 00 00 0f 00 0f 00 00 00 06 00 08 00     ................
    18f4:	00 00 00 00 00 0f 00 0f 00 00 00 07 00 08 00 00     ................
    1904:	00 00 00 00 0f 00 0f 00                             ........

0000190c <AEROPLANE_MIX>:
    190c:	00 00 00 64 08 00 00 00 00 00 00 0f 00 0f 00 00     ...d............
    191c:	00 01 64 08 00 00 00 00 00 00 0f 00 0f 00 00 00     ..d.............
    192c:	02 64 08 00 00 00 00 00 00 0f 00 0f 00 00 00 03     .d..............
    193c:	64 08 00 00 00 00 00 00 0f 00 0f 00 00 00 04 64     d..............d
    194c:	08 00 00 00 00 00 00 0f 00 0f 00 00 00 05 64 08     ..............d.
    195c:	00 00 00 00 00 00 0f 00 0f 00 00 00 06 64 08 00     .............d..
    196c:	00 00 00 00 00 0f 00 0f 00 00 00 07 64 08 00 00     ............d...
    197c:	00 00 00 00 0f 00 0f 00                             ........

00001984 <__ctors_end>:
    1984:	11 24       	eor	r1, r1
    1986:	1f be       	out	0x3f, r1	; 63
    1988:	cf ef       	ldi	r28, 0xFF	; 255
    198a:	d8 e0       	ldi	r29, 0x08	; 8
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	cd bf       	out	0x3d, r28	; 61

00001990 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1990:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1992:	88 e1       	ldi	r24, 0x18	; 24
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	80 93 60 00 	sts	0x0060, r24
    199c:	10 92 60 00 	sts	0x0060, r1
    19a0:	0f be       	out	0x3f, r0	; 63

000019a2 <__do_copy_data>:
    19a2:	11 e0       	ldi	r17, 0x01	; 1
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	e4 ed       	ldi	r30, 0xD4	; 212
    19aa:	fd e7       	ldi	r31, 0x7D	; 125
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <__do_copy_data+0x10>
    19ae:	05 90       	lpm	r0, Z+
    19b0:	0d 92       	st	X+, r0
    19b2:	ac 30       	cpi	r26, 0x0C	; 12
    19b4:	b1 07       	cpc	r27, r17
    19b6:	d9 f7       	brne	.-10     	; 0x19ae <__do_copy_data+0xc>

000019b8 <__do_clear_bss>:
    19b8:	27 e0       	ldi	r18, 0x07	; 7
    19ba:	ac e0       	ldi	r26, 0x0C	; 12
    19bc:	b1 e0       	ldi	r27, 0x01	; 1
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <.do_clear_bss_start>

000019c0 <.do_clear_bss_loop>:
    19c0:	1d 92       	st	X+, r1

000019c2 <.do_clear_bss_start>:
    19c2:	a1 3f       	cpi	r26, 0xF1	; 241
    19c4:	b2 07       	cpc	r27, r18
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <.do_clear_bss_loop>
    19c8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <main>
    19cc:	0c 94 e8 3e 	jmp	0x7dd0	; 0x7dd0 <_exit>

000019d0 <__bad_interrupt>:
    19d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000019d4 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    19d4:	00 00       	nop
	ret					// 4 (5 cycles)
    19d6:	08 95       	ret

000019d8 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    19d8:	fd df       	rcall	.-6      	; 0x19d4 <glcd_delay>
	rcall	glcd_delay
    19da:	fc df       	rcall	.-8      	; 0x19d4 <glcd_delay>
	rcall	glcd_delay
    19dc:	fb df       	rcall	.-10     	; 0x19d4 <glcd_delay>
	rcall	glcd_delay
    19de:	fa df       	rcall	.-12     	; 0x19d4 <glcd_delay>
	ret
    19e0:	08 95       	ret

000019e2 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    19e2:	cf 93       	push	r28

000019e4 <master_loop>:

master_loop:
	cbi 	BIND		//	2
    19e4:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    19e6:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    19e8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <VarDelay>
	sbi		BIND		//	2
    19ec:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    19ee:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    19f0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <VarDelay>
	dec		r24
    19f4:	8a 95       	dec	r24
	brne	master_loop	//  2 1
    19f6:	b1 f7       	brne	.-20     	; 0x19e4 <master_loop>

	pop		YL			//	  1
    19f8:	cf 91       	pop	r28
	ret					//	  4 
    19fa:	08 95       	ret

000019fc <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    19fc:	00 c0       	rjmp	.+0      	; 0x19fe <VarDelay+0x2>
	rjmp .+0			// 2
    19fe:	00 c0       	rjmp	.+0      	; 0x1a00 <VarDelay+0x4>
	rjmp .+0			// 2
    1a00:	00 c0       	rjmp	.+0      	; 0x1a02 <VarDelay+0x6>
	rjmp .+0			// 2
    1a02:	00 c0       	rjmp	.+0      	; 0x1a04 <VarDelay+0x8>
	rjmp .+0			// 2
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <VarDelay+0xa>
	rjmp .+0			// 2
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <VarDelay+0xc>
	rjmp .+0			// 2
    1a08:	00 c0       	rjmp	.+0      	; 0x1a0a <VarDelay+0xe>
	rjmp .+0			// 2
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <VarDelay+0x10>
	nop					// 1
    1a0c:	00 00       	nop
	dec 	YL			// 1
    1a0e:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1a10:	a9 f7       	brne	.-22     	; 0x19fc <VarDelay>
	ret					//   4 
    1a12:	08 95       	ret

00001a14 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1a14:	a6 e0       	ldi	r26, 0x06	; 6
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e0 e1       	ldi	r30, 0x10	; 16
    1a1a:	fd e0       	ldi	r31, 0x0D	; 13
    1a1c:	0c 94 3b 3e 	jmp	0x7c76	; 0x7c76 <__prologue_saves__+0x20>
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

#else
	// Get data from analog inputs for KK2.0
	read_adc(AIN_Y_ACC);		// Read Y acc ADC4 (Roll)
    1a20:	86 e0       	ldi	r24, 0x06	; 6
    1a22:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	RawADC[ROLL] = ADCW;
    1a26:	80 91 78 00 	lds	r24, 0x0078
    1a2a:	90 91 79 00 	lds	r25, 0x0079
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01

	read_adc(AIN_X_ACC);		// Read X acc ADC5 (Pitch)
    1a32:	85 e0       	ldi	r24, 0x05	; 5
    1a34:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	RawADC[PITCH] = ADCW;
    1a38:	80 91 78 00 	lds	r24, 0x0078
    1a3c:	90 91 79 00 	lds	r25, 0x0079
    1a40:	9c 83       	std	Y+4, r25	; 0x04
    1a42:	8b 83       	std	Y+3, r24	; 0x03

	read_adc(AIN_Z_ACC);		// Read Z acc ADC2 (Z)
    1a44:	87 e0       	ldi	r24, 0x07	; 7
    1a46:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	RawADC[YAW] = ADCW;
    1a4a:	80 91 78 00 	lds	r24, 0x0078
    1a4e:	90 91 79 00 	lds	r25, 0x0079
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1a56:	20 91 7d 06 	lds	r18, 0x067D
    1a5a:	ae e3       	ldi	r26, 0x3E	; 62
    1a5c:	b1 e0       	ldi	r27, 0x01	; 1
    1a5e:	43 e0       	ldi	r20, 0x03	; 3
    1a60:	24 02       	muls	r18, r20
    1a62:	90 01       	movw	r18, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	2c 51       	subi	r18, 0x1C	; 28
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	f9 01       	movw	r30, r18
    1a70:	e8 0f       	add	r30, r24
    1a72:	f9 1f       	adc	r31, r25
    1a74:	e4 91       	lpm	r30, Z
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 0b       	sbc	r31, r31
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	4c 0f       	add	r20, r28
    1a80:	5d 1f       	adc	r21, r29
    1a82:	e4 0f       	add	r30, r20
    1a84:	f5 1f       	adc	r31, r21
    1a86:	40 81       	ld	r20, Z
    1a88:	51 81       	ldd	r21, Z+1	; 0x01
    1a8a:	4d 93       	st	X+, r20
    1a8c:	5d 93       	st	X+, r21
    1a8e:	01 96       	adiw	r24, 0x01	; 1
	RawADC[YAW] = ADCW;

#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	61 f7       	brne	.-40     	; 0x1a6e <get_raw_accs+0x5a>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1a96:	26 96       	adiw	r28, 0x06	; 6
    1a98:	e2 e0       	ldi	r30, 0x02	; 2
    1a9a:	0c 94 57 3e 	jmp	0x7cae	; 0x7cae <__epilogue_restores__+0x20>

00001a9e <ReadAcc>:
//************************************************************

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order

void ReadAcc()
{
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1aa4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1aa8:	80 91 53 07 	lds	r24, 0x0753
    1aac:	80 fd       	sbrc	r24, 0
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <ReadAcc+0x18>
	{
#ifdef KK21 
		Config.AccZero[YAW] = 0;
#else
		Config.AccZero[YAW] = 643;
    1ab0:	83 e8       	ldi	r24, 0x83	; 131
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	0a c0       	rjmp	.+20     	; 0x1aca <ReadAcc+0x2c>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1ab6:	80 91 3a 07 	lds	r24, 0x073A
    1aba:	90 91 3b 07 	lds	r25, 0x073B
    1abe:	20 91 3e 07 	lds	r18, 0x073E
    1ac2:	30 91 3f 07 	lds	r19, 0x073F
    1ac6:	82 1b       	sub	r24, r18
    1ac8:	93 0b       	sbc	r25, r19
    1aca:	90 93 39 07 	sts	0x0739, r25
    1ace:	80 93 38 07 	sts	0x0738, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1ad2:	20 91 7d 06 	lds	r18, 0x067D
    1ad6:	c4 e3       	ldi	r28, 0x34	; 52
    1ad8:	d7 e0       	ldi	r29, 0x07	; 7
    1ada:	ae e3       	ldi	r26, 0x3E	; 62
    1adc:	b1 e0       	ldi	r27, 0x01	; 1
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	28 02       	muls	r18, r24
    1ae2:	90 01       	movw	r18, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	2e 52       	subi	r18, 0x2E	; 46
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1aee:	69 91       	ld	r22, Y+
    1af0:	79 91       	ld	r23, Y+
    1af2:	f9 01       	movw	r30, r18
    1af4:	e8 0f       	add	r30, r24
    1af6:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1af8:	14 91       	lpm	r17, Z
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1afa:	4d 91       	ld	r20, X+
    1afc:	5c 91       	ld	r21, X
    1afe:	11 97       	sbiw	r26, 0x01	; 1
    1b00:	46 1b       	sub	r20, r22
    1b02:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1b04:	14 03       	mulsu	r17, r20
    1b06:	b0 01       	movw	r22, r0
    1b08:	15 9f       	mul	r17, r21
    1b0a:	70 0d       	add	r23, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	6d 93       	st	X+, r22
    1b10:	7d 93       	st	X+, r23
    1b12:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i<NUMBEROFAXIS; i++)
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	51 f7       	brne	.-44     	; 0x1aee <ReadAcc+0x50>
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
	}
}
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	08 95       	ret

00001b22 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1b22:	a6 e0       	ldi	r26, 0x06	; 6
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e7 e9       	ldi	r30, 0x97	; 151
    1b28:	fd e0       	ldi	r31, 0x0D	; 13
    1b2a:	0c 94 3a 3e 	jmp	0x7c74	; 0x7c74 <__prologue_saves__+0x1e>
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1b2e:	1a 82       	std	Y+2, r1	; 0x02
    1b30:	19 82       	std	Y+1, r1	; 0x01
    1b32:	1c 82       	std	Y+4, r1	; 0x04
    1b34:	1b 82       	std	Y+3, r1	; 0x03
    1b36:	1e 82       	std	Y+6, r1	; 0x06
    1b38:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	72 c0       	rjmp	.+228    	; 0x1c22 <CalibrateAcc+0x100>
    1b3e:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1b40:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	20 91 3e 01 	lds	r18, 0x013E
    1b4c:	30 91 3f 01 	lds	r19, 0x013F
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	20 91 40 01 	lds	r18, 0x0140
    1b60:	30 91 41 01 	lds	r19, 0x0141
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	20 91 42 01 	lds	r18, 0x0142
    1b74:	30 91 43 01 	lds	r19, 0x0143
    1b78:	82 0f       	add	r24, r18
    1b7a:	93 1f       	adc	r25, r19
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b80:	8f e4       	ldi	r24, 0x4F	; 79
    1b82:	93 ec       	ldi	r25, 0xC3	; 195
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <CalibrateAcc+0x62>
    1b88:	00 c0       	rjmp	.+0      	; 0x1b8a <CalibrateAcc+0x68>
    1b8a:	00 00       	nop
    1b8c:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
    1b8e:	c1 f6       	brne	.-80     	; 0x1b40 <CalibrateAcc+0x1e>
    1b90:	fe 01       	movw	r30, r28
    1b92:	31 96       	adiw	r30, 0x01	; 1
    1b94:	9e 01       	movw	r18, r28
    1b96:	29 5f       	subi	r18, 0xF9	; 249
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	40 96       	adiw	r24, 0x10	; 16
    1ba0:	a5 e0       	ldi	r26, 0x05	; 5
    1ba2:	95 95       	asr	r25
    1ba4:	87 95       	ror	r24
    1ba6:	aa 95       	dec	r26
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <CalibrateAcc+0x80>
    1baa:	81 93       	st	Z+, r24
    1bac:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
    1bae:	e2 17       	cp	r30, r18
    1bb0:	f3 07       	cpc	r31, r19
    1bb2:	99 f7       	brne	.-26     	; 0x1b9a <CalibrateAcc+0x78>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL];
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	90 93 35 07 	sts	0x0735, r25
    1bbc:	80 93 34 07 	sts	0x0734, r24
		Config.AccZero[PITCH] = accZero[PITCH];
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	90 93 37 07 	sts	0x0737, r25
    1bc8:	80 93 36 07 	sts	0x0736, r24
		Config.AccZeroNormZ = accZero[YAW];
		
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    1bcc:	80 91 7d 06 	lds	r24, 0x067D
    1bd0:	99 27       	eor	r25, r25
    1bd2:	87 fd       	sbrc	r24, 7
    1bd4:	90 95       	com	r25
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	e8 0f       	add	r30, r24
    1bde:	f9 1f       	adc	r31, r25
    1be0:	ec 52       	subi	r30, 0x2C	; 44
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	44 91       	lpm	r20, Z
    1be6:	2d 81       	ldd	r18, Y+5	; 0x05
    1be8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bea:	42 03       	mulsu	r20, r18
    1bec:	c0 01       	movw	r24, r0
    1bee:	43 9f       	mul	r20, r19
    1bf0:	90 0d       	add	r25, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	90 93 3b 07 	sts	0x073B, r25
    1bf8:	80 93 3a 07 	sts	0x073A, r24
		
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    1bfc:	80 91 53 07 	lds	r24, 0x0753
    1c00:	82 60       	ori	r24, 0x02	; 2
    1c02:	80 93 53 07 	sts	0x0753, r24
		
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    1c06:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
		LED1 = 1;
    1c0a:	2b 9a       	sbi	0x05, 3	; 5
    1c0c:	9f e7       	ldi	r25, 0x7F	; 127
    1c0e:	24 e8       	ldi	r18, 0x84	; 132
    1c10:	4e e1       	ldi	r20, 0x1E	; 30
    1c12:	91 50       	subi	r25, 0x01	; 1
    1c14:	20 40       	sbci	r18, 0x00	; 0
    1c16:	40 40       	sbci	r20, 0x00	; 0
    1c18:	e1 f7       	brne	.-8      	; 0x1c12 <CalibrateAcc+0xf0>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <CalibrateAcc+0xfa>
    1c1c:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    1c1e:	2b 98       	cbi	0x05, 3	; 5
    1c20:	72 c0       	rjmp	.+228    	; 0x1d06 <CalibrateAcc+0x1e4>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    1c22:	80 91 53 07 	lds	r24, 0x0753
    1c26:	81 ff       	sbrs	r24, 1
    1c28:	6e c0       	rjmp	.+220    	; 0x1d06 <CalibrateAcc+0x1e4>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    1c2a:	10 92 3d 07 	sts	0x073D, r1
    1c2e:	10 92 3c 07 	sts	0x073C, r1
    1c32:	10 e2       	ldi	r17, 0x20	; 32

			for (i=0; i<32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    1c34:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    1c38:	80 91 3c 07 	lds	r24, 0x073C
    1c3c:	90 91 3d 07 	lds	r25, 0x073D
    1c40:	20 91 42 01 	lds	r18, 0x0142
    1c44:	30 91 43 01 	lds	r19, 0x0143
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	90 93 3d 07 	sts	0x073D, r25
    1c50:	80 93 3c 07 	sts	0x073C, r24
    1c54:	8f e4       	ldi	r24, 0x4F	; 79
    1c56:	93 ec       	ldi	r25, 0xC3	; 195
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <CalibrateAcc+0x136>
    1c5c:	00 c0       	rjmp	.+0      	; 0x1c5e <CalibrateAcc+0x13c>
    1c5e:	00 00       	nop
    1c60:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i=0; i<32; i++)
    1c62:	41 f7       	brne	.-48     	; 0x1c34 <CalibrateAcc+0x112>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    1c64:	80 91 7d 06 	lds	r24, 0x067D
    1c68:	99 27       	eor	r25, r25
    1c6a:	87 fd       	sbrc	r24, 7
    1c6c:	90 95       	com	r25
    1c6e:	fc 01       	movw	r30, r24
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	e8 0f       	add	r30, r24
    1c76:	f9 1f       	adc	r31, r25
    1c78:	ec 52       	subi	r30, 0x2C	; 44
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    1c7e:	20 91 3c 07 	lds	r18, 0x073C
    1c82:	30 91 3d 07 	lds	r19, 0x073D
    1c86:	20 5f       	subi	r18, 0xF0	; 240
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	65 e0       	ldi	r22, 0x05	; 5
    1c8c:	35 95       	asr	r19
    1c8e:	27 95       	ror	r18
    1c90:	6a 95       	dec	r22
    1c92:	e1 f7       	brne	.-8      	; 0x1c8c <CalibrateAcc+0x16a>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    1c94:	42 03       	mulsu	r20, r18
    1c96:	c0 01       	movw	r24, r0
    1c98:	43 9f       	mul	r20, r19
    1c9a:	90 0d       	add	r25, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	90 93 3d 07 	sts	0x073D, r25
    1ca2:	80 93 3c 07 	sts	0x073C, r24
			// Test if board is actually inverted relative to board orientation.
#ifdef KK21
			if (Config.AccZeroInvZ < 0)
#else
			// KK2.0 accs are not centered on zero
			if	(Config.AccZeroInvZ < Config.AccZero[YAW])
    1ca6:	20 91 38 07 	lds	r18, 0x0738
    1caa:	30 91 39 07 	lds	r19, 0x0739
    1cae:	82 17       	cp	r24, r18
    1cb0:	93 07       	cpc	r25, r19
    1cb2:	48 f5       	brcc	.+82     	; 0x1d06 <CalibrateAcc+0x1e4>
#endif
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    1cb4:	20 91 3a 07 	lds	r18, 0x073A
    1cb8:	30 91 3b 07 	lds	r19, 0x073B
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	48 1b       	sub	r20, r24
    1cc0:	59 0b       	sbc	r21, r25
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	95 95       	asr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	90 93 3f 07 	sts	0x073F, r25
    1ccc:	80 93 3e 07 	sts	0x073E, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    1cd0:	28 1b       	sub	r18, r24
    1cd2:	39 0b       	sbc	r19, r25
    1cd4:	30 93 39 07 	sts	0x0739, r19
    1cd8:	20 93 38 07 	sts	0x0738, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    1cdc:	80 91 53 07 	lds	r24, 0x0753
    1ce0:	81 60       	ori	r24, 0x01	; 1
    1ce2:	80 93 53 07 	sts	0x0753, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    1ce6:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
				LED1 = 1;
    1cea:	2b 9a       	sbi	0x05, 3	; 5
    1cec:	5f e7       	ldi	r21, 0x7F	; 127
    1cee:	84 e8       	ldi	r24, 0x84	; 132
    1cf0:	9e e1       	ldi	r25, 0x1E	; 30
    1cf2:	51 50       	subi	r21, 0x01	; 1
    1cf4:	80 40       	sbci	r24, 0x00	; 0
    1cf6:	90 40       	sbci	r25, 0x00	; 0
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <CalibrateAcc+0x1d0>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <CalibrateAcc+0x1da>
    1cfc:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    1cfe:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    1d00:	85 e0       	ldi	r24, 0x05	; 5
    1d02:	0e 94 05 29 	call	0x520a	; 0x520a <menu_beep>
			}
		}
	}
}
    1d06:	26 96       	adiw	r28, 0x06	; 6
    1d08:	e3 e0       	ldi	r30, 0x03	; 3
    1d0a:	0c 94 56 3e 	jmp	0x7cac	; 0x7cac <__epilogue_restores__+0x1e>

00001d0e <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    1d14:	10 92 7b 00 	sts	0x007B, r1
    1d18:	08 95       	ret

00001d1a <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    1d1a:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    1d1e:	86 ec       	ldi	r24, 0xC6	; 198
    1d20:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    1d24:	80 91 7a 00 	lds	r24, 0x007A
    1d28:	86 fd       	sbrc	r24, 6
    1d2a:	fc cf       	rjmp	.-8      	; 0x1d24 <read_adc+0xa>
}
    1d2c:	08 95       	ret

00001d2e <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	0f 93       	push	r16
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    1d3a:	cb e0       	ldi	r28, 0x0B	; 11
    1d3c:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    1d3e:	1f 9b       	sbis	0x03, 7	; 3
    1d40:	7e c0       	rjmp	.+252    	; 0x1e3e <Display_balance+0x110>
	{
		// Read accs
		ReadAcc();
    1d42:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <imu_update>
    1d50:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    1d52:	20 97       	sbiw	r28, 0x00	; 0
    1d54:	a1 f7       	brne	.-24     	; 0x1d3e <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	52 e4       	ldi	r21, 0x42	; 66
    1d5e:	60 91 ae 05 	lds	r22, 0x05AE
    1d62:	70 91 af 05 	lds	r23, 0x05AF
    1d66:	80 91 b0 05 	lds	r24, 0x05B0
    1d6a:	90 91 b1 05 	lds	r25, 0x05B1
    1d6e:	0e 94 93 3b 	call	0x7726	; 0x7726 <__addsf3>
    1d72:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    1d76:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	52 e4       	ldi	r21, 0x42	; 66
    1d80:	60 91 aa 05 	lds	r22, 0x05AA
    1d84:	70 91 ab 05 	lds	r23, 0x05AB
    1d88:	80 91 ac 05 	lds	r24, 0x05AC
    1d8c:	90 91 ad 05 	lds	r25, 0x05AD
    1d90:	0e 94 93 3b 	call	0x7726	; 0x7726 <__addsf3>
    1d94:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    1d98:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    1d9a:	d7 fd       	sbrc	r29, 7
    1d9c:	06 c0       	rjmp	.+12     	; 0x1daa <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    1d9e:	c1 34       	cpi	r28, 0x41	; 65
    1da0:	d1 05       	cpc	r29, r1
    1da2:	2c f0       	brlt	.+10     	; 0x1dae <Display_balance+0x80>
    1da4:	c0 e4       	ldi	r28, 0x40	; 64
    1da6:	d0 e0       	ldi	r29, 0x00	; 0
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    1daa:	c0 e0       	ldi	r28, 0x00	; 0
    1dac:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    1dae:	d7 fc       	sbrc	r13, 7
    1db0:	08 c0       	rjmp	.+16     	; 0x1dc2 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    1db2:	81 e8       	ldi	r24, 0x81	; 129
    1db4:	c8 16       	cp	r12, r24
    1db6:	d1 04       	cpc	r13, r1
    1db8:	34 f0       	brlt	.+12     	; 0x1dc6 <Display_balance+0x98>
    1dba:	80 e8       	ldi	r24, 0x80	; 128
    1dbc:	c8 2e       	mov	r12, r24
    1dbe:	d1 2c       	mov	r13, r1
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    1dc2:	c1 2c       	mov	r12, r1
    1dc4:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    1dc6:	27 e3       	ldi	r18, 0x37	; 55
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	42 e0       	ldi	r20, 0x02	; 2
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	66 e0       	ldi	r22, 0x06	; 6
    1dd0:	71 e0       	ldi	r23, 0x01	; 1
    1dd2:	8c e0       	ldi	r24, 0x0C	; 12
    1dd4:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    1dd8:	ee 24       	eor	r14, r14
    1dda:	e3 94       	inc	r14
    1ddc:	00 e4       	ldi	r16, 0x40	; 64
    1dde:	20 e8       	ldi	r18, 0x80	; 128
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	85 e4       	ldi	r24, 0x45	; 69
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	0e 94 53 19 	call	0x32a6	; 0x32a6 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    1dec:	05 e1       	ldi	r16, 0x15	; 21
    1dee:	25 e1       	ldi	r18, 0x15	; 21
    1df0:	46 e1       	ldi	r20, 0x16	; 22
    1df2:	66 e3       	ldi	r22, 0x36	; 54
    1df4:	85 e4       	ldi	r24, 0x45	; 69
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	0e 94 53 19 	call	0x32a6	; 0x32a6 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    1dfc:	08 e3       	ldi	r16, 0x38	; 56
    1dfe:	20 e4       	ldi	r18, 0x40	; 64
    1e00:	48 e0       	ldi	r20, 0x08	; 8
    1e02:	60 e4       	ldi	r22, 0x40	; 64
    1e04:	85 e4       	ldi	r24, 0x45	; 69
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	0e 94 cb 18 	call	0x3196	; 0x3196 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    1e0c:	00 e2       	ldi	r16, 0x20	; 32
    1e0e:	20 e6       	ldi	r18, 0x60	; 96
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	60 e2       	ldi	r22, 0x20	; 32
    1e14:	85 e4       	ldi	r24, 0x45	; 69
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	0e 94 cb 18 	call	0x3196	; 0x3196 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    1e1c:	01 e0       	ldi	r16, 0x01	; 1
    1e1e:	28 e0       	ldi	r18, 0x08	; 8
    1e20:	4c 2f       	mov	r20, r28
    1e22:	6c 2d       	mov	r22, r12
    1e24:	85 e4       	ldi	r24, 0x45	; 69
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	0e 94 99 19 	call	0x3332	; 0x3332 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    1e2c:	85 e4       	ldi	r24, 0x45	; 69
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
			clear_buffer(buffer);
    1e34:	85 e4       	ldi	r24, 0x45	; 69
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
    1e3c:	7e cf       	rjmp	.-260    	; 0x1d3a <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	0f 91       	pop	r16
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	08 95       	ret

00001e4c <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    1e4c:	0e 94 99 26 	call	0x4d32	; 0x4d32 <init_int>
	
	while(BUTTON1 != 0)
    1e50:	1f 9b       	sbis	0x03, 7	; 3
    1e52:	0e c1       	rjmp	.+540    	; 0x2070 <Display_rcinput+0x224>
	{
		if (BUTTON4 == 0)
    1e54:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    1e56:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <CenterSticks>
		}

		if (BUTTON3 == 0)
    1e5a:	1d 9b       	sbis	0x03, 5	; 3
		{
			SetFailsafe();
    1e5c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <SetFailsafe>
		}

		RxGetChannels();
    1e60:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <RxGetChannels>

		LCD_Display_Text(19,(const unsigned char*)Verdana8,0,0);
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	6e e1       	ldi	r22, 0x1E	; 30
    1e6e:	7a e0       	ldi	r23, 0x0A	; 10
    1e70:	83 e1       	ldi	r24, 0x13	; 19
    1e72:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    1e76:	2a e0       	ldi	r18, 0x0A	; 10
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	6e e1       	ldi	r22, 0x1E	; 30
    1e80:	7a e0       	ldi	r23, 0x0A	; 10
    1e82:	80 e2       	ldi	r24, 0x20	; 32
    1e84:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(20,(const unsigned char*)Verdana8,0,20);
    1e88:	24 e1       	ldi	r18, 0x14	; 20
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	6e e1       	ldi	r22, 0x1E	; 30
    1e92:	7a e0       	ldi	r23, 0x0A	; 10
    1e94:	84 e1       	ldi	r24, 0x14	; 20
    1e96:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    1e9a:	2e e1       	ldi	r18, 0x1E	; 30
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	6e e1       	ldi	r22, 0x1E	; 30
    1ea4:	7a e0       	ldi	r23, 0x0A	; 10
    1ea6:	83 e2       	ldi	r24, 0x23	; 35
    1ea8:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0);
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	46 e4       	ldi	r20, 0x46	; 70
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	6e e1       	ldi	r22, 0x1E	; 30
    1eb6:	7a e0       	ldi	r23, 0x0A	; 10
    1eb8:	8d e6       	ldi	r24, 0x6D	; 109
    1eba:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    1ebe:	2a e0       	ldi	r18, 0x0A	; 10
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	46 e4       	ldi	r20, 0x46	; 70
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	6e e1       	ldi	r22, 0x1E	; 30
    1ec8:	7a e0       	ldi	r23, 0x0A	; 10
    1eca:	8e e6       	ldi	r24, 0x6E	; 110
    1ecc:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    1ed0:	24 e1       	ldi	r18, 0x14	; 20
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	46 e4       	ldi	r20, 0x46	; 70
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	6e e1       	ldi	r22, 0x1E	; 30
    1eda:	7a e0       	ldi	r23, 0x0A	; 10
    1edc:	8f e6       	ldi	r24, 0x6F	; 111
    1ede:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    1ee2:	2e e1       	ldi	r18, 0x1E	; 30
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	46 e4       	ldi	r20, 0x46	; 70
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	6e e1       	ldi	r22, 0x1E	; 30
    1eec:	7a e0       	ldi	r23, 0x0A	; 10
    1eee:	80 e7       	ldi	r24, 0x70	; 112
    1ef0:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    1ef4:	80 91 cd 07 	lds	r24, 0x07CD
    1ef8:	90 91 ce 07 	lds	r25, 0x07CE
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1efc:	4a e0       	ldi	r20, 0x0A	; 10
    1efe:	6b e6       	ldi	r22, 0x6B	; 107
    1f00:	75 e0       	ldi	r23, 0x05	; 5
    1f02:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	45 e2       	ldi	r20, 0x25	; 37
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	6e e1       	ldi	r22, 0x1E	; 30
    1f10:	7a e0       	ldi	r23, 0x0A	; 10
    1f12:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    1f16:	80 91 d1 07 	lds	r24, 0x07D1
    1f1a:	90 91 d2 07 	lds	r25, 0x07D2
    1f1e:	4a e0       	ldi	r20, 0x0A	; 10
    1f20:	6b e6       	ldi	r22, 0x6B	; 107
    1f22:	75 e0       	ldi	r23, 0x05	; 5
    1f24:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1f28:	2a e0       	ldi	r18, 0x0A	; 10
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	45 e2       	ldi	r20, 0x25	; 37
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	6e e1       	ldi	r22, 0x1E	; 30
    1f32:	7a e0       	ldi	r23, 0x0A	; 10
    1f34:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    1f38:	80 91 d3 07 	lds	r24, 0x07D3
    1f3c:	90 91 d4 07 	lds	r25, 0x07D4
    1f40:	4a e0       	ldi	r20, 0x0A	; 10
    1f42:	6b e6       	ldi	r22, 0x6B	; 107
    1f44:	75 e0       	ldi	r23, 0x05	; 5
    1f46:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1f4a:	24 e1       	ldi	r18, 0x14	; 20
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	45 e2       	ldi	r20, 0x25	; 37
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	6e e1       	ldi	r22, 0x1E	; 30
    1f54:	7a e0       	ldi	r23, 0x0A	; 10
    1f56:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    1f5a:	80 91 d5 07 	lds	r24, 0x07D5
    1f5e:	90 91 d6 07 	lds	r25, 0x07D6
    1f62:	4a e0       	ldi	r20, 0x0A	; 10
    1f64:	6b e6       	ldi	r22, 0x6B	; 107
    1f66:	75 e0       	ldi	r23, 0x05	; 5
    1f68:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1f6c:	2e e1       	ldi	r18, 0x1E	; 30
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	45 e2       	ldi	r20, 0x25	; 37
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	6e e1       	ldi	r22, 0x1E	; 30
    1f76:	7a e0       	ldi	r23, 0x0A	; 10
    1f78:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    1f7c:	80 91 d7 07 	lds	r24, 0x07D7
    1f80:	90 91 d8 07 	lds	r25, 0x07D8
    1f84:	4a e0       	ldi	r20, 0x0A	; 10
    1f86:	6b e6       	ldi	r22, 0x6B	; 107
    1f88:	75 e0       	ldi	r23, 0x05	; 5
    1f8a:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	44 e6       	ldi	r20, 0x64	; 100
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	6e e1       	ldi	r22, 0x1E	; 30
    1f98:	7a e0       	ldi	r23, 0x0A	; 10
    1f9a:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    1f9e:	80 91 d9 07 	lds	r24, 0x07D9
    1fa2:	90 91 da 07 	lds	r25, 0x07DA
    1fa6:	4a e0       	ldi	r20, 0x0A	; 10
    1fa8:	6b e6       	ldi	r22, 0x6B	; 107
    1faa:	75 e0       	ldi	r23, 0x05	; 5
    1fac:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	44 e6       	ldi	r20, 0x64	; 100
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	6e e1       	ldi	r22, 0x1E	; 30
    1fba:	7a e0       	ldi	r23, 0x0A	; 10
    1fbc:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    1fc0:	80 91 db 07 	lds	r24, 0x07DB
    1fc4:	90 91 dc 07 	lds	r25, 0x07DC
    1fc8:	4a e0       	ldi	r20, 0x0A	; 10
    1fca:	6b e6       	ldi	r22, 0x6B	; 107
    1fcc:	75 e0       	ldi	r23, 0x05	; 5
    1fce:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1fd2:	24 e1       	ldi	r18, 0x14	; 20
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	44 e6       	ldi	r20, 0x64	; 100
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	6e e1       	ldi	r22, 0x1E	; 30
    1fdc:	7a e0       	ldi	r23, 0x0A	; 10
    1fde:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    1fe2:	80 91 dd 07 	lds	r24, 0x07DD
    1fe6:	90 91 de 07 	lds	r25, 0x07DE
    1fea:	4a e0       	ldi	r20, 0x0A	; 10
    1fec:	6b e6       	ldi	r22, 0x6B	; 107
    1fee:	75 e0       	ldi	r23, 0x05	; 5
    1ff0:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    1ff4:	2e e1       	ldi	r18, 0x1E	; 30
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	44 e6       	ldi	r20, 0x64	; 100
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	6e e1       	ldi	r22, 0x1E	; 30
    1ffe:	7a e0       	ldi	r23, 0x0A	; 10
    2000:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2004:	29 e3       	ldi	r18, 0x39	; 57
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	66 e0       	ldi	r22, 0x06	; 6
    200e:	71 e0       	ldi	r23, 0x01	; 1
    2010:	8c e0       	ldi	r24, 0x0C	; 12
    2012:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(21, (const unsigned char*)Verdana8, 40, 55); 	// Failsafe
    2016:	27 e3       	ldi	r18, 0x37	; 55
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	48 e2       	ldi	r20, 0x28	; 40
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	6e e1       	ldi	r22, 0x1E	; 30
    2020:	7a e0       	ldi	r23, 0x0A	; 10
    2022:	85 e1       	ldi	r24, 0x15	; 21
    2024:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    2028:	2b e3       	ldi	r18, 0x3B	; 59
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e5       	ldi	r20, 0x50	; 80
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	66 e0       	ldi	r22, 0x06	; 6
    2032:	71 e0       	ldi	r23, 0x01	; 1
    2034:	89 e0       	ldi	r24, 0x09	; 9
    2036:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 100, 55); 	// Cal.
    203a:	27 e3       	ldi	r18, 0x37	; 55
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	44 e6       	ldi	r20, 0x64	; 100
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	6e e1       	ldi	r22, 0x1E	; 30
    2044:	7a e0       	ldi	r23, 0x0A	; 10
    2046:	8c e3       	ldi	r24, 0x3C	; 60
    2048:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 119, 59); 	// Down
    204c:	2b e3       	ldi	r18, 0x3B	; 59
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	47 e7       	ldi	r20, 0x77	; 119
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	66 e0       	ldi	r22, 0x06	; 6
    2056:	71 e0       	ldi	r23, 0x01	; 1
    2058:	89 e0       	ldi	r24, 0x09	; 9
    205a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    205e:	85 e4       	ldi	r24, 0x45	; 69
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
		clear_buffer(buffer);
    2066:	85 e4       	ldi	r24, 0x45	; 69
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
    206e:	f0 ce       	rjmp	.-544    	; 0x1e50 <Display_rcinput+0x4>
	}
}
    2070:	08 95       	ret

00002072 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    2072:	cf 93       	push	r28
	bool	first_time = true;
		
	clear_buffer(buffer);
    2074:	85 e4       	ldi	r24, 0x45	; 69
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    207c:	c1 e0       	ldi	r28, 0x01	; 1
		
	clear_buffer(buffer);
		
	// While BACK not pressed
	while(BUTTON1 != 0)
    207e:	1f 9b       	sbis	0x03, 7	; 3
    2080:	df c0       	rjmp	.+446    	; 0x2240 <Display_sensors+0x1ce>
	{
		ReadGyros();
    2082:	0e 94 82 1a 	call	0x3504	; 0x3504 <ReadGyros>
		ReadAcc();
    2086:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	45 e2       	ldi	r20, 0x25	; 37
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	6e e1       	ldi	r22, 0x1E	; 30
    2094:	7a e0       	ldi	r23, 0x0A	; 10
    2096:	8a e1       	ldi	r24, 0x1A	; 26
    2098:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4d e4       	ldi	r20, 0x4D	; 77
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	6e e1       	ldi	r22, 0x1E	; 30
    20a6:	7a e0       	ldi	r23, 0x0A	; 10
    20a8:	8e e1       	ldi	r24, 0x1E	; 30
    20aa:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    20ae:	2d e0       	ldi	r18, 0x0D	; 13
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	45 e0       	ldi	r20, 0x05	; 5
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	6e e1       	ldi	r22, 0x1E	; 30
    20b8:	7a e0       	ldi	r23, 0x0A	; 10
    20ba:	8b e1       	ldi	r24, 0x1B	; 27
    20bc:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    20c0:	27 e1       	ldi	r18, 0x17	; 23
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	45 e0       	ldi	r20, 0x05	; 5
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	6e e1       	ldi	r22, 0x1E	; 30
    20ca:	7a e0       	ldi	r23, 0x0A	; 10
    20cc:	8c e1       	ldi	r24, 0x1C	; 28
    20ce:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    20d2:	21 e2       	ldi	r18, 0x21	; 33
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	45 e0       	ldi	r20, 0x05	; 5
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	6e e1       	ldi	r22, 0x1E	; 30
    20dc:	7a e0       	ldi	r23, 0x0A	; 10
    20de:	8d e1       	ldi	r24, 0x1D	; 29
    20e0:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
    20e4:	4a e0       	ldi	r20, 0x0A	; 10
    20e6:	6b e6       	ldi	r22, 0x6B	; 107
    20e8:	75 e0       	ldi	r23, 0x05	; 5
    20ea:	80 91 84 05 	lds	r24, 0x0584
    20ee:	90 91 85 05 	lds	r25, 0x0585
    20f2:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    20f6:	2d e0       	ldi	r18, 0x0D	; 13
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	48 e2       	ldi	r20, 0x28	; 40
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	6e e1       	ldi	r22, 0x1E	; 30
    2100:	7a e0       	ldi	r23, 0x0A	; 10
    2102:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    2106:	4a e0       	ldi	r20, 0x0A	; 10
    2108:	6b e6       	ldi	r22, 0x6B	; 107
    210a:	75 e0       	ldi	r23, 0x05	; 5
    210c:	80 91 86 05 	lds	r24, 0x0586
    2110:	90 91 87 05 	lds	r25, 0x0587
    2114:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2118:	27 e1       	ldi	r18, 0x17	; 23
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	48 e2       	ldi	r20, 0x28	; 40
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	6e e1       	ldi	r22, 0x1E	; 30
    2122:	7a e0       	ldi	r23, 0x0A	; 10
    2124:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    2128:	4a e0       	ldi	r20, 0x0A	; 10
    212a:	6b e6       	ldi	r22, 0x6B	; 107
    212c:	75 e0       	ldi	r23, 0x05	; 5
    212e:	80 91 88 05 	lds	r24, 0x0588
    2132:	90 91 89 05 	lds	r25, 0x0589
    2136:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    213a:	21 e2       	ldi	r18, 0x21	; 33
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	48 e2       	ldi	r20, 0x28	; 40
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	6e e1       	ldi	r22, 0x1E	; 30
    2144:	7a e0       	ldi	r23, 0x0A	; 10
    2146:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    214a:	4a e0       	ldi	r20, 0x0A	; 10
    214c:	6b e6       	ldi	r22, 0x6B	; 107
    214e:	75 e0       	ldi	r23, 0x05	; 5
    2150:	80 91 3e 01 	lds	r24, 0x013E
    2154:	90 91 3f 01 	lds	r25, 0x013F
    2158:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    215c:	2d e0       	ldi	r18, 0x0D	; 13
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e5       	ldi	r20, 0x50	; 80
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	6e e1       	ldi	r22, 0x1E	; 30
    2166:	7a e0       	ldi	r23, 0x0A	; 10
    2168:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    216c:	4a e0       	ldi	r20, 0x0A	; 10
    216e:	6b e6       	ldi	r22, 0x6B	; 107
    2170:	75 e0       	ldi	r23, 0x05	; 5
    2172:	80 91 40 01 	lds	r24, 0x0140
    2176:	90 91 41 01 	lds	r25, 0x0141
    217a:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    217e:	27 e1       	ldi	r18, 0x17	; 23
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e5       	ldi	r20, 0x50	; 80
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	6e e1       	ldi	r22, 0x1E	; 30
    2188:	7a e0       	ldi	r23, 0x0A	; 10
    218a:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    218e:	4a e0       	ldi	r20, 0x0A	; 10
    2190:	6b e6       	ldi	r22, 0x6B	; 107
    2192:	75 e0       	ldi	r23, 0x05	; 5
    2194:	80 91 42 01 	lds	r24, 0x0142
    2198:	90 91 43 01 	lds	r25, 0x0143
    219c:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    21a0:	21 e2       	ldi	r18, 0x21	; 33
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e5       	ldi	r20, 0x50	; 80
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	6e e1       	ldi	r22, 0x1E	; 30
    21aa:	7a e0       	ldi	r23, 0x0A	; 10
    21ac:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    21b0:	29 e3       	ldi	r18, 0x39	; 57
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	66 e0       	ldi	r22, 0x06	; 6
    21ba:	71 e0       	ldi	r23, 0x01	; 1
    21bc:	8c e0       	ldi	r24, 0x0C	; 12
    21be:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(37, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate
    21c2:	27 e3       	ldi	r18, 0x37	; 55
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4b e4       	ldi	r20, 0x4B	; 75
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	6e e1       	ldi	r22, 0x1E	; 30
    21cc:	7a e0       	ldi	r23, 0x0A	; 10
    21ce:	85 e2       	ldi	r24, 0x25	; 37
    21d0:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    21d4:	27 e3       	ldi	r18, 0x37	; 55
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4c e6       	ldi	r20, 0x6C	; 108
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	6e e1       	ldi	r22, 0x1E	; 30
    21de:	7a e0       	ldi	r23, 0x0A	; 10
    21e0:	8c e3       	ldi	r24, 0x3C	; 60
    21e2:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    21e6:	85 e4       	ldi	r24, 0x45	; 69
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
		clear_buffer(buffer);
    21ee:	85 e4       	ldi	r24, 0x45	; 69
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>

		if (first_time)
    21f6:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    21f8:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    21fc:	1c 99       	sbic	0x03, 4	; 3
    21fe:	10 c0       	rjmp	.+32     	; 0x2220 <Display_sensors+0x1ae>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2200:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <Wait_BUTTON4>
    2204:	2f e3       	ldi	r18, 0x3F	; 63
    2206:	82 e4       	ldi	r24, 0x42	; 66
    2208:	9f e0       	ldi	r25, 0x0F	; 15
    220a:	21 50       	subi	r18, 0x01	; 1
    220c:	80 40       	sbci	r24, 0x00	; 0
    220e:	90 40       	sbci	r25, 0x00	; 0
    2210:	e1 f7       	brne	.-8      	; 0x220a <Display_sensors+0x198>
    2212:	00 c0       	rjmp	.+0      	; 0x2214 <Display_sensors+0x1a2>
    2214:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    2216:	0e 94 af 1a 	call	0x355e	; 0x355e <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2220:	1d 99       	sbic	0x03, 5	; 3
    2222:	0c c0       	rjmp	.+24     	; 0x223c <Display_sensors+0x1ca>
    2224:	2f e3       	ldi	r18, 0x3F	; 63
    2226:	82 e4       	ldi	r24, 0x42	; 66
    2228:	9f e0       	ldi	r25, 0x0F	; 15
    222a:	21 50       	subi	r18, 0x01	; 1
    222c:	80 40       	sbci	r24, 0x00	; 0
    222e:	90 40       	sbci	r25, 0x00	; 0
    2230:	e1 f7       	brne	.-8      	; 0x222a <Display_sensors+0x1b8>
    2232:	00 c0       	rjmp	.+0      	; 0x2234 <Display_sensors+0x1c2>
    2234:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CalibrateAcc>
    223c:	c0 e0       	ldi	r28, 0x00	; 0
    223e:	1f cf       	rjmp	.-450    	; 0x207e <Display_sensors+0xc>
		}
	}
}
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2244:	a4 e0       	ldi	r26, 0x04	; 4
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e8 e2       	ldi	r30, 0x28	; 40
    224a:	f1 e1       	ldi	r31, 0x11	; 17
    224c:	0c 94 34 3e 	jmp	0x7c68	; 0x7c68 <__prologue_saves__+0x12>
	int16_t temp, range, scale;
	uint16_t vbat_temp;
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2250:	85 e4       	ldi	r24, 0x45	; 69
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>

	// Display text
	LCD_Display_Text(4,(const unsigned char*)Verdana8,0,0); 	// Preset
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	6e e1       	ldi	r22, 0x1E	; 30
    2262:	7a e0       	ldi	r23, 0x0A	; 10
    2264:	84 e0       	ldi	r24, 0x04	; 4
    2266:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,11); 	// Version text
    226a:	2b e0       	ldi	r18, 0x0B	; 11
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	6e e1       	ldi	r22, 0x1E	; 30
    2274:	7a e0       	ldi	r23, 0x0A	; 10
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	LCD_Display_Text(138,(const unsigned char*)Verdana8,0,22); 	// RX sync
    227c:	26 e1       	ldi	r18, 0x16	; 22
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	6e e1       	ldi	r22, 0x1E	; 30
    2286:	7a e0       	ldi	r23, 0x0A	; 10
    2288:	8a e8       	ldi	r24, 0x8A	; 138
    228a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	LCD_Display_Text(139,(const unsigned char*)Verdana8,0,33); 	// RX sync
    228e:	21 e2       	ldi	r18, 0x21	; 33
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	6e e1       	ldi	r22, 0x1E	; 30
    2298:	7a e0       	ldi	r23, 0x0A	; 10
    229a:	8b e8       	ldi	r24, 0x8B	; 139
    229c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,44); 	// Profile
    22a0:	2c e2       	ldi	r18, 0x2C	; 44
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	6e e1       	ldi	r22, 0x1E	; 30
    22aa:	7a e0       	ldi	r23, 0x0A	; 10
    22ac:	86 e0       	ldi	r24, 0x06	; 6
    22ae:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    22b2:	2b e3       	ldi	r18, 0x3B	; 59
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	66 e0       	ldi	r22, 0x06	; 6
    22bc:	71 e0       	ldi	r23, 0x01	; 1
    22be:	89 e0       	ldi	r24, 0x09	; 9
    22c0:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    22c4:	27 e3       	ldi	r18, 0x37	; 55
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a e0       	ldi	r20, 0x0A	; 10
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	6e e1       	ldi	r22, 0x1E	; 30
    22ce:	7a e0       	ldi	r23, 0x0A	; 10
    22d0:	8e e0       	ldi	r24, 0x0E	; 14
    22d2:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (22 + Config.MixMode), 45, 0);
    22d6:	40 91 7c 06 	lds	r20, 0x067C
    22da:	4a 5e       	subi	r20, 0xEA	; 234
    22dc:	00 e0       	ldi	r16, 0x00	; 0
    22de:	2d e2       	ldi	r18, 0x2D	; 45
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <print_menu_text>
	print_menu_text(0, 1, (48 + Config.RxModeIn), 45, 22);
    22ea:	40 91 0b 06 	lds	r20, 0x060B
    22ee:	40 5d       	subi	r20, 0xD0	; 208
    22f0:	06 e1       	ldi	r16, 0x16	; 22
    22f2:	2d e2       	ldi	r18, 0x2D	; 45
    22f4:	61 e0       	ldi	r22, 0x01	; 1
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <print_menu_text>
	print_menu_text(0, 1, (48 + Config.RxModeOut), 45, 33);
    22fe:	40 91 0c 06 	lds	r20, 0x060C
    2302:	40 5d       	subi	r20, 0xD0	; 208
    2304:	01 e2       	ldi	r16, 0x21	; 33
    2306:	2d e2       	ldi	r18, 0x2D	; 45
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <print_menu_text>
	mugui_lcd_puts(itoa((Config.Flight + 1),pBuffer,10),(const unsigned char*)Verdana8,45,44);
    2312:	80 91 46 07 	lds	r24, 0x0746
    2316:	99 27       	eor	r25, r25
    2318:	87 fd       	sbrc	r24, 7
    231a:	90 95       	com	r25
    231c:	4a e0       	ldi	r20, 0x0A	; 10
    231e:	6b e6       	ldi	r22, 0x6B	; 107
    2320:	75 e0       	ldi	r23, 0x05	; 5
    2322:	01 96       	adiw	r24, 0x01	; 1
    2324:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    2328:	2c e2       	ldi	r18, 0x2C	; 44
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4d e2       	ldi	r20, 0x2D	; 45
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	6e e1       	ldi	r22, 0x1E	; 30
    2332:	7a e0       	ldi	r23, 0x0A	; 10
    2334:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
	
	// Draw battery
	drawrect(buffer, 100,4, 28, 50, 1);					// Battery body
    2338:	ee 24       	eor	r14, r14
    233a:	e3 94       	inc	r14
    233c:	02 e3       	ldi	r16, 0x32	; 50
    233e:	2c e1       	ldi	r18, 0x1C	; 28
    2340:	44 e0       	ldi	r20, 0x04	; 4
    2342:	64 e6       	ldi	r22, 0x64	; 100
    2344:	85 e4       	ldi	r24, 0x45	; 69
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	0e 94 53 19 	call	0x32a6	; 0x32a6 <drawrect>
	drawrect(buffer, 110,0, 8, 5, 1);					// Battery terminal
    234c:	05 e0       	ldi	r16, 0x05	; 5
    234e:	28 e0       	ldi	r18, 0x08	; 8
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	6e e6       	ldi	r22, 0x6E	; 110
    2354:	85 e4       	ldi	r24, 0x45	; 69
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	0e 94 53 19 	call	0x32a6	; 0x32a6 <drawrect>

	vbat_temp = GetVbat();
    235c:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <GetVbat>
    2360:	6c 01       	movw	r12, r24

	// Calculate battery voltage limits
	range = SystemVoltage - Config.PowerTriggerActual;
    2362:	80 91 26 01 	lds	r24, 0x0126
    2366:	90 91 27 01 	lds	r25, 0x0127
    236a:	20 91 76 06 	lds	r18, 0x0676
    236e:	30 91 77 06 	lds	r19, 0x0677
	scale = range / 50;

	// Look out for that divide-by-zero... :)
	if ((vbat_temp >= Config.PowerTriggerActual) && (scale > 0))
    2372:	c2 16       	cp	r12, r18
    2374:	d3 06       	cpc	r13, r19
    2376:	a0 f0       	brcs	.+40     	; 0x23a0 <Display_status+0x15c>
	drawrect(buffer, 110,0, 8, 5, 1);					// Battery terminal

	vbat_temp = GetVbat();

	// Calculate battery voltage limits
	range = SystemVoltage - Config.PowerTriggerActual;
    2378:	82 1b       	sub	r24, r18
    237a:	93 0b       	sbc	r25, r19
	scale = range / 50;
    237c:	62 e3       	ldi	r22, 0x32	; 50
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	0e 94 c1 3d 	call	0x7b82	; 0x7b82 <__divmodhi4>

	// Look out for that divide-by-zero... :)
	if ((vbat_temp >= Config.PowerTriggerActual) && (scale > 0))
    2384:	16 16       	cp	r1, r22
    2386:	17 06       	cpc	r1, r23
    2388:	5c f4       	brge	.+22     	; 0x23a0 <Display_status+0x15c>
	{
		temp = (vbat_temp - Config.PowerTriggerActual) / scale;
    238a:	c6 01       	movw	r24, r12
    238c:	82 1b       	sub	r24, r18
    238e:	93 0b       	sbc	r25, r19
    2390:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__udivmodhi4>
	else
	{
		temp = 0;
	}

	if (temp > 50) temp = 50;
    2394:	63 33       	cpi	r22, 0x33	; 51
    2396:	71 05       	cpc	r23, r1
    2398:	2c f0       	brlt	.+10     	; 0x23a4 <Display_status+0x160>
    239a:	62 e3       	ldi	r22, 0x32	; 50
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <Display_status+0x160>
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	70 e0       	ldi	r23, 0x00	; 0

	fillrect(buffer, 100,54-temp, 28, temp, 1);				// Battery filler (max is 60)
    23a4:	46 e3       	ldi	r20, 0x36	; 54
    23a6:	46 1b       	sub	r20, r22
    23a8:	ee 24       	eor	r14, r14
    23aa:	e3 94       	inc	r14
    23ac:	06 2f       	mov	r16, r22
    23ae:	2c e1       	ldi	r18, 0x1C	; 28
    23b0:	64 e6       	ldi	r22, 0x64	; 100
    23b2:	85 e4       	ldi	r24, 0x45	; 69
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	0e 94 29 19 	call	0x3252	; 0x3252 <fillrect>

	// Display voltage
	uint8_t x_loc = 102;	// X location of voltage display
	uint8_t y_loc = 55;		// Y location of voltage display

	temp = vbat_temp/100;	// Display whole decimal part first
    23ba:	c6 01       	movw	r24, r12
    23bc:	64 e6       	ldi	r22, 0x64	; 100
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__udivmodhi4>
    23c4:	7b 01       	movw	r14, r22
    23c6:	4a e0       	ldi	r20, 0x0A	; 10
    23c8:	6b e6       	ldi	r22, 0x6B	; 107
    23ca:	75 e0       	ldi	r23, 0x05	; 5
    23cc:	c7 01       	movw	r24, r14
    23ce:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    23d2:	ae 01       	movw	r20, r28
    23d4:	4f 5f       	subi	r20, 0xFF	; 255
    23d6:	5f 4f       	sbci	r21, 0xFF	; 255
    23d8:	6e e1       	ldi	r22, 0x1E	; 30
    23da:	7a e0       	ldi	r23, 0x0A	; 10
    23dc:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <mugui_text_sizestring>
    23e0:	4a e0       	ldi	r20, 0x0A	; 10
    23e2:	6b e6       	ldi	r22, 0x6B	; 107
    23e4:	75 e0       	ldi	r23, 0x05	; 5
    23e6:	c7 01       	movw	r24, r14
    23e8:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    23ec:	27 e3       	ldi	r18, 0x37	; 55
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	46 e6       	ldi	r20, 0x66	; 102
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	6e e1       	ldi	r22, 0x1E	; 30
    23f6:	7a e0       	ldi	r23, 0x0A	; 10
    23f8:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    23fc:	2c e9       	ldi	r18, 0x9C	; 156
    23fe:	a7 01       	movw	r20, r14
    2400:	24 03       	mulsu	r18, r20
    2402:	80 01       	movw	r16, r0
    2404:	25 9f       	mul	r18, r21
    2406:	10 0d       	add	r17, r0
    2408:	11 24       	eor	r1, r1
    240a:	0c 0d       	add	r16, r12
    240c:	1d 1d       	adc	r17, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    240e:	c9 80       	ldd	r12, Y+1	; 0x01
    2410:	dd 24       	eor	r13, r13
    2412:	c7 fc       	sbrc	r12, 7
    2414:	d0 94       	com	r13
    2416:	56 e6       	ldi	r21, 0x66	; 102
    2418:	c5 0e       	add	r12, r21
    241a:	d1 1c       	adc	r13, r1
    241c:	27 e3       	ldi	r18, 0x37	; 55
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	a6 01       	movw	r20, r12
    2422:	6e e1       	ldi	r22, 0x1E	; 30
    2424:	7a e0       	ldi	r23, 0x0A	; 10
    2426:	87 e0       	ldi	r24, 0x07	; 7
    2428:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    242c:	ae 01       	movw	r20, r28
    242e:	4f 5f       	subi	r20, 0xFF	; 255
    2430:	5f 4f       	sbci	r21, 0xFF	; 255
    2432:	6e e1       	ldi	r22, 0x1E	; 30
    2434:	7a e0       	ldi	r23, 0x0A	; 10
    2436:	87 e0       	ldi	r24, 0x07	; 7
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <mugui_text_sizestring>
	pos3 = size.x;
    243e:	e9 80       	ldd	r14, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2440:	ae 01       	movw	r20, r28
    2442:	4f 5f       	subi	r20, 0xFF	; 255
    2444:	5f 4f       	sbci	r21, 0xFF	; 255
    2446:	6e e1       	ldi	r22, 0x1E	; 30
    2448:	7a e0       	ldi	r23, 0x0A	; 10
    244a:	89 e0       	ldi	r24, 0x09	; 9
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <mugui_text_sizestring>
	pos2 = size.x;
    2452:	b9 80       	ldd	r11, Y+1	; 0x01
    2454:	ff 24       	eor	r15, r15
    2456:	e7 fc       	sbrc	r14, 7
    2458:	f0 94       	com	r15

	if (vbat_temp >= 10)
    245a:	0a 30       	cpi	r16, 0x0A	; 10
    245c:	11 05       	cpc	r17, r1
    245e:	40 f0       	brcs	.+16     	; 0x2470 <Display_status+0x22c>
    2460:	4a e0       	ldi	r20, 0x0A	; 10
    2462:	6b e6       	ldi	r22, 0x6B	; 107
    2464:	75 e0       	ldi	r23, 0x05	; 5
    2466:	c8 01       	movw	r24, r16
    2468:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    246c:	a6 01       	movw	r20, r12
    246e:	15 c0       	rjmp	.+42     	; 0x249a <Display_status+0x256>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2470:	a6 01       	movw	r20, r12
    2472:	4e 0d       	add	r20, r14
    2474:	5f 1d       	adc	r21, r15
    2476:	27 e3       	ldi	r18, 0x37	; 55
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	6e e1       	ldi	r22, 0x1E	; 30
    247c:	7a e0       	ldi	r23, 0x0A	; 10
    247e:	88 e0       	ldi	r24, 0x08	; 8
    2480:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
    2484:	4a e0       	ldi	r20, 0x0A	; 10
    2486:	6b e6       	ldi	r22, 0x6B	; 107
    2488:	75 e0       	ldi	r23, 0x05	; 5
    248a:	c8 01       	movw	r24, r16
    248c:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2490:	a6 01       	movw	r20, r12
    2492:	4b 0d       	add	r20, r11
    2494:	51 1d       	adc	r21, r1
    2496:	b7 fc       	sbrc	r11, 7
    2498:	5a 95       	dec	r21
    249a:	4e 0d       	add	r20, r14
    249c:	5f 1d       	adc	r21, r15
    249e:	27 e3       	ldi	r18, 0x37	; 55
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	6e e1       	ldi	r22, 0x1E	; 30
    24a4:	7a e0       	ldi	r23, 0x0A	; 10
    24a6:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
	}

	// Draw error messages, if any
	if ((General_error != 0) || (Flight_flags & (1 << FailsafeFlag)))
    24aa:	80 91 1d 01 	lds	r24, 0x011D
    24ae:	81 11       	cpse	r24, r1
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <Display_status+0x276>
    24b2:	80 91 1c 01 	lds	r24, 0x011C
    24b6:	82 ff       	sbrs	r24, 2
    24b8:	52 c0       	rjmp	.+164    	; 0x255e <Display_status+0x31a>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    24ba:	e1 2c       	mov	r14, r1
    24bc:	00 e3       	ldi	r16, 0x30	; 48
    24be:	20 e6       	ldi	r18, 0x60	; 96
    24c0:	48 e0       	ldi	r20, 0x08	; 8
    24c2:	6e e0       	ldi	r22, 0x0E	; 14
    24c4:	85 e4       	ldi	r24, 0x45	; 69
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	0e 94 29 19 	call	0x3252	; 0x3252 <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    24cc:	ee 24       	eor	r14, r14
    24ce:	e3 94       	inc	r14
    24d0:	20 e6       	ldi	r18, 0x60	; 96
    24d2:	48 e0       	ldi	r20, 0x08	; 8
    24d4:	6e e0       	ldi	r22, 0x0E	; 14
    24d6:	85 e4       	ldi	r24, 0x45	; 69
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 53 19 	call	0x32a6	; 0x32a6 <drawrect>

		// Prioritise error from top to bottom
		if (General_error & (1 << LVA_ALARM))
    24de:	80 91 1d 01 	lds	r24, 0x011D
    24e2:	83 ff       	sbrs	r24, 3
    24e4:	11 c0       	rjmp	.+34     	; 0x2508 <Display_status+0x2c4>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14); // Battery
    24e6:	2e e0       	ldi	r18, 0x0E	; 14
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	41 e2       	ldi	r20, 0x21	; 33
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	60 e7       	ldi	r22, 0x70	; 112
    24f0:	71 e0       	ldi	r23, 0x01	; 1
    24f2:	86 e8       	ldi	r24, 0x86	; 134
    24f4:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
			LCD_Display_Text(119,(const unsigned char*)Verdana14,46,34); // Low
    24f8:	22 e2       	ldi	r18, 0x22	; 34
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4e e2       	ldi	r20, 0x2E	; 46
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	60 e7       	ldi	r22, 0x70	; 112
    2502:	71 e0       	ldi	r23, 0x01	; 1
    2504:	87 e7       	ldi	r24, 0x77	; 119
    2506:	29 c0       	rjmp	.+82     	; 0x255a <Display_status+0x316>
		}
		else if (Flight_flags & (1 << FailsafeFlag))
    2508:	80 91 1c 01 	lds	r24, 0x011C
    250c:	82 ff       	sbrs	r24, 2
    250e:	11 c0       	rjmp	.+34     	; 0x2532 <Display_status+0x2ee>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); // No
    2510:	2d e0       	ldi	r18, 0x0D	; 13
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	43 e3       	ldi	r20, 0x33	; 51
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	60 e7       	ldi	r22, 0x70	; 112
    251a:	71 e0       	ldi	r23, 0x01	; 1
    251c:	8b e4       	ldi	r24, 0x4B	; 75
    251e:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33); // Signal
    2522:	21 e2       	ldi	r18, 0x21	; 33
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	47 e2       	ldi	r20, 0x27	; 39
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	60 e7       	ldi	r22, 0x70	; 112
    252c:	71 e0       	ldi	r23, 0x01	; 1
    252e:	8c e4       	ldi	r24, 0x4C	; 76
    2530:	14 c0       	rjmp	.+40     	; 0x255a <Display_status+0x316>
		}
		else if (General_error & (1 << THROTTLE_HIGH))
    2532:	80 91 1d 01 	lds	r24, 0x011D
    2536:	81 ff       	sbrs	r24, 1
    2538:	12 c0       	rjmp	.+36     	; 0x255e <Display_status+0x31a>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14); // Throttle
    253a:	2e e0       	ldi	r18, 0x0E	; 14
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4c e1       	ldi	r20, 0x1C	; 28
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	60 e7       	ldi	r22, 0x70	; 112
    2544:	71 e0       	ldi	r23, 0x01	; 1
    2546:	89 e6       	ldi	r24, 0x69	; 105
    2548:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
			LCD_Display_Text(121,(const unsigned char*)Verdana14,46,34); // High
    254c:	22 e2       	ldi	r18, 0x22	; 34
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4e e2       	ldi	r20, 0x2E	; 46
    2552:	50 e0       	ldi	r21, 0x00	; 0
    2554:	60 e7       	ldi	r22, 0x70	; 112
    2556:	71 e0       	ldi	r23, 0x01	; 1
    2558:	89 e7       	ldi	r24, 0x79	; 121
    255a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    255e:	85 e4       	ldi	r24, 0x45	; 69
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
	clear_buffer(buffer);
    2566:	85 e4       	ldi	r24, 0x45	; 69
    2568:	91 e0       	ldi	r25, 0x01	; 1
    256a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
}
    256e:	24 96       	adiw	r28, 0x04	; 4
    2570:	e9 e0       	ldi	r30, 0x09	; 9
    2572:	0c 94 50 3e 	jmp	0x7ca0	; 0x7ca0 <__epilogue_restores__+0x12>

00002576 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2576:	a0 e0       	ldi	r26, 0x00	; 0
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e1 ec       	ldi	r30, 0xC1	; 193
    257c:	f2 e1       	ldi	r31, 0x12	; 18
    257e:	0c 94 32 3e 	jmp	0x7c64	; 0x7c64 <__prologue_saves__+0xe>
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2582:	c0 90 54 07 	lds	r12, 0x0754
	temp_2ndaileron = Config.SecAileronPol;
    2586:	d0 90 55 07 	lds	r13, 0x0755
	temp_elevator = Config.ElevatorPol;
    258a:	f0 90 56 07 	lds	r15, 0x0756
	temp_rudder = Config.RudderPol;
    258e:	90 90 57 07 	lds	r9, 0x0757

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2592:	10 92 54 07 	sts	0x0754, r1
	Config.SecAileronPol = NORMAL;
    2596:	10 92 55 07 	sts	0x0755, r1
	Config.ElevatorPol =  NORMAL;
    259a:	10 92 56 07 	sts	0x0756, r1
	Config.RudderPol = NORMAL;
    259e:	10 92 57 07 	sts	0x0757, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    25a2:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    25a4:	c0 e0       	ldi	r28, 0x00	; 0
	Config.SecAileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
    25a6:	1f 9b       	sbis	0x03, 7	; 3
    25a8:	de c0       	rjmp	.+444    	; 0x2766 <Display_sticks+0x1f0>
    25aa:	c1 11       	cpse	r28, r1
    25ac:	de c0       	rjmp	.+444    	; 0x276a <Display_sticks+0x1f4>
	{
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    25ae:	85 e4       	ldi	r24, 0x45	; 69
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
    25b6:	92 e0       	ldi	r25, 0x02	; 2
    25b8:	b9 2e       	mov	r11, r25
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		offset = 0;
    25ba:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    25bc:	61 e1       	ldi	r22, 0x11	; 17
    25be:	61 0f       	add	r22, r17
    25c0:	ee 24       	eor	r14, r14
    25c2:	e3 94       	inc	r14
    25c4:	08 e2       	ldi	r16, 0x28	; 40
    25c6:	28 e2       	ldi	r18, 0x28	; 40
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	85 e4       	ldi	r24, 0x45	; 69
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	0e 94 53 19 	call	0x32a6	; 0x32a6 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    25d2:	86 e2       	ldi	r24, 0x26	; 38
    25d4:	a8 2e       	mov	r10, r24
    25d6:	a1 0e       	add	r10, r17
    25d8:	20 e3       	ldi	r18, 0x30	; 48
    25da:	21 0f       	add	r18, r17
    25dc:	03 e0       	ldi	r16, 0x03	; 3
    25de:	44 e1       	ldi	r20, 0x14	; 20
    25e0:	6a 2d       	mov	r22, r10
    25e2:	85 e4       	ldi	r24, 0x45	; 69
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	0e 94 cb 18 	call	0x3196	; 0x3196 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    25ea:	28 e3       	ldi	r18, 0x38	; 56
    25ec:	21 0f       	add	r18, r17
    25ee:	69 e2       	ldi	r22, 0x29	; 41
    25f0:	61 0f       	add	r22, r17
    25f2:	06 e0       	ldi	r16, 0x06	; 6
    25f4:	45 e1       	ldi	r20, 0x15	; 21
    25f6:	85 e4       	ldi	r24, 0x45	; 69
    25f8:	91 e0       	ldi	r25, 0x01	; 1
    25fa:	0e 94 cb 18 	call	0x3196	; 0x3196 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
    25fe:	01 e0       	ldi	r16, 0x01	; 1
    2600:	22 e0       	ldi	r18, 0x02	; 2
    2602:	45 e1       	ldi	r20, 0x15	; 21
    2604:	6a 2d       	mov	r22, r10
    2606:	85 e4       	ldi	r24, 0x45	; 69
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	0e 94 99 19 	call	0x3332	; 0x3332 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    260e:	63 e3       	ldi	r22, 0x33	; 51
    2610:	61 0f       	add	r22, r17
    2612:	24 e0       	ldi	r18, 0x04	; 4
    2614:	45 e0       	ldi	r20, 0x05	; 5
    2616:	85 e4       	ldi	r24, 0x45	; 69
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	0e 94 99 19 	call	0x3332	; 0x3332 <fillcircle>
    261e:	ba 94       	dec	r11

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2620:	11 f0       	breq	.+4      	; 0x2626 <Display_sticks+0xb0>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			offset = 52;
    2622:	14 e3       	ldi	r17, 0x34	; 52
    2624:	cb cf       	rjmp	.-106    	; 0x25bc <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2626:	29 e3       	ldi	r18, 0x39	; 57
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	66 e0       	ldi	r22, 0x06	; 6
    2630:	71 e0       	ldi	r23, 0x01	; 1
    2632:	8c e0       	ldi	r24, 0x0C	; 12
    2634:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2638:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    263c:	80 91 d1 07 	lds	r24, 0x07D1
    2640:	90 91 d2 07 	lds	r25, 0x07D2
    2644:	80 33       	cpi	r24, 0x30	; 48
    2646:	98 4f       	sbci	r25, 0xF8	; 248
    2648:	3c f0       	brlt	.+14     	; 0x2658 <Display_sticks+0xe2>
    264a:	80 91 d1 07 	lds	r24, 0x07D1
    264e:	90 91 d2 07 	lds	r25, 0x07D2
    2652:	81 3d       	cpi	r24, 0xD1	; 209
    2654:	97 40       	sbci	r25, 0x07	; 7
    2656:	64 f0       	brlt	.+24     	; 0x2670 <Display_sticks+0xfa>
    2658:	d1 11       	cpse	r29, r1
    265a:	0a c0       	rjmp	.+20     	; 0x2670 <Display_sticks+0xfa>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
    265c:	2b e2       	ldi	r18, 0x2B	; 43
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4e e0       	ldi	r20, 0x0E	; 14
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	60 e7       	ldi	r22, 0x70	; 112
    2666:	71 e0       	ldi	r23, 0x01	; 1
    2668:	87 e8       	ldi	r24, 0x87	; 135
    266a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
    266e:	76 c0       	rjmp	.+236    	; 0x275c <Display_sticks+0x1e6>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2670:	80 91 d1 07 	lds	r24, 0x07D1
    2674:	90 91 d2 07 	lds	r25, 0x07D2
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    2678:	84 3f       	cpi	r24, 0xF4	; 244
    267a:	91 40       	sbci	r25, 0x01	; 1
    267c:	3c f4       	brge	.+14     	; 0x268c <Display_sticks+0x116>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    267e:	80 91 d1 07 	lds	r24, 0x07D1
    2682:	90 91 d2 07 	lds	r25, 0x07D2
    2686:	8d 30       	cpi	r24, 0x0D	; 13
    2688:	9e 4f       	sbci	r25, 0xFE	; 254
    268a:	e4 f4       	brge	.+56     	; 0x26c4 <Display_sticks+0x14e>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    268c:	80 91 d3 07 	lds	r24, 0x07D3
    2690:	90 91 d4 07 	lds	r25, 0x07D4
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2694:	84 3f       	cpi	r24, 0xF4	; 244
    2696:	91 40       	sbci	r25, 0x01	; 1
    2698:	3c f4       	brge	.+14     	; 0x26a8 <Display_sticks+0x132>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    269a:	80 91 d3 07 	lds	r24, 0x07D3
    269e:	90 91 d4 07 	lds	r25, 0x07D4
    26a2:	8d 30       	cpi	r24, 0x0D	; 13
    26a4:	9e 4f       	sbci	r25, 0xFE	; 254
    26a6:	74 f4       	brge	.+28     	; 0x26c4 <Display_sticks+0x14e>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
    26a8:	80 91 d5 07 	lds	r24, 0x07D5
    26ac:	90 91 d6 07 	lds	r25, 0x07D6
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    26b0:	84 3f       	cpi	r24, 0xF4	; 244
    26b2:	91 40       	sbci	r25, 0x01	; 1
    26b4:	94 f4       	brge	.+36     	; 0x26da <Display_sticks+0x164>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
    26b6:	80 91 d5 07 	lds	r24, 0x07D5
    26ba:	90 91 d6 07 	lds	r25, 0x07D6
    26be:	8d 30       	cpi	r24, 0x0D	; 13
    26c0:	9e 4f       	sbci	r25, 0xFE	; 254
    26c2:	5c f0       	brlt	.+22     	; 0x26da <Display_sticks+0x164>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    26c4:	2b e2       	ldi	r18, 0x2B	; 43
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	49 e0       	ldi	r20, 0x09	; 9
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	60 e7       	ldi	r22, 0x70	; 112
    26ce:	71 e0       	ldi	r23, 0x01	; 1
    26d0:	88 e8       	ldi	r24, 0x88	; 136
    26d2:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
					)
			{
				CalibrateStarted = true;
    26d6:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    26d8:	41 c0       	rjmp	.+130    	; 0x275c <Display_sticks+0x1e6>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    26da:	80 91 d1 07 	lds	r24, 0x07D1
    26de:	90 91 d2 07 	lds	r25, 0x07D2
    26e2:	97 ff       	sbrs	r25, 7
    26e4:	03 c0       	rjmp	.+6      	; 0x26ec <Display_sticks+0x176>
				{
					Config.AileronPol = REVERSED;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	80 93 54 07 	sts	0x0754, r24
				}

				// Only reverse 2nd aileron if set up as one
				if ((Config.FlapChan != NOCHAN) && (RCinputs[Config.FlapChan] < 0))
    26ec:	e0 91 0f 06 	lds	r30, 0x060F
    26f0:	e8 30       	cpi	r30, 0x08	; 8
    26f2:	59 f0       	breq	.+22     	; 0x270a <Display_sticks+0x194>
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 0b       	sbc	r31, r31
    26f8:	e1 53       	subi	r30, 0x31	; 49
    26fa:	f8 4f       	sbci	r31, 0xF8	; 248
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	97 ff       	sbrs	r25, 7
    2702:	03 c0       	rjmp	.+6      	; 0x270a <Display_sticks+0x194>
				{
					Config.SecAileronPol = REVERSED;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	80 93 55 07 	sts	0x0755, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    270a:	80 91 d3 07 	lds	r24, 0x07D3
    270e:	90 91 d4 07 	lds	r25, 0x07D4
    2712:	97 ff       	sbrs	r25, 7
    2714:	03 c0       	rjmp	.+6      	; 0x271c <Display_sticks+0x1a6>
				{
					Config.ElevatorPol = REVERSED;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	80 93 56 07 	sts	0x0756, r24
				}

				if (RCinputs[RUDDER] < 0)
    271c:	80 91 d5 07 	lds	r24, 0x07D5
    2720:	90 91 d6 07 	lds	r25, 0x07D6
    2724:	97 ff       	sbrs	r25, 7
    2726:	03 c0       	rjmp	.+6      	; 0x272e <Display_sticks+0x1b8>
				{
					Config.RudderPol = REVERSED;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	80 93 57 07 	sts	0x0757, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    272e:	80 91 d1 07 	lds	r24, 0x07D1
    2732:	90 91 d2 07 	lds	r25, 0x07D2
    2736:	18 16       	cp	r1, r24
    2738:	19 06       	cpc	r1, r25
    273a:	84 f4       	brge	.+32     	; 0x275c <Display_sticks+0x1e6>
    273c:	80 91 d3 07 	lds	r24, 0x07D3
    2740:	90 91 d4 07 	lds	r25, 0x07D4
    2744:	18 16       	cp	r1, r24
    2746:	19 06       	cpc	r1, r25
    2748:	4c f4       	brge	.+18     	; 0x275c <Display_sticks+0x1e6>
    274a:	80 91 d5 07 	lds	r24, 0x07D5
    274e:	90 91 d6 07 	lds	r25, 0x07D6
    2752:	c1 e0       	ldi	r28, 0x01	; 1
    2754:	18 16       	cp	r1, r24
    2756:	19 06       	cpc	r1, r25
    2758:	0c f0       	brlt	.+2      	; 0x275c <Display_sticks+0x1e6>
    275a:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    275c:	85 e4       	ldi	r24, 0x45	; 69
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
    2764:	20 cf       	rjmp	.-448    	; 0x25a6 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2766:	cc 23       	and	r28, r28
    2768:	e9 f0       	breq	.+58     	; 0x27a4 <Display_sticks+0x22e>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    276a:	2b e2       	ldi	r18, 0x2B	; 43
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	48 e2       	ldi	r20, 0x28	; 40
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	60 e7       	ldi	r22, 0x70	; 112
    2774:	71 e0       	ldi	r23, 0x01	; 1
    2776:	89 e8       	ldi	r24, 0x89	; 137
    2778:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    277c:	85 e4       	ldi	r24, 0x45	; 69
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
		clear_buffer(buffer);
    2784:	85 e4       	ldi	r24, 0x45	; 69
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
    278c:	8f e7       	ldi	r24, 0x7F	; 127
    278e:	94 e8       	ldi	r25, 0x84	; 132
    2790:	2e e1       	ldi	r18, 0x1E	; 30
    2792:	81 50       	subi	r24, 0x01	; 1
    2794:	90 40       	sbci	r25, 0x00	; 0
    2796:	20 40       	sbci	r18, 0x00	; 0
    2798:	e1 f7       	brne	.-8      	; 0x2792 <Display_sticks+0x21c>
    279a:	00 c0       	rjmp	.+0      	; 0x279c <Display_sticks+0x226>
    279c:	00 00       	nop
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    279e:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
    27a2:	08 c0       	rjmp	.+16     	; 0x27b4 <Display_sticks+0x23e>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    27a4:	c0 92 54 07 	sts	0x0754, r12
		Config.SecAileronPol = temp_2ndaileron;
    27a8:	d0 92 55 07 	sts	0x0755, r13
		Config.ElevatorPol = temp_elevator;
    27ac:	f0 92 56 07 	sts	0x0756, r15
		Config.RudderPol = temp_rudder;
    27b0:	90 92 57 07 	sts	0x0757, r9
	}
}
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	eb e0       	ldi	r30, 0x0B	; 11
    27ba:	0c 94 4e 3e 	jmp	0x7c9c	; 0x7c9c <__epilogue_restores__+0xe>

000027be <Set_EEPROM_Default_Config>:

const uint8_t	JR[MAX_RC_CHANNELS] PROGMEM 	= {0,1,2,3,4,5,6,7}; 	// JR/Spektrum channel sequence (TAERG123)
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Set_EEPROM_Default_Config(void)
{
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    27c2:	86 e9       	ldi	r24, 0x96	; 150
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	e2 ec       	ldi	r30, 0xC2	; 194
    27c8:	f5 e0       	ldi	r31, 0x05	; 5
    27ca:	df 01       	movw	r26, r30
    27cc:	ec 01       	movw	r28, r24
    27ce:	1d 92       	st	X+, r1
    27d0:	21 97       	sbiw	r28, 0x01	; 1
    27d2:	e9 f7       	brne	.-6      	; 0x27ce <Set_EEPROM_Default_Config+0x10>

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
    27d4:	81 e5       	ldi	r24, 0x51	; 81
    27d6:	80 93 c2 05 	sts	0x05C2, r24
    27da:	6c e0       	ldi	r22, 0x0C	; 12
    27dc:	77 e0       	ldi	r23, 0x07	; 7
    27de:	a4 e1       	ldi	r26, 0x14	; 20
    27e0:	b7 e0       	ldi	r27, 0x07	; 7
    27e2:	e1 e9       	ldi	r30, 0x91	; 145
    27e4:	f6 e0       	ldi	r31, 0x06	; 6
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
	{	
		Config.min_travel[i] = -125;
    27e6:	43 e8       	ldi	r20, 0x83	; 131
		Config.max_travel[i] = 125;	
    27e8:	3d e7       	ldi	r19, 0x7D	; 125
		Config.Channel[i].output_b = NOMIX;
    27ea:	2f e0       	ldi	r18, 0x0F	; 15
	Config.setup = MAGIC_NUMBER;
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
	{	
		Config.min_travel[i] = -125;
    27ec:	eb 01       	movw	r28, r22
    27ee:	49 93       	st	Y+, r20
    27f0:	be 01       	movw	r22, r28
		Config.max_travel[i] = 125;	
    27f2:	3d 93       	st	X+, r19
    27f4:	cf 01       	movw	r24, r30
    27f6:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].output_b = NOMIX;
    27f8:	ec 01       	movw	r28, r24
    27fa:	28 83       	st	Y, r18
		Config.Channel[i].output_c = NOMIX;
    27fc:	20 83       	st	Z, r18
    27fe:	3f 96       	adiw	r30, 0x0f	; 15

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
    2800:	d7 e0       	ldi	r29, 0x07	; 7
    2802:	ac 31       	cpi	r26, 0x1C	; 28
    2804:	bd 07       	cpc	r27, r29
    2806:	91 f7       	brne	.-28     	; 0x27ec <Set_EEPROM_Default_Config+0x2e>
    2808:	ee ef       	ldi	r30, 0xFE	; 254
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	c3 ec       	ldi	r28, 0xC3	; 195
    280e:	d5 e0       	ldi	r29, 0x05	; 5
    2810:	a4 e2       	ldi	r26, 0x24	; 36
    2812:	b7 e0       	ldi	r27, 0x07	; 7
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    2814:	86 ea       	ldi	r24, 0xA6	; 166
    2816:	9e e0       	ldi	r25, 0x0E	; 14
	}
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    2818:	24 91       	lpm	r18, Z
    281a:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    281c:	8d 93       	st	X+, r24
    281e:	9d 93       	st	X+, r25
    2820:	31 96       	adiw	r30, 0x01	; 1
		Config.Channel[i].output_b = NOMIX;
		Config.Channel[i].output_c = NOMIX;
	}
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    2822:	21 e0       	ldi	r18, 0x01	; 1
    2824:	e6 30       	cpi	r30, 0x06	; 6
    2826:	f2 07       	cpc	r31, r18
    2828:	b9 f7       	brne	.-18     	; 0x2818 <Set_EEPROM_Default_Config+0x5a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    282a:	8e eb       	ldi	r24, 0xBE	; 190
    282c:	9a e0       	ldi	r25, 0x0A	; 10
    282e:	90 93 25 07 	sts	0x0725, r25
    2832:	80 93 24 07 	sts	0x0724, r24

	Config.Failsafe[0] = -100;			// Throttle should failsafe to minimum
    2836:	8c e9       	ldi	r24, 0x9C	; 156
    2838:	80 93 1c 07 	sts	0x071C, r24
	//
	get_preset_mix(AEROPLANE_MIX);		// Load AEROPLANE default mix
    283c:	8c e0       	ldi	r24, 0x0C	; 12
    283e:	99 e1       	ldi	r25, 0x19	; 25
    2840:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <get_preset_mix>
	//
	Config.RxModeIn = SBUS;				// Default to S.Bus
    2844:	21 e0       	ldi	r18, 0x01	; 1
    2846:	20 93 0b 06 	sts	0x060B, r18
	Config.RxModeOut = SBUS;			// Default to S.Bus
    284a:	20 93 0c 06 	sts	0x060C, r18
	Config.TxSeq = JRSEQ;
    284e:	10 92 0d 06 	sts	0x060D, r1
	Config.AccZero[ROLL] 	= 0;		// Acc calibration defaults for KK2.1
	Config.AccZero[PITCH]	= 0;
	Config.AccZero[YAW]		= 0;
	Config.AccZeroNormZ		= 128;
#else
	Config.AccZero[ROLL] 	= 621;		// Acc calibration defaults for KK2.0
    2852:	8d e6       	ldi	r24, 0x6D	; 109
    2854:	92 e0       	ldi	r25, 0x02	; 2
    2856:	90 93 35 07 	sts	0x0735, r25
    285a:	80 93 34 07 	sts	0x0734, r24
	Config.AccZero[PITCH]	= 623;
    285e:	8f e6       	ldi	r24, 0x6F	; 111
    2860:	92 e0       	ldi	r25, 0x02	; 2
    2862:	90 93 37 07 	sts	0x0737, r25
    2866:	80 93 36 07 	sts	0x0736, r24
	Config.AccZero[YAW]		= 643; 		// 643 is the center
    286a:	83 e8       	ldi	r24, 0x83	; 131
    286c:	92 e0       	ldi	r25, 0x02	; 2
    286e:	90 93 39 07 	sts	0x0739, r25
    2872:	80 93 38 07 	sts	0x0738, r24
	Config.AccZeroNormZ		= 765;
    2876:	8d ef       	ldi	r24, 0xFD	; 253
    2878:	92 e0       	ldi	r25, 0x02	; 2
    287a:	90 93 3b 07 	sts	0x073B, r25
    287e:	80 93 3a 07 	sts	0x073A, r24
#endif
	
	// Set up flight modes for all three profiles
	Config.FlightMode[1].StabMode = ALWAYSON;
    2882:	20 93 31 06 	sts	0x0631, r18
	Config.FlightMode[2].StabMode = ALWAYSON;
    2886:	20 93 47 06 	sts	0x0647, r18
	Config.FlightMode[2].AutoMode = ALWAYSON;
    288a:	20 93 48 06 	sts	0x0648, r18
    288e:	ed e2       	ldi	r30, 0x2D	; 45
    2890:	f6 e0       	ldi	r31, 0x06	; 6

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll.P_mult = 80;			// PID defaults		
    2892:	80 e5       	ldi	r24, 0x50	; 80
		Config.FlightMode[i].Roll.I_mult = 50;	
    2894:	22 e3       	ldi	r18, 0x32	; 50
		Config.FlightMode[i].Pitch.P_mult = 80;
		Config.FlightMode[i].Pitch.I_mult = 50;
		Config.FlightMode[i].Yaw.P_mult = 80;
		Config.FlightMode[i].Yaw.I_mult = 80;
		Config.FlightMode[i].A_Roll_P_mult = 20;
    2896:	94 e1       	ldi	r25, 0x14	; 20
    2898:	df 01       	movw	r26, r30
    289a:	1f 97       	sbiw	r26, 0x0f	; 15
	Config.FlightMode[2].AutoMode = ALWAYSON;

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll.P_mult = 80;			// PID defaults		
    289c:	8c 93       	st	X, r24
    289e:	11 96       	adiw	r26, 0x01	; 1
		Config.FlightMode[i].Roll.I_mult = 50;	
    28a0:	2c 93       	st	X, r18
    28a2:	16 96       	adiw	r26, 0x06	; 6
		Config.FlightMode[i].Pitch.P_mult = 80;
    28a4:	8c 93       	st	X, r24
    28a6:	11 96       	adiw	r26, 0x01	; 1
		Config.FlightMode[i].Pitch.I_mult = 50;
    28a8:	2c 93       	st	X, r18
    28aa:	16 96       	adiw	r26, 0x06	; 6
		Config.FlightMode[i].Yaw.P_mult = 80;
    28ac:	8c 93       	st	X, r24
		Config.FlightMode[i].Yaw.I_mult = 80;
    28ae:	80 83       	st	Z, r24
    28b0:	1a 97       	sbiw	r26, 0x0a	; 10
		Config.FlightMode[i].A_Roll_P_mult = 20;
    28b2:	9c 93       	st	X, r25
    28b4:	17 96       	adiw	r26, 0x07	; 7
		Config.FlightMode[i].A_Pitch_P_mult = 20;
    28b6:	9c 93       	st	X, r25
    28b8:	76 96       	adiw	r30, 0x16	; 22
	Config.FlightMode[1].StabMode = ALWAYSON;
	Config.FlightMode[2].StabMode = ALWAYSON;
	Config.FlightMode[2].AutoMode = ALWAYSON;

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
    28ba:	36 e0       	ldi	r19, 0x06	; 6
    28bc:	ef 36       	cpi	r30, 0x6F	; 111
    28be:	f3 07       	cpc	r31, r19
    28c0:	59 f7       	brne	.-42     	; 0x2898 <Set_EEPROM_Default_Config+0xda>
		Config.FlightMode[i].Yaw.I_mult = 80;
		Config.FlightMode[i].A_Roll_P_mult = 20;
		Config.FlightMode[i].A_Pitch_P_mult = 20;
	}

	Config.Acc_LPF = HZ21;
    28c2:	82 e0       	ldi	r24, 0x02	; 2
    28c4:	80 93 82 06 	sts	0x0682, r24
#ifdef KK21
	Config.MPU6050_LPF = HZ21;			// 21Hz
#endif
	Config.CF_factor = 7;
    28c8:	97 e0       	ldi	r25, 0x07	; 7
    28ca:	90 93 81 06 	sts	0x0681, r25
	Config.DynGainSrc = NOCHAN;
    28ce:	98 e0       	ldi	r25, 0x08	; 8
    28d0:	90 93 10 06 	sts	0x0610, r25
	Config.DynGain = 100;
    28d4:	24 e6       	ldi	r18, 0x64	; 100
    28d6:	20 93 11 06 	sts	0x0611, r18
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    28da:	24 e0       	ldi	r18, 0x04	; 4
    28dc:	20 93 0e 06 	sts	0x060E, r18
	Config.FlapChan = NOCHAN;			// This is to make sure that flaperons are handled correctly when disabled
    28e0:	90 93 0f 06 	sts	0x060F, r25
	Config.Orientation = HORIZONTAL;	// Board orientation
    28e4:	10 92 7d 06 	sts	0x067D, r1
#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
#else
	Config.Contrast = 36;				// Contrast (Everything else)
    28e8:	94 e2       	ldi	r25, 0x24	; 36
    28ea:	90 93 7e 06 	sts	0x067E, r25
#endif
	Config.LMA_enable = 0;				// Default to off
    28ee:	10 92 80 06 	sts	0x0680, r1
	Config.Stick_Lock_rate = 3;
    28f2:	93 e0       	ldi	r25, 0x03	; 3
    28f4:	90 93 14 06 	sts	0x0614, r25
	Config.Deadband = 2;				// RC deadband = 2%
    28f8:	80 93 15 06 	sts	0x0615, r24
	Config.FailsafeThrottle = -100;		// Throttle position in failsafe
    28fc:	8c e9       	ldi	r24, 0x9C	; 156
    28fe:	80 93 17 06 	sts	0x0617, r24
}
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	08 95       	ret

00002908 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2908:	a1 e0       	ldi	r26, 0x01	; 1
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ea e8       	ldi	r30, 0x8A	; 138
    290e:	f4 e1       	ldi	r31, 0x14	; 20
    2910:	0c 94 39 3e 	jmp	0x7c72	; 0x7c72 <__prologue_saves__+0x1c>
    2914:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2916:	69 83       	std	Y+1, r22	; 0x01
    2918:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__eerd_byte_m324pa>
    291c:	69 81       	ldd	r22, Y+1	; 0x01
    291e:	86 17       	cp	r24, r22
    2920:	19 f0       	breq	.+6      	; 0x2928 <eeprom_write_byte_changed+0x20>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2922:	c8 01       	movw	r24, r16
    2924:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <__eewr_byte_m324pa>
	}
}
    2928:	21 96       	adiw	r28, 0x01	; 1
    292a:	e4 e0       	ldi	r30, 0x04	; 4
    292c:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__epilogue_restores__+0x1c>

00002930 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	ec 01       	movw	r28, r24
    293e:	8b 01       	movw	r16, r22
    2940:	7a 01       	movw	r14, r20
    2942:	e8 0e       	add	r14, r24
    2944:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2946:	ce 15       	cp	r28, r14
    2948:	df 05       	cpc	r29, r15
    294a:	39 f0       	breq	.+14     	; 0x295a <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    294c:	69 91       	ld	r22, Y+
    294e:	c8 01       	movw	r24, r16
    2950:	0e 94 84 14 	call	0x2908	; 0x2908 <eeprom_write_byte_changed>
		src++;
		dest++;
    2954:	0f 5f       	subi	r16, 0xFF	; 255
    2956:	1f 4f       	sbci	r17, 0xFF	; 255
    2958:	f6 cf       	rjmp	.-20     	; 0x2946 <eeprom_write_block_changes+0x16>
	}
}
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	e6 e0       	ldi	r30, 0x06	; 6
    2960:	0c 94 53 3e 	jmp	0x7ca6	; 0x7ca6 <__epilogue_restores__+0x18>

00002964 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2964:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    2966:	46 e9       	ldi	r20, 0x96	; 150
    2968:	51 e0       	ldi	r21, 0x01	; 1
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	82 ec       	ldi	r24, 0xC2	; 194
    2970:	95 e0       	ldi	r25, 0x05	; 5
    2972:	0e 94 98 14 	call	0x2930	; 0x2930 <eeprom_write_block_changes>
	sei();
    2976:	78 94       	sei
    2978:	08 95       	ret

0000297a <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// Load last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!= MAGIC_NUMBER)
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <__eerd_byte_m324pa>
    2982:	81 35       	cpi	r24, 0x51	; 81
    2984:	29 f0       	breq	.+10     	; 0x2990 <Initial_EEPROM_Config_Load+0x16>
	{
		Set_EEPROM_Default_Config();
    2986:	0e 94 df 13 	call	0x27be	; 0x27be <Set_EEPROM_Default_Config>
		// Write to eeProm
		Save_Config_to_EEPROM();
    298a:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
    298e:	08 95       	ret
	} 
	else 
	{
		// Read eeProm
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
    2990:	46 e9       	ldi	r20, 0x96	; 150
    2992:	51 e0       	ldi	r21, 0x01	; 1
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	82 ec       	ldi	r24, 0xC2	; 194
    299a:	95 e0       	ldi	r25, 0x05	; 5
    299c:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <__eerd_block_m324pa>
    29a0:	08 95       	ret

000029a2 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    29a2:	ac e0       	ldi	r26, 0x0C	; 12
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e7 ed       	ldi	r30, 0xD7	; 215
    29a8:	f4 e1       	ldi	r31, 0x14	; 20
    29aa:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
	uint8_t	old_flight = 0;			// Current/old flight profile
	uint8_t i = 0;
	uint32_t interval = 0;			// IMU interval


	init();							// Do all init tasks
    29ae:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <init>
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	uint8_t	old_flight = 0;			// Current/old flight profile
    29b2:	1f 82       	std	Y+7, r1	; 0x07

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    29b4:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t RC_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
    29b6:	71 2c       	mov	r7, r1
	uint8_t Ticker_TCNT2 = 0;
	uint8_t RC_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
    29b8:	21 2c       	mov	r2, r1
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t RC_TCNT2 = 0;
    29ba:	1e 82       	std	Y+6, r1	; 0x06
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    29bc:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t FrameRate_TCNT1 = 0;
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
    29be:	f1 2c       	mov	r15, r1
	uint16_t ticker_16 = 0;
	uint16_t FrameRate_TCNT1 = 0;
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    29c0:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t FrameRate_TCNT1 = 0;
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
    29c2:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t FrameRate_TCNT1 = 0;
    29c4:	c1 2c       	mov	r12, r1
    29c6:	d1 2c       	mov	r13, r1
	uint32_t LostModel_timer = 0;
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    29c8:	1b 82       	std	Y+3, r1	; 0x03
    29ca:	1a 82       	std	Y+2, r1	; 0x02
	// 32-bit timers
	uint32_t LostModel_timer = 0;
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    29cc:	41 2c       	mov	r4, r1
    29ce:	51 2c       	mov	r5, r1

	// 32-bit timers
	uint32_t LostModel_timer = 0;
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    29d0:	1c 86       	std	Y+12, r1	; 0x0c
    29d2:	1b 86       	std	Y+11, r1	; 0x0b
	bool Interrupted_Clone = false;
	bool OutputTick = false;
	bool OverrideOutput = false;

	// 32-bit timers
	uint32_t LostModel_timer = 0;
    29d4:	81 2c       	mov	r8, r1
    29d6:	91 2c       	mov	r9, r1
    29d8:	54 01       	movw	r10, r8

int main(void)
{
	// Flags
	bool Interrupted_Clone = false;
	bool OutputTick = false;
    29da:	61 2c       	mov	r6, r1
//************************************************************

int main(void)
{
	// Flags
	bool Interrupted_Clone = false;
    29dc:	19 82       	std	Y+1, r1	; 0x01

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    29de:	80 91 16 01 	lds	r24, 0x0116
    29e2:	8f 5f       	subi	r24, 0xFF	; 255
    29e4:	80 93 16 01 	sts	0x0116, r24
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    29e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    29ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    29ec:	2c 34       	cpi	r18, 0x4C	; 76
    29ee:	3c 44       	sbci	r19, 0x4C	; 76
    29f0:	c8 f0       	brcs	.+50     	; 0x2a24 <main+0x82>
		{
			Status_seconds++;
    29f2:	73 94       	inc	r7
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    29f4:	10 92 1a 01 	sts	0x011A, r1
    29f8:	10 92 19 01 	sts	0x0119, r1
			InterruptCounter = 0;
			
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    29fc:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <GetVbat>
    2a00:	20 91 76 06 	lds	r18, 0x0676
    2a04:	30 91 77 06 	lds	r19, 0x0677
    2a08:	82 17       	cp	r24, r18
    2a0a:	93 07       	cpc	r25, r19
    2a0c:	20 f4       	brcc	.+8      	; 0x2a16 <main+0x74>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    2a0e:	80 91 1d 01 	lds	r24, 0x011D
    2a12:	88 60       	ori	r24, 0x08	; 8
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <main+0x7a>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    2a16:	80 91 1d 01 	lds	r24, 0x011D
    2a1a:	87 7f       	andi	r24, 0xF7	; 247
    2a1c:	80 93 1d 01 	sts	0x011D, r24

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    2a20:	1c 86       	std	Y+12, r1	; 0x0c
    2a22:	1b 86       	std	Y+11, r1	; 0x0b
		// Assume output is OK until through the state machine
		// If the state machine requires output to be blocked,
		// it will set this flag
		OverrideOutput = false;
		
		switch(Menu_mode) 
    2a24:	81 2f       	mov	r24, r17
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	8b 30       	cpi	r24, 0x0B	; 11
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <main+0x8e>
    2a2e:	60 c0       	rjmp	.+192    	; 0x2af0 <main+0x14e>
    2a30:	fc 01       	movw	r30, r24
    2a32:	e2 5c       	subi	r30, 0xC2	; 194
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	0c 94 f4 3d 	jmp	0x7be8	; 0x7be8 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    2a3a:	83 b1       	in	r24, 0x03	; 3
    2a3c:	80 7f       	andi	r24, 0xF0	; 240
    2a3e:	80 3f       	cpi	r24, 0xF0	; 240
    2a40:	39 f0       	breq	.+14     	; 0x2a50 <main+0xae>
					OverrideOutput = true;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause output generation interruption
					TIMSK0 |= (1 << TOIE0);	
    2a42:	80 91 6e 00 	lds	r24, 0x006E
    2a46:	81 60       	ori	r24, 0x01	; 1
    2a48:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    2a4c:	13 e0       	ldi	r17, 0x03	; 3
    2a4e:	4b c0       	rjmp	.+150    	; 0x2ae6 <main+0x144>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt output generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    2a50:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	85 bb       	out	0x15, r24	; 21
    2a58:	4b c0       	rjmp	.+150    	; 0x2af0 <main+0x14e>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If failsafe is true, there is no data to interrupt.
			// output activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
    2a5a:	80 91 6a 07 	lds	r24, 0x076A
    2a5e:	81 11       	cpse	r24, r1
    2a60:	44 c0       	rjmp	.+136    	; 0x2aea <main+0x148>
    2a62:	29 81       	ldd	r18, Y+1	; 0x01
    2a64:	21 11       	cpse	r18, r1
    2a66:	41 c0       	rjmp	.+130    	; 0x2aea <main+0x148>
    2a68:	80 91 1c 01 	lds	r24, 0x011C
    2a6c:	82 ff       	sbrs	r24, 2
    2a6e:	40 c0       	rjmp	.+128    	; 0x2af0 <main+0x14e>
				{
					// Ready to move on
					Menu_mode = STATUS;
    2a70:	14 e0       	ldi	r17, 0x04	; 4
    2a72:	4a c0       	rjmp	.+148    	; 0x2b08 <main+0x166>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    2a74:	0e 94 22 11 	call	0x2244	; 0x2244 <Display_status>

				// Prevent output output just after updating the LCD
				OverrideOutput = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    2a78:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    2a7a:	41 2c       	mov	r4, r1
    2a7c:	51 2c       	mov	r5, r1
    2a7e:	44 c0       	rjmp	.+136    	; 0x2b08 <main+0x166>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    2a80:	1f 9b       	sbis	0x03, 7	; 3
    2a82:	36 c0       	rjmp	.+108    	; 0x2af0 <main+0x14e>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    2a84:	15 e0       	ldi	r17, 0x05	; 5
    2a86:	34 c0       	rjmp	.+104    	; 0x2af0 <main+0x14e>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= STATUS_OFF_TIME)
    2a88:	32 e0       	ldi	r19, 0x02	; 2
    2a8a:	37 15       	cp	r19, r7
    2a8c:	98 f1       	brcs	.+102    	; 0x2af4 <main+0x152>
					// Prevent output output just after updating the LCD
					OverrideOutput = true;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    2a8e:	1f 9b       	sbis	0x03, 7	; 3
    2a90:	33 c0       	rjmp	.+102    	; 0x2af8 <main+0x156>
					// Prevent output output
					OverrideOutput = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    2a92:	43 e1       	ldi	r20, 0x13	; 19
    2a94:	44 16       	cp	r4, r20
    2a96:	54 06       	cpc	r5, r20
    2a98:	58 f1       	brcs	.+86     	; 0x2af0 <main+0x14e>
				{
					Menu_mode = PRESTATUS;
    2a9a:	13 e0       	ldi	r17, 0x03	; 3
    2a9c:	35 c0       	rjmp	.+106    	; 0x2b08 <main+0x166>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If failsafe is true, there is no data to interrupt.
			// output activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
    2a9e:	80 91 6a 07 	lds	r24, 0x076A
    2aa2:	81 11       	cpse	r24, r1
    2aa4:	2b c0       	rjmp	.+86     	; 0x2afc <main+0x15a>
    2aa6:	29 81       	ldd	r18, Y+1	; 0x01
    2aa8:	21 11       	cpse	r18, r1
    2aaa:	28 c0       	rjmp	.+80     	; 0x2afc <main+0x15a>
    2aac:	80 91 1c 01 	lds	r24, 0x011C
    2ab0:	82 ff       	sbrs	r24, 2
    2ab2:	2a c0       	rjmp	.+84     	; 0x2b08 <main+0x166>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    2ab4:	18 e0       	ldi	r17, 0x08	; 8
    2ab6:	1c c0       	rjmp	.+56     	; 0x2af0 <main+0x14e>
			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:

				// Pop up the Idle screen
				idle_screen();
    2ab8:	0e 94 22 1a 	call	0x3444	; 0x3444 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    2abc:	19 e0       	ldi	r17, 0x09	; 9
    2abe:	24 c0       	rjmp	.+72     	; 0x2b08 <main+0x166>

			// In POSTSTATUS_TIMEOUT mode, we wait for a output cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
    2ac0:	80 91 6a 07 	lds	r24, 0x076A
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	1c c0       	rjmp	.+56     	; 0x2b00 <main+0x15e>
    2ac8:	39 81       	ldd	r19, Y+1	; 0x01
    2aca:	31 11       	cpse	r19, r1
    2acc:	19 c0       	rjmp	.+50     	; 0x2b00 <main+0x15e>
    2ace:	80 91 1c 01 	lds	r24, 0x011C
    2ad2:	82 ff       	sbrs	r24, 2
    2ad4:	19 c0       	rjmp	.+50     	; 0x2b08 <main+0x166>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    2ad6:	10 e0       	ldi	r17, 0x00	; 0
    2ad8:	0b c0       	rjmp	.+22     	; 0x2af0 <main+0x14e>
								
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    2ada:	29 98       	cbi	0x05, 1	; 5
				// Start the menu system
				menu_main();
    2adc:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    2ae0:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <reset_IMU>
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    2ae4:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    2ae6:	71 2c       	mov	r7, r1
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <main+0x166>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
				{
					// Ready to move on
					Menu_mode = STATUS;
    2aea:	14 e0       	ldi	r17, 0x04	; 4

					// Prevent output output
					OverrideOutput = true;
    2aec:	01 e0       	ldi	r16, 0x01	; 1
    2aee:	0a c0       	rjmp	.+20     	; 0x2b04 <main+0x162>
		//************************************************************
		
		// Assume output is OK until through the state machine
		// If the state machine requires output to be blocked,
		// it will set this flag
		OverrideOutput = false;
    2af0:	00 e0       	ldi	r16, 0x00	; 0
    2af2:	0b c0       	rjmp	.+22     	; 0x2b0a <main+0x168>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= STATUS_OFF_TIME)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    2af4:	17 e0       	ldi	r17, 0x07	; 7
    2af6:	08 c0       	rjmp	.+16     	; 0x2b08 <main+0x166>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    2af8:	1a e0       	ldi	r17, 0x0A	; 10
    2afa:	06 c0       	rjmp	.+12     	; 0x2b08 <main+0x166>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    2afc:	18 e0       	ldi	r17, 0x08	; 8
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <main+0x160>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    2b00:	10 e0       	ldi	r17, 0x00	; 0

					// Prevent output output
					OverrideOutput = false;
    2b02:	00 e0       	ldi	r16, 0x00	; 0
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    2b04:	19 82       	std	Y+1, r1	; 0x01
    2b06:	01 c0       	rjmp	.+2      	; 0x2b0a <main+0x168>
				}
				else
				{
					// Enable output output
					OverrideOutput = true;
    2b08:	01 e0       	ldi	r16, 0x01	; 1
		//************************************************************
		//* Alarms
		//************************************************************

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
    2b0a:	80 91 b2 00 	lds	r24, 0x00B2
		Lost_TCNT2 = TCNT2;
    2b0e:	40 91 b2 00 	lds	r20, 0x00B2
    2b12:	4a 87       	std	Y+10, r20	; 0x0a

		// Reset LMA count if any RX activity, LMA off
		if ((Flight_flags & (1 << RxActivity)) || (Config.LMA_enable == 0))
    2b14:	90 91 1c 01 	lds	r25, 0x011C
    2b18:	40 91 80 06 	lds	r20, 0x0680
    2b1c:	93 fd       	sbrc	r25, 3
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <main+0x182>
    2b20:	41 11       	cpse	r20, r1
    2b22:	07 c0       	rjmp	.+14     	; 0x2b32 <main+0x190>
		{														
			LostModel_timer = 0;
			LMA_minutes = 0;
			General_error &= ~(1 << LOST_MODEL); // Clear lost model bit
    2b24:	80 91 1d 01 	lds	r24, 0x011D
    2b28:	8b 7f       	andi	r24, 0xFB	; 251
    2b2a:	80 93 1d 01 	sts	0x011D, r24

		// Reset LMA count if any RX activity, LMA off
		if ((Flight_flags & (1 << RxActivity)) || (Config.LMA_enable == 0))
		{														
			LostModel_timer = 0;
			LMA_minutes = 0;
    2b2e:	21 2c       	mov	r2, r1
    2b30:	0e c0       	rjmp	.+28     	; 0x2b4e <main+0x1ac>
		//************************************************************
		//* Alarms
		//************************************************************

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
    2b32:	8f 19       	sub	r24, r15
    2b34:	88 0e       	add	r8, r24
    2b36:	91 1c       	adc	r9, r1
    2b38:	a1 1c       	adc	r10, r1
    2b3a:	b1 1c       	adc	r11, r1
			LMA_minutes = 0;
			General_error &= ~(1 << LOST_MODEL); // Clear lost model bit
		}
		
		// Count the minutes
		if (LostModel_timer > LMA_TIMEOUT)
    2b3c:	85 e9       	ldi	r24, 0x95	; 149
    2b3e:	88 16       	cp	r8, r24
    2b40:	81 ee       	ldi	r24, 0xE1	; 225
    2b42:	98 06       	cpc	r9, r24
    2b44:	81 e1       	ldi	r24, 0x11	; 17
    2b46:	a8 06       	cpc	r10, r24
    2b48:	b1 04       	cpc	r11, r1
    2b4a:	20 f0       	brcs	.+8      	; 0x2b54 <main+0x1b2>
		{
			LMA_minutes++;
    2b4c:	23 94       	inc	r2
			LostModel_timer = 0;
    2b4e:	81 2c       	mov	r8, r1
    2b50:	91 2c       	mov	r9, r1
    2b52:	54 01       	movw	r10, r8
		}

		// Trigger lost model alarm if enabled and due or failsafe
		if ((LMA_minutes >= Config.LMA_enable) && (Config.LMA_enable != 0))	
    2b54:	22 2d       	mov	r18, r2
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	84 2f       	mov	r24, r20
    2b5a:	99 27       	eor	r25, r25
    2b5c:	87 fd       	sbrc	r24, 7
    2b5e:	90 95       	com	r25
    2b60:	28 17       	cp	r18, r24
    2b62:	39 07       	cpc	r19, r25
    2b64:	3c f0       	brlt	.+14     	; 0x2b74 <main+0x1d2>
    2b66:	44 23       	and	r20, r20
    2b68:	29 f0       	breq	.+10     	; 0x2b74 <main+0x1d2>
		{
			General_error |= (1 << LOST_MODEL); // Set lost model bit
    2b6a:	80 91 1d 01 	lds	r24, 0x011D
    2b6e:	84 60       	ori	r24, 0x04	; 4
    2b70:	80 93 1d 01 	sts	0x011D, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    2b74:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <GetVbat>
    2b78:	20 91 76 06 	lds	r18, 0x0676
    2b7c:	30 91 77 06 	lds	r19, 0x0677
    2b80:	82 17       	cp	r24, r18
    2b82:	93 07       	cpc	r25, r19
    2b84:	20 f4       	brcc	.+8      	; 0x2b8e <main+0x1ec>
		{
			General_error |= (1 << LVA_ALARM); 	// Set low battery bit
    2b86:	80 91 1d 01 	lds	r24, 0x011D
    2b8a:	88 60       	ori	r24, 0x08	; 8
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <main+0x1f2>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
    2b8e:	80 91 1d 01 	lds	r24, 0x011D
    2b92:	87 7f       	andi	r24, 0xF7	; 247
    2b94:	80 93 1d 01 	sts	0x011D, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
    2b98:	80 91 1d 01 	lds	r24, 0x011D
    2b9c:	83 fd       	sbrc	r24, 3
    2b9e:	0c c0       	rjmp	.+24     	; 0x2bb8 <main+0x216>
			  (General_error & (1 << LOST_MODEL)) || 
    2ba0:	80 91 1d 01 	lds	r24, 0x011D
		{
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
    2ba4:	82 fd       	sbrc	r24, 2
    2ba6:	08 c0       	rjmp	.+16     	; 0x2bb8 <main+0x216>
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
    2ba8:	80 91 1d 01 	lds	r24, 0x011D
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
    2bac:	81 fd       	sbrc	r24, 1
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <main+0x216>
			  (General_error & (1 << THROTTLE_HIGH)) ||	
			  (Flight_flags & (1 << FailsafeFlag))) &&
    2bb0:	80 91 1c 01 	lds	r24, 0x011C
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
    2bb4:	82 ff       	sbrs	r24, 2
    2bb6:	06 c0       	rjmp	.+12     	; 0x2bc4 <main+0x222>
			  (Flight_flags & (1 << FailsafeFlag))) &&
			  (Alarm_flags & (1 << BUZZER_ON))) 
    2bb8:	80 91 1b 01 	lds	r24, 0x011B

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
			  (Flight_flags & (1 << FailsafeFlag))) &&
    2bbc:	84 ff       	sbrs	r24, 4
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <main+0x222>
			  (Alarm_flags & (1 << BUZZER_ON))) 
		{
			LVA = 1;
    2bc0:	29 9a       	sbi	0x05, 1	; 5
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <main+0x224>
		}
		else 
		{
			LVA = 0;
    2bc4:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    2bc6:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <RxGetChannels>

		// Zero RC when in Failsafe
		if (Flight_flags & (1 << FailsafeFlag))
    2bca:	80 91 1c 01 	lds	r24, 0x011C
    2bce:	82 fd       	sbrc	r24, 2
    2bd0:	12 c0       	rjmp	.+36     	; 0x2bf6 <main+0x254>
				RCinputs[i] = 0;
			}
		}

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    2bd2:	80 91 cd 07 	lds	r24, 0x07CD
    2bd6:	90 91 ce 07 	lds	r25, 0x07CE
    2bda:	c2 97       	sbiw	r24, 0x32	; 50
    2bdc:	d4 f4       	brge	.+52     	; 0x2c12 <main+0x270>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);
    2bde:	80 91 1d 01 	lds	r24, 0x011D
    2be2:	8d 7f       	andi	r24, 0xFD	; 253
    2be4:	80 93 1d 01 	sts	0x011D, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    2be8:	8c e0       	ldi	r24, 0x0C	; 12
    2bea:	e9 ea       	ldi	r30, 0xA9	; 169
    2bec:	f7 e0       	ldi	r31, 0x07	; 7
    2bee:	11 92       	st	Z+, r1
    2bf0:	8a 95       	dec	r24
    2bf2:	e9 f7       	brne	.-6      	; 0x2bee <main+0x24c>
    2bf4:	0e c0       	rjmp	.+28     	; 0x2c12 <main+0x270>

		// Update zeroed RC channel data
		RxGetChannels();

		// Zero RC when in Failsafe
		if (Flight_flags & (1 << FailsafeFlag))
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
		{
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				RCinputs[i] = 0;
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	ee 0f       	add	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	e1 53       	subi	r30, 0x31	; 49
    2c02:	f8 4f       	sbci	r31, 0xF8	; 248
    2c04:	11 82       	std	Z+1, r1	; 0x01
    2c06:	10 82       	st	Z, r1
    2c08:	01 96       	adiw	r24, 0x01	; 1
		RxGetChannels();

		// Zero RC when in Failsafe
		if (Flight_flags & (1 << FailsafeFlag))
		{
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    2c0a:	88 30       	cpi	r24, 0x08	; 8
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	a9 f7       	brne	.-22     	; 0x2bfa <main+0x258>
    2c10:	e0 cf       	rjmp	.-64     	; 0x2bd2 <main+0x230>
		//************************************************************
		//* Flight mode selection. Now hard-coded to the following.
		//* 0 to -50 = 1, -50 to +50 = 2 and  >50 = 3
		//************************************************************

		if (RCinputs[Config.FlightChan] > 500)
    2c12:	e0 91 0e 06 	lds	r30, 0x060E
    2c16:	ee 0f       	add	r30, r30
    2c18:	ff 0b       	sbc	r31, r31
    2c1a:	e1 53       	subi	r30, 0x31	; 49
    2c1c:	f8 4f       	sbci	r31, 0xF8	; 248
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	85 3f       	cpi	r24, 0xF5	; 245
    2c24:	91 40       	sbci	r25, 0x01	; 1
    2c26:	24 f0       	brlt	.+8      	; 0x2c30 <main+0x28e>
		{
			Config.Flight = 2;			// Flight mode 2
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	80 93 46 07 	sts	0x0746, r24
    2c2e:	0b c0       	rjmp	.+22     	; 0x2c46 <main+0x2a4>
		}	
		else if (RCinputs[Config.FlightChan] > -500)
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	8d 30       	cpi	r24, 0x0D	; 13
    2c36:	9e 4f       	sbci	r25, 0xFE	; 254
    2c38:	24 f0       	brlt	.+8      	; 0x2c42 <main+0x2a0>
		{
			Config.Flight = 1;			// Flight mode 1
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	40 93 46 07 	sts	0x0746, r20
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <main+0x2a4>
		}
		else
		{
			Config.Flight = 0;			// Flight mode 0
    2c42:	10 92 46 07 	sts	0x0746, r1
		}

		// When changing flight modes or on first startup
		if ((Config.Flight != old_flight) || (Flight_flags & (1 << FirstTimeFlightMode)))
    2c46:	20 91 46 07 	lds	r18, 0x0746
    2c4a:	33 27       	eor	r19, r19
    2c4c:	27 fd       	sbrc	r18, 7
    2c4e:	30 95       	com	r19
    2c50:	4f 81       	ldd	r20, Y+7	; 0x07
    2c52:	84 2f       	mov	r24, r20
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	28 17       	cp	r18, r24
    2c58:	39 07       	cpc	r19, r25
    2c5a:	21 f4       	brne	.+8      	; 0x2c64 <main+0x2c2>
    2c5c:	80 91 1c 01 	lds	r24, 0x011C
    2c60:	87 ff       	sbrs	r24, 7
    2c62:	10 c0       	rjmp	.+32     	; 0x2c84 <main+0x2e2>
		{
			// Clear first time flag
			Flight_flags &= ~(1 << FirstTimeFlightMode);
    2c64:	80 91 1c 01 	lds	r24, 0x011C
    2c68:	8f 77       	andi	r24, 0x7F	; 127
    2c6a:	80 93 1c 01 	sts	0x011C, r24

			// Update travel limits
			UpdateLimits();
    2c6e:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <UpdateLimits>
	
			// Reset I-terms so that neutral is reset
			// Using memset saves code space
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    2c72:	8c e0       	ldi	r24, 0x0C	; 12
    2c74:	e9 ea       	ldi	r30, 0xA9	; 169
    2c76:	f7 e0       	ldi	r31, 0x07	; 7
    2c78:	11 92       	st	Z+, r1
    2c7a:	8a 95       	dec	r24
    2c7c:	e9 f7       	brne	.-6      	; 0x2c78 <main+0x2d6>

			old_flight = Config.Flight;
    2c7e:	20 91 46 07 	lds	r18, 0x0746
    2c82:	2f 83       	std	Y+7, r18	; 0x07
		}
			
		// Detect when sticks centered (hands free)
		RC_Deadband();
    2c84:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <RC_Deadband>
		//*		Autolevel always OFF if Config.AutoMode = OFF (default)
		//*		Autolevel disabled if Launch_Block = true
		//*		Autolevel always ON if in Advanced failsafe condition
		//************************************************************

		switch(Config.FlightMode[Config.Flight].AutoMode)
    2c88:	e0 91 46 07 	lds	r30, 0x0746
    2c8c:	8e 2f       	mov	r24, r30
    2c8e:	99 27       	eor	r25, r25
    2c90:	87 fd       	sbrc	r24, 7
    2c92:	90 95       	com	r25
    2c94:	36 e1       	ldi	r19, 0x16	; 22
    2c96:	e3 02       	muls	r30, r19
    2c98:	f0 01       	movw	r30, r0
    2c9a:	11 24       	eor	r1, r1
    2c9c:	e4 5e       	subi	r30, 0xE4	; 228
    2c9e:	f9 4f       	sbci	r31, 0xF9	; 249
    2ca0:	20 81       	ld	r18, Z
    2ca2:	21 30       	cpi	r18, 0x01	; 1
    2ca4:	69 f0       	breq	.+26     	; 0x2cc0 <main+0x31e>
    2ca6:	22 30       	cpi	r18, 0x02	; 2
    2ca8:	19 f0       	breq	.+6      	; 0x2cb0 <main+0x30e>
    2caa:	21 11       	cpse	r18, r1
    2cac:	0e c0       	rjmp	.+28     	; 0x2cca <main+0x328>
    2cae:	04 c0       	rjmp	.+8      	; 0x2cb8 <main+0x316>
		{
			case DISABLED:
				Flight_flags &= ~(1 << AutoLevel);	// De-activate autolevel mode
				break;
			case HANDSFREE:
				if (Flight_flags & (1 << HandsFree))// If hands free
    2cb0:	20 91 1c 01 	lds	r18, 0x011C
    2cb4:	24 fd       	sbrc	r18, 4
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <main+0x31e>
				{
					Flight_flags |= (1 << AutoLevel);// Activate autolevel mode
				}	
				else
				{
					Flight_flags &= ~(1 << AutoLevel); // De-activate autolevel mode
    2cb8:	20 91 1c 01 	lds	r18, 0x011C
    2cbc:	2e 7f       	andi	r18, 0xFE	; 254
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <main+0x324>
				}
				break;
			case ALWAYSON:
				Flight_flags |= (1 << AutoLevel);	// Activate autolevel mode
    2cc0:	20 91 1c 01 	lds	r18, 0x011C
    2cc4:	21 60       	ori	r18, 0x01	; 1
    2cc6:	20 93 1c 01 	sts	0x011C, r18
			default:								// Disable by default
				break;
		}

		// Check for advanced Failsafe
		if ((Config.FailsafeType == ADVANCED) && (Flight_flags & (1 << FailsafeFlag)))
    2cca:	20 91 16 06 	lds	r18, 0x0616
    2cce:	22 30       	cpi	r18, 0x02	; 2
    2cd0:	49 f4       	brne	.+18     	; 0x2ce4 <main+0x342>
    2cd2:	20 91 1c 01 	lds	r18, 0x011C
    2cd6:	22 ff       	sbrs	r18, 2
    2cd8:	05 c0       	rjmp	.+10     	; 0x2ce4 <main+0x342>
		{
			Flight_flags |= (1 << AutoLevel);
    2cda:	20 91 1c 01 	lds	r18, 0x011C
    2cde:	21 60       	ori	r18, 0x01	; 1
    2ce0:	20 93 1c 01 	sts	0x011C, r18
		//* Primary override:
		//*		Stability enabled if Config.StabMode = ON
		//*		Stability always OFF if Config.StabMode = OFF (default)
		//************************************************************

		switch(Config.FlightMode[Config.Flight].StabMode)
    2ce4:	26 e1       	ldi	r18, 0x16	; 22
    2ce6:	28 9f       	mul	r18, r24
    2ce8:	f0 01       	movw	r30, r0
    2cea:	29 9f       	mul	r18, r25
    2cec:	f0 0d       	add	r31, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	e5 5e       	subi	r30, 0xE5	; 229
    2cf2:	f9 4f       	sbci	r31, 0xF9	; 249
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 23       	and	r24, r24
    2cf8:	31 f0       	breq	.+12     	; 0x2d06 <main+0x364>
    2cfa:	81 30       	cpi	r24, 0x01	; 1
    2cfc:	49 f4       	brne	.+18     	; 0x2d10 <main+0x36e>
		{
			case DISABLED:
				Flight_flags &= ~(1 << Stability);// De-activate autolevel mode
				break;
			case ALWAYSON:
				Flight_flags |= (1 << Stability);// Activate autolevel mode
    2cfe:	80 91 1c 01 	lds	r24, 0x011C
    2d02:	82 60       	ori	r24, 0x02	; 2
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <main+0x36a>
		//************************************************************

		switch(Config.FlightMode[Config.Flight].StabMode)
		{
			case DISABLED:
				Flight_flags &= ~(1 << Stability);// De-activate autolevel mode
    2d06:	80 91 1c 01 	lds	r24, 0x011C
    2d0a:	8d 7f       	andi	r24, 0xFD	; 253
				break;
			case ALWAYSON:
				Flight_flags |= (1 << Stability);// Activate autolevel mode
    2d0c:	80 93 1c 01 	sts	0x011C, r24
				break;
		}

		// Reset I-terms when stabilise is off
		// This is probably superfluous...
		if (!(Flight_flags & (1 << Stability)))
    2d10:	80 91 1c 01 	lds	r24, 0x011C
    2d14:	81 fd       	sbrc	r24, 1
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <main+0x382>
		{
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    2d18:	8c e0       	ldi	r24, 0x0C	; 12
    2d1a:	e9 ea       	ldi	r30, 0xA9	; 169
    2d1c:	f7 e0       	ldi	r31, 0x07	; 7
    2d1e:	11 92       	st	Z+, r1
    2d20:	8a 95       	dec	r24
    2d22:	e9 f7       	brne	.-6      	; 0x2d1e <main+0x37c>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    2d24:	0e 94 10 21 	call	0x4220	; 0x4220 <TIM16_ReadTCNT1>
    2d28:	99 87       	std	Y+9, r25	; 0x09
    2d2a:	88 87       	std	Y+8, r24	; 0x08

		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)
		
		// Sets the desired output rate
		FrameDrop_Output_Rate += (uint16_t)(Save_TCNT1 - FrameRate_TCNT1);
    2d2c:	40 91 12 01 	lds	r20, 0x0112
    2d30:	50 91 13 01 	lds	r21, 0x0113
    2d34:	60 91 14 01 	lds	r22, 0x0114
    2d38:	70 91 15 01 	lds	r23, 0x0115
    2d3c:	8c 19       	sub	r24, r12
    2d3e:	9d 09       	sbc	r25, r13
    2d40:	a0 e0       	ldi	r26, 0x00	; 0
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	48 0f       	add	r20, r24
    2d46:	59 1f       	adc	r21, r25
    2d48:	6a 1f       	adc	r22, r26
    2d4a:	7b 1f       	adc	r23, r27
    2d4c:	40 93 12 01 	sts	0x0112, r20
    2d50:	50 93 13 01 	sts	0x0113, r21
    2d54:	60 93 14 01 	sts	0x0114, r22
    2d58:	70 93 15 01 	sts	0x0115, r23
		Failsafe_Output_Rate += (uint16_t)(Save_TCNT1 - FrameRate_TCNT1);
    2d5c:	40 91 0e 01 	lds	r20, 0x010E
    2d60:	50 91 0f 01 	lds	r21, 0x010F
    2d64:	60 91 10 01 	lds	r22, 0x0110
    2d68:	70 91 11 01 	lds	r23, 0x0111
    2d6c:	48 0f       	add	r20, r24
    2d6e:	59 1f       	adc	r21, r25
    2d70:	6a 1f       	adc	r22, r26
    2d72:	7b 1f       	adc	r23, r27
    2d74:	40 93 0e 01 	sts	0x010E, r20
    2d78:	50 93 0f 01 	sts	0x010F, r21
    2d7c:	60 93 10 01 	sts	0x0110, r22
    2d80:	70 93 11 01 	sts	0x0111, r23
				
		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz		

		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - RC_TCNT2);
    2d84:	80 91 0c 01 	lds	r24, 0x010C
    2d88:	90 91 0d 01 	lds	r25, 0x010D
    2d8c:	20 91 b2 00 	lds	r18, 0x00B2
    2d90:	3e 81       	ldd	r19, Y+6	; 0x06
    2d92:	23 1b       	sub	r18, r19
    2d94:	82 0f       	add	r24, r18
    2d96:	91 1d       	adc	r25, r1
    2d98:	90 93 0d 01 	sts	0x010D, r25
    2d9c:	80 93 0c 01 	sts	0x010C, r24
		RC_TCNT2 = TCNT2;
    2da0:	40 91 b2 00 	lds	r20, 0x00B2
    2da4:	4e 83       	std	Y+6, r20	; 0x06

		// Update status timeout
		Status_timeout += (uint8_t) (TCNT2 - Status_TCNT2);
    2da6:	80 91 b2 00 	lds	r24, 0x00B2
    2daa:	83 19       	sub	r24, r3
    2dac:	2b 85       	ldd	r18, Y+11	; 0x0b
    2dae:	3c 85       	ldd	r19, Y+12	; 0x0c
    2db0:	28 0f       	add	r18, r24
    2db2:	31 1d       	adc	r19, r1
    2db4:	3c 87       	std	Y+12, r19	; 0x0c
    2db6:	2b 87       	std	Y+11, r18	; 0x0b
		Status_TCNT2 = TCNT2;
    2db8:	30 90 b2 00 	lds	r3, 0x00B2

		// Status refresh timer
		UpdateStatus_timer += (uint8_t) (TCNT2 - Refresh_TCNT2);
    2dbc:	80 91 b2 00 	lds	r24, 0x00B2
    2dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc2:	83 1b       	sub	r24, r19
    2dc4:	48 0e       	add	r4, r24
    2dc6:	51 1c       	adc	r5, r1
		Refresh_TCNT2 = TCNT2;
    2dc8:	40 91 b2 00 	lds	r20, 0x00B2
    2dcc:	4c 83       	std	Y+4, r20	; 0x04

		// Timer for audible alarms
		Ticker_Count += (uint8_t) (TCNT2 - Ticker_TCNT2);
    2dce:	80 91 b2 00 	lds	r24, 0x00B2
    2dd2:	2d 81       	ldd	r18, Y+5	; 0x05
    2dd4:	82 1b       	sub	r24, r18
    2dd6:	2a 81       	ldd	r18, Y+2	; 0x02
    2dd8:	3b 81       	ldd	r19, Y+3	; 0x03
    2dda:	28 0f       	add	r18, r24
    2ddc:	31 1d       	adc	r19, r1
    2dde:	3b 83       	std	Y+3, r19	; 0x03
    2de0:	2a 83       	std	Y+2, r18	; 0x02
		Ticker_TCNT2 = TCNT2;
    2de2:	30 91 b2 00 	lds	r19, 0x00B2
    2de6:	3d 83       	std	Y+5, r19	; 0x05
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    2de8:	2a 81       	ldd	r18, Y+2	; 0x02
    2dea:	3b 81       	ldd	r19, Y+3	; 0x03
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    2dec:	80 91 1b 01 	lds	r24, 0x011B
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    2df0:	33 ff       	sbrs	r19, 3
    2df2:	02 c0       	rjmp	.+4      	; 0x2df8 <main+0x456>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    2df4:	80 61       	ori	r24, 0x10	; 16
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <main+0x458>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    2df8:	8f 7e       	andi	r24, 0xEF	; 239
    2dfa:	80 93 1b 01 	sts	0x011B, r24
		//* RC_Timeout is reset at the successful completion of a new RC packet
		//* Reset on successful receipt of an RX packet. Both FailsafeFlag and RC_Timeout.
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    2dfe:	80 91 0c 01 	lds	r24, 0x010C
    2e02:	90 91 0d 01 	lds	r25, 0x010D
    2e06:	86 32       	cpi	r24, 0x26	; 38
    2e08:	96 42       	sbci	r25, 0x26	; 38
    2e0a:	90 f0       	brcs	.+36     	; 0x2e30 <main+0x48e>
		{
			 Flight_flags |= (1 << FailsafeFlag);	// This results in a failsafe condition
    2e0c:	80 91 1c 01 	lds	r24, 0x011C
    2e10:	84 60       	ori	r24, 0x04	; 4
    2e12:	80 93 1c 01 	sts	0x011C, r24
			 
			// As T2 increments at 19.531 kHz, this will wrap after 3.35s.
			// To stop this problem, clip the value at 1s.			
			if (RC_Timeout > SECOND_TIMER)
    2e16:	80 91 0c 01 	lds	r24, 0x010C
    2e1a:	90 91 0d 01 	lds	r25, 0x010D
    2e1e:	8c 34       	cpi	r24, 0x4C	; 76
    2e20:	9c 44       	sbci	r25, 0x4C	; 76
    2e22:	30 f0       	brcs	.+12     	; 0x2e30 <main+0x48e>
			{
				RC_Timeout = SECOND_TIMER;
    2e24:	8b e4       	ldi	r24, 0x4B	; 75
    2e26:	9c e4       	ldi	r25, 0x4C	; 76
    2e28:	90 93 0d 01 	sts	0x010D, r25
    2e2c:	80 93 0c 01 	sts	0x010C, r24
		//* start of burst to start of next burst.
		//* FrameDrop_Output_Rate is also in T1 units (1/2,500,000), wraps at 1718s
		//*
		//***********************************************************

		if (Failsafe_Output_Rate > (FramePeriod + FAILSAFE_MARGIN))
    2e30:	40 91 0e 01 	lds	r20, 0x010E
    2e34:	50 91 0f 01 	lds	r21, 0x010F
    2e38:	60 91 10 01 	lds	r22, 0x0110
    2e3c:	70 91 11 01 	lds	r23, 0x0111
    2e40:	80 91 99 07 	lds	r24, 0x0799
    2e44:	90 91 9a 07 	lds	r25, 0x079A
    2e48:	a0 91 9b 07 	lds	r26, 0x079B
    2e4c:	b0 91 9c 07 	lds	r27, 0x079C
    2e50:	88 57       	subi	r24, 0x78	; 120
    2e52:	9c 4e       	sbci	r25, 0xEC	; 236
    2e54:	af 4f       	sbci	r26, 0xFF	; 255
    2e56:	bf 4f       	sbci	r27, 0xFF	; 255
    2e58:	84 17       	cp	r24, r20
    2e5a:	95 07       	cpc	r25, r21
    2e5c:	a6 07       	cpc	r26, r22
    2e5e:	b7 07       	cpc	r27, r23
    2e60:	68 f4       	brcc	.+26     	; 0x2e7c <main+0x4da>
		{
			// Flag that the frame has been dropped, but only when NOT in failsafe mode
			// and only if valid reception has started
			if (!(Flight_flags & (1 << FailsafeFlag)) && (Flight_flags & (1 << RxStarted)))
    2e62:	80 91 1c 01 	lds	r24, 0x011C
    2e66:	82 fd       	sbrc	r24, 2
    2e68:	09 c0       	rjmp	.+18     	; 0x2e7c <main+0x4da>
    2e6a:	80 91 1c 01 	lds	r24, 0x011C
    2e6e:	86 ff       	sbrs	r24, 6
    2e70:	05 c0       	rjmp	.+10     	; 0x2e7c <main+0x4da>
			{
				Flight_flags |= (1 << FrameDrop);
    2e72:	80 91 1c 01 	lds	r24, 0x011C
    2e76:	80 62       	ori	r24, 0x20	; 32
    2e78:	80 93 1c 01 	sts	0x011C, r24
			}
		}

		// Outputs run at approximately the Failsafe_Output_Rate
		if ((FrameDrop_Output_Rate > FramePeriod) && (Flight_flags & (1 << RxStarted)))
    2e7c:	40 91 12 01 	lds	r20, 0x0112
    2e80:	50 91 13 01 	lds	r21, 0x0113
    2e84:	60 91 14 01 	lds	r22, 0x0114
    2e88:	70 91 15 01 	lds	r23, 0x0115
    2e8c:	80 91 99 07 	lds	r24, 0x0799
    2e90:	90 91 9a 07 	lds	r25, 0x079A
    2e94:	a0 91 9b 07 	lds	r26, 0x079B
    2e98:	b0 91 9c 07 	lds	r27, 0x079C
    2e9c:	84 17       	cp	r24, r20
    2e9e:	95 07       	cpc	r25, r21
    2ea0:	a6 07       	cpc	r26, r22
    2ea2:	b7 07       	cpc	r27, r23
    2ea4:	70 f4       	brcc	.+28     	; 0x2ec2 <main+0x520>
    2ea6:	80 91 1c 01 	lds	r24, 0x011C
    2eaa:	86 ff       	sbrs	r24, 6
    2eac:	0a c0       	rjmp	.+20     	; 0x2ec2 <main+0x520>
		{
			OutputTick = true;
			FrameDrop_Output_Rate = 0; // This makes an asynchronous oscillator
    2eae:	10 92 12 01 	sts	0x0112, r1
    2eb2:	10 92 13 01 	sts	0x0113, r1
    2eb6:	10 92 14 01 	sts	0x0114, r1
    2eba:	10 92 15 01 	sts	0x0115, r1
		}

		// Outputs run at approximately the Failsafe_Output_Rate
		if ((FrameDrop_Output_Rate > FramePeriod) && (Flight_flags & (1 << RxStarted)))
		{
			OutputTick = true;
    2ebe:	66 24       	eor	r6, r6
    2ec0:	63 94       	inc	r6
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    2ec2:	0e 94 82 1a 	call	0x3504	; 0x3504 <ReadGyros>
		ReadAcc();
    2ec6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    2eca:	0e 94 10 21 	call	0x4220	; 0x4220 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    2ece:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    2ed0:	20 91 17 01 	lds	r18, 0x0117
    2ed4:	30 91 18 01 	lds	r19, 0x0118
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    2ed8:	20 91 17 01 	lds	r18, 0x0117
    2edc:	30 91 18 01 	lds	r19, 0x0118
    2ee0:	ac 01       	movw	r20, r24
    2ee2:	42 1b       	sub	r20, r18
    2ee4:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    2ee6:	90 93 18 01 	sts	0x0118, r25
    2eea:	80 93 17 01 	sts	0x0117, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    2eee:	80 91 84 07 	lds	r24, 0x0784
    2ef2:	90 91 85 07 	lds	r25, 0x0785
    2ef6:	60 e0       	ldi	r22, 0x00	; 0
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	02 97       	sbiw	r24, 0x02	; 2
    2efc:	18 f4       	brcc	.+6      	; 0x2f04 <main+0x562>
		{
			interval = ticker_16; // uint16_t
    2efe:	6a 01       	movw	r12, r20
    2f00:	7b 01       	movw	r14, r22
    2f02:	11 c0       	rjmp	.+34     	; 0x2f26 <main+0x584>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    2f04:	c0 90 84 07 	lds	r12, 0x0784
    2f08:	d0 90 85 07 	lds	r13, 0x0785
    2f0c:	e1 2c       	mov	r14, r1
    2f0e:	f1 2c       	mov	r15, r1
    2f10:	8f e0       	ldi	r24, 0x0F	; 15
    2f12:	cc 0c       	add	r12, r12
    2f14:	dd 1c       	adc	r13, r13
    2f16:	ee 1c       	adc	r14, r14
    2f18:	ff 1c       	adc	r15, r15
    2f1a:	8a 95       	dec	r24
    2f1c:	d1 f7       	brne	.-12     	; 0x2f12 <main+0x570>
    2f1e:	c4 0e       	add	r12, r20
    2f20:	d5 1e       	adc	r13, r21
    2f22:	e6 1e       	adc	r14, r22
    2f24:	f7 1e       	adc	r15, r23
		}

		TMR0_counter = 0;
    2f26:	10 92 85 07 	sts	0x0785, r1
    2f2a:	10 92 84 07 	sts	0x0784, r1

		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    2f2e:	c7 01       	movw	r24, r14
    2f30:	b6 01       	movw	r22, r12
    2f32:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    2f36:	c7 01       	movw	r24, r14
    2f38:	b6 01       	movw	r22, r12
    2f3a:	0e 94 bb 33 	call	0x6776	; 0x6776 <Sensor_PID>
		//* (you are in a failsafe condition anyways) than to have jumbled 
		//* frames together." - Jim Drew
		//*
		//************************************************************

		if ((Alarm_flags & (1 << FAILSAFE_ENDED)) && (Interrupted))
    2f3e:	80 91 1b 01 	lds	r24, 0x011B
    2f42:	85 ff       	sbrs	r24, 5
    2f44:	0b c0       	rjmp	.+22     	; 0x2f5c <main+0x5ba>
    2f46:	80 91 6a 07 	lds	r24, 0x076A
    2f4a:	88 23       	and	r24, r24
    2f4c:	39 f0       	breq	.+14     	; 0x2f5c <main+0x5ba>
		{
			Interrupted = false;
    2f4e:	10 92 6a 07 	sts	0x076A, r1
			Alarm_flags &= ~(1 << FAILSAFE_ENDED);
    2f52:	80 91 1b 01 	lds	r24, 0x011B
    2f56:	8f 7d       	andi	r24, 0xDF	; 223
    2f58:	80 93 1b 01 	sts	0x011B, r24
		//************************************************************
		
		// Cases where we are ready to output. These must be exclusive
		if	(
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||
    2f5c:	80 91 6a 07 	lds	r24, 0x076A
		//* Output serial data where required, 
		//* based on a very specific set of conditions
		//************************************************************
		
		// Cases where we are ready to output. These must be exclusive
		if	(
    2f60:	88 23       	and	r24, r24
    2f62:	21 f0       	breq	.+8      	; 0x2f6c <main+0x5ca>
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||
    2f64:	80 91 1c 01 	lds	r24, 0x011C
    2f68:	86 fd       	sbrc	r24, 6
    2f6a:	20 c0       	rjmp	.+64     	; 0x2fac <main+0x60a>

				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||
    2f6c:	80 91 6a 07 	lds	r24, 0x076A
		//************************************************************
		
		// Cases where we are ready to output. These must be exclusive
		if	(
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||
    2f70:	81 11       	cpse	r24, r1
    2f72:	0a c0       	rjmp	.+20     	; 0x2f88 <main+0x5e6>

				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||
    2f74:	80 91 1c 01 	lds	r24, 0x011C
    2f78:	82 fd       	sbrc	r24, 2
    2f7a:	06 c0       	rjmp	.+12     	; 0x2f88 <main+0x5e6>
    2f7c:	80 91 1c 01 	lds	r24, 0x011C
    2f80:	85 ff       	sbrs	r24, 5
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <main+0x5e6>
    2f84:	61 10       	cpse	r6, r1
    2f86:	12 c0       	rjmp	.+36     	; 0x2fac <main+0x60a>

				// OutputTick for failsafe (>500ms) once RX started and if enabled (Failsafe type = FIXED or ADVANCED)
				((!Interrupted) && (Flight_flags & (1 << FailsafeFlag)) && (OutputTick) && (Config.FailsafeType != NOFAILSAFE))
    2f88:	80 91 6a 07 	lds	r24, 0x076A
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||

				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||
    2f8c:	88 23       	and	r24, r24
    2f8e:	21 f0       	breq	.+8      	; 0x2f98 <main+0x5f6>
				// Note that TransmitData() assumes that ServoOut[] is 
				// updated prior to calling as it destroys the contents
				TransmitData();				// Output serial data			
			}

			LoopCount = 0;					// Reset loop counter
    2f90:	fa 84       	ldd	r15, Y+10	; 0x0a
    2f92:	c8 84       	ldd	r12, Y+8	; 0x08
    2f94:	d9 84       	ldd	r13, Y+9	; 0x09
    2f96:	23 cd       	rjmp	.-1466   	; 0x29de <main+0x3c>
				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||

				// OutputTick for failsafe (>500ms) once RX started and if enabled (Failsafe type = FIXED or ADVANCED)
				((!Interrupted) && (Flight_flags & (1 << FailsafeFlag)) && (OutputTick) && (Config.FailsafeType != NOFAILSAFE))
    2f98:	80 91 1c 01 	lds	r24, 0x011C
    2f9c:	82 ff       	sbrs	r24, 2
    2f9e:	f8 cf       	rjmp	.-16     	; 0x2f90 <main+0x5ee>
    2fa0:	66 20       	and	r6, r6
    2fa2:	b1 f3       	breq	.-20     	; 0x2f90 <main+0x5ee>
    2fa4:	80 91 16 06 	lds	r24, 0x0616
    2fa8:	88 23       	and	r24, r24
    2faa:	91 f3       	breq	.-28     	; 0x2f90 <main+0x5ee>

			//******************************************************************
			//* The following code runs once when serial output is desired
			//******************************************************************

			if (Interrupted)
    2fac:	80 91 6a 07 	lds	r24, 0x076A
    2fb0:	88 23       	and	r24, r24
    2fb2:	21 f0       	breq	.+8      	; 0x2fbc <main+0x61a>
			{
				Interrupted_Clone = true;			// Hand "Interrupted" baton on to its clone
				Interrupted = false;				// Reset interrupted flag if that was the cause of entry			
    2fb4:	10 92 6a 07 	sts	0x076A, r1
			//* The following code runs once when serial output is desired
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;			// Hand "Interrupted" baton on to its clone
    2fb8:	21 e0       	ldi	r18, 0x01	; 1
    2fba:	29 83       	std	Y+1, r18	; 0x01
			if (OutputTick)
			{
				OutputTick = false;	
			}
			
			Calculate_PID();				// Calculate PID values
    2fbc:	0e 94 bb 34 	call	0x6976	; 0x6976 <Calculate_PID>
			ProcessMixer();					// Do all the mixer tasks - can be very slow
    2fc0:	0e 94 11 30 	call	0x6022	; 0x6022 <ProcessMixer>
			Process_servos();				// Check for reversal and limits
    2fc4:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <Process_servos>
							
			// Prevent output output is requested
			if (!OverrideOutput)
    2fc8:	01 11       	cpse	r16, r1
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <main+0x62e>
			{
				// Note that TransmitData() assumes that ServoOut[] is 
				// updated prior to calling as it destroys the contents
				TransmitData();				// Output serial data			
    2fcc:	0e 94 c6 38 	call	0x718c	; 0x718c <TransmitData>
			}

			LoopCount = 0;					// Reset loop counter
    2fd0:	10 92 16 01 	sts	0x0116, r1
    2fd4:	61 2c       	mov	r6, r1
    2fd6:	dc cf       	rjmp	.-72     	; 0x2f90 <main+0x5ee>

00002fd8 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	c7 e0       	ldi	r28, 0x07	; 7
    2fe2:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    2fe4:	08 2f       	mov	r16, r24
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    2fe8:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    2fea:	c8 01       	movw	r24, r16
    2fec:	0c 2e       	mov	r0, r28
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <spiwrite+0x1c>
    2ff0:	95 95       	asr	r25
    2ff2:	87 95       	ror	r24
    2ff4:	0a 94       	dec	r0
    2ff6:	e2 f7       	brpl	.-8      	; 0x2ff0 <spiwrite+0x18>
    2ff8:	80 ff       	sbrs	r24, 0
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <spiwrite+0x28>
		{
			LCD_SI = 1;
    2ffc:	59 9a       	sbi	0x0b, 1	; 11
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    3000:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    3002:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    3004:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <glcd_delay>
    3008:	21 97       	sbiw	r28, 0x01	; 1
    300a:	70 f7       	brcc	.-36     	; 0x2fe8 <spiwrite+0x10>
	}
}
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	08 95       	ret

00003016 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    3016:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3018:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <spiwrite>
    301c:	08 95       	ret

0000301e <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    301e:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3020:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <spiwrite>
    3024:	08 95       	ret

00003026 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    3026:	cf 93       	push	r28
    3028:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    302a:	81 e8       	ldi	r24, 0x81	; 129
    302c:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
	st7565_command(val);
    3030:	8c 2f       	mov	r24, r28
    3032:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
}
    3036:	cf 91       	pop	r28
    3038:	08 95       	ret

0000303a <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    303e:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    3040:	5e 98       	cbi	0x0b, 6	; 11
    3042:	87 e8       	ldi	r24, 0x87	; 135
    3044:	93 e1       	ldi	r25, 0x13	; 19
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <st7565_init+0xc>
    304a:	00 c0       	rjmp	.+0      	; 0x304c <st7565_init+0x12>
    304c:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    304e:	5e 9a       	sbi	0x0b, 6	; 11
    3050:	cf ee       	ldi	r28, 0xEF	; 239
    3052:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    3054:	fe 01       	movw	r30, r28
    3056:	84 91       	lpm	r24, Z
    3058:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
    305c:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    305e:	fd e0       	ldi	r31, 0x0D	; 13
    3060:	cd 3f       	cpi	r28, 0xFD	; 253
    3062:	df 07       	cpc	r29, r31
    3064:	b9 f7       	brne	.-18     	; 0x3054 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    3066:	80 91 7e 06 	lds	r24, 0x067E
    306a:	0e 94 13 18 	call	0x3026	; 0x3026 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    306e:	88 ec       	ldi	r24, 0xC8	; 200
    3070:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
}
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	08 95       	ret

0000307a <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    307a:	a0 e0       	ldi	r26, 0x00	; 0
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e3 e4       	ldi	r30, 0x43	; 67
    3080:	f8 e1       	ldi	r31, 0x18	; 24
    3082:	0c 94 36 3e 	jmp	0x7c6c	; 0x7c6c <__prologue_saves__+0x16>
    3086:	cd ef       	ldi	r28, 0xFD	; 253
    3088:	dd e0       	ldi	r29, 0x0D	; 13
    308a:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    308c:	fe 01       	movw	r30, r28
    308e:	84 91       	lpm	r24, Z
    3090:	80 6b       	ori	r24, 0xB0	; 176
    3092:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    309c:	80 e1       	ldi	r24, 0x10	; 16
    309e:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    30a2:	80 ee       	ldi	r24, 0xE0	; 224
    30a4:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
    30a8:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    30aa:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    30ac:	f7 01       	movw	r30, r14
    30ae:	81 91       	ld	r24, Z+
    30b0:	7f 01       	movw	r14, r30
    30b2:	0e 94 0f 18 	call	0x301e	; 0x301e <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    30b6:	d3 94       	inc	r13
    30b8:	f0 e8       	ldi	r31, 0x80	; 128
    30ba:	df 12       	cpse	r13, r31
    30bc:	f7 cf       	rjmp	.-18     	; 0x30ac <write_buffer+0x32>
    30be:	21 96       	adiw	r28, 0x01	; 1
    30c0:	00 58       	subi	r16, 0x80	; 128
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    30c4:	8e e0       	ldi	r24, 0x0E	; 14
    30c6:	c5 30       	cpi	r28, 0x05	; 5
    30c8:	d8 07       	cpc	r29, r24
    30ca:	01 f7       	brne	.-64     	; 0x308c <write_buffer+0x12>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	e7 e0       	ldi	r30, 0x07	; 7
    30d2:	0c 94 52 3e 	jmp	0x7ca4	; 0x7ca4 <__epilogue_restores__+0x16>

000030d6 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	34 e0       	ldi	r19, 0x04	; 4
    30da:	fc 01       	movw	r30, r24
    30dc:	a9 01       	movw	r20, r18
    30de:	11 92       	st	Z+, r1
    30e0:	41 50       	subi	r20, 0x01	; 1
    30e2:	50 40       	sbci	r21, 0x00	; 0
    30e4:	e1 f7       	brne	.-8      	; 0x30de <clear_buffer+0x8>
    30e6:	08 95       	ret

000030e8 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    30ec:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    30ee:	8d 2f       	mov	r24, r29
    30f0:	80 6b       	ori	r24, 0xB0	; 176
    30f2:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    30f6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    30f8:	8c 2f       	mov	r24, r28
    30fa:	8f 70       	andi	r24, 0x0F	; 15
    30fc:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    3100:	8c 2f       	mov	r24, r28
    3102:	82 95       	swap	r24
    3104:	8f 70       	andi	r24, 0x0F	; 15
    3106:	80 61       	ori	r24, 0x10	; 16
    3108:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
			st7565_data(0x00);											// Clear data
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	0e 94 0f 18 	call	0x301e	; 0x301e <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3112:	cf 5f       	subi	r28, 0xFF	; 255
    3114:	c0 38       	cpi	r28, 0x80	; 128
    3116:	81 f7       	brne	.-32     	; 0x30f8 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3118:	df 5f       	subi	r29, 0xFF	; 255
    311a:	d8 30       	cpi	r29, 0x08	; 8
    311c:	41 f7       	brne	.-48     	; 0x30ee <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    3124:	67 fd       	sbrc	r22, 7
    3126:	36 c0       	rjmp	.+108    	; 0x3194 <setpixel+0x70>
    3128:	40 34       	cpi	r20, 0x40	; 64
    312a:	a0 f5       	brcc	.+104    	; 0x3194 <setpixel+0x70>
    312c:	34 2f       	mov	r19, r20
    312e:	36 95       	lsr	r19
    3130:	36 95       	lsr	r19
    3132:	36 95       	lsr	r19
    3134:	e6 2f       	mov	r30, r22
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    313a:	22 23       	and	r18, r18
    313c:	a9 f0       	breq	.+42     	; 0x3168 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    313e:	20 e8       	ldi	r18, 0x80	; 128
    3140:	32 9f       	mul	r19, r18
    3142:	e0 0d       	add	r30, r0
    3144:	f1 1d       	adc	r31, r1
    3146:	11 24       	eor	r1, r1
    3148:	e8 0f       	add	r30, r24
    314a:	f9 1f       	adc	r31, r25
    314c:	40 95       	com	r20
    314e:	50 95       	com	r21
    3150:	47 70       	andi	r20, 0x07	; 7
    3152:	55 27       	eor	r21, r21
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	04 2e       	mov	r0, r20
    315a:	01 c0       	rjmp	.+2      	; 0x315e <setpixel+0x3a>
    315c:	88 0f       	add	r24, r24
    315e:	0a 94       	dec	r0
    3160:	ea f7       	brpl	.-6      	; 0x315c <setpixel+0x38>
    3162:	90 81       	ld	r25, Z
    3164:	98 2b       	or	r25, r24
    3166:	15 c0       	rjmp	.+42     	; 0x3192 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    3168:	20 e8       	ldi	r18, 0x80	; 128
    316a:	32 9f       	mul	r19, r18
    316c:	e0 0d       	add	r30, r0
    316e:	f1 1d       	adc	r31, r1
    3170:	11 24       	eor	r1, r1
    3172:	e8 0f       	add	r30, r24
    3174:	f9 1f       	adc	r31, r25
    3176:	40 95       	com	r20
    3178:	50 95       	com	r21
    317a:	47 70       	andi	r20, 0x07	; 7
    317c:	55 27       	eor	r21, r21
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	04 2e       	mov	r0, r20
    3184:	01 c0       	rjmp	.+2      	; 0x3188 <setpixel+0x64>
    3186:	88 0f       	add	r24, r24
    3188:	0a 94       	dec	r0
    318a:	ea f7       	brpl	.-6      	; 0x3186 <setpixel+0x62>
    318c:	80 95       	com	r24
    318e:	90 81       	ld	r25, Z
    3190:	98 23       	and	r25, r24
    3192:	90 83       	st	Z, r25
    3194:	08 95       	ret

00003196 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    3196:	a0 e0       	ldi	r26, 0x00	; 0
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e1 ed       	ldi	r30, 0xD1	; 209
    319c:	f8 e1       	ldi	r31, 0x18	; 24
    319e:	0c 94 32 3e 	jmp	0x7c64	; 0x7c64 <__prologue_saves__+0xe>
    31a2:	ec 01       	movw	r28, r24
    31a4:	16 2f       	mov	r17, r22
    31a6:	f4 2e       	mov	r15, r20
    31a8:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    31aa:	a0 2f       	mov	r26, r16
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	a4 1b       	sub	r26, r20
    31b0:	b1 09       	sbc	r27, r1
    31b2:	b7 ff       	sbrs	r27, 7
    31b4:	03 c0       	rjmp	.+6      	; 0x31bc <drawline+0x26>
    31b6:	b1 95       	neg	r27
    31b8:	a1 95       	neg	r26
    31ba:	b1 09       	sbc	r27, r1
    31bc:	ed 2d       	mov	r30, r13
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	e1 1b       	sub	r30, r17
    31c2:	f1 09       	sbc	r31, r1
    31c4:	f7 ff       	sbrs	r31, 7
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <drawline+0x38>
    31c8:	f1 95       	neg	r31
    31ca:	e1 95       	neg	r30
    31cc:	f1 09       	sbc	r31, r1
    31ce:	bb 24       	eor	r11, r11
    31d0:	b3 94       	inc	r11
    31d2:	ea 17       	cp	r30, r26
    31d4:	fb 07       	cpc	r31, r27
    31d6:	14 f0       	brlt	.+4      	; 0x31dc <drawline+0x46>
    31d8:	b1 2c       	mov	r11, r1
    31da:	06 c0       	rjmp	.+12     	; 0x31e8 <drawline+0x52>
    31dc:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    31de:	d0 2e       	mov	r13, r16
    31e0:	08 2f       	mov	r16, r24
    31e2:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    31e4:	1f 2d       	mov	r17, r15
    31e6:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    31e8:	d1 16       	cp	r13, r17
    31ea:	30 f4       	brcc	.+12     	; 0x31f8 <drawline+0x62>
    31ec:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    31ee:	f0 2e       	mov	r15, r16
    31f0:	08 2f       	mov	r16, r24
    31f2:	81 2f       	mov	r24, r17
    31f4:	1d 2d       	mov	r17, r13
    31f6:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    31f8:	ad 2c       	mov	r10, r13
    31fa:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    31fc:	e0 2f       	mov	r30, r16
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	ef 19       	sub	r30, r15
    3202:	f1 09       	sbc	r31, r1
    3204:	f7 ff       	sbrs	r31, 7
    3206:	03 c0       	rjmp	.+6      	; 0x320e <drawline+0x78>
    3208:	f1 95       	neg	r31
    320a:	e1 95       	neg	r30
    320c:	f1 09       	sbc	r31, r1
    320e:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    3210:	ca 2c       	mov	r12, r10
    3212:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    3214:	f0 16       	cp	r15, r16
    3216:	10 f4       	brcc	.+4      	; 0x321c <drawline+0x86>
	{
		ystep = 1;
    3218:	01 e0       	ldi	r16, 0x01	; 1
    321a:	10 c0       	rjmp	.+32     	; 0x323c <drawline+0xa6>
	} 
	else 
	{
		ystep = -1;
    321c:	0f ef       	ldi	r16, 0xFF	; 255
    321e:	0e c0       	rjmp	.+28     	; 0x323c <drawline+0xa6>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    3220:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    3222:	bb 20       	and	r11, r11
    3224:	71 f0       	breq	.+28     	; 0x3242 <drawline+0xac>
		{
			setpixel(buff, y0, x0, color);
    3226:	41 2f       	mov	r20, r17
    3228:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    322a:	ce 01       	movw	r24, r28
    322c:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
		}
		err -= dy;
    3230:	c9 18       	sub	r12, r9
		if (err < 0) 
    3232:	c7 fe       	sbrs	r12, 7
    3234:	02 c0       	rjmp	.+4      	; 0x323a <drawline+0xa4>
		{
			y0 += ystep;
    3236:	f0 0e       	add	r15, r16
			err += dx;
    3238:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    323a:	1f 5f       	subi	r17, 0xFF	; 255
    323c:	1d 15       	cp	r17, r13
    323e:	80 f3       	brcs	.-32     	; 0x3220 <drawline+0x8a>
    3240:	03 c0       	rjmp	.+6      	; 0x3248 <drawline+0xb2>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3242:	4f 2d       	mov	r20, r15
    3244:	61 2f       	mov	r22, r17
    3246:	f1 cf       	rjmp	.-30     	; 0x322a <drawline+0x94>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	eb e0       	ldi	r30, 0x0B	; 11
    324e:	0c 94 4e 3e 	jmp	0x7c9c	; 0x7c9c <__epilogue_restores__+0xe>

00003252 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3252:	a0 e0       	ldi	r26, 0x00	; 0
    3254:	b0 e0       	ldi	r27, 0x00	; 0
    3256:	ef e2       	ldi	r30, 0x2F	; 47
    3258:	f9 e1       	ldi	r31, 0x19	; 25
    325a:	0c 94 33 3e 	jmp	0x7c66	; 0x7c66 <__prologue_saves__+0x10>
    325e:	6c 01       	movw	r12, r24
    3260:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3262:	f6 2e       	mov	r15, r22
    3264:	c2 2f       	mov	r28, r18
    3266:	d0 e0       	ldi	r29, 0x00	; 0
    3268:	c6 0f       	add	r28, r22
    326a:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    326c:	10 e0       	ldi	r17, 0x00	; 0
    326e:	04 0f       	add	r16, r20
    3270:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3272:	8f 2d       	mov	r24, r15
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	8c 17       	cp	r24, r28
    3278:	9d 07       	cpc	r25, r29
    327a:	84 f4       	brge	.+32     	; 0x329c <fillrect+0x4a>
    327c:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    327e:	8b 2d       	mov	r24, r11
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	80 17       	cp	r24, r16
    3284:	91 07       	cpc	r25, r17
    3286:	44 f4       	brge	.+16     	; 0x3298 <fillrect+0x46>
		{
			setpixel(buff, i, j, color);
    3288:	2e 2d       	mov	r18, r14
    328a:	4b 2d       	mov	r20, r11
    328c:	6f 2d       	mov	r22, r15
    328e:	c6 01       	movw	r24, r12
    3290:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    3294:	b3 94       	inc	r11
    3296:	f3 cf       	rjmp	.-26     	; 0x327e <fillrect+0x2c>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3298:	f3 94       	inc	r15
    329a:	eb cf       	rjmp	.-42     	; 0x3272 <fillrect+0x20>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	ea e0       	ldi	r30, 0x0A	; 10
    32a2:	0c 94 4f 3e 	jmp	0x7c9e	; 0x7c9e <__epilogue_restores__+0x10>

000032a6 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    32a6:	a0 e0       	ldi	r26, 0x00	; 0
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e9 e5       	ldi	r30, 0x59	; 89
    32ac:	f9 e1       	ldi	r31, 0x19	; 25
    32ae:	0c 94 32 3e 	jmp	0x7c64	; 0x7c64 <__prologue_saves__+0xe>
    32b2:	ec 01       	movw	r28, r24
    32b4:	f6 2e       	mov	r15, r22
    32b6:	b4 2e       	mov	r11, r20
    32b8:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    32ba:	16 2f       	mov	r17, r22
    32bc:	c2 2e       	mov	r12, r18
    32be:	d1 2c       	mov	r13, r1
    32c0:	c6 0e       	add	r12, r22
    32c2:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    32c4:	aa 24       	eor	r10, r10
    32c6:	aa 94       	dec	r10
    32c8:	a0 0e       	add	r10, r16
    32ca:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    32cc:	81 2f       	mov	r24, r17
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	8c 15       	cp	r24, r12
    32d2:	9d 05       	cpc	r25, r13
    32d4:	74 f4       	brge	.+28     	; 0x32f2 <drawrect+0x4c>
	{
		setpixel(buff, i, y, color);
    32d6:	2e 2d       	mov	r18, r14
    32d8:	4b 2d       	mov	r20, r11
    32da:	61 2f       	mov	r22, r17
    32dc:	ce 01       	movw	r24, r28
    32de:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
		setpixel(buff, i, y+h-1, color);
    32e2:	2e 2d       	mov	r18, r14
    32e4:	4a 2d       	mov	r20, r10
    32e6:	61 2f       	mov	r22, r17
    32e8:	ce 01       	movw	r24, r28
    32ea:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    32ee:	1f 5f       	subi	r17, 0xFF	; 255
    32f0:	ed cf       	rjmp	.-38     	; 0x32cc <drawrect+0x26>
    32f2:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    32f4:	10 e0       	ldi	r17, 0x00	; 0
    32f6:	0b 0d       	add	r16, r11
    32f8:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    32fa:	cc 24       	eor	r12, r12
    32fc:	ca 94       	dec	r12
    32fe:	c9 0c       	add	r12, r9
    3300:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3302:	8d 2d       	mov	r24, r13
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	80 17       	cp	r24, r16
    3308:	91 07       	cpc	r25, r17
    330a:	74 f4       	brge	.+28     	; 0x3328 <drawrect+0x82>
	{
		setpixel(buff, x, i, color);
    330c:	2e 2d       	mov	r18, r14
    330e:	4d 2d       	mov	r20, r13
    3310:	6f 2d       	mov	r22, r15
    3312:	ce 01       	movw	r24, r28
    3314:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
		setpixel(buff, x+w-1, i, color);
    3318:	2e 2d       	mov	r18, r14
    331a:	4d 2d       	mov	r20, r13
    331c:	6c 2d       	mov	r22, r12
    331e:	ce 01       	movw	r24, r28
    3320:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3324:	d3 94       	inc	r13
    3326:	ed cf       	rjmp	.-38     	; 0x3302 <drawrect+0x5c>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	eb e0       	ldi	r30, 0x0B	; 11
    332e:	0c 94 4e 3e 	jmp	0x7c9c	; 0x7c9c <__epilogue_restores__+0xe>

00003332 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    3332:	a0 e0       	ldi	r26, 0x00	; 0
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	ef e9       	ldi	r30, 0x9F	; 159
    3338:	f9 e1       	ldi	r31, 0x19	; 25
    333a:	0c 94 2d 3e 	jmp	0x7c5a	; 0x7c5a <__prologue_saves__+0x4>
    333e:	ec 01       	movw	r28, r24
    3340:	96 2e       	mov	r9, r22
    3342:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    3344:	bb 24       	eor	r11, r11
    3346:	b3 94       	inc	r11
    3348:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    334a:	82 2e       	mov	r8, r18
    334c:	81 94       	neg	r8
    334e:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    3350:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    3352:	74 2e       	mov	r7, r20
    3354:	72 1a       	sub	r7, r18
    3356:	e4 2e       	mov	r14, r20
    3358:	f1 2c       	mov	r15, r1
    335a:	67 01       	movw	r12, r14
    335c:	c2 0e       	add	r12, r18
    335e:	d1 1c       	adc	r13, r1
    3360:	87 2d       	mov	r24, r7
    3362:	99 27       	eor	r25, r25
    3364:	87 fd       	sbrc	r24, 7
    3366:	90 95       	com	r25
    3368:	c8 16       	cp	r12, r24
    336a:	d9 06       	cpc	r13, r25
    336c:	44 f0       	brlt	.+16     	; 0x337e <fillcircle+0x4c>
	{
		setpixel(buff, x0, i, color);
    336e:	20 2f       	mov	r18, r16
    3370:	47 2d       	mov	r20, r7
    3372:	69 2d       	mov	r22, r9
    3374:	ce 01       	movw	r24, r28
    3376:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
    337a:	73 94       	inc	r7
    337c:	f1 cf       	rjmp	.-30     	; 0x3360 <fillcircle+0x2e>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    337e:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    3380:	71 16       	cp	r7, r17
    3382:	0c f0       	brlt	.+2      	; 0x3386 <fillcircle+0x54>
    3384:	4c c0       	rjmp	.+152    	; 0x341e <fillcircle+0xec>
	{
		if (f >= 0) 
    3386:	b7 fc       	sbrc	r11, 7
    3388:	04 c0       	rjmp	.+8      	; 0x3392 <fillcircle+0x60>
		{
			y--;
    338a:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    338c:	83 94       	inc	r8
    338e:	83 94       	inc	r8
			f += ddF_y;
    3390:	b8 0c       	add	r11, r8
    3392:	73 94       	inc	r7
    3394:	87 2d       	mov	r24, r7
    3396:	88 0f       	add	r24, r24
    3398:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    339a:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    339c:	6a 2c       	mov	r6, r10
    339e:	61 1a       	sub	r6, r17
    33a0:	67 01       	movw	r12, r14
    33a2:	c1 0e       	add	r12, r17
    33a4:	d1 1c       	adc	r13, r1
    33a6:	17 fd       	sbrc	r17, 7
    33a8:	da 94       	dec	r13
    33aa:	47 2c       	mov	r4, r7
    33ac:	49 0c       	add	r4, r9
    33ae:	59 2c       	mov	r5, r9
    33b0:	57 18       	sub	r5, r7
    33b2:	86 2d       	mov	r24, r6
    33b4:	99 27       	eor	r25, r25
    33b6:	87 fd       	sbrc	r24, 7
    33b8:	90 95       	com	r25
    33ba:	c8 16       	cp	r12, r24
    33bc:	d9 06       	cpc	r13, r25
    33be:	74 f0       	brlt	.+28     	; 0x33dc <fillcircle+0xaa>
		{
			setpixel(buff, x0+x, i, color);
    33c0:	20 2f       	mov	r18, r16
    33c2:	46 2d       	mov	r20, r6
    33c4:	64 2d       	mov	r22, r4
    33c6:	ce 01       	movw	r24, r28
    33c8:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
			setpixel(buff, x0-x, i, color);
    33cc:	20 2f       	mov	r18, r16
    33ce:	46 2d       	mov	r20, r6
    33d0:	65 2d       	mov	r22, r5
    33d2:	ce 01       	movw	r24, r28
    33d4:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
    33d8:	63 94       	inc	r6
    33da:	eb cf       	rjmp	.-42     	; 0x33b2 <fillcircle+0x80>
    33dc:	6a 2c       	mov	r6, r10
    33de:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    33e0:	67 01       	movw	r12, r14
    33e2:	c7 0c       	add	r12, r7
    33e4:	d1 1c       	adc	r13, r1
    33e6:	77 fc       	sbrc	r7, 7
    33e8:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    33ea:	41 2e       	mov	r4, r17
    33ec:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    33ee:	59 2c       	mov	r5, r9
    33f0:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    33f2:	86 2d       	mov	r24, r6
    33f4:	99 27       	eor	r25, r25
    33f6:	87 fd       	sbrc	r24, 7
    33f8:	90 95       	com	r25
    33fa:	c8 16       	cp	r12, r24
    33fc:	d9 06       	cpc	r13, r25
    33fe:	0c f4       	brge	.+2      	; 0x3402 <fillcircle+0xd0>
    3400:	bf cf       	rjmp	.-130    	; 0x3380 <fillcircle+0x4e>
		{
			setpixel(buff, x0+y, i, color);
    3402:	20 2f       	mov	r18, r16
    3404:	46 2d       	mov	r20, r6
    3406:	64 2d       	mov	r22, r4
    3408:	ce 01       	movw	r24, r28
    340a:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
			setpixel(buff, x0-y, i, color);
    340e:	20 2f       	mov	r18, r16
    3410:	46 2d       	mov	r20, r6
    3412:	65 2d       	mov	r22, r5
    3414:	ce 01       	movw	r24, r28
    3416:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
    341a:	63 94       	inc	r6
    341c:	ea cf       	rjmp	.-44     	; 0x33f2 <fillcircle+0xc0>
		}    
	}
}
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	e0 e1       	ldi	r30, 0x10	; 16
    3424:	0c 94 49 3e 	jmp	0x7c92	; 0x7c92 <__epilogue_restores__+0x4>

00003428 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint8_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    3428:	e8 2f       	mov	r30, r24
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	ee 0f       	add	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	eb 5f       	subi	r30, 0xFB	; 251
    3432:	f1 4f       	sbci	r31, 0xF1	; 241
    3434:	85 91       	lpm	r24, Z+
    3436:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    3438:	0e 94 70 33 	call	0x66e0	; 0x66e0 <pgm_mugui_lcd_puts>
    343c:	08 95       	ret

0000343e <gLCDprint_Menu_P>:
    343e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <pgm_mugui_lcd_puts>
    3442:	08 95       	ret

00003444 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    3444:	85 e4       	ldi	r24, 0x45	; 69
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(122,(const unsigned char*)Verdana14,40,10);	// "Press"
    344c:	2a e0       	ldi	r18, 0x0A	; 10
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	48 e2       	ldi	r20, 0x28	; 40
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	60 e7       	ldi	r22, 0x70	; 112
    3456:	71 e0       	ldi	r23, 0x01	; 1
    3458:	8a e7       	ldi	r24, 0x7A	; 122
    345a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	LCD_Display_Text(123,(const unsigned char*)Verdana14,24,30);	// "for status"
    345e:	2e e1       	ldi	r18, 0x1E	; 30
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	48 e1       	ldi	r20, 0x18	; 24
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	60 e7       	ldi	r22, 0x70	; 112
    3468:	71 e0       	ldi	r23, 0x01	; 1
    346a:	8b e7       	ldi	r24, 0x7B	; 123
    346c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	
	write_buffer(buffer);
    3470:	85 e4       	ldi	r24, 0x45	; 69
    3472:	91 e0       	ldi	r25, 0x01	; 1
    3474:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
    3478:	08 95       	ret

0000347a <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    347a:	a6 e0       	ldi	r26, 0x06	; 6
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	e3 e4       	ldi	r30, 0x43	; 67
    3480:	fa e1       	ldi	r31, 0x1A	; 26
    3482:	0c 94 3b 3e 	jmp	0x7c76	; 0x7c76 <__prologue_saves__+0x20>
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

#else
	read_adc(AIN_Y_GYRO);				// Read roll gyro ADC1 (Roll)
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	RawADC[ROLL] = ADCW;
    348c:	80 91 78 00 	lds	r24, 0x0078
    3490:	90 91 79 00 	lds	r25, 0x0079
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01

	read_adc(AIN_X_GYRO);				// Read pitch gyro ADC4 (Pitch)
    3498:	84 e0       	ldi	r24, 0x04	; 4
    349a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	RawADC[PITCH] = ADCW;
    349e:	80 91 78 00 	lds	r24, 0x0078
    34a2:	90 91 79 00 	lds	r25, 0x0079
    34a6:	9c 83       	std	Y+4, r25	; 0x04
    34a8:	8b 83       	std	Y+3, r24	; 0x03

	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
    34aa:	82 e0       	ldi	r24, 0x02	; 2
    34ac:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	RawADC[YAW] = ADCW;
    34b0:	80 91 78 00 	lds	r24, 0x0078
    34b4:	90 91 79 00 	lds	r25, 0x0079
    34b8:	9e 83       	std	Y+6, r25	; 0x06
    34ba:	8d 83       	std	Y+5, r24	; 0x05

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    34bc:	20 91 7d 06 	lds	r18, 0x067D
    34c0:	a4 e8       	ldi	r26, 0x84	; 132
    34c2:	b5 e0       	ldi	r27, 0x05	; 5
    34c4:	43 e0       	ldi	r20, 0x03	; 3
    34c6:	24 02       	muls	r18, r20
    34c8:	90 01       	movw	r18, r0
    34ca:	11 24       	eor	r1, r1
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	2b 57       	subi	r18, 0x7B	; 123
    34d2:	39 4e       	sbci	r19, 0xE9	; 233
    34d4:	f9 01       	movw	r30, r18
    34d6:	e8 0f       	add	r30, r24
    34d8:	f9 1f       	adc	r31, r25
    34da:	e4 91       	lpm	r30, Z
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 0b       	sbc	r31, r31
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	50 e0       	ldi	r21, 0x00	; 0
    34e4:	4c 0f       	add	r20, r28
    34e6:	5d 1f       	adc	r21, r29
    34e8:	e4 0f       	add	r30, r20
    34ea:	f5 1f       	adc	r31, r21
    34ec:	40 81       	ld	r20, Z
    34ee:	51 81       	ldd	r21, Z+1	; 0x01
    34f0:	4d 93       	st	X+, r20
    34f2:	5d 93       	st	X+, r21
    34f4:	01 96       	adiw	r24, 0x01	; 1
	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
	RawADC[YAW] = ADCW;
#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    34f6:	83 30       	cpi	r24, 0x03	; 3
    34f8:	91 05       	cpc	r25, r1
    34fa:	61 f7       	brne	.-40     	; 0x34d4 <get_raw_gyros+0x5a>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    34fc:	26 96       	adiw	r28, 0x06	; 6
    34fe:	e2 e0       	ldi	r30, 0x02	; 2
    3500:	0c 94 57 3e 	jmp	0x7cae	; 0x7cae <__epilogue_restores__+0x20>

00003504 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    3504:	1f 93       	push	r17
    3506:	cf 93       	push	r28
    3508:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    350a:	0e 94 3d 1a 	call	0x347a	; 0x347a <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    350e:	20 91 7d 06 	lds	r18, 0x067D
    3512:	c0 e4       	ldi	r28, 0x40	; 64
    3514:	d7 e0       	ldi	r29, 0x07	; 7
    3516:	a4 e8       	ldi	r26, 0x84	; 132
    3518:	b5 e0       	ldi	r27, 0x05	; 5
    351a:	83 e0       	ldi	r24, 0x03	; 3
    351c:	28 02       	muls	r18, r24
    351e:	90 01       	movw	r18, r0
    3520:	11 24       	eor	r1, r1
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	2d 58       	subi	r18, 0x8D	; 141
    3528:	39 4e       	sbci	r19, 0xE9	; 233
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    352a:	69 91       	ld	r22, Y+
    352c:	79 91       	ld	r23, Y+
    352e:	f9 01       	movw	r30, r18
    3530:	e8 0f       	add	r30, r24
    3532:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3534:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3536:	4d 91       	ld	r20, X+
    3538:	5c 91       	ld	r21, X
    353a:	11 97       	sbiw	r26, 0x01	; 1
    353c:	46 1b       	sub	r20, r22
    353e:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3540:	14 03       	mulsu	r17, r20
    3542:	b0 01       	movw	r22, r0
    3544:	15 9f       	mul	r17, r21
    3546:	70 0d       	add	r23, r0
    3548:	11 24       	eor	r1, r1
    354a:	6d 93       	st	X+, r22
    354c:	7d 93       	st	X+, r23
    354e:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    3550:	83 30       	cpi	r24, 0x03	; 3
    3552:	91 05       	cpc	r25, r1
    3554:	51 f7       	brne	.-44     	; 0x352a <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	08 95       	ret

0000355e <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    355e:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    3560:	86 e0       	ldi	r24, 0x06	; 6
    3562:	e0 e4       	ldi	r30, 0x40	; 64
    3564:	f7 e0       	ldi	r31, 0x07	; 7
    3566:	df 01       	movw	r26, r30
    3568:	1d 92       	st	X+, r1
    356a:	8a 95       	dec	r24
    356c:	e9 f7       	brne	.-6      	; 0x3568 <CalibrateGyrosFast+0xa>
    356e:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    3570:	0e 94 3d 1a 	call	0x347a	; 0x347a <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];
    3574:	40 91 40 07 	lds	r20, 0x0740
    3578:	50 91 41 07 	lds	r21, 0x0741
    357c:	80 91 84 05 	lds	r24, 0x0584
    3580:	90 91 85 05 	lds	r25, 0x0585
    3584:	48 0f       	add	r20, r24
    3586:	59 1f       	adc	r21, r25
    3588:	50 93 41 07 	sts	0x0741, r21
    358c:	40 93 40 07 	sts	0x0740, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];
    3590:	20 91 42 07 	lds	r18, 0x0742
    3594:	30 91 43 07 	lds	r19, 0x0743
    3598:	80 91 86 05 	lds	r24, 0x0586
    359c:	90 91 87 05 	lds	r25, 0x0587
    35a0:	28 0f       	add	r18, r24
    35a2:	39 1f       	adc	r19, r25
    35a4:	30 93 43 07 	sts	0x0743, r19
    35a8:	20 93 42 07 	sts	0x0742, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    35ac:	80 91 44 07 	lds	r24, 0x0744
    35b0:	90 91 45 07 	lds	r25, 0x0745
    35b4:	60 91 88 05 	lds	r22, 0x0588
    35b8:	70 91 89 05 	lds	r23, 0x0589
    35bc:	86 0f       	add	r24, r22
    35be:	97 1f       	adc	r25, r23
    35c0:	90 93 45 07 	sts	0x0745, r25
    35c4:	80 93 44 07 	sts	0x0744, r24
    35c8:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    35ca:	91 f6       	brne	.-92     	; 0x3570 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32
    35cc:	65 e0       	ldi	r22, 0x05	; 5
    35ce:	55 95       	asr	r21
    35d0:	47 95       	ror	r20
    35d2:	6a 95       	dec	r22
    35d4:	e1 f7       	brne	.-8      	; 0x35ce <CalibrateGyrosFast+0x70>
    35d6:	50 93 41 07 	sts	0x0741, r21
    35da:	40 93 40 07 	sts	0x0740, r20
    35de:	75 e0       	ldi	r23, 0x05	; 5
    35e0:	35 95       	asr	r19
    35e2:	27 95       	ror	r18
    35e4:	7a 95       	dec	r23
    35e6:	e1 f7       	brne	.-8      	; 0x35e0 <CalibrateGyrosFast+0x82>
    35e8:	30 93 43 07 	sts	0x0743, r19
    35ec:	20 93 42 07 	sts	0x0742, r18
    35f0:	e5 e0       	ldi	r30, 0x05	; 5
    35f2:	95 95       	asr	r25
    35f4:	87 95       	ror	r24
    35f6:	ea 95       	dec	r30
    35f8:	e1 f7       	brne	.-8      	; 0x35f2 <CalibrateGyrosFast+0x94>
    35fa:	90 93 45 07 	sts	0x0745, r25
    35fe:	80 93 44 07 	sts	0x0744, r24
	}

	Save_Config_to_EEPROM();
    3602:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
}
    3606:	cf 91       	pop	r28
    3608:	08 95       	ret

0000360a <CalibrateGyrosSlow>:

bool CalibrateGyrosSlow(void)
{
    360a:	a5 e1       	ldi	r26, 0x15	; 21
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	eb e0       	ldi	r30, 0x0B	; 11
    3610:	fb e1       	ldi	r31, 0x1B	; 27
    3612:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    3616:	1e 86       	std	Y+14, r1	; 0x0e
    3618:	1d 86       	std	Y+13, r1	; 0x0d
    361a:	18 8a       	std	Y+16, r1	; 0x10
    361c:	1f 86       	std	Y+15, r1	; 0x0f
    361e:	1a 8a       	std	Y+18, r1	; 0x12
    3620:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();
    3622:	0e 94 af 1a 	call	0x355e	; 0x355e <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];
    3626:	60 91 40 07 	lds	r22, 0x0740
    362a:	70 91 41 07 	lds	r23, 0x0741
    362e:	88 27       	eor	r24, r24
    3630:	77 fd       	sbrc	r23, 7
    3632:	80 95       	com	r24
    3634:	98 2f       	mov	r25, r24
    3636:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    363a:	69 83       	std	Y+1, r22	; 0x01
    363c:	7a 83       	std	Y+2, r23	; 0x02
    363e:	8b 83       	std	Y+3, r24	; 0x03
    3640:	9c 83       	std	Y+4, r25	; 0x04
    3642:	60 91 42 07 	lds	r22, 0x0742
    3646:	70 91 43 07 	lds	r23, 0x0743
    364a:	88 27       	eor	r24, r24
    364c:	77 fd       	sbrc	r23, 7
    364e:	80 95       	com	r24
    3650:	98 2f       	mov	r25, r24
    3652:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3656:	6d 83       	std	Y+5, r22	; 0x05
    3658:	7e 83       	std	Y+6, r23	; 0x06
    365a:	8f 83       	std	Y+7, r24	; 0x07
    365c:	98 87       	std	Y+8, r25	; 0x08
    365e:	60 91 44 07 	lds	r22, 0x0744
    3662:	70 91 45 07 	lds	r23, 0x0745
    3666:	88 27       	eor	r24, r24
    3668:	77 fd       	sbrc	r23, 7
    366a:	80 95       	com	r24
    366c:	98 2f       	mov	r25, r24
    366e:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3672:	69 87       	std	Y+9, r22	; 0x09
    3674:	7a 87       	std	Y+10, r23	; 0x0a
    3676:	8b 87       	std	Y+11, r24	; 0x0b
    3678:	9c 87       	std	Y+12, r25	; 0x0c
    367a:	1d 8a       	std	Y+21, r1	; 0x15
    367c:	1b 8a       	std	Y+19, r1	; 0x13
    367e:	e1 2c       	mov	r14, r1
    3680:	f1 2c       	mov	r15, r1
    3682:	00 e0       	ldi	r16, 0x00	; 0
    3684:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    3686:	80 91 b2 00 	lds	r24, 0x00B2
    368a:	9d 89       	ldd	r25, Y+21	; 0x15
    368c:	89 1b       	sub	r24, r25
    368e:	e8 0e       	add	r14, r24
    3690:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    3692:	e0 91 b2 00 	lds	r30, 0x00B2
    3696:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    3698:	fc e4       	ldi	r31, 0x4C	; 76
    369a:	ef 16       	cp	r14, r31
    369c:	ff 06       	cpc	r15, r31
    369e:	28 f0       	brcs	.+10     	; 0x36aa <CalibrateGyrosSlow+0xa0>
		{
			Gyro_seconds++;
    36a0:	8b 89       	ldd	r24, Y+19	; 0x13
    36a2:	8f 5f       	subi	r24, 0xFF	; 255
    36a4:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    36a6:	e1 2c       	mov	r14, r1
    36a8:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    36aa:	0e 94 3d 1a 	call	0x347a	; 0x347a <get_raw_gyros>
    36ae:	fe 01       	movw	r30, r28
    36b0:	31 96       	adiw	r30, 0x01	; 1
    36b2:	6f 01       	movw	r12, r30
    36b4:	f4 e8       	ldi	r31, 0x84	; 132
    36b6:	2f 2e       	mov	r2, r31
    36b8:	f5 e0       	ldi	r31, 0x05	; 5
    36ba:	3f 2e       	mov	r3, r31
    36bc:	ce 01       	movw	r24, r28
    36be:	0d 96       	adiw	r24, 0x0d	; 13
    36c0:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++)
    36c2:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    36c4:	f1 01       	movw	r30, r2
    36c6:	81 90       	ld	r8, Z+
    36c8:	91 90       	ld	r9, Z+
    36ca:	1f 01       	movw	r2, r30
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 ec       	ldi	r19, 0xC0	; 192
    36d0:	49 e7       	ldi	r20, 0x79	; 121
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	f6 01       	movw	r30, r12
    36d6:	60 81       	ld	r22, Z
    36d8:	71 81       	ldd	r23, Z+1	; 0x01
    36da:	82 81       	ldd	r24, Z+2	; 0x02
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    36e2:	2b 01       	movw	r4, r22
    36e4:	3c 01       	movw	r6, r24
    36e6:	b4 01       	movw	r22, r8
    36e8:	88 27       	eor	r24, r24
    36ea:	77 fd       	sbrc	r23, 7
    36ec:	80 95       	com	r24
    36ee:	98 2f       	mov	r25, r24
    36f0:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    36f4:	9b 01       	movw	r18, r22
    36f6:	ac 01       	movw	r20, r24
    36f8:	c3 01       	movw	r24, r6
    36fa:	b2 01       	movw	r22, r4
    36fc:	0e 94 93 3b 	call	0x7726	; 0x7726 <__addsf3>
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a e7       	ldi	r20, 0x7A	; 122
    3706:	54 e4       	ldi	r21, 0x44	; 68
    3708:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__divsf3>
    370c:	f6 01       	movw	r30, r12
    370e:	60 83       	st	Z, r22
    3710:	71 83       	std	Z+1, r23	; 0x01
    3712:	82 83       	std	Z+2, r24	; 0x02
    3714:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    3716:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    371a:	f5 01       	movw	r30, r10
    371c:	20 81       	ld	r18, Z
    371e:	31 81       	ldd	r19, Z+1	; 0x01
    3720:	26 17       	cp	r18, r22
    3722:	37 07       	cpc	r19, r23
    3724:	11 f0       	breq	.+4      	; 0x372a <CalibrateGyrosSlow+0x120>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    3726:	00 e0       	ldi	r16, 0x00	; 0
    3728:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    372a:	f5 01       	movw	r30, r10
    372c:	61 93       	st	Z+, r22
    372e:	71 93       	st	Z+, r23
    3730:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++)
    3732:	fc 89       	ldd	r31, Y+20	; 0x14
    3734:	ff 5f       	subi	r31, 0xFF	; 255
    3736:	fc 8b       	std	Y+20, r31	; 0x14
    3738:	84 e0       	ldi	r24, 0x04	; 4
    373a:	c8 0e       	add	r12, r24
    373c:	d1 1c       	adc	r13, r1
    373e:	f3 30       	cpi	r31, 0x03	; 3
    3740:	09 f6       	brne	.-126    	; 0x36c4 <CalibrateGyrosSlow+0xba>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    3742:	0f 5f       	subi	r16, 0xFF	; 255
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    3746:	09 3c       	cpi	r16, 0xC9	; 201
    3748:	11 05       	cpc	r17, r1
    374a:	20 f0       	brcs	.+8      	; 0x3754 <CalibrateGyrosSlow+0x14a>
		{
			Gyros_Stable = true;
			CalibrateGyrosFast();
    374c:	0e 94 af 1a 	call	0x355e	; 0x355e <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	01 c0       	rjmp	.+2      	; 0x3756 <CalibrateGyrosSlow+0x14c>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	e7 e8       	ldi	r30, 0x87	; 135
    3758:	f3 e1       	ldi	r31, 0x13	; 19
    375a:	31 97       	sbiw	r30, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <CalibrateGyrosSlow+0x150>
    375e:	00 c0       	rjmp	.+0      	; 0x3760 <CalibrateGyrosSlow+0x156>
    3760:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    3762:	81 11       	cpse	r24, r1
    3764:	04 c0       	rjmp	.+8      	; 0x376e <CalibrateGyrosSlow+0x164>
    3766:	fb 89       	ldd	r31, Y+19	; 0x13
    3768:	f6 30       	cpi	r31, 0x06	; 6
    376a:	08 f4       	brcc	.+2      	; 0x376e <CalibrateGyrosSlow+0x164>
    376c:	8c cf       	rjmp	.-232    	; 0x3686 <CalibrateGyrosSlow+0x7c>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    376e:	65 96       	adiw	r28, 0x15	; 21
    3770:	e2 e1       	ldi	r30, 0x12	; 18
    3772:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

00003776 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    3776:	4f 92       	push	r4
    3778:	5f 92       	push	r5
    377a:	6f 92       	push	r6
    377c:	7f 92       	push	r7
    377e:	8f 92       	push	r8
    3780:	9f 92       	push	r9
    3782:	af 92       	push	r10
    3784:	bf 92       	push	r11
    3786:	cf 92       	push	r12
    3788:	df 92       	push	r13
    378a:	ef 92       	push	r14
    378c:	ff 92       	push	r15
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	28 97       	sbiw	r28, 0x08	; 8
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	6b 01       	movw	r12, r22
    37a4:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    37a6:	80 90 ba 05 	lds	r8, 0x05BA
    37aa:	90 90 bb 05 	lds	r9, 0x05BB
    37ae:	a0 90 bc 05 	lds	r10, 0x05BC
    37b2:	b0 90 bd 05 	lds	r11, 0x05BD
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    37b6:	9b 01       	movw	r18, r22
    37b8:	ac 01       	movw	r20, r24
    37ba:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	5f e3       	ldi	r21, 0x3F	; 63
    37c6:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    37ca:	9b 01       	movw	r18, r22
    37cc:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	80 e8       	ldi	r24, 0x80	; 128
    37d4:	9f e3       	ldi	r25, 0x3F	; 63
    37d6:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    37da:	69 83       	std	Y+1, r22	; 0x01
    37dc:	7a 83       	std	Y+2, r23	; 0x02
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    37e2:	40 90 be 05 	lds	r4, 0x05BE
    37e6:	50 90 bf 05 	lds	r5, 0x05BF
    37ea:	60 90 c0 05 	lds	r6, 0x05C0
    37ee:	70 90 c1 05 	lds	r7, 0x05C1
    37f2:	9b 01       	movw	r18, r22
    37f4:	ac 01       	movw	r20, r24
    37f6:	c5 01       	movw	r24, r10
    37f8:	b4 01       	movw	r22, r8
    37fa:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    37fe:	6d 83       	std	Y+5, r22	; 0x05
    3800:	7e 83       	std	Y+6, r23	; 0x06
    3802:	8f 83       	std	Y+7, r24	; 0x07
    3804:	98 87       	std	Y+8, r25	; 0x08
    3806:	a7 01       	movw	r20, r14
    3808:	96 01       	movw	r18, r12
    380a:	c3 01       	movw	r24, r6
    380c:	b2 01       	movw	r22, r4
    380e:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3812:	9b 01       	movw	r18, r22
    3814:	ac 01       	movw	r20, r24
    3816:	6d 81       	ldd	r22, Y+5	; 0x05
    3818:	7e 81       	ldd	r23, Y+6	; 0x06
    381a:	8f 81       	ldd	r24, Y+7	; 0x07
    381c:	98 85       	ldd	r25, Y+8	; 0x08
    381e:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    3822:	60 93 a6 05 	sts	0x05A6, r22
    3826:	70 93 a7 05 	sts	0x05A7, r23
    382a:	80 93 a8 05 	sts	0x05A8, r24
    382e:	90 93 a9 05 	sts	0x05A9, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    3832:	a7 01       	movw	r20, r14
    3834:	96 01       	movw	r18, r12
    3836:	c5 01       	movw	r24, r10
    3838:	b4 01       	movw	r22, r8
    383a:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    383e:	6b 01       	movw	r12, r22
    3840:	7c 01       	movw	r14, r24
    3842:	29 81       	ldd	r18, Y+1	; 0x01
    3844:	3a 81       	ldd	r19, Y+2	; 0x02
    3846:	4b 81       	ldd	r20, Y+3	; 0x03
    3848:	5c 81       	ldd	r21, Y+4	; 0x04
    384a:	c3 01       	movw	r24, r6
    384c:	b2 01       	movw	r22, r4
    384e:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3852:	9b 01       	movw	r18, r22
    3854:	ac 01       	movw	r20, r24
    3856:	c7 01       	movw	r24, r14
    3858:	b6 01       	movw	r22, r12
    385a:	0e 94 93 3b 	call	0x7726	; 0x7726 <__addsf3>
    385e:	60 93 8a 05 	sts	0x058A, r22
    3862:	70 93 8b 05 	sts	0x058B, r23
    3866:	80 93 8c 05 	sts	0x058C, r24
    386a:	90 93 8d 05 	sts	0x058D, r25
}
    386e:	28 96       	adiw	r28, 0x08	; 8
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	ff 90       	pop	r15
    3880:	ef 90       	pop	r14
    3882:	df 90       	pop	r13
    3884:	cf 90       	pop	r12
    3886:	bf 90       	pop	r11
    3888:	af 90       	pop	r10
    388a:	9f 90       	pop	r9
    388c:	8f 90       	pop	r8
    388e:	7f 90       	pop	r7
    3890:	6f 90       	pop	r6
    3892:	5f 90       	pop	r5
    3894:	4f 90       	pop	r4
    3896:	08 95       	ret

00003898 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    3898:	cf 92       	push	r12
    389a:	df 92       	push	r13
    389c:	ef 92       	push	r14
    389e:	ff 92       	push	r15
    38a0:	69 01       	movw	r12, r18
    38a2:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    38a4:	25 ef       	ldi	r18, 0xF5	; 245
    38a6:	31 ea       	ldi	r19, 0xA1	; 161
    38a8:	4b e8       	ldi	r20, 0x8B	; 139
    38aa:	5c e3       	ldi	r21, 0x3C	; 60
    38ac:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    38b0:	a7 01       	movw	r20, r14
    38b2:	96 01       	movw	r18, r12
    38b4:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    38b8:	6b 01       	movw	r12, r22
    38ba:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    38bc:	26 ea       	ldi	r18, 0xA6	; 166
    38be:	3a e0       	ldi	r19, 0x0A	; 10
    38c0:	46 e8       	ldi	r20, 0x86	; 134
    38c2:	5e e3       	ldi	r21, 0x3E	; 62
    38c4:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__gesf2>
    38c8:	18 16       	cp	r1, r24
    38ca:	9c f0       	brlt	.+38     	; 0x38f2 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    38cc:	26 ea       	ldi	r18, 0xA6	; 166
    38ce:	3a e0       	ldi	r19, 0x0A	; 10
    38d0:	46 e8       	ldi	r20, 0x86	; 134
    38d2:	5e eb       	ldi	r21, 0xBE	; 190
    38d4:	c7 01       	movw	r24, r14
    38d6:	b6 01       	movw	r22, r12
    38d8:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <__cmpsf2>
    38dc:	87 ff       	sbrs	r24, 7
    38de:	11 c0       	rjmp	.+34     	; 0x3902 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    38e0:	86 ea       	ldi	r24, 0xA6	; 166
    38e2:	c8 2e       	mov	r12, r24
    38e4:	8a e0       	ldi	r24, 0x0A	; 10
    38e6:	d8 2e       	mov	r13, r24
    38e8:	86 e8       	ldi	r24, 0x86	; 134
    38ea:	e8 2e       	mov	r14, r24
    38ec:	8e eb       	ldi	r24, 0xBE	; 190
    38ee:	f8 2e       	mov	r15, r24
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    38f2:	96 ea       	ldi	r25, 0xA6	; 166
    38f4:	c9 2e       	mov	r12, r25
    38f6:	9a e0       	ldi	r25, 0x0A	; 10
    38f8:	d9 2e       	mov	r13, r25
    38fa:	96 e8       	ldi	r25, 0x86	; 134
    38fc:	e9 2e       	mov	r14, r25
    38fe:	9e e3       	ldi	r25, 0x3E	; 62
    3900:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    3902:	c7 01       	movw	r24, r14
    3904:	b6 01       	movw	r22, r12
    3906:	ff 90       	pop	r15
    3908:	ef 90       	pop	r14
    390a:	df 90       	pop	r13
    390c:	cf 90       	pop	r12
    390e:	08 95       	ret

00003910 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    3910:	8f 92       	push	r8
    3912:	9f 92       	push	r9
    3914:	af 92       	push	r10
    3916:	bf 92       	push	r11
    3918:	cf 92       	push	r12
    391a:	df 92       	push	r13
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	6b 01       	movw	r12, r22
    3926:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    3928:	60 91 9a 05 	lds	r22, 0x059A
    392c:	70 91 9b 05 	lds	r23, 0x059B
    3930:	80 91 9c 05 	lds	r24, 0x059C
    3934:	90 91 9d 05 	lds	r25, 0x059D
    3938:	a7 01       	movw	r20, r14
    393a:	96 01       	movw	r18, r12
    393c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <thetascale>
	VectorA = VectorY;
    3940:	00 91 1e 01 	lds	r16, 0x011E
    3944:	10 91 1f 01 	lds	r17, 0x011F
    3948:	20 91 20 01 	lds	r18, 0x0120
    394c:	30 91 21 01 	lds	r19, 0x0121
    3950:	00 93 ba 05 	sts	0x05BA, r16
    3954:	10 93 bb 05 	sts	0x05BB, r17
    3958:	20 93 bc 05 	sts	0x05BC, r18
    395c:	30 93 bd 05 	sts	0x05BD, r19
	VectorB = VectorZ;
    3960:	00 91 00 01 	lds	r16, 0x0100
    3964:	10 91 01 01 	lds	r17, 0x0101
    3968:	20 91 02 01 	lds	r18, 0x0102
    396c:	30 91 03 01 	lds	r19, 0x0103
    3970:	00 93 be 05 	sts	0x05BE, r16
    3974:	10 93 bf 05 	sts	0x05BF, r17
    3978:	20 93 c0 05 	sts	0x05C0, r18
    397c:	30 93 c1 05 	sts	0x05C1, r19
	RotateVector(theta);
    3980:	0e 94 bb 1b 	call	0x3776	; 0x3776 <RotateVector>
	VectorY = VectorNewA;
    3984:	80 91 a6 05 	lds	r24, 0x05A6
    3988:	90 91 a7 05 	lds	r25, 0x05A7
    398c:	a0 91 a8 05 	lds	r26, 0x05A8
    3990:	b0 91 a9 05 	lds	r27, 0x05A9
    3994:	80 93 1e 01 	sts	0x011E, r24
    3998:	90 93 1f 01 	sts	0x011F, r25
    399c:	a0 93 20 01 	sts	0x0120, r26
    39a0:	b0 93 21 01 	sts	0x0121, r27
	VectorZ = VectorNewB;
    39a4:	80 90 8a 05 	lds	r8, 0x058A
    39a8:	90 90 8b 05 	lds	r9, 0x058B
    39ac:	a0 90 8c 05 	lds	r10, 0x058C
    39b0:	b0 90 8d 05 	lds	r11, 0x058D
    39b4:	80 92 00 01 	sts	0x0100, r8
    39b8:	90 92 01 01 	sts	0x0101, r9
    39bc:	a0 92 02 01 	sts	0x0102, r10
    39c0:	b0 92 03 01 	sts	0x0103, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    39c4:	60 91 9e 05 	lds	r22, 0x059E
    39c8:	70 91 9f 05 	lds	r23, 0x059F
    39cc:	80 91 a0 05 	lds	r24, 0x05A0
    39d0:	90 91 a1 05 	lds	r25, 0x05A1
    39d4:	a7 01       	movw	r20, r14
    39d6:	96 01       	movw	r18, r12
    39d8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <thetascale>
	VectorA = VectorX;
    39dc:	00 91 22 01 	lds	r16, 0x0122
    39e0:	10 91 23 01 	lds	r17, 0x0123
    39e4:	20 91 24 01 	lds	r18, 0x0124
    39e8:	30 91 25 01 	lds	r19, 0x0125
    39ec:	00 93 ba 05 	sts	0x05BA, r16
    39f0:	10 93 bb 05 	sts	0x05BB, r17
    39f4:	20 93 bc 05 	sts	0x05BC, r18
    39f8:	30 93 bd 05 	sts	0x05BD, r19
	VectorB = VectorZ;
    39fc:	80 92 be 05 	sts	0x05BE, r8
    3a00:	90 92 bf 05 	sts	0x05BF, r9
    3a04:	a0 92 c0 05 	sts	0x05C0, r10
    3a08:	b0 92 c1 05 	sts	0x05C1, r11
	RotateVector(theta);
    3a0c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <RotateVector>
	VectorX = VectorNewA;
    3a10:	80 90 a6 05 	lds	r8, 0x05A6
    3a14:	90 90 a7 05 	lds	r9, 0x05A7
    3a18:	a0 90 a8 05 	lds	r10, 0x05A8
    3a1c:	b0 90 a9 05 	lds	r11, 0x05A9
    3a20:	80 92 22 01 	sts	0x0122, r8
    3a24:	90 92 23 01 	sts	0x0123, r9
    3a28:	a0 92 24 01 	sts	0x0124, r10
    3a2c:	b0 92 25 01 	sts	0x0125, r11
	VectorZ = VectorNewB;
    3a30:	80 91 8a 05 	lds	r24, 0x058A
    3a34:	90 91 8b 05 	lds	r25, 0x058B
    3a38:	a0 91 8c 05 	lds	r26, 0x058C
    3a3c:	b0 91 8d 05 	lds	r27, 0x058D
    3a40:	80 93 00 01 	sts	0x0100, r24
    3a44:	90 93 01 01 	sts	0x0101, r25
    3a48:	a0 93 02 01 	sts	0x0102, r26
    3a4c:	b0 93 03 01 	sts	0x0103, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    3a50:	60 91 88 05 	lds	r22, 0x0588
    3a54:	70 91 89 05 	lds	r23, 0x0589
    3a58:	88 27       	eor	r24, r24
    3a5a:	77 fd       	sbrc	r23, 7
    3a5c:	80 95       	com	r24
    3a5e:	98 2f       	mov	r25, r24
    3a60:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3a64:	a7 01       	movw	r20, r14
    3a66:	96 01       	movw	r18, r12
    3a68:	0e 94 4c 1c 	call	0x3898	; 0x3898 <thetascale>
	VectorA = VectorX;
    3a6c:	80 92 ba 05 	sts	0x05BA, r8
    3a70:	90 92 bb 05 	sts	0x05BB, r9
    3a74:	a0 92 bc 05 	sts	0x05BC, r10
    3a78:	b0 92 bd 05 	sts	0x05BD, r11
	VectorB = VectorY;
    3a7c:	c0 90 1e 01 	lds	r12, 0x011E
    3a80:	d0 90 1f 01 	lds	r13, 0x011F
    3a84:	e0 90 20 01 	lds	r14, 0x0120
    3a88:	f0 90 21 01 	lds	r15, 0x0121
    3a8c:	c0 92 be 05 	sts	0x05BE, r12
    3a90:	d0 92 bf 05 	sts	0x05BF, r13
    3a94:	e0 92 c0 05 	sts	0x05C0, r14
    3a98:	f0 92 c1 05 	sts	0x05C1, r15
	RotateVector(theta);
    3a9c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <RotateVector>
	VectorX = VectorNewA;
    3aa0:	80 91 a6 05 	lds	r24, 0x05A6
    3aa4:	90 91 a7 05 	lds	r25, 0x05A7
    3aa8:	a0 91 a8 05 	lds	r26, 0x05A8
    3aac:	b0 91 a9 05 	lds	r27, 0x05A9
    3ab0:	80 93 22 01 	sts	0x0122, r24
    3ab4:	90 93 23 01 	sts	0x0123, r25
    3ab8:	a0 93 24 01 	sts	0x0124, r26
    3abc:	b0 93 25 01 	sts	0x0125, r27
	VectorY = VectorNewB;
    3ac0:	80 91 8a 05 	lds	r24, 0x058A
    3ac4:	90 91 8b 05 	lds	r25, 0x058B
    3ac8:	a0 91 8c 05 	lds	r26, 0x058C
    3acc:	b0 91 8d 05 	lds	r27, 0x058D
    3ad0:	80 93 1e 01 	sts	0x011E, r24
    3ad4:	90 93 1f 01 	sts	0x011F, r25
    3ad8:	a0 93 20 01 	sts	0x0120, r26
    3adc:	b0 93 21 01 	sts	0x0121, r27
}
    3ae0:	1f 91       	pop	r17
    3ae2:	0f 91       	pop	r16
    3ae4:	ff 90       	pop	r15
    3ae6:	ef 90       	pop	r14
    3ae8:	df 90       	pop	r13
    3aea:	cf 90       	pop	r12
    3aec:	bf 90       	pop	r11
    3aee:	af 90       	pop	r10
    3af0:	9f 90       	pop	r9
    3af2:	8f 90       	pop	r8
    3af4:	08 95       	ret

00003af6 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    3af6:	cf 92       	push	r12
    3af8:	df 92       	push	r13
    3afa:	ef 92       	push	r14
    3afc:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	44 eb       	ldi	r20, 0xB4	; 180
    3b04:	52 e4       	ldi	r21, 0x42	; 66
    3b06:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3b0a:	6b 01       	movw	r12, r22
    3b0c:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	a9 01       	movw	r20, r18
    3b14:	60 91 00 01 	lds	r22, 0x0100
    3b18:	70 91 01 01 	lds	r23, 0x0101
    3b1c:	80 91 02 01 	lds	r24, 0x0102
    3b20:	90 91 03 01 	lds	r25, 0x0103
    3b24:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <__cmpsf2>
    3b28:	87 ff       	sbrs	r24, 7
    3b2a:	18 c0       	rjmp	.+48     	; 0x3b5c <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	a9 01       	movw	r20, r18
    3b32:	c7 01       	movw	r24, r14
    3b34:	b6 01       	movw	r22, r12
    3b36:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__gesf2>
		{
			temp = 180 - temp;
    3b3a:	a7 01       	movw	r20, r14
    3b3c:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    3b3e:	18 16       	cp	r1, r24
    3b40:	2c f4       	brge	.+10     	; 0x3b4c <ext2+0x56>
		{
			temp = 180 - temp;
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	70 e0       	ldi	r23, 0x00	; 0
    3b46:	84 e3       	ldi	r24, 0x34	; 52
    3b48:	93 e4       	ldi	r25, 0x43	; 67
    3b4a:	04 c0       	rjmp	.+8      	; 0x3b54 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	84 e3       	ldi	r24, 0x34	; 52
    3b52:	93 ec       	ldi	r25, 0xC3	; 195
    3b54:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    3b58:	6b 01       	movw	r12, r22
    3b5a:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    3b5c:	c7 01       	movw	r24, r14
    3b5e:	b6 01       	movw	r22, r12
    3b60:	ff 90       	pop	r15
    3b62:	ef 90       	pop	r14
    3b64:	df 90       	pop	r13
    3b66:	cf 90       	pop	r12
    3b68:	08 95       	ret

00003b6a <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    3b6a:	60 91 22 01 	lds	r22, 0x0122
    3b6e:	70 91 23 01 	lds	r23, 0x0123
    3b72:	80 91 24 01 	lds	r24, 0x0124
    3b76:	90 91 25 01 	lds	r25, 0x0125
    3b7a:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <ext2>
    3b7e:	60 93 b6 05 	sts	0x05B6, r22
    3b82:	70 93 b7 05 	sts	0x05B7, r23
    3b86:	80 93 b8 05 	sts	0x05B8, r24
    3b8a:	90 93 b9 05 	sts	0x05B9, r25
	EulerAnglePitch = ext2(VectorY);
    3b8e:	60 91 1e 01 	lds	r22, 0x011E
    3b92:	70 91 1f 01 	lds	r23, 0x011F
    3b96:	80 91 20 01 	lds	r24, 0x0120
    3b9a:	90 91 21 01 	lds	r25, 0x0121
    3b9e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <ext2>
    3ba2:	60 93 8e 05 	sts	0x058E, r22
    3ba6:	70 93 8f 05 	sts	0x058F, r23
    3baa:	80 93 90 05 	sts	0x0590, r24
    3bae:	90 93 91 05 	sts	0x0591, r25
    3bb2:	08 95       	ret

00003bb4 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    3bb4:	a0 e1       	ldi	r26, 0x10	; 16
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    3bba:	fd e1       	ldi	r31, 0x1D	; 29
    3bbc:	0c 94 2d 3e 	jmp	0x7c5a	; 0x7c5a <__prologue_saves__+0x4>
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    3bc0:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    3bc4:	69 83       	std	Y+1, r22	; 0x01
    3bc6:	7a 83       	std	Y+2, r23	; 0x02
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
    3bca:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    3bcc:	20 e8       	ldi	r18, 0x80	; 128
    3bce:	36 e9       	ldi	r19, 0x96	; 150
    3bd0:	48 e1       	ldi	r20, 0x18	; 24
    3bd2:	5a e4       	ldi	r21, 0x4A	; 74
    3bd4:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__divsf3>
    3bd8:	6d 87       	std	Y+13, r22	; 0x0d
    3bda:	7e 87       	std	Y+14, r23	; 0x0e
    3bdc:	8f 87       	std	Y+15, r24	; 0x0f
    3bde:	98 8b       	std	Y+16, r25	; 0x10

	//************************************************************
	// Acc LPF
	//************************************************************	

	memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    3be0:	60 91 82 06 	lds	r22, 0x0682
    3be4:	84 e0       	ldi	r24, 0x04	; 4
    3be6:	68 02       	muls	r22, r24
    3be8:	b0 01       	movw	r22, r0
    3bea:	11 24       	eor	r1, r1
    3bec:	69 56       	subi	r22, 0x69	; 105
    3bee:	79 4e       	sbci	r23, 0xE9	; 233
    3bf0:	44 e0       	ldi	r20, 0x04	; 4
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	01 96       	adiw	r24, 0x01	; 1
    3bf8:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    3bfc:	50 90 82 06 	lds	r5, 0x0682
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    3c00:	c9 80       	ldd	r12, Y+1	; 0x01
    3c02:	da 80       	ldd	r13, Y+2	; 0x02
    3c04:	eb 80       	ldd	r14, Y+3	; 0x03
    3c06:	fc 80       	ldd	r15, Y+4	; 0x04
    3c08:	2e e3       	ldi	r18, 0x3E	; 62
    3c0a:	62 2e       	mov	r6, r18
    3c0c:	21 e0       	ldi	r18, 0x01	; 1
    3c0e:	72 2e       	mov	r7, r18
    3c10:	0a ea       	ldi	r16, 0xAA	; 170
    3c12:	15 e0       	ldi	r17, 0x05	; 5
	memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    3c14:	d3 01       	movw	r26, r6
    3c16:	6d 91       	ld	r22, X+
    3c18:	7d 91       	ld	r23, X+
    3c1a:	3d 01       	movw	r6, r26
    3c1c:	88 27       	eor	r24, r24
    3c1e:	77 fd       	sbrc	r23, 7
    3c20:	80 95       	com	r24
    3c22:	98 2f       	mov	r25, r24
    3c24:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3c28:	4b 01       	movw	r8, r22
    3c2a:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    3c2c:	b7 e0       	ldi	r27, 0x07	; 7
    3c2e:	5b 16       	cp	r5, r27
    3c30:	f1 f0       	breq	.+60     	; 0x3c6e <imu_update+0xba>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e8       	ldi	r20, 0x80	; 128
    3c38:	5f e3       	ldi	r21, 0x3F	; 63
    3c3a:	c7 01       	movw	r24, r14
    3c3c:	b6 01       	movw	r22, r12
    3c3e:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    3c42:	f8 01       	movw	r30, r16
    3c44:	20 81       	ld	r18, Z
    3c46:	31 81       	ldd	r19, Z+1	; 0x01
    3c48:	42 81       	ldd	r20, Z+2	; 0x02
    3c4a:	53 81       	ldd	r21, Z+3	; 0x03
    3c4c:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3c50:	a5 01       	movw	r20, r10
    3c52:	94 01       	movw	r18, r8
    3c54:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    3c58:	a7 01       	movw	r20, r14
    3c5a:	96 01       	movw	r18, r12
    3c5c:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__divsf3>
    3c60:	d8 01       	movw	r26, r16
    3c62:	6d 93       	st	X+, r22
    3c64:	7d 93       	st	X+, r23
    3c66:	8d 93       	st	X+, r24
    3c68:	9c 93       	st	X, r25
    3c6a:	13 97       	sbiw	r26, 0x03	; 3
    3c6c:	09 c0       	rjmp	.+18     	; 0x3c80 <imu_update+0xcc>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    3c6e:	b7 fa       	bst	r11, 7
    3c70:	b0 94       	com	r11
    3c72:	b7 f8       	bld	r11, 7
    3c74:	b0 94       	com	r11
    3c76:	f8 01       	movw	r30, r16
    3c78:	80 82       	st	Z, r8
    3c7a:	91 82       	std	Z+1, r9	; 0x01
    3c7c:	a2 82       	std	Z+2, r10	; 0x02
    3c7e:	b3 82       	std	Z+3, r11	; 0x03
    3c80:	0c 5f       	subi	r16, 0xFC	; 252
    3c82:	1f 4f       	sbci	r17, 0xFF	; 255
	//************************************************************	

	memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    3c84:	f4 e4       	ldi	r31, 0x44	; 68
    3c86:	6f 16       	cp	r6, r31
    3c88:	f1 e0       	ldi	r31, 0x01	; 1
    3c8a:	7f 06       	cpc	r7, r31
    3c8c:	19 f6       	brne	.-122    	; 0x3c14 <imu_update+0x60>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    3c8e:	23 ec       	ldi	r18, 0xC3	; 195
    3c90:	35 ef       	ldi	r19, 0xF5	; 245
    3c92:	48 e2       	ldi	r20, 0x28	; 40
    3c94:	5f e3       	ldi	r21, 0x3F	; 63
    3c96:	60 91 aa 05 	lds	r22, 0x05AA
    3c9a:	70 91 ab 05 	lds	r23, 0x05AB
    3c9e:	80 91 ac 05 	lds	r24, 0x05AC
    3ca2:	90 91 ad 05 	lds	r25, 0x05AD
    3ca6:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3caa:	6d 83       	std	Y+5, r22	; 0x05
    3cac:	7e 83       	std	Y+6, r23	; 0x06
    3cae:	8f 83       	std	Y+7, r24	; 0x07
    3cb0:	98 87       	std	Y+8, r25	; 0x08
    3cb2:	60 93 92 05 	sts	0x0592, r22
    3cb6:	70 93 93 05 	sts	0x0593, r23
    3cba:	80 93 94 05 	sts	0x0594, r24
    3cbe:	90 93 95 05 	sts	0x0595, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    3cc2:	23 ec       	ldi	r18, 0xC3	; 195
    3cc4:	35 ef       	ldi	r19, 0xF5	; 245
    3cc6:	48 e2       	ldi	r20, 0x28	; 40
    3cc8:	5f e3       	ldi	r21, 0x3F	; 63
    3cca:	60 91 ae 05 	lds	r22, 0x05AE
    3cce:	70 91 af 05 	lds	r23, 0x05AF
    3cd2:	80 91 b0 05 	lds	r24, 0x05B0
    3cd6:	90 91 b1 05 	lds	r25, 0x05B1
    3cda:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3cde:	69 87       	std	Y+9, r22	; 0x09
    3ce0:	7a 87       	std	Y+10, r23	; 0x0a
    3ce2:	8b 87       	std	Y+11, r24	; 0x0b
    3ce4:	9c 87       	std	Y+12, r25	; 0x0c
    3ce6:	60 93 96 05 	sts	0x0596, r22
    3cea:	70 93 97 05 	sts	0x0597, r23
    3cee:	80 93 98 05 	sts	0x0598, r24
    3cf2:	90 93 99 05 	sts	0x0599, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    3cf6:	60 91 84 05 	lds	r22, 0x0584
    3cfa:	70 91 85 05 	lds	r23, 0x0585
    3cfe:	88 27       	eor	r24, r24
    3d00:	77 fd       	sbrc	r23, 7
    3d02:	80 95       	com	r24
    3d04:	98 2f       	mov	r25, r24
    3d06:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3d0a:	2b 01       	movw	r4, r22
    3d0c:	3c 01       	movw	r6, r24
    3d0e:	60 93 9e 05 	sts	0x059E, r22
    3d12:	70 93 9f 05 	sts	0x059F, r23
    3d16:	80 93 a0 05 	sts	0x05A0, r24
    3d1a:	90 93 a1 05 	sts	0x05A1, r25
	GyroPitchVC = gyroADC[PITCH];
    3d1e:	60 91 86 05 	lds	r22, 0x0586
    3d22:	70 91 87 05 	lds	r23, 0x0587
    3d26:	88 27       	eor	r24, r24
    3d28:	77 fd       	sbrc	r23, 7
    3d2a:	80 95       	com	r24
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3d32:	6b 01       	movw	r12, r22
    3d34:	7c 01       	movw	r14, r24
    3d36:	60 93 9a 05 	sts	0x059A, r22
    3d3a:	70 93 9b 05 	sts	0x059B, r23
    3d3e:	80 93 9c 05 	sts	0x059C, r24
    3d42:	90 93 9d 05 	sts	0x059D, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    3d46:	20 91 3e 01 	lds	r18, 0x013E
    3d4a:	30 91 3f 01 	lds	r19, 0x013F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    3d4e:	40 91 40 01 	lds	r20, 0x0140
    3d52:	50 91 41 01 	lds	r21, 0x0141
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    3d56:	e0 91 42 01 	lds	r30, 0x0142
    3d5a:	f0 91 43 01 	lds	r31, 0x0143
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    3d5e:	44 9f       	mul	r20, r20
    3d60:	40 01       	movw	r8, r0
    3d62:	45 9f       	mul	r20, r21
    3d64:	90 0c       	add	r9, r0
    3d66:	90 0c       	add	r9, r0
    3d68:	11 24       	eor	r1, r1
    3d6a:	b4 01       	movw	r22, r8
    3d6c:	88 27       	eor	r24, r24
    3d6e:	77 fd       	sbrc	r23, 7
    3d70:	80 95       	com	r24
    3d72:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    3d74:	22 9f       	mul	r18, r18
    3d76:	a0 01       	movw	r20, r0
    3d78:	23 9f       	mul	r18, r19
    3d7a:	50 0d       	add	r21, r0
    3d7c:	50 0d       	add	r21, r0
    3d7e:	11 24       	eor	r1, r1
    3d80:	8a 01       	movw	r16, r20
    3d82:	22 27       	eor	r18, r18
    3d84:	17 fd       	sbrc	r17, 7
    3d86:	20 95       	com	r18
    3d88:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    3d8a:	60 0f       	add	r22, r16
    3d8c:	71 1f       	adc	r23, r17
    3d8e:	82 1f       	adc	r24, r18
    3d90:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    3d92:	ee 9f       	mul	r30, r30
    3d94:	90 01       	movw	r18, r0
    3d96:	ef 9f       	mul	r30, r31
    3d98:	30 0d       	add	r19, r0
    3d9a:	30 0d       	add	r19, r0
    3d9c:	11 24       	eor	r1, r1
    3d9e:	89 01       	movw	r16, r18
    3da0:	22 27       	eor	r18, r18
    3da2:	17 fd       	sbrc	r17, 7
    3da4:	20 95       	com	r18
    3da6:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    3da8:	60 0f       	add	r22, r16
    3daa:	71 1f       	adc	r23, r17
    3dac:	82 1f       	adc	r24, r18
    3dae:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    3db0:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    3db4:	4b 01       	movw	r8, r22
    3db6:	5c 01       	movw	r10, r24
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	34 ef       	ldi	r19, 0xF4	; 244
    3dbc:	48 e3       	ldi	r20, 0x38	; 56
    3dbe:	56 e4       	ldi	r21, 0x46	; 70
    3dc0:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__gesf2>
    3dc4:	18 16       	cp	r1, r24
    3dc6:	0c f0       	brlt	.+2      	; 0x3dca <imu_update+0x216>
    3dc8:	6f c0       	rjmp	.+222    	; 0x3ea8 <imu_update+0x2f4>
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	38 e4       	ldi	r19, 0x48	; 72
    3dce:	49 ea       	ldi	r20, 0xA9	; 169
    3dd0:	56 e4       	ldi	r21, 0x46	; 70
    3dd2:	c5 01       	movw	r24, r10
    3dd4:	b4 01       	movw	r22, r8
    3dd6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <__cmpsf2>
    3dda:	87 ff       	sbrs	r24, 7
    3ddc:	65 c0       	rjmp	.+202    	; 0x3ea8 <imu_update+0x2f4>
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	5f e3       	ldi	r21, 0x3F	; 63
    3de6:	60 91 00 01 	lds	r22, 0x0100
    3dea:	70 91 01 01 	lds	r23, 0x0101
    3dee:	80 91 02 01 	lds	r24, 0x0102
    3df2:	90 91 03 01 	lds	r25, 0x0103
    3df6:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__gesf2>
    3dfa:	18 16       	cp	r1, r24
    3dfc:	0c f0       	brlt	.+2      	; 0x3e00 <imu_update+0x24c>
    3dfe:	54 c0       	rjmp	.+168    	; 0x3ea8 <imu_update+0x2f4>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    3e00:	80 91 81 06 	lds	r24, 0x0681
    3e04:	6b e0       	ldi	r22, 0x0B	; 11
    3e06:	70 e0       	ldi	r23, 0x00	; 0
    3e08:	68 1b       	sub	r22, r24
    3e0a:	71 09       	sbc	r23, r1
    3e0c:	87 fd       	sbrc	r24, 7
    3e0e:	73 95       	inc	r23
    3e10:	88 27       	eor	r24, r24
    3e12:	77 fd       	sbrc	r23, 7
    3e14:	80 95       	com	r24
    3e16:	98 2f       	mov	r25, r24
    3e18:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
    3e1c:	4b 01       	movw	r8, r22
    3e1e:	5c 01       	movw	r10, r24
    3e20:	2d 81       	ldd	r18, Y+5	; 0x05
    3e22:	3e 81       	ldd	r19, Y+6	; 0x06
    3e24:	4f 81       	ldd	r20, Y+7	; 0x07
    3e26:	58 85       	ldd	r21, Y+8	; 0x08
    3e28:	60 91 b6 05 	lds	r22, 0x05B6
    3e2c:	70 91 b7 05 	lds	r23, 0x05B7
    3e30:	80 91 b8 05 	lds	r24, 0x05B8
    3e34:	90 91 b9 05 	lds	r25, 0x05B9
    3e38:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    3e3c:	a5 01       	movw	r20, r10
    3e3e:	94 01       	movw	r18, r8
    3e40:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__divsf3>
    3e44:	9b 01       	movw	r18, r22
    3e46:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    3e48:	c3 01       	movw	r24, r6
    3e4a:	b2 01       	movw	r22, r4
    3e4c:	0e 94 93 3b 	call	0x7726	; 0x7726 <__addsf3>
    3e50:	60 93 9e 05 	sts	0x059E, r22
    3e54:	70 93 9f 05 	sts	0x059F, r23
    3e58:	80 93 a0 05 	sts	0x05A0, r24
    3e5c:	90 93 a1 05 	sts	0x05A1, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    3e60:	29 85       	ldd	r18, Y+9	; 0x09
    3e62:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e64:	4b 85       	ldd	r20, Y+11	; 0x0b
    3e66:	5c 85       	ldd	r21, Y+12	; 0x0c
    3e68:	60 91 8e 05 	lds	r22, 0x058E
    3e6c:	70 91 8f 05 	lds	r23, 0x058F
    3e70:	80 91 90 05 	lds	r24, 0x0590
    3e74:	90 91 91 05 	lds	r25, 0x0591
    3e78:	0e 94 92 3b 	call	0x7724	; 0x7724 <__subsf3>
    3e7c:	a5 01       	movw	r20, r10
    3e7e:	94 01       	movw	r18, r8
    3e80:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__divsf3>
    3e84:	9b 01       	movw	r18, r22
    3e86:	ac 01       	movw	r20, r24
    3e88:	69 83       	std	Y+1, r22	; 0x01
    3e8a:	7a 83       	std	Y+2, r23	; 0x02
    3e8c:	8b 83       	std	Y+3, r24	; 0x03
    3e8e:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    3e90:	c7 01       	movw	r24, r14
    3e92:	b6 01       	movw	r22, r12
    3e94:	0e 94 93 3b 	call	0x7726	; 0x7726 <__addsf3>
    3e98:	60 93 9a 05 	sts	0x059A, r22
    3e9c:	70 93 9b 05 	sts	0x059B, r23
    3ea0:	80 93 9c 05 	sts	0x059C, r24
    3ea4:	90 93 9d 05 	sts	0x059D, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    3ea8:	6d 85       	ldd	r22, Y+13	; 0x0d
    3eaa:	7e 85       	ldd	r23, Y+14	; 0x0e
    3eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eae:	98 89       	ldd	r25, Y+16	; 0x10
    3eb0:	0e 94 88 1c 	call	0x3910	; 0x3910 <Rotate3dVector>
	ExtractEulerAngles();
    3eb4:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	48 ec       	ldi	r20, 0xC8	; 200
    3ebe:	52 ec       	ldi	r21, 0xC2	; 194
    3ec0:	60 91 b6 05 	lds	r22, 0x05B6
    3ec4:	70 91 b7 05 	lds	r23, 0x05B7
    3ec8:	80 91 b8 05 	lds	r24, 0x05B8
    3ecc:	90 91 b9 05 	lds	r25, 0x05B9
    3ed0:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3ed4:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    3ed8:	70 93 a3 05 	sts	0x05A3, r23
    3edc:	60 93 a2 05 	sts	0x05A2, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	48 ec       	ldi	r20, 0xC8	; 200
    3ee6:	52 ec       	ldi	r21, 0xC2	; 194
    3ee8:	60 91 8e 05 	lds	r22, 0x058E
    3eec:	70 91 8f 05 	lds	r23, 0x058F
    3ef0:	80 91 90 05 	lds	r24, 0x0590
    3ef4:	90 91 91 05 	lds	r25, 0x0591
    3ef8:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
    3efc:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    3f00:	70 93 a5 05 	sts	0x05A5, r23
    3f04:	60 93 a4 05 	sts	0x05A4, r22
}
    3f08:	60 96       	adiw	r28, 0x10	; 16
    3f0a:	e0 e1       	ldi	r30, 0x10	; 16
    3f0c:	0c 94 49 3e 	jmp	0x7c92	; 0x7c92 <__epilogue_restores__+0x4>

00003f10 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    3f10:	10 92 22 01 	sts	0x0122, r1
    3f14:	10 92 23 01 	sts	0x0123, r1
    3f18:	10 92 24 01 	sts	0x0124, r1
    3f1c:	10 92 25 01 	sts	0x0125, r1
	VectorY = 0;
    3f20:	10 92 1e 01 	sts	0x011E, r1
    3f24:	10 92 1f 01 	sts	0x011F, r1
    3f28:	10 92 20 01 	sts	0x0120, r1
    3f2c:	10 92 21 01 	sts	0x0121, r1
	VectorZ = 1;
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	a0 e8       	ldi	r26, 0x80	; 128
    3f36:	bf e3       	ldi	r27, 0x3F	; 63
    3f38:	80 93 00 01 	sts	0x0100, r24
    3f3c:	90 93 01 01 	sts	0x0101, r25
    3f40:	a0 93 02 01 	sts	0x0102, r26
    3f44:	b0 93 03 01 	sts	0x0103, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    3f48:	10 92 ba 05 	sts	0x05BA, r1
    3f4c:	10 92 bb 05 	sts	0x05BB, r1
    3f50:	10 92 bc 05 	sts	0x05BC, r1
    3f54:	10 92 bd 05 	sts	0x05BD, r1
	VectorB = 0;
    3f58:	10 92 be 05 	sts	0x05BE, r1
    3f5c:	10 92 bf 05 	sts	0x05BF, r1
    3f60:	10 92 c0 05 	sts	0x05C0, r1
    3f64:	10 92 c1 05 	sts	0x05C1, r1
	EulerAngleRoll = 0;
    3f68:	10 92 b6 05 	sts	0x05B6, r1
    3f6c:	10 92 b7 05 	sts	0x05B7, r1
    3f70:	10 92 b8 05 	sts	0x05B8, r1
    3f74:	10 92 b9 05 	sts	0x05B9, r1
	EulerAnglePitch = 0;
    3f78:	10 92 8e 05 	sts	0x058E, r1
    3f7c:	10 92 8f 05 	sts	0x058F, r1
    3f80:	10 92 90 05 	sts	0x0590, r1
    3f84:	10 92 91 05 	sts	0x0591, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    3f88:	10 92 85 07 	sts	0x0785, r1
    3f8c:	10 92 84 07 	sts	0x0784, r1
	TCNT1 = 0;			// TCNT1 current time
    3f90:	10 92 85 00 	sts	0x0085, r1
    3f94:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    3f98:	10 92 18 01 	sts	0x0118, r1
    3f9c:	10 92 17 01 	sts	0x0117, r1
    3fa0:	08 95       	ret

00003fa2 <init>:
{
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x00;		// Port A - All inputs
    3fa2:	11 b8       	out	0x01, r1	; 1
	DDRB		= 0x0A;		// Port B - Buzzer and LED1 are outputs
    3fa4:	8a e0       	ldi	r24, 0x0A	; 10
    3fa6:	84 b9       	out	0x04, r24	; 4
	DDRC		= 0x00;		// Port C - All inputs
    3fa8:	17 b8       	out	0x07, r1	; 7
	DDRD		= 0xF2;		// Port D - SI, SCL, /CSI, /RES and A0 outputs 
    3faa:	82 ef       	ldi	r24, 0xF2	; 242
    3fac:	8a b9       	out	0x0a, r24	; 10
							//			THR, AIL and ELE are inputs

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    3fae:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    3fb0:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    3fb2:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    3fb4:	85 ef       	ldi	r24, 0xF5	; 245
    3fb6:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    3fb8:	8c e0       	ldi	r24, 0x0C	; 12
    3fba:	89 b9       	out	0x09, r24	; 9
	// 5 low pulses: DSM2 2048/11ms
	// 7 low pulses: DSMX 1024/22ms
	// 9 low pulses: DSMX 2048/11ms
	//***********************************************************

	PIND	= 0x0C;			// Release RX pull up on PD0
    3fbc:	89 b9       	out	0x09, r24	; 9
    3fbe:	2f e5       	ldi	r18, 0x5F	; 95
    3fc0:	88 ed       	ldi	r24, 0xD8	; 216
    3fc2:	93 e0       	ldi	r25, 0x03	; 3
    3fc4:	21 50       	subi	r18, 0x01	; 1
    3fc6:	80 40       	sbci	r24, 0x00	; 0
    3fc8:	90 40       	sbci	r25, 0x00	; 0
    3fca:	e1 f7       	brne	.-8      	; 0x3fc4 <init+0x22>
    3fcc:	00 c0       	rjmp	.+0      	; 0x3fce <init+0x2c>
    3fce:	00 00       	nop
							// Tweak until bind pulses about 68ms after power-up		
		
	// Bind as master if any single button pressed.
	// NB: Have to wait until the button pull-ups rise before testing for a button press.
	// Button 1
	if ((PINB & 0xf0) == 0x70)
    3fd0:	83 b1       	in	r24, 0x03	; 3
    3fd2:	80 7f       	andi	r24, 0xF0	; 240
    3fd4:	80 37       	cpi	r24, 0x70	; 112
    3fd6:	29 f4       	brne	.+10     	; 0x3fe2 <init+0x40>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    3fd8:	83 ef       	ldi	r24, 0xF3	; 243
    3fda:	8a b9       	out	0x0a, r24	; 10
		bind_master(3);
    3fdc:	83 e0       	ldi	r24, 0x03	; 3
    3fde:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
		
	}
	// Button 2	
	if ((PINB & 0xf0) == 0xb0)
    3fe2:	83 b1       	in	r24, 0x03	; 3
    3fe4:	80 7f       	andi	r24, 0xF0	; 240
    3fe6:	80 3b       	cpi	r24, 0xB0	; 176
    3fe8:	29 f4       	brne	.+10     	; 0x3ff4 <init+0x52>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    3fea:	83 ef       	ldi	r24, 0xF3	; 243
    3fec:	8a b9       	out	0x0a, r24	; 10
		bind_master(5);
    3fee:	85 e0       	ldi	r24, 0x05	; 5
    3ff0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
	}
	// Button 3	
	if ((PINB & 0xf0) == 0xd0)
    3ff4:	83 b1       	in	r24, 0x03	; 3
    3ff6:	80 7f       	andi	r24, 0xF0	; 240
    3ff8:	80 3d       	cpi	r24, 0xD0	; 208
    3ffa:	29 f4       	brne	.+10     	; 0x4006 <init+0x64>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    3ffc:	83 ef       	ldi	r24, 0xF3	; 243
    3ffe:	8a b9       	out	0x0a, r24	; 10
		bind_master(7);
    4000:	87 e0       	ldi	r24, 0x07	; 7
    4002:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
	}
	
	// Button 4
	if ((PINB & 0xf0) == 0xE0)
    4006:	83 b1       	in	r24, 0x03	; 3
    4008:	80 7f       	andi	r24, 0xF0	; 240
    400a:	80 3e       	cpi	r24, 0xE0	; 224
    400c:	29 f4       	brne	.+10     	; 0x4018 <init+0x76>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    400e:	83 ef       	ldi	r24, 0xF3	; 243
    4010:	8a b9       	out	0x0a, r24	; 10
		bind_master(9);
    4012:	89 e0       	ldi	r24, 0x09	; 9
    4014:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
	}
	
	DDRD	= 0xF2;			// Reset Port D directions
    4018:	82 ef       	ldi	r24, 0xF2	; 242
    401a:	8a b9       	out	0x0a, r24	; 10
	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    401c:	8d e0       	ldi	r24, 0x0D	; 13
    401e:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    4020:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    4022:	85 e0       	ldi	r24, 0x05	; 5
    4024:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    4026:	80 91 6e 00 	lds	r24, 0x006E
    402a:	81 60       	ori	r24, 0x01	; 1
    402c:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    4030:	16 bc       	out	0x26, r1	; 38

	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    4032:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    4036:	80 91 81 00 	lds	r24, 0x0081
    403a:	82 60       	ori	r24, 0x02	; 2
    403c:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    4040:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    4044:	87 e0       	ldi	r24, 0x07	; 7
    4046:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    404a:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    404e:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    4050:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT3 (Throttle)
	PCICR  = 0x08;							// PCINT24 to PCINT31 (PCINT3 group - THR (PCINT24))
    4054:	98 e0       	ldi	r25, 0x08	; 8
    4056:	90 93 68 00 	sts	0x0068, r25
	PCIFR  = 0x0F;							// Clear PCIF0 to PCIF3 interrupt flags 
    405a:	9f e0       	ldi	r25, 0x0F	; 15
    405c:	9b bb       	out	0x1b, r25	; 27

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder) - Disabled by EIMSK
	EICRA = 0x15;							// Any change INT0 (Elevator)
    405e:	95 e1       	ldi	r25, 0x15	; 21
    4060:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1 (Aileron)
											// Any change INT2 (Rudder/CPPM)
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    4064:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;	
    4066:	10 92 6a 07 	sts	0x076A, r1
	Flight_flags = 0;					
    406a:	10 92 1c 01 	sts	0x011C, r1
	Flight_flags |= (1 << FirstTimeFlightMode);
    406e:	80 91 1c 01 	lds	r24, 0x011C
    4072:	80 68       	ori	r24, 0x80	; 128
    4074:	80 93 1c 01 	sts	0x011C, r24
	int_count = 0;
    4078:	10 92 59 07 	sts	0x0759, r1
	//***********************************************************
	// GLCD initialisation
	//***********************************************************
	
	// Initialise the GLCD
	st7565_init();
    407c:	0e 94 1d 18 	call	0x303a	; 0x303a <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    4080:	0e 94 74 18 	call	0x30e8	; 0x30e8 <clear_screen>
    4084:	2f e7       	ldi	r18, 0x7F	; 127
    4086:	8f e4       	ldi	r24, 0x4F	; 79
    4088:	92 e1       	ldi	r25, 0x12	; 18
    408a:	21 50       	subi	r18, 0x01	; 1
    408c:	80 40       	sbci	r24, 0x00	; 0
    408e:	90 40       	sbci	r25, 0x00	; 0
    4090:	e1 f7       	brne	.-8      	; 0x408a <init+0xe8>
    4092:	00 c0       	rjmp	.+0      	; 0x4094 <init+0xf2>
    4094:	00 00       	nop
	
	//***********************************************************
	// Load or reset EEPROM settings
	//***********************************************************
	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    4096:	83 b1       	in	r24, 0x03	; 3
    4098:	80 7f       	andi	r24, 0xF0	; 240
    409a:	80 39       	cpi	r24, 0x90	; 144
    409c:	51 f5       	brne	.+84     	; 0x40f2 <init+0x150>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    409e:	80 ec       	ldi	r24, 0xC0	; 192
    40a0:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
		clear_buffer(buffer);
    40a4:	85 e4       	ldi	r24, 0x45	; 69
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25);
    40ac:	29 e1       	ldi	r18, 0x19	; 25
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	48 e2       	ldi	r20, 0x28	; 40
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	60 e7       	ldi	r22, 0x70	; 112
    40b6:	71 e0       	ldi	r23, 0x01	; 1
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		write_buffer(buffer);
    40be:	85 e4       	ldi	r24, 0x45	; 69
    40c0:	91 e0       	ldi	r25, 0x01	; 1
    40c2:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
		clear_buffer(buffer);
    40c6:	85 e4       	ldi	r24, 0x45	; 69
    40c8:	91 e0       	ldi	r25, 0x01	; 1
    40ca:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>

		Set_EEPROM_Default_Config();
    40ce:	0e 94 df 13 	call	0x27be	; 0x27be <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    40d2:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
		
		// Now set contrast to the previously saved value
		st7565_set_brightness((uint8_t)Config.Contrast);
    40d6:	80 91 7e 06 	lds	r24, 0x067E
    40da:	0e 94 13 18 	call	0x3026	; 0x3026 <st7565_set_brightness>
    40de:	2f e7       	ldi	r18, 0x7F	; 127
    40e0:	84 e8       	ldi	r24, 0x84	; 132
    40e2:	9e e1       	ldi	r25, 0x1E	; 30
    40e4:	21 50       	subi	r18, 0x01	; 1
    40e6:	80 40       	sbci	r24, 0x00	; 0
    40e8:	90 40       	sbci	r25, 0x00	; 0
    40ea:	e1 f7       	brne	.-8      	; 0x40e4 <init+0x142>
    40ec:	00 c0       	rjmp	.+0      	; 0x40ee <init+0x14c>
    40ee:	00 00       	nop
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <init+0x154>
		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}
	// Load "Config" global data structure
	else
	{
		Initial_EEPROM_Config_Load();
    40f2:	0e 94 bd 14 	call	0x297a	; 0x297a <Initial_EEPROM_Config_Load>
	}		

	// Now set contrast to the previously saved value
	st7565_set_brightness((uint8_t)Config.Contrast);
    40f6:	80 91 7e 06 	lds	r24, 0x067E
    40fa:	0e 94 13 18 	call	0x3026	; 0x3026 <st7565_set_brightness>
	// Write logo from buffer
	write_buffer(buffer);
	_delay_ms(500);
#endif

	clear_buffer(buffer);
    40fe:	85 e4       	ldi	r24, 0x45	; 69
    4100:	91 e0       	ldi	r25, 0x01	; 1
    4102:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
	write_buffer(buffer);
    4106:	85 e4       	ldi	r24, 0x45	; 69
    4108:	91 e0       	ldi	r25, 0x01	; 1
    410a:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    410e:	0e 94 1d 18 	call	0x303a	; 0x303a <st7565_init>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    4112:	85 e4       	ldi	r24, 0x45	; 69
    4114:	91 e0       	ldi	r25, 0x01	; 1
    4116:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    411a:	80 ec       	ldi	r24, 0xC0	; 192
    411c:	0e 94 0b 18 	call	0x3016	; 0x3016 <st7565_command>
	LCD_Display_Text(2,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    4120:	29 e1       	ldi	r18, 0x19	; 25
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	42 e1       	ldi	r20, 0x12	; 18
    4126:	50 e0       	ldi	r21, 0x00	; 0
    4128:	60 e7       	ldi	r22, 0x70	; 112
    412a:	71 e0       	ldi	r23, 0x01	; 1
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	write_buffer(buffer);
    4132:	85 e4       	ldi	r24, 0x45	; 69
    4134:	91 e0       	ldi	r25, 0x01	; 1
    4136:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
	clear_buffer(buffer);
    413a:	85 e4       	ldi	r24, 0x45	; 69
    413c:	91 e0       	ldi	r25, 0x01	; 1
    413e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    4142:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    4146:	0e 94 99 26 	call	0x4d32	; 0x4d32 <init_int>
	init_uart();							// Initialise UART	
    414a:	0e 94 05 38 	call	0x700a	; 0x700a <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    414e:	0e 94 05 1b 	call	0x360a	; 0x360a <CalibrateGyrosSlow>
    4152:	81 11       	cpse	r24, r1
    4154:	27 c0       	rjmp	.+78     	; 0x41a4 <init+0x202>
	{
		clear_buffer(buffer);
    4156:	85 e4       	ldi	r24, 0x45	; 69
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    415e:	29 e1       	ldi	r18, 0x19	; 25
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	49 e1       	ldi	r20, 0x19	; 25
    4164:	50 e0       	ldi	r21, 0x00	; 0
    4166:	60 e7       	ldi	r22, 0x70	; 112
    4168:	71 e0       	ldi	r23, 0x01	; 1
    416a:	8d e3       	ldi	r24, 0x3D	; 61
    416c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		write_buffer(buffer);
    4170:	85 e4       	ldi	r24, 0x45	; 69
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
    4178:	2f ef       	ldi	r18, 0xFF	; 255
    417a:	88 e0       	ldi	r24, 0x08	; 8
    417c:	9d e3       	ldi	r25, 0x3D	; 61
    417e:	21 50       	subi	r18, 0x01	; 1
    4180:	80 40       	sbci	r24, 0x00	; 0
    4182:	90 40       	sbci	r25, 0x00	; 0
    4184:	e1 f7       	brne	.-8      	; 0x417e <init+0x1dc>
    4186:	00 c0       	rjmp	.+0      	; 0x4188 <init+0x1e6>
    4188:	00 00       	nop
		_delay_ms(1000);
	
		// Reset
		cli();
    418a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    418c:	28 e0       	ldi	r18, 0x08	; 8
    418e:	88 e1       	ldi	r24, 0x18	; 24
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	a8 95       	wdr
    4198:	80 93 60 00 	sts	0x0060, r24
    419c:	0f be       	out	0x3f, r0	; 63
    419e:	20 93 60 00 	sts	0x0060, r18
    41a2:	ff cf       	rjmp	.-2      	; 0x41a2 <init+0x200>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    41a4:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <GetVbat>
    41a8:	90 93 27 01 	sts	0x0127, r25
    41ac:	80 93 26 01 	sts	0x0126, r24
	UpdateLimits();							// Update travel and trigger limits
    41b0:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <UpdateLimits>

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    41b4:	80 91 6a 07 	lds	r24, 0x076A
    41b8:	88 23       	and	r24, r24
    41ba:	69 f0       	breq	.+26     	; 0x41d6 <init+0x234>
	{
		RxGetChannels();
    41bc:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    41c0:	80 91 cd 07 	lds	r24, 0x07CD
    41c4:	90 91 ce 07 	lds	r25, 0x07CE
    41c8:	c3 97       	sbiw	r24, 0x33	; 51
    41ca:	2c f0       	brlt	.+10     	; 0x41d6 <init+0x234>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    41cc:	80 91 1d 01 	lds	r24, 0x011D
    41d0:	82 60       	ori	r24, 0x02	; 2
    41d2:	80 93 1d 01 	sts	0x011D, r24
		}
	}
	
	// Reset IMU
	reset_IMU();
    41d6:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    41da:	29 9a       	sbi	0x05, 1	; 5
    41dc:	2f e9       	ldi	r18, 0x9F	; 159
    41de:	86 e8       	ldi	r24, 0x86	; 134
    41e0:	91 e0       	ldi	r25, 0x01	; 1
    41e2:	21 50       	subi	r18, 0x01	; 1
    41e4:	80 40       	sbci	r24, 0x00	; 0
    41e6:	90 40       	sbci	r25, 0x00	; 0
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <init+0x240>
    41ea:	00 c0       	rjmp	.+0      	; 0x41ec <init+0x24a>
    41ec:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    41ee:	29 98       	cbi	0x05, 1	; 5
    41f0:	08 95       	ret

000041f2 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    41f2:	1f 92       	push	r1
    41f4:	0f 92       	push	r0
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	0f 92       	push	r0
    41fa:	11 24       	eor	r1, r1
    41fc:	8f 93       	push	r24
    41fe:	9f 93       	push	r25
	TMR0_counter++;
    4200:	80 91 84 07 	lds	r24, 0x0784
    4204:	90 91 85 07 	lds	r25, 0x0785
    4208:	01 96       	adiw	r24, 0x01	; 1
    420a:	90 93 85 07 	sts	0x0785, r25
    420e:	80 93 84 07 	sts	0x0784, r24
}
    4212:	9f 91       	pop	r25
    4214:	8f 91       	pop	r24
    4216:	0f 90       	pop	r0
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	0f 90       	pop	r0
    421c:	1f 90       	pop	r1
    421e:	18 95       	reti

00004220 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    4220:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    4222:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    4224:	80 91 84 00 	lds	r24, 0x0084
    4228:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    422c:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    422e:	08 95       	ret

00004230 <__vector_7>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(PCINT3_vect)
{
    4230:	1f 92       	push	r1
    4232:	0f 92       	push	r0
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	0f 92       	push	r0
    4238:	11 24       	eor	r1, r1
    423a:	2f 93       	push	r18
    423c:	3f 93       	push	r19
    423e:	4f 93       	push	r20
    4240:	5f 93       	push	r21
    4242:	6f 93       	push	r22
    4244:	7f 93       	push	r23
    4246:	8f 93       	push	r24
    4248:	9f 93       	push	r25
    424a:	af 93       	push	r26
    424c:	bf 93       	push	r27
    424e:	ef 93       	push	r30
    4250:	ff 93       	push	r31
	// minimum inter-channel pulse is 300us. This suits "27ms" FrSky
	// CPPM receivers.
	//************************************************************

	// Only respond to negative-going interrupts
	if (CPPM) return;
    4252:	48 99       	sbic	0x09, 0	; 9
    4254:	d7 c0       	rjmp	.+430    	; 0x4404 <__vector_7+0x1d4>

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    4256:	0e 94 10 21 	call	0x4220	; 0x4220 <TIM16_ReadTCNT1>
		
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	if (Save_TCNT1 < PPMSyncStart)
    425a:	20 91 a0 07 	lds	r18, 0x07A0
    425e:	30 91 a1 07 	lds	r19, 0x07A1
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    4262:	20 91 a0 07 	lds	r18, 0x07A0
    4266:	30 91 a1 07 	lds	r19, 0x07A1
    426a:	ac 01       	movw	r20, r24
    426c:	42 1b       	sub	r20, r18
    426e:	53 0b       	sbc	r21, r19
    4270:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet if gap between serial data has been more than 1.0ms
	if (CurrentPeriod > SYNCPULSEWIDTH) // 2.7ms
    4272:	2f 35       	cpi	r18, 0x5F	; 95
    4274:	5a e1       	ldi	r21, 0x1A	; 26
    4276:	35 07       	cpc	r19, r21
    4278:	08 f4       	brcc	.+2      	; 0x427c <__vector_7+0x4c>
    427a:	43 c0       	rjmp	.+134    	; 0x4302 <__vector_7+0xd2>
	{
		if (int_count < MININTCOUNT)
    427c:	20 91 59 07 	lds	r18, 0x0759
    4280:	2a 30       	cpi	r18, 0x0A	; 10
    4282:	30 f4       	brcc	.+12     	; 0x4290 <__vector_7+0x60>
		{
			// increment the serial interrupt counter
			int_count++;
    4284:	20 91 59 07 	lds	r18, 0x0759
    4288:	2f 5f       	subi	r18, 0xFF	; 255
    428a:	20 93 59 07 	sts	0x0759, r18
    428e:	05 c0       	rjmp	.+10     	; 0x429a <__vector_7+0x6a>
		}
		// Flag that a valid number of serial interrupts has occurred.
		else
		{
			// Set RxStarted flag
			Flight_flags |= (1 << RxStarted);
    4290:	20 91 1c 01 	lds	r18, 0x011C
    4294:	20 64       	ori	r18, 0x40	; 64
    4296:	20 93 1c 01 	sts	0x011C, r18
		}

		// FramePeriod only needs calculation before Rx has officially started
		if (!(Flight_flags & (1 << RxStarted)))
    429a:	20 91 1c 01 	lds	r18, 0x011C
    429e:	26 fd       	sbrc	r18, 6
    42a0:	29 c0       	rjmp	.+82     	; 0x42f4 <__vector_7+0xc4>
		{
			// Measure period from last FrameStart
			if (Save_TCNT1 < FrameStart)
    42a2:	20 91 80 07 	lds	r18, 0x0780
    42a6:	30 91 81 07 	lds	r19, 0x0781
    42aa:	82 17       	cp	r24, r18
    42ac:	93 07       	cpc	r25, r19
    42ae:	88 f4       	brcc	.+34     	; 0x42d2 <__vector_7+0xa2>
			{
				FramePeriod = (65536 - FrameStart + Save_TCNT1);
    42b0:	20 91 80 07 	lds	r18, 0x0780
    42b4:	30 91 81 07 	lds	r19, 0x0781
    42b8:	40 e0       	ldi	r20, 0x00	; 0
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	61 e0       	ldi	r22, 0x01	; 1
    42be:	70 e0       	ldi	r23, 0x00	; 0
    42c0:	42 1b       	sub	r20, r18
    42c2:	53 0b       	sbc	r21, r19
    42c4:	61 09       	sbc	r22, r1
    42c6:	71 09       	sbc	r23, r1
    42c8:	48 0f       	add	r20, r24
    42ca:	59 1f       	adc	r21, r25
    42cc:	61 1d       	adc	r22, r1
    42ce:	71 1d       	adc	r23, r1
    42d0:	09 c0       	rjmp	.+18     	; 0x42e4 <__vector_7+0xb4>
			}
			else
			{
				FramePeriod = (Save_TCNT1 - FrameStart);
    42d2:	20 91 80 07 	lds	r18, 0x0780
    42d6:	30 91 81 07 	lds	r19, 0x0781
    42da:	ac 01       	movw	r20, r24
    42dc:	42 1b       	sub	r20, r18
    42de:	53 0b       	sbc	r21, r19
    42e0:	60 e0       	ldi	r22, 0x00	; 0
    42e2:	70 e0       	ldi	r23, 0x00	; 0
    42e4:	40 93 99 07 	sts	0x0799, r20
    42e8:	50 93 9a 07 	sts	0x079A, r21
    42ec:	60 93 9b 07 	sts	0x079B, r22
    42f0:	70 93 9c 07 	sts	0x079C, r23
			}
		}
			
		// Reset channel counter
		ch_num = 0;
    42f4:	10 92 9f 07 	sts	0x079F, r1
			
		// Save the timestamp for the start of data so that
		// we can do a proper full frame rate measurement
		FrameStart = Save_TCNT1;
    42f8:	90 93 81 07 	sts	0x0781, r25
    42fc:	80 93 80 07 	sts	0x0780, r24
    4300:	05 c0       	rjmp	.+10     	; 0x430c <__vector_7+0xdc>
	}
	
	// Check for pulses smaller than 300us and reset if so
	else if (CurrentPeriod < MINPULSEWIDTH)
    4302:	2e 3e       	cpi	r18, 0xEE	; 238
    4304:	32 40       	sbci	r19, 0x02	; 2
    4306:	10 f4       	brcc	.+4      	; 0x430c <__vector_7+0xdc>
	{
		// Reset channel counter
		ch_num = 0;
    4308:	10 92 9f 07 	sts	0x079F, r1
	}
	
	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    430c:	90 93 a1 07 	sts	0x07A1, r25
    4310:	80 93 a0 07 	sts	0x07A0, r24

	// Get the channel number of the current channel in the requested channel order
    curChannel = Config.ChannelOrder[ch_num];
    4314:	e0 91 9f 07 	lds	r30, 0x079F
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	ee 53       	subi	r30, 0x3E	; 62
    431c:	fa 4f       	sbci	r31, 0xFA	; 250
    431e:	e1 81       	ldd	r30, Z+1	; 0x01

	// Set up previous channel number based on the requested channel order
	if (ch_num > 0)
    4320:	20 91 9f 07 	lds	r18, 0x079F
    4324:	22 23       	and	r18, r18
    4326:	39 f0       	breq	.+14     	; 0x4336 <__vector_7+0x106>
	{
		prevChannel = Config.ChannelOrder[ch_num-1];
    4328:	a0 91 9f 07 	lds	r26, 0x079F
    432c:	b0 e0       	ldi	r27, 0x00	; 0
    432e:	ae 53       	subi	r26, 0x3E	; 62
    4330:	ba 4f       	sbci	r27, 0xFA	; 250
    4332:	2c 91       	ld	r18, X
    4334:	01 c0       	rjmp	.+2      	; 0x4338 <__vector_7+0x108>
	}
	else
	{
		prevChannel = 0;
    4336:	20 e0       	ldi	r18, 0x00	; 0
	}

	// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
	// Prevent code from over-running RxChannelStart[]
    if (ch_num < MAX_CPPM_CHANNELS)
    4338:	30 91 9f 07 	lds	r19, 0x079F
    433c:	38 30       	cpi	r19, 0x08	; 8
    433e:	38 f4       	brcc	.+14     	; 0x434e <__vector_7+0x11e>
	{
        RxChannelStart[curChannel] = Save_TCNT1;
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	ee 0f       	add	r30, r30
    4344:	ff 1f       	adc	r31, r31
    4346:	e9 57       	subi	r30, 0x79	; 121
    4348:	f8 4f       	sbci	r31, 0xF8	; 248
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	80 83       	st	Z, r24
	}

	// When ch_num = 0, the first channel has not yet been measured.
	// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
    if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    434e:	30 91 9f 07 	lds	r19, 0x079F
    4352:	33 23       	and	r19, r19
    4354:	99 f0       	breq	.+38     	; 0x437c <__vector_7+0x14c>
    4356:	30 91 9f 07 	lds	r19, 0x079F
    435a:	39 30       	cpi	r19, 0x09	; 9
    435c:	78 f4       	brcc	.+30     	; 0x437c <__vector_7+0x14c>
    {
		RxChannel[prevChannel] = Save_TCNT1 - RxChannelStart[prevChannel];
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	22 0f       	add	r18, r18
    4362:	33 1f       	adc	r19, r19
    4364:	f9 01       	movw	r30, r18
    4366:	e9 57       	subi	r30, 0x79	; 121
    4368:	f8 4f       	sbci	r31, 0xF8	; 248
    436a:	40 81       	ld	r20, Z
    436c:	51 81       	ldd	r21, Z+1	; 0x01
    436e:	84 1b       	sub	r24, r20
    4370:	95 0b       	sbc	r25, r21
    4372:	f9 01       	movw	r30, r18
    4374:	e6 5a       	subi	r30, 0xA6	; 166
    4376:	f8 4f       	sbci	r31, 0xF8	; 248
    4378:	91 83       	std	Z+1, r25	; 0x01
    437a:	80 83       	st	Z, r24
	}

    // Increment to the next channel
	ch_num++;
    437c:	80 91 9f 07 	lds	r24, 0x079F
    4380:	8f 5f       	subi	r24, 0xFF	; 255
    4382:	80 93 9f 07 	sts	0x079F, r24

	// Work out the highest channel number automatically.
	// Update the maximum channel seen so far, but only while not officially started
	if ((ch_num > max_chan) && !(Flight_flags & (1 << RxStarted)))
    4386:	90 91 9f 07 	lds	r25, 0x079F
    438a:	80 91 7b 07 	lds	r24, 0x077B
    438e:	89 17       	cp	r24, r25
    4390:	48 f4       	brcc	.+18     	; 0x43a4 <__vector_7+0x174>
    4392:	80 91 1c 01 	lds	r24, 0x011C
    4396:	86 fd       	sbrc	r24, 6
    4398:	05 c0       	rjmp	.+10     	; 0x43a4 <__vector_7+0x174>
	{
		max_chan = ch_num;					// Update max channel number
    439a:	80 91 9f 07 	lds	r24, 0x079F
    439e:	80 93 7b 07 	sts	0x077B, r24
    43a2:	30 c0       	rjmp	.+96     	; 0x4404 <__vector_7+0x1d4>
	}
	// If the current channel is the highest channel, CPPM is complete
	else if (ch_num == max_chan)
    43a4:	90 91 9f 07 	lds	r25, 0x079F
    43a8:	80 91 7b 07 	lds	r24, 0x077B
    43ac:	98 13       	cpse	r25, r24
    43ae:	2a c0       	rjmp	.+84     	; 0x4404 <__vector_7+0x1d4>
	{
		// RC sync established
		Interrupted = true;
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	80 93 6a 07 	sts	0x076A, r24
					
		// Reset frame timers
		FrameDrop_Output_Rate = 0;
    43b6:	10 92 12 01 	sts	0x0112, r1
    43ba:	10 92 13 01 	sts	0x0113, r1
    43be:	10 92 14 01 	sts	0x0114, r1
    43c2:	10 92 15 01 	sts	0x0115, r1
		Failsafe_Output_Rate = 0;
    43c6:	10 92 0e 01 	sts	0x010E, r1
    43ca:	10 92 0f 01 	sts	0x010F, r1
    43ce:	10 92 10 01 	sts	0x0110, r1
    43d2:	10 92 11 01 	sts	0x0111, r1
		RC_Timeout = 0;					// Reset 500ms failsafe timeout
    43d6:	10 92 0d 01 	sts	0x010D, r1
    43da:	10 92 0c 01 	sts	0x010C, r1
					
		// Flag end-of-failsafe if we were in failsafe.
		// Also, clear failsafe.
		if (Flight_flags & (1 << FailsafeFlag))
    43de:	80 91 1c 01 	lds	r24, 0x011C
    43e2:	82 ff       	sbrs	r24, 2
    43e4:	0a c0       	rjmp	.+20     	; 0x43fa <__vector_7+0x1ca>
		{
			Alarm_flags |= (1 << FAILSAFE_ENDED);
    43e6:	80 91 1b 01 	lds	r24, 0x011B
    43ea:	80 62       	ori	r24, 0x20	; 32
    43ec:	80 93 1b 01 	sts	0x011B, r24
			Flight_flags &= ~(1 << FailsafeFlag);
    43f0:	80 91 1c 01 	lds	r24, 0x011C
    43f4:	8b 7f       	andi	r24, 0xFB	; 251
    43f6:	80 93 1c 01 	sts	0x011C, r24
		}
					
		Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    43fa:	80 91 1c 01 	lds	r24, 0x011C
    43fe:	8f 7d       	andi	r24, 0xDF	; 223
    4400:	80 93 1c 01 	sts	0x011C, r24
	}
} // ISR(INT2_vect)
    4404:	ff 91       	pop	r31
    4406:	ef 91       	pop	r30
    4408:	bf 91       	pop	r27
    440a:	af 91       	pop	r26
    440c:	9f 91       	pop	r25
    440e:	8f 91       	pop	r24
    4410:	7f 91       	pop	r23
    4412:	6f 91       	pop	r22
    4414:	5f 91       	pop	r21
    4416:	4f 91       	pop	r20
    4418:	3f 91       	pop	r19
    441a:	2f 91       	pop	r18
    441c:	0f 90       	pop	r0
    441e:	0f be       	out	0x3f, r0	; 63
    4420:	0f 90       	pop	r0
    4422:	1f 90       	pop	r1
    4424:	18 95       	reti

00004426 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    4426:	1f 92       	push	r1
    4428:	0f 92       	push	r0
    442a:	0f b6       	in	r0, 0x3f	; 63
    442c:	0f 92       	push	r0
    442e:	11 24       	eor	r1, r1
    4430:	0f 93       	push	r16
    4432:	1f 93       	push	r17
    4434:	2f 93       	push	r18
    4436:	3f 93       	push	r19
    4438:	4f 93       	push	r20
    443a:	5f 93       	push	r21
    443c:	6f 93       	push	r22
    443e:	7f 93       	push	r23
    4440:	8f 93       	push	r24
    4442:	9f 93       	push	r25
    4444:	af 93       	push	r26
    4446:	bf 93       	push	r27
    4448:	cf 93       	push	r28
    444a:	df 93       	push	r29
    444c:	ef 93       	push	r30
    444e:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read error flags first
	temp =  UCSR0A;
    4450:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    4454:	98 2f       	mov	r25, r24
    4456:	94 71       	andi	r25, 0x14	; 20
    4458:	21 f4       	brne	.+8      	; 0x4462 <__vector_20+0x3c>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    445a:	83 ff       	sbrs	r24, 3
    445c:	05 c0       	rjmp	.+10     	; 0x4468 <__vector_20+0x42>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    445e:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;				
    4462:	80 91 c6 00 	lds	r24, 0x00C6
    4466:	50 c4       	rjmp	.+2208   	; 0x4d08 <__vector_20+0x8e2>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    4468:	c0 91 c6 00 	lds	r28, 0x00C6
			
		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    446c:	0e 94 10 21 	call	0x4220	; 0x4220 <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
		if (Save_TCNT1 < PPMSyncStart)
    4470:	20 91 a0 07 	lds	r18, 0x07A0
    4474:	30 91 a1 07 	lds	r19, 0x07A1
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    4478:	20 91 a0 07 	lds	r18, 0x07A0
    447c:	30 91 a1 07 	lds	r19, 0x07A1
    4480:	ac 01       	movw	r20, r24
    4482:	42 1b       	sub	r20, r18
    4484:	53 0b       	sbc	r21, r19
		}

		// Handle start of new packet if gap between serial data has been more than 1.0ms
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    4486:	45 3c       	cpi	r20, 0xC5	; 197
    4488:	59 40       	sbci	r21, 0x09	; 9
    448a:	08 f4       	brcc	.+2      	; 0x448e <__vector_20+0x68>
    448c:	4f c0       	rjmp	.+158    	; 0x452c <__vector_20+0x106>
		{
			if (int_count < MININTCOUNT)
    448e:	20 91 59 07 	lds	r18, 0x0759
    4492:	2a 30       	cpi	r18, 0x0A	; 10
    4494:	30 f4       	brcc	.+12     	; 0x44a2 <__vector_20+0x7c>
			{
				// increment the serial interrupt counter
				int_count++;		
    4496:	20 91 59 07 	lds	r18, 0x0759
    449a:	2f 5f       	subi	r18, 0xFF	; 255
    449c:	20 93 59 07 	sts	0x0759, r18
    44a0:	05 c0       	rjmp	.+10     	; 0x44ac <__vector_20+0x86>
			}
			// Flag that a valid number of serial interrupts has occurred.
			else
			{
				// Set RxStarted flag
				Flight_flags |= (1 << RxStarted);
    44a2:	20 91 1c 01 	lds	r18, 0x011C
    44a6:	20 64       	ori	r18, 0x40	; 64
    44a8:	20 93 1c 01 	sts	0x011C, r18
			}

			// FramePeriod only needs calculation before Rx has officially started
			if (!(Flight_flags & (1 << RxStarted)))
    44ac:	20 91 1c 01 	lds	r18, 0x011C
    44b0:	26 fd       	sbrc	r18, 6
    44b2:	2a c0       	rjmp	.+84     	; 0x4508 <__vector_20+0xe2>
			{
				// Measure period from last FrameStart
				if (Save_TCNT1 < FrameStart)
    44b4:	20 91 80 07 	lds	r18, 0x0780
    44b8:	30 91 81 07 	lds	r19, 0x0781
    44bc:	82 17       	cp	r24, r18
    44be:	93 07       	cpc	r25, r19
    44c0:	88 f4       	brcc	.+34     	; 0x44e4 <__vector_20+0xbe>
				{
					FramePeriod = (65536 - FrameStart + Save_TCNT1);
    44c2:	20 91 80 07 	lds	r18, 0x0780
    44c6:	30 91 81 07 	lds	r19, 0x0781
    44ca:	40 e0       	ldi	r20, 0x00	; 0
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	61 e0       	ldi	r22, 0x01	; 1
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	42 1b       	sub	r20, r18
    44d4:	53 0b       	sbc	r21, r19
    44d6:	61 09       	sbc	r22, r1
    44d8:	71 09       	sbc	r23, r1
    44da:	48 0f       	add	r20, r24
    44dc:	59 1f       	adc	r21, r25
    44de:	61 1d       	adc	r22, r1
    44e0:	71 1d       	adc	r23, r1
    44e2:	0a c0       	rjmp	.+20     	; 0x44f8 <__vector_20+0xd2>
				}
				else
				{
					FramePeriod = (Save_TCNT1 - FrameStart);
    44e4:	40 91 80 07 	lds	r20, 0x0780
    44e8:	50 91 81 07 	lds	r21, 0x0781
    44ec:	dc 01       	movw	r26, r24
    44ee:	a4 1b       	sub	r26, r20
    44f0:	b5 0b       	sbc	r27, r21
    44f2:	ad 01       	movw	r20, r26
    44f4:	60 e0       	ldi	r22, 0x00	; 0
    44f6:	70 e0       	ldi	r23, 0x00	; 0
    44f8:	40 93 99 07 	sts	0x0799, r20
    44fc:	50 93 9a 07 	sts	0x079A, r21
    4500:	60 93 9b 07 	sts	0x079B, r22
    4504:	70 93 9c 07 	sts	0x079C, r23
				}
			}
			
			// Reset variables
			rcindex = 0;
    4508:	10 92 58 07 	sts	0x0758, r1
			bytecount = 0;
    450c:	10 92 7e 07 	sts	0x077E, r1
			ch_num = 0;
    4510:	10 92 9f 07 	sts	0x079F, r1
			checksum = 0;
    4514:	10 92 a5 07 	sts	0x07A5, r1
    4518:	10 92 a4 07 	sts	0x07A4, r1
			chanmask16 = 0;
    451c:	10 92 98 07 	sts	0x0798, r1
    4520:	10 92 97 07 	sts	0x0797, r1
		
			// Save the timestamp for the start of data so that
			// we can do a proper full frame rate measurement
			FrameStart = Save_TCNT1;
    4524:	90 93 81 07 	sts	0x0781, r25
    4528:	80 93 80 07 	sts	0x0780, r24
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    452c:	90 93 a1 07 	sts	0x07A1, r25
    4530:	80 93 a0 07 	sts	0x07A0, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    4534:	80 91 58 07 	lds	r24, 0x0758
    4538:	86 32       	cpi	r24, 0x26	; 38
    453a:	50 f4       	brcc	.+20     	; 0x4550 <__vector_20+0x12a>
		{
			sBuffer[rcindex++] = temp;		
    453c:	e0 91 58 07 	lds	r30, 0x0758
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	8e 0f       	add	r24, r30
    4544:	80 93 58 07 	sts	0x0758, r24
    4548:	f0 e0       	ldi	r31, 0x00	; 0
    454a:	eb 5b       	subi	r30, 0xBB	; 187
    454c:	fa 4f       	sbci	r31, 0xFA	; 250
    454e:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxModeIn == XTREME)
    4550:	80 91 0b 06 	lds	r24, 0x060B
    4554:	83 30       	cpi	r24, 0x03	; 3
    4556:	09 f0       	breq	.+2      	; 0x455a <__vector_20+0x134>
    4558:	70 c1       	rjmp	.+736    	; 0x483a <__vector_20+0x414>
		{
			// Look at flag byte to see if the data is ok
			if (bytecount == 0)
    455a:	80 91 7e 07 	lds	r24, 0x077E
    455e:	81 11       	cpse	r24, r1
    4560:	0f c0       	rjmp	.+30     	; 0x4580 <__vector_20+0x15a>
			{
				// Save a copy of the flags for retransmission
				Xtreme_Flags = temp;
    4562:	c0 93 7f 07 	sts	0x077F, r28
			
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    4566:	8c 2f       	mov	r24, r28
    4568:	80 7e       	andi	r24, 0xE0	; 224
    456a:	51 f0       	breq	.+20     	; 0x4580 <__vector_20+0x15a>
				{
					checksum +=	0x55;
    456c:	80 91 a4 07 	lds	r24, 0x07A4
    4570:	90 91 a5 07 	lds	r25, 0x07A5
    4574:	8b 5a       	subi	r24, 0xAB	; 171
    4576:	9f 4f       	sbci	r25, 0xFF	; 255
    4578:	90 93 a5 07 	sts	0x07A5, r25
    457c:	80 93 a4 07 	sts	0x07A4, r24
				}
			}
	
			// Save RSS byte
			if (bytecount == 1)
    4580:	80 91 7e 07 	lds	r24, 0x077E
    4584:	81 30       	cpi	r24, 0x01	; 1
    4586:	11 f4       	brne	.+4      	; 0x458c <__vector_20+0x166>
			{
				Xtreme_RSS = temp;
    4588:	c0 93 83 07 	sts	0x0783, r28
			}
		
			// Get MSB of mask byte
			if (bytecount == 2)
    458c:	80 91 7e 07 	lds	r24, 0x077E
    4590:	2c 2f       	mov	r18, r28
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	82 30       	cpi	r24, 0x02	; 2
    4596:	21 f4       	brne	.+8      	; 0x45a0 <__vector_20+0x17a>
			{
				chanmask16 = temp;
    4598:	30 93 98 07 	sts	0x0798, r19
    459c:	20 93 97 07 	sts	0x0797, r18
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    45a0:	80 91 7e 07 	lds	r24, 0x077E
    45a4:	83 30       	cpi	r24, 0x03	; 3
    45a6:	b9 f0       	breq	.+46     	; 0x45d6 <__vector_20+0x1b0>
					temp16 &= (temp16 - 1);
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    45a8:	80 91 9f 07 	lds	r24, 0x079F
    45ac:	40 91 7e 07 	lds	r20, 0x077E
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	88 0f       	add	r24, r24
    45b4:	99 1f       	adc	r25, r25
    45b6:	03 96       	adiw	r24, 0x03	; 3
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	84 17       	cp	r24, r20
    45bc:	95 07       	cpc	r25, r21
    45be:	d4 f1       	brlt	.+116    	; 0x4634 <__vector_20+0x20e>
			{
				checksum +=	temp;
    45c0:	80 91 a4 07 	lds	r24, 0x07A4
    45c4:	90 91 a5 07 	lds	r25, 0x07A5
    45c8:	82 0f       	add	r24, r18
    45ca:	93 1f       	adc	r25, r19
    45cc:	90 93 a5 07 	sts	0x07A5, r25
    45d0:	80 93 a4 07 	sts	0x07A4, r24
    45d4:	94 c3       	rjmp	.+1832   	; 0x4cfe <__vector_20+0x8d8>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 = chanmask16 << 8;	// Form high byte of mask
    45d6:	80 91 97 07 	lds	r24, 0x0797
    45da:	90 91 98 07 	lds	r25, 0x0798
    45de:	98 2f       	mov	r25, r24
    45e0:	88 27       	eor	r24, r24
    45e2:	90 93 98 07 	sts	0x0798, r25
    45e6:	80 93 97 07 	sts	0x0797, r24
				chanmask16 |= (uint8_t)temp;		// Low byte of Mask
    45ea:	80 91 97 07 	lds	r24, 0x0797
    45ee:	90 91 98 07 	lds	r25, 0x0798
    45f2:	82 2b       	or	r24, r18
    45f4:	93 2b       	or	r25, r19
    45f6:	90 93 98 07 	sts	0x0798, r25
    45fa:	80 93 97 07 	sts	0x0797, r24
			
				temp16 = chanmask16;			// Need to keep a copy of chanmask16 to work of number of channels
    45fe:	80 91 97 07 	lds	r24, 0x0797
    4602:	90 91 98 07 	lds	r25, 0x0798
				Xtreme_Chanmask = chanmask16;	// Also need to save as a global for retransmission (uint16)
    4606:	40 91 97 07 	lds	r20, 0x0797
    460a:	50 91 98 07 	lds	r21, 0x0798
    460e:	50 93 7d 07 	sts	0x077D, r21
    4612:	40 93 7c 07 	sts	0x077C, r20

				// Count bits set (number of active channels)	
				// ch_num will contain the number of channels found			 
				for (ch_num = 0; temp16; ch_num++)
    4616:	10 92 9f 07 	sts	0x079F, r1
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	29 f2       	breq	.-118    	; 0x45a8 <__vector_20+0x182>
				{
					temp16 &= (temp16 - 1);
    461e:	ac 01       	movw	r20, r24
    4620:	41 50       	subi	r20, 0x01	; 1
    4622:	51 09       	sbc	r21, r1
    4624:	84 23       	and	r24, r20
    4626:	95 23       	and	r25, r21
				temp16 = chanmask16;			// Need to keep a copy of chanmask16 to work of number of channels
				Xtreme_Chanmask = chanmask16;	// Also need to save as a global for retransmission (uint16)

				// Count bits set (number of active channels)	
				// ch_num will contain the number of channels found			 
				for (ch_num = 0; temp16; ch_num++)
    4628:	40 91 9f 07 	lds	r20, 0x079F
    462c:	4f 5f       	subi	r20, 0xFF	; 255
    462e:	40 93 9f 07 	sts	0x079F, r20
    4632:	f3 cf       	rjmp	.-26     	; 0x461a <__vector_20+0x1f4>
	
			// Process data when whole packet received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    4634:	80 91 a4 07 	lds	r24, 0x07A4
    4638:	90 91 a5 07 	lds	r25, 0x07A5
    463c:	99 27       	eor	r25, r25
    463e:	90 93 a5 07 	sts	0x07A5, r25
    4642:	80 93 a4 07 	sts	0x07A4, r24

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    4646:	80 91 a4 07 	lds	r24, 0x07A4
    464a:	90 91 a5 07 	lds	r25, 0x07A5
    464e:	82 17       	cp	r24, r18
    4650:	93 07       	cpc	r25, r19
    4652:	39 f0       	breq	.+14     	; 0x4662 <__vector_20+0x23c>
				{
					ch_num = 0;
    4654:	10 92 9f 07 	sts	0x079F, r1
					checksum = 0;
    4658:	10 92 a5 07 	sts	0x07A5, r1
    465c:	10 92 a4 07 	sts	0x07A4, r1
    4660:	ed c1       	rjmp	.+986    	; 0x4a3c <__vector_20+0x616>
				}
			
				// Checksum OK
				else
				{
					LED1 = 0;
    4662:	2b 98       	cbi	0x05, 3	; 5
				
					// RC sync established
					Interrupted = true;	
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	80 93 6a 07 	sts	0x076A, r24
			
					// Reset frame timers
					FrameDrop_Output_Rate = 0;
    466a:	10 92 12 01 	sts	0x0112, r1
    466e:	10 92 13 01 	sts	0x0113, r1
    4672:	10 92 14 01 	sts	0x0114, r1
    4676:	10 92 15 01 	sts	0x0115, r1
					Failsafe_Output_Rate = 0;
    467a:	10 92 0e 01 	sts	0x010E, r1
    467e:	10 92 0f 01 	sts	0x010F, r1
    4682:	10 92 10 01 	sts	0x0110, r1
    4686:	10 92 11 01 	sts	0x0111, r1
					RC_Timeout = 0;					// Reset 500ms failsafe timeout
    468a:	10 92 0d 01 	sts	0x010D, r1
    468e:	10 92 0c 01 	sts	0x010C, r1
					
					// Flag end-of-failsafe if we were in failsafe.
					// Also, clear failsafe.
					if (Flight_flags & (1 << FailsafeFlag))
    4692:	80 91 1c 01 	lds	r24, 0x011C
    4696:	82 ff       	sbrs	r24, 2
    4698:	0a c0       	rjmp	.+20     	; 0x46ae <__vector_20+0x288>
					{
						Alarm_flags |= (1 << FAILSAFE_ENDED);
    469a:	80 91 1b 01 	lds	r24, 0x011B
    469e:	80 62       	ori	r24, 0x20	; 32
    46a0:	80 93 1b 01 	sts	0x011B, r24
						Flight_flags &= ~(1 << FailsafeFlag);
    46a4:	80 91 1c 01 	lds	r24, 0x011C
    46a8:	8b 7f       	andi	r24, 0xFB	; 251
    46aa:	80 93 1c 01 	sts	0x011C, r24
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    46ae:	80 91 1c 01 	lds	r24, 0x011C
    46b2:	8f 7d       	andi	r24, 0xDF	; 223
    46b4:	80 93 1c 01 	sts	0x011C, r24
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
					
						if (Config.RxModeOut == SPEKTRUM)
    46b8:	c0 91 0c 06 	lds	r28, 0x060C
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	90 e0       	ldi	r25, 0x00	; 0
						{
							ExtChannel[j] = 0xFFFF;
						}
						else if (Config.RxModeOut == SBUS)
						{
							ExtChannel[j] = 0x400;
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	34 e0       	ldi	r19, 0x04	; 4
					{
						RxChannel[j] = 0;
					
						if (Config.RxModeOut == SPEKTRUM)
						{
							ExtChannel[j] = 0xFFFF;
    46c4:	4f ef       	ldi	r20, 0xFF	; 255
    46c6:	5f ef       	ldi	r21, 0xFF	; 255
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
				
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
    46c8:	fc 01       	movw	r30, r24
    46ca:	ee 0f       	add	r30, r30
    46cc:	ff 1f       	adc	r31, r31
    46ce:	df 01       	movw	r26, r30
    46d0:	a6 5a       	subi	r26, 0xA6	; 166
    46d2:	b8 4f       	sbci	r27, 0xF8	; 248
    46d4:	11 96       	adiw	r26, 0x01	; 1
    46d6:	1c 92       	st	X, r1
    46d8:	1e 92       	st	-X, r1
    46da:	e5 59       	subi	r30, 0x95	; 149
    46dc:	f8 4f       	sbci	r31, 0xF8	; 248
					
						if (Config.RxModeOut == SPEKTRUM)
    46de:	c2 30       	cpi	r28, 0x02	; 2
    46e0:	19 f4       	brne	.+6      	; 0x46e8 <__vector_20+0x2c2>
						{
							ExtChannel[j] = 0xFFFF;
    46e2:	51 83       	std	Z+1, r21	; 0x01
    46e4:	40 83       	st	Z, r20
    46e6:	07 c0       	rjmp	.+14     	; 0x46f6 <__vector_20+0x2d0>
						}
						else if (Config.RxModeOut == SBUS)
    46e8:	c1 30       	cpi	r28, 0x01	; 1
    46ea:	19 f4       	brne	.+6      	; 0x46f2 <__vector_20+0x2cc>
						{
							ExtChannel[j] = 0x400;
    46ec:	31 83       	std	Z+1, r19	; 0x01
    46ee:	20 83       	st	Z, r18
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <__vector_20+0x2d0>
						}
						else
						{
							ExtChannel[j] = 0;
    46f2:	11 82       	std	Z+1, r1	; 0x01
    46f4:	10 82       	st	Z, r1
    46f6:	01 96       	adiw	r24, 0x01	; 1
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
				
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    46f8:	88 30       	cpi	r24, 0x08	; 8
    46fa:	91 05       	cpc	r25, r1
    46fc:	29 f7       	brne	.-54     	; 0x46c8 <__vector_20+0x2a2>
    46fe:	28 ef       	ldi	r18, 0xF8	; 248
    4700:	3f ef       	ldi	r19, 0xFF	; 255
    4702:	d4 e0       	ldi	r29, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    4704:	61 e0       	ldi	r22, 0x01	; 1
    4706:	70 e0       	ldi	r23, 0x00	; 0
    4708:	40 91 97 07 	lds	r20, 0x0797
    470c:	50 91 98 07 	lds	r21, 0x0798
    4710:	d9 01       	movw	r26, r18
    4712:	18 96       	adiw	r26, 0x08	; 8
    4714:	cb 01       	movw	r24, r22
    4716:	0a 2e       	mov	r0, r26
    4718:	02 c0       	rjmp	.+4      	; 0x471e <__vector_20+0x2f8>
    471a:	88 0f       	add	r24, r24
    471c:	99 1f       	adc	r25, r25
    471e:	0a 94       	dec	r0
    4720:	e2 f7       	brpl	.-8      	; 0x471a <__vector_20+0x2f4>
    4722:	84 23       	and	r24, r20
    4724:	95 23       	and	r25, r21
    4726:	89 2b       	or	r24, r25
    4728:	09 f4       	brne	.+2      	; 0x472c <__vector_20+0x306>
    472a:	80 c0       	rjmp	.+256    	; 0x482c <__vector_20+0x406>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    472c:	ed 2f       	mov	r30, r29
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	eb 5b       	subi	r30, 0xBB	; 187
    4732:	fa 4f       	sbci	r31, 0xFA	; 250
    4734:	80 81       	ld	r24, Z
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	98 2f       	mov	r25, r24
    473a:	88 27       	eor	r24, r24
    473c:	41 81       	ldd	r20, Z+1	; 0x01
    473e:	84 0f       	add	r24, r20
    4740:	91 1d       	adc	r25, r1
    4742:	48 e0       	ldi	r20, 0x08	; 8
    4744:	42 0f       	add	r20, r18

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    4746:	48 30       	cpi	r20, 0x08	; 8
    4748:	70 f4       	brcc	.+28     	; 0x4766 <__vector_20+0x340>
								// Convert to system values
								itemp16 = temp16;
								itemp16 -= 1500;							// Remove Xtreme offset (+/-500)		
							
								// Multiply by Xtreme-to-System factor (x2.0)
								itemp16 = (itemp16 << 1);
    474a:	88 0f       	add	r24, r24
    474c:	99 1f       	adc	r25, r25
							
								// Add offset
								itemp16 += 3750;							// Add System offset
    474e:	82 51       	subi	r24, 0x12	; 18
    4750:	9d 4f       	sbci	r25, 0xFD	; 253
    4752:	f9 01       	movw	r30, r18
    4754:	ee 53       	subi	r30, 0x3E	; 62
    4756:	fa 4f       	sbci	r31, 0xFA	; 250
								temp16 = itemp16;		
																
								RxChannel[Config.ChannelOrder[j]] = temp16;
    4758:	e1 85       	ldd	r30, Z+9	; 0x09
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	ee 0f       	add	r30, r30
    475e:	ff 1f       	adc	r31, r31
    4760:	e6 5a       	subi	r30, 0xA6	; 166
    4762:	f8 4f       	sbci	r31, 0xF8	; 248
    4764:	5e c0       	rjmp	.+188    	; 0x4822 <__vector_20+0x3fc>
    4766:	f9 01       	movw	r30, r18
    4768:	ee 0f       	add	r30, r30
    476a:	ff 1f       	adc	r31, r31
						
							// Save any extra channels in extra buffer in the format suitable for retransmission
							else if (j < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
							{
								// Extreme to Satellite
								if (Config.RxModeOut == SPEKTRUM)
    476c:	c2 30       	cpi	r28, 0x02	; 2
    476e:	b1 f5       	brne	.+108    	; 0x47dc <__vector_20+0x3b6>
								{
									// 11 bit data (1000~2000 -> 0~2047)
									itemp16 = temp16;
									itemp16 -= 1500;							// Remove Xtreme offset (+/-500)
    4770:	ac 01       	movw	r20, r24
    4772:	4c 5d       	subi	r20, 0xDC	; 220
    4774:	55 40       	sbci	r21, 0x05	; 5
						
									//  867.5/50 = 1.735 (1.7344)
									itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 6);
    4776:	ca 01       	movw	r24, r20
    4778:	95 95       	asr	r25
    477a:	87 95       	ror	r24
    477c:	95 95       	asr	r25
    477e:	87 95       	ror	r24
    4780:	84 0f       	add	r24, r20
    4782:	95 1f       	adc	r25, r21
    4784:	8a 01       	movw	r16, r20
    4786:	15 95       	asr	r17
    4788:	07 95       	ror	r16
    478a:	15 95       	asr	r17
    478c:	07 95       	ror	r16
    478e:	15 95       	asr	r17
    4790:	07 95       	ror	r16
    4792:	80 0f       	add	r24, r16
    4794:	91 1f       	adc	r25, r17
    4796:	8a 01       	movw	r16, r20
    4798:	68 94       	set
    479a:	13 f8       	bld	r1, 3
    479c:	15 95       	asr	r17
    479e:	07 95       	ror	r16
    47a0:	16 94       	lsr	r1
    47a2:	e1 f7       	brne	.-8      	; 0x479c <__vector_20+0x376>
    47a4:	80 0f       	add	r24, r16
    47a6:	91 1f       	adc	r25, r17
    47a8:	8a 01       	movw	r16, r20
    47aa:	68 94       	set
    47ac:	14 f8       	bld	r1, 4
    47ae:	15 95       	asr	r17
    47b0:	07 95       	ror	r16
    47b2:	16 94       	lsr	r1
    47b4:	e1 f7       	brne	.-8      	; 0x47ae <__vector_20+0x388>
    47b6:	80 0f       	add	r24, r16
    47b8:	91 1f       	adc	r25, r17
    47ba:	16 e0       	ldi	r17, 0x06	; 6
    47bc:	55 95       	asr	r21
    47be:	47 95       	ror	r20
    47c0:	1a 95       	dec	r17
    47c2:	e1 f7       	brne	.-8      	; 0x47bc <__vector_20+0x396>
    47c4:	84 0f       	add	r24, r20
    47c6:	95 1f       	adc	r25, r21
						
									// Add offset
									itemp16 += 1024;							// Add Satellite offset (+/-1024)
    47c8:	9c 5f       	subi	r25, 0xFC	; 252
									temp16 = itemp16;
						
									temp16 &= 0x7FF;							// Mask off data bits
    47ca:	97 70       	andi	r25, 0x07	; 7
									temp16 |= (j << 11);						// Shift channel number up to the correct spot
    47cc:	ba 2f       	mov	r27, r26
    47ce:	aa 27       	eor	r26, r26
    47d0:	bb 0f       	add	r27, r27
    47d2:	bb 0f       	add	r27, r27
    47d4:	bb 0f       	add	r27, r27
    47d6:	8a 2b       	or	r24, r26
    47d8:	9b 2b       	or	r25, r27
    47da:	21 c0       	rjmp	.+66     	; 0x481e <__vector_20+0x3f8>
									// Put back into buffer
									ExtChannel[j - MAX_RC_CHANNELS] = temp16;
								}
							
								// Extreme to S.Bus
								else if (Config.RxModeOut == SBUS)
    47dc:	c1 30       	cpi	r28, 0x01	; 1
    47de:	f9 f4       	brne	.+62     	; 0x481e <__vector_20+0x3f8>
								{
									// 11 bit data (1000~2000 -> 0~2047) 
									itemp16 = temp16;
									itemp16 -= 1500;							// Remove Xtreme offset (+/-500)
    47e0:	ac 01       	movw	r20, r24
    47e2:	4c 5d       	subi	r20, 0xDC	; 220
    47e4:	55 40       	sbci	r21, 0x05	; 5
								
									// 800/500 = 1.6 (1.6016)
									itemp16 = itemp16 + (itemp16 >> 1) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7);
    47e6:	ca 01       	movw	r24, r20
    47e8:	95 95       	asr	r25
    47ea:	87 95       	ror	r24
    47ec:	84 0f       	add	r24, r20
    47ee:	95 1f       	adc	r25, r21
    47f0:	da 01       	movw	r26, r20
    47f2:	14 e0       	ldi	r17, 0x04	; 4
    47f4:	b5 95       	asr	r27
    47f6:	a7 95       	ror	r26
    47f8:	1a 95       	dec	r17
    47fa:	e1 f7       	brne	.-8      	; 0x47f4 <__vector_20+0x3ce>
    47fc:	8a 0f       	add	r24, r26
    47fe:	9b 1f       	adc	r25, r27
    4800:	da 01       	movw	r26, r20
    4802:	05 e0       	ldi	r16, 0x05	; 5
    4804:	b5 95       	asr	r27
    4806:	a7 95       	ror	r26
    4808:	0a 95       	dec	r16
    480a:	e1 f7       	brne	.-8      	; 0x4804 <__vector_20+0x3de>
    480c:	8a 0f       	add	r24, r26
    480e:	9b 1f       	adc	r25, r27
    4810:	44 0f       	add	r20, r20
    4812:	45 2f       	mov	r20, r21
    4814:	44 1f       	adc	r20, r20
    4816:	55 0b       	sbc	r21, r21
    4818:	84 0f       	add	r24, r20
    481a:	95 1f       	adc	r25, r21
								
									// Add offset
									itemp16 += 1024;							// Add S.Bus offset (+/-1024)
    481c:	9c 5f       	subi	r25, 0xFC	; 252
								}
							
								// Xtreme to Xtreme
								else
								{
									ExtChannel[j - MAX_RC_CHANNELS] = temp16;							
    481e:	e5 59       	subi	r30, 0x95	; 149
    4820:	f8 4f       	sbci	r31, 0xF8	; 248
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	80 83       	st	Z, r24
								}
							}

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    4826:	d6 32       	cpi	r29, 0x26	; 38
    4828:	08 f4       	brcc	.+2      	; 0x482c <__vector_20+0x406>
							{
								sindex += 2;
    482a:	de 5f       	subi	r29, 0xFE	; 254
    482c:	2f 5f       	subi	r18, 0xFF	; 255
    482e:	3f 4f       	sbci	r19, 0xFF	; 255
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    4830:	28 30       	cpi	r18, 0x08	; 8
    4832:	31 05       	cpc	r19, r1
    4834:	09 f0       	breq	.+2      	; 0x4838 <__vector_20+0x412>
    4836:	68 cf       	rjmp	.-304    	; 0x4708 <__vector_20+0x2e2>
    4838:	62 c2       	rjmp	.+1220   	; 0x4cfe <__vector_20+0x8d8>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		else if (Config.RxModeIn == SBUS)
    483a:	81 30       	cpi	r24, 0x01	; 1
    483c:	09 f0       	breq	.+2      	; 0x4840 <__vector_20+0x41a>
    483e:	00 c1       	rjmp	.+512    	; 0x4a40 <__vector_20+0x61a>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    4840:	90 91 7e 07 	lds	r25, 0x077E
    4844:	98 31       	cpi	r25, 0x18	; 24
    4846:	09 f0       	breq	.+2      	; 0x484a <__vector_20+0x424>
    4848:	5a c2       	rjmp	.+1204   	; 0x4cfe <__vector_20+0x8d8>
			{
				// Save flags
				SBUS_Flags = sBuffer[23];
    484a:	90 91 5c 05 	lds	r25, 0x055C
    484e:	90 93 44 01 	sts	0x0144, r25
			
				// If frame lost, ignore packet
				if ((sBuffer[23] & 0x20) == 0)
    4852:	95 fd       	sbrc	r25, 5
    4854:	f3 c0       	rjmp	.+486    	; 0x4a3c <__vector_20+0x616>
				{
					LED1 = 0;
    4856:	2b 98       	cbi	0x05, 3	; 5
				
					// RC sync established
					Interrupted = true;
    4858:	80 93 6a 07 	sts	0x076A, r24
			
					// Reset frame timers
					FrameDrop_Output_Rate = 0;
    485c:	10 92 12 01 	sts	0x0112, r1
    4860:	10 92 13 01 	sts	0x0113, r1
    4864:	10 92 14 01 	sts	0x0114, r1
    4868:	10 92 15 01 	sts	0x0115, r1
					Failsafe_Output_Rate = 0;
    486c:	10 92 0e 01 	sts	0x010E, r1
    4870:	10 92 0f 01 	sts	0x010F, r1
    4874:	10 92 10 01 	sts	0x0110, r1
    4878:	10 92 11 01 	sts	0x0111, r1
					RC_Timeout = 0;					// Reset 500ms failsafe timeout
    487c:	10 92 0d 01 	sts	0x010D, r1
    4880:	10 92 0c 01 	sts	0x010C, r1
					
					// Flag end-of-failsafe if we were in failsafe.
					// Also, clear failsafe.
					if (Flight_flags & (1 << FailsafeFlag))
    4884:	80 91 1c 01 	lds	r24, 0x011C
    4888:	82 ff       	sbrs	r24, 2
    488a:	0a c0       	rjmp	.+20     	; 0x48a0 <__vector_20+0x47a>
					{
						Alarm_flags |= (1 << FAILSAFE_ENDED);
    488c:	80 91 1b 01 	lds	r24, 0x011B
    4890:	80 62       	ori	r24, 0x20	; 32
    4892:	80 93 1b 01 	sts	0x011B, r24
						Flight_flags &= ~(1 << FailsafeFlag);
    4896:	80 91 1c 01 	lds	r24, 0x011C
    489a:	8b 7f       	andi	r24, 0xFB	; 251
    489c:	80 93 1c 01 	sts	0x011C, r24
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    48a0:	80 91 1c 01 	lds	r24, 0x011C
    48a4:	8f 7d       	andi	r24, 0xDF	; 223
    48a6:	80 93 1c 01 	sts	0x011C, r24
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	90 e0       	ldi	r25, 0x00	; 0
					
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
    48ae:	9c 01       	movw	r18, r24
    48b0:	22 0f       	add	r18, r18
    48b2:	33 1f       	adc	r19, r19
    48b4:	f9 01       	movw	r30, r18
    48b6:	e6 5a       	subi	r30, 0xA6	; 166
    48b8:	f8 4f       	sbci	r31, 0xF8	; 248
    48ba:	11 82       	std	Z+1, r1	; 0x01
    48bc:	10 82       	st	Z, r1
						ExtChannel[j] = 0;
    48be:	f9 01       	movw	r30, r18
    48c0:	e5 59       	subi	r30, 0x95	; 149
    48c2:	f8 4f       	sbci	r31, 0xF8	; 248
    48c4:	11 82       	std	Z+1, r1	; 0x01
    48c6:	10 82       	st	Z, r1
    48c8:	01 96       	adiw	r24, 0x01	; 1
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
					
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    48ca:	88 30       	cpi	r24, 0x08	; 8
    48cc:	91 05       	cpc	r25, r1
    48ce:	79 f7       	brne	.-34     	; 0x48ae <__vector_20+0x488>
    48d0:	b0 eb       	ldi	r27, 0xB0	; 176
    48d2:	70 e0       	ldi	r23, 0x00	; 0
    48d4:	60 e0       	ldi	r22, 0x00	; 0
    48d6:	a0 e0       	ldi	r26, 0x00	; 0
    48d8:	c1 e0       	ldi	r28, 0x01	; 1
								RxChannel[Config.ChannelOrder[chan_shift]] |= (1 << data_mask); // RxChannel is 16 bits							
							}
							// Save any extra channels in extra buffer
							else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
							{
								ExtChannel[chan_shift - MAX_RC_CHANNELS] |= (1 << data_mask);							
    48da:	21 e0       	ldi	r18, 0x01	; 1
    48dc:	30 e0       	ldi	r19, 0x00	; 0

					// Deconstruct S-Bus data
					// 16 channels * 11 bits = 176 bits
					for (j = 0; j < 176; j++)
					{
						if (sBuffer[sindex] & (1 << chan_mask))
    48de:	ec 2f       	mov	r30, r28
    48e0:	f0 e0       	ldi	r31, 0x00	; 0
    48e2:	eb 5b       	subi	r30, 0xBB	; 187
    48e4:	fa 4f       	sbci	r31, 0xFA	; 250
    48e6:	80 81       	ld	r24, Z
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	0a 2e       	mov	r0, r26
    48ec:	02 c0       	rjmp	.+4      	; 0x48f2 <__vector_20+0x4cc>
    48ee:	95 95       	asr	r25
    48f0:	87 95       	ror	r24
    48f2:	0a 94       	dec	r0
    48f4:	e2 f7       	brpl	.-8      	; 0x48ee <__vector_20+0x4c8>
    48f6:	80 ff       	sbrs	r24, 0
    48f8:	2b c0       	rjmp	.+86     	; 0x4950 <__vector_20+0x52a>
						{
							if (chan_shift < MAX_RC_CHANNELS)
    48fa:	68 30       	cpi	r22, 0x08	; 8
    48fc:	a0 f4       	brcc	.+40     	; 0x4926 <__vector_20+0x500>
							{
								// Place the RC data into the correct channel order for the transmitted system
								RxChannel[Config.ChannelOrder[chan_shift]] |= (1 << data_mask); // RxChannel is 16 bits							
    48fe:	e6 2f       	mov	r30, r22
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	ee 53       	subi	r30, 0x3E	; 62
    4904:	fa 4f       	sbci	r31, 0xFA	; 250
    4906:	e1 81       	ldd	r30, Z+1	; 0x01
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	ee 0f       	add	r30, r30
    490c:	ff 1f       	adc	r31, r31
    490e:	e6 5a       	subi	r30, 0xA6	; 166
    4910:	f8 4f       	sbci	r31, 0xF8	; 248
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	a9 01       	movw	r20, r18
    4918:	07 2e       	mov	r0, r23
    491a:	02 c0       	rjmp	.+4      	; 0x4920 <__vector_20+0x4fa>
    491c:	44 0f       	add	r20, r20
    491e:	55 1f       	adc	r21, r21
    4920:	0a 94       	dec	r0
    4922:	e2 f7       	brpl	.-8      	; 0x491c <__vector_20+0x4f6>
    4924:	11 c0       	rjmp	.+34     	; 0x4948 <__vector_20+0x522>
							}
							// Save any extra channels in extra buffer
							else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
    4926:	60 31       	cpi	r22, 0x10	; 16
    4928:	98 f4       	brcc	.+38     	; 0x4950 <__vector_20+0x52a>
							{
								ExtChannel[chan_shift - MAX_RC_CHANNELS] |= (1 << data_mask);							
    492a:	e6 2f       	mov	r30, r22
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	ee 0f       	add	r30, r30
    4930:	ff 1f       	adc	r31, r31
    4932:	e5 5a       	subi	r30, 0xA5	; 165
    4934:	f8 4f       	sbci	r31, 0xF8	; 248
    4936:	40 81       	ld	r20, Z
    4938:	51 81       	ldd	r21, Z+1	; 0x01
    493a:	c9 01       	movw	r24, r18
    493c:	07 2e       	mov	r0, r23
    493e:	02 c0       	rjmp	.+4      	; 0x4944 <__vector_20+0x51e>
    4940:	88 0f       	add	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	0a 94       	dec	r0
    4946:	e2 f7       	brpl	.-8      	; 0x4940 <__vector_20+0x51a>
    4948:	84 2b       	or	r24, r20
    494a:	95 2b       	or	r25, r21
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	80 83       	st	Z, r24
							}
						}

						chan_mask++;
    4950:	af 5f       	subi	r26, 0xFF	; 255
						data_mask++;
    4952:	7f 5f       	subi	r23, 0xFF	; 255

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
    4954:	a8 30       	cpi	r26, 0x08	; 8
    4956:	11 f4       	brne	.+4      	; 0x495c <__vector_20+0x536>
						{
							chan_mask =0;
							sindex++;
    4958:	cf 5f       	subi	r28, 0xFF	; 255
						data_mask++;

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
						{
							chan_mask =0;
    495a:	a0 e0       	ldi	r26, 0x00	; 0
							sindex++;
						}

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
    495c:	7b 30       	cpi	r23, 0x0B	; 11
    495e:	11 f4       	brne	.+4      	; 0x4964 <__vector_20+0x53e>
						{
							data_mask =0;
							chan_shift++;
    4960:	6f 5f       	subi	r22, 0xFF	; 255

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
						{
							data_mask =0;
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	b1 50       	subi	r27, 0x01	; 1
					// Start from second byte
					sindex = 1;

					// Deconstruct S-Bus data
					// 16 channels * 11 bits = 176 bits
					for (j = 0; j < 176; j++)
    4966:	09 f0       	breq	.+2      	; 0x496a <__vector_20+0x544>
    4968:	ba cf       	rjmp	.-140    	; 0x48de <__vector_20+0x4b8>
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	90 e0       	ldi	r25, 0x00	; 0

					// S.Bus to System
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract Futaba offset
						itemp16 = RxChannel[j] - 1024;	
    496e:	fc 01       	movw	r30, r24
    4970:	ee 0f       	add	r30, r30
    4972:	ff 1f       	adc	r31, r31
    4974:	e6 5a       	subi	r30, 0xA6	; 166
    4976:	f8 4f       	sbci	r31, 0xF8	; 248
    4978:	40 81       	ld	r20, Z
    497a:	51 81       	ldd	r21, Z+1	; 0x01
    497c:	54 50       	subi	r21, 0x04	; 4
					
						// Expand into OpenAero2 units x1.25 (1.25)	(1000/800)
						itemp16 = itemp16 + (itemp16 >> 2);
    497e:	9a 01       	movw	r18, r20
    4980:	35 95       	asr	r19
    4982:	27 95       	ror	r18
    4984:	35 95       	asr	r19
    4986:	27 95       	ror	r18
    4988:	24 0f       	add	r18, r20
    498a:	35 1f       	adc	r19, r21

						// Add back in OpenAero2 offset
						RxChannel[j] = itemp16 + 3750;				
    498c:	2a 55       	subi	r18, 0x5A	; 90
    498e:	31 4f       	sbci	r19, 0xF1	; 241
    4990:	31 83       	std	Z+1, r19	; 0x01
    4992:	20 83       	st	Z, r18
    4994:	01 96       	adiw	r24, 0x01	; 1
							chan_shift++;
						}
					}

					// S.Bus to System
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    4996:	88 30       	cpi	r24, 0x08	; 8
    4998:	91 05       	cpc	r25, r1
    499a:	49 f7       	brne	.-46     	; 0x496e <__vector_20+0x548>
				
					// Convert Extra channel info to the format suitable for retransmission
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// S.Bus to Satellite
						if (Config.RxModeOut == SPEKTRUM)
    499c:	a0 91 0c 06 	lds	r26, 0x060C
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	a2 30       	cpi	r26, 0x02	; 2
    49a6:	59 f5       	brne	.+86     	; 0x49fe <__vector_20+0x5d8>
						{
							// 11bit (Values = 0 to 2047), same as Satellite
							itemp16 = ExtChannel[j];
    49a8:	f9 01       	movw	r30, r18
    49aa:	ee 0f       	add	r30, r30
    49ac:	ff 1f       	adc	r31, r31
    49ae:	e5 59       	subi	r30, 0x95	; 149
    49b0:	f8 4f       	sbci	r31, 0xF8	; 248
    49b2:	40 81       	ld	r20, Z
    49b4:	51 81       	ldd	r21, Z+1	; 0x01
							itemp16 -= 1024;							// Subtract S.Bus offset (+/-1024)
    49b6:	54 50       	subi	r21, 0x04	; 4
						
							//  1.0844 (1.086) (867.5/800) 
							itemp16 = itemp16 + (itemp16 >> 4) + (itemp16 >> 6) + (itemp16 >> 7);
    49b8:	ca 01       	movw	r24, r20
    49ba:	c4 e0       	ldi	r28, 0x04	; 4
    49bc:	95 95       	asr	r25
    49be:	87 95       	ror	r24
    49c0:	ca 95       	dec	r28
    49c2:	e1 f7       	brne	.-8      	; 0x49bc <__vector_20+0x596>
    49c4:	84 0f       	add	r24, r20
    49c6:	95 1f       	adc	r25, r21
    49c8:	ba 01       	movw	r22, r20
    49ca:	d6 e0       	ldi	r29, 0x06	; 6
    49cc:	75 95       	asr	r23
    49ce:	67 95       	ror	r22
    49d0:	da 95       	dec	r29
    49d2:	e1 f7       	brne	.-8      	; 0x49cc <__vector_20+0x5a6>
    49d4:	86 0f       	add	r24, r22
    49d6:	97 1f       	adc	r25, r23
    49d8:	44 0f       	add	r20, r20
    49da:	45 2f       	mov	r20, r21
    49dc:	44 1f       	adc	r20, r20
    49de:	55 0b       	sbc	r21, r21
    49e0:	84 0f       	add	r24, r20
    49e2:	95 1f       	adc	r25, r21
						
							// Add offset
							itemp16 += 1024;							// Add Satellite offset (+/-1024)
    49e4:	9c 5f       	subi	r25, 0xFC	; 252
							temp16 = itemp16;
						
							temp16 &= 0x7FF;							// Mask off data bits
    49e6:	97 70       	andi	r25, 0x07	; 7
    49e8:	a9 01       	movw	r20, r18
    49ea:	48 5f       	subi	r20, 0xF8	; 248
    49ec:	5f 4f       	sbci	r21, 0xFF	; 255
							temp16 |= ((j + MAX_RC_CHANNELS) << 11);	// Shift channel number up to the correct spot
    49ee:	54 2f       	mov	r21, r20
    49f0:	44 27       	eor	r20, r20
    49f2:	55 0f       	add	r21, r21
    49f4:	55 0f       	add	r21, r21
    49f6:	55 0f       	add	r21, r21
    49f8:	84 2b       	or	r24, r20
    49fa:	95 2b       	or	r25, r21
    49fc:	16 c0       	rjmp	.+44     	; 0x4a2a <__vector_20+0x604>
							// Put back into buffer
							ExtChannel[j] = temp16;	
						}
					
						// S.Bus to Xtreme	
						else if (Config.RxModeOut == XTREME)
    49fe:	a3 30       	cpi	r26, 0x03	; 3
    4a00:	b1 f4       	brne	.+44     	; 0x4a2e <__vector_20+0x608>
						{
							// 11-bit (0 to 2047) to (1000 to 2000) 
							itemp16 = ExtChannel[j];
    4a02:	f9 01       	movw	r30, r18
    4a04:	ee 0f       	add	r30, r30
    4a06:	ff 1f       	adc	r31, r31
    4a08:	e5 59       	subi	r30, 0x95	; 149
    4a0a:	f8 4f       	sbci	r31, 0xF8	; 248
    4a0c:	40 81       	ld	r20, Z
    4a0e:	51 81       	ldd	r21, Z+1	; 0x01
							itemp16 -= 1024;							// Subtract S.bus offset (+/-1024)
    4a10:	54 50       	subi	r21, 0x04	; 4
						
							//  0.625 (0.625) (500/800) 
							itemp16 = (itemp16 >> 1) + (itemp16 >> 3);
    4a12:	ca 01       	movw	r24, r20
    4a14:	95 95       	asr	r25
    4a16:	87 95       	ror	r24
    4a18:	73 e0       	ldi	r23, 0x03	; 3
    4a1a:	55 95       	asr	r21
    4a1c:	47 95       	ror	r20
    4a1e:	7a 95       	dec	r23
    4a20:	e1 f7       	brne	.-8      	; 0x4a1a <__vector_20+0x5f4>
    4a22:	84 0f       	add	r24, r20
    4a24:	95 1f       	adc	r25, r21
						
							itemp16 += 1500;							// Add in Xtreme offset (1000~2000)
    4a26:	84 52       	subi	r24, 0x24	; 36
    4a28:	9a 4f       	sbci	r25, 0xFA	; 250
							temp16 = itemp16;
						
							// Put back into buffer
							ExtChannel[j] = temp16;						
    4a2a:	91 83       	std	Z+1, r25	; 0x01
    4a2c:	80 83       	st	Z, r24
    4a2e:	2f 5f       	subi	r18, 0xFF	; 255
    4a30:	3f 4f       	sbci	r19, 0xFF	; 255
						// Add back in OpenAero2 offset
						RxChannel[j] = itemp16 + 3750;				
					}
				
					// Convert Extra channel info to the format suitable for retransmission
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    4a32:	28 30       	cpi	r18, 0x08	; 8
    4a34:	31 05       	cpc	r19, r1
    4a36:	09 f0       	breq	.+2      	; 0x4a3a <__vector_20+0x614>
    4a38:	b5 cf       	rjmp	.-150    	; 0x49a4 <__vector_20+0x57e>
    4a3a:	61 c1       	rjmp	.+706    	; 0x4cfe <__vector_20+0x8d8>
					}
				 	
				} // Frame lost check
				else
				{
					LED1 = 1;
    4a3c:	2b 9a       	sbi	0x05, 3	; 5
    4a3e:	5f c1       	rjmp	.+702    	; 0x4cfe <__vector_20+0x8d8>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		else if (Config.RxModeIn == SPEKTRUM)
    4a40:	82 30       	cpi	r24, 0x02	; 2
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <__vector_20+0x620>
    4a44:	5c c1       	rjmp	.+696    	; 0x4cfe <__vector_20+0x8d8>
		{
			// Process data when all packets received
			if (bytecount == 15)
    4a46:	80 91 7e 07 	lds	r24, 0x077E
    4a4a:	8f 30       	cpi	r24, 0x0F	; 15
    4a4c:	09 f0       	breq	.+2      	; 0x4a50 <__vector_20+0x62a>
    4a4e:	57 c1       	rjmp	.+686    	; 0x4cfe <__vector_20+0x8d8>
			{
				// Just stick the last byte into the buffer manually.
				sBuffer[15] = temp;
    4a50:	c0 93 54 05 	sts	0x0554, r28

				// Set start of channel data
				sindex = 2; // Channel data from byte 3

				// Work out which frame this is from byte 3
				if (sBuffer[2] & 0x80) 	// 0 for frame 0, 1 for frame 1
    4a54:	80 91 47 05 	lds	r24, 0x0547
    4a58:	87 ff       	sbrs	r24, 7
    4a5a:	08 c0       	rjmp	.+16     	; 0x4a6c <__vector_20+0x646>
				{
					Spektrum_frame_in = 1;		// Mark as Frame 1 if bit set
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	80 93 86 07 	sts	0x0786, r24
					Spektrum_Chanmask_1 = 0;	// Clear frame mask 1
    4a62:	10 92 9e 07 	sts	0x079E, r1
    4a66:	10 92 9d 07 	sts	0x079D, r1
    4a6a:	06 c0       	rjmp	.+12     	; 0x4a78 <__vector_20+0x652>
				}
				else
				{
					Spektrum_frame_in = 0;
    4a6c:	10 92 86 07 	sts	0x0786, r1
					Spektrum_Chanmask_0 = 0;	// Clear frame mask 0
    4a70:	10 92 a3 07 	sts	0x07A3, r1
    4a74:	10 92 a2 07 	sts	0x07A2, r1
				}			

				// Compare old with new fame loss data
				if (sBuffer[0] != Spektrum_frameloss)
    4a78:	80 91 82 07 	lds	r24, 0x0782
    4a7c:	90 91 45 05 	lds	r25, 0x0545
    4a80:	98 17       	cp	r25, r24
    4a82:	11 f0       	breq	.+4      	; 0x4a88 <__vector_20+0x662>
				{
					LED1 = 1;
    4a84:	2b 9a       	sbi	0x05, 3	; 5
    4a86:	01 c0       	rjmp	.+2      	; 0x4a8a <__vector_20+0x664>
				}
				else
				{
					LED1 = 0;
    4a88:	2b 98       	cbi	0x05, 3	; 5
				}
			
				// Save current frame loss data
				Spektrum_frameloss = sBuffer[0];
    4a8a:	80 91 45 05 	lds	r24, 0x0545
    4a8e:	80 93 82 07 	sts	0x0782, r24
						
				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    4a92:	80 91 46 05 	lds	r24, 0x0546
    4a96:	84 ff       	sbrs	r24, 4
    4a98:	04 c0       	rjmp	.+8      	; 0x4aa2 <__vector_20+0x67c>
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    4a9a:	c7 e0       	ldi	r28, 0x07	; 7
					chan_shift = 0x03;
    4a9c:	63 e0       	ldi	r22, 0x03	; 3
				Spektrum_frameloss = sBuffer[0];
						
				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    4a9e:	78 e7       	ldi	r23, 0x78	; 120
    4aa0:	03 c0       	rjmp	.+6      	; 0x4aa8 <__vector_20+0x682>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    4aa2:	c3 e0       	ldi	r28, 0x03	; 3
					chan_shift = 0x02;
    4aa4:	62 e0       	ldi	r22, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    4aa6:	7c e3       	ldi	r23, 0x3C	; 60
		
					// Save any extra channels in extra buffer as-is, complete with channel number
					else if (ch_num < MAX_SPEKTRUM_CHANNELS)
					{
						// Satellite to Xtreme
						if (Config.RxModeOut == XTREME)
    4aa8:	d0 91 0c 06 	lds	r29, 0x060C
    4aac:	e8 e4       	ldi	r30, 0x48	; 72
    4aae:	f5 e0       	ldi	r31, 0x05	; 5
							Spektrum_Chanmask_0 |= (1 << ch_num);					
						}
						else
						{
							// Mark which channels are in frame 1
							Spektrum_Chanmask_1 |= (1 << ch_num);
    4ab0:	41 e0       	ldi	r20, 0x01	; 1
    4ab2:	50 e0       	ldi	r21, 0x00	; 0
    4ab4:	df 01       	movw	r26, r30
    4ab6:	11 97       	sbiw	r26, 0x01	; 1
				// Work out which channel the data is intended for from the channel number data.
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    4ab8:	1c 91       	ld	r17, X
    4aba:	21 2f       	mov	r18, r17
    4abc:	27 23       	and	r18, r23
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	06 2e       	mov	r0, r22
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <__vector_20+0x6a2>
    4ac4:	35 95       	asr	r19
    4ac6:	27 95       	ror	r18
    4ac8:	0a 94       	dec	r0
    4aca:	e2 f7       	brpl	.-8      	; 0x4ac4 <__vector_20+0x69e>
    4acc:	20 93 9f 07 	sts	0x079F, r18

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    4ad0:	20 81       	ld	r18, Z
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	a1 2f       	mov	r26, r17
    4ad6:	ac 23       	and	r26, r28
    4ad8:	b0 e0       	ldi	r27, 0x00	; 0
    4ada:	9a 2f       	mov	r25, r26
    4adc:	88 27       	eor	r24, r24
    4ade:	82 0f       	add	r24, r18
    4ae0:	93 1f       	adc	r25, r19

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16 (0xFFFF)
					if (ch_num < MAX_RC_CHANNELS)
    4ae2:	a0 91 9f 07 	lds	r26, 0x079F
    4ae6:	a8 30       	cpi	r26, 0x08	; 8
    4ae8:	c8 f5       	brcc	.+114    	; 0x4b5c <__vector_20+0x736>
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
						{
							itemp16 = temp16 - 1024;
    4aea:	9c 01       	movw	r18, r24
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16 (0xFFFF)
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    4aec:	63 30       	cpi	r22, 0x03	; 3
    4aee:	11 f4       	brne	.+4      	; 0x4af4 <__vector_20+0x6ce>
						{
							itemp16 = temp16 - 1024;
    4af0:	34 50       	subi	r19, 0x04	; 4
    4af2:	01 c0       	rjmp	.+2      	; 0x4af6 <__vector_20+0x6d0>
						}
						else
						{
							itemp16 = temp16 - 512;	
    4af4:	32 50       	subi	r19, 0x02	; 2
						}					

						// Spektrum to System
						// 1.1527 () (1000/867.5) x2 = 2.30547 (2.3047)
						itemp16 = (itemp16 << 1) + (itemp16 >> 2) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 7); 
    4af6:	c9 01       	movw	r24, r18
    4af8:	88 0f       	add	r24, r24
    4afa:	99 1f       	adc	r25, r25
    4afc:	d9 01       	movw	r26, r18
    4afe:	b5 95       	asr	r27
    4b00:	a7 95       	ror	r26
    4b02:	b5 95       	asr	r27
    4b04:	a7 95       	ror	r26
    4b06:	8a 0f       	add	r24, r26
    4b08:	9b 1f       	adc	r25, r27
    4b0a:	d9 01       	movw	r26, r18
    4b0c:	05 e0       	ldi	r16, 0x05	; 5
    4b0e:	b5 95       	asr	r27
    4b10:	a7 95       	ror	r26
    4b12:	0a 95       	dec	r16
    4b14:	e1 f7       	brne	.-8      	; 0x4b0e <__vector_20+0x6e8>
    4b16:	8a 0f       	add	r24, r26
    4b18:	9b 1f       	adc	r25, r27
    4b1a:	d9 01       	movw	r26, r18
    4b1c:	16 e0       	ldi	r17, 0x06	; 6
    4b1e:	b5 95       	asr	r27
    4b20:	a7 95       	ror	r26
    4b22:	1a 95       	dec	r17
    4b24:	e1 f7       	brne	.-8      	; 0x4b1e <__vector_20+0x6f8>
    4b26:	8a 0f       	add	r24, r26
    4b28:	9b 1f       	adc	r25, r27
    4b2a:	22 0f       	add	r18, r18
    4b2c:	23 2f       	mov	r18, r19
    4b2e:	22 1f       	adc	r18, r18
    4b30:	33 0b       	sbc	r19, r19
    4b32:	82 0f       	add	r24, r18
    4b34:	93 1f       	adc	r25, r19

						if (chan_shift == 0x03) // 11-bit
    4b36:	63 30       	cpi	r22, 0x03	; 3
    4b38:	11 f4       	brne	.+4      	; 0x4b3e <__vector_20+0x718>
						{
							// Divide in case of 11-bit value (therefore x1.466)
							itemp16 = itemp16 >> 1;								
    4b3a:	95 95       	asr	r25
    4b3c:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4b3e:	a0 91 9f 07 	lds	r26, 0x079F
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	ae 53       	subi	r26, 0x3E	; 62
    4b46:	ba 4f       	sbci	r27, 0xFA	; 250
    4b48:	11 96       	adiw	r26, 0x01	; 1
    4b4a:	ac 91       	ld	r26, X
    4b4c:	b0 e0       	ldi	r27, 0x00	; 0
							// Divide in case of 11-bit value (therefore x1.466)
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    4b4e:	8a 55       	subi	r24, 0x5A	; 90
    4b50:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4b52:	aa 0f       	add	r26, r26
    4b54:	bb 1f       	adc	r27, r27
    4b56:	a6 5a       	subi	r26, 0xA6	; 166
    4b58:	b8 4f       	sbci	r27, 0xF8	; 248
    4b5a:	61 c0       	rjmp	.+194    	; 0x4c1e <__vector_20+0x7f8>
					}
		
					// Save any extra channels in extra buffer as-is, complete with channel number
					else if (ch_num < MAX_SPEKTRUM_CHANNELS)
    4b5c:	a0 91 9f 07 	lds	r26, 0x079F
    4b60:	ae 30       	cpi	r26, 0x0E	; 14
    4b62:	08 f0       	brcs	.+2      	; 0x4b66 <__vector_20+0x740>
    4b64:	5f c0       	rjmp	.+190    	; 0x4c24 <__vector_20+0x7fe>
					{
						// Satellite to Xtreme
						if (Config.RxModeOut == XTREME)
    4b66:	d3 30       	cpi	r29, 0x03	; 3
    4b68:	19 f5       	brne	.+70     	; 0x4bb0 <__vector_20+0x78a>
						{
							// Strip off channel number (0~2047)
							temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
						
							itemp16 = temp16;
							itemp16 -= 1024;							// Subtract Spektrum offset (+/-1024)
    4b6a:	9c 01       	movw	r18, r24
    4b6c:	34 50       	subi	r19, 0x04	; 4
						
							// x0.5764 (.5762)	(500/867.5)
							itemp16 = (itemp16 >> 1) + (itemp16 >> 4) + (itemp16 >> 7) + (itemp16 >> 8) + (itemp16 >> 9); 
    4b6e:	c9 01       	movw	r24, r18
    4b70:	95 95       	asr	r25
    4b72:	87 95       	ror	r24
    4b74:	d9 01       	movw	r26, r18
    4b76:	14 e0       	ldi	r17, 0x04	; 4
    4b78:	b5 95       	asr	r27
    4b7a:	a7 95       	ror	r26
    4b7c:	1a 95       	dec	r17
    4b7e:	e1 f7       	brne	.-8      	; 0x4b78 <__vector_20+0x752>
    4b80:	8a 0f       	add	r24, r26
    4b82:	9b 1f       	adc	r25, r27
    4b84:	d9 01       	movw	r26, r18
    4b86:	aa 0f       	add	r26, r26
    4b88:	ab 2f       	mov	r26, r27
    4b8a:	aa 1f       	adc	r26, r26
    4b8c:	bb 0b       	sbc	r27, r27
    4b8e:	8a 0f       	add	r24, r26
    4b90:	9b 1f       	adc	r25, r27
    4b92:	a3 2f       	mov	r26, r19
    4b94:	bb 27       	eor	r27, r27
    4b96:	a7 fd       	sbrc	r26, 7
    4b98:	ba 95       	dec	r27
    4b9a:	8a 0f       	add	r24, r26
    4b9c:	9b 1f       	adc	r25, r27
    4b9e:	23 2f       	mov	r18, r19
    4ba0:	33 0f       	add	r19, r19
    4ba2:	33 0b       	sbc	r19, r19
    4ba4:	25 95       	asr	r18
    4ba6:	82 0f       	add	r24, r18
    4ba8:	93 1f       	adc	r25, r19
						
							// Add offset
							itemp16 += 1500;							// Add Xtreme offset (1000~2000)
    4baa:	84 52       	subi	r24, 0x24	; 36
    4bac:	9a 4f       	sbci	r25, 0xFA	; 250
    4bae:	26 c0       	rjmp	.+76     	; 0x4bfc <__vector_20+0x7d6>
							// Put back into buffer
							ExtChannel[ch_num - MAX_RC_CHANNELS] = temp16;
						}
					
						// Satellite to S.Bus
						else if (Config.RxModeOut == SBUS)
    4bb0:	d1 30       	cpi	r29, 0x01	; 1
    4bb2:	41 f5       	brne	.+80     	; 0x4c04 <__vector_20+0x7de>
						{
							// Strip off channel number
							temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];

							itemp16 = temp16;
							itemp16 -= 1024;							// Subtract Spektrum offset (+/-1024)
    4bb4:	9c 01       	movw	r18, r24
    4bb6:	34 50       	subi	r19, 0x04	; 4
						
							// 0.9222 (0.9219) (800/867.5) 
							itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 6);
    4bb8:	c9 01       	movw	r24, r18
    4bba:	95 95       	asr	r25
    4bbc:	87 95       	ror	r24
    4bbe:	d9 01       	movw	r26, r18
    4bc0:	b5 95       	asr	r27
    4bc2:	a7 95       	ror	r26
    4bc4:	b5 95       	asr	r27
    4bc6:	a7 95       	ror	r26
    4bc8:	8a 0f       	add	r24, r26
    4bca:	9b 1f       	adc	r25, r27
    4bcc:	d9 01       	movw	r26, r18
    4bce:	03 e0       	ldi	r16, 0x03	; 3
    4bd0:	b5 95       	asr	r27
    4bd2:	a7 95       	ror	r26
    4bd4:	0a 95       	dec	r16
    4bd6:	e1 f7       	brne	.-8      	; 0x4bd0 <__vector_20+0x7aa>
    4bd8:	8a 0f       	add	r24, r26
    4bda:	9b 1f       	adc	r25, r27
    4bdc:	d9 01       	movw	r26, r18
    4bde:	14 e0       	ldi	r17, 0x04	; 4
    4be0:	b5 95       	asr	r27
    4be2:	a7 95       	ror	r26
    4be4:	1a 95       	dec	r17
    4be6:	e1 f7       	brne	.-8      	; 0x4be0 <__vector_20+0x7ba>
    4be8:	8a 0f       	add	r24, r26
    4bea:	9b 1f       	adc	r25, r27
    4bec:	06 e0       	ldi	r16, 0x06	; 6
    4bee:	35 95       	asr	r19
    4bf0:	27 95       	ror	r18
    4bf2:	0a 95       	dec	r16
    4bf4:	e1 f7       	brne	.-8      	; 0x4bee <__vector_20+0x7c8>
    4bf6:	82 0f       	add	r24, r18
    4bf8:	93 1f       	adc	r25, r19
						
							// Add offset
							itemp16 += 1024;							// Add S.Bus offset
    4bfa:	9c 5f       	subi	r25, 0xFC	; 252
							temp16 = itemp16;

							// Put back into buffer
							ExtChannel[ch_num - MAX_RC_CHANNELS] = temp16;						
    4bfc:	a0 91 9f 07 	lds	r26, 0x079F
    4c00:	b0 e0       	ldi	r27, 0x00	; 0
    4c02:	09 c0       	rjmp	.+18     	; 0x4c16 <__vector_20+0x7f0>
						}
					
						// Spektrum to Spektrum
						else
						{
							ExtChannel[ch_num - MAX_RC_CHANNELS] = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];						
    4c04:	a0 91 9f 07 	lds	r26, 0x079F
    4c08:	b0 e0       	ldi	r27, 0x00	; 0
    4c0a:	81 2f       	mov	r24, r17
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	98 2f       	mov	r25, r24
    4c10:	88 27       	eor	r24, r24
    4c12:	82 0f       	add	r24, r18
    4c14:	93 1f       	adc	r25, r19
    4c16:	aa 0f       	add	r26, r26
    4c18:	bb 1f       	adc	r27, r27
    4c1a:	a5 5a       	subi	r26, 0xA5	; 165
    4c1c:	b8 4f       	sbci	r27, 0xF8	; 248
    4c1e:	11 96       	adiw	r26, 0x01	; 1
    4c20:	9c 93       	st	X, r25
    4c22:	8e 93       	st	-X, r24
						}
					}

					// Use the channel masks to count the number of channels in the Spektrum packets for each frame
					// Ignore channels above 14. This inlcudes the dummy filler bytes 0xff, 0xff which read as ch16
					if (ch_num < MAX_SPEKTRUM_CHANNELS)
    4c24:	80 91 9f 07 	lds	r24, 0x079F
    4c28:	8e 30       	cpi	r24, 0x0E	; 14
    4c2a:	c8 f5       	brcc	.+114    	; 0x4c9e <__vector_20+0x878>
					{
						if (Spektrum_frame_in == 0)
    4c2c:	80 91 86 07 	lds	r24, 0x0786
    4c30:	81 11       	cpse	r24, r1
    4c32:	14 c0       	rjmp	.+40     	; 0x4c5c <__vector_20+0x836>
						{
							// Mark which channels are in frame 0
							Spektrum_Chanmask_0 |= (1 << ch_num);					
    4c34:	20 91 a2 07 	lds	r18, 0x07A2
    4c38:	30 91 a3 07 	lds	r19, 0x07A3
    4c3c:	80 91 9f 07 	lds	r24, 0x079F
    4c40:	da 01       	movw	r26, r20
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <__vector_20+0x822>
    4c44:	aa 0f       	add	r26, r26
    4c46:	bb 1f       	adc	r27, r27
    4c48:	8a 95       	dec	r24
    4c4a:	e2 f7       	brpl	.-8      	; 0x4c44 <__vector_20+0x81e>
    4c4c:	cd 01       	movw	r24, r26
    4c4e:	82 2b       	or	r24, r18
    4c50:	93 2b       	or	r25, r19
    4c52:	90 93 a3 07 	sts	0x07A3, r25
    4c56:	80 93 a2 07 	sts	0x07A2, r24
    4c5a:	13 c0       	rjmp	.+38     	; 0x4c82 <__vector_20+0x85c>
						}
						else
						{
							// Mark which channels are in frame 1
							Spektrum_Chanmask_1 |= (1 << ch_num);
    4c5c:	20 91 9d 07 	lds	r18, 0x079D
    4c60:	30 91 9e 07 	lds	r19, 0x079E
    4c64:	80 91 9f 07 	lds	r24, 0x079F
    4c68:	da 01       	movw	r26, r20
    4c6a:	02 c0       	rjmp	.+4      	; 0x4c70 <__vector_20+0x84a>
    4c6c:	aa 0f       	add	r26, r26
    4c6e:	bb 1f       	adc	r27, r27
    4c70:	8a 95       	dec	r24
    4c72:	e2 f7       	brpl	.-8      	; 0x4c6c <__vector_20+0x846>
    4c74:	cd 01       	movw	r24, r26
    4c76:	82 2b       	or	r24, r18
    4c78:	93 2b       	or	r25, r19
    4c7a:	90 93 9e 07 	sts	0x079E, r25
    4c7e:	80 93 9d 07 	sts	0x079D, r24
						}

						// OR the two masks to get the sum of all channels in the pair of frames.
						Xtreme_Chanmask = (Spektrum_Chanmask_0 | Spektrum_Chanmask_1);
    4c82:	20 91 a2 07 	lds	r18, 0x07A2
    4c86:	30 91 a3 07 	lds	r19, 0x07A3
    4c8a:	80 91 9d 07 	lds	r24, 0x079D
    4c8e:	90 91 9e 07 	lds	r25, 0x079E
    4c92:	82 2b       	or	r24, r18
    4c94:	93 2b       	or	r25, r19
    4c96:	90 93 7d 07 	sts	0x077D, r25
    4c9a:	80 93 7c 07 	sts	0x077C, r24
    4c9e:	32 96       	adiw	r30, 0x02	; 2
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data.
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    4ca0:	b5 e0       	ldi	r27, 0x05	; 5
    4ca2:	e6 35       	cpi	r30, 0x56	; 86
    4ca4:	fb 07       	cpc	r31, r27
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <__vector_20+0x884>
    4ca8:	05 cf       	rjmp	.-502    	; 0x4ab4 <__vector_20+0x68e>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	80 93 6a 07 	sts	0x076A, r24
					
				// Reset frame timers
				FrameDrop_Output_Rate = 0;
    4cb0:	10 92 12 01 	sts	0x0112, r1
    4cb4:	10 92 13 01 	sts	0x0113, r1
    4cb8:	10 92 14 01 	sts	0x0114, r1
    4cbc:	10 92 15 01 	sts	0x0115, r1
				Failsafe_Output_Rate = 0;
    4cc0:	10 92 0e 01 	sts	0x010E, r1
    4cc4:	10 92 0f 01 	sts	0x010F, r1
    4cc8:	10 92 10 01 	sts	0x0110, r1
    4ccc:	10 92 11 01 	sts	0x0111, r1
				RC_Timeout = 0;					// Reset 500ms failsafe timeout
    4cd0:	10 92 0d 01 	sts	0x010D, r1
    4cd4:	10 92 0c 01 	sts	0x010C, r1
				
				// Flag end-of-failsafe if we were in failsafe.
				// Also, clear failsafe.
				if (Flight_flags & (1 << FailsafeFlag))
    4cd8:	80 91 1c 01 	lds	r24, 0x011C
    4cdc:	82 ff       	sbrs	r24, 2
    4cde:	0a c0       	rjmp	.+20     	; 0x4cf4 <__vector_20+0x8ce>
				{
					Alarm_flags |= (1 << FAILSAFE_ENDED);
    4ce0:	80 91 1b 01 	lds	r24, 0x011B
    4ce4:	80 62       	ori	r24, 0x20	; 32
    4ce6:	80 93 1b 01 	sts	0x011B, r24
					Flight_flags &= ~(1 << FailsafeFlag);
    4cea:	80 91 1c 01 	lds	r24, 0x011C
    4cee:	8b 7f       	andi	r24, 0xFB	; 251
    4cf0:	80 93 1c 01 	sts	0x011C, r24
				}
				
				Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    4cf4:	80 91 1c 01 	lds	r24, 0x011C
    4cf8:	8f 7d       	andi	r24, 0xDF	; 223
    4cfa:	80 93 1c 01 	sts	0x011C, r24
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    4cfe:	80 91 7e 07 	lds	r24, 0x077E
    4d02:	8f 5f       	subi	r24, 0xFF	; 255
    4d04:	80 93 7e 07 	sts	0x077E, r24
	
	} // Valid data
}
    4d08:	ff 91       	pop	r31
    4d0a:	ef 91       	pop	r30
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	bf 91       	pop	r27
    4d12:	af 91       	pop	r26
    4d14:	9f 91       	pop	r25
    4d16:	8f 91       	pop	r24
    4d18:	7f 91       	pop	r23
    4d1a:	6f 91       	pop	r22
    4d1c:	5f 91       	pop	r21
    4d1e:	4f 91       	pop	r20
    4d20:	3f 91       	pop	r19
    4d22:	2f 91       	pop	r18
    4d24:	1f 91       	pop	r17
    4d26:	0f 91       	pop	r16
    4d28:	0f 90       	pop	r0
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	0f 90       	pop	r0
    4d2e:	1f 90       	pop	r1
    4d30:	18 95       	reti

00004d32 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    4d32:	f8 94       	cli

	// Receiver side	
	switch (Config.RxModeIn)
    4d34:	80 91 0b 06 	lds	r24, 0x060B
    4d38:	88 23       	and	r24, r24
    4d3a:	b1 f0       	breq	.+44     	; 0x4d68 <init_int+0x36>
    4d3c:	87 fd       	sbrc	r24, 7
    4d3e:	28 c0       	rjmp	.+80     	; 0x4d90 <init_int+0x5e>
    4d40:	84 30       	cpi	r24, 0x04	; 4
    4d42:	34 f5       	brge	.+76     	; 0x4d90 <init_int+0x5e>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable input interrupts
			PCMSK0 = 0;							// Disable PCINT0-7
    4d44:	10 92 6b 00 	sts	0x006B, r1
			PCMSK1 = 0;							// Disable PCINT8-15 (AUX, Rudder)
    4d48:	10 92 6c 00 	sts	0x006C, r1
			PCMSK2 = 0;							// Disable PCINT16-23
    4d4c:	10 92 6d 00 	sts	0x006D, r1
			PCMSK3 = 0;							// Disable PCINT24-31 (THR/CPPM input)
    4d50:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    4d54:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    4d56:	80 91 c1 00 	lds	r24, 0x00C1
    4d5a:	80 68       	ori	r24, 0x80	; 128
    4d5c:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver on UART0
    4d60:	80 91 c1 00 	lds	r24, 0x00C1
    4d64:	80 61       	ori	r24, 0x10	; 16
    4d66:	12 c0       	rjmp	.+36     	; 0x4d8c <init_int+0x5a>

	// Receiver side	
	switch (Config.RxModeIn)
	{
		case CPPM_MODE:
			PCMSK0 = 0;							// Disable PCINT0-7
    4d68:	10 92 6b 00 	sts	0x006B, r1
			PCMSK1 = 0;							// Disable PCINT8-15 (AUX, Rudder)
    4d6c:	10 92 6c 00 	sts	0x006C, r1
			PCMSK2 = 0;							// Disable PCINT16-23
    4d70:	10 92 6d 00 	sts	0x006D, r1
			PCMSK3 = 1;							// Enable  PCINT24 (THR/CPPM input)
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    4d7a:	1d ba       	out	0x1d, r1	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    4d7c:	80 91 c1 00 	lds	r24, 0x00C1
    4d80:	8f 77       	andi	r24, 0x7F	; 127
    4d82:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    4d86:	80 91 c1 00 	lds	r24, 0x00C1
    4d8a:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable PCINT24-31 (THR/CPPM input)
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver on UART0
    4d8c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Transmitter side
	UCSR1B = (1 << TXEN1);						// Enable transmitter on UART1
    4d90:	88 e0       	ldi	r24, 0x08	; 8
    4d92:	80 93 c9 00 	sts	0x00C9, r24

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    4d96:	8f e0       	ldi	r24, 0x0F	; 15
    4d98:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x07; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    4d9a:	87 e0       	ldi	r24, 0x07	; 7
    4d9c:	8c bb       	out	0x1c, r24	; 28

	sei(); // Re-enable interrupts
    4d9e:	78 94       	sei
    4da0:	08 95       	ret

00004da2 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    4da2:	81 11       	cpse	r24, r1
    4da4:	23 c0       	rjmp	.+70     	; 0x4dec <print_menu_frame+0x4a>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    4da6:	29 e3       	ldi	r18, 0x39	; 57
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e0       	ldi	r20, 0x00	; 0
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	66 e0       	ldi	r22, 0x06	; 6
    4db0:	71 e0       	ldi	r23, 0x01	; 1
    4db2:	8c e0       	ldi	r24, 0x0C	; 12
    4db4:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    4db8:	2b e3       	ldi	r18, 0x3B	; 59
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	46 e2       	ldi	r20, 0x26	; 38
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	66 e0       	ldi	r22, 0x06	; 6
    4dc2:	71 e0       	ldi	r23, 0x01	; 1
    4dc4:	8a e0       	ldi	r24, 0x0A	; 10
    4dc6:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    4dca:	2b e3       	ldi	r18, 0x3B	; 59
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	40 e5       	ldi	r20, 0x50	; 80
    4dd0:	50 e0       	ldi	r21, 0x00	; 0
    4dd2:	66 e0       	ldi	r22, 0x06	; 6
    4dd4:	71 e0       	ldi	r23, 0x01	; 1
    4dd6:	89 e0       	ldi	r24, 0x09	; 9
    4dd8:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); 	// Right
    4ddc:	29 e3       	ldi	r18, 0x39	; 57
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	48 e7       	ldi	r20, 0x78	; 120
    4de2:	50 e0       	ldi	r21, 0x00	; 0
    4de4:	66 e0       	ldi	r22, 0x06	; 6
    4de6:	71 e0       	ldi	r23, 0x01	; 1
    4de8:	8b e0       	ldi	r24, 0x0B	; 11
    4dea:	22 c0       	rjmp	.+68     	; 0x4e30 <print_menu_frame+0x8e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    4dec:	26 e3       	ldi	r18, 0x36	; 54
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	50 e0       	ldi	r21, 0x00	; 0
    4df4:	6e e1       	ldi	r22, 0x1E	; 30
    4df6:	7a e0       	ldi	r23, 0x0A	; 10
    4df8:	80 e1       	ldi	r24, 0x10	; 16
    4dfa:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    4dfe:	2b e3       	ldi	r18, 0x3B	; 59
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	46 e2       	ldi	r20, 0x26	; 38
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	66 e0       	ldi	r22, 0x06	; 6
    4e08:	71 e0       	ldi	r23, 0x01	; 1
    4e0a:	8a e0       	ldi	r24, 0x0A	; 10
    4e0c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    4e10:	2b e3       	ldi	r18, 0x3B	; 59
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e5       	ldi	r20, 0x50	; 80
    4e16:	50 e0       	ldi	r21, 0x00	; 0
    4e18:	66 e0       	ldi	r22, 0x06	; 6
    4e1a:	71 e0       	ldi	r23, 0x01	; 1
    4e1c:	89 e0       	ldi	r24, 0x09	; 9
    4e1e:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    4e22:	26 e3       	ldi	r18, 0x36	; 54
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	47 e6       	ldi	r20, 0x67	; 103
    4e28:	50 e0       	ldi	r21, 0x00	; 0
    4e2a:	6e e1       	ldi	r22, 0x1E	; 30
    4e2c:	7a e0       	ldi	r23, 0x0A	; 10
    4e2e:	81 e1       	ldi	r24, 0x11	; 17
    4e30:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    4e34:	85 e4       	ldi	r24, 0x45	; 69
    4e36:	91 e0       	ldi	r25, 0x01	; 1
    4e38:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
    4e3c:	08 95       	ret

00004e3e <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    4e3e:	aa e0       	ldi	r26, 0x0A	; 10
    4e40:	b0 e0       	ldi	r27, 0x00	; 0
    4e42:	e5 e2       	ldi	r30, 0x25	; 37
    4e44:	f7 e2       	ldi	r31, 0x27	; 39
    4e46:	0c 94 3b 3e 	jmp	0x7c76	; 0x7c76 <__prologue_saves__+0x20>
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    4e4a:	25 e0       	ldi	r18, 0x05	; 5
    4e4c:	62 9f       	mul	r22, r18
    4e4e:	80 0d       	add	r24, r0
    4e50:	91 1d       	adc	r25, r1
    4e52:	11 24       	eor	r1, r1
    4e54:	bc 01       	movw	r22, r24
    4e56:	45 e0       	ldi	r20, 0x05	; 5
    4e58:	50 e0       	ldi	r21, 0x00	; 0
    4e5a:	ce 01       	movw	r24, r28
    4e5c:	06 96       	adiw	r24, 0x06	; 6
    4e5e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <memcpy_P>
	return (range);
    4e62:	85 e0       	ldi	r24, 0x05	; 5
    4e64:	fe 01       	movw	r30, r28
    4e66:	36 96       	adiw	r30, 0x06	; 6
    4e68:	de 01       	movw	r26, r28
    4e6a:	11 96       	adiw	r26, 0x01	; 1
    4e6c:	01 90       	ld	r0, Z+
    4e6e:	0d 92       	st	X+, r0
    4e70:	8a 95       	dec	r24
    4e72:	e1 f7       	brne	.-8      	; 0x4e6c <get_menu_range+0x2e>
    4e74:	29 81       	ldd	r18, Y+1	; 0x01
    4e76:	3a 81       	ldd	r19, Y+2	; 0x02
    4e78:	4b 81       	ldd	r20, Y+3	; 0x03
    4e7a:	5c 81       	ldd	r21, Y+4	; 0x04
    4e7c:	6d 81       	ldd	r22, Y+5	; 0x05
}
    4e7e:	70 e0       	ldi	r23, 0x00	; 0
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	2a 96       	adiw	r28, 0x0a	; 10
    4e86:	e2 e0       	ldi	r30, 0x02	; 2
    4e88:	0c 94 57 3e 	jmp	0x7cae	; 0x7cae <__epilogue_restores__+0x20>

00004e8c <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
    4e8c:	0f 93       	push	r16
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	e4 2f       	mov	r30, r20
    4e96:	10 e0       	ldi	r17, 0x00	; 0
    4e98:	c2 2f       	mov	r28, r18
    4e9a:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    4e9c:	66 23       	and	r22, r22
    4e9e:	19 f0       	breq	.+6      	; 0x4ea6 <print_menu_text+0x1a>
    4ea0:	62 50       	subi	r22, 0x02	; 2
    4ea2:	62 30       	cpi	r22, 0x02	; 2
    4ea4:	60 f4       	brcc	.+24     	; 0x4ebe <print_menu_text+0x32>
    4ea6:	4a e0       	ldi	r20, 0x0A	; 10
    4ea8:	6b e6       	ldi	r22, 0x6B	; 107
    4eaa:	75 e0       	ldi	r23, 0x05	; 5
    4eac:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    4eb0:	98 01       	movw	r18, r16
    4eb2:	ae 01       	movw	r20, r28
    4eb4:	6e e1       	ldi	r22, 0x1E	; 30
    4eb6:	7a e0       	ldi	r23, 0x0A	; 10
    4eb8:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    4ebc:	07 c0       	rjmp	.+14     	; 0x4ecc <print_menu_text+0x40>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    4ebe:	98 01       	movw	r18, r16
    4ec0:	ae 01       	movw	r20, r28
    4ec2:	6e e1       	ldi	r22, 0x1E	; 30
    4ec4:	7a e0       	ldi	r23, 0x0A	; 10
    4ec6:	8e 2f       	mov	r24, r30
    4ec8:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
	}
}
    4ecc:	df 91       	pop	r29
    4ece:	cf 91       	pop	r28
    4ed0:	1f 91       	pop	r17
    4ed2:	0f 91       	pop	r16
    4ed4:	08 95       	ret

00004ed6 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    4ed6:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    4ed8:	93 b1       	in	r25, 0x03	; 3
    4eda:	90 7f       	andi	r25, 0xF0	; 240
    4edc:	90 93 a6 07 	sts	0x07A6, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    4ee2:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    4ee4:	90 91 a6 07 	lds	r25, 0x07A6
    4ee8:	90 3f       	cpi	r25, 0xF0	; 240
    4eea:	c9 f4       	brne	.+50     	; 0x4f1e <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    4eec:	83 b1       	in	r24, 0x03	; 3
    4eee:	80 7f       	andi	r24, 0xF0	; 240
    4ef0:	e7 ea       	ldi	r30, 0xA7	; 167
    4ef2:	f1 e6       	ldi	r31, 0x61	; 97
    4ef4:	31 97       	sbiw	r30, 0x01	; 1
    4ef6:	f1 f7       	brne	.-4      	; 0x4ef4 <poll_buttons+0x1e>
    4ef8:	00 c0       	rjmp	.+0      	; 0x4efa <poll_buttons+0x24>
    4efa:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    4efc:	23 b1       	in	r18, 0x03	; 3
    4efe:	48 2f       	mov	r20, r24
    4f00:	50 e0       	ldi	r21, 0x00	; 0
    4f02:	20 7f       	andi	r18, 0xF0	; 240
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	42 17       	cp	r20, r18
    4f08:	53 07       	cpc	r21, r19
    4f0a:	19 f4       	brne	.+6      	; 0x4f12 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    4f0c:	80 93 a6 07 	sts	0x07A6, r24
    4f10:	01 c0       	rjmp	.+2      	; 0x4f14 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    4f12:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    4f14:	10 92 28 01 	sts	0x0128, r1
		button_multiplier = 1;
    4f18:	70 93 a7 07 	sts	0x07A7, r23
    4f1c:	e3 cf       	rjmp	.-58     	; 0x4ee4 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    4f1e:	66 23       	and	r22, r22
    4f20:	71 f0       	breq	.+28     	; 0x4f3e <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    4f22:	90 91 28 01 	lds	r25, 0x0128
    4f26:	9f 5f       	subi	r25, 0xFF	; 255
    4f28:	90 93 28 01 	sts	0x0128, r25
		if (button_count >= 10)
    4f2c:	9a 30       	cpi	r25, 0x0A	; 10
    4f2e:	38 f0       	brcs	.+14     	; 0x4f3e <poll_buttons+0x68>
		{
			button_count = 0;
    4f30:	10 92 28 01 	sts	0x0128, r1
			button_multiplier ++;
    4f34:	90 91 a7 07 	lds	r25, 0x07A7
    4f38:	9f 5f       	subi	r25, 0xFF	; 255
    4f3a:	90 93 a7 07 	sts	0x07A7, r25
		}
	}

	return buttons;
}
    4f3e:	08 95       	ret

00004f40 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
    4f40:	a4 e1       	ldi	r26, 0x14	; 20
    4f42:	b0 e0       	ldi	r27, 0x00	; 0
    4f44:	e6 ea       	ldi	r30, 0xA6	; 166
    4f46:	f7 e2       	ldi	r31, 0x27	; 39
    4f48:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
    4f4c:	98 2e       	mov	r9, r24
    4f4e:	7e 87       	std	Y+14, r23	; 0x0e
    4f50:	6d 87       	std	Y+13, r22	; 0x0d
    4f52:	b4 2e       	mov	r11, r20
    4f54:	ed 82       	std	Y+5, r14	; 0x05
    4f56:	fe 82       	std	Y+6, r15	; 0x06
    4f58:	0f 83       	std	Y+7, r16	; 0x07
    4f5a:	d1 2e       	mov	r13, r17
    4f5c:	18 87       	std	Y+8, r17	; 0x08
    4f5e:	29 87       	std	Y+9, r18	; 0x09
    4f60:	4e 2d       	mov	r20, r14
    4f62:	3f 2d       	mov	r19, r15
    4f64:	0a 87       	std	Y+10, r16	; 0x0a
	mugui_size16_t size;
	//int16_t temp16;
	int16_t value = (int8_t)*values;
    4f66:	fb 01       	movw	r30, r22
    4f68:	20 81       	ld	r18, Z
    4f6a:	62 2e       	mov	r6, r18
    4f6c:	77 24       	eor	r7, r7
    4f6e:	67 fc       	sbrc	r6, 7
    4f70:	70 94       	com	r7
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    4f72:	f2 e0       	ldi	r31, 0x02	; 2
    4f74:	1f 13       	cpse	r17, r31
    4f76:	05 c0       	rjmp	.+10     	; 0x4f82 <do_menu_item+0x42>
	{
		value = value * mult;
    4f78:	5b 2d       	mov	r21, r11
    4f7a:	25 03       	mulsu	r18, r21
    4f7c:	30 01       	movw	r6, r0
    4f7e:	11 24       	eor	r1, r1
    4f80:	02 c0       	rjmp	.+4      	; 0x4f86 <do_menu_item+0x46>
	}
	else mult = 1;
    4f82:	bb 24       	eor	r11, r11
    4f84:	b3 94       	inc	r11

	button = NONE;
    4f86:	20 ef       	ldi	r18, 0xF0	; 240
    4f88:	20 93 a6 07 	sts	0x07A6, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    4f8c:	8b 2d       	mov	r24, r11
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	98 8b       	std	Y+16, r25	; 0x10
    4f92:	8f 87       	std	Y+15, r24	; 0x0f
    4f94:	2b 2d       	mov	r18, r11
    4f96:	42 03       	mulsu	r20, r18
    4f98:	10 01       	movw	r2, r0
    4f9a:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    4f9c:	32 03       	mulsu	r19, r18
    4f9e:	c0 01       	movw	r24, r0
    4fa0:	11 24       	eor	r1, r1
    4fa2:	9c 87       	std	Y+12, r25	; 0x0c
    4fa4:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    4fa6:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    4fa8:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	//int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    4faa:	41 2c       	mov	r4, r1
void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	//int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    4fac:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    4fae:	09 2d       	mov	r16, r9
    4fb0:	10 e0       	ldi	r17, 0x00	; 0
    4fb2:	00 0f       	add	r16, r16
    4fb4:	11 1f       	adc	r17, r17
    4fb6:	0b 5f       	subi	r16, 0xFB	; 251
    4fb8:	11 4f       	sbci	r17, 0xF1	; 241
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    4fba:	ec 2d       	mov	r30, r12
    4fbc:	ff 27       	eor	r31, r31
    4fbe:	e7 fd       	sbrc	r30, 7
    4fc0:	f0 95       	com	r31
    4fc2:	fa 8b       	std	Y+18, r31	; 0x12
    4fc4:	e9 8b       	std	Y+17, r30	; 0x11

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    4fc6:	5e ef       	ldi	r21, 0xFE	; 254
    4fc8:	c5 2e       	mov	r12, r21
    4fca:	cd 0c       	add	r12, r13
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    4fcc:	2a 2d       	mov	r18, r10
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	3c 8b       	std	Y+20, r19	; 0x14
    4fd2:	2b 8b       	std	Y+19, r18	; 0x13
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    4fd4:	80 91 a6 07 	lds	r24, 0x07A6
    4fd8:	80 3e       	cpi	r24, 0xE0	; 224
    4fda:	09 f4       	brne	.+2      	; 0x4fde <do_menu_item+0x9e>
    4fdc:	03 c1       	rjmp	.+518    	; 0x51e4 <do_menu_item+0x2a4>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    4fde:	88 20       	and	r8, r8
    4fe0:	11 f0       	breq	.+4      	; 0x4fe6 <do_menu_item+0xa6>
		{
			button_inc = 5; // For servos
    4fe2:	25 e0       	ldi	r18, 0x05	; 5
    4fe4:	01 c0       	rjmp	.+2      	; 0x4fe8 <do_menu_item+0xa8>

		}
		else
		{
			button_inc = 1;	// For everything else
    4fe6:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    4fe8:	80 3f       	cpi	r24, 0xF0	; 240
    4fea:	19 f0       	breq	.+6      	; 0x4ff2 <do_menu_item+0xb2>
		{
			button_update++;
    4fec:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    4fee:	24 15       	cp	r18, r4
    4ff0:	10 f4       	brcc	.+4      	; 0x4ff6 <do_menu_item+0xb6>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    4ff2:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    4ff4:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    4ff6:	88 20       	and	r8, r8
    4ff8:	49 f0       	breq	.+18     	; 0x500c <do_menu_item+0xcc>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    4ffa:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    4ffc:	37 e0       	ldi	r19, 0x07	; 7
    4ffe:	3f 15       	cp	r19, r15
    5000:	10 f4       	brcc	.+4      	; 0x5006 <do_menu_item+0xc6>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    5002:	80 3f       	cpi	r24, 0xF0	; 240
    5004:	19 f4       	brne	.+6      	; 0x500c <do_menu_item+0xcc>
    5006:	99 23       	and	r25, r25
    5008:	09 f4       	brne	.+2      	; 0x500c <do_menu_item+0xcc>
    500a:	69 c0       	rjmp	.+210    	; 0x50de <do_menu_item+0x19e>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    500c:	85 e4       	ldi	r24, 0x45	; 69
    500e:	91 e0       	ldi	r25, 0x01	; 1
    5010:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5014:	f8 01       	movw	r30, r16
    5016:	85 91       	lpm	r24, Z+
    5018:	94 91       	lpm	r25, Z
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	40 e0       	ldi	r20, 0x00	; 0
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	60 e7       	ldi	r22, 0x70	; 112
    5024:	71 e0       	ldi	r23, 0x01	; 1
    5026:	0e 94 1f 1a 	call	0x343e	; 0x343e <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    502a:	dd 20       	and	r13, r13
    502c:	19 f0       	breq	.+6      	; 0x5034 <do_menu_item+0xf4>
    502e:	51 e0       	ldi	r21, 0x01	; 1
    5030:	5c 15       	cp	r21, r12
    5032:	40 f1       	brcs	.+80     	; 0x5084 <do_menu_item+0x144>
    5034:	4a e0       	ldi	r20, 0x0A	; 10
    5036:	6b e6       	ldi	r22, 0x6B	; 107
    5038:	75 e0       	ldi	r23, 0x05	; 5
    503a:	c3 01       	movw	r24, r6
    503c:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5040:	ae 01       	movw	r20, r28
    5042:	4f 5f       	subi	r20, 0xFF	; 255
    5044:	5f 4f       	sbci	r21, 0xFF	; 255
    5046:	60 e7       	ldi	r22, 0x70	; 112
    5048:	71 e0       	ldi	r23, 0x01	; 1
    504a:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    504e:	89 81       	ldd	r24, Y+1	; 0x01
    5050:	9a 81       	ldd	r25, Y+2	; 0x02
    5052:	20 e8       	ldi	r18, 0x80	; 128
    5054:	e2 2e       	mov	r14, r18
    5056:	f1 2c       	mov	r15, r1
    5058:	e8 1a       	sub	r14, r24
    505a:	f9 0a       	sbc	r15, r25
    505c:	f6 94       	lsr	r15
    505e:	e7 94       	ror	r14
    5060:	89 89       	ldd	r24, Y+17	; 0x11
    5062:	9a 89       	ldd	r25, Y+18	; 0x12
    5064:	e8 0e       	add	r14, r24
    5066:	f9 1e       	adc	r15, r25
    5068:	4a e0       	ldi	r20, 0x0A	; 10
    506a:	6b e6       	ldi	r22, 0x6B	; 107
    506c:	75 e0       	ldi	r23, 0x05	; 5
    506e:	c3 01       	movw	r24, r6
    5070:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <__itoa_ncheck>
    5074:	29 e1       	ldi	r18, 0x19	; 25
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	a7 01       	movw	r20, r14
    507a:	60 e7       	ldi	r22, 0x70	; 112
    507c:	71 e0       	ldi	r23, 0x01	; 1
    507e:	0e 94 94 33 	call	0x6728	; 0x6728 <mugui_lcd_puts>
    5082:	25 c0       	rjmp	.+74     	; 0x50ce <do_menu_item+0x18e>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    5084:	eb 89       	ldd	r30, Y+19	; 0x13
    5086:	fc 89       	ldd	r31, Y+20	; 0x14
    5088:	e6 0d       	add	r30, r6
    508a:	f7 1d       	adc	r31, r7
    508c:	ee 0f       	add	r30, r30
    508e:	ff 1f       	adc	r31, r31
    5090:	eb 5f       	subi	r30, 0xFB	; 251
    5092:	f1 4f       	sbci	r31, 0xF1	; 241
    5094:	85 91       	lpm	r24, Z+
    5096:	94 91       	lpm	r25, Z
    5098:	0e 94 c6 32 	call	0x658c	; 0x658c <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    509c:	ae 01       	movw	r20, r28
    509e:	4f 5f       	subi	r20, 0xFF	; 255
    50a0:	5f 4f       	sbci	r21, 0xFF	; 255
    50a2:	60 e7       	ldi	r22, 0x70	; 112
    50a4:	71 e0       	ldi	r23, 0x01	; 1
    50a6:	8b e6       	ldi	r24, 0x6B	; 107
    50a8:	95 e0       	ldi	r25, 0x05	; 5
    50aa:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    50ae:	89 81       	ldd	r24, Y+1	; 0x01
    50b0:	9a 81       	ldd	r25, Y+2	; 0x02
    50b2:	40 e8       	ldi	r20, 0x80	; 128
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	48 1b       	sub	r20, r24
    50b8:	59 0b       	sbc	r21, r25
    50ba:	56 95       	lsr	r21
    50bc:	47 95       	ror	r20
    50be:	29 e1       	ldi	r18, 0x19	; 25
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	60 e7       	ldi	r22, 0x70	; 112
    50c4:	71 e0       	ldi	r23, 0x01	; 1
    50c6:	8a 2d       	mov	r24, r10
    50c8:	86 0d       	add	r24, r6
    50ca:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    50d4:	85 e4       	ldi	r24, 0x45	; 69
    50d6:	91 e0       	ldi	r25, 0x01	; 1
    50d8:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    50dc:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    50de:	92 e0       	ldi	r25, 0x02	; 2
    50e0:	d9 16       	cp	r13, r25
    50e2:	29 f1       	breq	.+74     	; 0x512e <do_menu_item+0x1ee>
    50e4:	9d 15       	cp	r25, r13
    50e6:	68 f0       	brcs	.+26     	; 0x5102 <do_menu_item+0x1c2>
    50e8:	dd 20       	and	r13, r13
    50ea:	c9 f0       	breq	.+50     	; 0x511e <do_menu_item+0x1de>
    50ec:	e1 e0       	ldi	r30, 0x01	; 1
    50ee:	de 12       	cpse	r13, r30
    50f0:	2f c0       	rjmp	.+94     	; 0x5150 <do_menu_item+0x210>
    50f2:	9f e3       	ldi	r25, 0x3F	; 63
    50f4:	e2 e4       	ldi	r30, 0x42	; 66
    50f6:	ff e0       	ldi	r31, 0x0F	; 15
    50f8:	91 50       	subi	r25, 0x01	; 1
    50fa:	e0 40       	sbci	r30, 0x00	; 0
    50fc:	f0 40       	sbci	r31, 0x00	; 0
    50fe:	e1 f7       	brne	.-8      	; 0x50f8 <do_menu_item+0x1b8>
    5100:	25 c0       	rjmp	.+74     	; 0x514c <do_menu_item+0x20c>
    5102:	f3 e0       	ldi	r31, 0x03	; 3
    5104:	df 16       	cp	r13, r31
    5106:	d9 f0       	breq	.+54     	; 0x513e <do_menu_item+0x1fe>
    5108:	24 e0       	ldi	r18, 0x04	; 4
    510a:	d2 12       	cpse	r13, r18
    510c:	21 c0       	rjmp	.+66     	; 0x5150 <do_menu_item+0x210>
    510e:	ff e3       	ldi	r31, 0x3F	; 63
    5110:	22 e4       	ldi	r18, 0x42	; 66
    5112:	3f e0       	ldi	r19, 0x0F	; 15
    5114:	f1 50       	subi	r31, 0x01	; 1
    5116:	20 40       	sbci	r18, 0x00	; 0
    5118:	30 40       	sbci	r19, 0x00	; 0
    511a:	e1 f7       	brne	.-8      	; 0x5114 <do_menu_item+0x1d4>
    511c:	17 c0       	rjmp	.+46     	; 0x514c <do_menu_item+0x20c>
    511e:	3f e7       	ldi	r19, 0x7F	; 127
    5120:	5a e1       	ldi	r21, 0x1A	; 26
    5122:	86 e0       	ldi	r24, 0x06	; 6
    5124:	31 50       	subi	r19, 0x01	; 1
    5126:	50 40       	sbci	r21, 0x00	; 0
    5128:	80 40       	sbci	r24, 0x00	; 0
    512a:	e1 f7       	brne	.-8      	; 0x5124 <do_menu_item+0x1e4>
    512c:	0f c0       	rjmp	.+30     	; 0x514c <do_menu_item+0x20c>
    512e:	2f e7       	ldi	r18, 0x7F	; 127
    5130:	3a e1       	ldi	r19, 0x1A	; 26
    5132:	56 e0       	ldi	r21, 0x06	; 6
    5134:	21 50       	subi	r18, 0x01	; 1
    5136:	30 40       	sbci	r19, 0x00	; 0
    5138:	50 40       	sbci	r21, 0x00	; 0
    513a:	e1 f7       	brne	.-8      	; 0x5134 <do_menu_item+0x1f4>
    513c:	07 c0       	rjmp	.+14     	; 0x514c <do_menu_item+0x20c>
    513e:	8f e7       	ldi	r24, 0x7F	; 127
    5140:	98 e3       	ldi	r25, 0x38	; 56
    5142:	e1 e0       	ldi	r30, 0x01	; 1
    5144:	81 50       	subi	r24, 0x01	; 1
    5146:	90 40       	sbci	r25, 0x00	; 0
    5148:	e0 40       	sbci	r30, 0x00	; 0
    514a:	e1 f7       	brne	.-8      	; 0x5144 <do_menu_item+0x204>
    514c:	00 c0       	rjmp	.+0      	; 0x514e <do_menu_item+0x20e>
    514e:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    5150:	88 20       	and	r8, r8
    5152:	41 f0       	breq	.+16     	; 0x5164 <do_menu_item+0x224>
		{
			button = (PINB & 0xf0);	
    5154:	83 b1       	in	r24, 0x03	; 3
    5156:	80 7f       	andi	r24, 0xF0	; 240
    5158:	80 93 a6 07 	sts	0x07A6, r24
			button_multiplier = 1;
    515c:	51 e0       	ldi	r21, 0x01	; 1
    515e:	50 93 a7 07 	sts	0x07A7, r21
    5162:	03 c0       	rjmp	.+6      	; 0x516a <do_menu_item+0x22a>
		}
		else
		{
			poll_buttons(true);
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    516a:	80 91 a6 07 	lds	r24, 0x07A6
    516e:	80 3f       	cpi	r24, 0xF0	; 240
    5170:	39 f1       	breq	.+78     	; 0x51c0 <do_menu_item+0x280>
    5172:	88 20       	and	r8, r8
    5174:	c9 f0       	breq	.+50     	; 0x51a8 <do_menu_item+0x268>
		{
			button_lock = false;
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5176:	80 3d       	cpi	r24, 0xD0	; 208
    5178:	51 f4       	brne	.+20     	; 0x518e <do_menu_item+0x24e>
		{
			if (button_lock == false)
    517a:	51 10       	cpse	r5, r1
    517c:	43 c0       	rjmp	.+134    	; 0x5204 <do_menu_item+0x2c4>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    517e:	80 91 a7 07 	lds	r24, 0x07A7
    5182:	9a 85       	ldd	r25, Y+10	; 0x0a
    5184:	98 9f       	mul	r25, r24
    5186:	60 18       	sub	r6, r0
    5188:	71 08       	sbc	r7, r1
    518a:	11 24       	eor	r1, r1
    518c:	0b c0       	rjmp	.+22     	; 0x51a4 <do_menu_item+0x264>
				button_update = 0;
			}
		}

		if (button == UP)
    518e:	80 3b       	cpi	r24, 0xB0	; 176
    5190:	81 f4       	brne	.+32     	; 0x51b2 <do_menu_item+0x272>
		{
			if (button_lock == false)
    5192:	51 10       	cpse	r5, r1
    5194:	37 c0       	rjmp	.+110    	; 0x5204 <do_menu_item+0x2c4>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    5196:	80 91 a7 07 	lds	r24, 0x07A7
    519a:	ea 85       	ldd	r30, Y+10	; 0x0a
    519c:	e8 9f       	mul	r30, r24
    519e:	60 0c       	add	r6, r0
    51a0:	71 1c       	adc	r7, r1
    51a2:	11 24       	eor	r1, r1
				button_update = 0;
    51a4:	41 2c       	mov	r4, r1
    51a6:	2e c0       	rjmp	.+92     	; 0x5204 <do_menu_item+0x2c4>
		{
			button_lock = false;
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    51a8:	80 3d       	cpi	r24, 0xD0	; 208
    51aa:	49 f3       	breq	.-46     	; 0x517e <do_menu_item+0x23e>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    51ac:	80 3b       	cpi	r24, 0xB0	; 176
    51ae:	99 f3       	breq	.-26     	; 0x5196 <do_menu_item+0x256>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    51b0:	51 2c       	mov	r5, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    51b2:	80 37       	cpi	r24, 0x70	; 112
    51b4:	29 f4       	brne	.+10     	; 0x51c0 <do_menu_item+0x280>
		{
			value = (range.default_value * mult);
    51b6:	29 85       	ldd	r18, Y+9	; 0x09
    51b8:	3b 2d       	mov	r19, r11
    51ba:	23 03       	mulsu	r18, r19
    51bc:	30 01       	movw	r6, r0
    51be:	11 24       	eor	r1, r1
    51c0:	62 14       	cp	r6, r2
    51c2:	73 04       	cpc	r7, r3
    51c4:	0c f4       	brge	.+2      	; 0x51c8 <do_menu_item+0x288>
    51c6:	31 01       	movw	r6, r2
    51c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    51cc:	86 15       	cp	r24, r6
    51ce:	97 05       	cpc	r25, r7
    51d0:	0c f4       	brge	.+2      	; 0x51d4 <do_menu_item+0x294>
    51d2:	3c 01       	movw	r6, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    51d4:	97 ea       	ldi	r25, 0xA7	; 167
    51d6:	99 12       	cpse	r9, r25
    51d8:	03 c0       	rjmp	.+6      	; 0x51e0 <do_menu_item+0x2a0>
		{
			st7565_set_brightness(value);
    51da:	86 2d       	mov	r24, r6
    51dc:	0e 94 13 18 	call	0x3026	; 0x3026 <st7565_set_brightness>
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	f8 ce       	rjmp	.-528    	; 0x4fd4 <do_menu_item+0x94>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    51e4:	e2 e0       	ldi	r30, 0x02	; 2
    51e6:	de 12       	cpse	r13, r30
    51e8:	06 c0       	rjmp	.+12     	; 0x51f6 <do_menu_item+0x2b6>
	{
		value = value / mult;
    51ea:	c3 01       	movw	r24, r6
    51ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    51ee:	78 89       	ldd	r23, Y+16	; 0x10
    51f0:	0e 94 c1 3d 	call	0x7b82	; 0x7b82 <__divmodhi4>
    51f4:	3b 01       	movw	r6, r22
	}

	*values = (int8_t)value;
    51f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    51f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    51fa:	60 82       	st	Z, r6
}
    51fc:	64 96       	adiw	r28, 0x14	; 20
    51fe:	e2 e1       	ldi	r30, 0x12	; 18
    5200:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    5204:	55 24       	eor	r5, r5
    5206:	53 94       	inc	r5
    5208:	db cf       	rjmp	.-74     	; 0x51c0 <do_menu_item+0x280>

0000520a <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	98 17       	cp	r25, r24
    520e:	81 f0       	breq	.+32     	; 0x5230 <menu_beep+0x26>
	{ 
		LVA = 1;
    5210:	29 9a       	sbi	0x05, 1	; 5
    5212:	ef e0       	ldi	r30, 0x0F	; 15
    5214:	f7 e2       	ldi	r31, 0x27	; 39
    5216:	31 97       	sbiw	r30, 0x01	; 1
    5218:	f1 f7       	brne	.-4      	; 0x5216 <menu_beep+0xc>
    521a:	00 c0       	rjmp	.+0      	; 0x521c <menu_beep+0x12>
    521c:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    521e:	29 98       	cbi	0x05, 1	; 5
    5220:	ef e0       	ldi	r30, 0x0F	; 15
    5222:	f7 e2       	ldi	r31, 0x27	; 39
    5224:	31 97       	sbiw	r30, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <menu_beep+0x1a>
    5228:	00 c0       	rjmp	.+0      	; 0x522a <menu_beep+0x20>
    522a:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    522c:	9f 5f       	subi	r25, 0xFF	; 255
    522e:	ee cf       	rjmp	.-36     	; 0x520c <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    5230:	08 95       	ret

00005232 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint8_t* top, uint8_t* temp)
{
    5232:	a3 e0       	ldi	r26, 0x03	; 3
    5234:	b0 e0       	ldi	r27, 0x00	; 0
    5236:	ef e1       	ldi	r30, 0x1F	; 31
    5238:	f9 e2       	ldi	r31, 0x29	; 41
    523a:	0c 94 35 3e 	jmp	0x7c6a	; 0x7c6a <__prologue_saves__+0x14>
    523e:	58 2f       	mov	r21, r24
    5240:	f6 01       	movw	r30, r12
	// Temporarily add in offset :(
	*top = *top + offset;
    5242:	d7 01       	movw	r26, r14
    5244:	9c 91       	ld	r25, X
    5246:	94 0f       	add	r25, r20
    5248:	9c 93       	st	X, r25
	start = start + offset;
    524a:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    524c:	20 3e       	cpi	r18, 0xE0	; 224
    524e:	a1 f4       	brne	.+40     	; 0x5278 <update_menu+0x46>
	{
		switch(*cursor) 
    5250:	d8 01       	movw	r26, r16
    5252:	8c 91       	ld	r24, X
    5254:	8f 30       	cpi	r24, 0x0F	; 15
    5256:	59 f0       	breq	.+22     	; 0x526e <update_menu+0x3c>
    5258:	18 f4       	brcc	.+6      	; 0x5260 <update_menu+0x2e>
    525a:	83 30       	cpi	r24, 0x03	; 3
    525c:	49 f0       	breq	.+18     	; 0x5270 <update_menu+0x3e>
    525e:	4b c0       	rjmp	.+150    	; 0x52f6 <update_menu+0xc4>
    5260:	8b 31       	cpi	r24, 0x1B	; 27
    5262:	41 f0       	breq	.+16     	; 0x5274 <update_menu+0x42>
    5264:	87 32       	cpi	r24, 0x27	; 39
    5266:	09 f0       	breq	.+2      	; 0x526a <update_menu+0x38>
    5268:	46 c0       	rjmp	.+140    	; 0x52f6 <update_menu+0xc4>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    526a:	9d 5f       	subi	r25, 0xFD	; 253
    526c:	01 c0       	rjmp	.+2      	; 0x5270 <update_menu+0x3e>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    526e:	9f 5f       	subi	r25, 0xFF	; 255
    5270:	90 83       	st	Z, r25
				break;	
    5272:	41 c0       	rjmp	.+130    	; 0x52f6 <update_menu+0xc4>
			case LINE2:
				*temp = *top + 2;
    5274:	9e 5f       	subi	r25, 0xFE	; 254
    5276:	fc cf       	rjmp	.-8      	; 0x5270 <update_menu+0x3e>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    5278:	20 3d       	cpi	r18, 0xD0	; 208
    527a:	f9 f4       	brne	.+62     	; 0x52ba <update_menu+0x88>
	{
		switch(*cursor) 
    527c:	f8 01       	movw	r30, r16
    527e:	80 81       	ld	r24, Z
    5280:	8f 30       	cpi	r24, 0x0F	; 15
    5282:	69 f0       	breq	.+26     	; 0x529e <update_menu+0x6c>
    5284:	18 f4       	brcc	.+6      	; 0x528c <update_menu+0x5a>
    5286:	83 30       	cpi	r24, 0x03	; 3
    5288:	31 f0       	breq	.+12     	; 0x5296 <update_menu+0x64>
    528a:	15 c0       	rjmp	.+42     	; 0x52b6 <update_menu+0x84>
    528c:	8b 31       	cpi	r24, 0x1B	; 27
    528e:	59 f0       	breq	.+22     	; 0x52a6 <update_menu+0x74>
    5290:	87 32       	cpi	r24, 0x27	; 39
    5292:	69 f0       	breq	.+26     	; 0x52ae <update_menu+0x7c>
    5294:	10 c0       	rjmp	.+32     	; 0x52b6 <update_menu+0x84>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    5296:	52 30       	cpi	r21, 0x02	; 2
    5298:	70 f1       	brcs	.+92     	; 0x52f6 <update_menu+0xc4>
    529a:	8f e0       	ldi	r24, 0x0F	; 15
    529c:	27 c0       	rjmp	.+78     	; 0x52ec <update_menu+0xba>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    529e:	53 30       	cpi	r21, 0x03	; 3
    52a0:	50 f1       	brcs	.+84     	; 0x52f6 <update_menu+0xc4>
    52a2:	8b e1       	ldi	r24, 0x1B	; 27
    52a4:	1f c0       	rjmp	.+62     	; 0x52e4 <update_menu+0xb2>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    52a6:	54 30       	cpi	r21, 0x04	; 4
    52a8:	30 f1       	brcs	.+76     	; 0x52f6 <update_menu+0xc4>
    52aa:	87 e2       	ldi	r24, 0x27	; 39
    52ac:	1f c0       	rjmp	.+62     	; 0x52ec <update_menu+0xba>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    52ae:	55 30       	cpi	r21, 0x05	; 5
    52b0:	10 f1       	brcs	.+68     	; 0x52f6 <update_menu+0xc4>
    52b2:	88 e2       	ldi	r24, 0x28	; 40
    52b4:	17 c0       	rjmp	.+46     	; 0x52e4 <update_menu+0xb2>
				break;
			default:
				*cursor = NEXTLINE;
    52b6:	88 e2       	ldi	r24, 0x28	; 40
    52b8:	19 c0       	rjmp	.+50     	; 0x52ec <update_menu+0xba>
				break;
		}
	}

	if (button == UP)	
    52ba:	20 3b       	cpi	r18, 0xB0	; 176
    52bc:	d1 f4       	brne	.+52     	; 0x52f2 <update_menu+0xc0>
	{
		switch(*cursor) 
    52be:	f8 01       	movw	r30, r16
    52c0:	80 81       	ld	r24, Z
    52c2:	8f 30       	cpi	r24, 0x0F	; 15
    52c4:	69 f0       	breq	.+26     	; 0x52e0 <update_menu+0xae>
    52c6:	20 f4       	brcc	.+8      	; 0x52d0 <update_menu+0x9e>
    52c8:	83 30       	cpi	r24, 0x03	; 3
    52ca:	79 f4       	brne	.+30     	; 0x52ea <update_menu+0xb8>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    52cc:	82 e0       	ldi	r24, 0x02	; 2
    52ce:	0a c0       	rjmp	.+20     	; 0x52e4 <update_menu+0xb2>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    52d0:	8b 31       	cpi	r24, 0x1B	; 27
    52d2:	21 f0       	breq	.+8      	; 0x52dc <update_menu+0xaa>
    52d4:	87 32       	cpi	r24, 0x27	; 39
    52d6:	49 f4       	brne	.+18     	; 0x52ea <update_menu+0xb8>
		{
			case LINE3:
				*cursor = LINE2;
    52d8:	8b e1       	ldi	r24, 0x1B	; 27
    52da:	08 c0       	rjmp	.+16     	; 0x52ec <update_menu+0xba>
				break;	
			case LINE2:
				*cursor = LINE1;
    52dc:	8f e0       	ldi	r24, 0x0F	; 15
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <update_menu+0xb2>
				break;
			case LINE1:
				*cursor = LINE0;
    52e0:	83 e0       	ldi	r24, 0x03	; 3
    52e2:	04 c0       	rjmp	.+8      	; 0x52ec <update_menu+0xba>
				break;
			case LINE0:
				*cursor = PREVLINE;
    52e4:	f8 01       	movw	r30, r16
    52e6:	80 83       	st	Z, r24
				break;
    52e8:	06 c0       	rjmp	.+12     	; 0x52f6 <update_menu+0xc4>
			default:
				*cursor = PREVLINE;
    52ea:	82 e0       	ldi	r24, 0x02	; 2
    52ec:	d8 01       	movw	r26, r16
    52ee:	8c 93       	st	X, r24
				break;
    52f0:	02 c0       	rjmp	.+4      	; 0x52f6 <update_menu+0xc4>
		}
	}
	
	if (button != NONE)
    52f2:	20 3f       	cpi	r18, 0xF0	; 240
    52f4:	91 f0       	breq	.+36     	; 0x531a <update_menu+0xe8>
	{
		menu_beep(1);
    52f6:	81 e0       	ldi	r24, 0x01	; 1
    52f8:	4b 83       	std	Y+3, r20	; 0x03
    52fa:	5a 83       	std	Y+2, r21	; 0x02
    52fc:	69 83       	std	Y+1, r22	; 0x01
    52fe:	0e 94 05 29 	call	0x520a	; 0x520a <menu_beep>
    5302:	bf ef       	ldi	r27, 0xFF	; 255
    5304:	e4 e3       	ldi	r30, 0x34	; 52
    5306:	fc e0       	ldi	r31, 0x0C	; 12
    5308:	b1 50       	subi	r27, 0x01	; 1
    530a:	e0 40       	sbci	r30, 0x00	; 0
    530c:	f0 40       	sbci	r31, 0x00	; 0
    530e:	e1 f7       	brne	.-8      	; 0x5308 <update_menu+0xd6>
    5310:	00 c0       	rjmp	.+0      	; 0x5312 <update_menu+0xe0>
    5312:	00 00       	nop
    5314:	69 81       	ldd	r22, Y+1	; 0x01
    5316:	5a 81       	ldd	r21, Y+2	; 0x02
    5318:	4b 81       	ldd	r20, Y+3	; 0x03
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up
    531a:	d8 01       	movw	r26, r16
    531c:	8c 91       	ld	r24, X
    531e:	82 30       	cpi	r24, 0x02	; 2
    5320:	41 f4       	brne	.+16     	; 0x5332 <update_menu+0x100>
	{
		*cursor  = LINE0;
    5322:	83 e0       	ldi	r24, 0x03	; 3
    5324:	8c 93       	st	X, r24
		if (*top > start)
    5326:	f7 01       	movw	r30, r14
    5328:	80 81       	ld	r24, Z
    532a:	68 17       	cp	r22, r24
    532c:	10 f4       	brcc	.+4      	; 0x5332 <update_menu+0x100>
		{
			*top = *top - 1;								// Shuffle list up
    532e:	81 50       	subi	r24, 0x01	; 1
    5330:	80 83       	st	Z, r24
		}
	}

	if (*cursor == NEXTLINE)								// Down
    5332:	d8 01       	movw	r26, r16
    5334:	8c 91       	ld	r24, X
    5336:	88 32       	cpi	r24, 0x28	; 40
    5338:	91 f4       	brne	.+36     	; 0x535e <update_menu+0x12c>
	{
		*cursor  = LINE3;
    533a:	87 e2       	ldi	r24, 0x27	; 39
    533c:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    533e:	f7 01       	movw	r30, r14
    5340:	70 81       	ld	r23, Z
    5342:	27 2f       	mov	r18, r23
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	2d 5f       	subi	r18, 0xFD	; 253
    5348:	3f 4f       	sbci	r19, 0xFF	; 255
    534a:	85 2f       	mov	r24, r21
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	86 0f       	add	r24, r22
    5350:	91 1d       	adc	r25, r1
    5352:	01 97       	sbiw	r24, 0x01	; 1
    5354:	28 17       	cp	r18, r24
    5356:	39 07       	cpc	r19, r25
    5358:	10 f4       	brcc	.+4      	; 0x535e <update_menu+0x12c>
		{
			*top = *top + 1;								// Shuffle list down
    535a:	7f 5f       	subi	r23, 0xFF	; 255
    535c:	70 83       	st	Z, r23
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    535e:	d7 01       	movw	r26, r14
    5360:	8c 91       	ld	r24, X
    5362:	84 1b       	sub	r24, r20
    5364:	8c 93       	st	X, r24
}
    5366:	23 96       	adiw	r28, 0x03	; 3
    5368:	e8 e0       	ldi	r30, 0x08	; 8
    536a:	0c 94 51 3e 	jmp	0x7ca2	; 0x7ca2 <__epilogue_restores__+0x14>

0000536e <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    536e:	28 2f       	mov	r18, r24
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	43 e0       	ldi	r20, 0x03	; 3
    5374:	50 e0       	ldi	r21, 0x00	; 0
    5376:	66 e0       	ldi	r22, 0x06	; 6
    5378:	71 e0       	ldi	r23, 0x01	; 1
    537a:	8d e0       	ldi	r24, 0x0D	; 13
    537c:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
    5380:	08 95       	ret

00005382 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint8_t top, uint8_t start, int8_t values[], uint8_t mult, const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    5382:	a9 e0       	ldi	r26, 0x09	; 9
    5384:	b0 e0       	ldi	r27, 0x00	; 0
    5386:	e7 ec       	ldi	r30, 0xC7	; 199
    5388:	f9 e2       	ldi	r31, 0x29	; 41
    538a:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
    538e:	38 2e       	mov	r3, r24
    5390:	3a 01       	movw	r6, r20
    5392:	22 2e       	mov	r2, r18
    5394:	28 01       	movw	r4, r16
    5396:	ee 82       	std	Y+6, r14	; 0x06
    5398:	cf 82       	std	Y+7, r12	; 0x07
    539a:	88 86       	std	Y+8, r8	; 0x08
	menu_range_t	range1;
	uint8_t multiplier;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    539c:	85 e4       	ldi	r24, 0x45	; 69
    539e:	91 e0       	ldi	r25, 0x01	; 1
    53a0:	69 87       	std	Y+9, r22	; 0x09
    53a2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>
	print_menu_frame(0);
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <print_menu_frame>
    53ac:	23 2d       	mov	r18, r3
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	69 85       	ldd	r22, Y+9	; 0x09
    53b2:	86 2f       	mov	r24, r22
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	68 01       	movw	r12, r16
    53b8:	45 e0       	ldi	r20, 0x05	; 5
    53ba:	64 9f       	mul	r22, r20
    53bc:	c0 18       	sub	r12, r0
    53be:	d1 08       	sbc	r13, r1
    53c0:	11 24       	eor	r1, r1
    53c2:	e5 e0       	ldi	r30, 0x05	; 5
    53c4:	3e 9e       	mul	r3, r30
    53c6:	c0 0c       	add	r12, r0
    53c8:	d1 1c       	adc	r13, r1
    53ca:	11 24       	eor	r1, r1
    53cc:	81 2c       	mov	r8, r1
    53ce:	91 2c       	mov	r9, r1
    53d0:	e1 2c       	mov	r14, r1
    53d2:	f1 2c       	mov	r15, r1
    53d4:	a8 1a       	sub	r10, r24
    53d6:	b9 0a       	sbc	r11, r25
    53d8:	a2 0e       	add	r10, r18
    53da:	b3 1e       	adc	r11, r19
    53dc:	28 1b       	sub	r18, r24
    53de:	39 0b       	sbc	r19, r25
    53e0:	62 0e       	add	r6, r18
    53e2:	73 1e       	adc	r7, r19
    53e4:	87 01       	movw	r16, r14
    53e6:	09 54       	subi	r16, 0x49	; 73
    53e8:	19 4e       	sbci	r17, 0xE9	; 233
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    53ea:	f8 01       	movw	r30, r16
    53ec:	24 91       	lpm	r18, Z
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	4a e0       	ldi	r20, 0x0A	; 10
    53f2:	50 e0       	ldi	r21, 0x00	; 0
    53f4:	6e e1       	ldi	r22, 0x1E	; 30
    53f6:	7a e0       	ldi	r23, 0x0A	; 10
    53f8:	83 2d       	mov	r24, r3
    53fa:	8e 0d       	add	r24, r14
    53fc:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5400:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    5402:	45 e0       	ldi	r20, 0x05	; 5
    5404:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5406:	f1 11       	cpse	r31, r1
    5408:	04 c0       	rjmp	.+8      	; 0x5412 <print_menu_items+0x90>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    540a:	b4 01       	movw	r22, r8
    540c:	6c 0d       	add	r22, r12
    540e:	7d 1d       	adc	r23, r13
    5410:	01 c0       	rjmp	.+2      	; 0x5414 <print_menu_items+0x92>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    5412:	b2 01       	movw	r22, r4
    5414:	ce 01       	movw	r24, r28
    5416:	01 96       	adiw	r24, 0x01	; 1
    5418:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <memcpy_P>
		}
	
		if (range1.style == 2)
    541c:	6c 81       	ldd	r22, Y+4	; 0x04
    541e:	62 30       	cpi	r22, 0x02	; 2
    5420:	11 f0       	breq	.+4      	; 0x5426 <print_menu_items+0xa4>
		{
			multiplier = mult;
		}
		else
		{
			multiplier = 1;
    5422:	31 e0       	ldi	r19, 0x01	; 1
    5424:	01 c0       	rjmp	.+2      	; 0x5428 <print_menu_items+0xa6>
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}
	
		if (range1.style == 2)
		{
			multiplier = mult;
    5426:	32 2d       	mov	r19, r2
		else
		{
			multiplier = 1;
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    5428:	f8 01       	movw	r30, r16
    542a:	04 91       	lpm	r16, Z
    542c:	f5 01       	movw	r30, r10
    542e:	ee 0d       	add	r30, r14
    5430:	ff 1d       	adc	r31, r15
    5432:	44 91       	lpm	r20, Z
    5434:	d3 01       	movw	r26, r6
    5436:	ae 0d       	add	r26, r14
    5438:	bf 1d       	adc	r27, r15
    543a:	5c 91       	ld	r21, X
    543c:	45 0f       	add	r20, r21
    543e:	2f 81       	ldd	r18, Y+7	; 0x07
    5440:	53 03       	mulsu	r21, r19
    5442:	c0 01       	movw	r24, r0
    5444:	11 24       	eor	r1, r1
    5446:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <print_menu_text>
    544a:	ff ef       	ldi	r31, 0xFF	; 255
    544c:	ef 1a       	sub	r14, r31
    544e:	ff 0a       	sbc	r15, r31
    5450:	45 e0       	ldi	r20, 0x05	; 5
    5452:	84 0e       	add	r8, r20
    5454:	91 1c       	adc	r9, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    5456:	84 e0       	ldi	r24, 0x04	; 4
    5458:	e8 16       	cp	r14, r24
    545a:	f1 04       	cpc	r15, r1
    545c:	09 f0       	breq	.+2      	; 0x5460 <print_menu_items+0xde>
    545e:	c2 cf       	rjmp	.-124    	; 0x53e4 <print_menu_items+0x62>
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    5460:	88 85       	ldd	r24, Y+8	; 0x08
    5462:	0e 94 b7 29 	call	0x536e	; 0x536e <print_cursor>
	write_buffer(buffer);
    5466:	85 e4       	ldi	r24, 0x45	; 69
    5468:	91 e0       	ldi	r25, 0x01	; 1
    546a:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>
	poll_buttons(true);
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <poll_buttons>
}
    5474:	29 96       	adiw	r28, 0x09	; 9
    5476:	e2 e1       	ldi	r30, 0x12	; 18
    5478:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

0000547c <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    547c:	af e0       	ldi	r26, 0x0F	; 15
    547e:	b0 e0       	ldi	r27, 0x00	; 0
    5480:	e4 e4       	ldi	r30, 0x44	; 68
    5482:	fa e2       	ldi	r31, 0x2A	; 42
    5484:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
	int8_t temp_gyro_roll = 0;
	int8_t temp_gyro_pitch = 0;
	int8_t temp_gyro_yaw = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5488:	90 91 a8 07 	lds	r25, 0x07A8
    548c:	99 23       	and	r25, r25
    548e:	29 f0       	breq	.+10     	; 0x549a <menu_flight+0x1e>
	{
		sub_top = FLIGHTSTART;
    5490:	90 ec       	ldi	r25, 0xC0	; 192
    5492:	90 93 2c 01 	sts	0x012C, r25
		menu_flag = 0;
    5496:	10 92 a8 07 	sts	0x07A8, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	46 e1       	ldi	r20, 0x16	; 22
    54a0:	48 9f       	mul	r20, r24
    54a2:	90 01       	movw	r18, r0
    54a4:	49 9f       	mul	r20, r25
    54a6:	30 0d       	add	r19, r0
    54a8:	11 24       	eor	r1, r1
    54aa:	c9 01       	movw	r24, r18
    54ac:	85 5e       	subi	r24, 0xE5	; 229
    54ae:	99 4f       	sbci	r25, 0xF9	; 249
    54b0:	9f 83       	std	Y+7, r25	; 0x07
    54b2:	8e 83       	std	Y+6, r24	; 0x06

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
    54b4:	f9 01       	movw	r30, r18
    54b6:	ee 53       	subi	r30, 0x3E	; 62
    54b8:	fa 4f       	sbci	r31, 0xFA	; 250
    54ba:	2f 01       	movw	r4, r30
    54bc:	1f 01       	movw	r2, r30
    54be:	fb e5       	ldi	r31, 0x5B	; 91
    54c0:	2f 0e       	add	r2, r31
    54c2:	31 1c       	adc	r3, r1

		// Preset I-limits when gyro mode changes
		if (button == ENTER)
		{
			// If roll gyro type has changed, reset to an appropriate start point
			if (temp_gyro_roll != Config.FlightMode[mode-1].Roll_type)
    54c4:	32 01       	movw	r6, r4
    54c6:	3f 86       	std	Y+15, r3	; 0x0f
    54c8:	2e 86       	std	Y+14, r2	; 0x0e
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
		temp_gyro_pitch = Config.FlightMode[mode - 1].Pitch_type;
    54ca:	c2 01       	movw	r24, r4
    54cc:	8e 59       	subi	r24, 0x9E	; 158
    54ce:	9f 4f       	sbci	r25, 0xFF	; 255
    54d0:	9b 87       	std	Y+11, r25	; 0x0b
    54d2:	8a 87       	std	Y+10, r24	; 0x0a
		temp_gyro_yaw = Config.FlightMode[mode - 1].Yaw_type;
    54d4:	f2 01       	movw	r30, r4
    54d6:	e7 59       	subi	r30, 0x97	; 151
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
    54da:	fd 87       	std	Y+13, r31	; 0x0d
    54dc:	ec 87       	std	Y+12, r30	; 0x0c
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    54de:	80 91 a6 07 	lds	r24, 0x07A6
    54e2:	80 37       	cpi	r24, 0x70	; 112
    54e4:	09 f4       	brne	.+2      	; 0x54e8 <menu_flight+0x6c>
    54e6:	93 c0       	rjmp	.+294    	; 0x560e <menu_flight+0x192>
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
    54e8:	f1 01       	movw	r30, r2
    54ea:	90 80       	ld	r9, Z
		temp_gyro_pitch = Config.FlightMode[mode - 1].Pitch_type;
    54ec:	ea 85       	ldd	r30, Y+10	; 0x0a
    54ee:	fb 85       	ldd	r31, Y+11	; 0x0b
    54f0:	f0 81       	ld	r31, Z
    54f2:	f9 87       	std	Y+9, r31	; 0x09
		temp_gyro_yaw = Config.FlightMode[mode - 1].Yaw_type;
    54f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    54f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    54f8:	f0 81       	ld	r31, Z
    54fa:	f8 87       	std	Y+8, r31	; 0x08

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, 1, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    54fc:	80 90 04 01 	lds	r8, 0x0104
    5500:	89 e2       	ldi	r24, 0x29	; 41
    5502:	a8 2e       	mov	r10, r24
    5504:	87 e1       	ldi	r24, 0x17	; 23
    5506:	b8 2e       	mov	r11, r24
    5508:	9f e4       	ldi	r25, 0x4F	; 79
    550a:	c9 2e       	mov	r12, r25
    550c:	e1 2c       	mov	r14, r1
    550e:	0b eb       	ldi	r16, 0xBB	; 187
    5510:	16 e1       	ldi	r17, 0x16	; 22
    5512:	21 e0       	ldi	r18, 0x01	; 1
    5514:	4e 81       	ldd	r20, Y+6	; 0x06
    5516:	5f 81       	ldd	r21, Y+7	; 0x07
    5518:	60 ec       	ldi	r22, 0xC0	; 192
    551a:	80 91 2c 01 	lds	r24, 0x012C
    551e:	0e 94 c1 29 	call	0x5382	; 0x5382 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5522:	29 e2       	ldi	r18, 0x29	; 41
    5524:	c2 2e       	mov	r12, r18
    5526:	21 e0       	ldi	r18, 0x01	; 1
    5528:	d2 2e       	mov	r13, r18
    552a:	3c e2       	ldi	r19, 0x2C	; 44
    552c:	e3 2e       	mov	r14, r19
    552e:	31 e0       	ldi	r19, 0x01	; 1
    5530:	f3 2e       	mov	r15, r19
    5532:	04 e0       	ldi	r16, 0x04	; 4
    5534:	11 e0       	ldi	r17, 0x01	; 1
    5536:	20 91 a6 07 	lds	r18, 0x07A6
    553a:	40 e0       	ldi	r20, 0x00	; 0
    553c:	60 ec       	ldi	r22, 0xC0	; 192
    553e:	86 e1       	ldi	r24, 0x16	; 22
    5540:	0e 94 19 29 	call	0x5232	; 0x5232 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    5544:	60 91 29 01 	lds	r22, 0x0129
    5548:	60 5c       	subi	r22, 0xC0	; 192
    554a:	8b eb       	ldi	r24, 0xBB	; 187
    554c:	96 e1       	ldi	r25, 0x16	; 22
    554e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <get_menu_range>
    5552:	29 83       	std	Y+1, r18	; 0x01
    5554:	3a 83       	std	Y+2, r19	; 0x02
    5556:	4b 83       	std	Y+3, r20	; 0x03
    5558:	5c 83       	std	Y+4, r21	; 0x04
    555a:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    555c:	80 91 a6 07 	lds	r24, 0x07A6
    5560:	80 3e       	cpi	r24, 0xE0	; 224
    5562:	e9 f4       	brne	.+58     	; 0x559e <menu_flight+0x122>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    5564:	80 91 29 01 	lds	r24, 0x0129
    5568:	e8 2f       	mov	r30, r24
    556a:	f0 e0       	ldi	r31, 0x00	; 0
    556c:	e7 59       	subi	r30, 0x97	; 151
    556e:	f9 4e       	sbci	r31, 0xE9	; 233
    5570:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    5572:	68 2f       	mov	r22, r24
    5574:	70 e0       	ldi	r23, 0x00	; 0
    5576:	60 5c       	subi	r22, 0xC0	; 192
    5578:	71 09       	sbc	r23, r1
    557a:	2e 81       	ldd	r18, Y+6	; 0x06
    557c:	3f 81       	ldd	r19, Y+7	; 0x07
    557e:	62 0f       	add	r22, r18
    5580:	73 1f       	adc	r23, r19
    5582:	1f 92       	push	r1
    5584:	1f 92       	push	r1
    5586:	81 2c       	mov	r8, r1
    5588:	c1 2c       	mov	r12, r1
    558a:	e9 80       	ldd	r14, Y+1	; 0x01
    558c:	fa 80       	ldd	r15, Y+2	; 0x02
    558e:	0b 81       	ldd	r16, Y+3	; 0x03
    5590:	1c 81       	ldd	r17, Y+4	; 0x04
    5592:	2d 81       	ldd	r18, Y+5	; 0x05
    5594:	41 e0       	ldi	r20, 0x01	; 1
    5596:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <do_menu_item>
    559a:	0f 90       	pop	r0
    559c:	0f 90       	pop	r0
		}

		// Preset I-limits when gyro mode changes
		if (button == ENTER)
    559e:	80 91 a6 07 	lds	r24, 0x07A6
    55a2:	80 3e       	cpi	r24, 0xE0	; 224
    55a4:	09 f0       	breq	.+2      	; 0x55a8 <menu_flight+0x12c>
    55a6:	9b cf       	rjmp	.-202    	; 0x54de <menu_flight+0x62>
		{
			// If roll gyro type has changed, reset to an appropriate start point
			if (temp_gyro_roll != Config.FlightMode[mode-1].Roll_type)
    55a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    55aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    55ac:	80 81       	ld	r24, Z
    55ae:	98 16       	cp	r9, r24
    55b0:	49 f0       	breq	.+18     	; 0x55c4 <menu_flight+0x148>
    55b2:	f3 01       	movw	r30, r6
    55b4:	e1 5a       	subi	r30, 0xA1	; 161
    55b6:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				// Use Gyro type value to preset limits
				if(Config.FlightMode[mode-1].Roll_type == LOCK)
    55b8:	81 30       	cpi	r24, 0x01	; 1
    55ba:	19 f4       	brne	.+6      	; 0x55c2 <menu_flight+0x146>
				{
					Config.FlightMode[mode - 1].Roll_limit = 125;
    55bc:	8d e7       	ldi	r24, 0x7D	; 125
    55be:	80 83       	st	Z, r24
    55c0:	01 c0       	rjmp	.+2      	; 0x55c4 <menu_flight+0x148>
				}
				else
				{
					Config.FlightMode[mode - 1].Roll_limit = 0;
    55c2:	10 82       	st	Z, r1
				}
			}

			if (temp_gyro_pitch != Config.FlightMode[mode-1].Pitch_type)
    55c4:	f3 01       	movw	r30, r6
    55c6:	ee 59       	subi	r30, 0x9E	; 158
    55c8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ca:	80 81       	ld	r24, Z
    55cc:	f9 85       	ldd	r31, Y+9	; 0x09
    55ce:	f8 17       	cp	r31, r24
    55d0:	49 f0       	breq	.+18     	; 0x55e4 <menu_flight+0x168>
    55d2:	f3 01       	movw	r30, r6
    55d4:	ea 59       	subi	r30, 0x9A	; 154
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if(Config.FlightMode[mode-1].Pitch_type == LOCK)
    55d8:	81 30       	cpi	r24, 0x01	; 1
    55da:	19 f4       	brne	.+6      	; 0x55e2 <menu_flight+0x166>
				{
					Config.FlightMode[mode - 1].Pitch_limit = 125;
    55dc:	8d e7       	ldi	r24, 0x7D	; 125
    55de:	80 83       	st	Z, r24
    55e0:	01 c0       	rjmp	.+2      	; 0x55e4 <menu_flight+0x168>
				}
				else
				{
					Config.FlightMode[mode - 1].Pitch_limit = 0;
    55e2:	10 82       	st	Z, r1
				}
			}

			if (temp_gyro_yaw != Config.FlightMode[mode-1].Yaw_type)
    55e4:	f3 01       	movw	r30, r6
    55e6:	e7 59       	subi	r30, 0x97	; 151
    55e8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ea:	80 81       	ld	r24, Z
    55ec:	28 85       	ldd	r18, Y+8	; 0x08
    55ee:	28 17       	cp	r18, r24
    55f0:	39 f0       	breq	.+14     	; 0x5600 <menu_flight+0x184>
    55f2:	34 96       	adiw	r30, 0x04	; 4
			{
				if(Config.FlightMode[mode-1].Yaw_type == LOCK)
    55f4:	81 30       	cpi	r24, 0x01	; 1
    55f6:	19 f4       	brne	.+6      	; 0x55fe <menu_flight+0x182>
				{
					Config.FlightMode[mode - 1].Yaw_limit = 125;
    55f8:	8d e7       	ldi	r24, 0x7D	; 125
    55fa:	80 83       	st	Z, r24
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <menu_flight+0x184>
				}
				else
				{
					Config.FlightMode[mode - 1].Yaw_limit = 0;
    55fe:	10 82       	st	Z, r1
				}
			}

			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    5600:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <UpdateLimits>

			Save_Config_to_EEPROM(); // Save value and return
    5604:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5608:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <Wait_BUTTON4>
    560c:	5e cf       	rjmp	.-324    	; 0x54ca <menu_flight+0x4e>
		}
	}
}
    560e:	2f 96       	adiw	r28, 0x0f	; 15
    5610:	e2 e1       	ldi	r30, 0x12	; 18
    5612:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

00005616 <do_main_menu_item>:
}


void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	fc 01       	movw	r30, r24
    561a:	ed 54       	subi	r30, 0x4D	; 77
    561c:	f1 09       	sbc	r31, r1
    561e:	e7 31       	cpi	r30, 0x17	; 23
    5620:	f1 05       	cpc	r31, r1
    5622:	e8 f5       	brcc	.+122    	; 0x569e <do_main_menu_item+0x88>
    5624:	e7 5b       	subi	r30, 0xB7	; 183
    5626:	ff 4f       	sbci	r31, 0xFF	; 255
    5628:	0c 94 f4 3d 	jmp	0x7be8	; 0x7be8 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(3); 		// 1.General
    562c:	83 e0       	ldi	r24, 0x03	; 3
    562e:	31 c0       	rjmp	.+98     	; 0x5692 <do_main_menu_item+0x7c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	2f c0       	rjmp	.+94     	; 0x5692 <do_main_menu_item+0x7c>
			break;
		case MAINSTART+2:
			Display_sticks(); 		// 3.Stick polarity	
    5634:	0e 94 bb 12 	call	0x2576	; 0x2576 <Display_sticks>
			break;
    5638:	08 95       	ret
		case MAINSTART+3:
			Display_rcinput();		// 4.RX inputs
    563a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <Display_rcinput>
			break;
    563e:	08 95       	ret
		case MAINSTART+4:
			menu_flight(1);			// 5.Flight profile 1
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	01 c0       	rjmp	.+2      	; 0x5646 <do_main_menu_item+0x30>
			break;
		case MAINSTART+5:
			menu_flight(2); 		// 6.Flight profile 2
    5644:	82 e0       	ldi	r24, 0x02	; 2
    5646:	0e 94 3e 2a 	call	0x547c	; 0x547c <menu_flight>
			break;
    564a:	08 95       	ret
		case MAINSTART+6:
			menu_flight(3); 		// 7.Flight profile 3
    564c:	83 e0       	ldi	r24, 0x03	; 3
    564e:	fb cf       	rjmp	.-10     	; 0x5646 <do_main_menu_item+0x30>
			break;
		case MAINSTART+7:
			Display_sensors();		// 8.Sensor calibration
    5650:	0e 94 39 10 	call	0x2072	; 0x2072 <Display_sensors>
			break;
    5654:	08 95       	ret
		case MAINSTART+8:
			Display_balance();		// 9.Level meter
    5656:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <Display_balance>
			break;
    565a:	08 95       	ret
		case MAINSTART+9:
			menu_mixer(0);			// 9.OUT1 Mixer
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	0d c0       	rjmp	.+26     	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+10:
			menu_mixer(1);			// 10.OUT2 Mixer
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	0b c0       	rjmp	.+22     	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+11:
			menu_mixer(2);			// 11.OUT3 Mixer
    5664:	82 e0       	ldi	r24, 0x02	; 2
    5666:	09 c0       	rjmp	.+18     	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+12:
			menu_mixer(3);			// 12.OUT4 Mixer
    5668:	83 e0       	ldi	r24, 0x03	; 3
    566a:	07 c0       	rjmp	.+14     	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+13:
			menu_mixer(4);			// 13.OUT5 Mixer
    566c:	84 e0       	ldi	r24, 0x04	; 4
    566e:	05 c0       	rjmp	.+10     	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+14:
			menu_mixer(5);			// 14.OUT6 Mixer
    5670:	85 e0       	ldi	r24, 0x05	; 5
    5672:	03 c0       	rjmp	.+6      	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+15:
			menu_mixer(6);			// 15.OUT7 Mixer
    5674:	86 e0       	ldi	r24, 0x06	; 6
    5676:	01 c0       	rjmp	.+2      	; 0x567a <do_main_menu_item+0x64>
			break;
		case MAINSTART+16:
			menu_mixer(7);			// 16.OUT8 Mixer
    5678:	87 e0       	ldi	r24, 0x07	; 7
    567a:	0e 94 df 2b 	call	0x57be	; 0x57be <menu_mixer>
			break;
    567e:	08 95       	ret
		case MAINSTART+17:
			menu_servo_setup(1);	// 12.Servo direction
    5680:	81 e0       	ldi	r24, 0x01	; 1
    5682:	0b c0       	rjmp	.+22     	; 0x569a <do_main_menu_item+0x84>
			break;
		case MAINSTART+18: 
			menu_servo_setup(2); 	// 13.Servo trim (%)
    5684:	82 e0       	ldi	r24, 0x02	; 2
    5686:	09 c0       	rjmp	.+18     	; 0x569a <do_main_menu_item+0x84>
			break;
		case MAINSTART+19:
			menu_servo_setup(3); 	// 14.Neg. Servo trvl. (%)
    5688:	83 e0       	ldi	r24, 0x03	; 3
    568a:	07 c0       	rjmp	.+14     	; 0x569a <do_main_menu_item+0x84>
			break;
		case MAINSTART+20:
			menu_servo_setup(4); 	// 15.Pos. Servo trvl. (%)
    568c:	84 e0       	ldi	r24, 0x04	; 4
    568e:	05 c0       	rjmp	.+10     	; 0x569a <do_main_menu_item+0x84>
			break;
		case MAINSTART+21:
			menu_rc_setup(2); 		// 16.Failsafe settings
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <menu_rc_setup>
			break;
    5696:	08 95       	ret
		case MAINSTART+22:
			menu_servo_setup(5); 	// 17.Failsafe positions
    5698:	85 e0       	ldi	r24, 0x05	; 5
    569a:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <menu_servo_setup>
    569e:	08 95       	ret

000056a0 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    56a0:	1f 99       	sbic	0x03, 7	; 3
    56a2:	0a c0       	rjmp	.+20     	; 0x56b8 <Wait_BUTTON1+0x18>
    56a4:	2f e3       	ldi	r18, 0x3F	; 63
    56a6:	8d e0       	ldi	r24, 0x0D	; 13
    56a8:	93 e0       	ldi	r25, 0x03	; 3
    56aa:	21 50       	subi	r18, 0x01	; 1
    56ac:	80 40       	sbci	r24, 0x00	; 0
    56ae:	90 40       	sbci	r25, 0x00	; 0
    56b0:	e1 f7       	brne	.-8      	; 0x56aa <Wait_BUTTON1+0xa>
    56b2:	00 c0       	rjmp	.+0      	; 0x56b4 <Wait_BUTTON1+0x14>
    56b4:	00 00       	nop
    56b6:	f4 cf       	rjmp	.-24     	; 0x56a0 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    56b8:	08 95       	ret

000056ba <menu_main>:
uint8_t main_top = MAINSTART;
uint8_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    56ba:	a0 e0       	ldi	r26, 0x00	; 0
    56bc:	b0 e0       	ldi	r27, 0x00	; 0
    56be:	e3 e6       	ldi	r30, 0x63	; 99
    56c0:	fb e2       	ldi	r31, 0x2B	; 43
    56c2:	0c 94 33 3e 	jmp	0x7c66	; 0x7c66 <__prologue_saves__+0x10>
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint8_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    56c6:	80 ef       	ldi	r24, 0xF0	; 240
    56c8:	80 93 a6 07 	sts	0x07A6, r24

	// Wait until user's finger is off button 1
	while(BUTTON1 == 0)
    56cc:	1f 99       	sbic	0x03, 7	; 3
    56ce:	0a c0       	rjmp	.+20     	; 0x56e4 <menu_main+0x2a>
    56d0:	2f e3       	ldi	r18, 0x3F	; 63
    56d2:	8d e0       	ldi	r24, 0x0D	; 13
    56d4:	93 e0       	ldi	r25, 0x03	; 3
    56d6:	21 50       	subi	r18, 0x01	; 1
    56d8:	80 40       	sbci	r24, 0x00	; 0
    56da:	90 40       	sbci	r25, 0x00	; 0
    56dc:	e1 f7       	brne	.-8      	; 0x56d6 <menu_main+0x1c>
    56de:	00 c0       	rjmp	.+0      	; 0x56e0 <menu_main+0x26>
    56e0:	00 00       	nop
    56e2:	f4 cf       	rjmp	.-24     	; 0x56cc <menu_main+0x12>
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);

		// If main menu item has changed, reset submenu positions
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    56e4:	23 e0       	ldi	r18, 0x03	; 3
    56e6:	b2 2e       	mov	r11, r18
		
		// If ENTER pressed, jump to menu
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    56e8:	30 ef       	ldi	r19, 0xF0	; 240
    56ea:	a3 2e       	mov	r10, r19
	while(BUTTON1 == 0)
	{
		_delay_ms(50);
	}

	while(button != BACK)
    56ec:	80 91 a6 07 	lds	r24, 0x07A6
    56f0:	80 37       	cpi	r24, 0x70	; 112
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <menu_main+0x3c>
    56f4:	52 c0       	rjmp	.+164    	; 0x579a <menu_main+0xe0>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    56f6:	85 e4       	ldi	r24, 0x45	; 69
    56f8:	91 e0       	ldi	r25, 0x01	; 1
    56fa:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    56fe:	80 e0       	ldi	r24, 0x00	; 0
    5700:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <print_menu_frame>
    5704:	c0 e0       	ldi	r28, 0x00	; 0
    5706:	d0 e0       	ldi	r29, 0x00	; 0
    5708:	fe 01       	movw	r30, r28
    570a:	e9 54       	subi	r30, 0x49	; 73
    570c:	f9 4e       	sbci	r31, 0xE9	; 233
		
		for (uint8_t i = 0; i < 4; i++)
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    570e:	24 91       	lpm	r18, Z
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	80 91 06 01 	lds	r24, 0x0106
    5716:	4a e0       	ldi	r20, 0x0A	; 10
    5718:	50 e0       	ldi	r21, 0x00	; 0
    571a:	6e e1       	ldi	r22, 0x1E	; 30
    571c:	7a e0       	ldi	r23, 0x0A	; 10
    571e:	8c 0f       	add	r24, r28
    5720:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_Display_Text>
    5724:	21 96       	adiw	r28, 0x01	; 1
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint8_t i = 0; i < 4; i++)
    5726:	c4 30       	cpi	r28, 0x04	; 4
    5728:	d1 05       	cpc	r29, r1
    572a:	71 f7       	brne	.-36     	; 0x5708 <menu_main+0x4e>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    572c:	80 91 05 01 	lds	r24, 0x0105
    5730:	0e 94 b7 29 	call	0x536e	; 0x536e <print_cursor>
		write_buffer(buffer);
    5734:	85 e4       	ldi	r24, 0x45	; 69
    5736:	91 e0       	ldi	r25, 0x01	; 1
    5738:	0e 94 3d 18 	call	0x307a	; 0x307a <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    573c:	81 e0       	ldi	r24, 0x01	; 1
    573e:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    5742:	8b e2       	ldi	r24, 0x2B	; 43
    5744:	c8 2e       	mov	r12, r24
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	d8 2e       	mov	r13, r24
    574a:	96 e0       	ldi	r25, 0x06	; 6
    574c:	e9 2e       	mov	r14, r25
    574e:	91 e0       	ldi	r25, 0x01	; 1
    5750:	f9 2e       	mov	r15, r25
    5752:	05 e0       	ldi	r16, 0x05	; 5
    5754:	11 e0       	ldi	r17, 0x01	; 1
    5756:	20 91 a6 07 	lds	r18, 0x07A6
    575a:	40 e0       	ldi	r20, 0x00	; 0
    575c:	6d e4       	ldi	r22, 0x4D	; 77
    575e:	87 e1       	ldi	r24, 0x17	; 23
    5760:	0e 94 19 29 	call	0x5232	; 0x5232 <update_menu>

		// If main menu item has changed, reset submenu positions
		if (main_temp != old_menu)
    5764:	80 91 2b 01 	lds	r24, 0x012B
    5768:	90 91 2a 01 	lds	r25, 0x012A
    576c:	89 17       	cp	r24, r25
    576e:	49 f0       	breq	.+18     	; 0x5782 <menu_main+0xc8>
		{
			cursor = LINE0;
    5770:	b0 92 04 01 	sts	0x0104, r11
			menu_temp = 0;
    5774:	10 92 29 01 	sts	0x0129, r1
			old_menu = main_temp;
    5778:	80 93 2a 01 	sts	0x012A, r24
			menu_flag = 1;
    577c:	91 e0       	ldi	r25, 0x01	; 1
    577e:	90 93 a8 07 	sts	0x07A8, r25
		}
		
		// If ENTER pressed, jump to menu
		if (button == ENTER)
    5782:	90 91 a6 07 	lds	r25, 0x07A6
    5786:	90 3e       	cpi	r25, 0xE0	; 224
    5788:	09 f0       	breq	.+2      	; 0x578c <menu_main+0xd2>
    578a:	b0 cf       	rjmp	.-160    	; 0x56ec <menu_main+0x32>
		{
			do_main_menu_item(main_temp);
    578c:	0e 94 0b 2b 	call	0x5616	; 0x5616 <do_main_menu_item>
			button = NONE;
    5790:	a0 92 a6 07 	sts	0x07A6, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    5794:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <Wait_BUTTON1>
    5798:	a9 cf       	rjmp	.-174    	; 0x56ec <menu_main+0x32>
		}
	}
}
    579a:	cd b7       	in	r28, 0x3d	; 61
    579c:	de b7       	in	r29, 0x3e	; 62
    579e:	ea e0       	ldi	r30, 0x0A	; 10
    57a0:	0c 94 4f 3e 	jmp	0x7c9e	; 0x7c9e <__epilogue_restores__+0x10>

000057a4 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    57a4:	1c 99       	sbic	0x03, 4	; 3
    57a6:	0a c0       	rjmp	.+20     	; 0x57bc <Wait_BUTTON4+0x18>
    57a8:	2f e3       	ldi	r18, 0x3F	; 63
    57aa:	8d e0       	ldi	r24, 0x0D	; 13
    57ac:	93 e0       	ldi	r25, 0x03	; 3
    57ae:	21 50       	subi	r18, 0x01	; 1
    57b0:	80 40       	sbci	r24, 0x00	; 0
    57b2:	90 40       	sbci	r25, 0x00	; 0
    57b4:	e1 f7       	brne	.-8      	; 0x57ae <Wait_BUTTON4+0xa>
    57b6:	00 c0       	rjmp	.+0      	; 0x57b8 <Wait_BUTTON4+0x14>
    57b8:	00 00       	nop
    57ba:	f4 cf       	rjmp	.-24     	; 0x57a4 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    57bc:	08 95       	ret

000057be <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    57be:	6f 92       	push	r6
    57c0:	7f 92       	push	r7
    57c2:	8f 92       	push	r8
    57c4:	af 92       	push	r10
    57c6:	bf 92       	push	r11
    57c8:	cf 92       	push	r12
    57ca:	df 92       	push	r13
    57cc:	ef 92       	push	r14
    57ce:	ff 92       	push	r15
    57d0:	0f 93       	push	r16
    57d2:	1f 93       	push	r17
    57d4:	cf 93       	push	r28
    57d6:	df 93       	push	r29
    57d8:	00 d0       	rcall	.+0      	; 0x57da <menu_mixer+0x1c>
    57da:	00 d0       	rcall	.+0      	; 0x57dc <menu_mixer+0x1e>
    57dc:	1f 92       	push	r1
    57de:	cd b7       	in	r28, 0x3d	; 61
    57e0:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    57e2:	90 91 a8 07 	lds	r25, 0x07A8
    57e6:	99 23       	and	r25, r25
    57e8:	29 f0       	breq	.+10     	; 0x57f4 <menu_mixer+0x36>
	{
		sub_top = MIXERSTART;
    57ea:	97 ed       	ldi	r25, 0xD7	; 215
    57ec:	90 93 2c 01 	sts	0x012C, r25
		menu_flag = 0;
    57f0:	10 92 a8 07 	sts	0x07A8, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].source_a;
    57f4:	9f e0       	ldi	r25, 0x0F	; 15
    57f6:	89 9f       	mul	r24, r25
    57f8:	30 01       	movw	r6, r0
    57fa:	11 24       	eor	r1, r1
    57fc:	c3 01       	movw	r24, r6
    57fe:	8a 57       	subi	r24, 0x7A	; 122
    5800:	99 4f       	sbci	r25, 0xF9	; 249
    5802:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5804:	80 91 a6 07 	lds	r24, 0x07A6
    5808:	80 37       	cpi	r24, 0x70	; 112
    580a:	09 f4       	brne	.+2      	; 0x580e <menu_mixer+0x50>
    580c:	5a c0       	rjmp	.+180    	; 0x58c2 <menu_mixer+0x104>
	{
		value_ptr = &Config.Channel[i].source_a;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, 1, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    580e:	80 90 04 01 	lds	r8, 0x0104
    5812:	80 e8       	ldi	r24, 0x80	; 128
    5814:	a8 2e       	mov	r10, r24
    5816:	87 e1       	ldi	r24, 0x17	; 23
    5818:	b8 2e       	mov	r11, r24
    581a:	90 e5       	ldi	r25, 0x50	; 80
    581c:	c9 2e       	mov	r12, r25
    581e:	e1 2c       	mov	r14, r1
    5820:	0f e3       	ldi	r16, 0x3F	; 63
    5822:	17 e1       	ldi	r17, 0x17	; 23
    5824:	21 e0       	ldi	r18, 0x01	; 1
    5826:	a3 01       	movw	r20, r6
    5828:	67 ed       	ldi	r22, 0xD7	; 215
    582a:	80 91 2c 01 	lds	r24, 0x012C
    582e:	0e 94 c1 29 	call	0x5382	; 0x5382 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5832:	29 e2       	ldi	r18, 0x29	; 41
    5834:	c2 2e       	mov	r12, r18
    5836:	21 e0       	ldi	r18, 0x01	; 1
    5838:	d2 2e       	mov	r13, r18
    583a:	3c e2       	ldi	r19, 0x2C	; 44
    583c:	e3 2e       	mov	r14, r19
    583e:	31 e0       	ldi	r19, 0x01	; 1
    5840:	f3 2e       	mov	r15, r19
    5842:	04 e0       	ldi	r16, 0x04	; 4
    5844:	11 e0       	ldi	r17, 0x01	; 1
    5846:	20 91 a6 07 	lds	r18, 0x07A6
    584a:	40 e0       	ldi	r20, 0x00	; 0
    584c:	67 ed       	ldi	r22, 0xD7	; 215
    584e:	8d e0       	ldi	r24, 0x0D	; 13
    5850:	0e 94 19 29 	call	0x5232	; 0x5232 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    5854:	60 91 29 01 	lds	r22, 0x0129
    5858:	67 5d       	subi	r22, 0xD7	; 215
    585a:	8f e3       	ldi	r24, 0x3F	; 63
    585c:	97 e1       	ldi	r25, 0x17	; 23
    585e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <get_menu_range>
    5862:	29 83       	std	Y+1, r18	; 0x01
    5864:	3a 83       	std	Y+2, r19	; 0x02
    5866:	4b 83       	std	Y+3, r20	; 0x03
    5868:	5c 83       	std	Y+4, r21	; 0x04
    586a:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    586c:	80 91 a6 07 	lds	r24, 0x07A6
    5870:	80 3e       	cpi	r24, 0xE0	; 224
    5872:	d9 f4       	brne	.+54     	; 0x58aa <menu_mixer+0xec>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    5874:	80 91 29 01 	lds	r24, 0x0129
    5878:	e8 2f       	mov	r30, r24
    587a:	f0 e0       	ldi	r31, 0x00	; 0
    587c:	e7 55       	subi	r30, 0x57	; 87
    587e:	f9 4e       	sbci	r31, 0xE9	; 233
    5880:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    5882:	68 2f       	mov	r22, r24
    5884:	70 e0       	ldi	r23, 0x00	; 0
    5886:	67 5d       	subi	r22, 0xD7	; 215
    5888:	71 09       	sbc	r23, r1
    588a:	66 0d       	add	r22, r6
    588c:	77 1d       	adc	r23, r7
    588e:	1f 92       	push	r1
    5890:	1f 92       	push	r1
    5892:	81 2c       	mov	r8, r1
    5894:	c1 2c       	mov	r12, r1
    5896:	e9 80       	ldd	r14, Y+1	; 0x01
    5898:	fa 80       	ldd	r15, Y+2	; 0x02
    589a:	0b 81       	ldd	r16, Y+3	; 0x03
    589c:	1c 81       	ldd	r17, Y+4	; 0x04
    589e:	2d 81       	ldd	r18, Y+5	; 0x05
    58a0:	41 e0       	ldi	r20, 0x01	; 1
    58a2:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <do_menu_item>
    58a6:	0f 90       	pop	r0
    58a8:	0f 90       	pop	r0
		}

		// Save and exit
		if (button == ENTER)
    58aa:	80 91 a6 07 	lds	r24, 0x07A6
    58ae:	80 3e       	cpi	r24, 0xE0	; 224
    58b0:	09 f0       	breq	.+2      	; 0x58b4 <menu_mixer+0xf6>
    58b2:	a8 cf       	rjmp	.-176    	; 0x5804 <menu_mixer+0x46>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    58b4:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    58b8:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    58bc:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <Wait_BUTTON4>
    58c0:	a1 cf       	rjmp	.-190    	; 0x5804 <menu_mixer+0x46>
		}
	} // while(button != BACK)
}
    58c2:	0f 90       	pop	r0
    58c4:	0f 90       	pop	r0
    58c6:	0f 90       	pop	r0
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
    58cc:	df 91       	pop	r29
    58ce:	cf 91       	pop	r28
    58d0:	1f 91       	pop	r17
    58d2:	0f 91       	pop	r16
    58d4:	ff 90       	pop	r15
    58d6:	ef 90       	pop	r14
    58d8:	df 90       	pop	r13
    58da:	cf 90       	pop	r12
    58dc:	bf 90       	pop	r11
    58de:	af 90       	pop	r10
    58e0:	8f 90       	pop	r8
    58e2:	7f 90       	pop	r7
    58e4:	6f 90       	pop	r6
    58e6:	08 95       	ret

000058e8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    58e8:	a9 e0       	ldi	r26, 0x09	; 9
    58ea:	b0 e0       	ldi	r27, 0x00	; 0
    58ec:	ea e7       	ldi	r30, 0x7A	; 122
    58ee:	fc e2       	ldi	r31, 0x2C	; 44
    58f0:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
    58f4:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    58f6:	80 91 a8 07 	lds	r24, 0x07A8
    58fa:	88 23       	and	r24, r24
    58fc:	29 f0       	breq	.+10     	; 0x5908 <menu_servo_setup+0x20>
	{
		sub_top = SERVOSTART;
    58fe:	88 ee       	ldi	r24, 0xE8	; 232
    5900:	80 93 2c 01 	sts	0x012C, r24
		menu_flag = 0;
    5904:	10 92 a8 07 	sts	0x07A8, r1
			}

			// Do not allow servo enable for throttles to prevent accidents
			if ((Config.Channel[menu_temp - SERVOSTART].source_a == THROTTLE) || (Config.Channel[menu_temp - SERVOSTART].source_b == THROTTLE))
			{
				servo_enable = false;
    5908:	1f 82       	std	Y+7, r1	; 0x07
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    590a:	2e 81       	ldd	r18, Y+6	; 0x06
    590c:	82 2f       	mov	r24, r18
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	01 97       	sbiw	r24, 0x01	; 1
    5912:	25 e0       	ldi	r18, 0x05	; 5
    5914:	28 9f       	mul	r18, r24
    5916:	20 01       	movw	r4, r0
    5918:	29 9f       	mul	r18, r25
    591a:	50 0c       	add	r5, r0
    591c:	11 24       	eor	r1, r1
    591e:	92 01       	movw	r18, r4
    5920:	23 57       	subi	r18, 0x73	; 115
    5922:	38 4e       	sbci	r19, 0xE8	; 232
    5924:	29 01       	movw	r4, r18
    5926:	1c 01       	movw	r2, r24
    5928:	e3 e0       	ldi	r30, 0x03	; 3
    592a:	22 0c       	add	r2, r2
    592c:	33 1c       	adc	r3, r3
    592e:	ea 95       	dec	r30
    5930:	e1 f7       	brne	.-8      	; 0x592a <menu_servo_setup+0x42>
    5932:	c1 01       	movw	r24, r2
    5934:	8a 55       	subi	r24, 0x5A	; 90
    5936:	98 4e       	sbci	r25, 0xE8	; 232
    5938:	99 87       	std	Y+9, r25	; 0x09
    593a:	88 87       	std	Y+8, r24	; 0x08
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Offset, 3 = Min, 4 = Max, 5 = Failsafe
	while(button != BACK)
    593c:	80 91 a6 07 	lds	r24, 0x07A6
    5940:	80 37       	cpi	r24, 0x70	; 112
    5942:	09 f4       	brne	.+2      	; 0x5946 <menu_servo_setup+0x5e>
    5944:	ae c0       	rjmp	.+348    	; 0x5aa2 <menu_servo_setup+0x1ba>
    5946:	88 e0       	ldi	r24, 0x08	; 8
    5948:	91 2c       	mov	r9, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    594a:	9e 81       	ldd	r25, Y+6	; 0x06
    594c:	93 30       	cpi	r25, 0x03	; 3
    594e:	c1 f0       	breq	.+48     	; 0x5980 <menu_servo_setup+0x98>
    5950:	48 f4       	brcc	.+18     	; 0x5964 <menu_servo_setup+0x7c>
    5952:	92 30       	cpi	r25, 0x02	; 2
    5954:	39 f5       	brne	.+78     	; 0x59a4 <menu_servo_setup+0xbc>
				case 1:
					value_ptr = &Config.Servo_reverse[0];
					break;
				case 2:
					value_ptr = &Config.Offset[0];
					servo_enable = true;
    5956:	99 24       	eor	r9, r9
    5958:	93 94       	inc	r9
			{
				case 1:
					value_ptr = &Config.Servo_reverse[0];
					break;
				case 2:
					value_ptr = &Config.Offset[0];
    595a:	74 e0       	ldi	r23, 0x04	; 4
    595c:	67 2e       	mov	r6, r23
    595e:	77 e0       	ldi	r23, 0x07	; 7
    5960:	77 2e       	mov	r7, r23
    5962:	24 c0       	rjmp	.+72     	; 0x59ac <menu_servo_setup+0xc4>
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    5964:	2e 81       	ldd	r18, Y+6	; 0x06
    5966:	24 30       	cpi	r18, 0x04	; 4
    5968:	a1 f0       	breq	.+40     	; 0x5992 <menu_servo_setup+0xaa>
    596a:	25 30       	cpi	r18, 0x05	; 5
    596c:	d9 f4       	brne	.+54     	; 0x59a4 <menu_servo_setup+0xbc>
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
					servo_enable = true;
					zero_setting = true;
    596e:	21 e0       	ldi	r18, 0x01	; 1
    5970:	2f 83       	std	Y+7, r18	; 0x07
					servo_enable = true;
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
					servo_enable = true;
    5972:	99 24       	eor	r9, r9
    5974:	93 94       	inc	r9
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
    5976:	4c e1       	ldi	r20, 0x1C	; 28
    5978:	64 2e       	mov	r6, r20
    597a:	47 e0       	ldi	r20, 0x07	; 7
    597c:	74 2e       	mov	r7, r20
					servo_enable = true;
					zero_setting = true;
					break;
    597e:	16 c0       	rjmp	.+44     	; 0x59ac <menu_servo_setup+0xc4>
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    5980:	31 e0       	ldi	r19, 0x01	; 1
    5982:	3f 83       	std	Y+7, r19	; 0x07
					value_ptr = &Config.Offset[0];
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    5984:	99 24       	eor	r9, r9
    5986:	93 94       	inc	r9
				case 2:
					value_ptr = &Config.Offset[0];
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
    5988:	6c e0       	ldi	r22, 0x0C	; 12
    598a:	66 2e       	mov	r6, r22
    598c:	67 e0       	ldi	r22, 0x07	; 7
    598e:	76 2e       	mov	r7, r22
					servo_enable = true;
					zero_setting = true;
					break;
    5990:	0d c0       	rjmp	.+26     	; 0x59ac <menu_servo_setup+0xc4>
				case 4:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    5992:	91 e0       	ldi	r25, 0x01	; 1
    5994:	9f 83       	std	Y+7, r25	; 0x07
					servo_enable = true;
					zero_setting = true;
					break;
				case 4:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    5996:	99 24       	eor	r9, r9
    5998:	93 94       	inc	r9
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 4:
					value_ptr = &Config.max_travel[0];
    599a:	54 e1       	ldi	r21, 0x14	; 20
    599c:	65 2e       	mov	r6, r21
    599e:	57 e0       	ldi	r21, 0x07	; 7
    59a0:	75 2e       	mov	r7, r21
					servo_enable = true;
					zero_setting = true;
					break;
    59a2:	04 c0       	rjmp	.+8      	; 0x59ac <menu_servo_setup+0xc4>
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
			{
				case 1:
					value_ptr = &Config.Servo_reverse[0];
    59a4:	3c ef       	ldi	r19, 0xFC	; 252
    59a6:	63 2e       	mov	r6, r19
    59a8:	36 e0       	ldi	r19, 0x06	; 6
    59aa:	73 2e       	mov	r7, r19
    59ac:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Offset, 3 = Min, 4 = Max, 5 = Failsafe
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    59ae:	69 f6       	brne	.-102    	; 0x594a <menu_servo_setup+0x62>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    59b0:	80 90 04 01 	lds	r8, 0x0104
    59b4:	a8 84       	ldd	r10, Y+8	; 0x08
    59b6:	b9 84       	ldd	r11, Y+9	; 0x09
    59b8:	80 e5       	ldi	r24, 0x50	; 80
    59ba:	c8 2e       	mov	r12, r24
    59bc:	ee 24       	eor	r14, r14
    59be:	e3 94       	inc	r14
    59c0:	82 01       	movw	r16, r4
    59c2:	21 e0       	ldi	r18, 0x01	; 1
    59c4:	a3 01       	movw	r20, r6
    59c6:	68 ee       	ldi	r22, 0xE8	; 232
    59c8:	80 91 2c 01 	lds	r24, 0x012C
    59cc:	0e 94 c1 29 	call	0x5382	; 0x5382 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    59d0:	99 e2       	ldi	r25, 0x29	; 41
    59d2:	c9 2e       	mov	r12, r25
    59d4:	91 e0       	ldi	r25, 0x01	; 1
    59d6:	d9 2e       	mov	r13, r25
    59d8:	2c e2       	ldi	r18, 0x2C	; 44
    59da:	e2 2e       	mov	r14, r18
    59dc:	21 e0       	ldi	r18, 0x01	; 1
    59de:	f2 2e       	mov	r15, r18
    59e0:	04 e0       	ldi	r16, 0x04	; 4
    59e2:	11 e0       	ldi	r17, 0x01	; 1
    59e4:	20 91 a6 07 	lds	r18, 0x07A6
    59e8:	40 e0       	ldi	r20, 0x00	; 0
    59ea:	68 ee       	ldi	r22, 0xE8	; 232
    59ec:	88 e0       	ldi	r24, 0x08	; 8
    59ee:	0e 94 19 29 	call	0x5232	; 0x5232 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    59f2:	60 e0       	ldi	r22, 0x00	; 0
    59f4:	c2 01       	movw	r24, r4
    59f6:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <get_menu_range>
    59fa:	29 83       	std	Y+1, r18	; 0x01
    59fc:	3a 83       	std	Y+2, r19	; 0x02
    59fe:	4b 83       	std	Y+3, r20	; 0x03
    5a00:	5c 83       	std	Y+4, r21	; 0x04
    5a02:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5a04:	80 91 a6 07 	lds	r24, 0x07A6
    5a08:	80 3e       	cpi	r24, 0xE0	; 224
    5a0a:	09 f0       	breq	.+2      	; 0x5a0e <menu_servo_setup+0x126>
    5a0c:	3e c0       	rjmp	.+124    	; 0x5a8a <menu_servo_setup+0x1a2>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    5a0e:	80 91 29 01 	lds	r24, 0x0129
    5a12:	28 2f       	mov	r18, r24
    5a14:	30 e0       	ldi	r19, 0x00	; 0
    5a16:	28 5e       	subi	r18, 0xE8	; 232
    5a18:	31 09       	sbc	r19, r1
    5a1a:	f9 01       	movw	r30, r18
    5a1c:	e2 0d       	add	r30, r2
    5a1e:	f3 1d       	adc	r31, r3
    5a20:	ea 55       	subi	r30, 0x5A	; 90
    5a22:	f8 4e       	sbci	r31, 0xE8	; 232
    5a24:	a4 90       	lpm	r10, Z
    5a26:	68 2f       	mov	r22, r24
    5a28:	70 e0       	ldi	r23, 0x00	; 0
			// Zero limits if adjusting
			if (zero_setting)
    5a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    5a2c:	99 23       	and	r25, r25
    5a2e:	31 f0       	breq	.+12     	; 0x5a3c <menu_servo_setup+0x154>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    5a30:	d3 01       	movw	r26, r6
    5a32:	a6 0f       	add	r26, r22
    5a34:	b7 1f       	adc	r27, r23
    5a36:	a8 5e       	subi	r26, 0xE8	; 232
    5a38:	b1 09       	sbc	r27, r1
    5a3a:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttles to prevent accidents
			if ((Config.Channel[menu_temp - SERVOSTART].source_a == THROTTLE) || (Config.Channel[menu_temp - SERVOSTART].source_b == THROTTLE))
    5a3c:	9f e0       	ldi	r25, 0x0F	; 15
    5a3e:	92 9f       	mul	r25, r18
    5a40:	a0 01       	movw	r20, r0
    5a42:	93 9f       	mul	r25, r19
    5a44:	50 0d       	add	r21, r0
    5a46:	11 24       	eor	r1, r1
    5a48:	4e 53       	subi	r20, 0x3E	; 62
    5a4a:	5a 4f       	sbci	r21, 0xFA	; 250
    5a4c:	da 01       	movw	r26, r20
    5a4e:	ac 53       	subi	r26, 0x3C	; 60
    5a50:	bf 4f       	sbci	r27, 0xFF	; 255
    5a52:	9c 91       	ld	r25, X
    5a54:	99 23       	and	r25, r25
    5a56:	31 f0       	breq	.+12     	; 0x5a64 <menu_servo_setup+0x17c>
    5a58:	fa 01       	movw	r30, r20
    5a5a:	ea 53       	subi	r30, 0x3A	; 58
    5a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5e:	90 81       	ld	r25, Z
    5a60:	91 11       	cpse	r25, r1
    5a62:	01 c0       	rjmp	.+2      	; 0x5a66 <menu_servo_setup+0x17e>
			{
				servo_enable = false;
    5a64:	91 2c       	mov	r9, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    5a66:	68 5e       	subi	r22, 0xE8	; 232
    5a68:	71 09       	sbc	r23, r1
    5a6a:	66 0d       	add	r22, r6
    5a6c:	77 1d       	adc	r23, r7
    5a6e:	3f 93       	push	r19
    5a70:	2f 93       	push	r18
    5a72:	89 2c       	mov	r8, r9
    5a74:	c1 2c       	mov	r12, r1
    5a76:	e9 80       	ldd	r14, Y+1	; 0x01
    5a78:	fa 80       	ldd	r15, Y+2	; 0x02
    5a7a:	0b 81       	ldd	r16, Y+3	; 0x03
    5a7c:	1c 81       	ldd	r17, Y+4	; 0x04
    5a7e:	2d 81       	ldd	r18, Y+5	; 0x05
    5a80:	41 e0       	ldi	r20, 0x01	; 1
    5a82:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <do_menu_item>
    5a86:	0f 90       	pop	r0
    5a88:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    5a8a:	80 91 a6 07 	lds	r24, 0x07A6
    5a8e:	80 3e       	cpi	r24, 0xE0	; 224
    5a90:	09 f0       	breq	.+2      	; 0x5a94 <menu_servo_setup+0x1ac>
    5a92:	54 cf       	rjmp	.-344    	; 0x593c <menu_servo_setup+0x54>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    5a94:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <UpdateLimits>
						
			Save_Config_to_EEPROM(); // Save value and return
    5a98:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5a9c:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <Wait_BUTTON4>
    5aa0:	4d cf       	rjmp	.-358    	; 0x593c <menu_servo_setup+0x54>
		}
	}
}
    5aa2:	29 96       	adiw	r28, 0x09	; 9
    5aa4:	e2 e1       	ldi	r30, 0x12	; 18
    5aa6:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

00005aaa <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    5aaa:	ac e0       	ldi	r26, 0x0C	; 12
    5aac:	b0 e0       	ldi	r27, 0x00	; 0
    5aae:	eb e5       	ldi	r30, 0x5B	; 91
    5ab0:	fd e2       	ldi	r31, 0x2D	; 45
    5ab2:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
    5ab6:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t mult = 1;		// Multiplier
	uint8_t offset;			// Index into channel structure
	uint8_t	items;			// Items in group

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5ab8:	80 91 a8 07 	lds	r24, 0x07A8
    5abc:	88 23       	and	r24, r24
    5abe:	29 f0       	breq	.+10     	; 0x5aca <menu_rc_setup+0x20>
	{
		sub_top = RCSTART;
    5ac0:	85 e9       	ldi	r24, 0x95	; 149
    5ac2:	80 93 2c 01 	sts	0x012C, r24
		menu_flag = 0;
    5ac6:	10 92 a8 07 	sts	0x07A8, r1
		int8_t temp_type = Config.MixMode;
		int8_t temp_flapchan = Config.FlapChan;
		int8_t temp_RxModeIn = Config.RxModeIn;

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, mult, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5aca:	2e 81       	ldd	r18, Y+6	; 0x06
    5acc:	82 2f       	mov	r24, r18
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	01 97       	sbiw	r24, 0x01	; 1
    5ad2:	27 e3       	ldi	r18, 0x37	; 55
    5ad4:	28 9f       	mul	r18, r24
    5ad6:	30 01       	movw	r6, r0
    5ad8:	29 9f       	mul	r18, r25
    5ada:	70 0c       	add	r7, r0
    5adc:	11 24       	eor	r1, r1
    5ade:	d3 01       	movw	r26, r6
    5ae0:	a2 53       	subi	r26, 0x32	; 50
    5ae2:	b8 4e       	sbci	r27, 0xE8	; 232
    5ae4:	3d 01       	movw	r6, r26
    5ae6:	2b e0       	ldi	r18, 0x0B	; 11
    5ae8:	28 9f       	mul	r18, r24
    5aea:	10 01       	movw	r2, r0
    5aec:	29 9f       	mul	r18, r25
    5aee:	30 0c       	add	r3, r0
    5af0:	11 24       	eor	r1, r1
    5af2:	91 01       	movw	r18, r2
    5af4:	2d 58       	subi	r18, 0x8D	; 141
    5af6:	37 4e       	sbci	r19, 0xE7	; 231
    5af8:	3b 87       	std	Y+11, r19	; 0x0b
    5afa:	2a 87       	std	Y+10, r18	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5afc:	80 91 a6 07 	lds	r24, 0x07A6
    5b00:	80 37       	cpi	r24, 0x70	; 112
    5b02:	09 f4       	brne	.+2      	; 0x5b06 <menu_rc_setup+0x5c>
    5b04:	10 c1       	rjmp	.+544    	; 0x5d26 <menu_rc_setup+0x27c>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
    5b06:	3e 81       	ldd	r19, Y+6	; 0x06
    5b08:	32 30       	cpi	r19, 0x02	; 2
    5b0a:	51 f0       	breq	.+20     	; 0x5b20 <menu_rc_setup+0x76>
    5b0c:	33 30       	cpi	r19, 0x03	; 3
    5b0e:	81 f4       	brne	.+32     	; 0x5b30 <menu_rc_setup+0x86>
				value_ptr = &Config.FailsafeType;
				mult = 1;
				break;
			case 3:				// General menu
				offset = RCITEMS + FSITEMS;
				items = GENERALITEMS;
    5b10:	97 e0       	ldi	r25, 0x07	; 7
				items = FSITEMS;
				value_ptr = &Config.FailsafeType;
				mult = 1;
				break;
			case 3:				// General menu
				offset = RCITEMS + FSITEMS;
    5b12:	20 e1       	ldi	r18, 0x10	; 16
    5b14:	92 2e       	mov	r9, r18
				items = GENERALITEMS;
				value_ptr = &Config.MixMode;
    5b16:	3c e7       	ldi	r19, 0x7C	; 124
    5b18:	43 2e       	mov	r4, r19
    5b1a:	36 e0       	ldi	r19, 0x06	; 6
    5b1c:	53 2e       	mov	r5, r19
				mult = 1;
				break;
    5b1e:	0e c0       	rjmp	.+28     	; 0x5b3c <menu_rc_setup+0x92>
				value_ptr = &Config.RxModeIn;
				mult = 1;
				break;
			case 2:				// Failsafe menu
				offset = RCITEMS;
				items = FSITEMS;
    5b20:	95 e0       	ldi	r25, 0x05	; 5
				items = RCITEMS;
				value_ptr = &Config.RxModeIn;
				mult = 1;
				break;
			case 2:				// Failsafe menu
				offset = RCITEMS;
    5b22:	4b e0       	ldi	r20, 0x0B	; 11
    5b24:	94 2e       	mov	r9, r20
				items = FSITEMS;
				value_ptr = &Config.FailsafeType;
    5b26:	56 e1       	ldi	r21, 0x16	; 22
    5b28:	45 2e       	mov	r4, r21
    5b2a:	56 e0       	ldi	r21, 0x06	; 6
    5b2c:	55 2e       	mov	r5, r21
    5b2e:	06 c0       	rjmp	.+12     	; 0x5b3c <menu_rc_setup+0x92>
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
		{
			case 1:				// RC setup menu
				offset = 0;
				items = RCITEMS;
    5b30:	9b e0       	ldi	r25, 0x0B	; 11
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
		{
			case 1:				// RC setup menu
				offset = 0;
    5b32:	91 2c       	mov	r9, r1
				items = RCITEMS;
				value_ptr = &Config.RxModeIn;
    5b34:	8b e0       	ldi	r24, 0x0B	; 11
    5b36:	48 2e       	mov	r4, r24
    5b38:	86 e0       	ldi	r24, 0x06	; 6
    5b3a:	58 2e       	mov	r5, r24
				value_ptr = &Config.RxModeIn;
				mult = 1;
				break;
		}
		// Save pre-edited values
		int8_t temp_type = Config.MixMode;
    5b3c:	80 91 7c 06 	lds	r24, 0x067C
    5b40:	88 87       	std	Y+8, r24	; 0x08
		int8_t temp_flapchan = Config.FlapChan;
    5b42:	a0 91 0f 06 	lds	r26, 0x060F
    5b46:	af 83       	std	Y+7, r26	; 0x07
		int8_t temp_RxModeIn = Config.RxModeIn;
    5b48:	b0 91 0b 06 	lds	r27, 0x060B
    5b4c:	b9 87       	std	Y+9, r27	; 0x09

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, mult, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5b4e:	80 91 2c 01 	lds	r24, 0x012C
    5b52:	80 90 04 01 	lds	r8, 0x0104
    5b56:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b58:	bb 84       	ldd	r11, Y+11	; 0x0b
    5b5a:	b2 e5       	ldi	r27, 0x52	; 82
    5b5c:	cb 2e       	mov	r12, r27
    5b5e:	e1 2c       	mov	r14, r1
    5b60:	83 01       	movw	r16, r6
    5b62:	21 e0       	ldi	r18, 0x01	; 1
    5b64:	a2 01       	movw	r20, r4
    5b66:	65 e9       	ldi	r22, 0x95	; 149
    5b68:	69 0d       	add	r22, r9
    5b6a:	89 0d       	add	r24, r9
    5b6c:	9c 87       	std	Y+12, r25	; 0x0c
    5b6e:	0e 94 c1 29 	call	0x5382	; 0x5382 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    5b72:	19 e2       	ldi	r17, 0x29	; 41
    5b74:	c1 2e       	mov	r12, r17
    5b76:	11 e0       	ldi	r17, 0x01	; 1
    5b78:	d1 2e       	mov	r13, r17
    5b7a:	0c e2       	ldi	r16, 0x2C	; 44
    5b7c:	e0 2e       	mov	r14, r16
    5b7e:	01 e0       	ldi	r16, 0x01	; 1
    5b80:	f0 2e       	mov	r15, r16
    5b82:	04 e0       	ldi	r16, 0x04	; 4
    5b84:	11 e0       	ldi	r17, 0x01	; 1
    5b86:	20 91 a6 07 	lds	r18, 0x07A6
    5b8a:	49 2d       	mov	r20, r9
    5b8c:	65 e9       	ldi	r22, 0x95	; 149
    5b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b90:	89 2f       	mov	r24, r25
    5b92:	0e 94 19 29 	call	0x5232	; 0x5232 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    5b96:	60 91 29 01 	lds	r22, 0x0129
    5b9a:	65 59       	subi	r22, 0x95	; 149
    5b9c:	69 19       	sub	r22, r9
    5b9e:	c3 01       	movw	r24, r6
    5ba0:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <get_menu_range>
    5ba4:	29 83       	std	Y+1, r18	; 0x01
    5ba6:	3a 83       	std	Y+2, r19	; 0x02
    5ba8:	4b 83       	std	Y+3, r20	; 0x03
    5baa:	5c 83       	std	Y+4, r21	; 0x04
    5bac:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5bae:	80 91 a6 07 	lds	r24, 0x07A6
    5bb2:	80 3e       	cpi	r24, 0xE0	; 224
    5bb4:	f1 f4       	brne	.+60     	; 0x5bf2 <menu_rc_setup+0x148>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    5bb6:	80 91 29 01 	lds	r24, 0x0129
    5bba:	68 2f       	mov	r22, r24
    5bbc:	70 e0       	ldi	r23, 0x00	; 0
    5bbe:	65 59       	subi	r22, 0x95	; 149
    5bc0:	71 09       	sbc	r23, r1
    5bc2:	69 19       	sub	r22, r9
    5bc4:	71 09       	sbc	r23, r1
    5bc6:	fb 01       	movw	r30, r22
    5bc8:	e2 0d       	add	r30, r2
    5bca:	f3 1d       	adc	r31, r3
    5bcc:	ed 58       	subi	r30, 0x8D	; 141
    5bce:	f7 4e       	sbci	r31, 0xE7	; 231
    5bd0:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), mult, range, 0, text_link, false, 0);
    5bd2:	64 0d       	add	r22, r4
    5bd4:	75 1d       	adc	r23, r5
    5bd6:	1f 92       	push	r1
    5bd8:	1f 92       	push	r1
    5bda:	81 2c       	mov	r8, r1
    5bdc:	c1 2c       	mov	r12, r1
    5bde:	e9 80       	ldd	r14, Y+1	; 0x01
    5be0:	fa 80       	ldd	r15, Y+2	; 0x02
    5be2:	0b 81       	ldd	r16, Y+3	; 0x03
    5be4:	1c 81       	ldd	r17, Y+4	; 0x04
    5be6:	2d 81       	ldd	r18, Y+5	; 0x05
    5be8:	41 e0       	ldi	r20, 0x01	; 1
    5bea:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <do_menu_item>
    5bee:	0f 90       	pop	r0
    5bf0:	0f 90       	pop	r0
		}

		if (button == ENTER)
    5bf2:	80 91 a6 07 	lds	r24, 0x07A6
    5bf6:	80 3e       	cpi	r24, 0xE0	; 224
    5bf8:	09 f0       	breq	.+2      	; 0x5bfc <menu_rc_setup+0x152>
    5bfa:	80 cf       	rjmp	.-256    	; 0x5afc <menu_rc_setup+0x52>
		{
			// Update Ch5. mixer with source from Config.FlapChan if in Aeroplane mode and source changed
			if ((Config.MixMode == AEROPLANE) && (Config.FlapChan != temp_flapchan))
    5bfc:	60 91 7c 06 	lds	r22, 0x067C
    5c00:	61 11       	cpse	r22, r1
    5c02:	06 c0       	rjmp	.+12     	; 0x5c10 <menu_rc_setup+0x166>
    5c04:	80 91 0f 06 	lds	r24, 0x060F
    5c08:	2f 81       	ldd	r18, Y+7	; 0x07
    5c0a:	82 13       	cpse	r24, r18
			{
				Config.Channel[CH5].source_a = Config.FlapChan;
    5c0c:	80 93 c2 06 	sts	0x06C2, r24
			}

			// Reset serial in channel masks every time the input type is changed
			if (temp_RxModeIn != Config.RxModeIn)
    5c10:	80 91 0b 06 	lds	r24, 0x060B
    5c14:	39 85       	ldd	r19, Y+9	; 0x09
    5c16:	38 13       	cpse	r19, r24
    5c18:	05 c0       	rjmp	.+10     	; 0x5c24 <menu_rc_setup+0x17a>
					}
				}
			}

			// If model type has changed, reload preset
			if ((section == 3) && (temp_type != Config.MixMode)) 
    5c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    5c1c:	83 30       	cpi	r24, 0x03	; 3
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <menu_rc_setup+0x178>
    5c20:	62 c0       	rjmp	.+196    	; 0x5ce6 <menu_rc_setup+0x23c>
    5c22:	36 c0       	rjmp	.+108    	; 0x5c90 <menu_rc_setup+0x1e6>
			}

			// Reset serial in channel masks every time the input type is changed
			if (temp_RxModeIn != Config.RxModeIn)
			{
				Xtreme_Chanmask = 0;
    5c24:	10 92 7d 07 	sts	0x077D, r1
    5c28:	10 92 7c 07 	sts	0x077C, r1
				Xtreme_RSS = 0;
    5c2c:	10 92 83 07 	sts	0x0783, r1
				Spektrum_Chanmask_0 = 0;	
    5c30:	10 92 a3 07 	sts	0x07A3, r1
    5c34:	10 92 a2 07 	sts	0x07A2, r1
				Spektrum_Chanmask_1 = 0;		
    5c38:	10 92 9e 07 	sts	0x079E, r1
    5c3c:	10 92 9d 07 	sts	0x079D, r1
				Spektrum_frameloss = 0;
    5c40:	10 92 82 07 	sts	0x0782, r1
				SBUS_Flags = 0;
    5c44:	10 92 44 01 	sts	0x0144, r1
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					RxChannel[i] = 0;
					
					// Unused Spektrum channels set to NULL
					if (Config.RxModeOut == SPEKTRUM)
    5c48:	70 91 0c 06 	lds	r23, 0x060C
    5c4c:	80 e0       	ldi	r24, 0x00	; 0
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
						ExtChannel[i] = 0xFFFF;
					}	
					// Unused channels set to mid-way
					else if (Config.RxModeOut == SBUS)
					{
						ExtChannel[i] = 0x400;
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	34 e0       	ldi	r19, 0x04	; 4
					RxChannel[i] = 0;
					
					// Unused Spektrum channels set to NULL
					if (Config.RxModeOut == SPEKTRUM)
					{
						ExtChannel[i] = 0xFFFF;
    5c54:	4f ef       	ldi	r20, 0xFF	; 255
    5c56:	5f ef       	ldi	r21, 0xFF	; 255
				SBUS_Flags = 0;
				
				// Clear channel data
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					RxChannel[i] = 0;
    5c58:	fc 01       	movw	r30, r24
    5c5a:	ee 0f       	add	r30, r30
    5c5c:	ff 1f       	adc	r31, r31
    5c5e:	df 01       	movw	r26, r30
    5c60:	a6 5a       	subi	r26, 0xA6	; 166
    5c62:	b8 4f       	sbci	r27, 0xF8	; 248
    5c64:	11 96       	adiw	r26, 0x01	; 1
    5c66:	1c 92       	st	X, r1
    5c68:	1e 92       	st	-X, r1
    5c6a:	e5 59       	subi	r30, 0x95	; 149
    5c6c:	f8 4f       	sbci	r31, 0xF8	; 248
					
					// Unused Spektrum channels set to NULL
					if (Config.RxModeOut == SPEKTRUM)
    5c6e:	72 30       	cpi	r23, 0x02	; 2
    5c70:	19 f4       	brne	.+6      	; 0x5c78 <menu_rc_setup+0x1ce>
					{
						ExtChannel[i] = 0xFFFF;
    5c72:	51 83       	std	Z+1, r21	; 0x01
    5c74:	40 83       	st	Z, r20
    5c76:	07 c0       	rjmp	.+14     	; 0x5c86 <menu_rc_setup+0x1dc>
					}	
					// Unused channels set to mid-way
					else if (Config.RxModeOut == SBUS)
    5c78:	71 30       	cpi	r23, 0x01	; 1
    5c7a:	19 f4       	brne	.+6      	; 0x5c82 <menu_rc_setup+0x1d8>
					{
						ExtChannel[i] = 0x400;
    5c7c:	31 83       	std	Z+1, r19	; 0x01
    5c7e:	20 83       	st	Z, r18
    5c80:	02 c0       	rjmp	.+4      	; 0x5c86 <menu_rc_setup+0x1dc>
					}
					// Xtreme doesn't care
					else
					{
						ExtChannel[i] = 0;
    5c82:	11 82       	std	Z+1, r1	; 0x01
    5c84:	10 82       	st	Z, r1
    5c86:	01 96       	adiw	r24, 0x01	; 1
				Spektrum_Chanmask_1 = 0;		
				Spektrum_frameloss = 0;
				SBUS_Flags = 0;
				
				// Clear channel data
				for (i = 0; i < MAX_RC_CHANNELS; i++)
    5c88:	88 30       	cpi	r24, 0x08	; 8
    5c8a:	91 05       	cpc	r25, r1
    5c8c:	29 f7       	brne	.-54     	; 0x5c58 <menu_rc_setup+0x1ae>
    5c8e:	c5 cf       	rjmp	.-118    	; 0x5c1a <menu_rc_setup+0x170>
					}
				}
			}

			// If model type has changed, reload preset
			if ((section == 3) && (temp_type != Config.MixMode)) 
    5c90:	98 85       	ldd	r25, Y+8	; 0x08
    5c92:	96 17       	cp	r25, r22
    5c94:	41 f1       	breq	.+80     	; 0x5ce6 <menu_rc_setup+0x23c>
			{
				switch(Config.MixMode)  // Load selected mix
    5c96:	61 30       	cpi	r22, 0x01	; 1
    5c98:	39 f0       	breq	.+14     	; 0x5ca8 <menu_rc_setup+0x1fe>
    5c9a:	62 30       	cpi	r22, 0x02	; 2
    5c9c:	51 f0       	breq	.+20     	; 0x5cb2 <menu_rc_setup+0x208>
    5c9e:	61 11       	cpse	r22, r1
    5ca0:	22 c0       	rjmp	.+68     	; 0x5ce6 <menu_rc_setup+0x23c>
				{
					case AEROPLANE:
						get_preset_mix(AEROPLANE_MIX);
    5ca2:	8c e0       	ldi	r24, 0x0C	; 12
    5ca4:	99 e1       	ldi	r25, 0x19	; 25
    5ca6:	02 c0       	rjmp	.+4      	; 0x5cac <menu_rc_setup+0x202>
						break;	
					case FWING:
						get_preset_mix(FLYING_WING_MIX);
    5ca8:	84 e9       	ldi	r24, 0x94	; 148
    5caa:	98 e1       	ldi	r25, 0x18	; 24
    5cac:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <get_preset_mix>
						break;
    5cb0:	1a c0       	rjmp	.+52     	; 0x5ce6 <menu_rc_setup+0x23c>
					case MANUAL:
						// Clear all channel info
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));
    5cb2:	88 e7       	ldi	r24, 0x78	; 120
    5cb4:	e4 e8       	ldi	r30, 0x84	; 132
    5cb6:	f6 e0       	ldi	r31, 0x06	; 6
    5cb8:	df 01       	movw	r26, r30
    5cba:	1d 92       	st	X+, r1
    5cbc:	8a 95       	dec	r24
    5cbe:	e9 f7       	brne	.-6      	; 0x5cba <menu_rc_setup+0x210>
    5cc0:	e1 e9       	ldi	r30, 0x91	; 145
    5cc2:	f6 e0       	ldi	r31, 0x06	; 6

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
    5cc4:	80 e0       	ldi	r24, 0x00	; 0
						{
							Config.Channel[i].source_a = i;			// Set to mirror the inputs
							Config.Channel[i].source_a_volume = 100;
    5cc6:	24 e6       	ldi	r18, 0x64	; 100
							Config.Channel[i].source_b = NOCHAN;
    5cc8:	98 e0       	ldi	r25, 0x08	; 8
    5cca:	df 01       	movw	r26, r30
    5ccc:	1b 97       	sbiw	r26, 0x0b	; 11
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
						{
							Config.Channel[i].source_a = i;			// Set to mirror the inputs
    5cce:	8c 93       	st	X, r24
    5cd0:	11 96       	adiw	r26, 0x01	; 1
							Config.Channel[i].source_a_volume = 100;
    5cd2:	2c 93       	st	X, r18
    5cd4:	11 96       	adiw	r26, 0x01	; 1
							Config.Channel[i].source_b = NOCHAN;
    5cd6:	9c 93       	st	X, r25
    5cd8:	17 96       	adiw	r26, 0x07	; 7
							Config.Channel[i].output_b = UNUSED;
    5cda:	9c 93       	st	X, r25
							Config.Channel[i].output_c = UNUSED;
    5cdc:	90 83       	st	Z, r25
					case MANUAL:
						// Clear all channel info
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
    5cde:	8f 5f       	subi	r24, 0xFF	; 255
    5ce0:	3f 96       	adiw	r30, 0x0f	; 15
    5ce2:	88 30       	cpi	r24, 0x08	; 8
    5ce4:	91 f7       	brne	.-28     	; 0x5cca <menu_rc_setup+0x220>
					default:
						break;
				}
			}

			init_int();				// In case RC type has changed, reinitialise interrupts
    5ce6:	0e 94 99 26 	call	0x4d32	; 0x4d32 <init_int>
			init_uart();			// and UART
    5cea:	0e 94 05 38 	call	0x700a	; 0x700a <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    5cee:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <UpdateLimits>
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
#endif
			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    5cf2:	20 91 0d 06 	lds	r18, 0x060D
    5cf6:	a3 ec       	ldi	r26, 0xC3	; 195
    5cf8:	b5 e0       	ldi	r27, 0x05	; 5
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	fc 01       	movw	r30, r24
    5d00:	21 30       	cpi	r18, 0x01	; 1
    5d02:	19 f4       	brne	.+6      	; 0x5d0a <menu_rc_setup+0x260>
    5d04:	ea 50       	subi	r30, 0x0A	; 10
    5d06:	ff 4f       	sbci	r31, 0xFF	; 255
    5d08:	02 c0       	rjmp	.+4      	; 0x5d0e <menu_rc_setup+0x264>
    5d0a:	e2 50       	subi	r30, 0x02	; 2
    5d0c:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    5d0e:	e4 91       	lpm	r30, Z
    5d10:	ec 93       	st	X, r30
    5d12:	01 96       	adiw	r24, 0x01	; 1
    5d14:	11 96       	adiw	r26, 0x01	; 1
#ifdef KK21
			// Update MPU6050 LPF
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
#endif
			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    5d16:	88 30       	cpi	r24, 0x08	; 8
    5d18:	91 05       	cpc	r25, r1
    5d1a:	89 f7       	brne	.-30     	; 0x5cfe <menu_rc_setup+0x254>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
				}
			}

			Save_Config_to_EEPROM(); // Save value and return
    5d1c:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5d20:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <Wait_BUTTON4>
    5d24:	eb ce       	rjmp	.-554    	; 0x5afc <menu_rc_setup+0x52>
		}
	}
}
    5d26:	2c 96       	adiw	r28, 0x0c	; 12
    5d28:	e2 e1       	ldi	r30, 0x12	; 18
    5d2a:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

00005d2e <get_preset_mix>:

// Get preset mix from Program memory
void get_preset_mix(const channel_t* preset)
{
	// Clear all channels first
	memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));
    5d2e:	28 e7       	ldi	r18, 0x78	; 120
    5d30:	e4 e8       	ldi	r30, 0x84	; 132
    5d32:	f6 e0       	ldi	r31, 0x06	; 6
    5d34:	df 01       	movw	r26, r30
    5d36:	1d 92       	st	X+, r1
    5d38:	2a 95       	dec	r18
    5d3a:	e9 f7       	brne	.-6      	; 0x5d36 <get_preset_mix+0x8>
	memcpy_P(&Config.Channel[0].value,&preset[0].value,(sizeof(channel_t) * MAX_OUTPUTS));
    5d3c:	48 e7       	ldi	r20, 0x78	; 120
    5d3e:	50 e0       	ldi	r21, 0x00	; 0
    5d40:	bc 01       	movw	r22, r24
    5d42:	cf 01       	movw	r24, r30
    5d44:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <memcpy_P>
    5d48:	08 95       	ret

00005d4a <UpdateLimits>:
}

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
void UpdateLimits(void)
{
    5d4a:	a6 e0       	ldi	r26, 0x06	; 6
    5d4c:	b0 e0       	ldi	r27, 0x00	; 0
    5d4e:	eb ea       	ldi	r30, 0xAB	; 171
    5d50:	fe e2       	ldi	r31, 0x2E	; 46
    5d52:	0c 94 33 3e 	jmp	0x7c66	; 0x7c66 <__prologue_saves__+0x10>
	uint8_t i;
	int8_t limits[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll_limit, Config.FlightMode[Config.Flight].Pitch_limit, Config.FlightMode[Config.Flight].Yaw_limit};
    5d56:	80 91 46 07 	lds	r24, 0x0746
    5d5a:	26 e1       	ldi	r18, 0x16	; 22
    5d5c:	82 02       	muls	r24, r18
    5d5e:	c0 01       	movw	r24, r0
    5d60:	11 24       	eor	r1, r1
    5d62:	8e 53       	subi	r24, 0x3E	; 62
    5d64:	9a 4f       	sbci	r25, 0xFA	; 250
    5d66:	fc 01       	movw	r30, r24
    5d68:	e1 5a       	subi	r30, 0xA1	; 161
    5d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6c:	20 81       	ld	r18, Z
    5d6e:	2c 83       	std	Y+4, r18	; 0x04
    5d70:	37 96       	adiw	r30, 0x07	; 7
    5d72:	20 81       	ld	r18, Z
    5d74:	2d 83       	std	Y+5, r18	; 0x05
    5d76:	37 96       	adiw	r30, 0x07	; 7
    5d78:	20 81       	ld	r18, Z
    5d7a:	2e 83       	std	Y+6, r18	; 0x06
	int32_t temp32, gain32;
	int8_t gains[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.I_mult, Config.FlightMode[Config.Flight].Pitch.I_mult, Config.FlightMode[Config.Flight].Yaw.I_mult};
    5d7c:	70 97       	sbiw	r30, 0x10	; 16
    5d7e:	20 81       	ld	r18, Z
    5d80:	29 83       	std	Y+1, r18	; 0x01
    5d82:	37 96       	adiw	r30, 0x07	; 7
    5d84:	20 81       	ld	r18, Z
    5d86:	2a 83       	std	Y+2, r18	; 0x02
    5d88:	37 96       	adiw	r30, 0x07	; 7
    5d8a:	80 81       	ld	r24, Z
    5d8c:	8b 83       	std	Y+3, r24	; 0x03

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    5d8e:	80 91 7f 06 	lds	r24, 0x067F
    5d92:	99 27       	eor	r25, r25
    5d94:	87 fd       	sbrc	r24, 7
    5d96:	90 95       	com	r25
    5d98:	a9 2f       	mov	r26, r25
    5d9a:	b9 2f       	mov	r27, r25
    5d9c:	89 30       	cpi	r24, 0x09	; 9
    5d9e:	91 05       	cpc	r25, r1
    5da0:	08 f5       	brcc	.+66     	; 0x5de4 <UpdateLimits+0x9a>
    5da2:	fc 01       	movw	r30, r24
    5da4:	e0 5a       	subi	r30, 0xA0	; 160
    5da6:	ff 4f       	sbci	r31, 0xFF	; 255
    5da8:	0c 94 f4 3d 	jmp	0x7be8	; 0x7be8 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    5dac:	80 e4       	ldi	r24, 0x40	; 64
    5dae:	91 e0       	ldi	r25, 0x01	; 1
    5db0:	14 c0       	rjmp	.+40     	; 0x5dda <UpdateLimits+0x90>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    5db2:	8a e4       	ldi	r24, 0x4A	; 74
    5db4:	91 e0       	ldi	r25, 0x01	; 1
    5db6:	11 c0       	rjmp	.+34     	; 0x5dda <UpdateLimits+0x90>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    5db8:	84 e5       	ldi	r24, 0x54	; 84
    5dba:	91 e0       	ldi	r25, 0x01	; 1
    5dbc:	0e c0       	rjmp	.+28     	; 0x5dda <UpdateLimits+0x90>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    5dbe:	8e e5       	ldi	r24, 0x5E	; 94
    5dc0:	91 e0       	ldi	r25, 0x01	; 1
    5dc2:	0b c0       	rjmp	.+22     	; 0x5dda <UpdateLimits+0x90>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    5dc4:	88 e6       	ldi	r24, 0x68	; 104
    5dc6:	91 e0       	ldi	r25, 0x01	; 1
    5dc8:	08 c0       	rjmp	.+16     	; 0x5dda <UpdateLimits+0x90>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    5dca:	82 e7       	ldi	r24, 0x72	; 114
    5dcc:	91 e0       	ldi	r25, 0x01	; 1
    5dce:	05 c0       	rjmp	.+10     	; 0x5dda <UpdateLimits+0x90>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    5dd0:	8c e7       	ldi	r24, 0x7C	; 124
    5dd2:	91 e0       	ldi	r25, 0x01	; 1
    5dd4:	02 c0       	rjmp	.+4      	; 0x5dda <UpdateLimits+0x90>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    5dd6:	86 e8       	ldi	r24, 0x86	; 134
    5dd8:	91 e0       	ldi	r25, 0x01	; 1
    5dda:	90 93 77 06 	sts	0x0677, r25
    5dde:	80 93 76 06 	sts	0x0676, r24
			break;
    5de2:	04 c0       	rjmp	.+8      	; 0x5dec <UpdateLimits+0xa2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    5de4:	10 92 77 06 	sts	0x0677, r1
    5de8:	10 92 76 06 	sts	0x0676, r1
			break;
	}
	
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    5dec:	20 91 26 01 	lds	r18, 0x0126
    5df0:	30 91 27 01 	lds	r19, 0x0127
    5df4:	80 91 76 06 	lds	r24, 0x0676
    5df8:	90 91 77 06 	lds	r25, 0x0677
    5dfc:	26 36       	cpi	r18, 0x66	; 102
    5dfe:	48 e0       	ldi	r20, 0x08	; 8
    5e00:	34 07       	cpc	r19, r20
    5e02:	c0 f0       	brcs	.+48     	; 0x5e34 <UpdateLimits+0xea>
	{
		Config.PowerTriggerActual *= 6;
    5e04:	46 e0       	ldi	r20, 0x06	; 6
    5e06:	48 9f       	mul	r20, r24
    5e08:	90 01       	movw	r18, r0
    5e0a:	49 9f       	mul	r20, r25
    5e0c:	30 0d       	add	r19, r0
    5e0e:	11 24       	eor	r1, r1
    5e10:	30 93 77 06 	sts	0x0677, r19
    5e14:	20 93 76 06 	sts	0x0676, r18
    5e18:	7e 01       	movw	r14, r28
    5e1a:	64 e0       	ldi	r22, 0x04	; 4
    5e1c:	e6 0e       	add	r14, r22
    5e1e:	f1 1c       	adc	r15, r1
    5e20:	0d e5       	ldi	r16, 0x5D	; 93
    5e22:	16 e0       	ldi	r17, 0x06	; 6
    5e24:	ce 01       	movw	r24, r28
    5e26:	01 96       	adiw	r24, 0x01	; 1
    5e28:	6c 01       	movw	r12, r24
    5e2a:	5e 01       	movw	r10, r28
    5e2c:	97 e0       	ldi	r25, 0x07	; 7
    5e2e:	a9 0e       	add	r10, r25
    5e30:	b1 1c       	adc	r11, r1
    5e32:	25 c0       	rjmp	.+74     	; 0x5e7e <UpdateLimits+0x134>
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    5e34:	a9 01       	movw	r20, r18
    5e36:	42 5c       	subi	r20, 0xC2	; 194
    5e38:	56 40       	sbci	r21, 0x06	; 6
    5e3a:	44 3a       	cpi	r20, 0xA4	; 164
    5e3c:	51 40       	sbci	r21, 0x01	; 1
    5e3e:	10 f4       	brcc	.+4      	; 0x5e44 <UpdateLimits+0xfa>
	{
		Config.PowerTriggerActual *= 5;
    5e40:	45 e0       	ldi	r20, 0x05	; 5
    5e42:	e1 cf       	rjmp	.-62     	; 0x5e06 <UpdateLimits+0xbc>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    5e44:	a9 01       	movw	r20, r18
    5e46:	44 51       	subi	r20, 0x14	; 20
    5e48:	55 40       	sbci	r21, 0x05	; 5
    5e4a:	4e 3a       	cpi	r20, 0xAE	; 174
    5e4c:	51 40       	sbci	r21, 0x01	; 1
    5e4e:	28 f4       	brcc	.+10     	; 0x5e5a <UpdateLimits+0x110>
	{
		Config.PowerTriggerActual *= 4;
    5e50:	88 0f       	add	r24, r24
    5e52:	99 1f       	adc	r25, r25
    5e54:	88 0f       	add	r24, r24
    5e56:	99 1f       	adc	r25, r25
    5e58:	0d c0       	rjmp	.+26     	; 0x5e74 <UpdateLimits+0x12a>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    5e5a:	24 58       	subi	r18, 0x84	; 132
    5e5c:	33 40       	sbci	r19, 0x03	; 3
    5e5e:	20 39       	cpi	r18, 0x90	; 144
    5e60:	31 40       	sbci	r19, 0x01	; 1
    5e62:	30 f4       	brcc	.+12     	; 0x5e70 <UpdateLimits+0x126>
	{
		Config.PowerTriggerActual *= 3;
    5e64:	9c 01       	movw	r18, r24
    5e66:	22 0f       	add	r18, r18
    5e68:	33 1f       	adc	r19, r19
    5e6a:	28 0f       	add	r18, r24
    5e6c:	39 1f       	adc	r19, r25
    5e6e:	d0 cf       	rjmp	.-96     	; 0x5e10 <UpdateLimits+0xc6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    5e70:	88 0f       	add	r24, r24
    5e72:	99 1f       	adc	r25, r25
    5e74:	90 93 77 06 	sts	0x0677, r25
    5e78:	80 93 76 06 	sts	0x0676, r24
    5e7c:	cd cf       	rjmp	.-102    	; 0x5e18 <UpdateLimits+0xce>
	}

	// Update I_term limits
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		temp32 	= limits[i]; 						// Promote
    5e7e:	f7 01       	movw	r30, r14
    5e80:	a1 91       	ld	r26, Z+
    5e82:	7f 01       	movw	r14, r30

		// I-term output (throw). Convert from % to actual count
		// A value of 80,000 results in +/- 1250 or full throw at the output stage
		// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
		Config.Raw_I_Limits[i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    5e84:	bb 27       	eor	r27, r27
    5e86:	a7 fd       	sbrc	r26, 7
    5e88:	b0 95       	com	r27
    5e8a:	20 e8       	ldi	r18, 0x80	; 128
    5e8c:	32 e0       	ldi	r19, 0x02	; 2
    5e8e:	0e 94 11 3e 	call	0x7c22	; 0x7c22 <__usmulhisi3>
    5e92:	d8 01       	movw	r26, r16
    5e94:	6d 93       	st	X+, r22
    5e96:	7d 93       	st	X+, r23
    5e98:	8d 93       	st	X+, r24
    5e9a:	9d 93       	st	X+, r25
    5e9c:	8d 01       	movw	r16, r26

		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 32) / gain :)

		if (gains[i] != 0)
    5e9e:	f6 01       	movw	r30, r12
    5ea0:	21 91       	ld	r18, Z+
    5ea2:	6f 01       	movw	r12, r30
    5ea4:	22 23       	and	r18, r18
    5ea6:	b1 f0       	breq	.+44     	; 0x5ed4 <UpdateLimits+0x18a>
		{
			gain32 = gains[i];						// Promote gain value
			Config.Raw_I_Constrain[i] = (Config.Raw_I_Limits[i] << 5) / gain32;
    5ea8:	e5 e0       	ldi	r30, 0x05	; 5
    5eaa:	66 0f       	add	r22, r22
    5eac:	77 1f       	adc	r23, r23
    5eae:	88 1f       	adc	r24, r24
    5eb0:	99 1f       	adc	r25, r25
    5eb2:	ea 95       	dec	r30
    5eb4:	d1 f7       	brne	.-12     	; 0x5eaa <UpdateLimits+0x160>
		// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 32) / gain :)

		if (gains[i] != 0)
		{
			gain32 = gains[i];						// Promote gain value
    5eb6:	33 27       	eor	r19, r19
    5eb8:	27 fd       	sbrc	r18, 7
    5eba:	30 95       	com	r19
    5ebc:	43 2f       	mov	r20, r19
    5ebe:	53 2f       	mov	r21, r19
			Config.Raw_I_Constrain[i] = (Config.Raw_I_Limits[i] << 5) / gain32;
    5ec0:	0e 94 d5 3d 	call	0x7baa	; 0x7baa <__divmodsi4>
    5ec4:	d8 01       	movw	r26, r16
    5ec6:	18 96       	adiw	r26, 0x08	; 8
    5ec8:	2d 93       	st	X+, r18
    5eca:	3d 93       	st	X+, r19
    5ecc:	4d 93       	st	X+, r20
    5ece:	5c 93       	st	X, r21
    5ed0:	1b 97       	sbiw	r26, 0x0b	; 11
    5ed2:	05 c0       	rjmp	.+10     	; 0x5ede <UpdateLimits+0x194>
		}
		else
		{
			Config.Raw_I_Constrain[i] = 0;
    5ed4:	fd 01       	movw	r30, r26
    5ed6:	10 86       	std	Z+8, r1	; 0x08
    5ed8:	11 86       	std	Z+9, r1	; 0x09
    5eda:	12 86       	std	Z+10, r1	; 0x0a
    5edc:	13 86       	std	Z+11, r1	; 0x0b
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term limits
	for (i = 0; i < NUMBEROFAXIS; i++)
    5ede:	ea 14       	cp	r14, r10
    5ee0:	fb 04       	cpc	r15, r11
    5ee2:	69 f6       	brne	.-102    	; 0x5e7e <UpdateLimits+0x134>
    5ee4:	4c e0       	ldi	r20, 0x0C	; 12
    5ee6:	57 e0       	ldi	r21, 0x07	; 7
    5ee8:	24 e1       	ldi	r18, 0x14	; 20
    5eea:	37 e0       	ldi	r19, 0x07	; 7
    5eec:	8c e1       	ldi	r24, 0x1C	; 28
    5eee:	97 e0       	ldi	r25, 0x07	; 7
    5ef0:	64 e0       	ldi	r22, 0x04	; 4
    5ef2:	e6 2e       	mov	r14, r22
    5ef4:	67 e0       	ldi	r22, 0x07	; 7
    5ef6:	f6 2e       	mov	r15, r22
    5ef8:	e2 ec       	ldi	r30, 0xC2	; 194
    5efa:	f5 e0       	ldi	r31, 0x05	; 5
    5efc:	10 e0       	ldi	r17, 0x00	; 0
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
    5efe:	da 01       	movw	r26, r20
    5f00:	6d 91       	ld	r22, X+
    5f02:	ad 01       	movw	r20, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    5f04:	ba e0       	ldi	r27, 0x0A	; 10
    5f06:	6b 02       	muls	r22, r27
    5f08:	b0 01       	movw	r22, r0
    5f0a:	11 24       	eor	r1, r1
    5f0c:	6a 55       	subi	r22, 0x5A	; 90
    5f0e:	71 4f       	sbci	r23, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
    5f10:	72 87       	std	Z+10, r23	; 0x0a
    5f12:	61 87       	std	Z+9, r22	; 0x09
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    5f14:	d9 01       	movw	r26, r18
    5f16:	6d 91       	ld	r22, X+
    5f18:	9d 01       	movw	r18, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    5f1a:	ba e0       	ldi	r27, 0x0A	; 10
    5f1c:	6b 02       	muls	r22, r27
    5f1e:	b0 01       	movw	r22, r0
    5f20:	11 24       	eor	r1, r1
    5f22:	6a 55       	subi	r22, 0x5A	; 90
    5f24:	71 4f       	sbci	r23, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    5f26:	74 87       	std	Z+12, r23	; 0x0c
    5f28:	63 87       	std	Z+11, r22	; 0x0b
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
    5f2a:	dc 01       	movw	r26, r24
    5f2c:	6d 91       	ld	r22, X+
    5f2e:	cd 01       	movw	r24, r26
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    5f30:	ba e0       	ldi	r27, 0x0A	; 10
    5f32:	6b 02       	muls	r22, r27
    5f34:	b0 01       	movw	r22, r0
    5f36:	11 24       	eor	r1, r1
	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
    5f38:	76 87       	std	Z+14, r23	; 0x0e
    5f3a:	65 87       	std	Z+13, r22	; 0x0d
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
    5f3c:	d7 01       	movw	r26, r14
    5f3e:	6d 91       	ld	r22, X+
    5f40:	7d 01       	movw	r14, r26
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    5f42:	ba e0       	ldi	r27, 0x0A	; 10
    5f44:	6b 02       	muls	r22, r27
    5f46:	b0 01       	movw	r22, r0
    5f48:	11 24       	eor	r1, r1
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
    5f4a:	70 8b       	std	Z+16, r23	; 0x10
    5f4c:	67 87       	std	Z+15, r22	; 0x0f
			Config.Raw_I_Constrain[i] = 0;
		}
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    5f4e:	1f 5f       	subi	r17, 0xFF	; 255
    5f50:	38 96       	adiw	r30, 0x08	; 8
    5f52:	18 30       	cpi	r17, 0x08	; 8
    5f54:	a1 f6       	brne	.-88     	; 0x5efe <UpdateLimits+0x1b4>
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
	}

	// Update dynamic gain divisor
	if (Config.DynGain > 0)
    5f56:	60 91 11 06 	lds	r22, 0x0611
    5f5a:	16 16       	cp	r1, r22
    5f5c:	64 f4       	brge	.+24     	; 0x5f76 <UpdateLimits+0x22c>
	{
		Config.DynGainDiv = 2500 / Config.DynGain;
    5f5e:	77 27       	eor	r23, r23
    5f60:	67 fd       	sbrc	r22, 7
    5f62:	70 95       	com	r23
    5f64:	84 ec       	ldi	r24, 0xC4	; 196
    5f66:	99 e0       	ldi	r25, 0x09	; 9
    5f68:	0e 94 c1 3d 	call	0x7b82	; 0x7b82 <__divmodhi4>
    5f6c:	70 93 7b 06 	sts	0x067B, r23
    5f70:	60 93 7a 06 	sts	0x067A, r22
    5f74:	06 c0       	rjmp	.+12     	; 0x5f82 <UpdateLimits+0x238>
	}
	else
	{
		Config.DynGainDiv = 2500;
    5f76:	84 ec       	ldi	r24, 0xC4	; 196
    5f78:	99 e0       	ldi	r25, 0x09	; 9
    5f7a:	90 93 7b 06 	sts	0x067B, r25
    5f7e:	80 93 7a 06 	sts	0x067A, r24
	}

	// Update RC deadband amount
	 Config.DeadbandLimit = (Config.Deadband * 12); // 0 to 5% scaled to 0 to 60
    5f82:	80 91 15 06 	lds	r24, 0x0615
    5f86:	ec e0       	ldi	r30, 0x0C	; 12
    5f88:	8e 02       	muls	r24, r30
    5f8a:	c0 01       	movw	r24, r0
    5f8c:	11 24       	eor	r1, r1
    5f8e:	90 93 79 06 	sts	0x0679, r25
    5f92:	80 93 78 06 	sts	0x0678, r24

	// Update Hands-free trigger based on deadband setting
	Config.HandsFreetrigger = Config.DeadbandLimit;
    5f96:	80 93 75 06 	sts	0x0675, r24
    5f9a:	47 e4       	ldi	r20, 0x47	; 71
    5f9c:	57 e0       	ldi	r21, 0x07	; 7
    5f9e:	aa e2       	ldi	r26, 0x2A	; 42
    5fa0:	b6 e0       	ldi	r27, 0x06	; 6
    5fa2:	cd 01       	movw	r24, r26
    5fa4:	07 97       	sbiw	r24, 0x07	; 7
	
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = 0; i <= FLIGHT_MODES; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    5fa6:	fc 01       	movw	r30, r24
    5fa8:	80 81       	ld	r24, Z
    5faa:	fa e0       	ldi	r31, 0x0A	; 10
    5fac:	8f 02       	muls	r24, r31
    5fae:	c0 01       	movw	r24, r0
    5fb0:	11 24       	eor	r1, r1
    5fb2:	fa 01       	movw	r30, r20
    5fb4:	81 93       	st	Z+, r24
    5fb6:	91 93       	st	Z+, r25
    5fb8:	af 01       	movw	r20, r30
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    5fba:	8c 91       	ld	r24, X
    5fbc:	fa e0       	ldi	r31, 0x0A	; 10
    5fbe:	8f 02       	muls	r24, r31
    5fc0:	c0 01       	movw	r24, r0
    5fc2:	11 24       	eor	r1, r1
    5fc4:	fa 01       	movw	r30, r20
    5fc6:	95 83       	std	Z+5, r25	; 0x05
    5fc8:	84 83       	std	Z+4, r24	; 0x04
    5fca:	56 96       	adiw	r26, 0x16	; 22
	// Update Hands-free trigger based on deadband setting
	Config.HandsFreetrigger = Config.DeadbandLimit;
	
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = 0; i <= FLIGHT_MODES; i++)
    5fcc:	f7 e0       	ldi	r31, 0x07	; 7
    5fce:	4f 34       	cpi	r20, 0x4F	; 79
    5fd0:	5f 07       	cpc	r21, r31
    5fd2:	39 f7       	brne	.-50     	; 0x5fa2 <UpdateLimits+0x258>
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
	}
}
    5fd4:	26 96       	adiw	r28, 0x06	; 6
    5fd6:	ea e0       	ldi	r30, 0x0A	; 10
    5fd8:	0c 94 4f 3e 	jmp	0x7c9e	; 0x7c9e <__epilogue_restores__+0x10>

00005fdc <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    5fdc:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    5fde:	64 36       	cpi	r22, 0x64	; 100
    5fe0:	71 05       	cpc	r23, r1
    5fe2:	e9 f0       	breq	.+58     	; 0x601e <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    5fe4:	6c 39       	cpi	r22, 0x9C	; 156
    5fe6:	8f ef       	ldi	r24, 0xFF	; 255
    5fe8:	78 07       	cpc	r23, r24
    5fea:	29 f4       	brne	.+10     	; 0x5ff6 <scale32+0x1a>
	{
		return -value16;
    5fec:	88 27       	eor	r24, r24
    5fee:	99 27       	eor	r25, r25
    5ff0:	82 1b       	sub	r24, r18
    5ff2:	93 0b       	sbc	r25, r19
    5ff4:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    5ff6:	61 15       	cp	r22, r1
    5ff8:	71 05       	cpc	r23, r1
    5ffa:	71 f0       	breq	.+28     	; 0x6018 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    5ffc:	db 01       	movw	r26, r22
    5ffe:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    6002:	6e 5c       	subi	r22, 0xCE	; 206
    6004:	7f 4f       	sbci	r23, 0xFF	; 255
    6006:	8f 4f       	sbci	r24, 0xFF	; 255
    6008:	9f 4f       	sbci	r25, 0xFF	; 255
    600a:	24 e6       	ldi	r18, 0x64	; 100
    600c:	30 e0       	ldi	r19, 0x00	; 0
    600e:	40 e0       	ldi	r20, 0x00	; 0
    6010:	50 e0       	ldi	r21, 0x00	; 0
    6012:	0e 94 d5 3d 	call	0x7baa	; 0x7baa <__divmodsi4>
    6016:	03 c0       	rjmp	.+6      	; 0x601e <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;
    6018:	80 e0       	ldi	r24, 0x00	; 0
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    601e:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    6020:	08 95       	ret

00006022 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    6022:	a1 e1       	ldi	r26, 0x11	; 17
    6024:	b0 e0       	ldi	r27, 0x00	; 0
    6026:	e7 e1       	ldi	r30, 0x17	; 23
    6028:	f0 e3       	ldi	r31, 0x30	; 48
    602a:	0c 94 2c 3e 	jmp	0x7c58	; 0x7c58 <__prologue_saves__+0x2>
	int16_t temp2 = 0;
	int16_t solution = 0;
	bool	TwoAilerons = false;
	
	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    602e:	60 91 aa 05 	lds	r22, 0x05AA
    6032:	70 91 ab 05 	lds	r23, 0x05AB
    6036:	80 91 ac 05 	lds	r24, 0x05AC
    603a:	90 91 ad 05 	lds	r25, 0x05AD
    603e:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    6042:	5b 01       	movw	r10, r22
    6044:	43 e0       	ldi	r20, 0x03	; 3
    6046:	aa 0c       	add	r10, r10
    6048:	bb 1c       	adc	r11, r11
    604a:	4a 95       	dec	r20
    604c:	e1 f7       	brne	.-8      	; 0x6046 <ProcessMixer+0x24>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    604e:	60 91 ae 05 	lds	r22, 0x05AE
    6052:	70 91 af 05 	lds	r23, 0x05AF
    6056:	80 91 b0 05 	lds	r24, 0x05B0
    605a:	90 91 b1 05 	lds	r25, 0x05B1
    605e:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
    6062:	53 e0       	ldi	r21, 0x03	; 3
    6064:	66 0f       	add	r22, r22
    6066:	77 1f       	adc	r23, r23
    6068:	5a 95       	dec	r21
    606a:	e1 f7       	brne	.-8      	; 0x6064 <ProcessMixer+0x42>
	int16_t	SensorData[7] = {PID_Gyros[ROLL], PID_Gyros[PITCH], PID_Gyros[YAW], temp1, temp2, PID_ACCs[ROLL], PID_ACCs[PITCH]};
    606c:	00 91 b5 07 	lds	r16, 0x07B5
    6070:	10 91 b6 07 	lds	r17, 0x07B6
    6074:	1a 83       	std	Y+2, r17	; 0x02
    6076:	09 83       	std	Y+1, r16	; 0x01
    6078:	e0 90 b7 07 	lds	r14, 0x07B7
    607c:	f0 90 b8 07 	lds	r15, 0x07B8
    6080:	fc 82       	std	Y+4, r15	; 0x04
    6082:	eb 82       	std	Y+3, r14	; 0x03
    6084:	c0 90 b9 07 	lds	r12, 0x07B9
    6088:	d0 90 ba 07 	lds	r13, 0x07BA
    608c:	de 82       	std	Y+6, r13	; 0x06
    608e:	cd 82       	std	Y+5, r12	; 0x05
    6090:	b8 86       	std	Y+8, r11	; 0x08
    6092:	af 82       	std	Y+7, r10	; 0x07
    6094:	7a 87       	std	Y+10, r23	; 0x0a
    6096:	69 87       	std	Y+9, r22	; 0x09
    6098:	a0 90 bb 07 	lds	r10, 0x07BB
    609c:	b0 90 bc 07 	lds	r11, 0x07BC
    60a0:	bc 86       	std	Y+12, r11	; 0x0c
    60a2:	ab 86       	std	Y+11, r10	; 0x0b
    60a4:	80 90 bd 07 	lds	r8, 0x07BD
    60a8:	90 90 be 07 	lds	r9, 0x07BE
    60ac:	9e 86       	std	Y+14, r9	; 0x0e
    60ae:	8d 86       	std	Y+13, r8	; 0x0d

	//************************************************************
	// Un-mix flaps from flaperons as required
	//************************************************************ 

	if (Config.FlapChan != NOCHAN)
    60b0:	30 90 0f 06 	lds	r3, 0x060F
    60b4:	28 e0       	ldi	r18, 0x08	; 8
    60b6:	32 16       	cp	r3, r18
    60b8:	61 f1       	breq	.+88     	; 0x6112 <ProcessMixer+0xf0>
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
    60ba:	80 91 d1 07 	lds	r24, 0x07D1
    60be:	90 91 d2 07 	lds	r25, 0x07D2
    60c2:	81 35       	cpi	r24, 0x51	; 81
    60c4:	9b 4f       	sbci	r25, 0xFB	; 251
    60c6:	54 f1       	brlt	.+84     	; 0x611c <ProcessMixer+0xfa>
			(RCinputs[AILERON] < 1200) &&
    60c8:	80 91 d1 07 	lds	r24, 0x07D1
    60cc:	90 91 d2 07 	lds	r25, 0x07D2
	//************************************************************ 

	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
    60d0:	80 3b       	cpi	r24, 0xB0	; 176
    60d2:	94 40       	sbci	r25, 0x04	; 4
    60d4:	1c f5       	brge	.+70     	; 0x611c <ProcessMixer+0xfa>
			(RCinputs[AILERON] < 1200) &&
			(RCinputs[Config.FlapChan] > -1200) && 
    60d6:	e3 2d       	mov	r30, r3
    60d8:	ee 0f       	add	r30, r30
    60da:	ff 0b       	sbc	r31, r31
    60dc:	e1 53       	subi	r30, 0x31	; 49
    60de:	f8 4f       	sbci	r31, 0xF8	; 248
    60e0:	80 81       	ld	r24, Z
    60e2:	91 81       	ldd	r25, Z+1	; 0x01

	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
			(RCinputs[AILERON] < 1200) &&
    60e4:	81 35       	cpi	r24, 0x51	; 81
    60e6:	9b 4f       	sbci	r25, 0xFB	; 251
    60e8:	cc f0       	brlt	.+50     	; 0x611c <ProcessMixer+0xfa>
			(RCinputs[Config.FlapChan] > -1200) && 
			(RCinputs[Config.FlapChan] < 1200))
    60ea:	80 81       	ld	r24, Z
    60ec:	91 81       	ldd	r25, Z+1	; 0x01
	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
			(RCinputs[AILERON] < 1200) &&
			(RCinputs[Config.FlapChan] > -1200) && 
    60ee:	80 3b       	cpi	r24, 0xB0	; 176
    60f0:	94 40       	sbci	r25, 0x04	; 4
    60f2:	a4 f4       	brge	.+40     	; 0x611c <ProcessMixer+0xfa>
			(RCinputs[Config.FlapChan] < 1200))
		{
			flap = RCinputs[AILERON] - RCinputs[Config.FlapChan]; 	
    60f4:	80 91 d1 07 	lds	r24, 0x07D1
    60f8:	90 91 d2 07 	lds	r25, 0x07D2
    60fc:	20 81       	ld	r18, Z
    60fe:	31 81       	ldd	r19, Z+1	; 0x01
    6100:	82 1b       	sub	r24, r18
    6102:	93 0b       	sbc	r25, r19
			flap = flap >> 1; 	
    6104:	95 95       	asr	r25
    6106:	87 95       	ror	r24
    6108:	90 93 33 01 	sts	0x0133, r25
    610c:	80 93 32 01 	sts	0x0132, r24
    6110:	05 c0       	rjmp	.+10     	; 0x611c <ProcessMixer+0xfa>
		}
	}
	else
	{
		flap = 0;
    6112:	10 92 33 01 	sts	0x0133, r1
    6116:	10 92 32 01 	sts	0x0132, r1
    611a:	21 c0       	rjmp	.+66     	; 0x615e <ProcessMixer+0x13c>
	//************************************************************
	// Un-mix ailerons from flaperons as required in all modes
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    611c:	80 91 7c 06 	lds	r24, 0x067C
    6120:	81 11       	cpse	r24, r1
    6122:	1d c0       	rjmp	.+58     	; 0x615e <ProcessMixer+0x13c>
	{
		// Remove flap signal from flaperons, leaving ailerons only
		roll = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    6124:	80 91 d1 07 	lds	r24, 0x07D1
    6128:	90 91 d2 07 	lds	r25, 0x07D2
    612c:	e3 2d       	mov	r30, r3
    612e:	ee 0f       	add	r30, r30
    6130:	ff 0b       	sbc	r31, r31
    6132:	e1 53       	subi	r30, 0x31	; 49
    6134:	f8 4f       	sbci	r31, 0xF8	; 248
    6136:	20 81       	ld	r18, Z
    6138:	31 81       	ldd	r19, Z+1	; 0x01
    613a:	82 0f       	add	r24, r18
    613c:	93 1f       	adc	r25, r19
    613e:	90 93 31 01 	sts	0x0131, r25
    6142:	80 93 30 01 	sts	0x0130, r24

		// Otherwise throw is 50% of both signals
		RCinputs[AILERON] = roll >> 1;
    6146:	95 95       	asr	r25
    6148:	87 95       	ror	r24
    614a:	90 93 d2 07 	sts	0x07D2, r25
    614e:	80 93 d1 07 	sts	0x07D1, r24
		
		// Copy to second aileron channel
		RCinputs[Config.FlapChan] = RCinputs[AILERON];
    6152:	80 91 d1 07 	lds	r24, 0x07D1
    6156:	90 91 d2 07 	lds	r25, 0x07D2
    615a:	91 83       	std	Z+1, r25	; 0x01
    615c:	80 83       	st	Z, r24
    615e:	b2 e9       	ldi	r27, 0x92	; 146
    6160:	4b 2e       	mov	r4, r27
    6162:	b6 e0       	ldi	r27, 0x06	; 6
    6164:	5b 2e       	mov	r5, r27
		if (Flight_flags & (1 << Stability))
		{
			switch (Config.Channel[i].roll_gyro)
			{
				case ON:
					solution = solution - PID_Gyros[ROLL];
    6166:	88 27       	eor	r24, r24
    6168:	99 27       	eor	r25, r25
    616a:	80 1b       	sub	r24, r16
    616c:	91 0b       	sbc	r25, r17
    616e:	98 8b       	std	Y+16, r25	; 0x10
    6170:	8f 87       	std	Y+15, r24	; 0x0f
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// Use PID gyro values
		if (Flight_flags & (1 << Stability))
    6172:	80 91 1c 01 	lds	r24, 0x011C
    6176:	81 ff       	sbrs	r24, 1
    6178:	27 c0       	rjmp	.+78     	; 0x61c8 <ProcessMixer+0x1a6>
    617a:	f2 01       	movw	r30, r4
    617c:	38 97       	sbiw	r30, 0x08	; 8
		{
			switch (Config.Channel[i].roll_gyro)
    617e:	80 81       	ld	r24, Z
    6180:	81 30       	cpi	r24, 0x01	; 1
    6182:	29 f0       	breq	.+10     	; 0x618e <ProcessMixer+0x16c>
    6184:	82 30       	cpi	r24, 0x02	; 2
    6186:	31 f0       	breq	.+12     	; 0x6194 <ProcessMixer+0x172>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		solution = 0;
    6188:	61 2c       	mov	r6, r1
    618a:	71 2c       	mov	r7, r1
    618c:	04 c0       	rjmp	.+8      	; 0x6196 <ProcessMixer+0x174>
		if (Flight_flags & (1 << Stability))
		{
			switch (Config.Channel[i].roll_gyro)
			{
				case ON:
					solution = solution - PID_Gyros[ROLL];
    618e:	6f 84       	ldd	r6, Y+15	; 0x0f
    6190:	78 88       	ldd	r7, Y+16	; 0x10
					break;
    6192:	01 c0       	rjmp	.+2      	; 0x6196 <ProcessMixer+0x174>
				case REV:
					solution = solution + PID_Gyros[ROLL];
    6194:	38 01       	movw	r6, r16
    6196:	f2 01       	movw	r30, r4
    6198:	37 97       	sbiw	r30, 0x07	; 7
					break;	
				default:
					break;
			}
			switch (Config.Channel[i].pitch_gyro)
    619a:	80 81       	ld	r24, Z
    619c:	81 30       	cpi	r24, 0x01	; 1
    619e:	29 f0       	breq	.+10     	; 0x61aa <ProcessMixer+0x188>
    61a0:	82 30       	cpi	r24, 0x02	; 2
    61a2:	29 f4       	brne	.+10     	; 0x61ae <ProcessMixer+0x18c>
			{
				case ON:
					solution = solution + PID_Gyros[PITCH];
					break;
				case REV:
					solution = solution - PID_Gyros[PITCH];
    61a4:	6e 18       	sub	r6, r14
    61a6:	7f 08       	sbc	r7, r15
					break;	
    61a8:	02 c0       	rjmp	.+4      	; 0x61ae <ProcessMixer+0x18c>
					break;
			}
			switch (Config.Channel[i].pitch_gyro)
			{
				case ON:
					solution = solution + PID_Gyros[PITCH];
    61aa:	6e 0c       	add	r6, r14
    61ac:	7f 1c       	adc	r7, r15
    61ae:	f2 01       	movw	r30, r4
    61b0:	36 97       	sbiw	r30, 0x06	; 6
					solution = solution - PID_Gyros[PITCH];
					break;	
				default:
					break;
			}
			switch (Config.Channel[i].yaw_gyro)
    61b2:	80 81       	ld	r24, Z
    61b4:	81 30       	cpi	r24, 0x01	; 1
    61b6:	29 f0       	breq	.+10     	; 0x61c2 <ProcessMixer+0x1a0>
    61b8:	82 30       	cpi	r24, 0x02	; 2
    61ba:	41 f4       	brne	.+16     	; 0x61cc <ProcessMixer+0x1aa>
			{
				case ON:
					solution = solution + PID_Gyros[YAW];
					break;
				case REV:
					solution = solution - PID_Gyros[YAW];
    61bc:	6c 18       	sub	r6, r12
    61be:	7d 08       	sbc	r7, r13
					break;	
    61c0:	05 c0       	rjmp	.+10     	; 0x61cc <ProcessMixer+0x1aa>
					break;
			}
			switch (Config.Channel[i].yaw_gyro)
			{
				case ON:
					solution = solution + PID_Gyros[YAW];
    61c2:	6c 0c       	add	r6, r12
    61c4:	7d 1c       	adc	r7, r13
					break;
    61c6:	02 c0       	rjmp	.+4      	; 0x61cc <ProcessMixer+0x1aa>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		solution = 0;
    61c8:	61 2c       	mov	r6, r1
    61ca:	71 2c       	mov	r7, r1
		//************************************************************
		// Mix in accelerometers
		//************************************************************ 

		// Add PID acc values including trim
		if (Flight_flags & (1 << AutoLevel))
    61cc:	80 91 1c 01 	lds	r24, 0x011C
    61d0:	80 ff       	sbrs	r24, 0
    61d2:	18 c0       	rjmp	.+48     	; 0x6204 <ProcessMixer+0x1e2>
    61d4:	f2 01       	movw	r30, r4
    61d6:	35 97       	sbiw	r30, 0x05	; 5
		{
			switch (Config.Channel[i].roll_acc)
    61d8:	80 81       	ld	r24, Z
    61da:	81 30       	cpi	r24, 0x01	; 1
    61dc:	29 f0       	breq	.+10     	; 0x61e8 <ProcessMixer+0x1c6>
    61de:	82 30       	cpi	r24, 0x02	; 2
    61e0:	29 f4       	brne	.+10     	; 0x61ec <ProcessMixer+0x1ca>
			{
				case ON:
					solution = solution - PID_ACCs[ROLL];
					break;
				case REV:
					solution = solution + PID_ACCs[ROLL];
    61e2:	6a 0c       	add	r6, r10
    61e4:	7b 1c       	adc	r7, r11
					break;	
    61e6:	02 c0       	rjmp	.+4      	; 0x61ec <ProcessMixer+0x1ca>
		if (Flight_flags & (1 << AutoLevel))
		{
			switch (Config.Channel[i].roll_acc)
			{
				case ON:
					solution = solution - PID_ACCs[ROLL];
    61e8:	6a 18       	sub	r6, r10
    61ea:	7b 08       	sbc	r7, r11
    61ec:	f2 01       	movw	r30, r4
    61ee:	34 97       	sbiw	r30, 0x04	; 4
					break;	
				default:
					break;
			}

			switch (Config.Channel[i].pitch_acc)
    61f0:	80 81       	ld	r24, Z
    61f2:	81 30       	cpi	r24, 0x01	; 1
    61f4:	29 f0       	breq	.+10     	; 0x6200 <ProcessMixer+0x1de>
    61f6:	82 30       	cpi	r24, 0x02	; 2
    61f8:	29 f4       	brne	.+10     	; 0x6204 <ProcessMixer+0x1e2>
			{
				case ON:
					solution = solution + PID_ACCs[PITCH];
					break;
				case REV:
					solution = solution - PID_ACCs[PITCH];
    61fa:	68 18       	sub	r6, r8
    61fc:	79 08       	sbc	r7, r9
					break;	
    61fe:	02 c0       	rjmp	.+4      	; 0x6204 <ProcessMixer+0x1e2>
			}

			switch (Config.Channel[i].pitch_acc)
			{
				case ON:
					solution = solution + PID_ACCs[PITCH];
    6200:	68 0c       	add	r6, r8
    6202:	79 1c       	adc	r7, r9
    6204:	f2 01       	movw	r30, r4
    6206:	3b 97       	sbiw	r30, 0x0b	; 11
		//************************************************************
		// Process RC mixing and source volume calculation
		//************************************************************		
		
		// Skip Source A if no RC mixing required for this channel
		if (Config.Channel[i].source_a_volume != 0)
    6208:	60 81       	ld	r22, Z
    620a:	66 23       	and	r22, r22
    620c:	79 f0       	breq	.+30     	; 0x622c <ProcessMixer+0x20a>
    620e:	31 97       	sbiw	r30, 0x01	; 1
		{		
			temp = scale32(RCinputs[Config.Channel[i].source_a], Config.Channel[i].source_a_volume);
    6210:	e0 81       	ld	r30, Z
    6212:	ee 0f       	add	r30, r30
    6214:	ff 0b       	sbc	r31, r31
    6216:	e1 53       	subi	r30, 0x31	; 49
    6218:	f8 4f       	sbci	r31, 0xF8	; 248
    621a:	80 81       	ld	r24, Z
    621c:	91 81       	ldd	r25, Z+1	; 0x01
    621e:	77 27       	eor	r23, r23
    6220:	67 fd       	sbrc	r22, 7
    6222:	70 95       	com	r23
    6224:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <scale32>
			solution += temp;
    6228:	68 0e       	add	r6, r24
    622a:	79 1e       	adc	r7, r25
    622c:	f2 01       	movw	r30, r4
    622e:	39 97       	sbiw	r30, 0x09	; 9
		}

		// Skip Source B if no RC mixing required for this channel
		if (Config.Channel[i].source_b_volume != 0)
    6230:	60 81       	ld	r22, Z
    6232:	66 23       	and	r22, r22
    6234:	79 f0       	breq	.+30     	; 0x6254 <ProcessMixer+0x232>
    6236:	31 97       	sbiw	r30, 0x01	; 1
		{
			temp = scale32(RCinputs[Config.Channel[i].source_b], Config.Channel[i].source_b_volume);
    6238:	e0 81       	ld	r30, Z
    623a:	ee 0f       	add	r30, r30
    623c:	ff 0b       	sbc	r31, r31
    623e:	e1 53       	subi	r30, 0x31	; 49
    6240:	f8 4f       	sbci	r31, 0xF8	; 248
    6242:	80 81       	ld	r24, Z
    6244:	91 81       	ldd	r25, Z+1	; 0x01
    6246:	77 27       	eor	r23, r23
    6248:	67 fd       	sbrc	r22, 7
    624a:	70 95       	com	r23
    624c:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <scale32>
			solution += temp;
    6250:	68 0e       	add	r6, r24
    6252:	79 1e       	adc	r7, r25
    6254:	f2 01       	movw	r30, r4
    6256:	32 97       	sbiw	r30, 0x02	; 2

		//************************************************************
		// Process universal mixers
		//************************************************************ 

		if ((Config.Channel[i].output_b_volume != 0) && (Config.Channel[i].output_b != NOMIX)) // Mix in first extra source
    6258:	60 81       	ld	r22, Z
    625a:	66 23       	and	r22, r22
    625c:	09 f1       	breq	.+66     	; 0x62a0 <ProcessMixer+0x27e>
    625e:	31 97       	sbiw	r30, 0x01	; 1
    6260:	80 81       	ld	r24, Z
    6262:	8f 30       	cpi	r24, 0x0F	; 15
    6264:	e9 f0       	breq	.+58     	; 0x62a0 <ProcessMixer+0x27e>
    6266:	e8 2f       	mov	r30, r24
    6268:	ff 27       	eor	r31, r31
    626a:	e7 fd       	sbrc	r30, 7
    626c:	f0 95       	com	r31
		{
			// Is the source a sensor?
			if (Config.Channel[i].output_b > (MAX_RC_CHANNELS - 1))
    626e:	88 30       	cpi	r24, 0x08	; 8
    6270:	54 f0       	brlt	.+20     	; 0x6286 <ProcessMixer+0x264>
			{
				temp2 = SensorData[Config.Channel[i].output_b - EXT_SOURCE];
    6272:	38 97       	sbiw	r30, 0x08	; 8
    6274:	ee 0f       	add	r30, r30
    6276:	ff 1f       	adc	r31, r31
    6278:	a1 e0       	ldi	r26, 0x01	; 1
    627a:	b0 e0       	ldi	r27, 0x00	; 0
    627c:	ac 0f       	add	r26, r28
    627e:	bd 1f       	adc	r27, r29
    6280:	ea 0f       	add	r30, r26
    6282:	fb 1f       	adc	r31, r27
    6284:	04 c0       	rjmp	.+8      	; 0x628e <ProcessMixer+0x26c>
			}
			// Is the source an RC input?
			else
			{
				temp2 = RCinputs[Config.Channel[i].output_b];
    6286:	ee 0f       	add	r30, r30
    6288:	ff 1f       	adc	r31, r31
    628a:	e1 53       	subi	r30, 0x31	; 49
    628c:	f8 4f       	sbci	r31, 0xF8	; 248
    628e:	80 81       	ld	r24, Z
    6290:	91 81       	ldd	r25, Z+1	; 0x01
			}

			temp2 = scale32(temp2, Config.Channel[i].output_b_volume);
    6292:	77 27       	eor	r23, r23
    6294:	67 fd       	sbrc	r22, 7
    6296:	70 95       	com	r23
    6298:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <scale32>
			solution = solution + temp2;
    629c:	68 0e       	add	r6, r24
    629e:	79 1e       	adc	r7, r25
		}
		
		if ((Config.Channel[i].output_c_volume != 0) && (Config.Channel[i].output_c != NOMIX)) // Mix in second extra source
    62a0:	f2 01       	movw	r30, r4
    62a2:	60 81       	ld	r22, Z
    62a4:	66 23       	and	r22, r22
    62a6:	09 f1       	breq	.+66     	; 0x62ea <ProcessMixer+0x2c8>
    62a8:	31 97       	sbiw	r30, 0x01	; 1
    62aa:	80 81       	ld	r24, Z
    62ac:	8f 30       	cpi	r24, 0x0F	; 15
    62ae:	e9 f0       	breq	.+58     	; 0x62ea <ProcessMixer+0x2c8>
    62b0:	e8 2f       	mov	r30, r24
    62b2:	ff 27       	eor	r31, r31
    62b4:	e7 fd       	sbrc	r30, 7
    62b6:	f0 95       	com	r31
		{
			// Is the source a sensor?
			if (Config.Channel[i].output_c > (MAX_RC_CHANNELS - 1))
    62b8:	88 30       	cpi	r24, 0x08	; 8
    62ba:	54 f0       	brlt	.+20     	; 0x62d0 <ProcessMixer+0x2ae>
			{
				temp2 = SensorData[Config.Channel[i].output_c - EXT_SOURCE];
    62bc:	38 97       	sbiw	r30, 0x08	; 8
    62be:	ee 0f       	add	r30, r30
    62c0:	ff 1f       	adc	r31, r31
    62c2:	81 e0       	ldi	r24, 0x01	; 1
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	8c 0f       	add	r24, r28
    62c8:	9d 1f       	adc	r25, r29
    62ca:	e8 0f       	add	r30, r24
    62cc:	f9 1f       	adc	r31, r25
    62ce:	04 c0       	rjmp	.+8      	; 0x62d8 <ProcessMixer+0x2b6>
			}
			// Is the source an RC input?
			else
			{
				temp2 = RCinputs[Config.Channel[i].output_c];
    62d0:	ee 0f       	add	r30, r30
    62d2:	ff 1f       	adc	r31, r31
    62d4:	e1 53       	subi	r30, 0x31	; 49
    62d6:	f8 4f       	sbci	r31, 0xF8	; 248
    62d8:	80 81       	ld	r24, Z
    62da:	91 81       	ldd	r25, Z+1	; 0x01
			}

			temp2 = scale32(temp2, Config.Channel[i].output_c_volume);
    62dc:	77 27       	eor	r23, r23
    62de:	67 fd       	sbrc	r22, 7
    62e0:	70 95       	com	r23
    62e2:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <scale32>
			solution = solution + temp2;
    62e6:	68 0e       	add	r6, r24
    62e8:	79 1e       	adc	r7, r25
    62ea:	f2 01       	movw	r30, r4
    62ec:	3e 97       	sbiw	r30, 0x0e	; 14
		}

		// Save solution for this channel. "solution" contains the current cycle's data.
		// Up to this point, Config.Channel[i].value contains data from the last cycle.
		Config.Channel[i].value = solution;
    62ee:	71 82       	std	Z+1, r7	; 0x01
    62f0:	60 82       	st	Z, r6
    62f2:	9f e0       	ldi	r25, 0x0F	; 15
    62f4:	49 0e       	add	r4, r25
    62f6:	51 1c       	adc	r5, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MAX_OUTPUTS; i++)
    62f8:	aa e0       	ldi	r26, 0x0A	; 10
    62fa:	4a 16       	cp	r4, r26
    62fc:	a7 e0       	ldi	r26, 0x07	; 7
    62fe:	5a 06       	cpc	r5, r26
    6300:	09 f0       	breq	.+2      	; 0x6304 <ProcessMixer+0x2e2>
    6302:	37 cf       	rjmp	.-402    	; 0x6172 <ProcessMixer+0x150>

	//************************************************************
	// Process differential if set up and two ailerons used
	//************************************************************

	if ((Config.FlapChan != NOCHAN) && (Config.Differential != 0))
    6304:	b8 e0       	ldi	r27, 0x08	; 8
    6306:	3b 12       	cpse	r3, r27
    6308:	05 c0       	rjmp	.+10     	; 0x6314 <ProcessMixer+0x2f2>
    630a:	a1 ed       	ldi	r26, 0xD1	; 209
    630c:	b5 e0       	ldi	r27, 0x05	; 5
    630e:	e4 e8       	ldi	r30, 0x84	; 132
    6310:	f6 e0       	ldi	r31, 0x06	; 6
    6312:	3d c0       	rjmp	.+122    	; 0x638e <ProcessMixer+0x36c>
    6314:	80 91 12 06 	lds	r24, 0x0612
    6318:	88 23       	and	r24, r24
    631a:	09 f4       	brne	.+2      	; 0x631e <ProcessMixer+0x2fc>
    631c:	8d c0       	rjmp	.+282    	; 0x6438 <ProcessMixer+0x416>
    631e:	04 e8       	ldi	r16, 0x84	; 132
    6320:	16 e0       	ldi	r17, 0x06	; 6
    6322:	96 e8       	ldi	r25, 0x86	; 134
    6324:	c9 2e       	mov	r12, r25
    6326:	96 e0       	ldi	r25, 0x06	; 6
    6328:	d9 2e       	mov	r13, r25
    632a:	20 e0       	ldi	r18, 0x00	; 0

				// For the first aileron (LHS) 
				// Limit positive-going values
				else if (temp > 0)			
				{
					temp = scale32(temp, (100 - Config.Differential));
    632c:	34 e6       	ldi	r19, 0x64	; 100
    632e:	e3 2e       	mov	r14, r19
    6330:	f1 2c       	mov	r15, r1
    6332:	e8 1a       	sub	r14, r24
    6334:	f1 08       	sbc	r15, r1
    6336:	87 fd       	sbrc	r24, 7
    6338:	f3 94       	inc	r15
	{
		// Search through outputs for aileron channels
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Get current channel value
			temp = Config.Channel[i].value;
    633a:	f8 01       	movw	r30, r16
    633c:	80 81       	ld	r24, Z
    633e:	91 81       	ldd	r25, Z+1	; 0x01

			// If some kind of aileron channel
			if ((Config.Channel[i].source_a == AILERON) || (Config.Channel[i].source_a == Config.FlapChan))
    6340:	d6 01       	movw	r26, r12
    6342:	3c 91       	ld	r19, X
    6344:	31 30       	cpi	r19, 0x01	; 1
    6346:	11 f0       	breq	.+4      	; 0x634c <ProcessMixer+0x32a>
    6348:	33 11       	cpse	r19, r3
    634a:	17 c0       	rjmp	.+46     	; 0x637a <ProcessMixer+0x358>
			{
				// For the second aileron (RHS)
				if (TwoAilerons)			
    634c:	22 23       	and	r18, r18
    634e:	59 f0       	breq	.+22     	; 0x6366 <ProcessMixer+0x344>
				{
					// Limit negative-going values
					if (temp < 0)
    6350:	97 ff       	sbrs	r25, 7
    6352:	13 c0       	rjmp	.+38     	; 0x637a <ProcessMixer+0x358>
					{
						temp = scale32(temp, (100 - Config.Differential));
    6354:	b7 01       	movw	r22, r14
    6356:	29 8b       	std	Y+17, r18	; 0x11
    6358:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <scale32>
						Config.Channel[i].value = temp;
    635c:	f8 01       	movw	r30, r16
    635e:	91 83       	std	Z+1, r25	; 0x01
    6360:	80 83       	st	Z, r24
    6362:	29 89       	ldd	r18, Y+17	; 0x11
    6364:	0a c0       	rjmp	.+20     	; 0x637a <ProcessMixer+0x358>
					}
				}

				// For the first aileron (LHS) 
				// Limit positive-going values
				else if (temp > 0)			
    6366:	18 16       	cp	r1, r24
    6368:	19 06       	cpc	r1, r25
    636a:	34 f4       	brge	.+12     	; 0x6378 <ProcessMixer+0x356>
				{
					temp = scale32(temp, (100 - Config.Differential));
    636c:	b7 01       	movw	r22, r14
    636e:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <scale32>
					Config.Channel[i].value = temp;
    6372:	d8 01       	movw	r26, r16
    6374:	8d 93       	st	X+, r24
    6376:	9c 93       	st	X, r25
    6378:	21 e0       	ldi	r18, 0x01	; 1
    637a:	01 5f       	subi	r16, 0xF1	; 241
    637c:	1f 4f       	sbci	r17, 0xFF	; 255
    637e:	bf e0       	ldi	r27, 0x0F	; 15
    6380:	cb 0e       	add	r12, r27
    6382:	d1 1c       	adc	r13, r1
	//************************************************************

	if ((Config.FlapChan != NOCHAN) && (Config.Differential != 0))
	{
		// Search through outputs for aileron channels
		for (i = 0; i < MAX_OUTPUTS; i++)
    6384:	e6 e0       	ldi	r30, 0x06	; 6
    6386:	0c 3f       	cpi	r16, 0xFC	; 252
    6388:	1e 07       	cpc	r17, r30
    638a:	b9 f6       	brne	.-82     	; 0x633a <ProcessMixer+0x318>
    638c:	55 c0       	rjmp	.+170    	; 0x6438 <ProcessMixer+0x416>
	// Add offset value
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].value += Config.Limits[i].trim;
    638e:	80 81       	ld	r24, Z
    6390:	91 81       	ldd	r25, Z+1	; 0x01
    6392:	2d 91       	ld	r18, X+
    6394:	3c 91       	ld	r19, X
    6396:	11 97       	sbiw	r26, 0x01	; 1
    6398:	82 0f       	add	r24, r18
    639a:	93 1f       	adc	r25, r19
    639c:	91 83       	std	Z+1, r25	; 0x01
    639e:	80 83       	st	Z, r24
    63a0:	3f 96       	adiw	r30, 0x0f	; 15
    63a2:	18 96       	adiw	r26, 0x08	; 8

	//************************************************************
	// Add offset value
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    63a4:	86 e0       	ldi	r24, 0x06	; 6
    63a6:	ec 3f       	cpi	r30, 0xFC	; 252
    63a8:	f8 07       	cpc	r31, r24
    63aa:	89 f7       	brne	.-30     	; 0x638e <ProcessMixer+0x36c>

	//************************************************************
	// Handle Failsafe condition
	//************************************************************ 

	if (Flight_flags & (1 << FailsafeFlag))
    63ac:	80 91 1c 01 	lds	r24, 0x011C
    63b0:	82 ff       	sbrs	r24, 2
    63b2:	9e c0       	rjmp	.+316    	; 0x64f0 <ProcessMixer+0x4ce>
	{
		// Simple failsafe. Replace outputs with user-set values
		if (Config.FailsafeType == SIMPLE) 
    63b4:	80 91 16 06 	lds	r24, 0x0616
    63b8:	81 30       	cpi	r24, 0x01	; 1
    63ba:	81 f4       	brne	.+32     	; 0x63dc <ProcessMixer+0x3ba>
    63bc:	ef ec       	ldi	r30, 0xCF	; 207
    63be:	f5 e0       	ldi	r31, 0x05	; 5
    63c0:	a4 e8       	ldi	r26, 0x84	; 132
    63c2:	b6 e0       	ldi	r27, 0x06	; 6
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Note that "value" is still centered on zero
				Config.Channel[i].value = Config.Limits[i].failsafe;
    63c4:	80 81       	ld	r24, Z
    63c6:	91 81       	ldd	r25, Z+1	; 0x01
    63c8:	11 96       	adiw	r26, 0x01	; 1
    63ca:	9c 93       	st	X, r25
    63cc:	8e 93       	st	-X, r24
    63ce:	38 96       	adiw	r30, 0x08	; 8
    63d0:	1f 96       	adiw	r26, 0x0f	; 15
	if (Flight_flags & (1 << FailsafeFlag))
	{
		// Simple failsafe. Replace outputs with user-set values
		if (Config.FailsafeType == SIMPLE) 
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
    63d2:	96 e0       	ldi	r25, 0x06	; 6
    63d4:	ef 30       	cpi	r30, 0x0F	; 15
    63d6:	f9 07       	cpc	r31, r25
    63d8:	a9 f7       	brne	.-22     	; 0x63c4 <ProcessMixer+0x3a2>
    63da:	8a c0       	rjmp	.+276    	; 0x64f0 <ProcessMixer+0x4ce>
		}

		// Advanced failsafe. Autolevel ON, use failsafe trims to adjust autolevel.
		// Set any throttle or rudder channels to preset values
		// Pitch and Roll values trim the pitch/roll autolevel
		else if (Config.FailsafeType == ADVANCED) 
    63dc:	82 30       	cpi	r24, 0x02	; 2
    63de:	09 f0       	breq	.+2      	; 0x63e2 <ProcessMixer+0x3c0>
    63e0:	87 c0       	rjmp	.+270    	; 0x64f0 <ProcessMixer+0x4ce>
			{
				// Override throttle
				if ((Config.Channel[i].source_a == THROTTLE) || (Config.Channel[i].source_b == THROTTLE))
				{
					// Convert throttle setting to servo value
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeThrottle);				
    63e2:	20 91 17 06 	lds	r18, 0x0617
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    63e6:	aa e0       	ldi	r26, 0x0A	; 10
    63e8:	2a 02       	muls	r18, r26
    63ea:	90 01       	movw	r18, r0
    63ec:	11 24       	eor	r1, r1
				}

				// Override rudder						
				if (Config.Channel[i].source_a == RUDDER)
				{
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeRudder);	
    63ee:	40 91 1a 06 	lds	r20, 0x061A
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    63f2:	ba e0       	ldi	r27, 0x0A	; 10
    63f4:	4b 02       	muls	r20, r27
    63f6:	a0 01       	movw	r20, r0
    63f8:	11 24       	eor	r1, r1
    63fa:	e6 e8       	ldi	r30, 0x86	; 134
    63fc:	f6 e0       	ldi	r31, 0x06	; 6
    63fe:	88 e8       	ldi	r24, 0x88	; 136
    6400:	96 e0       	ldi	r25, 0x06	; 6
    6402:	04 e8       	ldi	r16, 0x84	; 132
    6404:	16 e0       	ldi	r17, 0x06	; 6
		else if (Config.FailsafeType == ADVANCED) 
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Override throttle
				if ((Config.Channel[i].source_a == THROTTLE) || (Config.Channel[i].source_b == THROTTLE))
    6406:	60 81       	ld	r22, Z
    6408:	66 23       	and	r22, r22
    640a:	21 f0       	breq	.+8      	; 0x6414 <ProcessMixer+0x3f2>
    640c:	dc 01       	movw	r26, r24
    640e:	6c 91       	ld	r22, X
    6410:	61 11       	cpse	r22, r1
    6412:	03 c0       	rjmp	.+6      	; 0x641a <ProcessMixer+0x3f8>
				{
					// Convert throttle setting to servo value
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeThrottle);				
    6414:	d8 01       	movw	r26, r16
    6416:	2d 93       	st	X+, r18
    6418:	3c 93       	st	X, r19
				}

				// Override rudder						
				if (Config.Channel[i].source_a == RUDDER)
    641a:	60 81       	ld	r22, Z
    641c:	63 30       	cpi	r22, 0x03	; 3
    641e:	19 f4       	brne	.+6      	; 0x6426 <ProcessMixer+0x404>
				{
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeRudder);	
    6420:	d8 01       	movw	r26, r16
    6422:	4d 93       	st	X+, r20
    6424:	5c 93       	st	X, r21
    6426:	3f 96       	adiw	r30, 0x0f	; 15
    6428:	01 5f       	subi	r16, 0xF1	; 241
    642a:	1f 4f       	sbci	r17, 0xFF	; 255
    642c:	0f 96       	adiw	r24, 0x0f	; 15
		// Advanced failsafe. Autolevel ON, use failsafe trims to adjust autolevel.
		// Set any throttle or rudder channels to preset values
		// Pitch and Roll values trim the pitch/roll autolevel
		else if (Config.FailsafeType == ADVANCED) 
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
    642e:	b6 e0       	ldi	r27, 0x06	; 6
    6430:	ee 3f       	cpi	r30, 0xFE	; 254
    6432:	fb 07       	cpc	r31, r27
    6434:	41 f7       	brne	.-48     	; 0x6406 <ProcessMixer+0x3e4>
    6436:	5c c0       	rjmp	.+184    	; 0x64f0 <ProcessMixer+0x4ce>
	//************************************************************
	// Re-mix flaps from flaperons as required
	//************************************************************ 

	// The flap part of the signal has been removed so we have to reinsert it here.
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    6438:	80 91 7c 06 	lds	r24, 0x067C
    643c:	81 11       	cpse	r24, r1
    643e:	65 cf       	rjmp	.-310    	; 0x630a <ProcessMixer+0x2e8>
	{
		// If flapspeed is set to anything other than zero (normal)
		if (Config.flapspeed) 
    6440:	80 91 13 06 	lds	r24, 0x0613
    6444:	20 91 32 01 	lds	r18, 0x0132
    6448:	30 91 33 01 	lds	r19, 0x0133
    644c:	60 91 2d 01 	lds	r22, 0x012D
    6450:	48 2f       	mov	r20, r24
    6452:	55 27       	eor	r21, r21
    6454:	47 fd       	sbrc	r20, 7
    6456:	50 95       	com	r21
    6458:	88 23       	and	r24, r24
    645a:	f9 f0       	breq	.+62     	; 0x649a <ProcessMixer+0x478>
		{
			// Do flap speed control
			if (((slowFlaps - flap) >= 1) || ((slowFlaps - flap) <= -1))	// Difference larger than one step, so ok
    645c:	80 91 2e 01 	lds	r24, 0x012E
    6460:	90 91 2f 01 	lds	r25, 0x012F
    6464:	82 17       	cp	r24, r18
    6466:	93 07       	cpc	r25, r19
    6468:	e1 f0       	breq	.+56     	; 0x64a2 <ProcessMixer+0x480>
			else
			{
				speed = 1;					// Otherwise this will oscillate
			}

			if ((slowFlaps < flap) && (flapskip == Config.flapspeed))
    646a:	82 17       	cp	r24, r18
    646c:	93 07       	cpc	r25, r19
    646e:	3c f4       	brge	.+14     	; 0x647e <ProcessMixer+0x45c>
    6470:	26 2f       	mov	r18, r22
    6472:	30 e0       	ldi	r19, 0x00	; 0
    6474:	24 17       	cp	r18, r20
    6476:	35 07       	cpc	r19, r21
    6478:	a1 f4       	brne	.+40     	; 0x64a2 <ProcessMixer+0x480>
			{
				slowFlaps += speed;
    647a:	0f 96       	adiw	r24, 0x0f	; 15
    647c:	09 c0       	rjmp	.+18     	; 0x6490 <ProcessMixer+0x46e>
			} 
			else if ((slowFlaps > flap) && (flapskip == Config.flapspeed)) 
    647e:	28 17       	cp	r18, r24
    6480:	39 07       	cpc	r19, r25
    6482:	7c f4       	brge	.+30     	; 0x64a2 <ProcessMixer+0x480>
    6484:	26 2f       	mov	r18, r22
    6486:	30 e0       	ldi	r19, 0x00	; 0
    6488:	24 17       	cp	r18, r20
    648a:	35 07       	cpc	r19, r21
    648c:	51 f4       	brne	.+20     	; 0x64a2 <ProcessMixer+0x480>
			{
				slowFlaps -= speed;
    648e:	0f 97       	sbiw	r24, 0x0f	; 15
    6490:	90 93 2f 01 	sts	0x012F, r25
    6494:	80 93 2e 01 	sts	0x012E, r24
    6498:	04 c0       	rjmp	.+8      	; 0x64a2 <ProcessMixer+0x480>
			
		} 
		// No speed control requested so copy flaps
		else
		{
		 	slowFlaps = flap;
    649a:	30 93 2f 01 	sts	0x012F, r19
    649e:	20 93 2e 01 	sts	0x012E, r18
		}

		flapskip++;
    64a2:	6f 5f       	subi	r22, 0xFF	; 255
		if (flapskip > Config.flapspeed) flapskip = 0;
    64a4:	86 2f       	mov	r24, r22
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	48 17       	cp	r20, r24
    64aa:	59 07       	cpc	r21, r25
    64ac:	1c f0       	brlt	.+6      	; 0x64b4 <ProcessMixer+0x492>
		else
		{
		 	slowFlaps = flap;
		}

		flapskip++;
    64ae:	60 93 2d 01 	sts	0x012D, r22
    64b2:	02 c0       	rjmp	.+4      	; 0x64b8 <ProcessMixer+0x496>
		if (flapskip > Config.flapspeed) flapskip = 0;
    64b4:	10 92 2d 01 	sts	0x012D, r1
			temp = Config.Channel[i].value;

			// Restore flaps
			if (Config.Channel[i].source_a == AILERON)
			{
				temp += slowFlaps;
    64b8:	20 91 2e 01 	lds	r18, 0x012E
    64bc:	30 91 2f 01 	lds	r19, 0x012F
    64c0:	e4 e8       	ldi	r30, 0x84	; 132
    64c2:	f6 e0       	ldi	r31, 0x06	; 6
    64c4:	a6 e8       	ldi	r26, 0x86	; 134
    64c6:	b6 e0       	ldi	r27, 0x06	; 6
		if (flapskip > Config.flapspeed) flapskip = 0;

		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Get solution
			temp = Config.Channel[i].value;
    64c8:	80 81       	ld	r24, Z
    64ca:	91 81       	ldd	r25, Z+1	; 0x01

			// Restore flaps
			if (Config.Channel[i].source_a == AILERON)
    64cc:	4c 91       	ld	r20, X
    64ce:	41 30       	cpi	r20, 0x01	; 1
    64d0:	11 f4       	brne	.+4      	; 0x64d6 <ProcessMixer+0x4b4>
			{
				temp += slowFlaps;
    64d2:	82 0f       	add	r24, r18
    64d4:	93 1f       	adc	r25, r19
			}
			if (Config.Channel[i].source_a == Config.FlapChan)
    64d6:	43 11       	cpse	r20, r3
    64d8:	02 c0       	rjmp	.+4      	; 0x64de <ProcessMixer+0x4bc>
			{
				temp -= slowFlaps;
    64da:	82 1b       	sub	r24, r18
    64dc:	93 0b       	sbc	r25, r19
			}

			// Update channel data solution
			Config.Channel[i].value = temp;
    64de:	91 83       	std	Z+1, r25	; 0x01
    64e0:	80 83       	st	Z, r24
    64e2:	3f 96       	adiw	r30, 0x0f	; 15
    64e4:	1f 96       	adiw	r26, 0x0f	; 15
		}

		flapskip++;
		if (flapskip > Config.flapspeed) flapskip = 0;

		for (i = 0; i < MAX_OUTPUTS; i++)
    64e6:	66 e0       	ldi	r22, 0x06	; 6
    64e8:	ec 3f       	cpi	r30, 0xFC	; 252
    64ea:	f6 07       	cpc	r31, r22
    64ec:	69 f7       	brne	.-38     	; 0x64c8 <ProcessMixer+0x4a6>
    64ee:	0d cf       	rjmp	.-486    	; 0x630a <ProcessMixer+0x2e8>
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeRudder);	
				}
			}
		}
	} // Failsafe
}
    64f0:	61 96       	adiw	r28, 0x11	; 17
    64f2:	e1 e1       	ldi	r30, 0x11	; 17
    64f4:	0c 94 48 3e 	jmp	0x7c90	; 0x7c90 <__epilogue_restores__+0x2>

000064f8 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    64f8:	a0 e0       	ldi	r26, 0x00	; 0
    64fa:	b0 e0       	ldi	r27, 0x00	; 0
    64fc:	e2 e8       	ldi	r30, 0x82	; 130
    64fe:	f2 e3       	ldi	r31, 0x32	; 50
    6500:	0c 94 36 3e 	jmp	0x7c6c	; 0x7c6c <__prologue_saves__+0x16>
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    6504:	dc 01       	movw	r26, r24
    6506:	0d 90       	ld	r0, X+
    6508:	00 20       	and	r0, r0
    650a:	e9 f7       	brne	.-6      	; 0x6506 <mugui_text_sizestring+0xe>
    650c:	11 97       	sbiw	r26, 0x01	; 1
    650e:	a8 1b       	sub	r26, r24
    6510:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    6512:	fb 01       	movw	r30, r22
    6514:	34 96       	adiw	r30, 0x04	; 4
    6516:	e4 90       	lpm	r14, Z
    6518:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    651a:	32 97       	sbiw	r30, 0x02	; 2
    651c:	d4 90       	lpm	r13, Z
    651e:	ec 01       	movw	r28, r24
    6520:	a8 0f       	add	r26, r24
    6522:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    6524:	80 e0       	ldi	r24, 0x00	; 0
    6526:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    6528:	ca 17       	cp	r28, r26
    652a:	db 07       	cpc	r29, r27
    652c:	29 f1       	breq	.+74     	; 0x6578 <mugui_text_sizestring+0x80>
	{
		index = s[i] - startcharacter;
    652e:	29 91       	ld	r18, Y+
    6530:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	22 0f       	add	r18, r18
    6536:	33 1f       	adc	r19, r19
    6538:	f9 01       	movw	r30, r18
    653a:	35 96       	adiw	r30, 0x05	; 5
    653c:	e6 0f       	add	r30, r22
    653e:	f7 1f       	adc	r31, r23
    6540:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6542:	f9 01       	movw	r30, r18
    6544:	36 96       	adiw	r30, 0x06	; 6
    6546:	e6 0f       	add	r30, r22
    6548:	f7 1f       	adc	r31, r23
    654a:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    654c:	10 e0       	ldi	r17, 0x00	; 0
    654e:	20 e0       	ldi	r18, 0x00	; 0
    6550:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    6552:	32 2f       	mov	r19, r18
    6554:	21 2f       	mov	r18, r17
    6556:	10 2f       	mov	r17, r16
    6558:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    655a:	0e 0f       	add	r16, r30
    655c:	11 1d       	adc	r17, r1
    655e:	21 1d       	adc	r18, r1
    6560:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    6562:	fb 01       	movw	r30, r22
    6564:	e0 0f       	add	r30, r16
    6566:	f1 1f       	adc	r31, r17
    6568:	04 91       	lpm	r16, Z
    656a:	20 2f       	mov	r18, r16
    656c:	30 e0       	ldi	r19, 0x00	; 0
    656e:	2f 5f       	subi	r18, 0xFF	; 255
    6570:	3f 4f       	sbci	r19, 0xFF	; 255
    6572:	82 0f       	add	r24, r18
    6574:	93 1f       	adc	r25, r19
    6576:	d8 cf       	rjmp	.-80     	; 0x6528 <mugui_text_sizestring+0x30>
	}

	/* prepare return value */
	size->x = width;
    6578:	fa 01       	movw	r30, r20
    657a:	91 83       	std	Z+1, r25	; 0x01
    657c:	80 83       	st	Z, r24
	size->y = height;
    657e:	f3 82       	std	Z+3, r15	; 0x03
    6580:	e2 82       	std	Z+2, r14	; 0x02
}
    6582:	cd b7       	in	r28, 0x3d	; 61
    6584:	de b7       	in	r29, 0x3e	; 62
    6586:	e7 e0       	ldi	r30, 0x07	; 7
    6588:	0c 94 52 3e 	jmp	0x7ca4	; 0x7ca4 <__epilogue_restores__+0x16>

0000658c <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    658c:	ab e6       	ldi	r26, 0x6B	; 107
    658e:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    6590:	20 e0       	ldi	r18, 0x00	; 0
    6592:	30 e0       	ldi	r19, 0x00	; 0
    6594:	fc 01       	movw	r30, r24
    6596:	e2 0f       	add	r30, r18
    6598:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    659a:	44 91       	lpm	r20, Z
    659c:	44 23       	and	r20, r20
    659e:	41 f0       	breq	.+16     	; 0x65b0 <pgm_mugui_scopy+0x24>
    65a0:	28 31       	cpi	r18, 0x18	; 24
    65a2:	31 05       	cpc	r19, r1
    65a4:	29 f0       	breq	.+10     	; 0x65b0 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    65a6:	e4 91       	lpm	r30, Z
    65a8:	ed 93       	st	X+, r30
		i++;
    65aa:	2f 5f       	subi	r18, 0xFF	; 255
    65ac:	3f 4f       	sbci	r19, 0xFF	; 255
    65ae:	f2 cf       	rjmp	.-28     	; 0x6594 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    65b0:	f9 01       	movw	r30, r18
    65b2:	e5 59       	subi	r30, 0x95	; 149
    65b4:	fa 4f       	sbci	r31, 0xFA	; 250
    65b6:	10 82       	st	Z, r1
    65b8:	08 95       	ret

000065ba <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    65ba:	a9 e0       	ldi	r26, 0x09	; 9
    65bc:	b0 e0       	ldi	r27, 0x00	; 0
    65be:	e3 ee       	ldi	r30, 0xE3	; 227
    65c0:	f2 e3       	ldi	r31, 0x32	; 50
    65c2:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
    65c6:	4c 83       	std	Y+4, r20	; 0x04
    65c8:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    65ca:	fb 01       	movw	r30, r22
    65cc:	32 96       	adiw	r30, 0x02	; 2
    65ce:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    65d0:	32 96       	adiw	r30, 0x02	; 2
    65d2:	e4 91       	lpm	r30, Z
    65d4:	2e 2e       	mov	r2, r30
    65d6:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    65d8:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	88 0f       	add	r24, r24
    65de:	99 1f       	adc	r25, r25
    65e0:	fc 01       	movw	r30, r24
    65e2:	35 96       	adiw	r30, 0x05	; 5
    65e4:	e6 0f       	add	r30, r22
    65e6:	f7 1f       	adc	r31, r23
    65e8:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    65ea:	fc 01       	movw	r30, r24
    65ec:	36 96       	adiw	r30, 0x06	; 6
    65ee:	e6 0f       	add	r30, r22
    65f0:	f7 1f       	adc	r31, r23
    65f2:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    65f4:	06 2d       	mov	r16, r6
    65f6:	10 e0       	ldi	r17, 0x00	; 0
    65f8:	20 e0       	ldi	r18, 0x00	; 0
    65fa:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    65fc:	32 2f       	mov	r19, r18
    65fe:	21 2f       	mov	r18, r17
    6600:	10 2f       	mov	r17, r16
    6602:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    6604:	08 0f       	add	r16, r24
    6606:	11 1d       	adc	r17, r1
    6608:	21 1d       	adc	r18, r1
    660a:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    660c:	c8 01       	movw	r24, r16
    660e:	fb 01       	movw	r30, r22
    6610:	e0 0f       	add	r30, r16
    6612:	f1 1f       	adc	r31, r17
    6614:	64 90       	lpm	r6, Z
    6616:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    6618:	21 01       	movw	r4, r2
    661a:	21 e0       	ldi	r18, 0x01	; 1
    661c:	42 1a       	sub	r4, r18
    661e:	51 08       	sbc	r5, r1
    6620:	13 e0       	ldi	r17, 0x03	; 3
    6622:	56 94       	lsr	r5
    6624:	47 94       	ror	r4
    6626:	1a 95       	dec	r17
    6628:	e1 f7       	brne	.-8      	; 0x6622 <mugui_lcd_putc+0x68>
    662a:	43 94       	inc	r4
    662c:	a4 2d       	mov	r26, r4
    662e:	b0 e0       	ldi	r27, 0x00	; 0
    6630:	ba 83       	std	Y+2, r27	; 0x02
    6632:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    6634:	a1 2c       	mov	r10, r1
    6636:	b1 2c       	mov	r11, r1
    6638:	00 e0       	ldi	r16, 0x00	; 0
    663a:	10 e0       	ldi	r17, 0x00	; 0
    663c:	4b 01       	movw	r8, r22
    663e:	bf ef       	ldi	r27, 0xFF	; 255
    6640:	8b 1a       	sub	r8, r27
    6642:	9b 0a       	sbc	r9, r27
    6644:	88 0e       	add	r8, r24
    6646:	99 1e       	adc	r9, r25
    6648:	06 15       	cp	r16, r6
    664a:	17 05       	cpc	r17, r7
    664c:	08 f0       	brcs	.+2      	; 0x6650 <mugui_lcd_putc+0x96>
    664e:	43 c0       	rjmp	.+134    	; 0x66d6 <mugui_lcd_putc+0x11c>
    6650:	c1 2c       	mov	r12, r1
    6652:	d1 2c       	mov	r13, r1
    6654:	e1 2c       	mov	r14, r1
    6656:	f1 2c       	mov	r15, r1
    6658:	94 01       	movw	r18, r8
    665a:	2a 0d       	add	r18, r10
    665c:	3b 1d       	adc	r19, r11
    665e:	3f 83       	std	Y+7, r19	; 0x07
    6660:	2e 83       	std	Y+6, r18	; 0x06
    6662:	5c 80       	ldd	r5, Y+4	; 0x04
    6664:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    6666:	c4 14       	cp	r12, r4
    6668:	78 f5       	brcc	.+94     	; 0x66c8 <mugui_lcd_putc+0x10e>
    666a:	ee 81       	ldd	r30, Y+6	; 0x06
    666c:	ff 81       	ldd	r31, Y+7	; 0x07
    666e:	ec 0d       	add	r30, r12
    6670:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    6672:	34 91       	lpm	r19, Z
    6674:	3b 83       	std	Y+3, r19	; 0x03
    6676:	19 86       	std	Y+9, r1	; 0x09
    6678:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    667a:	e2 14       	cp	r14, r2
    667c:	f3 04       	cpc	r15, r3
    667e:	00 f5       	brcc	.+64     	; 0x66c0 <mugui_lcd_putc+0x106>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    6680:	81 e0       	ldi	r24, 0x01	; 1
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	08 84       	ldd	r0, Y+8	; 0x08
    6686:	02 c0       	rjmp	.+4      	; 0x668c <mugui_lcd_putc+0xd2>
    6688:	88 0f       	add	r24, r24
    668a:	99 1f       	adc	r25, r25
    668c:	0a 94       	dec	r0
    668e:	e2 f7       	brpl	.-8      	; 0x6688 <mugui_lcd_putc+0xce>
					bit = data & mask;
    6690:	3b 81       	ldd	r19, Y+3	; 0x03
    6692:	83 23       	and	r24, r19
    6694:	4d 81       	ldd	r20, Y+5	; 0x05
    6696:	4e 0d       	add	r20, r14
					if(bit)
    6698:	88 23       	and	r24, r24
    669a:	11 f0       	breq	.+4      	; 0x66a0 <mugui_lcd_putc+0xe6>
					{
						setpixel(buffer,tx+x,ty+y,1);
    669c:	21 e0       	ldi	r18, 0x01	; 1
    669e:	01 c0       	rjmp	.+2      	; 0x66a2 <mugui_lcd_putc+0xe8>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    66a0:	20 e0       	ldi	r18, 0x00	; 0
    66a2:	65 2d       	mov	r22, r5
    66a4:	85 e4       	ldi	r24, 0x45	; 69
    66a6:	91 e0       	ldi	r25, 0x01	; 1
    66a8:	0e 94 92 18 	call	0x3124	; 0x3124 <setpixel>
					}
					ty++;
    66ac:	8f ef       	ldi	r24, 0xFF	; 255
    66ae:	e8 1a       	sub	r14, r24
    66b0:	f8 0a       	sbc	r15, r24
    66b2:	a8 85       	ldd	r26, Y+8	; 0x08
    66b4:	b9 85       	ldd	r27, Y+9	; 0x09
    66b6:	11 96       	adiw	r26, 0x01	; 1
    66b8:	b9 87       	std	Y+9, r27	; 0x09
    66ba:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    66bc:	18 97       	sbiw	r26, 0x08	; 8
    66be:	e9 f6       	brne	.-70     	; 0x667a <mugui_lcd_putc+0xc0>
    66c0:	bf ef       	ldi	r27, 0xFF	; 255
    66c2:	cb 1a       	sub	r12, r27
    66c4:	db 0a       	sbc	r13, r27
    66c6:	cf cf       	rjmp	.-98     	; 0x6666 <mugui_lcd_putc+0xac>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    66c8:	0f 5f       	subi	r16, 0xFF	; 255
    66ca:	1f 4f       	sbci	r17, 0xFF	; 255
    66cc:	e9 81       	ldd	r30, Y+1	; 0x01
    66ce:	fa 81       	ldd	r31, Y+2	; 0x02
    66d0:	ae 0e       	add	r10, r30
    66d2:	bf 1e       	adc	r11, r31
    66d4:	b9 cf       	rjmp	.-142    	; 0x6648 <mugui_lcd_putc+0x8e>
			}
		}
	}

	return width;
}
    66d6:	c3 01       	movw	r24, r6
    66d8:	29 96       	adiw	r28, 0x09	; 9
    66da:	e2 e1       	ldi	r30, 0x12	; 18
    66dc:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

000066e0 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    66e0:	a0 e0       	ldi	r26, 0x00	; 0
    66e2:	b0 e0       	ldi	r27, 0x00	; 0
    66e4:	e6 e7       	ldi	r30, 0x76	; 118
    66e6:	f3 e3       	ldi	r31, 0x33	; 51
    66e8:	0c 94 33 3e 	jmp	0x7c66	; 0x7c66 <__prologue_saves__+0x10>
    66ec:	ec 01       	movw	r28, r24
    66ee:	7b 01       	movw	r14, r22
    66f0:	6a 01       	movw	r12, r20
    66f2:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    66f4:	00 e0       	ldi	r16, 0x00	; 0
    66f6:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    66f8:	ce 01       	movw	r24, r28
    66fa:	fe 01       	movw	r30, r28
    66fc:	24 91       	lpm	r18, Z
    66fe:	22 23       	and	r18, r18
    6700:	71 f0       	breq	.+28     	; 0x671e <pgm_mugui_lcd_puts+0x3e>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    6702:	21 96       	adiw	r28, 0x01	; 1
    6704:	fc 01       	movw	r30, r24
    6706:	84 91       	lpm	r24, Z
    6708:	a8 01       	movw	r20, r16
    670a:	4c 0d       	add	r20, r12
    670c:	5d 1d       	adc	r21, r13
    670e:	95 01       	movw	r18, r10
    6710:	b7 01       	movw	r22, r14
    6712:	0e 94 dd 32 	call	0x65ba	; 0x65ba <mugui_lcd_putc>
    6716:	01 96       	adiw	r24, 0x01	; 1
    6718:	08 0f       	add	r16, r24
    671a:	19 1f       	adc	r17, r25
    671c:	ed cf       	rjmp	.-38     	; 0x66f8 <pgm_mugui_lcd_puts+0x18>
	}
}
    671e:	cd b7       	in	r28, 0x3d	; 61
    6720:	de b7       	in	r29, 0x3e	; 62
    6722:	ea e0       	ldi	r30, 0x0A	; 10
    6724:	0c 94 4f 3e 	jmp	0x7c9e	; 0x7c9e <__epilogue_restores__+0x10>

00006728 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6728:	a0 e0       	ldi	r26, 0x00	; 0
    672a:	b0 e0       	ldi	r27, 0x00	; 0
    672c:	ea e9       	ldi	r30, 0x9A	; 154
    672e:	f3 e3       	ldi	r31, 0x33	; 51
    6730:	0c 94 31 3e 	jmp	0x7c62	; 0x7c62 <__prologue_saves__+0xc>
    6734:	6b 01       	movw	r12, r22
    6736:	5a 01       	movw	r10, r20
    6738:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    673a:	ec 01       	movw	r28, r24
    673c:	09 90       	ld	r0, Y+
    673e:	00 20       	and	r0, r0
    6740:	e9 f7       	brne	.-6      	; 0x673c <mugui_lcd_puts+0x14>
    6742:	8c 01       	movw	r16, r24
    6744:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    6746:	e1 2c       	mov	r14, r1
    6748:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    674a:	0c 17       	cp	r16, r28
    674c:	1d 07       	cpc	r17, r29
    674e:	71 f0       	breq	.+28     	; 0x676c <mugui_lcd_puts+0x44>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    6750:	a7 01       	movw	r20, r14
    6752:	4a 0d       	add	r20, r10
    6754:	5b 1d       	adc	r21, r11
    6756:	94 01       	movw	r18, r8
    6758:	b6 01       	movw	r22, r12
    675a:	f8 01       	movw	r30, r16
    675c:	81 91       	ld	r24, Z+
    675e:	8f 01       	movw	r16, r30
    6760:	0e 94 dd 32 	call	0x65ba	; 0x65ba <mugui_lcd_putc>
    6764:	01 96       	adiw	r24, 0x01	; 1
    6766:	e8 0e       	add	r14, r24
    6768:	f9 1e       	adc	r15, r25
    676a:	ef cf       	rjmp	.-34     	; 0x674a <mugui_lcd_puts+0x22>
	}
}
    676c:	cd b7       	in	r28, 0x3d	; 61
    676e:	de b7       	in	r29, 0x3e	; 62
    6770:	ec e0       	ldi	r30, 0x0C	; 12
    6772:	0c 94 4d 3e 	jmp	0x7c9a	; 0x7c9a <__epilogue_restores__+0xc>

00006776 <Sensor_PID>:

int16_t DynGain = 0;

// Run each loop to average gyro data
void Sensor_PID(uint32_t period)
{
    6776:	aa e0       	ldi	r26, 0x0A	; 10
    6778:	b0 e0       	ldi	r27, 0x00	; 0
    677a:	e1 ec       	ldi	r30, 0xC1	; 193
    677c:	f3 e3       	ldi	r31, 0x33	; 51
    677e:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
    6782:	8b 01       	movw	r16, r22
    6784:	9c 01       	movw	r18, r24
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    6786:	80 91 d1 07 	lds	r24, 0x07D1
    678a:	90 91 d2 07 	lds	r25, 0x07D2
    678e:	91 95       	neg	r25
    6790:	81 95       	neg	r24
    6792:	91 09       	sbc	r25, r1
    6794:	9a 83       	std	Y+2, r25	; 0x02
    6796:	89 83       	std	Y+1, r24	; 0x01
    6798:	80 91 d3 07 	lds	r24, 0x07D3
    679c:	90 91 d4 07 	lds	r25, 0x07D4
    67a0:	9c 83       	std	Y+4, r25	; 0x04
    67a2:	8b 83       	std	Y+3, r24	; 0x03
    67a4:	80 91 d5 07 	lds	r24, 0x07D5
    67a8:	90 91 d6 07 	lds	r25, 0x07D6
    67ac:	9e 83       	std	Y+6, r25	; 0x06
    67ae:	8d 83       	std	Y+5, r24	; 0x05
	// Set up dynamic gain variable once per loop
	// N.B. Config.DynGainDiv = 2500 / Config.DynGain;
	//************************************************************

	// Channel controlling the dynamic gain
	DynGain = RxChannel[Config.DynGainSrc] - 2500; // 0-1250-2500 range
    67b0:	e0 91 10 06 	lds	r30, 0x0610
    67b4:	ee 0f       	add	r30, r30
    67b6:	ff 0b       	sbc	r31, r31
    67b8:	e6 5a       	subi	r30, 0xA6	; 166
    67ba:	f8 4f       	sbci	r31, 0xF8	; 248
    67bc:	80 81       	ld	r24, Z
    67be:	91 81       	ldd	r25, Z+1	; 0x01
    67c0:	84 5c       	subi	r24, 0xC4	; 196
    67c2:	99 40       	sbci	r25, 0x09	; 9

	// Scale 0 - 2500 down to 0 - Config.DynGain (%)
	DynGain = DynGain / Config.DynGainDiv;
    67c4:	60 91 7a 06 	lds	r22, 0x067A
    67c8:	70 91 7b 06 	lds	r23, 0x067B
    67cc:	0e 94 c1 3d 	call	0x7b82	; 0x7b82 <__divmodhi4>
    67d0:	70 93 3b 01 	sts	0x013B, r23
    67d4:	60 93 3a 01 	sts	0x013A, r22
	//************************************************************
	// Un-mix ailerons from flaperons as required
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    67d8:	e0 91 0f 06 	lds	r30, 0x060F
    67dc:	80 91 7c 06 	lds	r24, 0x067C
    67e0:	e8 30       	cpi	r30, 0x08	; 8
    67e2:	c1 f1       	breq	.+112    	; 0x6854 <Sensor_PID+0xde>
    67e4:	81 11       	cpse	r24, r1
    67e6:	36 c0       	rjmp	.+108    	; 0x6854 <Sensor_PID+0xde>
	{
		// Recreate actual roll signal from flaperons
		roll_actual = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    67e8:	80 91 d1 07 	lds	r24, 0x07D1
    67ec:	90 91 d2 07 	lds	r25, 0x07D2
    67f0:	ee 0f       	add	r30, r30
    67f2:	ff 0b       	sbc	r31, r31
    67f4:	e1 53       	subi	r30, 0x31	; 49
    67f6:	f8 4f       	sbci	r31, 0xF8	; 248
    67f8:	40 81       	ld	r20, Z
    67fa:	51 81       	ldd	r21, Z+1	; 0x01
    67fc:	84 0f       	add	r24, r20
    67fe:	95 1f       	adc	r25, r21
		RCinputsAxis[ROLL] = roll_actual >> 1;
    6800:	95 95       	asr	r25
    6802:	87 95       	ror	r24
    6804:	9a 83       	std	Y+2, r25	; 0x02
    6806:	89 83       	std	Y+1, r24	; 0x01
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    6808:	80 91 14 06 	lds	r24, 0x0614
    680c:	92 e0       	ldi	r25, 0x02	; 2
    680e:	c9 2e       	mov	r12, r25
    6810:	d1 2c       	mov	r13, r1
    6812:	c8 1a       	sub	r12, r24
    6814:	d1 08       	sbc	r13, r1
    6816:	87 fd       	sbrc	r24, 7
    6818:	d3 94       	inc	r13
		
		P1_temp = gyroADC[axis] + stick;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    681a:	c9 01       	movw	r24, r18
    681c:	b8 01       	movw	r22, r16
    681e:	0e 94 94 3c 	call	0x7928	; 0x7928 <__floatunsisf>
    6822:	20 e0       	ldi	r18, 0x00	; 0
    6824:	30 e3       	ldi	r19, 0x30	; 48
    6826:	4f e5       	ldi	r20, 0x5F	; 95
    6828:	55 e4       	ldi	r21, 0x45	; 69
    682a:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__divsf3>
    682e:	2b 01       	movw	r4, r22
    6830:	3c 01       	movw	r6, r24
    6832:	ce 01       	movw	r24, r28
    6834:	01 96       	adiw	r24, 0x01	; 1
    6836:	9a 87       	std	Y+10, r25	; 0x0a
    6838:	89 87       	std	Y+9, r24	; 0x09
    683a:	a4 e8       	ldi	r26, 0x84	; 132
    683c:	b5 e0       	ldi	r27, 0x05	; 5
    683e:	b8 87       	std	Y+8, r27	; 0x08
    6840:	af 83       	std	Y+7, r26	; 0x07
    6842:	09 ea       	ldi	r16, 0xA9	; 169
    6844:	17 e0       	ldi	r17, 0x07	; 7
    6846:	21 ec       	ldi	r18, 0xC1	; 193
    6848:	22 2e       	mov	r2, r18
    684a:	27 e0       	ldi	r18, 0x07	; 7
    684c:	32 2e       	mov	r3, r18
    684e:	e1 2c       	mov	r14, r1
    6850:	f1 2c       	mov	r15, r1
    6852:	17 c0       	rjmp	.+46     	; 0x6882 <Sensor_PID+0x10c>
		RCinputsAxis[ROLL] = roll_actual >> 1;
	}

	// In in Flying Wing mode RCinputsAxis comes directly from RCinputs
	// Pitch has to be reversed
	else if (Config.MixMode == FWING)
    6854:	81 30       	cpi	r24, 0x01	; 1
    6856:	81 f4       	brne	.+32     	; 0x6878 <Sensor_PID+0x102>
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
    6858:	80 91 d1 07 	lds	r24, 0x07D1
    685c:	90 91 d2 07 	lds	r25, 0x07D2
    6860:	9a 83       	std	Y+2, r25	; 0x02
    6862:	89 83       	std	Y+1, r24	; 0x01
		RCinputsAxis[PITCH] = -RCinputs[ELEVATOR];
    6864:	80 91 d3 07 	lds	r24, 0x07D3
    6868:	90 91 d4 07 	lds	r25, 0x07D4
    686c:	91 95       	neg	r25
    686e:	81 95       	neg	r24
    6870:	91 09       	sbc	r25, r1
    6872:	9c 83       	std	Y+4, r25	; 0x04
    6874:	8b 83       	std	Y+3, r24	; 0x03
    6876:	c8 cf       	rjmp	.-112    	; 0x6808 <Sensor_PID+0x92>
	}

	// Otherwise roll is just roll...
	else
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
    6878:	80 91 d1 07 	lds	r24, 0x07D1
    687c:	90 91 d2 07 	lds	r25, 0x07D2
    6880:	c1 cf       	rjmp	.-126    	; 0x6804 <Sensor_PID+0x8e>
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    6882:	e9 85       	ldd	r30, Y+9	; 0x09
    6884:	fa 85       	ldd	r31, Y+10	; 0x0a
    6886:	81 90       	ld	r8, Z+
    6888:	91 90       	ld	r9, Z+
    688a:	fa 87       	std	Y+10, r31	; 0x0a
    688c:	e9 87       	std	Y+9, r30	; 0x09
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		
		P1_temp = gyroADC[axis] + stick;
    688e:	af 81       	ldd	r26, Y+7	; 0x07
    6890:	b8 85       	ldd	r27, Y+8	; 0x08
    6892:	ad 90       	ld	r10, X+
    6894:	bd 90       	ld	r11, X+
    6896:	b8 87       	std	Y+8, r27	; 0x08
    6898:	af 83       	std	Y+7, r26	; 0x07
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    689a:	b4 01       	movw	r22, r8
    689c:	0c 2c       	mov	r0, r12
    689e:	02 c0       	rjmp	.+4      	; 0x68a4 <Sensor_PID+0x12e>
    68a0:	75 95       	asr	r23
    68a2:	67 95       	ror	r22
    68a4:	0a 94       	dec	r0
    68a6:	e2 f7       	brpl	.-8      	; 0x68a0 <Sensor_PID+0x12a>
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		
		P1_temp = gyroADC[axis] + stick;
    68a8:	6a 0d       	add	r22, r10
    68aa:	7b 1d       	adc	r23, r11
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    68ac:	88 27       	eor	r24, r24
    68ae:	77 fd       	sbrc	r23, 7
    68b0:	80 95       	com	r24
    68b2:	98 2f       	mov	r25, r24
    68b4:	0e 94 96 3c 	call	0x792c	; 0x792c <__floatsisf>
		tempf2 = tempf2 * factor;
    68b8:	a3 01       	movw	r20, r6
    68ba:	92 01       	movw	r18, r4
    68bc:	0e 94 4a 3d 	call	0x7a94	; 0x7a94 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    68c0:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[axis] += P1_temp;
    68c4:	f8 01       	movw	r30, r16
    68c6:	20 81       	ld	r18, Z
    68c8:	31 81       	ldd	r19, Z+1	; 0x01
    68ca:	42 81       	ldd	r20, Z+2	; 0x02
    68cc:	53 81       	ldd	r21, Z+3	; 0x03
    68ce:	62 0f       	add	r22, r18
    68d0:	73 1f       	adc	r23, r19
    68d2:	84 1f       	adc	r24, r20
    68d4:	95 1f       	adc	r25, r21
    68d6:	60 83       	st	Z, r22
    68d8:	71 83       	std	Z+1, r23	; 0x01
    68da:	82 83       	std	Z+2, r24	; 0x02
    68dc:	93 83       	std	Z+3, r25	; 0x03

		// Reset the I-terms when you need to adjust the I-term with RC
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
    68de:	81 14       	cp	r8, r1
    68e0:	91 04       	cpc	r9, r1
    68e2:	41 f1       	breq	.+80     	; 0x6934 <Sensor_PID+0x1be>
    68e4:	f7 01       	movw	r30, r14
    68e6:	e7 59       	subi	r30, 0x97	; 151
    68e8:	f9 4f       	sbci	r31, 0xF9	; 249
		{
			if (IntegralGyro[axis] > Config.Raw_I_Constrain[axis])
    68ea:	20 81       	ld	r18, Z
    68ec:	31 81       	ldd	r19, Z+1	; 0x01
    68ee:	42 81       	ldd	r20, Z+2	; 0x02
    68f0:	53 81       	ldd	r21, Z+3	; 0x03
    68f2:	26 17       	cp	r18, r22
    68f4:	37 07       	cpc	r19, r23
    68f6:	48 07       	cpc	r20, r24
    68f8:	59 07       	cpc	r21, r25
    68fa:	2c f4       	brge	.+10     	; 0x6906 <Sensor_PID+0x190>
			{
				IntegralGyro[axis] = Config.Raw_I_Constrain[axis];
    68fc:	f8 01       	movw	r30, r16
    68fe:	20 83       	st	Z, r18
    6900:	31 83       	std	Z+1, r19	; 0x01
    6902:	42 83       	std	Z+2, r20	; 0x02
    6904:	53 83       	std	Z+3, r21	; 0x03
			}
			if (IntegralGyro[axis] < -Config.Raw_I_Constrain[axis])
    6906:	da 01       	movw	r26, r20
    6908:	c9 01       	movw	r24, r18
    690a:	44 27       	eor	r20, r20
    690c:	55 27       	eor	r21, r21
    690e:	ba 01       	movw	r22, r20
    6910:	48 1b       	sub	r20, r24
    6912:	59 0b       	sbc	r21, r25
    6914:	6a 0b       	sbc	r22, r26
    6916:	7b 0b       	sbc	r23, r27
    6918:	f8 01       	movw	r30, r16
    691a:	80 81       	ld	r24, Z
    691c:	91 81       	ldd	r25, Z+1	; 0x01
    691e:	a2 81       	ldd	r26, Z+2	; 0x02
    6920:	b3 81       	ldd	r27, Z+3	; 0x03
    6922:	84 17       	cp	r24, r20
    6924:	95 07       	cpc	r25, r21
    6926:	a6 07       	cpc	r26, r22
    6928:	b7 07       	cpc	r27, r23
    692a:	24 f4       	brge	.+8      	; 0x6934 <Sensor_PID+0x1be>
			{
				IntegralGyro[axis] = -Config.Raw_I_Constrain[axis];
    692c:	40 83       	st	Z, r20
    692e:	51 83       	std	Z+1, r21	; 0x01
    6930:	62 83       	std	Z+2, r22	; 0x02
    6932:	73 83       	std	Z+3, r23	; 0x03

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    6934:	a5 01       	movw	r20, r10
    6936:	66 27       	eor	r22, r22
    6938:	57 fd       	sbrc	r21, 7
    693a:	60 95       	com	r22
    693c:	76 2f       	mov	r23, r22
    693e:	f1 01       	movw	r30, r2
    6940:	80 81       	ld	r24, Z
    6942:	91 81       	ldd	r25, Z+1	; 0x01
    6944:	a2 81       	ldd	r26, Z+2	; 0x02
    6946:	b3 81       	ldd	r27, Z+3	; 0x03
    6948:	84 0f       	add	r24, r20
    694a:	95 1f       	adc	r25, r21
    694c:	a6 1f       	adc	r26, r22
    694e:	b7 1f       	adc	r27, r23
    6950:	81 93       	st	Z+, r24
    6952:	91 93       	st	Z+, r25
    6954:	a1 93       	st	Z+, r26
    6956:	b1 93       	st	Z+, r27
    6958:	1f 01       	movw	r2, r30
    695a:	0c 5f       	subi	r16, 0xFC	; 252
    695c:	1f 4f       	sbci	r17, 0xFF	; 255
    695e:	f4 e0       	ldi	r31, 0x04	; 4
    6960:	ef 0e       	add	r14, r31
    6962:	f1 1c       	adc	r15, r1

	//************************************************************
	// Per-cycle PID handling
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    6964:	8c e0       	ldi	r24, 0x0C	; 12
    6966:	e8 16       	cp	r14, r24
    6968:	f1 04       	cpc	r15, r1
    696a:	09 f0       	breq	.+2      	; 0x696e <Sensor_PID+0x1f8>
    696c:	8a cf       	rjmp	.-236    	; 0x6882 <Sensor_PID+0x10c>
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
		
	} // for (axis = 0; axis <= YAW; axis ++)
}
    696e:	2a 96       	adiw	r28, 0x0a	; 10
    6970:	e2 e1       	ldi	r30, 0x12	; 18
    6972:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

00006976 <Calculate_PID>:

void Calculate_PID(void)
{
    6976:	a6 e2       	ldi	r26, 0x26	; 38
    6978:	b0 e0       	ldi	r27, 0x00	; 0
    697a:	e1 ec       	ldi	r30, 0xC1	; 193
    697c:	f4 e3       	ldi	r31, 0x34	; 52
    697e:	0c 94 2b 3e 	jmp	0x7c56	; 0x7c56 <__prologue_saves__>
	int32_t temp32 = 0;						// Needed for 32-bit dynamic gain calculations
	int32_t mult32 = 0;
	int32_t PID_Gyros_32;

	// Initialise arrays with gain values. Cludgy fix to reduce code space
	int8_t 	P_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.P_mult, Config.FlightMode[Config.Flight].Pitch.P_mult, Config.FlightMode[Config.Flight].Yaw.P_mult};
    6982:	20 91 46 07 	lds	r18, 0x0746
    6986:	36 e1       	ldi	r19, 0x16	; 22
    6988:	23 02       	muls	r18, r19
    698a:	c0 01       	movw	r24, r0
    698c:	11 24       	eor	r1, r1
    698e:	8e 53       	subi	r24, 0x3E	; 62
    6990:	9a 4f       	sbci	r25, 0xFA	; 250
    6992:	fc 01       	movw	r30, r24
    6994:	e4 5a       	subi	r30, 0xA4	; 164
    6996:	ff 4f       	sbci	r31, 0xFF	; 255
    6998:	30 81       	ld	r19, Z
    699a:	3b 87       	std	Y+11, r19	; 0x0b
    699c:	37 96       	adiw	r30, 0x07	; 7
    699e:	30 81       	ld	r19, Z
    69a0:	3c 87       	std	Y+12, r19	; 0x0c
    69a2:	37 96       	adiw	r30, 0x07	; 7
    69a4:	30 81       	ld	r19, Z
    69a6:	3d 87       	std	Y+13, r19	; 0x0d
	int8_t 	I_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.I_mult, Config.FlightMode[Config.Flight].Pitch.I_mult, Config.FlightMode[Config.Flight].Yaw.I_mult};
    69a8:	3d 97       	sbiw	r30, 0x0d	; 13
    69aa:	30 81       	ld	r19, Z
    69ac:	38 87       	std	Y+8, r19	; 0x08
    69ae:	37 96       	adiw	r30, 0x07	; 7
    69b0:	30 81       	ld	r19, Z
    69b2:	39 87       	std	Y+9, r19	; 0x09
    69b4:	37 96       	adiw	r30, 0x07	; 7
    69b6:	30 81       	ld	r19, Z
    69b8:	3a 87       	std	Y+10, r19	; 0x0a
	int8_t 	D_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.D_mult, Config.FlightMode[Config.Flight].Pitch.D_mult, Config.FlightMode[Config.Flight].Yaw.D_mult};
    69ba:	3d 97       	sbiw	r30, 0x0d	; 13
    69bc:	30 81       	ld	r19, Z
    69be:	3d 83       	std	Y+5, r19	; 0x05
    69c0:	37 96       	adiw	r30, 0x07	; 7
    69c2:	30 81       	ld	r19, Z
    69c4:	3e 83       	std	Y+6, r19	; 0x06
    69c6:	37 96       	adiw	r30, 0x07	; 7
    69c8:	30 81       	ld	r19, Z
    69ca:	3f 83       	std	Y+7, r19	; 0x07
	int8_t 	L_gain[NUMBEROFAXIS - 1] = {Config.FlightMode[Config.Flight].A_Roll_P_mult, Config.FlightMode[Config.Flight].A_Pitch_P_mult};
    69cc:	3c 97       	sbiw	r30, 0x0c	; 12
    69ce:	30 81       	ld	r19, Z
    69d0:	3e 87       	std	Y+14, r19	; 0x0e
    69d2:	37 96       	adiw	r30, 0x07	; 7
    69d4:	30 81       	ld	r19, Z
    69d6:	3f 87       	std	Y+15, r19	; 0x0f

	// Only for roll and pitch acc trim
	int16_t	L_trim[2] =	{Config.Rolltrim[Config.Flight], Config.Pitchtrim[Config.Flight]};
    69d8:	22 0f       	add	r18, r18
    69da:	33 0b       	sbc	r19, r19
    69dc:	2e 53       	subi	r18, 0x3E	; 62
    69de:	3a 4f       	sbci	r19, 0xFA	; 250
    69e0:	f9 01       	movw	r30, r18
    69e2:	eb 57       	subi	r30, 0x7B	; 123
    69e4:	fe 4f       	sbci	r31, 0xFE	; 254
    69e6:	40 81       	ld	r20, Z
    69e8:	51 81       	ldd	r21, Z+1	; 0x01
    69ea:	5a 83       	std	Y+2, r21	; 0x02
    69ec:	49 83       	std	Y+1, r20	; 0x01
    69ee:	36 96       	adiw	r30, 0x06	; 6
    69f0:	20 81       	ld	r18, Z
    69f2:	31 81       	ldd	r19, Z+1	; 0x01
    69f4:	3c 83       	std	Y+4, r19	; 0x04
    69f6:	2b 83       	std	Y+3, r18	; 0x03
		// Do this by mixing between (no PID) and PID
		// PID gains are not changed but the effect is the same
		//************************************************************

		// If dynamic gain set up 
		if (Config.DynGainSrc != NOCHAN)
    69f8:	a0 91 10 06 	lds	r26, 0x0610
    69fc:	ac a3       	std	Y+36, r26	; 0x24
    69fe:	a1 ec       	ldi	r26, 0xC1	; 193
    6a00:	8a 2e       	mov	r8, r26
    6a02:	a7 e0       	ldi	r26, 0x07	; 7
    6a04:	9a 2e       	mov	r9, r26
    6a06:	e4 e8       	ldi	r30, 0x84	; 132
    6a08:	f5 e0       	ldi	r31, 0x05	; 5
    6a0a:	fb 8f       	std	Y+27, r31	; 0x1b
    6a0c:	ea 8f       	std	Y+26, r30	; 0x1a
    6a0e:	bb eb       	ldi	r27, 0xBB	; 187
    6a10:	2b 2e       	mov	r2, r27
    6a12:	b7 e0       	ldi	r27, 0x07	; 7
    6a14:	3b 2e       	mov	r3, r27
    6a16:	25 eb       	ldi	r18, 0xB5	; 181
    6a18:	37 e0       	ldi	r19, 0x07	; 7
    6a1a:	39 8b       	std	Y+17, r19	; 0x11
    6a1c:	28 8b       	std	Y+16, r18	; 0x10
    6a1e:	de 01       	movw	r26, r28
    6a20:	1b 96       	adiw	r26, 0x0b	; 11
    6a22:	b9 8f       	std	Y+25, r27	; 0x19
    6a24:	a8 8f       	std	Y+24, r26	; 0x18
    6a26:	e9 ea       	ldi	r30, 0xA9	; 169
    6a28:	f7 e0       	ldi	r31, 0x07	; 7
    6a2a:	fd 8f       	std	Y+29, r31	; 0x1d
    6a2c:	ec 8f       	std	Y+28, r30	; 0x1c
    6a2e:	9e 01       	movw	r18, r28
    6a30:	28 5f       	subi	r18, 0xF8	; 248
    6a32:	3f 4f       	sbci	r19, 0xFF	; 255
    6a34:	3f 8f       	std	Y+31, r19	; 0x1f
    6a36:	2e 8f       	std	Y+30, r18	; 0x1e
    6a38:	a4 e3       	ldi	r26, 0x34	; 52
    6a3a:	b1 e0       	ldi	r27, 0x01	; 1
    6a3c:	bb 8b       	std	Y+19, r27	; 0x13
    6a3e:	aa 8b       	std	Y+18, r26	; 0x12
    6a40:	fe 01       	movw	r30, r28
    6a42:	35 96       	adiw	r30, 0x05	; 5
    6a44:	f9 a3       	std	Y+33, r31	; 0x21
    6a46:	e8 a3       	std	Y+32, r30	; 0x20
    6a48:	2d e5       	ldi	r18, 0x5D	; 93
    6a4a:	36 e0       	ldi	r19, 0x06	; 6
    6a4c:	3b a3       	std	Y+35, r19	; 0x23
    6a4e:	2a a3       	std	Y+34, r18	; 0x22
    6a50:	a1 2c       	mov	r10, r1
    6a52:	b1 2c       	mov	r11, r1
    6a54:	00 e0       	ldi	r16, 0x00	; 0
    6a56:	10 e0       	ldi	r17, 0x00	; 0
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp = (int32_t)(Config.FlightMode[Config.Flight].Yaw_trim << PID_SCALE);
    6a58:	dc 01       	movw	r26, r24
    6a5a:	a2 59       	subi	r26, 0x92	; 146
    6a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    6a5e:	be a3       	std	Y+38, r27	; 0x26
    6a60:	ad a3       	std	Y+37, r26	; 0x25
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    6a62:	20 91 16 01 	lds	r18, 0x0116
    6a66:	30 e0       	ldi	r19, 0x00	; 0
    6a68:	40 e0       	ldi	r20, 0x00	; 0
    6a6a:	50 e0       	ldi	r21, 0x00	; 0
    6a6c:	f4 01       	movw	r30, r8
    6a6e:	60 81       	ld	r22, Z
    6a70:	71 81       	ldd	r23, Z+1	; 0x01
    6a72:	82 81       	ldd	r24, Z+2	; 0x02
    6a74:	93 81       	ldd	r25, Z+3	; 0x03
    6a76:	0e 94 d5 3d 	call	0x7baa	; 0x7baa <__divmodsi4>
    6a7a:	69 01       	movw	r12, r18
    6a7c:	7a 01       	movw	r14, r20
    6a7e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6a80:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6a82:	2d 93       	st	X+, r18
    6a84:	3d 93       	st	X+, r19
    6a86:	bb 8f       	std	Y+27, r27	; 0x1b
    6a88:	aa 8f       	std	Y+26, r26	; 0x1a
		PID_AvgGyro[axis] = 0;					// Reset average		
    6a8a:	f4 01       	movw	r30, r8
    6a8c:	10 82       	st	Z, r1
    6a8e:	11 82       	std	Z+1, r1	; 0x01
    6a90:	12 82       	std	Z+2, r1	; 0x02
    6a92:	13 82       	std	Z+3, r1	; 0x03
    6a94:	e0 2f       	mov	r30, r16
		
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    6a96:	02 30       	cpi	r16, 0x02	; 2
    6a98:	69 f4       	brne	.+26     	; 0x6ab4 <Calculate_PID+0x13e>
		{
			PID_gyro_temp = (int32_t)(Config.FlightMode[Config.Flight].Yaw_trim << PID_SCALE);
    6a9a:	ad a1       	ldd	r26, Y+37	; 0x25
    6a9c:	be a1       	ldd	r27, Y+38	; 0x26
    6a9e:	4c 91       	ld	r20, X
    6aa0:	b0 e4       	ldi	r27, 0x40	; 64
    6aa2:	4b 02       	muls	r20, r27
    6aa4:	a0 01       	movw	r20, r0
    6aa6:	11 24       	eor	r1, r1
    6aa8:	2a 01       	movw	r4, r20
    6aaa:	66 24       	eor	r6, r6
    6aac:	57 fc       	sbrc	r5, 7
    6aae:	60 94       	com	r6
    6ab0:	76 2c       	mov	r7, r6
    6ab2:	03 c0       	rjmp	.+6      	; 0x6aba <Calculate_PID+0x144>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp = 0;
    6ab4:	41 2c       	mov	r4, r1
    6ab6:	51 2c       	mov	r5, r1
    6ab8:	32 01       	movw	r6, r4
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term
		PID_gyro_temp += gyroADC[axis] * P_gain[axis];				// Multiply P-term (Max gain of 127)
    6aba:	a8 8d       	ldd	r26, Y+24	; 0x18
    6abc:	b9 8d       	ldd	r27, Y+25	; 0x19
    6abe:	2d 91       	ld	r18, X+
    6ac0:	b9 8f       	std	Y+25, r27	; 0x19
    6ac2:	a8 8f       	std	Y+24, r26	; 0x18
    6ac4:	33 27       	eor	r19, r19
    6ac6:	27 fd       	sbrc	r18, 7
    6ac8:	30 95       	com	r19
    6aca:	2c 9d       	mul	r18, r12
    6acc:	c0 01       	movw	r24, r0
    6ace:	2d 9d       	mul	r18, r13
    6ad0:	90 0d       	add	r25, r0
    6ad2:	3c 9d       	mul	r19, r12
    6ad4:	90 0d       	add	r25, r0
    6ad6:	11 24       	eor	r1, r1
    6ad8:	9c 01       	movw	r18, r24
    6ada:	44 27       	eor	r20, r20
    6adc:	37 fd       	sbrc	r19, 7
    6ade:	40 95       	com	r20
    6ae0:	54 2f       	mov	r21, r20
    6ae2:	24 0d       	add	r18, r4
    6ae4:	35 1d       	adc	r19, r5
    6ae6:	46 1d       	adc	r20, r6
    6ae8:	57 1d       	adc	r21, r7
		PID_gyro_temp = PID_gyro_temp * (int32_t)3;					// Multiply by 3
    6aea:	a3 e0       	ldi	r26, 0x03	; 3
    6aec:	b0 e0       	ldi	r27, 0x00	; 0
    6aee:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__muluhisi3>
    6af2:	6c 8b       	std	Y+20, r22	; 0x14
    6af4:	7d 8b       	std	Y+21, r23	; 0x15
    6af6:	8e 8b       	std	Y+22, r24	; 0x16
    6af8:	9f 8b       	std	Y+23, r25	; 0x17

		// Gyro I-term
		PID_Gyro_I_actual = IntegralGyro[axis] * I_gain[axis];		// Multiply I-term (Max gain of 127)
    6afa:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6afc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6afe:	2d 91       	ld	r18, X+
    6b00:	3d 91       	ld	r19, X+
    6b02:	4d 91       	ld	r20, X+
    6b04:	5d 91       	ld	r21, X+
    6b06:	bd 8f       	std	Y+29, r27	; 0x1d
    6b08:	ac 8f       	std	Y+28, r26	; 0x1c
    6b0a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    6b0c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    6b0e:	8d 91       	ld	r24, X+
    6b10:	bf 8f       	std	Y+31, r27	; 0x1f
    6b12:	ae 8f       	std	Y+30, r26	; 0x1e
    6b14:	a8 2f       	mov	r26, r24
    6b16:	bb 27       	eor	r27, r27
    6b18:	a7 fd       	sbrc	r26, 7
    6b1a:	b0 95       	com	r27
    6b1c:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <__mulshisi3>
    6b20:	2b 01       	movw	r4, r22
    6b22:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual = PID_Gyro_I_actual >> 5;					// Divide by 32
    6b24:	75 e0       	ldi	r23, 0x05	; 5
    6b26:	75 94       	asr	r7
    6b28:	67 94       	ror	r6
    6b2a:	57 94       	ror	r5
    6b2c:	47 94       	ror	r4
    6b2e:	7a 95       	dec	r23
    6b30:	d1 f7       	brne	.-12     	; 0x6b26 <Calculate_PID+0x1b0>

		// Gyro D-term
		DifferentialGyro = (int16_t)(gyroADC[axis] - lastError[axis]);
    6b32:	aa 89       	ldd	r26, Y+18	; 0x12
    6b34:	bb 89       	ldd	r27, Y+19	; 0x13
    6b36:	8d 91       	ld	r24, X+
    6b38:	9c 91       	ld	r25, X
    6b3a:	11 97       	sbiw	r26, 0x01	; 1
    6b3c:	96 01       	movw	r18, r12
    6b3e:	28 1b       	sub	r18, r24
    6b40:	39 0b       	sbc	r19, r25
		lastError[axis] = gyroADC[axis];
    6b42:	cd 92       	st	X+, r12
    6b44:	dc 92       	st	X, r13
		DifferentialGyro *= D_gain[axis];							// Multiply D-term by up to 127
    6b46:	a8 a1       	ldd	r26, Y+32	; 0x20
    6b48:	b9 a1       	ldd	r27, Y+33	; 0x21
    6b4a:	8d 91       	ld	r24, X+
    6b4c:	b9 a3       	std	Y+33, r27	; 0x21
    6b4e:	a8 a3       	std	Y+32, r26	; 0x20
    6b50:	a8 2f       	mov	r26, r24
    6b52:	bb 27       	eor	r27, r27
    6b54:	a7 fd       	sbrc	r26, 7
    6b56:	b0 95       	com	r27
    6b58:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <__mulhisi3>
		DifferentialGyro = DifferentialGyro << 4;					// Multiply by 16
    6b5c:	f4 e0       	ldi	r31, 0x04	; 4
    6b5e:	66 0f       	add	r22, r22
    6b60:	77 1f       	adc	r23, r23
    6b62:	88 1f       	adc	r24, r24
    6b64:	99 1f       	adc	r25, r25
    6b66:	fa 95       	dec	r31
    6b68:	d1 f7       	brne	.-12     	; 0x6b5e <Calculate_PID+0x1e8>
		//************************************************************
		// I-term output limits
		//************************************************************

		// Maximum 125% limit is full servo throw 
		if (PID_Gyro_I_actual > Config.Raw_I_Limits[axis]) 
    6b6a:	aa a1       	ldd	r26, Y+34	; 0x22
    6b6c:	bb a1       	ldd	r27, Y+35	; 0x23
    6b6e:	2d 91       	ld	r18, X+
    6b70:	3d 91       	ld	r19, X+
    6b72:	4d 91       	ld	r20, X+
    6b74:	5d 91       	ld	r21, X+
    6b76:	bb a3       	std	Y+35, r27	; 0x23
    6b78:	aa a3       	std	Y+34, r26	; 0x22
    6b7a:	24 15       	cp	r18, r4
    6b7c:	35 05       	cpc	r19, r5
    6b7e:	46 05       	cpc	r20, r6
    6b80:	57 05       	cpc	r21, r7
    6b82:	84 f0       	brlt	.+32     	; 0x6ba4 <Calculate_PID+0x22e>
		{
			PID_Gyro_I_temp = Config.Raw_I_Limits[axis];
		}
		else if (PID_Gyro_I_actual < -Config.Raw_I_Limits[axis]) 
    6b84:	cc 24       	eor	r12, r12
    6b86:	dd 24       	eor	r13, r13
    6b88:	76 01       	movw	r14, r12
    6b8a:	c2 1a       	sub	r12, r18
    6b8c:	d3 0a       	sbc	r13, r19
    6b8e:	e4 0a       	sbc	r14, r20
    6b90:	f5 0a       	sbc	r15, r21
    6b92:	a3 01       	movw	r20, r6
    6b94:	92 01       	movw	r18, r4
    6b96:	4c 14       	cp	r4, r12
    6b98:	5d 04       	cpc	r5, r13
    6b9a:	6e 04       	cpc	r6, r14
    6b9c:	7f 04       	cpc	r7, r15
    6b9e:	14 f4       	brge	.+4      	; 0x6ba4 <Calculate_PID+0x22e>
    6ba0:	a7 01       	movw	r20, r14
    6ba2:	96 01       	movw	r18, r12

		//************************************************************
		// Sum Gyro P and D terms and rescale
		//************************************************************
	
		PID_Gyros[axis] = (int16_t)((PID_gyro_temp + PID_Gyro_I_temp + DifferentialGyro) >> PID_SCALE);
    6ba4:	4c 88       	ldd	r4, Y+20	; 0x14
    6ba6:	5d 88       	ldd	r5, Y+21	; 0x15
    6ba8:	6e 88       	ldd	r6, Y+22	; 0x16
    6baa:	7f 88       	ldd	r7, Y+23	; 0x17
    6bac:	42 0e       	add	r4, r18
    6bae:	53 1e       	adc	r5, r19
    6bb0:	64 1e       	adc	r6, r20
    6bb2:	75 1e       	adc	r7, r21
    6bb4:	46 0e       	add	r4, r22
    6bb6:	57 1e       	adc	r5, r23
    6bb8:	68 1e       	adc	r6, r24
    6bba:	79 1e       	adc	r7, r25
    6bbc:	66 e0       	ldi	r22, 0x06	; 6
    6bbe:	75 94       	asr	r7
    6bc0:	67 94       	ror	r6
    6bc2:	57 94       	ror	r5
    6bc4:	47 94       	ror	r4
    6bc6:	6a 95       	dec	r22
    6bc8:	d1 f7       	brne	.-12     	; 0x6bbe <Calculate_PID+0x248>
    6bca:	a8 89       	ldd	r26, Y+16	; 0x10
    6bcc:	b9 89       	ldd	r27, Y+17	; 0x11
    6bce:	4d 92       	st	X+, r4
    6bd0:	5c 92       	st	X, r5
		// Do this by mixing between (no PID) and PID
		// PID gains are not changed but the effect is the same
		//************************************************************

		// If dynamic gain set up 
		if (Config.DynGainSrc != NOCHAN)
    6bd2:	bc a1       	ldd	r27, Y+36	; 0x24
    6bd4:	b8 30       	cpi	r27, 0x08	; 8
    6bd6:	21 f0       	breq	.+8      	; 0x6be0 <Calculate_PID+0x26a>

			// Normalise the PID
			temp32 = (PID_Gyros_32 / (int32_t)Config.DynGain);

			// Cast back to native size
			PID_Gyros[axis] = (int16_t)temp32;
    6bd8:	a8 89       	ldd	r26, Y+16	; 0x10
    6bda:	b9 89       	ldd	r27, Y+17	; 0x11
    6bdc:	1d 92       	st	X+, r1
    6bde:	1c 92       	st	X, r1
		//************************************************************
		// Calculate acc error from angle data (roll and pitch only)
		//************************************************************

		// Autolevel mode (Use IMU to calculate attitude) for roll and pitch only
		if ((Flight_flags & (1 << AutoLevel)) && (axis < YAW)) 
    6be0:	80 91 1c 01 	lds	r24, 0x011C
    6be4:	80 ff       	sbrs	r24, 0
    6be6:	27 c0       	rjmp	.+78     	; 0x6c36 <Calculate_PID+0x2c0>
    6be8:	e2 30       	cpi	r30, 0x02	; 2
    6bea:	29 f1       	breq	.+74     	; 0x6c36 <Calculate_PID+0x2c0>
		{
			PID_acc_temp = angle[axis] - L_trim[axis];				// Offset angle with trim
    6bec:	f5 01       	movw	r30, r10
    6bee:	ee 55       	subi	r30, 0x5E	; 94
    6bf0:	fa 4f       	sbci	r31, 0xFA	; 250
    6bf2:	20 81       	ld	r18, Z
    6bf4:	31 81       	ldd	r19, Z+1	; 0x01
    6bf6:	e1 e0       	ldi	r30, 0x01	; 1
    6bf8:	f0 e0       	ldi	r31, 0x00	; 0
    6bfa:	ec 0f       	add	r30, r28
    6bfc:	fd 1f       	adc	r31, r29
    6bfe:	ea 0d       	add	r30, r10
    6c00:	fb 1d       	adc	r31, r11
    6c02:	80 81       	ld	r24, Z
    6c04:	91 81       	ldd	r25, Z+1	; 0x01
    6c06:	28 1b       	sub	r18, r24
    6c08:	39 0b       	sbc	r19, r25
    6c0a:	ee e0       	ldi	r30, 0x0E	; 14
    6c0c:	f0 e0       	ldi	r31, 0x00	; 0
    6c0e:	ec 0f       	add	r30, r28
    6c10:	fd 1f       	adc	r31, r29
    6c12:	e0 0f       	add	r30, r16
    6c14:	f1 1f       	adc	r31, r17
			PID_acc_temp *= L_gain[axis];							// P-term of accelerometer (Max gain of 127)
    6c16:	a0 81       	ld	r26, Z
    6c18:	bb 27       	eor	r27, r27
    6c1a:	a7 fd       	sbrc	r26, 7
    6c1c:	b0 95       	com	r27
    6c1e:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <__mulhisi3>
			PID_ACCs[axis] = (int16_t)(PID_acc_temp >> 8);			// Accs need much less scaling
    6c22:	bb 27       	eor	r27, r27
    6c24:	97 fd       	sbrc	r25, 7
    6c26:	ba 95       	dec	r27
    6c28:	a9 2f       	mov	r26, r25
    6c2a:	98 2f       	mov	r25, r24
    6c2c:	87 2f       	mov	r24, r23
    6c2e:	f1 01       	movw	r30, r2
    6c30:	91 83       	std	Z+1, r25	; 0x01
    6c32:	80 83       	st	Z, r24
    6c34:	03 c0       	rjmp	.+6      	; 0x6c3c <Calculate_PID+0x2c6>
		}
		else
		{
			PID_ACCs[axis] = 0;										// Ensure these are zeroed when autolevel OFF
    6c36:	d1 01       	movw	r26, r2
    6c38:	1d 92       	st	X+, r1
    6c3a:	1c 92       	st	X, r1
    6c3c:	0f 5f       	subi	r16, 0xFF	; 255
    6c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    6c40:	b4 e0       	ldi	r27, 0x04	; 4
    6c42:	8b 0e       	add	r8, r27
    6c44:	91 1c       	adc	r9, r1
    6c46:	e2 e0       	ldi	r30, 0x02	; 2
    6c48:	ae 0e       	add	r10, r30
    6c4a:	b1 1c       	adc	r11, r1
    6c4c:	f2 e0       	ldi	r31, 0x02	; 2
    6c4e:	2f 0e       	add	r2, r31
    6c50:	31 1c       	adc	r3, r1
    6c52:	28 89       	ldd	r18, Y+16	; 0x10
    6c54:	39 89       	ldd	r19, Y+17	; 0x11
    6c56:	2e 5f       	subi	r18, 0xFE	; 254
    6c58:	3f 4f       	sbci	r19, 0xFF	; 255
    6c5a:	39 8b       	std	Y+17, r19	; 0x11
    6c5c:	28 8b       	std	Y+16, r18	; 0x10
    6c5e:	8a 89       	ldd	r24, Y+18	; 0x12
    6c60:	9b 89       	ldd	r25, Y+19	; 0x13
    6c62:	02 96       	adiw	r24, 0x02	; 2
    6c64:	9b 8b       	std	Y+19, r25	; 0x13
    6c66:	8a 8b       	std	Y+18, r24	; 0x12

	//************************************************************
	// PID loop
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    6c68:	03 30       	cpi	r16, 0x03	; 3
    6c6a:	11 05       	cpc	r17, r1
    6c6c:	09 f0       	breq	.+2      	; 0x6c70 <Calculate_PID+0x2fa>
    6c6e:	f9 ce       	rjmp	.-526    	; 0x6a62 <Calculate_PID+0xec>
			PID_ACCs[axis] = 0;										// Ensure these are zeroed when autolevel OFF
		}
	} // PID loop

	// Offset Autolevel trims in failsafe mode. This is not cumulative.
	if ((Config.FailsafeType == ADVANCED) && (Flight_flags & (1 << FailsafeFlag)))
    6c70:	80 91 16 06 	lds	r24, 0x0616
    6c74:	82 30       	cpi	r24, 0x02	; 2
    6c76:	11 f5       	brne	.+68     	; 0x6cbc <Calculate_PID+0x346>
    6c78:	80 91 1c 01 	lds	r24, 0x011C
    6c7c:	82 ff       	sbrs	r24, 2
    6c7e:	1e c0       	rjmp	.+60     	; 0x6cbc <Calculate_PID+0x346>
	{
		PID_ACCs[ROLL] += (Config.FailsafeAileron * 10);
    6c80:	20 91 19 06 	lds	r18, 0x0619
    6c84:	80 91 bb 07 	lds	r24, 0x07BB
    6c88:	90 91 bc 07 	lds	r25, 0x07BC
    6c8c:	aa e0       	ldi	r26, 0x0A	; 10
    6c8e:	2a 02       	muls	r18, r26
    6c90:	80 0d       	add	r24, r0
    6c92:	91 1d       	adc	r25, r1
    6c94:	11 24       	eor	r1, r1
    6c96:	90 93 bc 07 	sts	0x07BC, r25
    6c9a:	80 93 bb 07 	sts	0x07BB, r24
		PID_ACCs[PITCH] += (Config.FailsafeElevator * 10);
    6c9e:	20 91 18 06 	lds	r18, 0x0618
    6ca2:	80 91 bd 07 	lds	r24, 0x07BD
    6ca6:	90 91 be 07 	lds	r25, 0x07BE
    6caa:	ba e0       	ldi	r27, 0x0A	; 10
    6cac:	2b 02       	muls	r18, r27
    6cae:	80 0d       	add	r24, r0
    6cb0:	91 1d       	adc	r25, r1
    6cb2:	11 24       	eor	r1, r1
    6cb4:	90 93 be 07 	sts	0x07BE, r25
    6cb8:	80 93 bd 07 	sts	0x07BD, r24
	}

}
    6cbc:	a6 96       	adiw	r28, 0x26	; 38
    6cbe:	e2 e1       	ldi	r30, 0x12	; 18
    6cc0:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__epilogue_restores__>

00006cc4 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    6cc4:	e4 e2       	ldi	r30, 0x24	; 36
    6cc6:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    6ccc:	ac 01       	movw	r20, r24
    6cce:	44 0f       	add	r20, r20
    6cd0:	55 1f       	adc	r21, r21
    6cd2:	da 01       	movw	r26, r20
    6cd4:	a6 5a       	subi	r26, 0xA6	; 166
    6cd6:	b8 4f       	sbci	r27, 0xF8	; 248
    6cd8:	2d 91       	ld	r18, X+
    6cda:	3c 91       	ld	r19, X
    6cdc:	61 91       	ld	r22, Z+
    6cde:	71 91       	ld	r23, Z+
    6ce0:	26 1b       	sub	r18, r22
    6ce2:	37 0b       	sbc	r19, r23
    6ce4:	da 01       	movw	r26, r20
    6ce6:	a1 53       	subi	r26, 0x31	; 49
    6ce8:	b8 4f       	sbci	r27, 0xF8	; 248
    6cea:	11 96       	adiw	r26, 0x01	; 1
    6cec:	3c 93       	st	X, r19
    6cee:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    6cf0:	01 96       	adiw	r24, 0x01	; 1
    6cf2:	88 30       	cpi	r24, 0x08	; 8
    6cf4:	91 05       	cpc	r25, r1
    6cf6:	51 f7       	brne	.-44     	; 0x6ccc <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    6cf8:	80 91 5a 07 	lds	r24, 0x075A
    6cfc:	90 91 5b 07 	lds	r25, 0x075B
    6d00:	20 91 24 07 	lds	r18, 0x0724
    6d04:	30 91 25 07 	lds	r19, 0x0725
    6d08:	82 1b       	sub	r24, r18
    6d0a:	93 0b       	sbc	r25, r19
    6d0c:	90 93 ce 07 	sts	0x07CE, r25
    6d10:	80 93 cd 07 	sts	0x07CD, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750;
    6d14:	80 91 5a 07 	lds	r24, 0x075A
    6d18:	90 91 5b 07 	lds	r25, 0x075B
    6d1c:	86 5a       	subi	r24, 0xA6	; 166
    6d1e:	9e 40       	sbci	r25, 0x0E	; 14
    6d20:	90 93 d0 07 	sts	0x07D0, r25
    6d24:	80 93 cf 07 	sts	0x07CF, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    6d28:	80 91 54 07 	lds	r24, 0x0754
    6d2c:	81 30       	cpi	r24, 0x01	; 1
    6d2e:	71 f4       	brne	.+28     	; 0x6d4c <RxGetChannels+0x88>
	{
		// Note we have to reverse the source otherwise we get a double reverse if someone sets up
		// the second aileron as AILERON
		RCinputs[AILERON] = -(RxChannel[AILERON] - Config.RxChannelZeroOffset[AILERON]);
    6d30:	20 91 5c 07 	lds	r18, 0x075C
    6d34:	30 91 5d 07 	lds	r19, 0x075D
    6d38:	80 91 26 07 	lds	r24, 0x0726
    6d3c:	90 91 27 07 	lds	r25, 0x0727
    6d40:	82 1b       	sub	r24, r18
    6d42:	93 0b       	sbc	r25, r19
    6d44:	90 93 d2 07 	sts	0x07D2, r25
    6d48:	80 93 d1 07 	sts	0x07D1, r24
	}

	// Only reverse second aileron if set up
	if ((Config.SecAileronPol == REVERSED) && (Config.FlapChan != NOCHAN))
    6d4c:	80 91 55 07 	lds	r24, 0x0755
    6d50:	81 30       	cpi	r24, 0x01	; 1
    6d52:	d9 f4       	brne	.+54     	; 0x6d8a <RxGetChannels+0xc6>
    6d54:	e0 91 0f 06 	lds	r30, 0x060F
    6d58:	e8 30       	cpi	r30, 0x08	; 8
    6d5a:	b9 f0       	breq	.+46     	; 0x6d8a <RxGetChannels+0xc6>
	{
		// Note we have to reverse the source otherwise we get a double reverse if someone sets up
		// the second aileron as AILERON
		RCinputs[Config.FlapChan] = -(RxChannel[Config.FlapChan] - Config.RxChannelZeroOffset[Config.FlapChan]);
    6d5c:	ff 27       	eor	r31, r31
    6d5e:	e7 fd       	sbrc	r30, 7
    6d60:	f0 95       	com	r31
    6d62:	9f 01       	movw	r18, r30
    6d64:	22 0f       	add	r18, r18
    6d66:	33 1f       	adc	r19, r19
    6d68:	d9 01       	movw	r26, r18
    6d6a:	a6 5a       	subi	r26, 0xA6	; 166
    6d6c:	b8 4f       	sbci	r27, 0xF8	; 248
    6d6e:	4d 91       	ld	r20, X+
    6d70:	5c 91       	ld	r21, X
    6d72:	f9 01       	movw	r30, r18
    6d74:	ec 5d       	subi	r30, 0xDC	; 220
    6d76:	f8 4f       	sbci	r31, 0xF8	; 248
    6d78:	80 81       	ld	r24, Z
    6d7a:	91 81       	ldd	r25, Z+1	; 0x01
    6d7c:	84 1b       	sub	r24, r20
    6d7e:	95 0b       	sbc	r25, r21
    6d80:	f9 01       	movw	r30, r18
    6d82:	e1 53       	subi	r30, 0x31	; 49
    6d84:	f8 4f       	sbci	r31, 0xF8	; 248
    6d86:	91 83       	std	Z+1, r25	; 0x01
    6d88:	80 83       	st	Z, r24
	}

	if (Config.ElevatorPol == REVERSED)
    6d8a:	80 91 56 07 	lds	r24, 0x0756
    6d8e:	81 30       	cpi	r24, 0x01	; 1
    6d90:	59 f4       	brne	.+22     	; 0x6da8 <RxGetChannels+0xe4>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    6d92:	80 91 d3 07 	lds	r24, 0x07D3
    6d96:	90 91 d4 07 	lds	r25, 0x07D4
    6d9a:	91 95       	neg	r25
    6d9c:	81 95       	neg	r24
    6d9e:	91 09       	sbc	r25, r1
    6da0:	90 93 d4 07 	sts	0x07D4, r25
    6da4:	80 93 d3 07 	sts	0x07D3, r24
	}

	if (Config.RudderPol == REVERSED)
    6da8:	80 91 57 07 	lds	r24, 0x0757
    6dac:	81 30       	cpi	r24, 0x01	; 1
    6dae:	59 f4       	brne	.+22     	; 0x6dc6 <RxGetChannels+0x102>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    6db0:	80 91 d5 07 	lds	r24, 0x07D5
    6db4:	90 91 d6 07 	lds	r25, 0x07D6
    6db8:	91 95       	neg	r25
    6dba:	81 95       	neg	r24
    6dbc:	91 09       	sbc	r25, r1
    6dbe:	90 93 d6 07 	sts	0x07D6, r25
    6dc2:	80 93 d5 07 	sts	0x07D5, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[GEAR] + RCinputs[RUDDER] + RCinputs[AUX1];
    6dc6:	80 91 d1 07 	lds	r24, 0x07D1
    6dca:	90 91 d2 07 	lds	r25, 0x07D2
    6dce:	e0 91 d3 07 	lds	r30, 0x07D3
    6dd2:	f0 91 d4 07 	lds	r31, 0x07D4
    6dd6:	60 91 d7 07 	lds	r22, 0x07D7
    6dda:	70 91 d8 07 	lds	r23, 0x07D8
    6dde:	40 91 d5 07 	lds	r20, 0x07D5
    6de2:	50 91 d6 07 	lds	r21, 0x07D6
    6de6:	20 91 d9 07 	lds	r18, 0x07D9
    6dea:	30 91 da 07 	lds	r19, 0x07DA
    6dee:	8e 0f       	add	r24, r30
    6df0:	9f 1f       	adc	r25, r31
    6df2:	86 0f       	add	r24, r22
    6df4:	97 1f       	adc	r25, r23
    6df6:	84 0f       	add	r24, r20
    6df8:	95 1f       	adc	r25, r21
    6dfa:	82 0f       	add	r24, r18
    6dfc:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    6dfe:	20 91 3c 01 	lds	r18, 0x013C
    6e02:	30 91 3d 01 	lds	r19, 0x013D
    6e06:	ac 01       	movw	r20, r24
    6e08:	42 1b       	sub	r20, r18
    6e0a:	53 0b       	sbc	r21, r19
    6e0c:	9a 01       	movw	r18, r20

	// Set RX activity flag
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH)) 
    6e0e:	2b 5f       	subi	r18, 0xFB	; 251
    6e10:	3f 4f       	sbci	r19, 0xFF	; 255
    6e12:	2b 30       	cpi	r18, 0x0B	; 11
    6e14:	31 05       	cpc	r19, r1
    6e16:	20 f0       	brcs	.+8      	; 0x6e20 <RxGetChannels+0x15c>
	{
		Flight_flags |= (1 << RxActivity);
    6e18:	20 91 1c 01 	lds	r18, 0x011C
    6e1c:	28 60       	ori	r18, 0x08	; 8
    6e1e:	03 c0       	rjmp	.+6      	; 0x6e26 <RxGetChannels+0x162>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    6e20:	20 91 1c 01 	lds	r18, 0x011C
    6e24:	27 7f       	andi	r18, 0xF7	; 247
    6e26:	20 93 1c 01 	sts	0x011C, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    6e2a:	10 92 e0 07 	sts	0x07E0, r1
    6e2e:	10 92 df 07 	sts	0x07DF, r1

	OldRxSum = RxSum;
    6e32:	90 93 3d 01 	sts	0x013D, r25
    6e36:	80 93 3c 01 	sts	0x013C, r24
    6e3a:	08 95       	ret

00006e3c <RC_Deadband>:
void RC_Deadband(void)
{
	int16_t	aileron_actual = 0;

	// If flaperons set up 
	if (Config.FlapChan != NOCHAN)
    6e3c:	e0 91 0f 06 	lds	r30, 0x060F
	{
		// Recreate actual roll signal from flaperons
		aileron_actual  = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    6e40:	80 91 d1 07 	lds	r24, 0x07D1
    6e44:	90 91 d2 07 	lds	r25, 0x07D2
void RC_Deadband(void)
{
	int16_t	aileron_actual = 0;

	// If flaperons set up 
	if (Config.FlapChan != NOCHAN)
    6e48:	e8 30       	cpi	r30, 0x08	; 8
    6e4a:	51 f0       	breq	.+20     	; 0x6e60 <RC_Deadband+0x24>
	{
		// Recreate actual roll signal from flaperons
		aileron_actual  = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    6e4c:	ee 0f       	add	r30, r30
    6e4e:	ff 0b       	sbc	r31, r31
    6e50:	e1 53       	subi	r30, 0x31	; 49
    6e52:	f8 4f       	sbci	r31, 0xF8	; 248
    6e54:	20 81       	ld	r18, Z
    6e56:	31 81       	ldd	r19, Z+1	; 0x01
    6e58:	82 0f       	add	r24, r18
    6e5a:	93 1f       	adc	r25, r19
		aileron_actual  = aileron_actual >> 1;
    6e5c:	95 95       	asr	r25
    6e5e:	87 95       	ror	r24
	{
		aileron_actual  = RCinputs[AILERON];
	}

	// Hands-free detection
	if (((aileron_actual < Config.HandsFreetrigger) && (aileron_actual > -Config.HandsFreetrigger))
    6e60:	20 91 75 06 	lds	r18, 0x0675
    6e64:	30 e0       	ldi	r19, 0x00	; 0
    6e66:	82 17       	cp	r24, r18
    6e68:	93 07       	cpc	r25, r19
    6e6a:	cc f4       	brge	.+50     	; 0x6e9e <RC_Deadband+0x62>
    6e6c:	44 27       	eor	r20, r20
    6e6e:	55 27       	eor	r21, r21
    6e70:	42 1b       	sub	r20, r18
    6e72:	53 0b       	sbc	r21, r19
    6e74:	48 17       	cp	r20, r24
    6e76:	59 07       	cpc	r21, r25
    6e78:	94 f4       	brge	.+36     	; 0x6e9e <RC_Deadband+0x62>
	 && ((RCinputs[ELEVATOR]  < Config.HandsFreetrigger) && (RCinputs[ELEVATOR]  > -Config.HandsFreetrigger)))
    6e7a:	80 91 d3 07 	lds	r24, 0x07D3
    6e7e:	90 91 d4 07 	lds	r25, 0x07D4
    6e82:	82 17       	cp	r24, r18
    6e84:	93 07       	cpc	r25, r19
    6e86:	5c f4       	brge	.+22     	; 0x6e9e <RC_Deadband+0x62>
    6e88:	80 91 d3 07 	lds	r24, 0x07D3
    6e8c:	90 91 d4 07 	lds	r25, 0x07D4
    6e90:	48 17       	cp	r20, r24
    6e92:	59 07       	cpc	r21, r25
    6e94:	24 f4       	brge	.+8      	; 0x6e9e <RC_Deadband+0x62>
	{
		Flight_flags |= (1 << HandsFree);
    6e96:	80 91 1c 01 	lds	r24, 0x011C
    6e9a:	80 61       	ori	r24, 0x10	; 16
    6e9c:	03 c0       	rjmp	.+6      	; 0x6ea4 <RC_Deadband+0x68>
	}
	else
	{
		Flight_flags &= ~(1 << HandsFree);
    6e9e:	80 91 1c 01 	lds	r24, 0x011C
    6ea2:	8f 7e       	andi	r24, 0xEF	; 239
    6ea4:	80 93 1c 01 	sts	0x011C, r24
    6ea8:	08 95       	ret

00006eaa <CenterSticks>:
	}
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    6eaa:	a0 e1       	ldi	r26, 0x10	; 16
    6eac:	b0 e0       	ldi	r27, 0x00	; 0
    6eae:	eb e5       	ldi	r30, 0x5B	; 91
    6eb0:	f7 e3       	ldi	r31, 0x37	; 55
    6eb2:	0c 94 39 3e 	jmp	0x7c72	; 0x7c72 <__prologue_saves__+0x1c>
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    6eb6:	8e 01       	movw	r16, r28
    6eb8:	0f 5f       	subi	r16, 0xFF	; 255
    6eba:	1f 4f       	sbci	r17, 0xFF	; 255
    6ebc:	80 e1       	ldi	r24, 0x10	; 16
    6ebe:	d8 01       	movw	r26, r16
    6ec0:	1d 92       	st	X+, r1
    6ec2:	8a 95       	dec	r24
    6ec4:	e9 f7       	brne	.-6      	; 0x6ec0 <CenterSticks+0x16>
    6ec6:	68 e0       	ldi	r22, 0x08	; 8
	}
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    6ec8:	d8 01       	movw	r26, r16
    6eca:	80 e0       	ldi	r24, 0x00	; 0
    6ecc:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
	{
		for (j=0;j<MAX_RC_CHANNELS;j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    6ece:	9c 01       	movw	r18, r24
    6ed0:	22 0f       	add	r18, r18
    6ed2:	33 1f       	adc	r19, r19
    6ed4:	26 5a       	subi	r18, 0xA6	; 166
    6ed6:	38 4f       	sbci	r19, 0xF8	; 248
    6ed8:	f9 01       	movw	r30, r18
    6eda:	40 81       	ld	r20, Z
    6edc:	51 81       	ldd	r21, Z+1	; 0x01
    6ede:	2d 91       	ld	r18, X+
    6ee0:	3c 91       	ld	r19, X
    6ee2:	11 97       	sbiw	r26, 0x01	; 1
    6ee4:	24 0f       	add	r18, r20
    6ee6:	35 1f       	adc	r19, r21
    6ee8:	2d 93       	st	X+, r18
    6eea:	3d 93       	st	X+, r19
    6eec:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
	{
		for (j=0;j<MAX_RC_CHANNELS;j++)
    6eee:	88 30       	cpi	r24, 0x08	; 8
    6ef0:	91 05       	cpc	r25, r1
    6ef2:	69 f7       	brne	.-38     	; 0x6ece <CenterSticks+0x24>
    6ef4:	ff e7       	ldi	r31, 0x7F	; 127
    6ef6:	2a e1       	ldi	r18, 0x1A	; 26
    6ef8:	86 e0       	ldi	r24, 0x06	; 6
    6efa:	f1 50       	subi	r31, 0x01	; 1
    6efc:	20 40       	sbci	r18, 0x00	; 0
    6efe:	80 40       	sbci	r24, 0x00	; 0
    6f00:	e1 f7       	brne	.-8      	; 0x6efa <CenterSticks+0x50>
    6f02:	00 c0       	rjmp	.+0      	; 0x6f04 <CenterSticks+0x5a>
    6f04:	00 00       	nop
    6f06:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
    6f08:	f9 f6       	brne	.-66     	; 0x6ec8 <CenterSticks+0x1e>
    6f0a:	a4 e2       	ldi	r26, 0x24	; 36
    6f0c:	b7 e0       	ldi	r27, 0x07	; 7
    6f0e:	9e 01       	movw	r18, r28
    6f10:	2f 5e       	subi	r18, 0xEF	; 239
    6f12:	3f 4f       	sbci	r19, 0xFF	; 255
    6f14:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    6f16:	81 91       	ld	r24, Z+
    6f18:	91 91       	ld	r25, Z+
    6f1a:	04 96       	adiw	r24, 0x04	; 4
    6f1c:	43 e0       	ldi	r20, 0x03	; 3
    6f1e:	96 95       	lsr	r25
    6f20:	87 95       	ror	r24
    6f22:	4a 95       	dec	r20
    6f24:	e1 f7       	brne	.-8      	; 0x6f1e <CenterSticks+0x74>
    6f26:	8d 93       	st	X+, r24
    6f28:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    6f2a:	e2 17       	cp	r30, r18
    6f2c:	f3 07       	cpc	r31, r19
    6f2e:	99 f7       	brne	.-26     	; 0x6f16 <CenterSticks+0x6c>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    6f30:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
}
    6f34:	60 96       	adiw	r28, 0x10	; 16
    6f36:	e4 e0       	ldi	r30, 0x04	; 4
    6f38:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__epilogue_restores__+0x1c>

00006f3c <SetFailsafe>:

// Set failsafe position
void SetFailsafe(void)		
{
    6f3c:	0f 93       	push	r16
    6f3e:	1f 93       	push	r17
    6f40:	cf 93       	push	r28
    6f42:	df 93       	push	r29
	uint8_t i;
	int16_t failsafe;
	int16_t temp;

	// Update latest values of each channel
	ProcessMixer();
    6f44:	0e 94 11 30 	call	0x6022	; 0x6022 <ProcessMixer>
    6f48:	e4 e8       	ldi	r30, 0x84	; 132
    6f4a:	f6 e0       	ldi	r31, 0x06	; 6
    6f4c:	cf ec       	ldi	r28, 0xCF	; 207
    6f4e:	d5 e0       	ldi	r29, 0x05	; 5
    6f50:	2c e1       	ldi	r18, 0x1C	; 28
    6f52:	37 e0       	ldi	r19, 0x07	; 7
		// Set primary failsafe point
		temp = Config.Channel[i].value;		// Mixer values are +/-1250
		Config.Limits[i].failsafe = temp;

		// Round and rescale and set noob-friendly mixer failsafe percentages
		failsafe = (temp + (int16_t)5) / (int16_t)10;
    6f54:	0a e0       	ldi	r16, 0x0A	; 10
    6f56:	10 e0       	ldi	r17, 0x00	; 0

	// Update Config settings based on servo position
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Set primary failsafe point
		temp = Config.Channel[i].value;		// Mixer values are +/-1250
    6f58:	80 81       	ld	r24, Z
    6f5a:	91 81       	ldd	r25, Z+1	; 0x01
		Config.Limits[i].failsafe = temp;
    6f5c:	99 83       	std	Y+1, r25	; 0x01
    6f5e:	88 83       	st	Y, r24

		// Round and rescale and set noob-friendly mixer failsafe percentages
		failsafe = (temp + (int16_t)5) / (int16_t)10;
    6f60:	05 96       	adiw	r24, 0x05	; 5
    6f62:	b8 01       	movw	r22, r16
    6f64:	0e 94 c1 3d 	call	0x7b82	; 0x7b82 <__divmodhi4>
		
		// Bounds check 
		if (failsafe > 125)
    6f68:	6e 37       	cpi	r22, 0x7E	; 126
    6f6a:	71 05       	cpc	r23, r1
    6f6c:	3c f4       	brge	.+14     	; 0x6f7c <SetFailsafe+0x40>
		{
			failsafe = 125;
		}
		if (failsafe < -125)
    6f6e:	63 38       	cpi	r22, 0x83	; 131
    6f70:	8f ef       	ldi	r24, 0xFF	; 255
    6f72:	78 07       	cpc	r23, r24
    6f74:	2c f4       	brge	.+10     	; 0x6f80 <SetFailsafe+0x44>
		{
			failsafe = -125;
    6f76:	63 e8       	ldi	r22, 0x83	; 131
    6f78:	7f ef       	ldi	r23, 0xFF	; 255
    6f7a:	02 c0       	rjmp	.+4      	; 0x6f80 <SetFailsafe+0x44>
		failsafe = (temp + (int16_t)5) / (int16_t)10;
		
		// Bounds check 
		if (failsafe > 125)
		{
			failsafe = 125;
    6f7c:	6d e7       	ldi	r22, 0x7D	; 125
    6f7e:	70 e0       	ldi	r23, 0x00	; 0
		{
			failsafe = -125;
		}		
		
		// Save as percentage
		Config.Failsafe[i] = failsafe;
    6f80:	d9 01       	movw	r26, r18
    6f82:	6d 93       	st	X+, r22
    6f84:	9d 01       	movw	r18, r26
    6f86:	3f 96       	adiw	r30, 0x0f	; 15
    6f88:	28 96       	adiw	r28, 0x08	; 8

	// Update latest values of each channel
	ProcessMixer();

	// Update Config settings based on servo position
	for (i = 0; i < MAX_OUTPUTS; i++)
    6f8a:	b6 e0       	ldi	r27, 0x06	; 6
    6f8c:	ec 3f       	cpi	r30, 0xFC	; 252
    6f8e:	fb 07       	cpc	r31, r27
    6f90:	19 f7       	brne	.-58     	; 0x6f58 <SetFailsafe+0x1c>
		
		// Save as percentage
		Config.Failsafe[i] = failsafe;
	}

	Save_Config_to_EEPROM();
    6f92:	0e 94 b2 14 	call	0x2964	; 0x2964 <Save_Config_to_EEPROM>
}
    6f96:	df 91       	pop	r29
    6f98:	cf 91       	pop	r28
    6f9a:	1f 91       	pop	r17
    6f9c:	0f 91       	pop	r16
    6f9e:	08 95       	ret

00006fa0 <Process_servos>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void Process_servos(void)
{
    6fa0:	cf 93       	push	r28
    6fa2:	df 93       	push	r29
    6fa4:	a4 e8       	ldi	r26, 0x84	; 132
    6fa6:	b6 e0       	ldi	r27, 0x06	; 6
    6fa8:	4c ef       	ldi	r20, 0xFC	; 252
    6faa:	56 e0       	ldi	r21, 0x06	; 6
    6fac:	eb ec       	ldi	r30, 0xCB	; 203
    6fae:	f5 e0       	ldi	r31, 0x05	; 5
    6fb0:	20 e0       	ldi	r18, 0x00	; 0
    6fb2:	30 e0       	ldi	r19, 0x00	; 0
	// Formerly in UpdateServos()
	// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Servo reverse and trim
		temp = Config.Channel[i].value;
    6fb4:	8d 91       	ld	r24, X+
    6fb6:	9c 91       	ld	r25, X
    6fb8:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel
		if (Config.Servo_reverse[i] == ON)
    6fba:	ea 01       	movw	r28, r20
    6fbc:	69 91       	ld	r22, Y+
    6fbe:	ae 01       	movw	r20, r28
    6fc0:	61 30       	cpi	r22, 0x01	; 1
    6fc2:	19 f4       	brne	.+6      	; 0x6fca <Process_servos+0x2a>
		{
			temp = -temp;
    6fc4:	91 95       	neg	r25
    6fc6:	81 95       	neg	r24
    6fc8:	91 09       	sbc	r25, r1
		}

		// Add offset value to restore to system compatible value
		// +/-1250 --> 2500~5000
		temp += 3750;
    6fca:	ec 01       	movw	r28, r24
    6fcc:	ca 55       	subi	r28, 0x5A	; 90
    6fce:	d1 4f       	sbci	r29, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp > Config.Limits[i].maximum)
    6fd0:	82 81       	ldd	r24, Z+2	; 0x02
    6fd2:	93 81       	ldd	r25, Z+3	; 0x03
    6fd4:	8c 17       	cp	r24, r28
    6fd6:	9d 07       	cpc	r25, r29
    6fd8:	3c f0       	brlt	.+14     	; 0x6fe8 <Process_servos+0x48>
		{
			temp = Config.Limits[i].maximum;
		}

		else if (temp < Config.Limits[i].minimum)
    6fda:	60 81       	ld	r22, Z
    6fdc:	71 81       	ldd	r23, Z+1	; 0x01
    6fde:	ce 01       	movw	r24, r28
    6fe0:	c6 17       	cp	r28, r22
    6fe2:	d7 07       	cpc	r29, r23
    6fe4:	0c f4       	brge	.+2      	; 0x6fe8 <Process_servos+0x48>
    6fe6:	cb 01       	movw	r24, r22
		{
			temp = Config.Limits[i].minimum;
		}
		
		// Save back to servo array
		ServoOut[i] = temp;
    6fe8:	e9 01       	movw	r28, r18
    6fea:	cc 0f       	add	r28, r28
    6fec:	dd 1f       	adc	r29, r29
    6fee:	cf 51       	subi	r28, 0x1F	; 31
    6ff0:	d8 4f       	sbci	r29, 0xF8	; 248
    6ff2:	99 83       	std	Y+1, r25	; 0x01
    6ff4:	88 83       	st	Y, r24
    6ff6:	2f 5f       	subi	r18, 0xFF	; 255
    6ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    6ffa:	1f 96       	adiw	r26, 0x0f	; 15
    6ffc:	38 96       	adiw	r30, 0x08	; 8
	int16_t temp = 0;
	uint8_t i = 0;
	
	// Formerly in UpdateServos()
	// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    6ffe:	28 30       	cpi	r18, 0x08	; 8
    7000:	31 05       	cpc	r19, r1
    7002:	c1 f6       	brne	.-80     	; 0x6fb4 <Process_servos+0x14>
		}
		
		// Save back to servo array
		ServoOut[i] = temp;
	}
}
    7004:	df 91       	pop	r29
    7006:	cf 91       	pop	r28
    7008:	08 95       	ret

0000700a <init_uart>:
#define SPEKTRUM_CHNUM	7

// Initialise UART with adjusted bit rate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    700a:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    700c:	80 91 c1 00 	lds	r24, 0x00C1
    7010:	8f 77       	andi	r24, 0x7F	; 127
    7012:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    7016:	80 91 c0 00 	lds	r24, 0x00C0
    701a:	87 ff       	sbrs	r24, 7
    701c:	05 c0       	rjmp	.+10     	; 0x7028 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    701e:	80 91 c6 00 	lds	r24, 0x00C6
    7022:	80 93 c2 00 	sts	0x00C2, r24
    7026:	f7 cf       	rjmp	.-18     	; 0x7016 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    7028:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    702c:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    7030:	86 e0       	ldi	r24, 0x06	; 6
    7032:	80 93 c2 00 	sts	0x00C2, r24
	UCSR1A = 0; // U2X = 0, no master mode, flags cleared
    7036:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = 0; // Clear flags, disable tx/rx, 8 bits
    703a:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C = 6; // 8N1
    703e:	80 93 ca 00 	sts	0x00CA, r24

	// Setup RX side
	switch (Config.RxModeIn)
    7042:	80 91 0b 06 	lds	r24, 0x060B
    7046:	81 30       	cpi	r24, 0x01	; 1
    7048:	a9 f0       	breq	.+42     	; 0x7074 <init_uart+0x6a>
    704a:	34 f4       	brge	.+12     	; 0x7058 <init_uart+0x4e>
    704c:	81 11       	cpse	r24, r1
    704e:	4d c0       	rjmp	.+154    	; 0x70ea <init_uart+0xe0>
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in CPPM modes
    7050:	80 91 c1 00 	lds	r24, 0x00C1
    7054:	8f 7e       	andi	r24, 0xEF	; 239
    7056:	47 c0       	rjmp	.+142    	; 0x70e6 <init_uart+0xdc>
	UCSR1A = 0; // U2X = 0, no master mode, flags cleared
	UCSR1B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR1C = 6; // 8N1

	// Setup RX side
	switch (Config.RxModeIn)
    7058:	82 30       	cpi	r24, 0x02	; 2
    705a:	49 f1       	breq	.+82     	; 0x70ae <init_uart+0xa4>
    705c:	83 30       	cpi	r24, 0x03	; 3
    705e:	09 f0       	breq	.+2      	; 0x7062 <init_uart+0x58>
    7060:	44 c0       	rjmp	.+136    	; 0x70ea <init_uart+0xe0>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    7062:	80 91 c0 00 	lds	r24, 0x00C0
    7066:	8d 7f       	andi	r24, 0xFD	; 253
    7068:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    706c:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_XTREME & 0xff;		// 0x04
    7070:	84 e0       	ldi	r24, 0x04	; 4
    7072:	25 c0       	rjmp	.+74     	; 0x70be <init_uart+0xb4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    7074:	80 91 c0 00 	lds	r24, 0x00C0
    7078:	82 60       	ori	r24, 0x02	; 2
    707a:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    707e:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    7082:	88 e1       	ldi	r24, 0x18	; 24
    7084:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    7088:	80 91 c1 00 	lds	r24, 0x00C1
    708c:	80 61       	ori	r24, 0x10	; 16
    708e:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    7092:	80 91 c2 00 	lds	r24, 0x00C2
    7096:	88 60       	ori	r24, 0x08	; 8
    7098:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    709c:	80 91 c2 00 	lds	r24, 0x00C2
    70a0:	8f 7e       	andi	r24, 0xEF	; 239
    70a2:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    70a6:	80 91 c2 00 	lds	r24, 0x00C2
    70aa:	80 62       	ori	r24, 0x20	; 32
    70ac:	17 c0       	rjmp	.+46     	; 0x70dc <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    70ae:	80 91 c0 00 	lds	r24, 0x00C0
    70b2:	8d 7f       	andi	r24, 0xFD	; 253
    70b4:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    70b8:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    70bc:	8a e0       	ldi	r24, 0x0A	; 10
    70be:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    70c2:	80 91 c1 00 	lds	r24, 0x00C1
    70c6:	80 61       	ori	r24, 0x10	; 16
    70c8:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    70cc:	80 91 c2 00 	lds	r24, 0x00C2
    70d0:	87 7f       	andi	r24, 0xF7	; 247
    70d2:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    70d6:	80 91 c2 00 	lds	r24, 0x00C2
    70da:	8f 7e       	andi	r24, 0xEF	; 239
    70dc:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    70e0:	80 91 c1 00 	lds	r24, 0x00C1
    70e4:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in CPPM modes
    70e6:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Setup TX side
	switch (Config.RxModeOut)
    70ea:	80 91 0c 06 	lds	r24, 0x060C
    70ee:	82 30       	cpi	r24, 0x02	; 2
    70f0:	59 f1       	breq	.+86     	; 0x7148 <init_uart+0x13e>
    70f2:	83 30       	cpi	r24, 0x03	; 3
    70f4:	01 f1       	breq	.+64     	; 0x7136 <init_uart+0x12c>
    70f6:	81 30       	cpi	r24, 0x01	; 1
    70f8:	09 f0       	breq	.+2      	; 0x70fc <init_uart+0xf2>
    70fa:	3f c0       	rjmp	.+126    	; 0x717a <init_uart+0x170>

		break;
		
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS:
		UCSR1A |=  (1 << U2X1);						// Need to set the 2x flag
    70fc:	80 91 c8 00 	lds	r24, 0x00C8
    7100:	82 60       	ori	r24, 0x02	; 2
    7102:	80 93 c8 00 	sts	0x00C8, r24
		UBRR1H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%
    7106:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    710a:	88 e1       	ldi	r24, 0x18	; 24
    710c:	80 93 cc 00 	sts	0x00CC, r24
		UCSR1B |=  (1 << TXEN1);					// Enable transmitter
    7110:	80 91 c9 00 	lds	r24, 0x00C9
    7114:	88 60       	ori	r24, 0x08	; 8
    7116:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C |=  (1 << USBS1); 					// 2 stop bits
    711a:	80 91 ca 00 	lds	r24, 0x00CA
    711e:	88 60       	ori	r24, 0x08	; 8
    7120:	80 93 ca 00 	sts	0x00CA, r24
		UCSR1C &= ~(1 << UPM10); 					// Even parity
    7124:	80 91 ca 00 	lds	r24, 0x00CA
    7128:	8f 7e       	andi	r24, 0xEF	; 239
    712a:	80 93 ca 00 	sts	0x00CA, r24
		UCSR1C |=  (1 << UPM11);
    712e:	80 91 ca 00 	lds	r24, 0x00CA
    7132:	80 62       	ori	r24, 0x20	; 32
    7134:	20 c0       	rjmp	.+64     	; 0x7176 <init_uart+0x16c>
	// Setup TX side
	switch (Config.RxModeOut)
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
		UCSR1A &= ~(1 << U2X1);						// Clear the 2x flag
    7136:	80 91 c8 00 	lds	r24, 0x00C8
    713a:	8d 7f       	andi	r24, 0xFD	; 253
    713c:	80 93 c8 00 	sts	0x00C8, r24
		UBRR1H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    7140:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L  =  BAUD_PRESCALE_XTREME & 0xff;		// 0x04
    7144:	84 e0       	ldi	r24, 0x04	; 4
    7146:	08 c0       	rjmp	.+16     	; 0x7158 <init_uart+0x14e>
		UCSR1C |=  (1 << UPM11);
		break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM:
		UCSR1A &=  ~(1 << U2X1);					// Clear the 2x flag
    7148:	80 91 c8 00 	lds	r24, 0x00C8
    714c:	8d 7f       	andi	r24, 0xFD	; 253
    714e:	80 93 c8 00 	sts	0x00C8, r24
		UBRR1H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    7152:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)
    7156:	8a e0       	ldi	r24, 0x0A	; 10
    7158:	80 93 cc 00 	sts	0x00CC, r24
		UCSR1B |= 	(1 << TXEN1);					// Enable transmitter
    715c:	80 91 c9 00 	lds	r24, 0x00C9
    7160:	88 60       	ori	r24, 0x08	; 8
    7162:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C &=  ~(1 << USBS1); 					// 1 stop bit
    7166:	80 91 ca 00 	lds	r24, 0x00CA
    716a:	87 7f       	andi	r24, 0xF7	; 247
    716c:	80 93 ca 00 	sts	0x00CA, r24
		UCSR1C &=  ~(1 << UPM10) | 					// No parity
    7170:	80 91 ca 00 	lds	r24, 0x00CA
    7174:	8f 7e       	andi	r24, 0xEF	; 239
    7176:	80 93 ca 00 	sts	0x00CA, r24
		default:
		break;
	}

	// Re-enable interrupts
	sei();
    717a:	78 94       	sei
    717c:	08 95       	ret

0000717e <USART_Transmit>:

// USART_Transmit routine straight from the Atmel datasheet
void USART_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR1A & (1<<UDRE1)));
    717e:	90 91 c8 00 	lds	r25, 0x00C8
    7182:	95 ff       	sbrs	r25, 5
    7184:	fc cf       	rjmp	.-8      	; 0x717e <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR1 = data;
    7186:	80 93 ce 00 	sts	0x00CE, r24
    718a:	08 95       	ret

0000718c <TransmitData>:
}

// Transmit data packet based on the TX mode
void TransmitData(void)
{
    718c:	a0 e0       	ldi	r26, 0x00	; 0
    718e:	b0 e0       	ldi	r27, 0x00	; 0
    7190:	ec ec       	ldi	r30, 0xCC	; 204
    7192:	f8 e3       	ldi	r31, 0x38	; 56
    7194:	0c 94 34 3e 	jmp	0x7c68	; 0x7c68 <__prologue_saves__+0x12>
	//*	2000	= 2000us
	//*	2250 	= 2250us
	//*
	//************************************************************

	if (Config.RxModeOut == XTREME)
    7198:	20 91 0c 06 	lds	r18, 0x060C
    719c:	23 30       	cpi	r18, 0x03	; 3
    719e:	09 f0       	breq	.+2      	; 0x71a2 <TransmitData+0x16>
    71a0:	d4 c0       	rjmp	.+424    	; 0x734a <TransmitData+0x1be>
	{
		checksum = 0;					// Reset checksum
    71a2:	10 92 a5 07 	sts	0x07A5, r1
    71a6:	10 92 a4 07 	sts	0x07A4, r1

		Xtreme_Chanmask |= 0x00FF;		// Always transmit at least the bottom 8 channels. 
    71aa:	80 91 7c 07 	lds	r24, 0x077C
    71ae:	90 91 7d 07 	lds	r25, 0x077D
    71b2:	8f 6f       	ori	r24, 0xFF	; 255
    71b4:	90 93 7d 07 	sts	0x077D, r25
    71b8:	80 93 7c 07 	sts	0x077C, r24

		// Fake frame loss data if necessary
		if (Config.RxModeIn != XTREME)
    71bc:	80 91 0b 06 	lds	r24, 0x060B
    71c0:	83 30       	cpi	r24, 0x03	; 3
    71c2:	61 f0       	breq	.+24     	; 0x71dc <TransmitData+0x50>
		{		
			Xtreme_Flags = 0;
    71c4:	10 92 7f 07 	sts	0x077F, r1
			Xtreme_RSS = 0;
    71c8:	10 92 83 07 	sts	0x0783, r1
		}
		
		// S.Bus will always be transmitted as 16 channels
		// Xtreme and Spektrum will know how many channels to transmit
		if (Config.RxModeIn == SBUS)
    71cc:	81 30       	cpi	r24, 0x01	; 1
    71ce:	31 f4       	brne	.+12     	; 0x71dc <TransmitData+0x50>
		{
			Xtreme_Chanmask = 0xFFFF;
    71d0:	8f ef       	ldi	r24, 0xFF	; 255
    71d2:	9f ef       	ldi	r25, 0xFF	; 255
    71d4:	90 93 7d 07 	sts	0x077D, r25
    71d8:	80 93 7c 07 	sts	0x077C, r24
		}
			
		// Transmit Xtreme data
		checksum += Xtreme_Flags;
    71dc:	80 91 a4 07 	lds	r24, 0x07A4
    71e0:	90 91 a5 07 	lds	r25, 0x07A5
    71e4:	20 91 7f 07 	lds	r18, 0x077F
    71e8:	82 0f       	add	r24, r18
    71ea:	91 1d       	adc	r25, r1
    71ec:	90 93 a5 07 	sts	0x07A5, r25
    71f0:	80 93 a4 07 	sts	0x07A4, r24
		USART_Transmit(Xtreme_Flags);	// Copy of flags byte from input
    71f4:	80 91 7f 07 	lds	r24, 0x077F
    71f8:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
		
		checksum += Xtreme_RSS;
    71fc:	80 91 a4 07 	lds	r24, 0x07A4
    7200:	90 91 a5 07 	lds	r25, 0x07A5
    7204:	20 91 83 07 	lds	r18, 0x0783
    7208:	82 0f       	add	r24, r18
    720a:	91 1d       	adc	r25, r1
    720c:	90 93 a5 07 	sts	0x07A5, r25
    7210:	80 93 a4 07 	sts	0x07A4, r24
		USART_Transmit(Xtreme_RSS);		// Copy of RSS byte from input
    7214:	80 91 83 07 	lds	r24, 0x0783
    7218:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
		
		temp = Xtreme_Chanmask >> 8;	// High byte of channel mask
    721c:	80 91 7c 07 	lds	r24, 0x077C
    7220:	90 91 7d 07 	lds	r25, 0x077D
    7224:	89 2f       	mov	r24, r25
    7226:	99 27       	eor	r25, r25
		checksum += temp;
    7228:	20 91 a4 07 	lds	r18, 0x07A4
    722c:	30 91 a5 07 	lds	r19, 0x07A5
    7230:	28 0f       	add	r18, r24
    7232:	39 1f       	adc	r19, r25
    7234:	30 93 a5 07 	sts	0x07A5, r19
    7238:	20 93 a4 07 	sts	0x07A4, r18
		USART_Transmit(temp);
    723c:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
		
		temp = 0xFF;					// Low byte of channel mask - always set to show CH1 to CH8
		Xtreme_Chanmask |= temp;		// Re-write the CH1 to CH8 bits of the original channel mask
    7240:	80 91 7c 07 	lds	r24, 0x077C
    7244:	90 91 7d 07 	lds	r25, 0x077D
    7248:	8f 6f       	ori	r24, 0xFF	; 255
    724a:	90 93 7d 07 	sts	0x077D, r25
    724e:	80 93 7c 07 	sts	0x077C, r24
		
		checksum += temp;
    7252:	80 91 a4 07 	lds	r24, 0x07A4
    7256:	90 91 a5 07 	lds	r25, 0x07A5
    725a:	81 50       	subi	r24, 0x01	; 1
    725c:	9f 4f       	sbci	r25, 0xFF	; 255
    725e:	90 93 a5 07 	sts	0x07A5, r25
    7262:	80 93 a4 07 	sts	0x07A4, r24
		USART_Transmit(temp);
    7266:	8f ef       	ldi	r24, 0xFF	; 255
    7268:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
    726c:	c0 e0       	ldi	r28, 0x00	; 0
    726e:	d0 e0       	ldi	r29, 0x00	; 0
		// Work out which channel the data is intended for from the mask bit position
		// This way the outgoing data will match the ingoing...
		for (j = 0; j < 16; j++)
		{
			// If there is a bit set, allocate channel data for it
			if (Xtreme_Chanmask & (1 << j))
    7270:	ee 24       	eor	r14, r14
    7272:	e3 94       	inc	r14
    7274:	f1 2c       	mov	r15, r1
    7276:	20 91 7c 07 	lds	r18, 0x077C
    727a:	30 91 7d 07 	lds	r19, 0x077D
    727e:	c7 01       	movw	r24, r14
    7280:	0c 2e       	mov	r0, r28
    7282:	02 c0       	rjmp	.+4      	; 0x7288 <TransmitData+0xfc>
    7284:	88 0f       	add	r24, r24
    7286:	99 1f       	adc	r25, r25
    7288:	0a 94       	dec	r0
    728a:	e2 f7       	brpl	.-8      	; 0x7284 <TransmitData+0xf8>
    728c:	82 23       	and	r24, r18
    728e:	93 23       	and	r25, r19
    7290:	89 2b       	or	r24, r25
    7292:	09 f4       	brne	.+2      	; 0x7296 <TransmitData+0x10a>
    7294:	4e c0       	rjmp	.+156    	; 0x7332 <TransmitData+0x1a6>
			{
				// First eight channels come from ServoOut[]
				if (j < MAX_RC_CHANNELS)
    7296:	c8 30       	cpi	r28, 0x08	; 8
    7298:	38 f5       	brcc	.+78     	; 0x72e8 <TransmitData+0x15c>
				{
					// Remove system offset
					itemp16 = ServoOut[j];
    729a:	fe 01       	movw	r30, r28
    729c:	ee 0f       	add	r30, r30
    729e:	ff 1f       	adc	r31, r31
    72a0:	ef 51       	subi	r30, 0x1F	; 31
    72a2:	f8 4f       	sbci	r31, 0xF8	; 248
    72a4:	00 81       	ld	r16, Z
    72a6:	11 81       	ldd	r17, Z+1	; 0x01
					itemp16 -= 3750;
    72a8:	06 5a       	subi	r16, 0xA6	; 166
    72aa:	1e 40       	sbci	r17, 0x0E	; 14
					
					// Conversion factor x0.5 
					itemp16 = (itemp16 >> 1);
    72ac:	15 95       	asr	r17
    72ae:	07 95       	ror	r16
					
					// Add in Extreme offset
					itemp16 += 1500;
    72b0:	04 52       	subi	r16, 0x24	; 36
    72b2:	1a 4f       	sbci	r17, 0xFA	; 250
					temp16 = itemp16;
					
					// Send bytes				
					temp = (uint8_t)(temp16 >> 8);		// High byte first
    72b4:	81 2f       	mov	r24, r17
    72b6:	99 27       	eor	r25, r25
					checksum +=	temp;					// Add to checksum
    72b8:	20 91 a4 07 	lds	r18, 0x07A4
    72bc:	30 91 a5 07 	lds	r19, 0x07A5
    72c0:	28 0f       	add	r18, r24
    72c2:	39 1f       	adc	r19, r25
    72c4:	30 93 a5 07 	sts	0x07A5, r19
    72c8:	20 93 a4 07 	sts	0x07A4, r18
					USART_Transmit(temp);
    72cc:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>

					temp = (uint8_t)(temp16 & 0xFF);	// Low byte next
					checksum +=	temp;					// Add to checksum
    72d0:	80 91 a4 07 	lds	r24, 0x07A4
    72d4:	90 91 a5 07 	lds	r25, 0x07A5
    72d8:	80 0f       	add	r24, r16
    72da:	91 1d       	adc	r25, r1
    72dc:	90 93 a5 07 	sts	0x07A5, r25
    72e0:	80 93 a4 07 	sts	0x07A4, r24
					USART_Transmit(temp);
    72e4:	80 2f       	mov	r24, r16
    72e6:	23 c0       	rjmp	.+70     	; 0x732e <TransmitData+0x1a2>
				}
				// Extra channels come from ExtChannel[]
				else if (j < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
				{
					temp = (uint8_t)(ExtChannel[j - MAX_RC_CHANNELS] >> 8);	// High byte first
    72e8:	8e 01       	movw	r16, r28
    72ea:	00 0f       	add	r16, r16
    72ec:	11 1f       	adc	r17, r17
    72ee:	05 5a       	subi	r16, 0xA5	; 165
    72f0:	18 4f       	sbci	r17, 0xF8	; 248
    72f2:	d8 01       	movw	r26, r16
    72f4:	8d 91       	ld	r24, X+
    72f6:	9c 91       	ld	r25, X
    72f8:	89 2f       	mov	r24, r25
    72fa:	99 27       	eor	r25, r25
					checksum +=	temp;										// Add to checksum
    72fc:	20 91 a4 07 	lds	r18, 0x07A4
    7300:	30 91 a5 07 	lds	r19, 0x07A5
    7304:	28 0f       	add	r18, r24
    7306:	39 1f       	adc	r19, r25
    7308:	30 93 a5 07 	sts	0x07A5, r19
    730c:	20 93 a4 07 	sts	0x07A4, r18
					USART_Transmit(temp);
    7310:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>

					temp = (uint8_t)(ExtChannel[j - MAX_RC_CHANNELS] & 0xFF);	// Low byte next
    7314:	f8 01       	movw	r30, r16
    7316:	80 81       	ld	r24, Z
    7318:	91 81       	ldd	r25, Z+1	; 0x01
					checksum +=	temp;										// Add to checksum
    731a:	20 91 a4 07 	lds	r18, 0x07A4
    731e:	30 91 a5 07 	lds	r19, 0x07A5
    7322:	28 0f       	add	r18, r24
    7324:	31 1d       	adc	r19, r1
    7326:	30 93 a5 07 	sts	0x07A5, r19
    732a:	20 93 a4 07 	sts	0x07A4, r18
					USART_Transmit(temp);					
    732e:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
    7332:	21 96       	adiw	r28, 0x01	; 1
		checksum += temp;
		USART_Transmit(temp);

		// Work out which channel the data is intended for from the mask bit position
		// This way the outgoing data will match the ingoing...
		for (j = 0; j < 16; j++)
    7334:	c0 31       	cpi	r28, 0x10	; 16
    7336:	d1 05       	cpc	r29, r1
    7338:	09 f0       	breq	.+2      	; 0x733c <TransmitData+0x1b0>
    733a:	9d cf       	rjmp	.-198    	; 0x7276 <TransmitData+0xea>
					USART_Transmit(temp);					
				}
			}
		}
		
		temp = (uint8_t)(checksum & 0xFF);
    733c:	80 91 a4 07 	lds	r24, 0x07A4
    7340:	90 91 a5 07 	lds	r25, 0x07A5
		USART_Transmit(temp);			// Checksum
    7344:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
    7348:	c9 c1       	rjmp	.+914    	; 0x76dc <TransmitData+0x550>
	//* Where possible, interleave as many channels back into the packets.
	//*
	//************************************************************

	// Handle Spektrum format
	else if (Config.RxModeOut == SPEKTRUM)
    734a:	22 30       	cpi	r18, 0x02	; 2
    734c:	09 f0       	breq	.+2      	; 0x7350 <TransmitData+0x1c4>
    734e:	25 c1       	rjmp	.+586    	; 0x759a <TransmitData+0x40e>
	{
		// Transmit frame loss data - fake if necessary
		if (Config.RxModeIn != SPEKTRUM)
    7350:	40 91 0b 06 	lds	r20, 0x060B
    7354:	42 30       	cpi	r20, 0x02	; 2
    7356:	11 f0       	breq	.+4      	; 0x735c <TransmitData+0x1d0>
		{
			Spektrum_frameloss = 0;
    7358:	10 92 82 07 	sts	0x0782, r1
		}

		// CPPM has a maximum of 8 channels. Spektrum has 7 per frame.
		// So arrange channels as best fit. CH1-6 in both frames, 7 and 8 once per pair.
		if (Config.RxModeIn == CPPM)
    735c:	29 b1       	in	r18, 0x09	; 9
    735e:	82 2f       	mov	r24, r18
    7360:	81 70       	andi	r24, 0x01	; 1
    7362:	90 e0       	ldi	r25, 0x00	; 0
    7364:	24 2f       	mov	r18, r20
    7366:	33 27       	eor	r19, r19
    7368:	27 fd       	sbrc	r18, 7
    736a:	30 95       	com	r19
    736c:	28 17       	cp	r18, r24
    736e:	39 07       	cpc	r19, r25
    7370:	61 f4       	brne	.+24     	; 0x738a <TransmitData+0x1fe>
		{
			Spektrum_Chanmask_0 = 0x007F; // CH1-7 in frame 0
    7372:	8f e7       	ldi	r24, 0x7F	; 127
    7374:	90 e0       	ldi	r25, 0x00	; 0
    7376:	90 93 a3 07 	sts	0x07A3, r25
    737a:	80 93 a2 07 	sts	0x07A2, r24
			Spektrum_Chanmask_1 = 0x00BF; // CH1-6, 8 in frame 1
    737e:	8f eb       	ldi	r24, 0xBF	; 191
    7380:	90 e0       	ldi	r25, 0x00	; 0
    7382:	90 93 9e 07 	sts	0x079E, r25
    7386:	80 93 9d 07 	sts	0x079D, r24
		}

		// S.Bus will always be transmitted as 16 channels
		// So mark all channels as set
		if (Config.RxModeIn == SBUS)
    738a:	41 30       	cpi	r20, 0x01	; 1
    738c:	69 f4       	brne	.+26     	; 0x73a8 <TransmitData+0x21c>
		{
			Spektrum_Chanmask_0 = 0x007F; // CH1-7 in frame 0
    738e:	8f e7       	ldi	r24, 0x7F	; 127
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	90 93 a3 07 	sts	0x07A3, r25
    7396:	80 93 a2 07 	sts	0x07A2, r24
			Spektrum_Chanmask_1 = 0x3F80; // CH8-14 in frame 1
    739a:	80 e8       	ldi	r24, 0x80	; 128
    739c:	9f e3       	ldi	r25, 0x3F	; 63
    739e:	90 93 9e 07 	sts	0x079E, r25
    73a2:	80 93 9d 07 	sts	0x079D, r24
    73a6:	3c c0       	rjmp	.+120    	; 0x7420 <TransmitData+0x294>
		}

		// Xtreme knows how many channels to transmit
		// Copy them out into the two frames
		if (Config.RxModeIn == XTREME)
    73a8:	43 30       	cpi	r20, 0x03	; 3
    73aa:	d1 f5       	brne	.+116    	; 0x7420 <TransmitData+0x294>
		{
			i = 0;
			Spektrum_Chanmask_0 = 0;
    73ac:	10 92 a3 07 	sts	0x07A3, r1
    73b0:	10 92 a2 07 	sts	0x07A2, r1
			Spektrum_Chanmask_1 = 0;
    73b4:	10 92 9e 07 	sts	0x079E, r1
    73b8:	10 92 9d 07 	sts	0x079D, r1
    73bc:	80 e0       	ldi	r24, 0x00	; 0
    73be:	90 e0       	ldi	r25, 0x00	; 0

		// Xtreme knows how many channels to transmit
		// Copy them out into the two frames
		if (Config.RxModeIn == XTREME)
		{
			i = 0;
    73c0:	e0 e0       	ldi	r30, 0x00	; 0
			Spektrum_Chanmask_1 = 0;
			
			// Transfer the Xtreme channels to the two Spektrum frames 
			for (j = 0; j < 16; j++)
			{	
				if (Xtreme_Chanmask & (1 << j))
    73c2:	61 e0       	ldi	r22, 0x01	; 1
    73c4:	70 e0       	ldi	r23, 0x00	; 0
    73c6:	20 91 7c 07 	lds	r18, 0x077C
    73ca:	30 91 7d 07 	lds	r19, 0x077D
    73ce:	ab 01       	movw	r20, r22
    73d0:	08 2e       	mov	r0, r24
    73d2:	02 c0       	rjmp	.+4      	; 0x73d8 <TransmitData+0x24c>
    73d4:	44 0f       	add	r20, r20
    73d6:	55 1f       	adc	r21, r21
    73d8:	0a 94       	dec	r0
    73da:	e2 f7       	brpl	.-8      	; 0x73d4 <TransmitData+0x248>
    73dc:	24 23       	and	r18, r20
    73de:	35 23       	and	r19, r21
    73e0:	23 2b       	or	r18, r19
    73e2:	d1 f0       	breq	.+52     	; 0x7418 <TransmitData+0x28c>
				{
					// CH1 to 7 go to Frame 0
					if (i < SPEKTRUM_CHNUM)
    73e4:	e7 30       	cpi	r30, 0x07	; 7
    73e6:	58 f4       	brcc	.+22     	; 0x73fe <TransmitData+0x272>
					{
						Spektrum_Chanmask_0 |= (1 << j);
    73e8:	20 91 a2 07 	lds	r18, 0x07A2
    73ec:	30 91 a3 07 	lds	r19, 0x07A3
    73f0:	24 2b       	or	r18, r20
    73f2:	35 2b       	or	r19, r21
    73f4:	30 93 a3 07 	sts	0x07A3, r19
    73f8:	20 93 a2 07 	sts	0x07A2, r18
    73fc:	0c c0       	rjmp	.+24     	; 0x7416 <TransmitData+0x28a>
					}
					// CH8 to 14 go to Frame 1
					else if (i < (SPEKTRUM_CHNUM << 1))
    73fe:	ee 30       	cpi	r30, 0x0E	; 14
    7400:	50 f4       	brcc	.+20     	; 0x7416 <TransmitData+0x28a>
					{
						Spektrum_Chanmask_1 |= (1 << j);
    7402:	20 91 9d 07 	lds	r18, 0x079D
    7406:	30 91 9e 07 	lds	r19, 0x079E
    740a:	24 2b       	or	r18, r20
    740c:	35 2b       	or	r19, r21
    740e:	30 93 9e 07 	sts	0x079E, r19
    7412:	20 93 9d 07 	sts	0x079D, r18
					}
					// Increment Spektrum channel number
					i++;
    7416:	ef 5f       	subi	r30, 0xFF	; 255
    7418:	01 96       	adiw	r24, 0x01	; 1
			i = 0;
			Spektrum_Chanmask_0 = 0;
			Spektrum_Chanmask_1 = 0;
			
			// Transfer the Xtreme channels to the two Spektrum frames 
			for (j = 0; j < 16; j++)
    741a:	80 31       	cpi	r24, 0x10	; 16
    741c:	91 05       	cpc	r25, r1
    741e:	99 f6       	brne	.-90     	; 0x73c6 <TransmitData+0x23a>
					i++;
				}
			}
		}
		
		USART_Transmit(Spektrum_frameloss);	// Copy of last frame loss byte from input		
    7420:	80 91 82 07 	lds	r24, 0x0782
    7424:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>

		// Transmit flags (hard coded to 2048 and 2 frames per packet)
		USART_Transmit(SPEKTRUM_2048);
    7428:	82 e1       	ldi	r24, 0x12	; 18
    742a:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
		// We will always transmit eight channels of data.

		i = 0; // Reset channel counter  

		// Select the appropriate channel mask for this frame
		if (Spektrum_frame_in == 0)
    742e:	80 91 86 07 	lds	r24, 0x0786
    7432:	81 11       	cpse	r24, r1
    7434:	05 c0       	rjmp	.+10     	; 0x7440 <TransmitData+0x2b4>
		{
			SpektrumMask = Spektrum_Chanmask_0; // Use mask 0
    7436:	e0 90 a2 07 	lds	r14, 0x07A2
    743a:	f0 90 a3 07 	lds	r15, 0x07A3
    743e:	04 c0       	rjmp	.+8      	; 0x7448 <TransmitData+0x2bc>
		}
		else
		{
			SpektrumMask = Spektrum_Chanmask_1; // Use mask 1
    7440:	e0 90 9d 07 	lds	r14, 0x079D
    7444:	f0 90 9e 07 	lds	r15, 0x079E

		// Xtreme knows how many channels to transmit
		// Copy them out into the two frames
		if (Config.RxModeIn == XTREME)
		{
			i = 0;
    7448:	c0 e0       	ldi	r28, 0x00	; 0
    744a:	d0 e0       	ldi	r29, 0x00	; 0
		USART_Transmit(SPEKTRUM_2048);

		// Process alternate frames correctly
		// We will always transmit eight channels of data.

		i = 0; // Reset channel counter  
    744c:	b1 2c       	mov	r11, r1
		// This way the outgoing data will match the ingoing... fill in blanks with 0xFFFF
		for (j = 0; j < 16; j++)
		{
			// If there is a bit set in the mask, allocate channel data for it.
			// If not, move to next channel/bit
			if (SpektrumMask & (1 << j))
    744e:	cc 24       	eor	r12, r12
    7450:	c3 94       	inc	r12
    7452:	d1 2c       	mov	r13, r1
    7454:	c6 01       	movw	r24, r12
    7456:	0c 2e       	mov	r0, r28
    7458:	02 c0       	rjmp	.+4      	; 0x745e <TransmitData+0x2d2>
    745a:	88 0f       	add	r24, r24
    745c:	99 1f       	adc	r25, r25
    745e:	0a 94       	dec	r0
    7460:	e2 f7       	brpl	.-8      	; 0x745a <TransmitData+0x2ce>
    7462:	8e 21       	and	r24, r14
    7464:	9f 21       	and	r25, r15
    7466:	89 2b       	or	r24, r25
    7468:	09 f4       	brne	.+2      	; 0x746c <TransmitData+0x2e0>
    746a:	73 c0       	rjmp	.+230    	; 0x7552 <TransmitData+0x3c6>
			{
				// We can only fit seven channels in each frame
				if (i < SPEKTRUM_CHNUM)
    746c:	26 e0       	ldi	r18, 0x06	; 6
    746e:	2b 15       	cp	r18, r11
    7470:	08 f4       	brcc	.+2      	; 0x7474 <TransmitData+0x2e8>
    7472:	6f c0       	rjmp	.+222    	; 0x7552 <TransmitData+0x3c6>
				{
					// First eight channels come from ServoOut[]
					if (j < MAX_RC_CHANNELS)
    7474:	c8 30       	cpi	r28, 0x08	; 8
    7476:	08 f0       	brcs	.+2      	; 0x747a <TransmitData+0x2ee>
    7478:	50 c0       	rjmp	.+160    	; 0x751a <TransmitData+0x38e>
					{
						// Convert to Spektrum values (2500~5000 -> 0~2047)
						itemp16 = ServoOut[j];
    747a:	fe 01       	movw	r30, r28
    747c:	ee 0f       	add	r30, r30
    747e:	ff 1f       	adc	r31, r31
    7480:	ef 51       	subi	r30, 0x1F	; 31
    7482:	f8 4f       	sbci	r31, 0xF8	; 248
    7484:	20 81       	ld	r18, Z
    7486:	31 81       	ldd	r19, Z+1	; 0x01
						itemp16 -= 3750;				// Remove local offset (-1250~1250)
    7488:	26 5a       	subi	r18, 0xA6	; 166
    748a:	3e 40       	sbci	r19, 0x0E	; 14
							
						// Respan to Spektrum units (0-2047)
						// x0.8675 (0.8672)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 7);
    748c:	c9 01       	movw	r24, r18
    748e:	95 95       	asr	r25
    7490:	87 95       	ror	r24
    7492:	a9 01       	movw	r20, r18
    7494:	55 95       	asr	r21
    7496:	47 95       	ror	r20
    7498:	55 95       	asr	r21
    749a:	47 95       	ror	r20
    749c:	84 0f       	add	r24, r20
    749e:	95 1f       	adc	r25, r21
    74a0:	a9 01       	movw	r20, r18
    74a2:	74 e0       	ldi	r23, 0x04	; 4
    74a4:	55 95       	asr	r21
    74a6:	47 95       	ror	r20
    74a8:	7a 95       	dec	r23
    74aa:	e1 f7       	brne	.-8      	; 0x74a4 <TransmitData+0x318>
    74ac:	84 0f       	add	r24, r20
    74ae:	95 1f       	adc	r25, r21
    74b0:	a9 01       	movw	r20, r18
    74b2:	e5 e0       	ldi	r30, 0x05	; 5
    74b4:	55 95       	asr	r21
    74b6:	47 95       	ror	r20
    74b8:	ea 95       	dec	r30
    74ba:	e1 f7       	brne	.-8      	; 0x74b4 <TransmitData+0x328>
    74bc:	84 0f       	add	r24, r20
    74be:	95 1f       	adc	r25, r21
    74c0:	a9 01       	movw	r20, r18
    74c2:	f6 e0       	ldi	r31, 0x06	; 6
    74c4:	55 95       	asr	r21
    74c6:	47 95       	ror	r20
    74c8:	fa 95       	dec	r31
    74ca:	e1 f7       	brne	.-8      	; 0x74c4 <TransmitData+0x338>
    74cc:	84 0f       	add	r24, r20
    74ce:	95 1f       	adc	r25, r21
    74d0:	22 0f       	add	r18, r18
    74d2:	23 2f       	mov	r18, r19
    74d4:	22 1f       	adc	r18, r18
    74d6:	33 0b       	sbc	r19, r19
    74d8:	82 0f       	add	r24, r18
    74da:	93 1f       	adc	r25, r19
							
						itemp16 += 1024;				// Add Spektrum offset
    74dc:	8c 01       	movw	r16, r24
    74de:	1c 5f       	subi	r17, 0xFC	; 252
							
						// Bounds check (0 to 2047)
						if (itemp16 < 0)
    74e0:	17 fd       	sbrc	r17, 7
    74e2:	07 c0       	rjmp	.+14     	; 0x74f2 <TransmitData+0x366>
						{
							itemp16 = 0;
						}
						if (itemp16 > 2047)
    74e4:	01 15       	cp	r16, r1
    74e6:	48 e0       	ldi	r20, 0x08	; 8
    74e8:	14 07       	cpc	r17, r20
    74ea:	2c f0       	brlt	.+10     	; 0x74f6 <TransmitData+0x36a>
						{
							itemp16 = 2047;
    74ec:	0f ef       	ldi	r16, 0xFF	; 255
    74ee:	17 e0       	ldi	r17, 0x07	; 7
    74f0:	02 c0       	rjmp	.+4      	; 0x74f6 <TransmitData+0x36a>
						itemp16 += 1024;				// Add Spektrum offset
							
						// Bounds check (0 to 2047)
						if (itemp16 < 0)
						{
							itemp16 = 0;
    74f2:	00 e0       	ldi	r16, 0x00	; 0
    74f4:	10 e0       	ldi	r17, 0x00	; 0
							itemp16 = 2047;
						}
							
						// Reshuffle bits into byte pairs
						temp = (uint8_t)(itemp16 >> 8);		// OR the channel number together with the upper 3 bits of the data
						temp |= (j << 3);					// Shift channel number up to the correct spot. j = channel number
    74f6:	ce 01       	movw	r24, r28
    74f8:	23 e0       	ldi	r18, 0x03	; 3
    74fa:	88 0f       	add	r24, r24
    74fc:	99 1f       	adc	r25, r25
    74fe:	2a 95       	dec	r18
    7500:	e1 f7       	brne	.-8      	; 0x74fa <TransmitData+0x36e>
    7502:	81 2b       	or	r24, r17
	
						// Set the "2nd frame" bit for first byte of channel data if we are generating the second frame
						// i is the count of channels output in this frame
						if ((Spektrum_frame_in == 1) && (i == 0))
    7504:	90 91 86 07 	lds	r25, 0x0786
    7508:	91 30       	cpi	r25, 0x01	; 1
    750a:	19 f4       	brne	.+6      	; 0x7512 <TransmitData+0x386>
    750c:	b1 10       	cpse	r11, r1
    750e:	01 c0       	rjmp	.+2      	; 0x7512 <TransmitData+0x386>
						{
							temp |= 0x80;			
    7510:	80 68       	ori	r24, 0x80	; 128
						}
							
						// Transmit channel data msb
						USART_Transmit(temp);
    7512:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
							
						// Transmit channel data lsb
						temp = (uint8_t)(itemp16 & 0xFF);
						USART_Transmit(temp);
    7516:	80 2f       	mov	r24, r16
    7518:	19 c0       	rjmp	.+50     	; 0x754c <TransmitData+0x3c0>
    751a:	8e 01       	movw	r16, r28
    751c:	08 50       	subi	r16, 0x08	; 8
    751e:	11 09       	sbc	r17, r1
					}
					// Ext channel - already formatted correctly
					else
					{
						// Reshuffle bits into byte pairs
						temp = (uint8_t)(ExtChannel[j - MAX_RC_CHANNELS] >> 8);
    7520:	00 0f       	add	r16, r16
    7522:	11 1f       	adc	r17, r17
    7524:	f8 01       	movw	r30, r16
    7526:	e5 59       	subi	r30, 0x95	; 149
    7528:	f8 4f       	sbci	r31, 0xF8	; 248
    752a:	20 81       	ld	r18, Z
    752c:	31 81       	ldd	r19, Z+1	; 0x01
    752e:	83 2f       	mov	r24, r19
						
						// Set the "2nd frame" bit for first byte of channel data if we are generating the second frame
						if ((Spektrum_frame_in == 1) && (i == 0))
    7530:	90 91 86 07 	lds	r25, 0x0786
    7534:	91 30       	cpi	r25, 0x01	; 1
    7536:	19 f4       	brne	.+6      	; 0x753e <TransmitData+0x3b2>
    7538:	b1 10       	cpse	r11, r1
    753a:	01 c0       	rjmp	.+2      	; 0x753e <TransmitData+0x3b2>
						{
							temp |= 0x80;
    753c:	80 68       	ori	r24, 0x80	; 128
						}
						
						// Transmit channel data msb
						USART_Transmit(temp);
    753e:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
							
						// Transmit channel data lsb
						temp = (ExtChannel[j - MAX_RC_CHANNELS] & 0xFF);
    7542:	f8 01       	movw	r30, r16
    7544:	e5 59       	subi	r30, 0x95	; 149
    7546:	f8 4f       	sbci	r31, 0xF8	; 248
    7548:	80 81       	ld	r24, Z
    754a:	91 81       	ldd	r25, Z+1	; 0x01
						USART_Transmit(temp);
    754c:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
					}
			
					i++; // Count the channels inserted into this frame
    7550:	b3 94       	inc	r11
    7552:	21 96       	adiw	r28, 0x01	; 1
			SpektrumMask = Spektrum_Chanmask_1; // Use mask 1
		}
			
		// Work out which channel the data is intended for from the mask bit position
		// This way the outgoing data will match the ingoing... fill in blanks with 0xFFFF
		for (j = 0; j < 16; j++)
    7554:	c0 31       	cpi	r28, 0x10	; 16
    7556:	d1 05       	cpc	r29, r1
    7558:	09 f0       	breq	.+2      	; 0x755c <TransmitData+0x3d0>
    755a:	7c cf       	rjmp	.-264    	; 0x7454 <TransmitData+0x2c8>
			} // If there is a bit set
		} // for (j = 0; j < 16; j++)

		// Fill in any extras with 0xffff
		// i is the count of channels output in this frame
		for (j = i; j < SPEKTRUM_CHNUM; j++)
    755c:	86 e0       	ldi	r24, 0x06	; 6
    755e:	8b 15       	cp	r24, r11
    7560:	40 f0       	brcs	.+16     	; 0x7572 <TransmitData+0x3e6>
		{
			// Transmit channel data msb
			USART_Transmit(0xFF);
    7562:	8f ef       	ldi	r24, 0xFF	; 255
    7564:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
				
			// Transmit channel data lsb
			USART_Transmit(0xFF);
    7568:	8f ef       	ldi	r24, 0xFF	; 255
    756a:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
			} // If there is a bit set
		} // for (j = 0; j < 16; j++)

		// Fill in any extras with 0xffff
		// i is the count of channels output in this frame
		for (j = i; j < SPEKTRUM_CHNUM; j++)
    756e:	b3 94       	inc	r11
    7570:	f5 cf       	rjmp	.-22     	; 0x755c <TransmitData+0x3d0>
			USART_Transmit(0xFF);
		}

		// Flip to alternate frame for generating when in failsafe or not fed by a Spektrum source
		// Otherwise we will keep generating the same frame...
		if ((Flight_flags & (1 << FailsafeFlag)) || (Config.RxModeIn != SPEKTRUM))
    7572:	80 91 1c 01 	lds	r24, 0x011C
    7576:	82 fd       	sbrc	r24, 2
    7578:	05 c0       	rjmp	.+10     	; 0x7584 <TransmitData+0x3f8>
    757a:	80 91 0b 06 	lds	r24, 0x060B
    757e:	82 30       	cpi	r24, 0x02	; 2
    7580:	09 f4       	brne	.+2      	; 0x7584 <TransmitData+0x3f8>
    7582:	ac c0       	rjmp	.+344    	; 0x76dc <TransmitData+0x550>
		{
			if (Spektrum_frame_in == 0)
    7584:	80 91 86 07 	lds	r24, 0x0786
    7588:	81 11       	cpse	r24, r1
    758a:	04 c0       	rjmp	.+8      	; 0x7594 <TransmitData+0x408>
			{
				Spektrum_frame_in = 1;
    758c:	81 e0       	ldi	r24, 0x01	; 1
    758e:	80 93 86 07 	sts	0x0786, r24
    7592:	a4 c0       	rjmp	.+328    	; 0x76dc <TransmitData+0x550>
			}
			else
			{
				Spektrum_frame_in = 0;
    7594:	10 92 86 07 	sts	0x0786, r1
    7598:	a1 c0       	rjmp	.+322    	; 0x76dc <TransmitData+0x550>
	//*				1877 (+855) = 2.0ms
	//*				2047 (+1023) = 2098us
	//*	
	//************************************************************

	else if (Config.RxModeOut == SBUS)
    759a:	21 30       	cpi	r18, 0x01	; 1
    759c:	09 f0       	breq	.+2      	; 0x75a0 <TransmitData+0x414>
    759e:	9e c0       	rjmp	.+316    	; 0x76dc <TransmitData+0x550>
	{
		// Clear entire sBuffer first
		memset(&sBuffer[0],0,(sizeof(sBuffer)));
    75a0:	86 e2       	ldi	r24, 0x26	; 38
    75a2:	e5 e4       	ldi	r30, 0x45	; 69
    75a4:	f5 e0       	ldi	r31, 0x05	; 5
    75a6:	df 01       	movw	r26, r30
    75a8:	1d 92       	st	X+, r1
    75aa:	8a 95       	dec	r24
    75ac:	e9 f7       	brne	.-6      	; 0x75a8 <TransmitData+0x41c>
		
		// S.Bus start byte
		sBuffer[0] = SBUS_START;
    75ae:	80 ef       	ldi	r24, 0xF0	; 240
    75b0:	80 93 45 05 	sts	0x0545, r24
    75b4:	40 e0       	ldi	r20, 0x00	; 0
    75b6:	50 e0       	ldi	r21, 0x00	; 0

		// Convert servo data to S.Bus data size
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Convert to S.BUS values
			itemp16 = ServoOut[i];			// Copy to signed register (2500~5000)
    75b8:	ba 01       	movw	r22, r20
    75ba:	66 0f       	add	r22, r22
    75bc:	77 1f       	adc	r23, r23
    75be:	fb 01       	movw	r30, r22
    75c0:	ef 51       	subi	r30, 0x1F	; 31
    75c2:	f8 4f       	sbci	r31, 0xF8	; 248
    75c4:	20 81       	ld	r18, Z
    75c6:	31 81       	ldd	r19, Z+1	; 0x01

			itemp16 -= 3750;				// Remove local offset (-1250~1250)
    75c8:	26 5a       	subi	r18, 0xA6	; 166
    75ca:	3e 40       	sbci	r19, 0x0E	; 14
			
			// Respan to S.BUS values (x0.8) (0.8008)
			itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 8);
    75cc:	c9 01       	movw	r24, r18
    75ce:	95 95       	asr	r25
    75d0:	87 95       	ror	r24
    75d2:	f9 01       	movw	r30, r18
    75d4:	f5 95       	asr	r31
    75d6:	e7 95       	ror	r30
    75d8:	f5 95       	asr	r31
    75da:	e7 95       	ror	r30
    75dc:	8e 0f       	add	r24, r30
    75de:	9f 1f       	adc	r25, r31
    75e0:	f9 01       	movw	r30, r18
    75e2:	b5 e0       	ldi	r27, 0x05	; 5
    75e4:	f5 95       	asr	r31
    75e6:	e7 95       	ror	r30
    75e8:	ba 95       	dec	r27
    75ea:	e1 f7       	brne	.-8      	; 0x75e4 <TransmitData+0x458>
    75ec:	8e 0f       	add	r24, r30
    75ee:	9f 1f       	adc	r25, r31
    75f0:	f9 01       	movw	r30, r18
    75f2:	c6 e0       	ldi	r28, 0x06	; 6
    75f4:	f5 95       	asr	r31
    75f6:	e7 95       	ror	r30
    75f8:	ca 95       	dec	r28
    75fa:	e1 f7       	brne	.-8      	; 0x75f4 <TransmitData+0x468>
    75fc:	8e 0f       	add	r24, r30
    75fe:	9f 1f       	adc	r25, r31
    7600:	23 2f       	mov	r18, r19
    7602:	33 0f       	add	r19, r19
    7604:	33 0b       	sbc	r19, r19
    7606:	82 0f       	add	r24, r18
    7608:	93 1f       	adc	r25, r19
			
			itemp16 += 1024;				// Add S.Bus offset
    760a:	9c 5f       	subi	r25, 0xFC	; 252
			
			// Bounds check (0 to 2047)
			if (itemp16 < 0)
    760c:	97 fd       	sbrc	r25, 7
    760e:	07 c0       	rjmp	.+14     	; 0x761e <TransmitData+0x492>
			{
				itemp16 = 0;
			}
			if (itemp16 > 2047)
    7610:	81 15       	cp	r24, r1
    7612:	b8 e0       	ldi	r27, 0x08	; 8
    7614:	9b 07       	cpc	r25, r27
    7616:	2c f0       	brlt	.+10     	; 0x7622 <TransmitData+0x496>
			{
				itemp16 = 2047;
    7618:	8f ef       	ldi	r24, 0xFF	; 255
    761a:	97 e0       	ldi	r25, 0x07	; 7
    761c:	02 c0       	rjmp	.+4      	; 0x7622 <TransmitData+0x496>
			itemp16 += 1024;				// Add S.Bus offset
			
			// Bounds check (0 to 2047)
			if (itemp16 < 0)
			{
				itemp16 = 0;
    761e:	80 e0       	ldi	r24, 0x00	; 0
    7620:	90 e0       	ldi	r25, 0x00	; 0

			// Copy to unsigned register
			temp16 = (itemp16 & 0x7FFF);
			
			// Copy back to ServoOut for now
			ServoOut[i] = temp16;
    7622:	fb 01       	movw	r30, r22
    7624:	ef 51       	subi	r30, 0x1F	; 31
    7626:	f8 4f       	sbci	r31, 0xF8	; 248
    7628:	91 83       	std	Z+1, r25	; 0x01
    762a:	80 83       	st	Z, r24
    762c:	4f 5f       	subi	r20, 0xFF	; 255
    762e:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// S.Bus start byte
		sBuffer[0] = SBUS_START;

		// Convert servo data to S.Bus data size
		for (i = 0; i < MAX_OUTPUTS; i++)
    7630:	48 30       	cpi	r20, 0x08	; 8
    7632:	51 05       	cpc	r21, r1
    7634:	09 f6       	brne	.-126    	; 0x75b8 <TransmitData+0x42c>
    7636:	c0 eb       	ldi	r28, 0xB0	; 176
    7638:	b1 e0       	ldi	r27, 0x01	; 1
    763a:	a0 e0       	ldi	r26, 0x00	; 0
    763c:	70 e0       	ldi	r23, 0x00	; 0
    763e:	60 e0       	ldi	r22, 0x00	; 0
			}
			// Extra channels in extra buffer
			else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
			{
				// Transfer set bits from 16-bit extra channel data to the sBuffer
				if (ExtChannel[chan_shift - MAX_RC_CHANNELS] & (1 << data_mask))
    7640:	81 e0       	ldi	r24, 0x01	; 1
    7642:	90 e0       	ldi	r25, 0x00	; 0
	
		sindex = 1;	// Step over flag byte
		
        for (j = 0; j < 176; j++)
		{
			if (chan_shift < MAX_RC_CHANNELS)
    7644:	78 30       	cpi	r23, 0x08	; 8
    7646:	38 f4       	brcc	.+14     	; 0x7656 <TransmitData+0x4ca>
			{
				// Transfer set bits from 16-bit servo data to the sBuffer
				if (ServoOut[chan_shift] & (1 << data_mask))
    7648:	e7 2f       	mov	r30, r23
    764a:	f0 e0       	ldi	r31, 0x00	; 0
    764c:	ee 0f       	add	r30, r30
    764e:	ff 1f       	adc	r31, r31
    7650:	ef 51       	subi	r30, 0x1F	; 31
    7652:	f8 4f       	sbci	r31, 0xF8	; 248
    7654:	08 c0       	rjmp	.+16     	; 0x7666 <TransmitData+0x4da>
					// Place the RC data into buffer directly
					sBuffer[sindex] |= (1 << chan_mask);
				}
			}
			// Extra channels in extra buffer
			else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
    7656:	70 31       	cpi	r23, 0x10	; 16
    7658:	00 f5       	brcc	.+64     	; 0x769a <TransmitData+0x50e>
			{
				// Transfer set bits from 16-bit extra channel data to the sBuffer
				if (ExtChannel[chan_shift - MAX_RC_CHANNELS] & (1 << data_mask))
    765a:	e7 2f       	mov	r30, r23
    765c:	f0 e0       	ldi	r31, 0x00	; 0
    765e:	ee 0f       	add	r30, r30
    7660:	ff 1f       	adc	r31, r31
    7662:	e5 5a       	subi	r30, 0xA5	; 165
    7664:	f8 4f       	sbci	r31, 0xF8	; 248
    7666:	40 81       	ld	r20, Z
    7668:	51 81       	ldd	r21, Z+1	; 0x01
    766a:	9c 01       	movw	r18, r24
    766c:	0a 2e       	mov	r0, r26
    766e:	02 c0       	rjmp	.+4      	; 0x7674 <TransmitData+0x4e8>
    7670:	22 0f       	add	r18, r18
    7672:	33 1f       	adc	r19, r19
    7674:	0a 94       	dec	r0
    7676:	e2 f7       	brpl	.-8      	; 0x7670 <TransmitData+0x4e4>
    7678:	24 23       	and	r18, r20
    767a:	35 23       	and	r19, r21
    767c:	23 2b       	or	r18, r19
    767e:	69 f0       	breq	.+26     	; 0x769a <TransmitData+0x50e>
				{
					// Place the RC data into buffer directly
					sBuffer[sindex] |= (1 << chan_mask);
    7680:	eb 2f       	mov	r30, r27
    7682:	f0 e0       	ldi	r31, 0x00	; 0
    7684:	eb 5b       	subi	r30, 0xBB	; 187
    7686:	fa 4f       	sbci	r31, 0xFA	; 250
    7688:	40 81       	ld	r20, Z
    768a:	9c 01       	movw	r18, r24
    768c:	06 2e       	mov	r0, r22
    768e:	01 c0       	rjmp	.+2      	; 0x7692 <TransmitData+0x506>
    7690:	22 0f       	add	r18, r18
    7692:	0a 94       	dec	r0
    7694:	ea f7       	brpl	.-6      	; 0x7690 <TransmitData+0x504>
    7696:	42 2b       	or	r20, r18
    7698:	40 83       	st	Z, r20
				}
			}

            chan_mask++;
    769a:	6f 5f       	subi	r22, 0xFF	; 255
            data_mask++;
    769c:	af 5f       	subi	r26, 0xFF	; 255

            // If we have done 8 bits, move to next byte in sBuffer
            if (chan_mask == 8)
    769e:	68 30       	cpi	r22, 0x08	; 8
    76a0:	11 f4       	brne	.+4      	; 0x76a6 <TransmitData+0x51a>
            {
	            chan_mask = 0;
	            sindex++;
    76a2:	bf 5f       	subi	r27, 0xFF	; 255
            data_mask++;

            // If we have done 8 bits, move to next byte in sBuffer
            if (chan_mask == 8)
            {
	            chan_mask = 0;
    76a4:	60 e0       	ldi	r22, 0x00	; 0
	            sindex++;
            }

            // If we have reconstructed all 11 bits of one channel's data (2047)
            // increment the channel number
            if (data_mask == 11)
    76a6:	ab 30       	cpi	r26, 0x0B	; 11
    76a8:	11 f4       	brne	.+4      	; 0x76ae <TransmitData+0x522>
            {
	            data_mask = 0;
	            chan_shift++;
    76aa:	7f 5f       	subi	r23, 0xFF	; 255

            // If we have reconstructed all 11 bits of one channel's data (2047)
            // increment the channel number
            if (data_mask == 11)
            {
	            data_mask = 0;
    76ac:	a0 e0       	ldi	r26, 0x00	; 0
    76ae:	c1 50       	subi	r28, 0x01	; 1
		//* 	etc.
		// Our data is 8ch x 11 bits or 88 bits but the whole space is 16ch or 176 bits (22*8)
	
		sindex = 1;	// Step over flag byte
		
        for (j = 0; j < 176; j++)
    76b0:	49 f6       	brne	.-110    	; 0x7644 <TransmitData+0x4b8>
	            chan_shift++;
            }			
		}

		// Transmit S.Bus flags if they exist	
		if (Config.RxModeIn != SBUS)
    76b2:	80 91 0b 06 	lds	r24, 0x060B
    76b6:	81 30       	cpi	r24, 0x01	; 1
    76b8:	11 f0       	breq	.+4      	; 0x76be <TransmitData+0x532>
		{
			SBUS_Flags = 0;
    76ba:	10 92 44 01 	sts	0x0144, r1
		}		

		sBuffer[23] = SBUS_Flags;	
    76be:	80 91 44 01 	lds	r24, 0x0144
    76c2:	80 93 5c 05 	sts	0x055C, r24
		
		// Transmit S.Bus end byte
		sBuffer[24] = SBUS_END;	
    76c6:	10 92 5d 05 	sts	0x055D, r1
    76ca:	c5 e4       	ldi	r28, 0x45	; 69
    76cc:	d5 e0       	ldi	r29, 0x05	; 5
		
		// Transmit whole S.Bus packet
		for (j = 0; j < 25; j++)
		{
			USART_Transmit(sBuffer[j]);
    76ce:	89 91       	ld	r24, Y+
    76d0:	0e 94 bf 38 	call	0x717e	; 0x717e <USART_Transmit>
		
		// Transmit S.Bus end byte
		sBuffer[24] = SBUS_END;	
		
		// Transmit whole S.Bus packet
		for (j = 0; j < 25; j++)
    76d4:	e5 e0       	ldi	r30, 0x05	; 5
    76d6:	ce 35       	cpi	r28, 0x5E	; 94
    76d8:	de 07       	cpc	r29, r30
    76da:	c9 f7       	brne	.-14     	; 0x76ce <TransmitData+0x542>
		{
			USART_Transmit(sBuffer[j]);
		}
	}
    76dc:	cd b7       	in	r28, 0x3d	; 61
    76de:	de b7       	in	r29, 0x3e	; 62
    76e0:	e9 e0       	ldi	r30, 0x09	; 9
    76e2:	0c 94 50 3e 	jmp	0x7ca0	; 0x7ca0 <__epilogue_restores__+0x12>

000076e6 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT0);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    76e6:	83 e0       	ldi	r24, 0x03	; 3
    76e8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    76ec:	80 91 78 00 	lds	r24, 0x0078
    76f0:	90 91 79 00 	lds	r25, 0x0079
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
#else
	// Multiply by 2.633
	// 2 + 1/2 + 1/8 + 1/128 :)
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 3) + (vBat >> 7); // Multiply by 2.633
    76f4:	9c 01       	movw	r18, r24
    76f6:	36 95       	lsr	r19
    76f8:	27 95       	ror	r18
    76fa:	ac 01       	movw	r20, r24
    76fc:	44 0f       	add	r20, r20
    76fe:	55 1f       	adc	r21, r21
    7700:	24 0f       	add	r18, r20
    7702:	35 1f       	adc	r19, r21
    7704:	ac 01       	movw	r20, r24
    7706:	73 e0       	ldi	r23, 0x03	; 3
    7708:	56 95       	lsr	r21
    770a:	47 95       	ror	r20
    770c:	7a 95       	dec	r23
    770e:	e1 f7       	brne	.-8      	; 0x7708 <GetVbat+0x22>
    7710:	24 0f       	add	r18, r20
    7712:	35 1f       	adc	r19, r21
    7714:	88 0f       	add	r24, r24
    7716:	89 2f       	mov	r24, r25
    7718:	88 1f       	adc	r24, r24
    771a:	99 0b       	sbc	r25, r25
    771c:	91 95       	neg	r25
#endif

	return vBat;
}
    771e:	82 0f       	add	r24, r18
    7720:	93 1f       	adc	r25, r19
    7722:	08 95       	ret

00007724 <__subsf3>:
    7724:	50 58       	subi	r21, 0x80	; 128

00007726 <__addsf3>:
    7726:	bb 27       	eor	r27, r27
    7728:	aa 27       	eor	r26, r26
    772a:	0e d0       	rcall	.+28     	; 0x7748 <__addsf3x>
    772c:	75 c1       	rjmp	.+746    	; 0x7a18 <__fp_round>
    772e:	66 d1       	rcall	.+716    	; 0x79fc <__fp_pscA>
    7730:	30 f0       	brcs	.+12     	; 0x773e <__addsf3+0x18>
    7732:	6b d1       	rcall	.+726    	; 0x7a0a <__fp_pscB>
    7734:	20 f0       	brcs	.+8      	; 0x773e <__addsf3+0x18>
    7736:	31 f4       	brne	.+12     	; 0x7744 <__addsf3+0x1e>
    7738:	9f 3f       	cpi	r25, 0xFF	; 255
    773a:	11 f4       	brne	.+4      	; 0x7740 <__addsf3+0x1a>
    773c:	1e f4       	brtc	.+6      	; 0x7744 <__addsf3+0x1e>
    773e:	5b c1       	rjmp	.+694    	; 0x79f6 <__fp_nan>
    7740:	0e f4       	brtc	.+2      	; 0x7744 <__addsf3+0x1e>
    7742:	e0 95       	com	r30
    7744:	e7 fb       	bst	r30, 7
    7746:	51 c1       	rjmp	.+674    	; 0x79ea <__fp_inf>

00007748 <__addsf3x>:
    7748:	e9 2f       	mov	r30, r25
    774a:	77 d1       	rcall	.+750    	; 0x7a3a <__fp_split3>
    774c:	80 f3       	brcs	.-32     	; 0x772e <__addsf3+0x8>
    774e:	ba 17       	cp	r27, r26
    7750:	62 07       	cpc	r22, r18
    7752:	73 07       	cpc	r23, r19
    7754:	84 07       	cpc	r24, r20
    7756:	95 07       	cpc	r25, r21
    7758:	18 f0       	brcs	.+6      	; 0x7760 <__addsf3x+0x18>
    775a:	71 f4       	brne	.+28     	; 0x7778 <__addsf3x+0x30>
    775c:	9e f5       	brtc	.+102    	; 0x77c4 <__addsf3x+0x7c>
    775e:	8f c1       	rjmp	.+798    	; 0x7a7e <__fp_zero>
    7760:	0e f4       	brtc	.+2      	; 0x7764 <__addsf3x+0x1c>
    7762:	e0 95       	com	r30
    7764:	0b 2e       	mov	r0, r27
    7766:	ba 2f       	mov	r27, r26
    7768:	a0 2d       	mov	r26, r0
    776a:	0b 01       	movw	r0, r22
    776c:	b9 01       	movw	r22, r18
    776e:	90 01       	movw	r18, r0
    7770:	0c 01       	movw	r0, r24
    7772:	ca 01       	movw	r24, r20
    7774:	a0 01       	movw	r20, r0
    7776:	11 24       	eor	r1, r1
    7778:	ff 27       	eor	r31, r31
    777a:	59 1b       	sub	r21, r25
    777c:	99 f0       	breq	.+38     	; 0x77a4 <__addsf3x+0x5c>
    777e:	59 3f       	cpi	r21, 0xF9	; 249
    7780:	50 f4       	brcc	.+20     	; 0x7796 <__addsf3x+0x4e>
    7782:	50 3e       	cpi	r21, 0xE0	; 224
    7784:	68 f1       	brcs	.+90     	; 0x77e0 <__addsf3x+0x98>
    7786:	1a 16       	cp	r1, r26
    7788:	f0 40       	sbci	r31, 0x00	; 0
    778a:	a2 2f       	mov	r26, r18
    778c:	23 2f       	mov	r18, r19
    778e:	34 2f       	mov	r19, r20
    7790:	44 27       	eor	r20, r20
    7792:	58 5f       	subi	r21, 0xF8	; 248
    7794:	f3 cf       	rjmp	.-26     	; 0x777c <__addsf3x+0x34>
    7796:	46 95       	lsr	r20
    7798:	37 95       	ror	r19
    779a:	27 95       	ror	r18
    779c:	a7 95       	ror	r26
    779e:	f0 40       	sbci	r31, 0x00	; 0
    77a0:	53 95       	inc	r21
    77a2:	c9 f7       	brne	.-14     	; 0x7796 <__addsf3x+0x4e>
    77a4:	7e f4       	brtc	.+30     	; 0x77c4 <__addsf3x+0x7c>
    77a6:	1f 16       	cp	r1, r31
    77a8:	ba 0b       	sbc	r27, r26
    77aa:	62 0b       	sbc	r22, r18
    77ac:	73 0b       	sbc	r23, r19
    77ae:	84 0b       	sbc	r24, r20
    77b0:	ba f0       	brmi	.+46     	; 0x77e0 <__addsf3x+0x98>
    77b2:	91 50       	subi	r25, 0x01	; 1
    77b4:	a1 f0       	breq	.+40     	; 0x77de <__addsf3x+0x96>
    77b6:	ff 0f       	add	r31, r31
    77b8:	bb 1f       	adc	r27, r27
    77ba:	66 1f       	adc	r22, r22
    77bc:	77 1f       	adc	r23, r23
    77be:	88 1f       	adc	r24, r24
    77c0:	c2 f7       	brpl	.-16     	; 0x77b2 <__addsf3x+0x6a>
    77c2:	0e c0       	rjmp	.+28     	; 0x77e0 <__addsf3x+0x98>
    77c4:	ba 0f       	add	r27, r26
    77c6:	62 1f       	adc	r22, r18
    77c8:	73 1f       	adc	r23, r19
    77ca:	84 1f       	adc	r24, r20
    77cc:	48 f4       	brcc	.+18     	; 0x77e0 <__addsf3x+0x98>
    77ce:	87 95       	ror	r24
    77d0:	77 95       	ror	r23
    77d2:	67 95       	ror	r22
    77d4:	b7 95       	ror	r27
    77d6:	f7 95       	ror	r31
    77d8:	9e 3f       	cpi	r25, 0xFE	; 254
    77da:	08 f0       	brcs	.+2      	; 0x77de <__addsf3x+0x96>
    77dc:	b3 cf       	rjmp	.-154    	; 0x7744 <__addsf3+0x1e>
    77de:	93 95       	inc	r25
    77e0:	88 0f       	add	r24, r24
    77e2:	08 f0       	brcs	.+2      	; 0x77e6 <__addsf3x+0x9e>
    77e4:	99 27       	eor	r25, r25
    77e6:	ee 0f       	add	r30, r30
    77e8:	97 95       	ror	r25
    77ea:	87 95       	ror	r24
    77ec:	08 95       	ret

000077ee <__cmpsf2>:
    77ee:	d9 d0       	rcall	.+434    	; 0x79a2 <__fp_cmp>
    77f0:	08 f4       	brcc	.+2      	; 0x77f4 <__cmpsf2+0x6>
    77f2:	81 e0       	ldi	r24, 0x01	; 1
    77f4:	08 95       	ret

000077f6 <__divsf3>:
    77f6:	0c d0       	rcall	.+24     	; 0x7810 <__divsf3x>
    77f8:	0f c1       	rjmp	.+542    	; 0x7a18 <__fp_round>
    77fa:	07 d1       	rcall	.+526    	; 0x7a0a <__fp_pscB>
    77fc:	40 f0       	brcs	.+16     	; 0x780e <__divsf3+0x18>
    77fe:	fe d0       	rcall	.+508    	; 0x79fc <__fp_pscA>
    7800:	30 f0       	brcs	.+12     	; 0x780e <__divsf3+0x18>
    7802:	21 f4       	brne	.+8      	; 0x780c <__divsf3+0x16>
    7804:	5f 3f       	cpi	r21, 0xFF	; 255
    7806:	19 f0       	breq	.+6      	; 0x780e <__divsf3+0x18>
    7808:	f0 c0       	rjmp	.+480    	; 0x79ea <__fp_inf>
    780a:	51 11       	cpse	r21, r1
    780c:	39 c1       	rjmp	.+626    	; 0x7a80 <__fp_szero>
    780e:	f3 c0       	rjmp	.+486    	; 0x79f6 <__fp_nan>

00007810 <__divsf3x>:
    7810:	14 d1       	rcall	.+552    	; 0x7a3a <__fp_split3>
    7812:	98 f3       	brcs	.-26     	; 0x77fa <__divsf3+0x4>

00007814 <__divsf3_pse>:
    7814:	99 23       	and	r25, r25
    7816:	c9 f3       	breq	.-14     	; 0x780a <__divsf3+0x14>
    7818:	55 23       	and	r21, r21
    781a:	b1 f3       	breq	.-20     	; 0x7808 <__divsf3+0x12>
    781c:	95 1b       	sub	r25, r21
    781e:	55 0b       	sbc	r21, r21
    7820:	bb 27       	eor	r27, r27
    7822:	aa 27       	eor	r26, r26
    7824:	62 17       	cp	r22, r18
    7826:	73 07       	cpc	r23, r19
    7828:	84 07       	cpc	r24, r20
    782a:	38 f0       	brcs	.+14     	; 0x783a <__divsf3_pse+0x26>
    782c:	9f 5f       	subi	r25, 0xFF	; 255
    782e:	5f 4f       	sbci	r21, 0xFF	; 255
    7830:	22 0f       	add	r18, r18
    7832:	33 1f       	adc	r19, r19
    7834:	44 1f       	adc	r20, r20
    7836:	aa 1f       	adc	r26, r26
    7838:	a9 f3       	breq	.-22     	; 0x7824 <__divsf3_pse+0x10>
    783a:	33 d0       	rcall	.+102    	; 0x78a2 <__divsf3_pse+0x8e>
    783c:	0e 2e       	mov	r0, r30
    783e:	3a f0       	brmi	.+14     	; 0x784e <__divsf3_pse+0x3a>
    7840:	e0 e8       	ldi	r30, 0x80	; 128
    7842:	30 d0       	rcall	.+96     	; 0x78a4 <__divsf3_pse+0x90>
    7844:	91 50       	subi	r25, 0x01	; 1
    7846:	50 40       	sbci	r21, 0x00	; 0
    7848:	e6 95       	lsr	r30
    784a:	00 1c       	adc	r0, r0
    784c:	ca f7       	brpl	.-14     	; 0x7840 <__divsf3_pse+0x2c>
    784e:	29 d0       	rcall	.+82     	; 0x78a2 <__divsf3_pse+0x8e>
    7850:	fe 2f       	mov	r31, r30
    7852:	27 d0       	rcall	.+78     	; 0x78a2 <__divsf3_pse+0x8e>
    7854:	66 0f       	add	r22, r22
    7856:	77 1f       	adc	r23, r23
    7858:	88 1f       	adc	r24, r24
    785a:	bb 1f       	adc	r27, r27
    785c:	26 17       	cp	r18, r22
    785e:	37 07       	cpc	r19, r23
    7860:	48 07       	cpc	r20, r24
    7862:	ab 07       	cpc	r26, r27
    7864:	b0 e8       	ldi	r27, 0x80	; 128
    7866:	09 f0       	breq	.+2      	; 0x786a <__divsf3_pse+0x56>
    7868:	bb 0b       	sbc	r27, r27
    786a:	80 2d       	mov	r24, r0
    786c:	bf 01       	movw	r22, r30
    786e:	ff 27       	eor	r31, r31
    7870:	93 58       	subi	r25, 0x83	; 131
    7872:	5f 4f       	sbci	r21, 0xFF	; 255
    7874:	2a f0       	brmi	.+10     	; 0x7880 <__divsf3_pse+0x6c>
    7876:	9e 3f       	cpi	r25, 0xFE	; 254
    7878:	51 05       	cpc	r21, r1
    787a:	68 f0       	brcs	.+26     	; 0x7896 <__divsf3_pse+0x82>
    787c:	b6 c0       	rjmp	.+364    	; 0x79ea <__fp_inf>
    787e:	00 c1       	rjmp	.+512    	; 0x7a80 <__fp_szero>
    7880:	5f 3f       	cpi	r21, 0xFF	; 255
    7882:	ec f3       	brlt	.-6      	; 0x787e <__divsf3_pse+0x6a>
    7884:	98 3e       	cpi	r25, 0xE8	; 232
    7886:	dc f3       	brlt	.-10     	; 0x787e <__divsf3_pse+0x6a>
    7888:	86 95       	lsr	r24
    788a:	77 95       	ror	r23
    788c:	67 95       	ror	r22
    788e:	b7 95       	ror	r27
    7890:	f7 95       	ror	r31
    7892:	9f 5f       	subi	r25, 0xFF	; 255
    7894:	c9 f7       	brne	.-14     	; 0x7888 <__divsf3_pse+0x74>
    7896:	88 0f       	add	r24, r24
    7898:	91 1d       	adc	r25, r1
    789a:	96 95       	lsr	r25
    789c:	87 95       	ror	r24
    789e:	97 f9       	bld	r25, 7
    78a0:	08 95       	ret
    78a2:	e1 e0       	ldi	r30, 0x01	; 1
    78a4:	66 0f       	add	r22, r22
    78a6:	77 1f       	adc	r23, r23
    78a8:	88 1f       	adc	r24, r24
    78aa:	bb 1f       	adc	r27, r27
    78ac:	62 17       	cp	r22, r18
    78ae:	73 07       	cpc	r23, r19
    78b0:	84 07       	cpc	r24, r20
    78b2:	ba 07       	cpc	r27, r26
    78b4:	20 f0       	brcs	.+8      	; 0x78be <__divsf3_pse+0xaa>
    78b6:	62 1b       	sub	r22, r18
    78b8:	73 0b       	sbc	r23, r19
    78ba:	84 0b       	sbc	r24, r20
    78bc:	ba 0b       	sbc	r27, r26
    78be:	ee 1f       	adc	r30, r30
    78c0:	88 f7       	brcc	.-30     	; 0x78a4 <__divsf3_pse+0x90>
    78c2:	e0 95       	com	r30
    78c4:	08 95       	ret

000078c6 <__fixsfsi>:
    78c6:	04 d0       	rcall	.+8      	; 0x78d0 <__fixunssfsi>
    78c8:	68 94       	set
    78ca:	b1 11       	cpse	r27, r1
    78cc:	d9 c0       	rjmp	.+434    	; 0x7a80 <__fp_szero>
    78ce:	08 95       	ret

000078d0 <__fixunssfsi>:
    78d0:	bc d0       	rcall	.+376    	; 0x7a4a <__fp_splitA>
    78d2:	88 f0       	brcs	.+34     	; 0x78f6 <__fixunssfsi+0x26>
    78d4:	9f 57       	subi	r25, 0x7F	; 127
    78d6:	90 f0       	brcs	.+36     	; 0x78fc <__fixunssfsi+0x2c>
    78d8:	b9 2f       	mov	r27, r25
    78da:	99 27       	eor	r25, r25
    78dc:	b7 51       	subi	r27, 0x17	; 23
    78de:	a0 f0       	brcs	.+40     	; 0x7908 <__fixunssfsi+0x38>
    78e0:	d1 f0       	breq	.+52     	; 0x7916 <__fixunssfsi+0x46>
    78e2:	66 0f       	add	r22, r22
    78e4:	77 1f       	adc	r23, r23
    78e6:	88 1f       	adc	r24, r24
    78e8:	99 1f       	adc	r25, r25
    78ea:	1a f0       	brmi	.+6      	; 0x78f2 <__fixunssfsi+0x22>
    78ec:	ba 95       	dec	r27
    78ee:	c9 f7       	brne	.-14     	; 0x78e2 <__fixunssfsi+0x12>
    78f0:	12 c0       	rjmp	.+36     	; 0x7916 <__fixunssfsi+0x46>
    78f2:	b1 30       	cpi	r27, 0x01	; 1
    78f4:	81 f0       	breq	.+32     	; 0x7916 <__fixunssfsi+0x46>
    78f6:	c3 d0       	rcall	.+390    	; 0x7a7e <__fp_zero>
    78f8:	b1 e0       	ldi	r27, 0x01	; 1
    78fa:	08 95       	ret
    78fc:	c0 c0       	rjmp	.+384    	; 0x7a7e <__fp_zero>
    78fe:	67 2f       	mov	r22, r23
    7900:	78 2f       	mov	r23, r24
    7902:	88 27       	eor	r24, r24
    7904:	b8 5f       	subi	r27, 0xF8	; 248
    7906:	39 f0       	breq	.+14     	; 0x7916 <__fixunssfsi+0x46>
    7908:	b9 3f       	cpi	r27, 0xF9	; 249
    790a:	cc f3       	brlt	.-14     	; 0x78fe <__fixunssfsi+0x2e>
    790c:	86 95       	lsr	r24
    790e:	77 95       	ror	r23
    7910:	67 95       	ror	r22
    7912:	b3 95       	inc	r27
    7914:	d9 f7       	brne	.-10     	; 0x790c <__fixunssfsi+0x3c>
    7916:	3e f4       	brtc	.+14     	; 0x7926 <__fixunssfsi+0x56>
    7918:	90 95       	com	r25
    791a:	80 95       	com	r24
    791c:	70 95       	com	r23
    791e:	61 95       	neg	r22
    7920:	7f 4f       	sbci	r23, 0xFF	; 255
    7922:	8f 4f       	sbci	r24, 0xFF	; 255
    7924:	9f 4f       	sbci	r25, 0xFF	; 255
    7926:	08 95       	ret

00007928 <__floatunsisf>:
    7928:	e8 94       	clt
    792a:	09 c0       	rjmp	.+18     	; 0x793e <__floatsisf+0x12>

0000792c <__floatsisf>:
    792c:	97 fb       	bst	r25, 7
    792e:	3e f4       	brtc	.+14     	; 0x793e <__floatsisf+0x12>
    7930:	90 95       	com	r25
    7932:	80 95       	com	r24
    7934:	70 95       	com	r23
    7936:	61 95       	neg	r22
    7938:	7f 4f       	sbci	r23, 0xFF	; 255
    793a:	8f 4f       	sbci	r24, 0xFF	; 255
    793c:	9f 4f       	sbci	r25, 0xFF	; 255
    793e:	99 23       	and	r25, r25
    7940:	a9 f0       	breq	.+42     	; 0x796c <__floatsisf+0x40>
    7942:	f9 2f       	mov	r31, r25
    7944:	96 e9       	ldi	r25, 0x96	; 150
    7946:	bb 27       	eor	r27, r27
    7948:	93 95       	inc	r25
    794a:	f6 95       	lsr	r31
    794c:	87 95       	ror	r24
    794e:	77 95       	ror	r23
    7950:	67 95       	ror	r22
    7952:	b7 95       	ror	r27
    7954:	f1 11       	cpse	r31, r1
    7956:	f8 cf       	rjmp	.-16     	; 0x7948 <__floatsisf+0x1c>
    7958:	fa f4       	brpl	.+62     	; 0x7998 <__floatsisf+0x6c>
    795a:	bb 0f       	add	r27, r27
    795c:	11 f4       	brne	.+4      	; 0x7962 <__floatsisf+0x36>
    795e:	60 ff       	sbrs	r22, 0
    7960:	1b c0       	rjmp	.+54     	; 0x7998 <__floatsisf+0x6c>
    7962:	6f 5f       	subi	r22, 0xFF	; 255
    7964:	7f 4f       	sbci	r23, 0xFF	; 255
    7966:	8f 4f       	sbci	r24, 0xFF	; 255
    7968:	9f 4f       	sbci	r25, 0xFF	; 255
    796a:	16 c0       	rjmp	.+44     	; 0x7998 <__floatsisf+0x6c>
    796c:	88 23       	and	r24, r24
    796e:	11 f0       	breq	.+4      	; 0x7974 <__floatsisf+0x48>
    7970:	96 e9       	ldi	r25, 0x96	; 150
    7972:	11 c0       	rjmp	.+34     	; 0x7996 <__floatsisf+0x6a>
    7974:	77 23       	and	r23, r23
    7976:	21 f0       	breq	.+8      	; 0x7980 <__floatsisf+0x54>
    7978:	9e e8       	ldi	r25, 0x8E	; 142
    797a:	87 2f       	mov	r24, r23
    797c:	76 2f       	mov	r23, r22
    797e:	05 c0       	rjmp	.+10     	; 0x798a <__floatsisf+0x5e>
    7980:	66 23       	and	r22, r22
    7982:	71 f0       	breq	.+28     	; 0x79a0 <__floatsisf+0x74>
    7984:	96 e8       	ldi	r25, 0x86	; 134
    7986:	86 2f       	mov	r24, r22
    7988:	70 e0       	ldi	r23, 0x00	; 0
    798a:	60 e0       	ldi	r22, 0x00	; 0
    798c:	2a f0       	brmi	.+10     	; 0x7998 <__floatsisf+0x6c>
    798e:	9a 95       	dec	r25
    7990:	66 0f       	add	r22, r22
    7992:	77 1f       	adc	r23, r23
    7994:	88 1f       	adc	r24, r24
    7996:	da f7       	brpl	.-10     	; 0x798e <__floatsisf+0x62>
    7998:	88 0f       	add	r24, r24
    799a:	96 95       	lsr	r25
    799c:	87 95       	ror	r24
    799e:	97 f9       	bld	r25, 7
    79a0:	08 95       	ret

000079a2 <__fp_cmp>:
    79a2:	99 0f       	add	r25, r25
    79a4:	00 08       	sbc	r0, r0
    79a6:	55 0f       	add	r21, r21
    79a8:	aa 0b       	sbc	r26, r26
    79aa:	e0 e8       	ldi	r30, 0x80	; 128
    79ac:	fe ef       	ldi	r31, 0xFE	; 254
    79ae:	16 16       	cp	r1, r22
    79b0:	17 06       	cpc	r1, r23
    79b2:	e8 07       	cpc	r30, r24
    79b4:	f9 07       	cpc	r31, r25
    79b6:	c0 f0       	brcs	.+48     	; 0x79e8 <__fp_cmp+0x46>
    79b8:	12 16       	cp	r1, r18
    79ba:	13 06       	cpc	r1, r19
    79bc:	e4 07       	cpc	r30, r20
    79be:	f5 07       	cpc	r31, r21
    79c0:	98 f0       	brcs	.+38     	; 0x79e8 <__fp_cmp+0x46>
    79c2:	62 1b       	sub	r22, r18
    79c4:	73 0b       	sbc	r23, r19
    79c6:	84 0b       	sbc	r24, r20
    79c8:	95 0b       	sbc	r25, r21
    79ca:	39 f4       	brne	.+14     	; 0x79da <__fp_cmp+0x38>
    79cc:	0a 26       	eor	r0, r26
    79ce:	61 f0       	breq	.+24     	; 0x79e8 <__fp_cmp+0x46>
    79d0:	23 2b       	or	r18, r19
    79d2:	24 2b       	or	r18, r20
    79d4:	25 2b       	or	r18, r21
    79d6:	21 f4       	brne	.+8      	; 0x79e0 <__fp_cmp+0x3e>
    79d8:	08 95       	ret
    79da:	0a 26       	eor	r0, r26
    79dc:	09 f4       	brne	.+2      	; 0x79e0 <__fp_cmp+0x3e>
    79de:	a1 40       	sbci	r26, 0x01	; 1
    79e0:	a6 95       	lsr	r26
    79e2:	8f ef       	ldi	r24, 0xFF	; 255
    79e4:	81 1d       	adc	r24, r1
    79e6:	81 1d       	adc	r24, r1
    79e8:	08 95       	ret

000079ea <__fp_inf>:
    79ea:	97 f9       	bld	r25, 7
    79ec:	9f 67       	ori	r25, 0x7F	; 127
    79ee:	80 e8       	ldi	r24, 0x80	; 128
    79f0:	70 e0       	ldi	r23, 0x00	; 0
    79f2:	60 e0       	ldi	r22, 0x00	; 0
    79f4:	08 95       	ret

000079f6 <__fp_nan>:
    79f6:	9f ef       	ldi	r25, 0xFF	; 255
    79f8:	80 ec       	ldi	r24, 0xC0	; 192
    79fa:	08 95       	ret

000079fc <__fp_pscA>:
    79fc:	00 24       	eor	r0, r0
    79fe:	0a 94       	dec	r0
    7a00:	16 16       	cp	r1, r22
    7a02:	17 06       	cpc	r1, r23
    7a04:	18 06       	cpc	r1, r24
    7a06:	09 06       	cpc	r0, r25
    7a08:	08 95       	ret

00007a0a <__fp_pscB>:
    7a0a:	00 24       	eor	r0, r0
    7a0c:	0a 94       	dec	r0
    7a0e:	12 16       	cp	r1, r18
    7a10:	13 06       	cpc	r1, r19
    7a12:	14 06       	cpc	r1, r20
    7a14:	05 06       	cpc	r0, r21
    7a16:	08 95       	ret

00007a18 <__fp_round>:
    7a18:	09 2e       	mov	r0, r25
    7a1a:	03 94       	inc	r0
    7a1c:	00 0c       	add	r0, r0
    7a1e:	11 f4       	brne	.+4      	; 0x7a24 <__fp_round+0xc>
    7a20:	88 23       	and	r24, r24
    7a22:	52 f0       	brmi	.+20     	; 0x7a38 <__fp_round+0x20>
    7a24:	bb 0f       	add	r27, r27
    7a26:	40 f4       	brcc	.+16     	; 0x7a38 <__fp_round+0x20>
    7a28:	bf 2b       	or	r27, r31
    7a2a:	11 f4       	brne	.+4      	; 0x7a30 <__fp_round+0x18>
    7a2c:	60 ff       	sbrs	r22, 0
    7a2e:	04 c0       	rjmp	.+8      	; 0x7a38 <__fp_round+0x20>
    7a30:	6f 5f       	subi	r22, 0xFF	; 255
    7a32:	7f 4f       	sbci	r23, 0xFF	; 255
    7a34:	8f 4f       	sbci	r24, 0xFF	; 255
    7a36:	9f 4f       	sbci	r25, 0xFF	; 255
    7a38:	08 95       	ret

00007a3a <__fp_split3>:
    7a3a:	57 fd       	sbrc	r21, 7
    7a3c:	90 58       	subi	r25, 0x80	; 128
    7a3e:	44 0f       	add	r20, r20
    7a40:	55 1f       	adc	r21, r21
    7a42:	59 f0       	breq	.+22     	; 0x7a5a <__fp_splitA+0x10>
    7a44:	5f 3f       	cpi	r21, 0xFF	; 255
    7a46:	71 f0       	breq	.+28     	; 0x7a64 <__fp_splitA+0x1a>
    7a48:	47 95       	ror	r20

00007a4a <__fp_splitA>:
    7a4a:	88 0f       	add	r24, r24
    7a4c:	97 fb       	bst	r25, 7
    7a4e:	99 1f       	adc	r25, r25
    7a50:	61 f0       	breq	.+24     	; 0x7a6a <__fp_splitA+0x20>
    7a52:	9f 3f       	cpi	r25, 0xFF	; 255
    7a54:	79 f0       	breq	.+30     	; 0x7a74 <__fp_splitA+0x2a>
    7a56:	87 95       	ror	r24
    7a58:	08 95       	ret
    7a5a:	12 16       	cp	r1, r18
    7a5c:	13 06       	cpc	r1, r19
    7a5e:	14 06       	cpc	r1, r20
    7a60:	55 1f       	adc	r21, r21
    7a62:	f2 cf       	rjmp	.-28     	; 0x7a48 <__fp_split3+0xe>
    7a64:	46 95       	lsr	r20
    7a66:	f1 df       	rcall	.-30     	; 0x7a4a <__fp_splitA>
    7a68:	08 c0       	rjmp	.+16     	; 0x7a7a <__fp_splitA+0x30>
    7a6a:	16 16       	cp	r1, r22
    7a6c:	17 06       	cpc	r1, r23
    7a6e:	18 06       	cpc	r1, r24
    7a70:	99 1f       	adc	r25, r25
    7a72:	f1 cf       	rjmp	.-30     	; 0x7a56 <__fp_splitA+0xc>
    7a74:	86 95       	lsr	r24
    7a76:	71 05       	cpc	r23, r1
    7a78:	61 05       	cpc	r22, r1
    7a7a:	08 94       	sec
    7a7c:	08 95       	ret

00007a7e <__fp_zero>:
    7a7e:	e8 94       	clt

00007a80 <__fp_szero>:
    7a80:	bb 27       	eor	r27, r27
    7a82:	66 27       	eor	r22, r22
    7a84:	77 27       	eor	r23, r23
    7a86:	cb 01       	movw	r24, r22
    7a88:	97 f9       	bld	r25, 7
    7a8a:	08 95       	ret

00007a8c <__gesf2>:
    7a8c:	8a df       	rcall	.-236    	; 0x79a2 <__fp_cmp>
    7a8e:	08 f4       	brcc	.+2      	; 0x7a92 <__gesf2+0x6>
    7a90:	8f ef       	ldi	r24, 0xFF	; 255
    7a92:	08 95       	ret

00007a94 <__mulsf3>:
    7a94:	0b d0       	rcall	.+22     	; 0x7aac <__mulsf3x>
    7a96:	c0 cf       	rjmp	.-128    	; 0x7a18 <__fp_round>
    7a98:	b1 df       	rcall	.-158    	; 0x79fc <__fp_pscA>
    7a9a:	28 f0       	brcs	.+10     	; 0x7aa6 <__mulsf3+0x12>
    7a9c:	b6 df       	rcall	.-148    	; 0x7a0a <__fp_pscB>
    7a9e:	18 f0       	brcs	.+6      	; 0x7aa6 <__mulsf3+0x12>
    7aa0:	95 23       	and	r25, r21
    7aa2:	09 f0       	breq	.+2      	; 0x7aa6 <__mulsf3+0x12>
    7aa4:	a2 cf       	rjmp	.-188    	; 0x79ea <__fp_inf>
    7aa6:	a7 cf       	rjmp	.-178    	; 0x79f6 <__fp_nan>
    7aa8:	11 24       	eor	r1, r1
    7aaa:	ea cf       	rjmp	.-44     	; 0x7a80 <__fp_szero>

00007aac <__mulsf3x>:
    7aac:	c6 df       	rcall	.-116    	; 0x7a3a <__fp_split3>
    7aae:	a0 f3       	brcs	.-24     	; 0x7a98 <__mulsf3+0x4>

00007ab0 <__mulsf3_pse>:
    7ab0:	95 9f       	mul	r25, r21
    7ab2:	d1 f3       	breq	.-12     	; 0x7aa8 <__mulsf3+0x14>
    7ab4:	95 0f       	add	r25, r21
    7ab6:	50 e0       	ldi	r21, 0x00	; 0
    7ab8:	55 1f       	adc	r21, r21
    7aba:	62 9f       	mul	r22, r18
    7abc:	f0 01       	movw	r30, r0
    7abe:	72 9f       	mul	r23, r18
    7ac0:	bb 27       	eor	r27, r27
    7ac2:	f0 0d       	add	r31, r0
    7ac4:	b1 1d       	adc	r27, r1
    7ac6:	63 9f       	mul	r22, r19
    7ac8:	aa 27       	eor	r26, r26
    7aca:	f0 0d       	add	r31, r0
    7acc:	b1 1d       	adc	r27, r1
    7ace:	aa 1f       	adc	r26, r26
    7ad0:	64 9f       	mul	r22, r20
    7ad2:	66 27       	eor	r22, r22
    7ad4:	b0 0d       	add	r27, r0
    7ad6:	a1 1d       	adc	r26, r1
    7ad8:	66 1f       	adc	r22, r22
    7ada:	82 9f       	mul	r24, r18
    7adc:	22 27       	eor	r18, r18
    7ade:	b0 0d       	add	r27, r0
    7ae0:	a1 1d       	adc	r26, r1
    7ae2:	62 1f       	adc	r22, r18
    7ae4:	73 9f       	mul	r23, r19
    7ae6:	b0 0d       	add	r27, r0
    7ae8:	a1 1d       	adc	r26, r1
    7aea:	62 1f       	adc	r22, r18
    7aec:	83 9f       	mul	r24, r19
    7aee:	a0 0d       	add	r26, r0
    7af0:	61 1d       	adc	r22, r1
    7af2:	22 1f       	adc	r18, r18
    7af4:	74 9f       	mul	r23, r20
    7af6:	33 27       	eor	r19, r19
    7af8:	a0 0d       	add	r26, r0
    7afa:	61 1d       	adc	r22, r1
    7afc:	23 1f       	adc	r18, r19
    7afe:	84 9f       	mul	r24, r20
    7b00:	60 0d       	add	r22, r0
    7b02:	21 1d       	adc	r18, r1
    7b04:	82 2f       	mov	r24, r18
    7b06:	76 2f       	mov	r23, r22
    7b08:	6a 2f       	mov	r22, r26
    7b0a:	11 24       	eor	r1, r1
    7b0c:	9f 57       	subi	r25, 0x7F	; 127
    7b0e:	50 40       	sbci	r21, 0x00	; 0
    7b10:	8a f0       	brmi	.+34     	; 0x7b34 <__mulsf3_pse+0x84>
    7b12:	e1 f0       	breq	.+56     	; 0x7b4c <__mulsf3_pse+0x9c>
    7b14:	88 23       	and	r24, r24
    7b16:	4a f0       	brmi	.+18     	; 0x7b2a <__mulsf3_pse+0x7a>
    7b18:	ee 0f       	add	r30, r30
    7b1a:	ff 1f       	adc	r31, r31
    7b1c:	bb 1f       	adc	r27, r27
    7b1e:	66 1f       	adc	r22, r22
    7b20:	77 1f       	adc	r23, r23
    7b22:	88 1f       	adc	r24, r24
    7b24:	91 50       	subi	r25, 0x01	; 1
    7b26:	50 40       	sbci	r21, 0x00	; 0
    7b28:	a9 f7       	brne	.-22     	; 0x7b14 <__mulsf3_pse+0x64>
    7b2a:	9e 3f       	cpi	r25, 0xFE	; 254
    7b2c:	51 05       	cpc	r21, r1
    7b2e:	70 f0       	brcs	.+28     	; 0x7b4c <__mulsf3_pse+0x9c>
    7b30:	5c cf       	rjmp	.-328    	; 0x79ea <__fp_inf>
    7b32:	a6 cf       	rjmp	.-180    	; 0x7a80 <__fp_szero>
    7b34:	5f 3f       	cpi	r21, 0xFF	; 255
    7b36:	ec f3       	brlt	.-6      	; 0x7b32 <__mulsf3_pse+0x82>
    7b38:	98 3e       	cpi	r25, 0xE8	; 232
    7b3a:	dc f3       	brlt	.-10     	; 0x7b32 <__mulsf3_pse+0x82>
    7b3c:	86 95       	lsr	r24
    7b3e:	77 95       	ror	r23
    7b40:	67 95       	ror	r22
    7b42:	b7 95       	ror	r27
    7b44:	f7 95       	ror	r31
    7b46:	e7 95       	ror	r30
    7b48:	9f 5f       	subi	r25, 0xFF	; 255
    7b4a:	c1 f7       	brne	.-16     	; 0x7b3c <__mulsf3_pse+0x8c>
    7b4c:	fe 2b       	or	r31, r30
    7b4e:	88 0f       	add	r24, r24
    7b50:	91 1d       	adc	r25, r1
    7b52:	96 95       	lsr	r25
    7b54:	87 95       	ror	r24
    7b56:	97 f9       	bld	r25, 7
    7b58:	08 95       	ret

00007b5a <__udivmodhi4>:
    7b5a:	aa 1b       	sub	r26, r26
    7b5c:	bb 1b       	sub	r27, r27
    7b5e:	51 e1       	ldi	r21, 0x11	; 17
    7b60:	07 c0       	rjmp	.+14     	; 0x7b70 <__udivmodhi4_ep>

00007b62 <__udivmodhi4_loop>:
    7b62:	aa 1f       	adc	r26, r26
    7b64:	bb 1f       	adc	r27, r27
    7b66:	a6 17       	cp	r26, r22
    7b68:	b7 07       	cpc	r27, r23
    7b6a:	10 f0       	brcs	.+4      	; 0x7b70 <__udivmodhi4_ep>
    7b6c:	a6 1b       	sub	r26, r22
    7b6e:	b7 0b       	sbc	r27, r23

00007b70 <__udivmodhi4_ep>:
    7b70:	88 1f       	adc	r24, r24
    7b72:	99 1f       	adc	r25, r25
    7b74:	5a 95       	dec	r21
    7b76:	a9 f7       	brne	.-22     	; 0x7b62 <__udivmodhi4_loop>
    7b78:	80 95       	com	r24
    7b7a:	90 95       	com	r25
    7b7c:	bc 01       	movw	r22, r24
    7b7e:	cd 01       	movw	r24, r26
    7b80:	08 95       	ret

00007b82 <__divmodhi4>:
    7b82:	97 fb       	bst	r25, 7
    7b84:	07 2e       	mov	r0, r23
    7b86:	16 f4       	brtc	.+4      	; 0x7b8c <__divmodhi4+0xa>
    7b88:	00 94       	com	r0
    7b8a:	07 d0       	rcall	.+14     	; 0x7b9a <__divmodhi4_neg1>
    7b8c:	77 fd       	sbrc	r23, 7
    7b8e:	09 d0       	rcall	.+18     	; 0x7ba2 <__divmodhi4_neg2>
    7b90:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__udivmodhi4>
    7b94:	07 fc       	sbrc	r0, 7
    7b96:	05 d0       	rcall	.+10     	; 0x7ba2 <__divmodhi4_neg2>
    7b98:	3e f4       	brtc	.+14     	; 0x7ba8 <__divmodhi4_exit>

00007b9a <__divmodhi4_neg1>:
    7b9a:	90 95       	com	r25
    7b9c:	81 95       	neg	r24
    7b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba0:	08 95       	ret

00007ba2 <__divmodhi4_neg2>:
    7ba2:	70 95       	com	r23
    7ba4:	61 95       	neg	r22
    7ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00007ba8 <__divmodhi4_exit>:
    7ba8:	08 95       	ret

00007baa <__divmodsi4>:
    7baa:	05 2e       	mov	r0, r21
    7bac:	97 fb       	bst	r25, 7
    7bae:	1e f4       	brtc	.+6      	; 0x7bb6 <__divmodsi4+0xc>
    7bb0:	00 94       	com	r0
    7bb2:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <__negsi2>
    7bb6:	57 fd       	sbrc	r21, 7
    7bb8:	07 d0       	rcall	.+14     	; 0x7bc8 <__divmodsi4_neg2>
    7bba:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <__udivmodsi4>
    7bbe:	07 fc       	sbrc	r0, 7
    7bc0:	03 d0       	rcall	.+6      	; 0x7bc8 <__divmodsi4_neg2>
    7bc2:	4e f4       	brtc	.+18     	; 0x7bd6 <__divmodsi4_exit>
    7bc4:	0c 94 ec 3d 	jmp	0x7bd8	; 0x7bd8 <__negsi2>

00007bc8 <__divmodsi4_neg2>:
    7bc8:	50 95       	com	r21
    7bca:	40 95       	com	r20
    7bcc:	30 95       	com	r19
    7bce:	21 95       	neg	r18
    7bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    7bd2:	4f 4f       	sbci	r20, 0xFF	; 255
    7bd4:	5f 4f       	sbci	r21, 0xFF	; 255

00007bd6 <__divmodsi4_exit>:
    7bd6:	08 95       	ret

00007bd8 <__negsi2>:
    7bd8:	90 95       	com	r25
    7bda:	80 95       	com	r24
    7bdc:	70 95       	com	r23
    7bde:	61 95       	neg	r22
    7be0:	7f 4f       	sbci	r23, 0xFF	; 255
    7be2:	8f 4f       	sbci	r24, 0xFF	; 255
    7be4:	9f 4f       	sbci	r25, 0xFF	; 255
    7be6:	08 95       	ret

00007be8 <__tablejump2__>:
    7be8:	ee 0f       	add	r30, r30
    7bea:	ff 1f       	adc	r31, r31

00007bec <__tablejump__>:
    7bec:	05 90       	lpm	r0, Z+
    7bee:	f4 91       	lpm	r31, Z
    7bf0:	e0 2d       	mov	r30, r0
    7bf2:	09 94       	ijmp

00007bf4 <__mulhisi3>:
    7bf4:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <__umulhisi3>
    7bf8:	33 23       	and	r19, r19
    7bfa:	12 f4       	brpl	.+4      	; 0x7c00 <__mulhisi3+0xc>
    7bfc:	8a 1b       	sub	r24, r26
    7bfe:	9b 0b       	sbc	r25, r27
    7c00:	0c 94 13 3e 	jmp	0x7c26	; 0x7c26 <__usmulhisi3_tail>

00007c04 <__umulhisi3>:
    7c04:	a2 9f       	mul	r26, r18
    7c06:	b0 01       	movw	r22, r0
    7c08:	b3 9f       	mul	r27, r19
    7c0a:	c0 01       	movw	r24, r0
    7c0c:	a3 9f       	mul	r26, r19
    7c0e:	70 0d       	add	r23, r0
    7c10:	81 1d       	adc	r24, r1
    7c12:	11 24       	eor	r1, r1
    7c14:	91 1d       	adc	r25, r1
    7c16:	b2 9f       	mul	r27, r18
    7c18:	70 0d       	add	r23, r0
    7c1a:	81 1d       	adc	r24, r1
    7c1c:	11 24       	eor	r1, r1
    7c1e:	91 1d       	adc	r25, r1
    7c20:	08 95       	ret

00007c22 <__usmulhisi3>:
    7c22:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <__umulhisi3>

00007c26 <__usmulhisi3_tail>:
    7c26:	b7 ff       	sbrs	r27, 7
    7c28:	08 95       	ret
    7c2a:	82 1b       	sub	r24, r18
    7c2c:	93 0b       	sbc	r25, r19
    7c2e:	08 95       	ret

00007c30 <__muluhisi3>:
    7c30:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <__umulhisi3>
    7c34:	a5 9f       	mul	r26, r21
    7c36:	90 0d       	add	r25, r0
    7c38:	b4 9f       	mul	r27, r20
    7c3a:	90 0d       	add	r25, r0
    7c3c:	a4 9f       	mul	r26, r20
    7c3e:	80 0d       	add	r24, r0
    7c40:	91 1d       	adc	r25, r1
    7c42:	11 24       	eor	r1, r1
    7c44:	08 95       	ret

00007c46 <__mulshisi3>:
    7c46:	b7 ff       	sbrs	r27, 7
    7c48:	0c 94 18 3e 	jmp	0x7c30	; 0x7c30 <__muluhisi3>

00007c4c <__mulohisi3>:
    7c4c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__muluhisi3>
    7c50:	82 1b       	sub	r24, r18
    7c52:	93 0b       	sbc	r25, r19
    7c54:	08 95       	ret

00007c56 <__prologue_saves__>:
    7c56:	2f 92       	push	r2
    7c58:	3f 92       	push	r3
    7c5a:	4f 92       	push	r4
    7c5c:	5f 92       	push	r5
    7c5e:	6f 92       	push	r6
    7c60:	7f 92       	push	r7
    7c62:	8f 92       	push	r8
    7c64:	9f 92       	push	r9
    7c66:	af 92       	push	r10
    7c68:	bf 92       	push	r11
    7c6a:	cf 92       	push	r12
    7c6c:	df 92       	push	r13
    7c6e:	ef 92       	push	r14
    7c70:	ff 92       	push	r15
    7c72:	0f 93       	push	r16
    7c74:	1f 93       	push	r17
    7c76:	cf 93       	push	r28
    7c78:	df 93       	push	r29
    7c7a:	cd b7       	in	r28, 0x3d	; 61
    7c7c:	de b7       	in	r29, 0x3e	; 62
    7c7e:	ca 1b       	sub	r28, r26
    7c80:	db 0b       	sbc	r29, r27
    7c82:	0f b6       	in	r0, 0x3f	; 63
    7c84:	f8 94       	cli
    7c86:	de bf       	out	0x3e, r29	; 62
    7c88:	0f be       	out	0x3f, r0	; 63
    7c8a:	cd bf       	out	0x3d, r28	; 61
    7c8c:	09 94       	ijmp

00007c8e <__epilogue_restores__>:
    7c8e:	2a 88       	ldd	r2, Y+18	; 0x12
    7c90:	39 88       	ldd	r3, Y+17	; 0x11
    7c92:	48 88       	ldd	r4, Y+16	; 0x10
    7c94:	5f 84       	ldd	r5, Y+15	; 0x0f
    7c96:	6e 84       	ldd	r6, Y+14	; 0x0e
    7c98:	7d 84       	ldd	r7, Y+13	; 0x0d
    7c9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7c9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7c9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7ca0:	b9 84       	ldd	r11, Y+9	; 0x09
    7ca2:	c8 84       	ldd	r12, Y+8	; 0x08
    7ca4:	df 80       	ldd	r13, Y+7	; 0x07
    7ca6:	ee 80       	ldd	r14, Y+6	; 0x06
    7ca8:	fd 80       	ldd	r15, Y+5	; 0x05
    7caa:	0c 81       	ldd	r16, Y+4	; 0x04
    7cac:	1b 81       	ldd	r17, Y+3	; 0x03
    7cae:	aa 81       	ldd	r26, Y+2	; 0x02
    7cb0:	b9 81       	ldd	r27, Y+1	; 0x01
    7cb2:	ce 0f       	add	r28, r30
    7cb4:	d1 1d       	adc	r29, r1
    7cb6:	0f b6       	in	r0, 0x3f	; 63
    7cb8:	f8 94       	cli
    7cba:	de bf       	out	0x3e, r29	; 62
    7cbc:	0f be       	out	0x3f, r0	; 63
    7cbe:	cd bf       	out	0x3d, r28	; 61
    7cc0:	ed 01       	movw	r28, r26
    7cc2:	08 95       	ret

00007cc4 <__udivmodsi4>:
    7cc4:	a1 e2       	ldi	r26, 0x21	; 33
    7cc6:	1a 2e       	mov	r1, r26
    7cc8:	aa 1b       	sub	r26, r26
    7cca:	bb 1b       	sub	r27, r27
    7ccc:	fd 01       	movw	r30, r26
    7cce:	0d c0       	rjmp	.+26     	; 0x7cea <__udivmodsi4_ep>

00007cd0 <__udivmodsi4_loop>:
    7cd0:	aa 1f       	adc	r26, r26
    7cd2:	bb 1f       	adc	r27, r27
    7cd4:	ee 1f       	adc	r30, r30
    7cd6:	ff 1f       	adc	r31, r31
    7cd8:	a2 17       	cp	r26, r18
    7cda:	b3 07       	cpc	r27, r19
    7cdc:	e4 07       	cpc	r30, r20
    7cde:	f5 07       	cpc	r31, r21
    7ce0:	20 f0       	brcs	.+8      	; 0x7cea <__udivmodsi4_ep>
    7ce2:	a2 1b       	sub	r26, r18
    7ce4:	b3 0b       	sbc	r27, r19
    7ce6:	e4 0b       	sbc	r30, r20
    7ce8:	f5 0b       	sbc	r31, r21

00007cea <__udivmodsi4_ep>:
    7cea:	66 1f       	adc	r22, r22
    7cec:	77 1f       	adc	r23, r23
    7cee:	88 1f       	adc	r24, r24
    7cf0:	99 1f       	adc	r25, r25
    7cf2:	1a 94       	dec	r1
    7cf4:	69 f7       	brne	.-38     	; 0x7cd0 <__udivmodsi4_loop>
    7cf6:	60 95       	com	r22
    7cf8:	70 95       	com	r23
    7cfa:	80 95       	com	r24
    7cfc:	90 95       	com	r25
    7cfe:	9b 01       	movw	r18, r22
    7d00:	ac 01       	movw	r20, r24
    7d02:	bd 01       	movw	r22, r26
    7d04:	cf 01       	movw	r24, r30
    7d06:	08 95       	ret

00007d08 <memcpy_P>:
    7d08:	fb 01       	movw	r30, r22
    7d0a:	dc 01       	movw	r26, r24
    7d0c:	02 c0       	rjmp	.+4      	; 0x7d12 <memcpy_P+0xa>
    7d0e:	05 90       	lpm	r0, Z+
    7d10:	0d 92       	st	X+, r0
    7d12:	41 50       	subi	r20, 0x01	; 1
    7d14:	50 40       	sbci	r21, 0x00	; 0
    7d16:	d8 f7       	brcc	.-10     	; 0x7d0e <memcpy_P+0x6>
    7d18:	08 95       	ret

00007d1a <__itoa_ncheck>:
    7d1a:	bb 27       	eor	r27, r27
    7d1c:	4a 30       	cpi	r20, 0x0A	; 10
    7d1e:	31 f4       	brne	.+12     	; 0x7d2c <__itoa_ncheck+0x12>
    7d20:	99 23       	and	r25, r25
    7d22:	22 f4       	brpl	.+8      	; 0x7d2c <__itoa_ncheck+0x12>
    7d24:	bd e2       	ldi	r27, 0x2D	; 45
    7d26:	90 95       	com	r25
    7d28:	81 95       	neg	r24
    7d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d2c:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__utoa_common>

00007d30 <__utoa_ncheck>:
    7d30:	bb 27       	eor	r27, r27

00007d32 <__utoa_common>:
    7d32:	fb 01       	movw	r30, r22
    7d34:	55 27       	eor	r21, r21
    7d36:	aa 27       	eor	r26, r26
    7d38:	88 0f       	add	r24, r24
    7d3a:	99 1f       	adc	r25, r25
    7d3c:	aa 1f       	adc	r26, r26
    7d3e:	a4 17       	cp	r26, r20
    7d40:	10 f0       	brcs	.+4      	; 0x7d46 <__utoa_common+0x14>
    7d42:	a4 1b       	sub	r26, r20
    7d44:	83 95       	inc	r24
    7d46:	50 51       	subi	r21, 0x10	; 16
    7d48:	b9 f7       	brne	.-18     	; 0x7d38 <__utoa_common+0x6>
    7d4a:	a0 5d       	subi	r26, 0xD0	; 208
    7d4c:	aa 33       	cpi	r26, 0x3A	; 58
    7d4e:	08 f0       	brcs	.+2      	; 0x7d52 <__utoa_common+0x20>
    7d50:	a9 5d       	subi	r26, 0xD9	; 217
    7d52:	a1 93       	st	Z+, r26
    7d54:	00 97       	sbiw	r24, 0x00	; 0
    7d56:	79 f7       	brne	.-34     	; 0x7d36 <__utoa_common+0x4>
    7d58:	b1 11       	cpse	r27, r1
    7d5a:	b1 93       	st	Z+, r27
    7d5c:	11 92       	st	Z+, r1
    7d5e:	cb 01       	movw	r24, r22
    7d60:	0c 94 d8 3e 	jmp	0x7db0	; 0x7db0 <strrev>

00007d64 <__eerd_block_m324pa>:
    7d64:	dc 01       	movw	r26, r24
    7d66:	cb 01       	movw	r24, r22

00007d68 <__eerd_blraw_m324pa>:
    7d68:	fc 01       	movw	r30, r24
    7d6a:	f9 99       	sbic	0x1f, 1	; 31
    7d6c:	fe cf       	rjmp	.-4      	; 0x7d6a <__eerd_blraw_m324pa+0x2>
    7d6e:	06 c0       	rjmp	.+12     	; 0x7d7c <__eerd_blraw_m324pa+0x14>
    7d70:	f2 bd       	out	0x22, r31	; 34
    7d72:	e1 bd       	out	0x21, r30	; 33
    7d74:	f8 9a       	sbi	0x1f, 0	; 31
    7d76:	31 96       	adiw	r30, 0x01	; 1
    7d78:	00 b4       	in	r0, 0x20	; 32
    7d7a:	0d 92       	st	X+, r0
    7d7c:	41 50       	subi	r20, 0x01	; 1
    7d7e:	50 40       	sbci	r21, 0x00	; 0
    7d80:	b8 f7       	brcc	.-18     	; 0x7d70 <__eerd_blraw_m324pa+0x8>
    7d82:	08 95       	ret

00007d84 <__eerd_byte_m324pa>:
    7d84:	f9 99       	sbic	0x1f, 1	; 31
    7d86:	fe cf       	rjmp	.-4      	; 0x7d84 <__eerd_byte_m324pa>
    7d88:	92 bd       	out	0x22, r25	; 34
    7d8a:	81 bd       	out	0x21, r24	; 33
    7d8c:	f8 9a       	sbi	0x1f, 0	; 31
    7d8e:	99 27       	eor	r25, r25
    7d90:	80 b5       	in	r24, 0x20	; 32
    7d92:	08 95       	ret

00007d94 <__eewr_byte_m324pa>:
    7d94:	26 2f       	mov	r18, r22

00007d96 <__eewr_r18_m324pa>:
    7d96:	f9 99       	sbic	0x1f, 1	; 31
    7d98:	fe cf       	rjmp	.-4      	; 0x7d96 <__eewr_r18_m324pa>
    7d9a:	1f ba       	out	0x1f, r1	; 31
    7d9c:	92 bd       	out	0x22, r25	; 34
    7d9e:	81 bd       	out	0x21, r24	; 33
    7da0:	20 bd       	out	0x20, r18	; 32
    7da2:	0f b6       	in	r0, 0x3f	; 63
    7da4:	f8 94       	cli
    7da6:	fa 9a       	sbi	0x1f, 2	; 31
    7da8:	f9 9a       	sbi	0x1f, 1	; 31
    7daa:	0f be       	out	0x3f, r0	; 63
    7dac:	01 96       	adiw	r24, 0x01	; 1
    7dae:	08 95       	ret

00007db0 <strrev>:
    7db0:	dc 01       	movw	r26, r24
    7db2:	fc 01       	movw	r30, r24
    7db4:	67 2f       	mov	r22, r23
    7db6:	71 91       	ld	r23, Z+
    7db8:	77 23       	and	r23, r23
    7dba:	e1 f7       	brne	.-8      	; 0x7db4 <strrev+0x4>
    7dbc:	32 97       	sbiw	r30, 0x02	; 2
    7dbe:	04 c0       	rjmp	.+8      	; 0x7dc8 <strrev+0x18>
    7dc0:	7c 91       	ld	r23, X
    7dc2:	6d 93       	st	X+, r22
    7dc4:	70 83       	st	Z, r23
    7dc6:	62 91       	ld	r22, -Z
    7dc8:	ae 17       	cp	r26, r30
    7dca:	bf 07       	cpc	r27, r31
    7dcc:	c8 f3       	brcs	.-14     	; 0x7dc0 <strrev+0x10>
    7dce:	08 95       	ret

00007dd0 <_exit>:
    7dd0:	f8 94       	cli

00007dd2 <__stop_program>:
    7dd2:	ff cf       	rjmp	.-2      	; 0x7dd2 <__stop_program>
