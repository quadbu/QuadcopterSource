
OpenAero2_2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040c  00800100  00008606  0000869a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e5  0080050c  0080050c  00008aa6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008aa6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000628  00000000  00000000  00008ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013162  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003633  00000000  00000000  0001c262  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040d4  00000000  00000000  0001f895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000131c  00000000  00000000  0002396c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000269a  00000000  00000000  00024c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000080f5  00000000  00000000  00027322  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d0  00000000  00000000  0002f417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__ctors_end>
       4:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
       8:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
       c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      10:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      14:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      18:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      1c:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__vector_7>
      20:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      24:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      28:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      2c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      30:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      34:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      38:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      3c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      40:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      44:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      48:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__vector_18>
      4c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      50:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__vector_20>
      54:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      58:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      5c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      60:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      64:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      68:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      6c:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      70:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      74:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      78:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__bad_interrupt>
      7c:	87 15       	cp	r24, r7
      7e:	e2 15       	cp	r30, r2
      80:	e2 15       	cp	r30, r2
      82:	97 15       	cp	r25, r7
      84:	a4 15       	cp	r26, r4
      86:	ae 15       	cp	r26, r14
      88:	aa 15       	cp	r26, r10
      8a:	b9 15       	cp	r27, r9
      8c:	c6 15       	cp	r28, r6
      8e:	ca 15       	cp	r28, r10
      90:	d7 15       	cp	r29, r7
      92:	37 2d       	mov	r19, r7
      94:	39 2d       	mov	r19, r9
      96:	3c 2d       	mov	r19, r12
      98:	3e 2d       	mov	r19, r14
      9a:	40 2d       	mov	r20, r0
      9c:	42 2d       	mov	r20, r2
      9e:	45 2d       	mov	r20, r5
      a0:	47 2d       	mov	r20, r7
      a2:	49 2d       	mov	r20, r9
      a4:	4b 2d       	mov	r20, r11
      a6:	4d 2d       	mov	r20, r13
      a8:	4f 2d       	mov	r20, r15
      aa:	51 2d       	mov	r21, r1
      ac:	53 2d       	mov	r21, r3
      ae:	55 2d       	mov	r21, r5
      b0:	57 2d       	mov	r21, r7
      b2:	59 2d       	mov	r21, r9
      b4:	5c 2d       	mov	r21, r12
      b6:	5e 2d       	mov	r21, r14
      b8:	60 2d       	mov	r22, r0
      ba:	62 2d       	mov	r22, r2
      bc:	64 2d       	mov	r22, r4
      be:	66 2d       	mov	r22, r6
      c0:	78 31       	cpi	r23, 0x18	; 24
      c2:	5c 31       	cpi	r21, 0x1C	; 28
      c4:	5f 31       	cpi	r21, 0x1F	; 31
      c6:	62 31       	cpi	r22, 0x12	; 18
      c8:	65 31       	cpi	r22, 0x15	; 21
      ca:	68 31       	cpi	r22, 0x18	; 24
      cc:	6b 31       	cpi	r22, 0x1B	; 27
      ce:	6e 31       	cpi	r22, 0x1E	; 30
      d0:	71 31       	cpi	r23, 0x11	; 17

000000d2 <Acc_Pol>:
      d2:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      e2:	ff ff                                               ..

000000e4 <ACC_RPY_Order>:
      e4:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      f4:	02 01                                               ..

000000f6 <FUTABA>:
      f6:	01 02 00 03 04 05 06 07                             ........

000000fe <JR>:
      fe:	00 01 02 03 04 05 06 07                             ........

00000106 <Wingdings>:
     106:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     116:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     126:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     136:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     146:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     156:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     166:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000170 <Verdana14>:
     170:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     180:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     190:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a0:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b0:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c0:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d0:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e0:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f0:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     200:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     210:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     220:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     230:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     240:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     250:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     260:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     270:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     280:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     290:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a0:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b0:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c0:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d0:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e0:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f0:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     300:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     310:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     320:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     330:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     340:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     350:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     360:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     370:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     380:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     390:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a0:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b0:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c0:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d0:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e0:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f0:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     400:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     410:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     420:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     430:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     440:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     450:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     460:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     470:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     480:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     490:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a0:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b0:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c0:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d0:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e0:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f0:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     500:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     510:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     520:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     530:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     540:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     550:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     560:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     570:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     580:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     590:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a0:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b0:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c0:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d0:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e0:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f0:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     600:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     610:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     620:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     630:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     640:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     650:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     660:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     670:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     680:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     690:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a0:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b0:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c0:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d0:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e0:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f0:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     700:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     710:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     720:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     730:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     740:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     750:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     760:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     770:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     780:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     790:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a0:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b0:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c0:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d0:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e0:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f0:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     800:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     810:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     820:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     830:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     840:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     850:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     860:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     870:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     880:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     890:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a0:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b0:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c0:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d0:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e0:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f0:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     900:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     910:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     920:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     930:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     940:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     950:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     960:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     970:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     980:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     990:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a0:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b0:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c0:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d0:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e0:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f0:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a00:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a10:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a1e <Verdana8>:
     a1e:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a2e:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a3e:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a4e:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a5e:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a6e:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a7e:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a8e:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a9e:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     aae:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     abe:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ace:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ade:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     aee:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     afe:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b0e:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b1e:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b2e:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b3e:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b4e:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b5e:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b6e:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b7e:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b8e:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b9e:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bae:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bbe:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bce:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bde:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bee:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bfe:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c0e:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c1e:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c2e:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c3e:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c4e:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c5e:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c6e:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c7e:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c8e:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c9e:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cae:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cbe:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cce:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cde:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cee:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cfe:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d0e:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d1e:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d2e:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d3e:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d4e:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d5e:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d6e:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d7e:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d8e:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d9e:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     dae:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dbe:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dce:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     dde:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     dee:	01                                                  .

00000def <lcd_commmands>:
     def:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dfd <pagemap>:
     dfd:	07 06 05 04 03 02 01 00                             ........

00000e05 <text_menu>:
     e05:	38 11 32 11 26 11 60 16 45 16 66 13 51 16 4f 16     8.2.&.`.E.f.Q.O.
     e15:	4d 16 43 16 3b 16 41 16 3f 16 3d 16 36 16 31 16     M.C.;.A.?.=.6.1.
     e25:	2c 16 27 16 23 10 72 11 6c 11 6b 14 29 12 22 12     ,.'.#.r.l.k.).".
     e35:	1b 12 23 10 91 14 8c 14 86 14 82 14 7e 14 23 10     ..#.........~.#.
     e45:	a2 11 99 11 aa 11 92 11 8d 11 74 14 80 13 7d 13     ..........t...}.
     e55:	72 13 23 10 23 10 23 10 85 10 7b 10 55 14 60 14     r.#.#.#...{.U.`.
     e65:	d9 12 d3 12 ca 12 c3 12 23 10 23 10 23 10 23 10     ........#.#.#.#.
     e75:	80 13 75 10 70 10 23 10 79 14 1a 11 80 13 1e 10     ..u.p.#.y.......
     e85:	19 10 14 10 0f 10 0a 10 05 10 00 10 fb 0f 23 10     ..............#.
     e95:	65 11 31 10 29 10 62 11 5b 11 1c 16 0a 16 f8 15     e.1.).b.[.......
     ea5:	e5 15 d1 15 bd 15 a9 15 93 15 84 15 76 15 68 15     ............v.h.
     eb5:	5a 15 4c 15 3e 15 30 15 22 15 14 15 02 15 ed 14     Z.L.>.0.".......
     ec5:	d8 14 c3 14 ad 14 96 14 23 10 80 13 7d 13 35 10     ........#...}.5.
     ed5:	23 10 aa 11 a2 11 99 11 92 11 8d 11 88 11 83 11     #...............
     ee5:	7e 11 79 11 23 10 23 10 c0 12 b9 12 23 10 31 10     ~.y.#.#.....#.1.
     ef5:	29 10 24 10 f2 10 e7 10 68 10 5f 10 56 10 52 10     ).$.....h._.V.R.
     f05:	49 10 41 10 55 11 50 11 4a 11 23 10 42 11 0c 11     I.A.U.P.J.#.B...
     f15:	fe 10 f8 10 e6 12 de 12 23 10 3a 10 35 10 80 13     ........#.:.5...
     f25:	7d 13 35 10 8c 14 86 14 82 14 66 13 59 13 4e 13     }.5.......f.Y.N.
     f35:	3f 13 2f 13 21 13 14 13 06 13 fa 12 5d 12 ed 12     ?./.!.......]...
     f45:	5a 16 52 12 99 11 a2 11 92 11 45 16 ac 12 a2 12     Z.R.......E.....
     f55:	95 12 8b 12 7f 12 75 12 68 12 23 10 23 10 23 10     ......u.h.#.#.#.
     f65:	aa 11 a2 11 99 11 92 11 8d 11 88 11 83 11 7e 11     ..............~.
     f75:	be 10 b4 10 ac 10 a4 10 9b 10 93 10 8a 10 79 11     ..............y.
     f85:	60 14 55 14 4a 14 42 14 3a 14 32 14 24 14 16 14     `.U.J.B.:.2.$...
     f95:	0b 14 ff 13 f6 13 ed 13 e4 13 d5 13 c6 13 ba 13     ................
     fa5:	b0 13 a9 13 a2 13 9b 13 8e 13 84 13 23 10 0e 12     ............#...
     fb5:	f6 11 01 12 f6 11 eb 11 df 11 d5 11 cb 11 c0 11     ................
     fc5:	b3 11 f6 11 b3 11 f6 11 23 10 23 10 23 10 23 10     ........#.#.#.#.
     fd5:	e3 10 df 10 db 10 d7 10 d3 10 cf 10 cb 10 c7 10     ................
     fe5:	79 11 4e 12 49 12 44 12 3f 12 3a 12 34 12 2e 12     y.N.I.D.?.:.4...
     ff5:	79 11 23 10 23 10                                   y.#.#.

00000ffb <VBAT39>:
     ffb:	33 2e 39 56 00                                      3.9V.

00001000 <VBAT38>:
    1000:	33 2e 38 56 00                                      3.8V.

00001005 <VBAT37>:
    1005:	33 2e 37 56 00                                      3.7V.

0000100a <VBAT36>:
    100a:	33 2e 36 56 00                                      3.6V.

0000100f <VBAT35>:
    100f:	33 2e 35 56 00                                      3.5V.

00001014 <VBAT34>:
    1014:	33 2e 34 56 00                                      3.4V.

00001019 <VBAT33>:
    1019:	33 2e 33 56 00                                      3.3V.

0000101e <VBAT32>:
    101e:	33 2e 32 56 00                                      3.2V.

00001023 <Dummy0>:
	...

00001024 <GeneralText50>:
    1024:	48 69 67 68 00                                      High.

00001029 <GeneralText5>:
    1029:	53 79 6e 63 20 52 43 00                             Sync RC.

00001031 <GeneralText4>:
    1031:	4c 6f 77 00                                         Low.

00001035 <MixerItem12>:
    1035:	52 65 76 2e 00                                      Rev..

0000103a <MixerItem11>:
    103a:	4e 6f 72 6d 61 6c 00                                Normal.

00001041 <MixerMenuItem7>:
    1041:	50 69 74 63 68 55 70 00                             PitchUp.

00001049 <MixerMenuItem6>:
    1049:	53 69 64 65 77 61 79 73 00                          Sideways.

00001052 <MixerMenuItem5>:
    1052:	41 66 74 00                                         Aft.

00001056 <MixerMenuItem4>:
    1056:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000105f <MixerMenuItem3>:
    105f:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001068 <MixerMenuItem2>:
    1068:	46 6f 72 77 61 72 64 00                             Forward.

00001070 <FSmode1>:
    1070:	41 64 76 2e 00                                      Adv..

00001075 <FSmode0>:
    1075:	46 69 78 65 64 00                                   Fixed.

0000107b <HeadingHold2>:
    107b:	41 78 69 73 20 6c 6f 63 6b 00                       Axis lock.

00001085 <HeadingHold1>:
    1085:	52 61 74 65 00                                      Rate.

0000108a <MixerItem81>:
    108a:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001093 <MixerItem80>:
    1093:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000109b <MixerItem74>:
    109b:	41 63 63 50 69 74 63 68 00                          AccPitch.

000010a4 <MixerItem73>:
    10a4:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000010ac <MixerItem72>:
    10ac:	47 79 72 6f 59 61 77 00                             GyroYaw.

000010b4 <MixerItem71>:
    10b4:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000010be <MixerItem70>:
    10be:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000010c7 <MOUT8>:
    10c7:	43 48 38 00                                         CH8.

000010cb <MOUT7>:
    10cb:	43 48 37 00                                         CH7.

000010cf <MOUT6>:
    10cf:	43 48 36 00                                         CH6.

000010d3 <MOUT5>:
    10d3:	43 48 35 00                                         CH5.

000010d7 <MOUT4>:
    10d7:	43 48 34 00                                         CH4.

000010db <MOUT3>:
    10db:	43 48 33 00                                         CH3.

000010df <MOUT2>:
    10df:	43 48 32 00                                         CH2.

000010e3 <MOUT1>:
    10e3:	43 48 31 00                                         CH1.

000010e7 <Status2>:
    10e7:	66 6f 72 20 73 74 61 74 75 73 00                    for status.

000010f2 <Status0>:
    10f2:	50 72 65 73 73 00                                   Press.

000010f8 <WizardText2>:
    10f8:	44 6f 6e 65 21 00                                   Done!.

000010fe <WizardText1>:
    10fe:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

0000110c <WizardText0>:
    110c:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 3f 00           No RX signal?.

0000111a <PText4>:
    111a:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001126 <PText2>:
    1126:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001132 <PText1>:
    1132:	52 65 73 65 74 00                                   Reset.

00001138 <PText0>:
    1138:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001142 <Status3>:
    1142:	42 61 74 74 65 72 79 00                             Battery.

0000114a <ErrorText7>:
    114a:	4d 6f 64 65 6c 00                                   Model.

00001150 <ErrorText6>:
    1150:	4c 6f 73 74 00                                      Lost.

00001155 <ErrorText5>:
    1155:	45 72 72 6f 72 00                                   Error.

0000115b <ErrorText4>:
    115b:	53 69 67 6e 61 6c 00                                Signal.

00001162 <ErrorText3>:
    1162:	4e 6f 00                                            No.

00001165 <ErrorText0>:
    1165:	53 65 6e 73 6f 72 00                                Sensor.

0000116c <ChannelRef12>:
    116c:	45 6c 65 76 2e 00                                   Elev..

00001172 <ChannelRef10>:
    1172:	54 68 72 6f 74 2e 00                                Throt..

00001179 <ChannelRef8>:
    1179:	4e 6f 6e 65 00                                      None.

0000117e <ChannelRef7>:
    117e:	41 55 58 33 00                                      AUX3.

00001183 <ChannelRef6>:
    1183:	41 55 58 32 00                                      AUX2.

00001188 <ChannelRef5>:
    1188:	41 55 58 31 00                                      AUX1.

0000118d <ChannelRef4>:
    118d:	47 65 61 72 00                                      Gear.

00001192 <ChannelRef3>:
    1192:	52 75 64 64 65 72 00                                Rudder.

00001199 <ChannelRef2>:
    1199:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000011a2 <ChannelRef1>:
    11a2:	41 69 6c 65 72 6f 6e 00                             Aileron.

000011aa <ChannelRef0>:
    11aa:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000011b3 <MixerItem15>:
    11b3:	45 78 74 2e 20 53 6f 75 72 63 65 3a 00              Ext. Source:.

000011c0 <MixerItem3>:
    11c0:	50 69 74 63 68 20 61 63 63 3a 00                    Pitch acc:.

000011cb <MixerItem7>:
    11cb:	52 6f 6c 6c 20 61 63 63 3a 00                       Roll acc:.

000011d5 <MixerItem6>:
    11d5:	59 61 77 20 67 79 72 6f 3a 00                       Yaw gyro:.

000011df <MixerItem5>:
    11df:	50 69 74 63 68 20 67 79 72 6f 3a 00                 Pitch gyro:.

000011eb <MixerItem4>:
    11eb:	52 6f 6c 6c 20 67 79 72 6f 3a 00                    Roll gyro:.

000011f6 <MixerItem2>:
    11f6:	56 6f 6c 75 6d 65 28 25 29 3a 00                    Volume(%):.

00001201 <MixerItem13>:
    1201:	52 43 20 73 6f 75 72 63 65 20 42 3a 00              RC source B:.

0000120e <MixerItem0>:
    120e:	52 43 20 73 6f 75 72 63 65 20 41 3a 00              RC source A:.

0000121b <RXMode6>:
    121b:	4d 61 6e 75 61 6c 00                                Manual.

00001222 <RXMode5>:
    1222:	46 2e 57 69 6e 67 00                                F.Wing.

00001229 <RXMode4>:
    1229:	41 65 72 6f 00                                      Aero.

0000122e <MPU6050LPF7>:
    122e:	32 36 30 48 7a 00                                   260Hz.

00001234 <MPU6050LPF6>:
    1234:	31 38 34 48 7a 00                                   184Hz.

0000123a <MPU6050LPF5>:
    123a:	39 34 48 7a 00                                      94Hz.

0000123f <MPU6050LPF4>:
    123f:	34 34 48 7a 00                                      44Hz.

00001244 <MPU6050LPF3>:
    1244:	32 31 48 7a 00                                      21Hz.

00001249 <MPU6050LPF2>:
    1249:	31 30 48 7a 00                                      10Hz.

0000124e <MPU6050LPF1>:
    124e:	35 48 7a 00                                         5Hz.

00001252 <AutoMenuItem16>:
    1252:	54 48 52 2e 70 6f 73 20 25 3a 00                    THR.pos %:.

0000125d <GeneralText9>:
    125d:	4c 6f 63 6b 20 72 61 74 65 3a 00                    Lock rate:.

00001268 <GeneralText20>:
    1268:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001275 <GeneralText6>:
    1275:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

0000127f <GeneralText7>:
    127f:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

0000128b <GeneralText2>:
    128b:	4c 4d 41 20 74 69 6d 65 3a 00                       LMA time:.

00001295 <BattMenuItem2>:
    1295:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000012a2 <Contrast0>:
    12a2:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000012ac <MixerMenuItem0>:
    12ac:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000012b9 <RCMenuItem7>:
    12b9:	46 75 74 61 62 61 00                                Futaba.

000012c0 <RCMenuItem6>:
    12c0:	4a 52 00                                            JR.

000012c3 <RXMode1>:
    12c3:	58 74 72 65 6d 65 00                                Xtreme.

000012ca <RXMode3>:
    12ca:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000012d3 <RXMode2>:
    12d3:	53 2e 42 75 73 00                                   S.Bus.

000012d9 <RXMode0>:
    12d9:	43 50 50 4d 00                                      CPPM.

000012de <RCMenuItem101>:
    12de:	54 78 20 4f 75 74 3a 00                             Tx Out:.

000012e6 <RCMenuItem100>:
    12e6:	52 78 20 49 6e 3a 00                                Rx In:.

000012ed <RCMenuItem21>:
    12ed:	44 65 61 64 62 61 6e 64 28 25 29 3a 00              Deadband(%):.

000012fa <RCMenuItem20>:
    12fa:	46 6c 61 70 20 73 70 65 65 64 3a 00                 Flap speed:.

00001306 <RCMenuItem11>:
    1306:	44 69 66 66 65 72 65 6e 74 69 61 6c 3a 00           Differential:.

00001314 <StabMenuItem15>:
    1314:	44 79 6e 2e 47 61 69 6e 28 25 29 3a 00              Dyn.Gain(%):.

00001321 <StabMenuItem14>:
    1321:	44 79 6e 2e 47 61 69 6e 20 43 68 2e 3a 00           Dyn.Gain Ch.:.

0000132f <RCMenuItem4>:
    132f:	32 6e 64 20 41 69 6c 2e 20 43 68 61 6e 2e 3a 00     2nd Ail. Chan.:.

0000133f <RCMenuItem2>:
    133f:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

0000134e <RCMenuItem0>:
    134e:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001359 <RCMenuItem51>:
    1359:	52 58 20 74 79 70 65 20 4f 55 54 3a 00              RX type OUT:.

00001366 <RCMenuItem1>:
    1366:	52 58 20 74 79 70 65 20 49 4e 3a 00                 RX type IN:.

00001372 <AutoMenuItem17>:
    1372:	48 61 6e 64 73 20 46 72 65 65 00                    Hands Free.

0000137d <AutoMenuItem15>:
    137d:	4f 4e 00                                            ON.

00001380 <AutoMenuItem11>:
    1380:	4f 46 46 00                                         OFF.

00001384 <StabMenuItem30>:
    1384:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

0000138e <StabMenuItem12>:
    138e:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

0000139b <StabMenuItem9>:
    139b:	59 61 77 20 44 3a 00                                Yaw D:.

000013a2 <StabMenuItem8>:
    13a2:	59 61 77 20 49 3a 00                                Yaw I:.

000013a9 <StabMenuItem7>:
    13a9:	59 61 77 20 50 3a 00                                Yaw P:.

000013b0 <GyroType3>:
    13b0:	59 61 77 20 67 79 72 6f 3a 00                       Yaw gyro:.

000013ba <AutoMenuItem8>:
    13ba:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000013c6 <AutoMenuItem21>:
    13c6:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000013d5 <StabMenuItem11>:
    13d5:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000013e4 <StabMenuItem6>:
    13e4:	50 69 74 63 68 20 44 3a 00                          Pitch D:.

000013ed <StabMenuItem5>:
    13ed:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000013f6 <AutoMenuItem4>:
    13f6:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000013ff <GyroType2>:
    13ff:	50 69 74 63 68 20 67 79 72 6f 3a 00                 Pitch gyro:.

0000140b <AutoMenuItem7>:
    140b:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00001416 <AutoMenuItem20>:
    1416:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001424 <StabMenuItem10>:
    1424:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001432 <StabMenuItem3>:
    1432:	52 6f 6c 6c 20 44 3a 00                             Roll D:.

0000143a <StabMenuItem2>:
    143a:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001442 <AutoMenuItem1>:
    1442:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

0000144a <GyroType1>:
    144a:	52 6f 6c 6c 20 67 79 72 6f 3a 00                    Roll gyro:.

00001455 <AutoMenuItem9>:
    1455:	41 75 74 6f 6c 65 76 65 6c 3a 00                    Autolevel:.

00001460 <AutoMenuItem10>:
    1460:	53 74 61 62 69 6c 69 74 79 3a 00                    Stability:.

0000146b <SensorMenuItem3>:
    146b:	46 61 69 6c 73 61 66 65 00                          Failsafe.

00001474 <SensorMenuItem2>:
    1474:	49 6e 76 2e 00                                      Inv..

00001479 <SensorMenuItem1>:
    1479:	43 61 6c 2e 00                                      Cal..

0000147e <PText19>:
    147e:	41 63 63 00                                         Acc.

00001482 <PText18>:
    1482:	59 61 77 00                                         Yaw.

00001486 <PText17>:
    1486:	50 69 74 63 68 00                                   Pitch.

0000148c <PText16>:
    148c:	52 6f 6c 6c 00                                      Roll.

00001491 <PText15>:
    1491:	47 79 72 6f 00                                      Gyro.

00001496 <MainMenuItem24>:
    1496:	32 33 2e 20 46 61 69 6c 73 61 66 65 20 70 6f 73     23. Failsafe pos
    14a6:	69 74 69 6f 6e 73 00                                itions.

000014ad <MainMenuItem4>:
    14ad:	32 32 2e 20 46 61 69 6c 73 61 66 65 20 73 65 74     22. Failsafe set
    14bd:	74 69 6e 67 73 00                                   tings.

000014c3 <MainMenuItem23>:
    14c3:	32 31 2e 20 50 6f 73 2e 20 74 72 61 76 65 6c 2e     21. Pos. travel.
    14d3:	20 28 25 29 00                                       (%).

000014d8 <MainMenuItem22>:
    14d8:	32 30 2e 20 4e 65 67 2e 20 74 72 61 76 65 6c 2e     20. Neg. travel.
    14e8:	20 28 25 29 00                                       (%).

000014ed <MainMenuItem21>:
    14ed:	31 39 2e 20 43 68 61 6e 6e 65 6c 20 74 72 69 6d     19. Channel trim
    14fd:	20 28 25 29 00                                       (%).

00001502 <MainMenuItem20>:
    1502:	31 38 2e 20 43 68 2e 20 64 69 72 65 63 74 69 6f     18. Ch. directio
    1512:	6e 00                                               n.

00001514 <MainMenuItem18>:
    1514:	31 37 2e 20 43 48 38 20 4d 69 78 65 72 00           17. CH8 Mixer.

00001522 <MainMenuItem17>:
    1522:	31 36 2e 20 43 48 37 20 4d 69 78 65 72 00           16. CH7 Mixer.

00001530 <MainMenuItem16>:
    1530:	31 35 2e 20 43 48 36 20 4d 69 78 65 72 00           15. CH6 Mixer.

0000153e <MainMenuItem15>:
    153e:	31 34 2e 20 43 48 35 20 4d 69 78 65 72 00           14. CH5 Mixer.

0000154c <MainMenuItem14>:
    154c:	31 33 2e 20 43 48 34 20 4d 69 78 65 72 00           13. CH4 Mixer.

0000155a <MainMenuItem13>:
    155a:	31 32 2e 20 43 48 33 20 4d 69 78 65 72 00           12. CH3 Mixer.

00001568 <MainMenuItem12>:
    1568:	31 31 2e 20 43 48 32 20 4d 69 78 65 72 00           11. CH2 Mixer.

00001576 <MainMenuItem110>:
    1576:	31 30 2e 20 43 48 31 20 4d 69 78 65 72 00           10. CH1 Mixer.

00001584 <MainMenuItem10>:
    1584:	39 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        9. Level meter.

00001593 <MainMenuItem8>:
    1593:	38 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     8. Sensor calibr
    15a3:	61 74 69 6f 6e 00                                   ation.

000015a9 <MainMenuItem11>:
    15a9:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    15b9:	65 20 33 00                                         e 3.

000015bd <MainMenuItem3>:
    15bd:	36 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     6. Flight profil
    15cd:	65 20 32 00                                         e 2.

000015d1 <MainMenuItem2>:
    15d1:	35 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     5. Flight profil
    15e1:	65 20 31 00                                         e 1.

000015e5 <MainMenuItem9>:
    15e5:	34 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     4. Receiver inpu
    15f5:	74 73 00                                            ts.

000015f8 <MainMenuItem7>:
    15f8:	33 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     3. Stick polarit
    1608:	79 00                                               y.

0000160a <MainMenuItem1>:
    160a:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    161a:	70 00                                               p.

0000161c <MainMenuItem0>:
    161c:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001627 <MenuFrame8>:
    1627:	53 61 76 65 00                                      Save.

0000162c <MenuFrame7>:
    162c:	44 65 66 2e 00                                      Def..

00001631 <MenuFrame6>:
    1631:	42 61 63 6b 00                                      Back.

00001636 <MenuFrame5>:
    1636:	4d 65 6e 75 00                                      Menu.

0000163b <MenuFrame1>:
    163b:	45 00                                               E.

0000163d <MenuFrame4>:
    163d:	44 00                                               D.

0000163f <MenuFrame3>:
    163f:	43 00                                               C.

00001641 <MenuFrame2>:
    1641:	42 00                                               B.

00001643 <MenuFrame0>:
    1643:	41 00                                               A.

00001645 <StatusText7>:
    1645:	50 72 65 73 65 74 3a 00                             Preset:.

0000164d <StatusText5>:
    164d:	30 00                                               0.

0000164f <StatusText4>:
    164f:	2e 00                                               ..

00001651 <StatusText3>:
    1651:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

0000165a <StatusText1>:
    165a:	4d 6f 64 65 3a 00                                   Mode:.

00001660 <StatusText0>:
    1660:	56 65 72 73 69 6f 6e 3a 20 20 20 53 31 2e 30 20     Version:   S1.0 
    1670:	41 36 00                                            A6.

00001673 <Gyro_Pol>:
    1673:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1683:	01 01                                               ..

00001685 <Gyro_RPY_Order>:
    1685:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1695:	01 00                                               ..

00001697 <LPF_lookup>:
    1697:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    16a7:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

000016b7 <lines>:
    16b7:	03 0f 1b 27                                         ...'

000016bb <flight_menu_ranges>:
    16bb:	00 01 01 01 00 00 02 01 01 00 00 01 01 01 00 00     ................
    16cb:	7f 01 00 50 00 7f 01 00 00 00 7f 01 00 00 00 7d     ...P...........}
    16db:	01 00 00 00 7f 01 00 3c 81 7f 01 00 00 00 01 01     .......<........
    16eb:	01 00 00 7f 01 00 50 00 7f 01 00 00 00 7f 01 00     ......P.........
    16fb:	00 00 7d 01 00 00 00 7f 01 00 3c 81 7f 01 00 00     ..}.......<.....
    170b:	00 01 01 01 00 00 7f 01 00 50 00 7f 01 00 00 00     .........P......
    171b:	7f 01 00 00 00 7d 01 00 00 81 7f 01 00 00           .....}........

00001729 <FlightMenuText>:
    1729:	26 26 2c 00 00 00 00 00 00 2c 00 00 00 00 00 00     &&,......,......
    1739:	2c 00 00 00 00 00                                   ,.....

0000173f <mixer_menu_ranges>:
    173f:	00 08 01 01 00 83 7d 01 00 00 00 08 01 01 08 83     ......}.........
    174f:	7d 01 00 00 00 02 01 01 00 00 02 01 01 00 00 02     }...............
    175f:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 0f 01     ................
    176f:	01 0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00     ...}.........}..
	...

00001780 <MixerMenuText>:
    1780:	69 00 69 00 8f 8f 8f 8f 8f b0 00 b0 00              i.i..........

0000178d <servo_menu_ranges>:
    178d:	00 01 01 01 00 83 7d 01 03 00 83 00 01 03 9c 00     ......}.........
    179d:	7d 01 03 64 83 7d 01 03 00                          }..d.}...

000017a6 <ServoMenuText>:
    17a6:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

000017ce <rc_menu_ranges>:
    17ce:	00 03 01 01 01 01 03 01 01 01 00 01 01 01 00 00     ................
    17de:	08 01 01 04 00 08 01 01 08 00 08 01 01 05 00 64     ...............d
    17ee:	05 00 64 00 64 01 00 00 00 14 01 00 00 00 04 01     ..d.d...........
    17fe:	00 03 00 05 01 00 02 00 02 01 01 00 9c 64 01 00     .............d..
    180e:	9c 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00     ..}....}....}...
	...
    183a:	00 00 00 02 01 01 00 00 05 01 01 00 1c 32 01 00     .............2..
    184a:	24 00 08 01 01 00 00 1e 01 00 03 01 0a 01 00 07     $...............
    185a:	00 07 01 01 02 00 06 01 01 02 00 00 00 00 00 00     ................
	...

00001873 <RCMenuText>:
    1873:	30 30 74 69 69 69 00 00 00 00 00 38 00 00 00 00     00tiii.....8....
    1883:	00 00 00 00 00 00 16 7c 00 3e 00 00 f1 f1 00 00     .......|.>......
	...

00001894 <FLYING_WING_MIX>:
    1894:	00 00 00 64 08 00 00 00 00 00 00 0f 00 0f 00 00     ...d............
    18a4:	00 01 32 02 32 00 00 00 00 00 0f 00 0f 00 00 00     ..2.2...........
    18b4:	01 ce 02 32 00 00 00 00 00 0f 00 0f 00 00 00 03     ...2............
    18c4:	64 08 00 00 00 00 00 00 0f 00 0f 00 00 00 04 00     d...............
    18d4:	08 00 00 00 00 00 00 0f 00 0f 00 00 00 05 00 08     ................
    18e4:	00 00 00 00 00 00 0f 00 0f 00 00 00 06 00 08 00     ................
    18f4:	00 00 00 00 00 0f 00 0f 00 00 00 07 00 08 00 00     ................
    1904:	00 00 00 00 0f 00 0f 00                             ........

0000190c <AEROPLANE_MIX>:
    190c:	00 00 00 64 08 00 00 00 00 00 00 0f 00 0f 00 00     ...d............
    191c:	00 01 64 08 00 00 00 00 00 00 0f 00 0f 00 00 00     ..d.............
    192c:	02 64 08 00 00 00 00 00 00 0f 00 0f 00 00 00 03     .d..............
    193c:	64 08 00 00 00 00 00 00 0f 00 0f 00 00 00 04 64     d..............d
    194c:	08 00 00 00 00 00 00 0f 00 0f 00 00 00 05 64 08     ..............d.
    195c:	00 00 00 00 00 00 0f 00 0f 00 00 00 06 64 08 00     .............d..
    196c:	00 00 00 00 00 0f 00 0f 00 00 00 07 64 08 00 00     ............d...
    197c:	00 00 00 00 0f 00 0f 00                             ........

00001984 <__ctors_end>:
    1984:	11 24       	eor	r1, r1
    1986:	1f be       	out	0x3f, r1	; 63
    1988:	cf ef       	ldi	r28, 0xFF	; 255
    198a:	d0 e1       	ldi	r29, 0x10	; 16
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	cd bf       	out	0x3d, r28	; 61

00001990 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1990:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1992:	88 e1       	ldi	r24, 0x18	; 24
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	80 93 60 00 	sts	0x0060, r24
    199c:	10 92 60 00 	sts	0x0060, r1
    19a0:	0f be       	out	0x3f, r0	; 63

000019a2 <__do_copy_data>:
    19a2:	15 e0       	ldi	r17, 0x05	; 5
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	e6 e0       	ldi	r30, 0x06	; 6
    19aa:	f6 e8       	ldi	r31, 0x86	; 134
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <__do_copy_data+0x10>
    19ae:	05 90       	lpm	r0, Z+
    19b0:	0d 92       	st	X+, r0
    19b2:	ac 30       	cpi	r26, 0x0C	; 12
    19b4:	b1 07       	cpc	r27, r17
    19b6:	d9 f7       	brne	.-10     	; 0x19ae <__do_copy_data+0xc>

000019b8 <__do_clear_bss>:
    19b8:	27 e0       	ldi	r18, 0x07	; 7
    19ba:	ac e0       	ldi	r26, 0x0C	; 12
    19bc:	b5 e0       	ldi	r27, 0x05	; 5
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <.do_clear_bss_start>

000019c0 <.do_clear_bss_loop>:
    19c0:	1d 92       	st	X+, r1

000019c2 <.do_clear_bss_start>:
    19c2:	a1 3f       	cpi	r26, 0xF1	; 241
    19c4:	b2 07       	cpc	r27, r18
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <.do_clear_bss_loop>
    19c8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <main>
    19cc:	0c 94 01 43 	jmp	0x8602	; 0x8602 <_exit>

000019d0 <__bad_interrupt>:
    19d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000019d4 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    19d4:	00 00       	nop
	ret					// 4 (5 cycles)
    19d6:	08 95       	ret

000019d8 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    19d8:	fd df       	rcall	.-6      	; 0x19d4 <glcd_delay>
	rcall	glcd_delay
    19da:	fc df       	rcall	.-8      	; 0x19d4 <glcd_delay>
	rcall	glcd_delay
    19dc:	fb df       	rcall	.-10     	; 0x19d4 <glcd_delay>
	rcall	glcd_delay
    19de:	fa df       	rcall	.-12     	; 0x19d4 <glcd_delay>
	ret
    19e0:	08 95       	ret

000019e2 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    19e2:	cf 93       	push	r28

000019e4 <master_loop>:

master_loop:
	cbi 	BIND		//	2
    19e4:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    19e6:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    19e8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <VarDelay>
	sbi		BIND		//	2
    19ec:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    19ee:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    19f0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <VarDelay>
	dec		r24
    19f4:	8a 95       	dec	r24
	brne	master_loop	//  2 1
    19f6:	b1 f7       	brne	.-20     	; 0x19e4 <master_loop>

	pop		YL			//	  1
    19f8:	cf 91       	pop	r28
	ret					//	  4 
    19fa:	08 95       	ret

000019fc <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    19fc:	00 c0       	rjmp	.+0      	; 0x19fe <VarDelay+0x2>
	rjmp .+0			// 2
    19fe:	00 c0       	rjmp	.+0      	; 0x1a00 <VarDelay+0x4>
	rjmp .+0			// 2
    1a00:	00 c0       	rjmp	.+0      	; 0x1a02 <VarDelay+0x6>
	rjmp .+0			// 2
    1a02:	00 c0       	rjmp	.+0      	; 0x1a04 <VarDelay+0x8>
	rjmp .+0			// 2
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <VarDelay+0xa>
	rjmp .+0			// 2
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <VarDelay+0xc>
	rjmp .+0			// 2
    1a08:	00 c0       	rjmp	.+0      	; 0x1a0a <VarDelay+0xe>
	rjmp .+0			// 2
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <VarDelay+0x10>
	nop					// 1
    1a0c:	00 00       	nop
	dec 	YL			// 1
    1a0e:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1a10:	a9 f7       	brne	.-22     	; 0x19fc <VarDelay>
	ret					//   4 
    1a12:	08 95       	ret

00001a14 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050 for KK2.1
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// For KK2.1 boards, use the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1a28:	26 e0       	ldi	r18, 0x06	; 6
    1a2a:	ae 01       	movw	r20, r28
    1a2c:	4f 5f       	subi	r20, 0xFF	; 255
    1a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a30:	6b e3       	ldi	r22, 0x3B	; 59
    1a32:	80 ed       	ldi	r24, 0xD0	; 208
    1a34:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1a40:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1a42:	82 0f       	add	r24, r18
    1a44:	91 1d       	adc	r25, r1
    1a46:	36 e0       	ldi	r19, 0x06	; 6
    1a48:	95 95       	asr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	3a 95       	dec	r19
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <get_raw_accs+0x34>
    1a50:	98 87       	std	Y+8, r25	; 0x08
    1a52:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	98 2f       	mov	r25, r24
    1a5a:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1a5c:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1a5e:	82 0f       	add	r24, r18
    1a60:	91 1d       	adc	r25, r1
    1a62:	56 e0       	ldi	r21, 0x06	; 6
    1a64:	95 95       	asr	r25
    1a66:	87 95       	ror	r24
    1a68:	5a 95       	dec	r21
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <get_raw_accs+0x50>
    1a6c:	91 95       	neg	r25
    1a6e:	81 95       	neg	r24
    1a70:	91 09       	sbc	r25, r1
    1a72:	9a 87       	std	Y+10, r25	; 0x0a
    1a74:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1a7e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1a80:	82 0f       	add	r24, r18
    1a82:	91 1d       	adc	r25, r1
    1a84:	76 e0       	ldi	r23, 0x06	; 6
    1a86:	95 95       	asr	r25
    1a88:	87 95       	ror	r24
    1a8a:	7a 95       	dec	r23
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <get_raw_accs+0x72>
    1a8e:	9c 87       	std	Y+12, r25	; 0x0c
    1a90:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1a92:	20 91 7d 06 	lds	r18, 0x067D
    1a96:	ae e3       	ldi	r26, 0x3E	; 62
    1a98:	b5 e0       	ldi	r27, 0x05	; 5
    1a9a:	43 e0       	ldi	r20, 0x03	; 3
    1a9c:	24 02       	muls	r18, r20
    1a9e:	90 01       	movw	r18, r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	2c 51       	subi	r18, 0x1C	; 28
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	f9 01       	movw	r30, r18
    1aac:	e8 0f       	add	r30, r24
    1aae:	f9 1f       	adc	r31, r25
    1ab0:	e4 91       	lpm	r30, Z
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 0b       	sbc	r31, r31
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	4c 0f       	add	r20, r28
    1abc:	5d 1f       	adc	r21, r29
    1abe:	e4 0f       	add	r30, r20
    1ac0:	f5 1f       	adc	r31, r21
    1ac2:	46 81       	ldd	r20, Z+6	; 0x06
    1ac4:	57 81       	ldd	r21, Z+7	; 0x07
    1ac6:	4d 93       	st	X+, r20
    1ac8:	5d 93       	st	X+, r21
    1aca:	01 96       	adiw	r24, 0x01	; 1
	RawADC[YAW] = ADCW;

#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	61 f7       	brne	.-40     	; 0x1aaa <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1ad2:	2c 96       	adiw	r28, 0x0c	; 12
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <ReadAcc>:
//************************************************************

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order

void ReadAcc()
{
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1aea:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1aee:	80 91 53 07 	lds	r24, 0x0753
    1af2:	80 fd       	sbrc	r24, 0
    1af4:	05 c0       	rjmp	.+10     	; 0x1b00 <ReadAcc+0x1c>
	{
#ifdef KK21 
		Config.AccZero[YAW] = 0;
    1af6:	10 92 39 07 	sts	0x0739, r1
    1afa:	10 92 38 07 	sts	0x0738, r1
    1afe:	0e c0       	rjmp	.+28     	; 0x1b1c <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1b00:	80 91 3a 07 	lds	r24, 0x073A
    1b04:	90 91 3b 07 	lds	r25, 0x073B
    1b08:	20 91 3e 07 	lds	r18, 0x073E
    1b0c:	30 91 3f 07 	lds	r19, 0x073F
    1b10:	82 1b       	sub	r24, r18
    1b12:	93 0b       	sbc	r25, r19
    1b14:	90 93 39 07 	sts	0x0739, r25
    1b18:	80 93 38 07 	sts	0x0738, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1b1c:	20 91 7d 06 	lds	r18, 0x067D
    1b20:	c4 e3       	ldi	r28, 0x34	; 52
    1b22:	d7 e0       	ldi	r29, 0x07	; 7
    1b24:	ae e3       	ldi	r26, 0x3E	; 62
    1b26:	b5 e0       	ldi	r27, 0x05	; 5
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	28 02       	muls	r18, r24
    1b2c:	90 01       	movw	r18, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	2e 52       	subi	r18, 0x2E	; 46
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1b38:	69 91       	ld	r22, Y+
    1b3a:	79 91       	ld	r23, Y+
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	e8 0f       	add	r30, r24
    1b40:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1b42:	14 91       	lpm	r17, Z
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1b44:	4d 91       	ld	r20, X+
    1b46:	5c 91       	ld	r21, X
    1b48:	11 97       	sbiw	r26, 0x01	; 1
    1b4a:	46 1b       	sub	r20, r22
    1b4c:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1b4e:	14 03       	mulsu	r17, r20
    1b50:	b0 01       	movw	r22, r0
    1b52:	15 9f       	mul	r17, r21
    1b54:	70 0d       	add	r23, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	6d 93       	st	X+, r22
    1b5a:	7d 93       	st	X+, r23
    1b5c:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i<NUMBEROFAXIS; i++)
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	91 05       	cpc	r25, r1
    1b62:	51 f7       	brne	.-44     	; 0x1b38 <ReadAcc+0x54>
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
	}
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	08 95       	ret

00001b6c <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <CalibrateAcc+0x8>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <CalibrateAcc+0xa>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <CalibrateAcc+0xc>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1b7c:	1a 82       	std	Y+2, r1	; 0x02
    1b7e:	19 82       	std	Y+1, r1	; 0x01
    1b80:	1c 82       	std	Y+4, r1	; 0x04
    1b82:	1b 82       	std	Y+3, r1	; 0x03
    1b84:	1e 82       	std	Y+6, r1	; 0x06
    1b86:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1b88:	81 11       	cpse	r24, r1
    1b8a:	72 c0       	rjmp	.+228    	; 0x1c70 <CalibrateAcc+0x104>
    1b8c:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1b8e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	20 91 3e 05 	lds	r18, 0x053E
    1b9a:	30 91 3f 05 	lds	r19, 0x053F
    1b9e:	82 0f       	add	r24, r18
    1ba0:	93 1f       	adc	r25, r19
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	20 91 40 05 	lds	r18, 0x0540
    1bae:	30 91 41 05 	lds	r19, 0x0541
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	20 91 42 05 	lds	r18, 0x0542
    1bc2:	30 91 43 05 	lds	r19, 0x0543
    1bc6:	82 0f       	add	r24, r18
    1bc8:	93 1f       	adc	r25, r19
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bce:	8f e4       	ldi	r24, 0x4F	; 79
    1bd0:	93 ec       	ldi	r25, 0xC3	; 195
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <CalibrateAcc+0x66>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <CalibrateAcc+0x6c>
    1bd8:	00 00       	nop
    1bda:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
    1bdc:	c1 f6       	brne	.-80     	; 0x1b8e <CalibrateAcc+0x22>
    1bde:	fe 01       	movw	r30, r28
    1be0:	31 96       	adiw	r30, 0x01	; 1
    1be2:	9e 01       	movw	r18, r28
    1be4:	29 5f       	subi	r18, 0xF9	; 249
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	40 96       	adiw	r24, 0x10	; 16
    1bee:	45 e0       	ldi	r20, 0x05	; 5
    1bf0:	95 95       	asr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	4a 95       	dec	r20
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <CalibrateAcc+0x84>
    1bf8:	81 93       	st	Z+, r24
    1bfa:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
    1bfc:	e2 17       	cp	r30, r18
    1bfe:	f3 07       	cpc	r31, r19
    1c00:	99 f7       	brne	.-26     	; 0x1be8 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL];
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	90 93 35 07 	sts	0x0735, r25
    1c0a:	80 93 34 07 	sts	0x0734, r24
		Config.AccZero[PITCH] = accZero[PITCH];
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	90 93 37 07 	sts	0x0737, r25
    1c16:	80 93 36 07 	sts	0x0736, r24
		Config.AccZeroNormZ = accZero[YAW];
		
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    1c1a:	80 91 7d 06 	lds	r24, 0x067D
    1c1e:	99 27       	eor	r25, r25
    1c20:	87 fd       	sbrc	r24, 7
    1c22:	90 95       	com	r25
    1c24:	fc 01       	movw	r30, r24
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	e8 0f       	add	r30, r24
    1c2c:	f9 1f       	adc	r31, r25
    1c2e:	ec 52       	subi	r30, 0x2C	; 44
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	44 91       	lpm	r20, Z
    1c34:	2d 81       	ldd	r18, Y+5	; 0x05
    1c36:	3e 81       	ldd	r19, Y+6	; 0x06
    1c38:	42 03       	mulsu	r20, r18
    1c3a:	c0 01       	movw	r24, r0
    1c3c:	43 9f       	mul	r20, r19
    1c3e:	90 0d       	add	r25, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	90 93 3b 07 	sts	0x073B, r25
    1c46:	80 93 3a 07 	sts	0x073A, r24
		
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    1c4a:	80 91 53 07 	lds	r24, 0x0753
    1c4e:	82 60       	ori	r24, 0x02	; 2
    1c50:	80 93 53 07 	sts	0x0753, r24
		
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    1c54:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
		LED1 = 1;
    1c58:	2b 9a       	sbi	0x05, 3	; 5
    1c5a:	9f e7       	ldi	r25, 0x7F	; 127
    1c5c:	24 e8       	ldi	r18, 0x84	; 132
    1c5e:	4e e1       	ldi	r20, 0x1E	; 30
    1c60:	91 50       	subi	r25, 0x01	; 1
    1c62:	20 40       	sbci	r18, 0x00	; 0
    1c64:	40 40       	sbci	r20, 0x00	; 0
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <CalibrateAcc+0xf4>
    1c68:	00 c0       	rjmp	.+0      	; 0x1c6a <CalibrateAcc+0xfe>
    1c6a:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    1c6c:	2b 98       	cbi	0x05, 3	; 5
    1c6e:	76 c0       	rjmp	.+236    	; 0x1d5c <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    1c70:	80 91 53 07 	lds	r24, 0x0753
    1c74:	81 ff       	sbrs	r24, 1
    1c76:	72 c0       	rjmp	.+228    	; 0x1d5c <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    1c78:	10 92 3d 07 	sts	0x073D, r1
    1c7c:	10 92 3c 07 	sts	0x073C, r1
    1c80:	10 e2       	ldi	r17, 0x20	; 32

			for (i=0; i<32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    1c82:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    1c86:	80 91 3c 07 	lds	r24, 0x073C
    1c8a:	90 91 3d 07 	lds	r25, 0x073D
    1c8e:	20 91 42 05 	lds	r18, 0x0542
    1c92:	30 91 43 05 	lds	r19, 0x0543
    1c96:	82 0f       	add	r24, r18
    1c98:	93 1f       	adc	r25, r19
    1c9a:	90 93 3d 07 	sts	0x073D, r25
    1c9e:	80 93 3c 07 	sts	0x073C, r24
    1ca2:	8f e4       	ldi	r24, 0x4F	; 79
    1ca4:	93 ec       	ldi	r25, 0xC3	; 195
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <CalibrateAcc+0x13a>
    1caa:	00 c0       	rjmp	.+0      	; 0x1cac <CalibrateAcc+0x140>
    1cac:	00 00       	nop
    1cae:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i=0; i<32; i++)
    1cb0:	41 f7       	brne	.-48     	; 0x1c82 <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    1cb2:	80 91 7d 06 	lds	r24, 0x067D
    1cb6:	99 27       	eor	r25, r25
    1cb8:	87 fd       	sbrc	r24, 7
    1cba:	90 95       	com	r25
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	e8 0f       	add	r30, r24
    1cc4:	f9 1f       	adc	r31, r25
    1cc6:	ec 52       	subi	r30, 0x2C	; 44
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    1ccc:	20 91 3c 07 	lds	r18, 0x073C
    1cd0:	30 91 3d 07 	lds	r19, 0x073D
    1cd4:	20 5f       	subi	r18, 0xF0	; 240
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	b5 e0       	ldi	r27, 0x05	; 5
    1cda:	35 95       	asr	r19
    1cdc:	27 95       	ror	r18
    1cde:	ba 95       	dec	r27
    1ce0:	e1 f7       	brne	.-8      	; 0x1cda <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    1ce2:	42 03       	mulsu	r20, r18
    1ce4:	c0 01       	movw	r24, r0
    1ce6:	43 9f       	mul	r20, r19
    1ce8:	90 0d       	add	r25, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	90 93 3d 07 	sts	0x073D, r25
    1cf0:	80 93 3c 07 	sts	0x073C, r24

			// Test if board is actually inverted relative to board orientation.
#ifdef KK21
			if (Config.AccZeroInvZ < 0)
    1cf4:	97 ff       	sbrs	r25, 7
    1cf6:	32 c0       	rjmp	.+100    	; 0x1d5c <CalibrateAcc+0x1f0>
			if	(Config.AccZeroInvZ < Config.AccZero[YAW])
#endif
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    1cf8:	20 91 3a 07 	lds	r18, 0x073A
    1cfc:	30 91 3b 07 	lds	r19, 0x073B
    1d00:	a9 01       	movw	r20, r18
    1d02:	48 1b       	sub	r20, r24
    1d04:	59 0b       	sbc	r21, r25
    1d06:	ca 01       	movw	r24, r20
    1d08:	95 95       	asr	r25
    1d0a:	87 95       	ror	r24
    1d0c:	90 93 3f 07 	sts	0x073F, r25
    1d10:	80 93 3e 07 	sts	0x073E, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    1d14:	28 1b       	sub	r18, r24
    1d16:	39 0b       	sbc	r19, r25
    1d18:	30 93 39 07 	sts	0x0739, r19
    1d1c:	20 93 38 07 	sts	0x0738, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    1d20:	80 91 53 07 	lds	r24, 0x0753
    1d24:	81 60       	ori	r24, 0x01	; 1
    1d26:	80 93 53 07 	sts	0x0753, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    1d2a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
				LED1 = 1;
    1d2e:	2b 9a       	sbi	0x05, 3	; 5
    1d30:	5f e7       	ldi	r21, 0x7F	; 127
    1d32:	84 e8       	ldi	r24, 0x84	; 132
    1d34:	9e e1       	ldi	r25, 0x1E	; 30
    1d36:	51 50       	subi	r21, 0x01	; 1
    1d38:	80 40       	sbci	r24, 0x00	; 0
    1d3a:	90 40       	sbci	r25, 0x00	; 0
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <CalibrateAcc+0x1ca>
    1d3e:	00 c0       	rjmp	.+0      	; 0x1d40 <CalibrateAcc+0x1d4>
    1d40:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    1d42:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    1d44:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    1d46:	26 96       	adiw	r28, 0x06	; 6
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    1d58:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <menu_beep>
			}
		}
	}
}
    1d5c:	26 96       	adiw	r28, 0x06	; 6
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	08 95       	ret

00001d70 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	6b e6       	ldi	r22, 0x6B	; 107
    1d74:	80 ed       	ldi	r24, 0xD0	; 208
    1d76:	0e 94 b9 1c 	call	0x3972	; 0x3972 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    1d7a:	48 e0       	ldi	r20, 0x08	; 8
    1d7c:	6c e1       	ldi	r22, 0x1C	; 28
    1d7e:	80 ed       	ldi	r24, 0xD0	; 208
    1d80:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <writeI2Cbyte>

00001d84 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    1d8a:	10 92 7b 00 	sts	0x007B, r1
    1d8e:	08 95       	ret

00001d90 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    1d90:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    1d94:	86 ec       	ldi	r24, 0xC6	; 198
    1d96:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    1d9a:	80 91 7a 00 	lds	r24, 0x007A
    1d9e:	86 fd       	sbrc	r24, 6
    1da0:	fc cf       	rjmp	.-8      	; 0x1d9a <read_adc+0xa>
}
    1da2:	08 95       	ret

00001da4 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	0f 93       	push	r16
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    1db0:	cb e0       	ldi	r28, 0x0B	; 11
    1db2:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    1db4:	1f 9b       	sbis	0x03, 7	; 3
    1db6:	7e c0       	rjmp	.+252    	; 0x1eb4 <Display_balance+0x110>
	{
		// Read accs
		ReadAcc();
    1db8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <imu_update>
    1dc6:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    1dc8:	20 97       	sbiw	r28, 0x00	; 0
    1dca:	a1 f7       	brne	.-24     	; 0x1db4 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	52 e4       	ldi	r21, 0x42	; 66
    1dd4:	60 91 ae 05 	lds	r22, 0x05AE
    1dd8:	70 91 af 05 	lds	r23, 0x05AF
    1ddc:	80 91 b0 05 	lds	r24, 0x05B0
    1de0:	90 91 b1 05 	lds	r25, 0x05B1
    1de4:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__addsf3>
    1de8:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    1dec:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	52 e4       	ldi	r21, 0x42	; 66
    1df6:	60 91 aa 05 	lds	r22, 0x05AA
    1dfa:	70 91 ab 05 	lds	r23, 0x05AB
    1dfe:	80 91 ac 05 	lds	r24, 0x05AC
    1e02:	90 91 ad 05 	lds	r25, 0x05AD
    1e06:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__addsf3>
    1e0a:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    1e0e:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    1e10:	d7 fd       	sbrc	r29, 7
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    1e14:	c1 34       	cpi	r28, 0x41	; 65
    1e16:	d1 05       	cpc	r29, r1
    1e18:	2c f0       	brlt	.+10     	; 0x1e24 <Display_balance+0x80>
    1e1a:	c0 e4       	ldi	r28, 0x40	; 64
    1e1c:	d0 e0       	ldi	r29, 0x00	; 0
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    1e20:	c0 e0       	ldi	r28, 0x00	; 0
    1e22:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    1e24:	d7 fc       	sbrc	r13, 7
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    1e28:	81 e8       	ldi	r24, 0x81	; 129
    1e2a:	c8 16       	cp	r12, r24
    1e2c:	d1 04       	cpc	r13, r1
    1e2e:	34 f0       	brlt	.+12     	; 0x1e3c <Display_balance+0x98>
    1e30:	80 e8       	ldi	r24, 0x80	; 128
    1e32:	c8 2e       	mov	r12, r24
    1e34:	d1 2c       	mov	r13, r1
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    1e38:	c1 2c       	mov	r12, r1
    1e3a:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    1e3c:	27 e3       	ldi	r18, 0x37	; 55
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	42 e0       	ldi	r20, 0x02	; 2
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	66 e0       	ldi	r22, 0x06	; 6
    1e46:	71 e0       	ldi	r23, 0x01	; 1
    1e48:	8c e0       	ldi	r24, 0x0C	; 12
    1e4a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    1e4e:	ee 24       	eor	r14, r14
    1e50:	e3 94       	inc	r14
    1e52:	00 e4       	ldi	r16, 0x40	; 64
    1e54:	20 e8       	ldi	r18, 0x80	; 128
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    1e62:	05 e1       	ldi	r16, 0x15	; 21
    1e64:	25 e1       	ldi	r18, 0x15	; 21
    1e66:	46 e1       	ldi	r20, 0x16	; 22
    1e68:	66 e3       	ldi	r22, 0x36	; 54
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    1e72:	08 e3       	ldi	r16, 0x38	; 56
    1e74:	20 e4       	ldi	r18, 0x40	; 64
    1e76:	48 e0       	ldi	r20, 0x08	; 8
    1e78:	60 e4       	ldi	r22, 0x40	; 64
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	0e 94 35 19 	call	0x326a	; 0x326a <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    1e82:	00 e2       	ldi	r16, 0x20	; 32
    1e84:	20 e6       	ldi	r18, 0x60	; 96
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	60 e2       	ldi	r22, 0x20	; 32
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	0e 94 35 19 	call	0x326a	; 0x326a <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    1e92:	01 e0       	ldi	r16, 0x01	; 1
    1e94:	28 e0       	ldi	r18, 0x08	; 8
    1e96:	4c 2f       	mov	r20, r28
    1e98:	6c 2d       	mov	r22, r12
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	0e 94 25 1a 	call	0x344a	; 0x344a <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
			clear_buffer(buffer);
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
    1eb2:	7e cf       	rjmp	.-260    	; 0x1db0 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	0f 91       	pop	r16
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	08 95       	ret

00001ec2 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    1ec2:	0e 94 28 28 	call	0x5050	; 0x5050 <init_int>
	
	while(BUTTON1 != 0)
    1ec6:	1f 9b       	sbis	0x03, 7	; 3
    1ec8:	0e c1       	rjmp	.+540    	; 0x20e6 <Display_rcinput+0x224>
	{
		if (BUTTON4 == 0)
    1eca:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    1ecc:	0e 94 a5 3a 	call	0x754a	; 0x754a <CenterSticks>
		}

		if (BUTTON3 == 0)
    1ed0:	1d 9b       	sbis	0x03, 5	; 3
		{
			SetFailsafe();
    1ed2:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <SetFailsafe>
		}

		RxGetChannels();
    1ed6:	0e 94 b2 39 	call	0x7364	; 0x7364 <RxGetChannels>

		LCD_Display_Text(19,(const unsigned char*)Verdana8,0,0);
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	6e e1       	ldi	r22, 0x1E	; 30
    1ee4:	7a e0       	ldi	r23, 0x0A	; 10
    1ee6:	83 e1       	ldi	r24, 0x13	; 19
    1ee8:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    1eec:	2a e0       	ldi	r18, 0x0A	; 10
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	6e e1       	ldi	r22, 0x1E	; 30
    1ef6:	7a e0       	ldi	r23, 0x0A	; 10
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(20,(const unsigned char*)Verdana8,0,20);
    1efe:	24 e1       	ldi	r18, 0x14	; 20
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	6e e1       	ldi	r22, 0x1E	; 30
    1f08:	7a e0       	ldi	r23, 0x0A	; 10
    1f0a:	84 e1       	ldi	r24, 0x14	; 20
    1f0c:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    1f10:	2e e1       	ldi	r18, 0x1E	; 30
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	6e e1       	ldi	r22, 0x1E	; 30
    1f1a:	7a e0       	ldi	r23, 0x0A	; 10
    1f1c:	83 e2       	ldi	r24, 0x23	; 35
    1f1e:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0);
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	46 e4       	ldi	r20, 0x46	; 70
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	6e e1       	ldi	r22, 0x1E	; 30
    1f2c:	7a e0       	ldi	r23, 0x0A	; 10
    1f2e:	8d e6       	ldi	r24, 0x6D	; 109
    1f30:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    1f34:	2a e0       	ldi	r18, 0x0A	; 10
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	46 e4       	ldi	r20, 0x46	; 70
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	6e e1       	ldi	r22, 0x1E	; 30
    1f3e:	7a e0       	ldi	r23, 0x0A	; 10
    1f40:	8e e6       	ldi	r24, 0x6E	; 110
    1f42:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    1f46:	24 e1       	ldi	r18, 0x14	; 20
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	46 e4       	ldi	r20, 0x46	; 70
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	6e e1       	ldi	r22, 0x1E	; 30
    1f50:	7a e0       	ldi	r23, 0x0A	; 10
    1f52:	8f e6       	ldi	r24, 0x6F	; 111
    1f54:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    1f58:	2e e1       	ldi	r18, 0x1E	; 30
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	46 e4       	ldi	r20, 0x46	; 70
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	6e e1       	ldi	r22, 0x1E	; 30
    1f62:	7a e0       	ldi	r23, 0x0A	; 10
    1f64:	80 e7       	ldi	r24, 0x70	; 112
    1f66:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    1f6a:	80 91 cd 07 	lds	r24, 0x07CD
    1f6e:	90 91 ce 07 	lds	r25, 0x07CE
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1f72:	4a e0       	ldi	r20, 0x0A	; 10
    1f74:	6b e6       	ldi	r22, 0x6B	; 107
    1f76:	75 e0       	ldi	r23, 0x05	; 5
    1f78:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	45 e2       	ldi	r20, 0x25	; 37
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	6e e1       	ldi	r22, 0x1E	; 30
    1f86:	7a e0       	ldi	r23, 0x0A	; 10
    1f88:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    1f8c:	80 91 d1 07 	lds	r24, 0x07D1
    1f90:	90 91 d2 07 	lds	r25, 0x07D2
    1f94:	4a e0       	ldi	r20, 0x0A	; 10
    1f96:	6b e6       	ldi	r22, 0x6B	; 107
    1f98:	75 e0       	ldi	r23, 0x05	; 5
    1f9a:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    1f9e:	2a e0       	ldi	r18, 0x0A	; 10
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	45 e2       	ldi	r20, 0x25	; 37
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	6e e1       	ldi	r22, 0x1E	; 30
    1fa8:	7a e0       	ldi	r23, 0x0A	; 10
    1faa:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    1fae:	80 91 d3 07 	lds	r24, 0x07D3
    1fb2:	90 91 d4 07 	lds	r25, 0x07D4
    1fb6:	4a e0       	ldi	r20, 0x0A	; 10
    1fb8:	6b e6       	ldi	r22, 0x6B	; 107
    1fba:	75 e0       	ldi	r23, 0x05	; 5
    1fbc:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    1fc0:	24 e1       	ldi	r18, 0x14	; 20
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	45 e2       	ldi	r20, 0x25	; 37
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	6e e1       	ldi	r22, 0x1E	; 30
    1fca:	7a e0       	ldi	r23, 0x0A	; 10
    1fcc:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    1fd0:	80 91 d5 07 	lds	r24, 0x07D5
    1fd4:	90 91 d6 07 	lds	r25, 0x07D6
    1fd8:	4a e0       	ldi	r20, 0x0A	; 10
    1fda:	6b e6       	ldi	r22, 0x6B	; 107
    1fdc:	75 e0       	ldi	r23, 0x05	; 5
    1fde:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    1fe2:	2e e1       	ldi	r18, 0x1E	; 30
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	45 e2       	ldi	r20, 0x25	; 37
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	6e e1       	ldi	r22, 0x1E	; 30
    1fec:	7a e0       	ldi	r23, 0x0A	; 10
    1fee:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    1ff2:	80 91 d7 07 	lds	r24, 0x07D7
    1ff6:	90 91 d8 07 	lds	r25, 0x07D8
    1ffa:	4a e0       	ldi	r20, 0x0A	; 10
    1ffc:	6b e6       	ldi	r22, 0x6B	; 107
    1ffe:	75 e0       	ldi	r23, 0x05	; 5
    2000:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	44 e6       	ldi	r20, 0x64	; 100
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	6e e1       	ldi	r22, 0x1E	; 30
    200e:	7a e0       	ldi	r23, 0x0A	; 10
    2010:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2014:	80 91 d9 07 	lds	r24, 0x07D9
    2018:	90 91 da 07 	lds	r25, 0x07DA
    201c:	4a e0       	ldi	r20, 0x0A	; 10
    201e:	6b e6       	ldi	r22, 0x6B	; 107
    2020:	75 e0       	ldi	r23, 0x05	; 5
    2022:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    2026:	2a e0       	ldi	r18, 0x0A	; 10
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	44 e6       	ldi	r20, 0x64	; 100
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	6e e1       	ldi	r22, 0x1E	; 30
    2030:	7a e0       	ldi	r23, 0x0A	; 10
    2032:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2036:	80 91 db 07 	lds	r24, 0x07DB
    203a:	90 91 dc 07 	lds	r25, 0x07DC
    203e:	4a e0       	ldi	r20, 0x0A	; 10
    2040:	6b e6       	ldi	r22, 0x6B	; 107
    2042:	75 e0       	ldi	r23, 0x05	; 5
    2044:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    2048:	24 e1       	ldi	r18, 0x14	; 20
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	44 e6       	ldi	r20, 0x64	; 100
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	6e e1       	ldi	r22, 0x1E	; 30
    2052:	7a e0       	ldi	r23, 0x0A	; 10
    2054:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    2058:	80 91 dd 07 	lds	r24, 0x07DD
    205c:	90 91 de 07 	lds	r25, 0x07DE
    2060:	4a e0       	ldi	r20, 0x0A	; 10
    2062:	6b e6       	ldi	r22, 0x6B	; 107
    2064:	75 e0       	ldi	r23, 0x05	; 5
    2066:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    206a:	2e e1       	ldi	r18, 0x1E	; 30
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	44 e6       	ldi	r20, 0x64	; 100
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	6e e1       	ldi	r22, 0x1E	; 30
    2074:	7a e0       	ldi	r23, 0x0A	; 10
    2076:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    207a:	29 e3       	ldi	r18, 0x39	; 57
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	66 e0       	ldi	r22, 0x06	; 6
    2084:	71 e0       	ldi	r23, 0x01	; 1
    2086:	8c e0       	ldi	r24, 0x0C	; 12
    2088:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(21, (const unsigned char*)Verdana8, 40, 55); 	// Failsafe
    208c:	27 e3       	ldi	r18, 0x37	; 55
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	48 e2       	ldi	r20, 0x28	; 40
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	6e e1       	ldi	r22, 0x1E	; 30
    2096:	7a e0       	ldi	r23, 0x0A	; 10
    2098:	85 e1       	ldi	r24, 0x15	; 21
    209a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    209e:	2b e3       	ldi	r18, 0x3B	; 59
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e5       	ldi	r20, 0x50	; 80
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	66 e0       	ldi	r22, 0x06	; 6
    20a8:	71 e0       	ldi	r23, 0x01	; 1
    20aa:	89 e0       	ldi	r24, 0x09	; 9
    20ac:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 100, 55); 	// Cal.
    20b0:	27 e3       	ldi	r18, 0x37	; 55
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	44 e6       	ldi	r20, 0x64	; 100
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	6e e1       	ldi	r22, 0x1E	; 30
    20ba:	7a e0       	ldi	r23, 0x0A	; 10
    20bc:	8c e3       	ldi	r24, 0x3C	; 60
    20be:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 119, 59); 	// Down
    20c2:	2b e3       	ldi	r18, 0x3B	; 59
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	47 e7       	ldi	r20, 0x77	; 119
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	66 e0       	ldi	r22, 0x06	; 6
    20cc:	71 e0       	ldi	r23, 0x01	; 1
    20ce:	89 e0       	ldi	r24, 0x09	; 9
    20d0:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
		clear_buffer(buffer);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
    20e4:	f0 ce       	rjmp	.-544    	; 0x1ec6 <Display_rcinput+0x4>
	}
}
    20e6:	08 95       	ret

000020e8 <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    20e8:	cf 93       	push	r28
	bool	first_time = true;
		
	clear_buffer(buffer);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    20f2:	c1 e0       	ldi	r28, 0x01	; 1
		
	clear_buffer(buffer);
		
	// While BACK not pressed
	while(BUTTON1 != 0)
    20f4:	1f 9b       	sbis	0x03, 7	; 3
    20f6:	df c0       	rjmp	.+446    	; 0x22b6 <Display_sensors+0x1ce>
	{
		ReadGyros();
    20f8:	0e 94 41 1b 	call	0x3682	; 0x3682 <ReadGyros>
		ReadAcc();
    20fc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	45 e2       	ldi	r20, 0x25	; 37
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	6e e1       	ldi	r22, 0x1E	; 30
    210a:	7a e0       	ldi	r23, 0x0A	; 10
    210c:	8a e1       	ldi	r24, 0x1A	; 26
    210e:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4d e4       	ldi	r20, 0x4D	; 77
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	6e e1       	ldi	r22, 0x1E	; 30
    211c:	7a e0       	ldi	r23, 0x0A	; 10
    211e:	8e e1       	ldi	r24, 0x1E	; 30
    2120:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2124:	2d e0       	ldi	r18, 0x0D	; 13
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	45 e0       	ldi	r20, 0x05	; 5
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	6e e1       	ldi	r22, 0x1E	; 30
    212e:	7a e0       	ldi	r23, 0x0A	; 10
    2130:	8b e1       	ldi	r24, 0x1B	; 27
    2132:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2136:	27 e1       	ldi	r18, 0x17	; 23
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	45 e0       	ldi	r20, 0x05	; 5
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	6e e1       	ldi	r22, 0x1E	; 30
    2140:	7a e0       	ldi	r23, 0x0A	; 10
    2142:	8c e1       	ldi	r24, 0x1C	; 28
    2144:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2148:	21 e2       	ldi	r18, 0x21	; 33
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	45 e0       	ldi	r20, 0x05	; 5
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	6e e1       	ldi	r22, 0x1E	; 30
    2152:	7a e0       	ldi	r23, 0x0A	; 10
    2154:	8d e1       	ldi	r24, 0x1D	; 29
    2156:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
    215a:	4a e0       	ldi	r20, 0x0A	; 10
    215c:	6b e6       	ldi	r22, 0x6B	; 107
    215e:	75 e0       	ldi	r23, 0x05	; 5
    2160:	80 91 84 05 	lds	r24, 0x0584
    2164:	90 91 85 05 	lds	r25, 0x0585
    2168:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    216c:	2d e0       	ldi	r18, 0x0D	; 13
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	48 e2       	ldi	r20, 0x28	; 40
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	6e e1       	ldi	r22, 0x1E	; 30
    2176:	7a e0       	ldi	r23, 0x0A	; 10
    2178:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
    217c:	4a e0       	ldi	r20, 0x0A	; 10
    217e:	6b e6       	ldi	r22, 0x6B	; 107
    2180:	75 e0       	ldi	r23, 0x05	; 5
    2182:	80 91 86 05 	lds	r24, 0x0586
    2186:	90 91 87 05 	lds	r25, 0x0587
    218a:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    218e:	27 e1       	ldi	r18, 0x17	; 23
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	48 e2       	ldi	r20, 0x28	; 40
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	6e e1       	ldi	r22, 0x1E	; 30
    2198:	7a e0       	ldi	r23, 0x0A	; 10
    219a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
    219e:	4a e0       	ldi	r20, 0x0A	; 10
    21a0:	6b e6       	ldi	r22, 0x6B	; 107
    21a2:	75 e0       	ldi	r23, 0x05	; 5
    21a4:	80 91 88 05 	lds	r24, 0x0588
    21a8:	90 91 89 05 	lds	r25, 0x0589
    21ac:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    21b0:	21 e2       	ldi	r18, 0x21	; 33
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	48 e2       	ldi	r20, 0x28	; 40
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	6e e1       	ldi	r22, 0x1E	; 30
    21ba:	7a e0       	ldi	r23, 0x0A	; 10
    21bc:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
    21c0:	4a e0       	ldi	r20, 0x0A	; 10
    21c2:	6b e6       	ldi	r22, 0x6B	; 107
    21c4:	75 e0       	ldi	r23, 0x05	; 5
    21c6:	80 91 3e 05 	lds	r24, 0x053E
    21ca:	90 91 3f 05 	lds	r25, 0x053F
    21ce:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    21d2:	2d e0       	ldi	r18, 0x0D	; 13
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e5       	ldi	r20, 0x50	; 80
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	6e e1       	ldi	r22, 0x1E	; 30
    21dc:	7a e0       	ldi	r23, 0x0A	; 10
    21de:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
    21e2:	4a e0       	ldi	r20, 0x0A	; 10
    21e4:	6b e6       	ldi	r22, 0x6B	; 107
    21e6:	75 e0       	ldi	r23, 0x05	; 5
    21e8:	80 91 40 05 	lds	r24, 0x0540
    21ec:	90 91 41 05 	lds	r25, 0x0541
    21f0:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    21f4:	27 e1       	ldi	r18, 0x17	; 23
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e5       	ldi	r20, 0x50	; 80
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	6e e1       	ldi	r22, 0x1E	; 30
    21fe:	7a e0       	ldi	r23, 0x0A	; 10
    2200:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
    2204:	4a e0       	ldi	r20, 0x0A	; 10
    2206:	6b e6       	ldi	r22, 0x6B	; 107
    2208:	75 e0       	ldi	r23, 0x05	; 5
    220a:	80 91 42 05 	lds	r24, 0x0542
    220e:	90 91 43 05 	lds	r25, 0x0543
    2212:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    2216:	21 e2       	ldi	r18, 0x21	; 33
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e5       	ldi	r20, 0x50	; 80
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	6e e1       	ldi	r22, 0x1E	; 30
    2220:	7a e0       	ldi	r23, 0x0A	; 10
    2222:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2226:	29 e3       	ldi	r18, 0x39	; 57
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	66 e0       	ldi	r22, 0x06	; 6
    2230:	71 e0       	ldi	r23, 0x01	; 1
    2232:	8c e0       	ldi	r24, 0x0C	; 12
    2234:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(37, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate
    2238:	27 e3       	ldi	r18, 0x37	; 55
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4b e4       	ldi	r20, 0x4B	; 75
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	6e e1       	ldi	r22, 0x1E	; 30
    2242:	7a e0       	ldi	r23, 0x0A	; 10
    2244:	85 e2       	ldi	r24, 0x25	; 37
    2246:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    224a:	27 e3       	ldi	r18, 0x37	; 55
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	4c e6       	ldi	r20, 0x6C	; 108
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	6e e1       	ldi	r22, 0x1E	; 30
    2254:	7a e0       	ldi	r23, 0x0A	; 10
    2256:	8c e3       	ldi	r24, 0x3C	; 60
    2258:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
		clear_buffer(buffer);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>

		if (first_time)
    226c:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    226e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2272:	1c 99       	sbic	0x03, 4	; 3
    2274:	10 c0       	rjmp	.+32     	; 0x2296 <Display_sensors+0x1ae>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2276:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <Wait_BUTTON4>
    227a:	2f e3       	ldi	r18, 0x3F	; 63
    227c:	82 e4       	ldi	r24, 0x42	; 66
    227e:	9f e0       	ldi	r25, 0x0F	; 15
    2280:	21 50       	subi	r18, 0x01	; 1
    2282:	80 40       	sbci	r24, 0x00	; 0
    2284:	90 40       	sbci	r25, 0x00	; 0
    2286:	e1 f7       	brne	.-8      	; 0x2280 <Display_sensors+0x198>
    2288:	00 c0       	rjmp	.+0      	; 0x228a <Display_sensors+0x1a2>
    228a:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    228c:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2296:	1d 99       	sbic	0x03, 5	; 3
    2298:	0c c0       	rjmp	.+24     	; 0x22b2 <Display_sensors+0x1ca>
    229a:	2f e3       	ldi	r18, 0x3F	; 63
    229c:	82 e4       	ldi	r24, 0x42	; 66
    229e:	9f e0       	ldi	r25, 0x0F	; 15
    22a0:	21 50       	subi	r18, 0x01	; 1
    22a2:	80 40       	sbci	r24, 0x00	; 0
    22a4:	90 40       	sbci	r25, 0x00	; 0
    22a6:	e1 f7       	brne	.-8      	; 0x22a0 <Display_sensors+0x1b8>
    22a8:	00 c0       	rjmp	.+0      	; 0x22aa <Display_sensors+0x1c2>
    22aa:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <CalibrateAcc>
    22b2:	c0 e0       	ldi	r28, 0x00	; 0
    22b4:	1f cf       	rjmp	.-450    	; 0x20f4 <Display_sensors+0xc>
		}
	}
}
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    22ba:	bf 92       	push	r11
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <Display_status+0x14>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <Display_status+0x16>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
	int16_t temp, range, scale;
	uint16_t vbat_temp;
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>

	// Display text
	LCD_Display_Text(4,(const unsigned char*)Verdana8,0,0); 	// Preset
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	6e e1       	ldi	r22, 0x1E	; 30
    22e6:	7a e0       	ldi	r23, 0x0A	; 10
    22e8:	84 e0       	ldi	r24, 0x04	; 4
    22ea:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,11); 	// Version text
    22ee:	2b e0       	ldi	r18, 0x0B	; 11
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	6e e1       	ldi	r22, 0x1E	; 30
    22f8:	7a e0       	ldi	r23, 0x0A	; 10
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	LCD_Display_Text(138,(const unsigned char*)Verdana8,0,22); 	// RX sync
    2300:	26 e1       	ldi	r18, 0x16	; 22
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	6e e1       	ldi	r22, 0x1E	; 30
    230a:	7a e0       	ldi	r23, 0x0A	; 10
    230c:	8a e8       	ldi	r24, 0x8A	; 138
    230e:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	LCD_Display_Text(139,(const unsigned char*)Verdana8,0,33); 	// RX sync
    2312:	21 e2       	ldi	r18, 0x21	; 33
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	6e e1       	ldi	r22, 0x1E	; 30
    231c:	7a e0       	ldi	r23, 0x0A	; 10
    231e:	8b e8       	ldi	r24, 0x8B	; 139
    2320:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,44); 	// Profile
    2324:	2c e2       	ldi	r18, 0x2C	; 44
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	6e e1       	ldi	r22, 0x1E	; 30
    232e:	7a e0       	ldi	r23, 0x0A	; 10
    2330:	86 e0       	ldi	r24, 0x06	; 6
    2332:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2336:	2b e3       	ldi	r18, 0x3B	; 59
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	66 e0       	ldi	r22, 0x06	; 6
    2340:	71 e0       	ldi	r23, 0x01	; 1
    2342:	89 e0       	ldi	r24, 0x09	; 9
    2344:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2348:	27 e3       	ldi	r18, 0x37	; 55
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a e0       	ldi	r20, 0x0A	; 10
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	6e e1       	ldi	r22, 0x1E	; 30
    2352:	7a e0       	ldi	r23, 0x0A	; 10
    2354:	8e e0       	ldi	r24, 0x0E	; 14
    2356:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (22 + Config.MixMode), 45, 0);
    235a:	40 91 7c 06 	lds	r20, 0x067C
    235e:	4a 5e       	subi	r20, 0xEA	; 234
    2360:	00 e0       	ldi	r16, 0x00	; 0
    2362:	2d e2       	ldi	r18, 0x2D	; 45
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 dd 28 	call	0x51ba	; 0x51ba <print_menu_text>
	print_menu_text(0, 1, (48 + Config.RxModeIn), 45, 22);
    236e:	40 91 0b 06 	lds	r20, 0x060B
    2372:	40 5d       	subi	r20, 0xD0	; 208
    2374:	06 e1       	ldi	r16, 0x16	; 22
    2376:	2d e2       	ldi	r18, 0x2D	; 45
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 dd 28 	call	0x51ba	; 0x51ba <print_menu_text>
	print_menu_text(0, 1, (48 + Config.RxModeOut), 45, 33);
    2382:	40 91 0c 06 	lds	r20, 0x060C
    2386:	40 5d       	subi	r20, 0xD0	; 208
    2388:	01 e2       	ldi	r16, 0x21	; 33
    238a:	2d e2       	ldi	r18, 0x2D	; 45
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 dd 28 	call	0x51ba	; 0x51ba <print_menu_text>
	mugui_lcd_puts(itoa((Config.Flight + 1),pBuffer,10),(const unsigned char*)Verdana8,45,44);
    2396:	80 91 46 07 	lds	r24, 0x0746
    239a:	99 27       	eor	r25, r25
    239c:	87 fd       	sbrc	r24, 7
    239e:	90 95       	com	r25
    23a0:	4a e0       	ldi	r20, 0x0A	; 10
    23a2:	6b e6       	ldi	r22, 0x6B	; 107
    23a4:	75 e0       	ldi	r23, 0x05	; 5
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    23ac:	2c e2       	ldi	r18, 0x2C	; 44
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4d e2       	ldi	r20, 0x2D	; 45
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	6e e1       	ldi	r22, 0x1E	; 30
    23b6:	7a e0       	ldi	r23, 0x0A	; 10
    23b8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
	
	// Draw battery
	drawrect(buffer, 100,4, 28, 50, 1);					// Battery body
    23bc:	ee 24       	eor	r14, r14
    23be:	e3 94       	inc	r14
    23c0:	02 e3       	ldi	r16, 0x32	; 50
    23c2:	2c e1       	ldi	r18, 0x1C	; 28
    23c4:	44 e0       	ldi	r20, 0x04	; 4
    23c6:	64 e6       	ldi	r22, 0x64	; 100
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <drawrect>
	drawrect(buffer, 110,0, 8, 5, 1);					// Battery terminal
    23d0:	05 e0       	ldi	r16, 0x05	; 5
    23d2:	28 e0       	ldi	r18, 0x08	; 8
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	6e e6       	ldi	r22, 0x6E	; 110
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <drawrect>

	vbat_temp = GetVbat();
    23e0:	0e 94 c3 3f 	call	0x7f86	; 0x7f86 <GetVbat>
    23e4:	6c 01       	movw	r12, r24

	// Calculate battery voltage limits
	range = SystemVoltage - Config.PowerTriggerActual;
    23e6:	80 91 26 05 	lds	r24, 0x0526
    23ea:	90 91 27 05 	lds	r25, 0x0527
    23ee:	20 91 76 06 	lds	r18, 0x0676
    23f2:	30 91 77 06 	lds	r19, 0x0677
	scale = range / 50;

	// Look out for that divide-by-zero... :)
	if ((vbat_temp >= Config.PowerTriggerActual) && (scale > 0))
    23f6:	c2 16       	cp	r12, r18
    23f8:	d3 06       	cpc	r13, r19
    23fa:	a0 f0       	brcs	.+40     	; 0x2424 <Display_status+0x16a>
	drawrect(buffer, 110,0, 8, 5, 1);					// Battery terminal

	vbat_temp = GetVbat();

	// Calculate battery voltage limits
	range = SystemVoltage - Config.PowerTriggerActual;
    23fc:	82 1b       	sub	r24, r18
    23fe:	93 0b       	sbc	r25, r19
	scale = range / 50;
    2400:	62 e3       	ldi	r22, 0x32	; 50
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	0e 94 11 42 	call	0x8422	; 0x8422 <__divmodhi4>

	// Look out for that divide-by-zero... :)
	if ((vbat_temp >= Config.PowerTriggerActual) && (scale > 0))
    2408:	16 16       	cp	r1, r22
    240a:	17 06       	cpc	r1, r23
    240c:	5c f4       	brge	.+22     	; 0x2424 <Display_status+0x16a>
	{
		temp = (vbat_temp - Config.PowerTriggerActual) / scale;
    240e:	c6 01       	movw	r24, r12
    2410:	82 1b       	sub	r24, r18
    2412:	93 0b       	sbc	r25, r19
    2414:	0e 94 fd 41 	call	0x83fa	; 0x83fa <__udivmodhi4>
	else
	{
		temp = 0;
	}

	if (temp > 50) temp = 50;
    2418:	63 33       	cpi	r22, 0x33	; 51
    241a:	71 05       	cpc	r23, r1
    241c:	2c f0       	brlt	.+10     	; 0x2428 <Display_status+0x16e>
    241e:	62 e3       	ldi	r22, 0x32	; 50
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <Display_status+0x16e>
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0

	fillrect(buffer, 100,54-temp, 28, temp, 1);				// Battery filler (max is 60)
    2428:	46 e3       	ldi	r20, 0x36	; 54
    242a:	46 1b       	sub	r20, r22
    242c:	ee 24       	eor	r14, r14
    242e:	e3 94       	inc	r14
    2430:	06 2f       	mov	r16, r22
    2432:	2c e1       	ldi	r18, 0x1C	; 28
    2434:	64 e6       	ldi	r22, 0x64	; 100
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	0e 94 9f 19 	call	0x333e	; 0x333e <fillrect>

	// Display voltage
	uint8_t x_loc = 102;	// X location of voltage display
	uint8_t y_loc = 55;		// Y location of voltage display

	temp = vbat_temp/100;	// Display whole decimal part first
    243e:	c6 01       	movw	r24, r12
    2440:	64 e6       	ldi	r22, 0x64	; 100
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	0e 94 fd 41 	call	0x83fa	; 0x83fa <__udivmodhi4>
    2448:	7b 01       	movw	r14, r22
    244a:	4a e0       	ldi	r20, 0x0A	; 10
    244c:	6b e6       	ldi	r22, 0x6B	; 107
    244e:	75 e0       	ldi	r23, 0x05	; 5
    2450:	c7 01       	movw	r24, r14
    2452:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2456:	ae 01       	movw	r20, r28
    2458:	4f 5f       	subi	r20, 0xFF	; 255
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	6e e1       	ldi	r22, 0x1E	; 30
    245e:	7a e0       	ldi	r23, 0x0A	; 10
    2460:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <mugui_text_sizestring>
    2464:	4a e0       	ldi	r20, 0x0A	; 10
    2466:	6b e6       	ldi	r22, 0x6B	; 107
    2468:	75 e0       	ldi	r23, 0x05	; 5
    246a:	c7 01       	movw	r24, r14
    246c:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2470:	27 e3       	ldi	r18, 0x37	; 55
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	46 e6       	ldi	r20, 0x66	; 102
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	6e e1       	ldi	r22, 0x1E	; 30
    247a:	7a e0       	ldi	r23, 0x0A	; 10
    247c:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2480:	2c e9       	ldi	r18, 0x9C	; 156
    2482:	a7 01       	movw	r20, r14
    2484:	24 03       	mulsu	r18, r20
    2486:	80 01       	movw	r16, r0
    2488:	25 9f       	mul	r18, r21
    248a:	10 0d       	add	r17, r0
    248c:	11 24       	eor	r1, r1
    248e:	0c 0d       	add	r16, r12
    2490:	1d 1d       	adc	r17, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2492:	c9 80       	ldd	r12, Y+1	; 0x01
    2494:	dd 24       	eor	r13, r13
    2496:	c7 fc       	sbrc	r12, 7
    2498:	d0 94       	com	r13
    249a:	56 e6       	ldi	r21, 0x66	; 102
    249c:	c5 0e       	add	r12, r21
    249e:	d1 1c       	adc	r13, r1
    24a0:	27 e3       	ldi	r18, 0x37	; 55
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	a6 01       	movw	r20, r12
    24a6:	6e e1       	ldi	r22, 0x1E	; 30
    24a8:	7a e0       	ldi	r23, 0x0A	; 10
    24aa:	87 e0       	ldi	r24, 0x07	; 7
    24ac:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    24b0:	ae 01       	movw	r20, r28
    24b2:	4f 5f       	subi	r20, 0xFF	; 255
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	6e e1       	ldi	r22, 0x1E	; 30
    24b8:	7a e0       	ldi	r23, 0x0A	; 10
    24ba:	87 e0       	ldi	r24, 0x07	; 7
    24bc:	95 e0       	ldi	r25, 0x05	; 5
    24be:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <mugui_text_sizestring>
	pos3 = size.x;
    24c2:	e9 80       	ldd	r14, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    24c4:	ae 01       	movw	r20, r28
    24c6:	4f 5f       	subi	r20, 0xFF	; 255
    24c8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ca:	6e e1       	ldi	r22, 0x1E	; 30
    24cc:	7a e0       	ldi	r23, 0x0A	; 10
    24ce:	89 e0       	ldi	r24, 0x09	; 9
    24d0:	95 e0       	ldi	r25, 0x05	; 5
    24d2:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <mugui_text_sizestring>
	pos2 = size.x;
    24d6:	b9 80       	ldd	r11, Y+1	; 0x01
    24d8:	ff 24       	eor	r15, r15
    24da:	e7 fc       	sbrc	r14, 7
    24dc:	f0 94       	com	r15

	if (vbat_temp >= 10)
    24de:	0a 30       	cpi	r16, 0x0A	; 10
    24e0:	11 05       	cpc	r17, r1
    24e2:	40 f0       	brcs	.+16     	; 0x24f4 <Display_status+0x23a>
    24e4:	4a e0       	ldi	r20, 0x0A	; 10
    24e6:	6b e6       	ldi	r22, 0x6B	; 107
    24e8:	75 e0       	ldi	r23, 0x05	; 5
    24ea:	c8 01       	movw	r24, r16
    24ec:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    24f0:	a6 01       	movw	r20, r12
    24f2:	15 c0       	rjmp	.+42     	; 0x251e <Display_status+0x264>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    24f4:	a6 01       	movw	r20, r12
    24f6:	4e 0d       	add	r20, r14
    24f8:	5f 1d       	adc	r21, r15
    24fa:	27 e3       	ldi	r18, 0x37	; 55
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	6e e1       	ldi	r22, 0x1E	; 30
    2500:	7a e0       	ldi	r23, 0x0A	; 10
    2502:	88 e0       	ldi	r24, 0x08	; 8
    2504:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
    2508:	4a e0       	ldi	r20, 0x0A	; 10
    250a:	6b e6       	ldi	r22, 0x6B	; 107
    250c:	75 e0       	ldi	r23, 0x05	; 5
    250e:	c8 01       	movw	r24, r16
    2510:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2514:	a6 01       	movw	r20, r12
    2516:	4b 0d       	add	r20, r11
    2518:	51 1d       	adc	r21, r1
    251a:	b7 fc       	sbrc	r11, 7
    251c:	5a 95       	dec	r21
    251e:	4e 0d       	add	r20, r14
    2520:	5f 1d       	adc	r21, r15
    2522:	27 e3       	ldi	r18, 0x37	; 55
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	6e e1       	ldi	r22, 0x1E	; 30
    2528:	7a e0       	ldi	r23, 0x0A	; 10
    252a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
	}

	// Draw error messages, if any
	if ((General_error != 0) || (Flight_flags & (1 << FailsafeFlag)))
    252e:	80 91 1d 05 	lds	r24, 0x051D
    2532:	81 11       	cpse	r24, r1
    2534:	04 c0       	rjmp	.+8      	; 0x253e <Display_status+0x284>
    2536:	80 91 1c 05 	lds	r24, 0x051C
    253a:	82 ff       	sbrs	r24, 2
    253c:	52 c0       	rjmp	.+164    	; 0x25e2 <Display_status+0x328>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    253e:	e1 2c       	mov	r14, r1
    2540:	00 e3       	ldi	r16, 0x30	; 48
    2542:	20 e6       	ldi	r18, 0x60	; 96
    2544:	48 e0       	ldi	r20, 0x08	; 8
    2546:	6e e0       	ldi	r22, 0x0E	; 14
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	0e 94 9f 19 	call	0x333e	; 0x333e <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    2550:	ee 24       	eor	r14, r14
    2552:	e3 94       	inc	r14
    2554:	20 e6       	ldi	r18, 0x60	; 96
    2556:	48 e0       	ldi	r20, 0x08	; 8
    2558:	6e e0       	ldi	r22, 0x0E	; 14
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <drawrect>

		// Prioritise error from top to bottom
		if (General_error & (1 << LVA_ALARM))
    2562:	80 91 1d 05 	lds	r24, 0x051D
    2566:	83 ff       	sbrs	r24, 3
    2568:	11 c0       	rjmp	.+34     	; 0x258c <Display_status+0x2d2>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14); // Battery
    256a:	2e e0       	ldi	r18, 0x0E	; 14
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	41 e2       	ldi	r20, 0x21	; 33
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	60 e7       	ldi	r22, 0x70	; 112
    2574:	71 e0       	ldi	r23, 0x01	; 1
    2576:	86 e8       	ldi	r24, 0x86	; 134
    2578:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
			LCD_Display_Text(119,(const unsigned char*)Verdana14,46,34); // Low
    257c:	22 e2       	ldi	r18, 0x22	; 34
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4e e2       	ldi	r20, 0x2E	; 46
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	60 e7       	ldi	r22, 0x70	; 112
    2586:	71 e0       	ldi	r23, 0x01	; 1
    2588:	87 e7       	ldi	r24, 0x77	; 119
    258a:	29 c0       	rjmp	.+82     	; 0x25de <Display_status+0x324>
		}
		else if (Flight_flags & (1 << FailsafeFlag))
    258c:	80 91 1c 05 	lds	r24, 0x051C
    2590:	82 ff       	sbrs	r24, 2
    2592:	11 c0       	rjmp	.+34     	; 0x25b6 <Display_status+0x2fc>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); // No
    2594:	2d e0       	ldi	r18, 0x0D	; 13
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	43 e3       	ldi	r20, 0x33	; 51
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	60 e7       	ldi	r22, 0x70	; 112
    259e:	71 e0       	ldi	r23, 0x01	; 1
    25a0:	8b e4       	ldi	r24, 0x4B	; 75
    25a2:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33); // Signal
    25a6:	21 e2       	ldi	r18, 0x21	; 33
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	47 e2       	ldi	r20, 0x27	; 39
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	60 e7       	ldi	r22, 0x70	; 112
    25b0:	71 e0       	ldi	r23, 0x01	; 1
    25b2:	8c e4       	ldi	r24, 0x4C	; 76
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <Display_status+0x324>
		}
		else if (General_error & (1 << THROTTLE_HIGH))
    25b6:	80 91 1d 05 	lds	r24, 0x051D
    25ba:	81 ff       	sbrs	r24, 1
    25bc:	12 c0       	rjmp	.+36     	; 0x25e2 <Display_status+0x328>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14); // Throttle
    25be:	2e e0       	ldi	r18, 0x0E	; 14
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4c e1       	ldi	r20, 0x1C	; 28
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	60 e7       	ldi	r22, 0x70	; 112
    25c8:	71 e0       	ldi	r23, 0x01	; 1
    25ca:	89 e6       	ldi	r24, 0x69	; 105
    25cc:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
			LCD_Display_Text(121,(const unsigned char*)Verdana14,46,34); // High
    25d0:	22 e2       	ldi	r18, 0x22	; 34
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4e e2       	ldi	r20, 0x2E	; 46
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	60 e7       	ldi	r22, 0x70	; 112
    25da:	71 e0       	ldi	r23, 0x01	; 1
    25dc:	89 e7       	ldi	r24, 0x79	; 121
    25de:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
	clear_buffer(buffer);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	08 95       	ret

0000260e <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2624:	c0 90 54 07 	lds	r12, 0x0754
	temp_2ndaileron = Config.SecAileronPol;
    2628:	d0 90 55 07 	lds	r13, 0x0755
	temp_elevator = Config.ElevatorPol;
    262c:	f0 90 56 07 	lds	r15, 0x0756
	temp_rudder = Config.RudderPol;
    2630:	90 90 57 07 	lds	r9, 0x0757

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2634:	10 92 54 07 	sts	0x0754, r1
	Config.SecAileronPol = NORMAL;
    2638:	10 92 55 07 	sts	0x0755, r1
	Config.ElevatorPol =  NORMAL;
    263c:	10 92 56 07 	sts	0x0756, r1
	Config.RudderPol = NORMAL;
    2640:	10 92 57 07 	sts	0x0757, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2644:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2646:	c0 e0       	ldi	r28, 0x00	; 0
	Config.SecAileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
    2648:	1f 9b       	sbis	0x03, 7	; 3
    264a:	de c0       	rjmp	.+444    	; 0x2808 <Display_sticks+0x1fa>
    264c:	c1 11       	cpse	r28, r1
    264e:	de c0       	rjmp	.+444    	; 0x280c <Display_sticks+0x1fe>
	{
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	91 e0       	ldi	r25, 0x01	; 1
    2654:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
    2658:	92 e0       	ldi	r25, 0x02	; 2
    265a:	b9 2e       	mov	r11, r25
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		offset = 0;
    265c:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    265e:	61 e1       	ldi	r22, 0x11	; 17
    2660:	61 0f       	add	r22, r17
    2662:	ee 24       	eor	r14, r14
    2664:	e3 94       	inc	r14
    2666:	08 e2       	ldi	r16, 0x28	; 40
    2668:	28 e2       	ldi	r18, 0x28	; 40
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	91 e0       	ldi	r25, 0x01	; 1
    2670:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2674:	86 e2       	ldi	r24, 0x26	; 38
    2676:	a8 2e       	mov	r10, r24
    2678:	a1 0e       	add	r10, r17
    267a:	20 e3       	ldi	r18, 0x30	; 48
    267c:	21 0f       	add	r18, r17
    267e:	03 e0       	ldi	r16, 0x03	; 3
    2680:	44 e1       	ldi	r20, 0x14	; 20
    2682:	6a 2d       	mov	r22, r10
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	91 e0       	ldi	r25, 0x01	; 1
    2688:	0e 94 35 19 	call	0x326a	; 0x326a <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    268c:	28 e3       	ldi	r18, 0x38	; 56
    268e:	21 0f       	add	r18, r17
    2690:	69 e2       	ldi	r22, 0x29	; 41
    2692:	61 0f       	add	r22, r17
    2694:	06 e0       	ldi	r16, 0x06	; 6
    2696:	45 e1       	ldi	r20, 0x15	; 21
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	0e 94 35 19 	call	0x326a	; 0x326a <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
    26a0:	01 e0       	ldi	r16, 0x01	; 1
    26a2:	22 e0       	ldi	r18, 0x02	; 2
    26a4:	45 e1       	ldi	r20, 0x15	; 21
    26a6:	6a 2d       	mov	r22, r10
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	0e 94 25 1a 	call	0x344a	; 0x344a <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    26b0:	63 e3       	ldi	r22, 0x33	; 51
    26b2:	61 0f       	add	r22, r17
    26b4:	24 e0       	ldi	r18, 0x04	; 4
    26b6:	45 e0       	ldi	r20, 0x05	; 5
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	0e 94 25 1a 	call	0x344a	; 0x344a <fillcircle>
    26c0:	ba 94       	dec	r11

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    26c2:	11 f0       	breq	.+4      	; 0x26c8 <Display_sticks+0xba>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			offset = 52;
    26c4:	14 e3       	ldi	r17, 0x34	; 52
    26c6:	cb cf       	rjmp	.-106    	; 0x265e <Display_sticks+0x50>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    26c8:	29 e3       	ldi	r18, 0x39	; 57
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	66 e0       	ldi	r22, 0x06	; 6
    26d2:	71 e0       	ldi	r23, 0x01	; 1
    26d4:	8c e0       	ldi	r24, 0x0C	; 12
    26d6:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    26da:	0e 94 b2 39 	call	0x7364	; 0x7364 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    26de:	80 91 d1 07 	lds	r24, 0x07D1
    26e2:	90 91 d2 07 	lds	r25, 0x07D2
    26e6:	80 33       	cpi	r24, 0x30	; 48
    26e8:	98 4f       	sbci	r25, 0xF8	; 248
    26ea:	3c f0       	brlt	.+14     	; 0x26fa <Display_sticks+0xec>
    26ec:	80 91 d1 07 	lds	r24, 0x07D1
    26f0:	90 91 d2 07 	lds	r25, 0x07D2
    26f4:	81 3d       	cpi	r24, 0xD1	; 209
    26f6:	97 40       	sbci	r25, 0x07	; 7
    26f8:	64 f0       	brlt	.+24     	; 0x2712 <Display_sticks+0x104>
    26fa:	d1 11       	cpse	r29, r1
    26fc:	0a c0       	rjmp	.+20     	; 0x2712 <Display_sticks+0x104>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
    26fe:	2b e2       	ldi	r18, 0x2B	; 43
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4e e0       	ldi	r20, 0x0E	; 14
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	60 e7       	ldi	r22, 0x70	; 112
    2708:	71 e0       	ldi	r23, 0x01	; 1
    270a:	87 e8       	ldi	r24, 0x87	; 135
    270c:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
    2710:	76 c0       	rjmp	.+236    	; 0x27fe <Display_sticks+0x1f0>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2712:	80 91 d1 07 	lds	r24, 0x07D1
    2716:	90 91 d2 07 	lds	r25, 0x07D2
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    271a:	84 3f       	cpi	r24, 0xF4	; 244
    271c:	91 40       	sbci	r25, 0x01	; 1
    271e:	3c f4       	brge	.+14     	; 0x272e <Display_sticks+0x120>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2720:	80 91 d1 07 	lds	r24, 0x07D1
    2724:	90 91 d2 07 	lds	r25, 0x07D2
    2728:	8d 30       	cpi	r24, 0x0D	; 13
    272a:	9e 4f       	sbci	r25, 0xFE	; 254
    272c:	e4 f4       	brge	.+56     	; 0x2766 <Display_sticks+0x158>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    272e:	80 91 d3 07 	lds	r24, 0x07D3
    2732:	90 91 d4 07 	lds	r25, 0x07D4
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2736:	84 3f       	cpi	r24, 0xF4	; 244
    2738:	91 40       	sbci	r25, 0x01	; 1
    273a:	3c f4       	brge	.+14     	; 0x274a <Display_sticks+0x13c>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    273c:	80 91 d3 07 	lds	r24, 0x07D3
    2740:	90 91 d4 07 	lds	r25, 0x07D4
    2744:	8d 30       	cpi	r24, 0x0D	; 13
    2746:	9e 4f       	sbci	r25, 0xFE	; 254
    2748:	74 f4       	brge	.+28     	; 0x2766 <Display_sticks+0x158>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
    274a:	80 91 d5 07 	lds	r24, 0x07D5
    274e:	90 91 d6 07 	lds	r25, 0x07D6
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2752:	84 3f       	cpi	r24, 0xF4	; 244
    2754:	91 40       	sbci	r25, 0x01	; 1
    2756:	94 f4       	brge	.+36     	; 0x277c <Display_sticks+0x16e>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
    2758:	80 91 d5 07 	lds	r24, 0x07D5
    275c:	90 91 d6 07 	lds	r25, 0x07D6
    2760:	8d 30       	cpi	r24, 0x0D	; 13
    2762:	9e 4f       	sbci	r25, 0xFE	; 254
    2764:	5c f0       	brlt	.+22     	; 0x277c <Display_sticks+0x16e>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2766:	2b e2       	ldi	r18, 0x2B	; 43
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	49 e0       	ldi	r20, 0x09	; 9
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	60 e7       	ldi	r22, 0x70	; 112
    2770:	71 e0       	ldi	r23, 0x01	; 1
    2772:	88 e8       	ldi	r24, 0x88	; 136
    2774:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
					)
			{
				CalibrateStarted = true;
    2778:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    277a:	41 c0       	rjmp	.+130    	; 0x27fe <Display_sticks+0x1f0>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    277c:	80 91 d1 07 	lds	r24, 0x07D1
    2780:	90 91 d2 07 	lds	r25, 0x07D2
    2784:	97 ff       	sbrs	r25, 7
    2786:	03 c0       	rjmp	.+6      	; 0x278e <Display_sticks+0x180>
				{
					Config.AileronPol = REVERSED;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	80 93 54 07 	sts	0x0754, r24
				}

				// Only reverse 2nd aileron if set up as one
				if ((Config.FlapChan != NOCHAN) && (RCinputs[Config.FlapChan] < 0))
    278e:	e0 91 0f 06 	lds	r30, 0x060F
    2792:	e8 30       	cpi	r30, 0x08	; 8
    2794:	59 f0       	breq	.+22     	; 0x27ac <Display_sticks+0x19e>
    2796:	ee 0f       	add	r30, r30
    2798:	ff 0b       	sbc	r31, r31
    279a:	e1 53       	subi	r30, 0x31	; 49
    279c:	f8 4f       	sbci	r31, 0xF8	; 248
    279e:	80 81       	ld	r24, Z
    27a0:	91 81       	ldd	r25, Z+1	; 0x01
    27a2:	97 ff       	sbrs	r25, 7
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <Display_sticks+0x19e>
				{
					Config.SecAileronPol = REVERSED;
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 93 55 07 	sts	0x0755, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    27ac:	80 91 d3 07 	lds	r24, 0x07D3
    27b0:	90 91 d4 07 	lds	r25, 0x07D4
    27b4:	97 ff       	sbrs	r25, 7
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <Display_sticks+0x1b0>
				{
					Config.ElevatorPol = REVERSED;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	80 93 56 07 	sts	0x0756, r24
				}

				if (RCinputs[RUDDER] < 0)
    27be:	80 91 d5 07 	lds	r24, 0x07D5
    27c2:	90 91 d6 07 	lds	r25, 0x07D6
    27c6:	97 ff       	sbrs	r25, 7
    27c8:	03 c0       	rjmp	.+6      	; 0x27d0 <Display_sticks+0x1c2>
				{
					Config.RudderPol = REVERSED;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 93 57 07 	sts	0x0757, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    27d0:	80 91 d1 07 	lds	r24, 0x07D1
    27d4:	90 91 d2 07 	lds	r25, 0x07D2
    27d8:	18 16       	cp	r1, r24
    27da:	19 06       	cpc	r1, r25
    27dc:	84 f4       	brge	.+32     	; 0x27fe <Display_sticks+0x1f0>
    27de:	80 91 d3 07 	lds	r24, 0x07D3
    27e2:	90 91 d4 07 	lds	r25, 0x07D4
    27e6:	18 16       	cp	r1, r24
    27e8:	19 06       	cpc	r1, r25
    27ea:	4c f4       	brge	.+18     	; 0x27fe <Display_sticks+0x1f0>
    27ec:	80 91 d5 07 	lds	r24, 0x07D5
    27f0:	90 91 d6 07 	lds	r25, 0x07D6
    27f4:	c1 e0       	ldi	r28, 0x01	; 1
    27f6:	18 16       	cp	r1, r24
    27f8:	19 06       	cpc	r1, r25
    27fa:	0c f0       	brlt	.+2      	; 0x27fe <Display_sticks+0x1f0>
    27fc:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
    2806:	20 cf       	rjmp	.-448    	; 0x2648 <Display_sticks+0x3a>
	}

	// Save value and return
	if (CalibrateDone)
    2808:	cc 23       	and	r28, r28
    280a:	39 f1       	breq	.+78     	; 0x285a <Display_sticks+0x24c>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    280c:	2b e2       	ldi	r18, 0x2B	; 43
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	48 e2       	ldi	r20, 0x28	; 40
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	60 e7       	ldi	r22, 0x70	; 112
    2816:	71 e0       	ldi	r23, 0x01	; 1
    2818:	89 e8       	ldi	r24, 0x89	; 137
    281a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
		clear_buffer(buffer);
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
    282e:	8f e7       	ldi	r24, 0x7F	; 127
    2830:	94 e8       	ldi	r25, 0x84	; 132
    2832:	2e e1       	ldi	r18, 0x1E	; 30
    2834:	81 50       	subi	r24, 0x01	; 1
    2836:	90 40       	sbci	r25, 0x00	; 0
    2838:	20 40       	sbci	r18, 0x00	; 0
    283a:	e1 f7       	brne	.-8      	; 0x2834 <Display_sticks+0x226>
    283c:	00 c0       	rjmp	.+0      	; 0x283e <Display_sticks+0x230>
    283e:	00 00       	nop
		Config.AileronPol = temp_aileron;
		Config.SecAileronPol = temp_2ndaileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2856:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    285a:	c0 92 54 07 	sts	0x0754, r12
		Config.SecAileronPol = temp_2ndaileron;
    285e:	d0 92 55 07 	sts	0x0755, r13
		Config.ElevatorPol = temp_elevator;
    2862:	f0 92 56 07 	sts	0x0756, r15
		Config.RudderPol = temp_rudder;
    2866:	90 92 57 07 	sts	0x0757, r9
	}
}
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	ef 90       	pop	r14
    2876:	df 90       	pop	r13
    2878:	cf 90       	pop	r12
    287a:	bf 90       	pop	r11
    287c:	af 90       	pop	r10
    287e:	9f 90       	pop	r9
    2880:	08 95       	ret

00002882 <Set_EEPROM_Default_Config>:

const uint8_t	JR[MAX_RC_CHANNELS] PROGMEM 	= {0,1,2,3,4,5,6,7}; 	// JR/Spektrum channel sequence (TAERG123)
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Set_EEPROM_Default_Config(void)
{
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    2886:	86 e9       	ldi	r24, 0x96	; 150
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	e2 ec       	ldi	r30, 0xC2	; 194
    288c:	f5 e0       	ldi	r31, 0x05	; 5
    288e:	df 01       	movw	r26, r30
    2890:	ec 01       	movw	r28, r24
    2892:	1d 92       	st	X+, r1
    2894:	21 97       	sbiw	r28, 0x01	; 1
    2896:	e9 f7       	brne	.-6      	; 0x2892 <Set_EEPROM_Default_Config+0x10>

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
    2898:	81 e5       	ldi	r24, 0x51	; 81
    289a:	80 93 c2 05 	sts	0x05C2, r24
    289e:	6c e0       	ldi	r22, 0x0C	; 12
    28a0:	77 e0       	ldi	r23, 0x07	; 7
    28a2:	a4 e1       	ldi	r26, 0x14	; 20
    28a4:	b7 e0       	ldi	r27, 0x07	; 7
    28a6:	e1 e9       	ldi	r30, 0x91	; 145
    28a8:	f6 e0       	ldi	r31, 0x06	; 6
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
	{	
		Config.min_travel[i] = -125;
    28aa:	43 e8       	ldi	r20, 0x83	; 131
		Config.max_travel[i] = 125;	
    28ac:	3d e7       	ldi	r19, 0x7D	; 125
		Config.Channel[i].output_b = NOMIX;
    28ae:	2f e0       	ldi	r18, 0x0F	; 15
	Config.setup = MAGIC_NUMBER;
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
	{	
		Config.min_travel[i] = -125;
    28b0:	eb 01       	movw	r28, r22
    28b2:	49 93       	st	Y+, r20
    28b4:	be 01       	movw	r22, r28
		Config.max_travel[i] = 125;	
    28b6:	3d 93       	st	X+, r19
    28b8:	cf 01       	movw	r24, r30
    28ba:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].output_b = NOMIX;
    28bc:	ec 01       	movw	r28, r24
    28be:	28 83       	st	Y, r18
		Config.Channel[i].output_c = NOMIX;
    28c0:	20 83       	st	Z, r18
    28c2:	3f 96       	adiw	r30, 0x0f	; 15

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
    28c4:	d7 e0       	ldi	r29, 0x07	; 7
    28c6:	ac 31       	cpi	r26, 0x1C	; 28
    28c8:	bd 07       	cpc	r27, r29
    28ca:	91 f7       	brne	.-28     	; 0x28b0 <Set_EEPROM_Default_Config+0x2e>
    28cc:	ee ef       	ldi	r30, 0xFE	; 254
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	c3 ec       	ldi	r28, 0xC3	; 195
    28d2:	d5 e0       	ldi	r29, 0x05	; 5
    28d4:	a4 e2       	ldi	r26, 0x24	; 36
    28d6:	b7 e0       	ldi	r27, 0x07	; 7
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    28d8:	86 ea       	ldi	r24, 0xA6	; 166
    28da:	9e e0       	ldi	r25, 0x0E	; 14
	}
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    28dc:	24 91       	lpm	r18, Z
    28de:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    28e0:	8d 93       	st	X+, r24
    28e2:	9d 93       	st	X+, r25
    28e4:	31 96       	adiw	r30, 0x01	; 1
		Config.Channel[i].output_b = NOMIX;
		Config.Channel[i].output_c = NOMIX;
	}
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	e6 30       	cpi	r30, 0x06	; 6
    28ea:	f2 07       	cpc	r31, r18
    28ec:	b9 f7       	brne	.-18     	; 0x28dc <Set_EEPROM_Default_Config+0x5a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    28ee:	8e eb       	ldi	r24, 0xBE	; 190
    28f0:	9a e0       	ldi	r25, 0x0A	; 10
    28f2:	90 93 25 07 	sts	0x0725, r25
    28f6:	80 93 24 07 	sts	0x0724, r24

	Config.Failsafe[0] = -100;			// Throttle should failsafe to minimum
    28fa:	8c e9       	ldi	r24, 0x9C	; 156
    28fc:	80 93 1c 07 	sts	0x071C, r24
	//
	get_preset_mix(AEROPLANE_MIX);		// Load AEROPLANE default mix
    2900:	8c e0       	ldi	r24, 0x0C	; 12
    2902:	99 e1       	ldi	r25, 0x19	; 25
    2904:	0e 94 15 31 	call	0x622a	; 0x622a <get_preset_mix>
	//
	Config.RxModeIn = SBUS;				// Default to S.Bus
    2908:	21 e0       	ldi	r18, 0x01	; 1
    290a:	20 93 0b 06 	sts	0x060B, r18
	Config.RxModeOut = SBUS;			// Default to S.Bus
    290e:	20 93 0c 06 	sts	0x060C, r18
	Config.TxSeq = JRSEQ;
    2912:	10 92 0d 06 	sts	0x060D, r1

#ifdef KK21
	Config.AccZero[ROLL] 	= 0;		// Acc calibration defaults for KK2.1
    2916:	10 92 35 07 	sts	0x0735, r1
    291a:	10 92 34 07 	sts	0x0734, r1
	Config.AccZero[PITCH]	= 0;
    291e:	10 92 37 07 	sts	0x0737, r1
    2922:	10 92 36 07 	sts	0x0736, r1
	Config.AccZero[YAW]		= 0;
    2926:	10 92 39 07 	sts	0x0739, r1
    292a:	10 92 38 07 	sts	0x0738, r1
	Config.AccZeroNormZ		= 128;
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	90 93 3b 07 	sts	0x073B, r25
    2936:	80 93 3a 07 	sts	0x073A, r24
	Config.AccZero[YAW]		= 643; 		// 643 is the center
	Config.AccZeroNormZ		= 765;
#endif
	
	// Set up flight modes for all three profiles
	Config.FlightMode[1].StabMode = ALWAYSON;
    293a:	20 93 31 06 	sts	0x0631, r18
	Config.FlightMode[2].StabMode = ALWAYSON;
    293e:	20 93 47 06 	sts	0x0647, r18
	Config.FlightMode[2].AutoMode = ALWAYSON;
    2942:	20 93 48 06 	sts	0x0648, r18
    2946:	ed e2       	ldi	r30, 0x2D	; 45
    2948:	f6 e0       	ldi	r31, 0x06	; 6

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll.P_mult = 80;			// PID defaults		
    294a:	80 e5       	ldi	r24, 0x50	; 80
		Config.FlightMode[i].Roll.I_mult = 50;	
    294c:	22 e3       	ldi	r18, 0x32	; 50
		Config.FlightMode[i].Pitch.P_mult = 80;
		Config.FlightMode[i].Pitch.I_mult = 50;
		Config.FlightMode[i].Yaw.P_mult = 80;
		Config.FlightMode[i].Yaw.I_mult = 80;
		Config.FlightMode[i].A_Roll_P_mult = 20;
    294e:	94 e1       	ldi	r25, 0x14	; 20
    2950:	df 01       	movw	r26, r30
    2952:	1f 97       	sbiw	r26, 0x0f	; 15
	Config.FlightMode[2].AutoMode = ALWAYSON;

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll.P_mult = 80;			// PID defaults		
    2954:	8c 93       	st	X, r24
    2956:	11 96       	adiw	r26, 0x01	; 1
		Config.FlightMode[i].Roll.I_mult = 50;	
    2958:	2c 93       	st	X, r18
    295a:	16 96       	adiw	r26, 0x06	; 6
		Config.FlightMode[i].Pitch.P_mult = 80;
    295c:	8c 93       	st	X, r24
    295e:	11 96       	adiw	r26, 0x01	; 1
		Config.FlightMode[i].Pitch.I_mult = 50;
    2960:	2c 93       	st	X, r18
    2962:	16 96       	adiw	r26, 0x06	; 6
		Config.FlightMode[i].Yaw.P_mult = 80;
    2964:	8c 93       	st	X, r24
		Config.FlightMode[i].Yaw.I_mult = 80;
    2966:	80 83       	st	Z, r24
    2968:	1a 97       	sbiw	r26, 0x0a	; 10
		Config.FlightMode[i].A_Roll_P_mult = 20;
    296a:	9c 93       	st	X, r25
    296c:	17 96       	adiw	r26, 0x07	; 7
		Config.FlightMode[i].A_Pitch_P_mult = 20;
    296e:	9c 93       	st	X, r25
    2970:	76 96       	adiw	r30, 0x16	; 22
	Config.FlightMode[1].StabMode = ALWAYSON;
	Config.FlightMode[2].StabMode = ALWAYSON;
	Config.FlightMode[2].AutoMode = ALWAYSON;

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
    2972:	36 e0       	ldi	r19, 0x06	; 6
    2974:	ef 36       	cpi	r30, 0x6F	; 111
    2976:	f3 07       	cpc	r31, r19
    2978:	59 f7       	brne	.-42     	; 0x2950 <Set_EEPROM_Default_Config+0xce>
		Config.FlightMode[i].Yaw.I_mult = 80;
		Config.FlightMode[i].A_Roll_P_mult = 20;
		Config.FlightMode[i].A_Pitch_P_mult = 20;
	}

	Config.Acc_LPF = HZ21;
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	80 93 82 06 	sts	0x0682, r24
#ifdef KK21
	Config.MPU6050_LPF = HZ21;			// 21Hz
    2980:	80 93 83 06 	sts	0x0683, r24
#endif
	Config.CF_factor = 7;
    2984:	97 e0       	ldi	r25, 0x07	; 7
    2986:	90 93 81 06 	sts	0x0681, r25
	Config.DynGainSrc = NOCHAN;
    298a:	98 e0       	ldi	r25, 0x08	; 8
    298c:	90 93 10 06 	sts	0x0610, r25
	Config.DynGain = 100;
    2990:	24 e6       	ldi	r18, 0x64	; 100
    2992:	20 93 11 06 	sts	0x0611, r18
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    2996:	24 e0       	ldi	r18, 0x04	; 4
    2998:	20 93 0e 06 	sts	0x060E, r18
	Config.FlapChan = NOCHAN;			// This is to make sure that flaperons are handled correctly when disabled
    299c:	90 93 0f 06 	sts	0x060F, r25
	Config.Orientation = HORIZONTAL;	// Board orientation
    29a0:	10 92 7d 06 	sts	0x067D, r1
#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
#else
	Config.Contrast = 36;				// Contrast (Everything else)
    29a4:	94 e2       	ldi	r25, 0x24	; 36
    29a6:	90 93 7e 06 	sts	0x067E, r25
#endif
	Config.LMA_enable = 0;				// Default to off
    29aa:	10 92 80 06 	sts	0x0680, r1
	Config.Stick_Lock_rate = 3;
    29ae:	93 e0       	ldi	r25, 0x03	; 3
    29b0:	90 93 14 06 	sts	0x0614, r25
	Config.Deadband = 2;				// RC deadband = 2%
    29b4:	80 93 15 06 	sts	0x0615, r24
	Config.FailsafeThrottle = -100;		// Throttle position in failsafe
    29b8:	8c e9       	ldi	r24, 0x9C	; 156
    29ba:	80 93 17 06 	sts	0x0617, r24
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	1f 92       	push	r1
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    29d4:	69 83       	std	Y+1, r22	; 0x01
    29d6:	0e 94 db 42 	call	0x85b6	; 0x85b6 <__eerd_byte_m644p>
    29da:	69 81       	ldd	r22, Y+1	; 0x01
    29dc:	86 17       	cp	r24, r22
    29de:	41 f0       	breq	.+16     	; 0x29f0 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    29e0:	c8 01       	movw	r24, r16
	}
}
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    29ec:	0c 94 e3 42 	jmp	0x85c6	; 0x85c6 <__eewr_byte_m644p>
	}
}
    29f0:	0f 90       	pop	r0
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	08 95       	ret

000029fc <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	ec 01       	movw	r28, r24
    2a0a:	8b 01       	movw	r16, r22
    2a0c:	7a 01       	movw	r14, r20
    2a0e:	e8 0e       	add	r14, r24
    2a10:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2a12:	ce 15       	cp	r28, r14
    2a14:	df 05       	cpc	r29, r15
    2a16:	39 f0       	breq	.+14     	; 0x2a26 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2a18:	69 91       	ld	r22, Y+
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <eeprom_write_byte_changed>
		src++;
		dest++;
    2a20:	0f 5f       	subi	r16, 0xFF	; 255
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	f6 cf       	rjmp	.-20     	; 0x2a12 <eeprom_write_block_changes+0x16>
	}
}
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	ff 90       	pop	r15
    2a30:	ef 90       	pop	r14
    2a32:	08 95       	ret

00002a34 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2a34:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    2a36:	46 e9       	ldi	r20, 0x96	; 150
    2a38:	51 e0       	ldi	r21, 0x01	; 1
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	82 ec       	ldi	r24, 0xC2	; 194
    2a40:	95 e0       	ldi	r25, 0x05	; 5
    2a42:	0e 94 fe 14 	call	0x29fc	; 0x29fc <eeprom_write_block_changes>
	sei();
    2a46:	78 94       	sei
    2a48:	08 95       	ret

00002a4a <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// Load last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!= MAGIC_NUMBER)
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 db 42 	call	0x85b6	; 0x85b6 <__eerd_byte_m644p>
    2a52:	81 35       	cpi	r24, 0x51	; 81
    2a54:	21 f0       	breq	.+8      	; 0x2a5e <Initial_EEPROM_Config_Load+0x14>
	{
		Set_EEPROM_Default_Config();
    2a56:	0e 94 41 14 	call	0x2882	; 0x2882 <Set_EEPROM_Default_Config>
		// Write to eeProm
		Save_Config_to_EEPROM();
    2a5a:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
	} 
	else 
	{
		// Read eeProm
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
    2a5e:	46 e9       	ldi	r20, 0x96	; 150
    2a60:	51 e0       	ldi	r21, 0x01	; 1
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	82 ec       	ldi	r24, 0xC2	; 194
    2a68:	95 e0       	ldi	r25, 0x05	; 5
    2a6a:	0c 94 cb 42 	jmp	0x8596	; 0x8596 <__eerd_block_m644p>

00002a6e <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	2c 97       	sbiw	r28, 0x0c	; 12
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
	uint8_t	old_flight = 0;			// Current/old flight profile
	uint8_t i = 0;
	uint32_t interval = 0;			// IMU interval


	init();							// Do all init tasks
    2a82:	0e 94 4d 21 	call	0x429a	; 0x429a <init>
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	uint8_t	old_flight = 0;			// Current/old flight profile
    2a86:	1f 82       	std	Y+7, r1	; 0x07

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    2a88:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t RC_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
    2a8a:	71 2c       	mov	r7, r1
	uint8_t Ticker_TCNT2 = 0;
	uint8_t RC_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
    2a8c:	21 2c       	mov	r2, r1
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t RC_TCNT2 = 0;
    2a8e:	1e 82       	std	Y+6, r1	; 0x06
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    2a90:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t FrameRate_TCNT1 = 0;
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
    2a92:	f1 2c       	mov	r15, r1
	uint16_t ticker_16 = 0;
	uint16_t FrameRate_TCNT1 = 0;
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    2a94:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t FrameRate_TCNT1 = 0;
	
	// Timer incrementers
	uint8_t Status_TCNT2 = 0;
    2a96:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t FrameRate_TCNT1 = 0;
    2a98:	c1 2c       	mov	r12, r1
    2a9a:	d1 2c       	mov	r13, r1
	uint32_t LostModel_timer = 0;
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    2a9c:	1b 82       	std	Y+3, r1	; 0x03
    2a9e:	1a 82       	std	Y+2, r1	; 0x02
	// 32-bit timers
	uint32_t LostModel_timer = 0;
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    2aa0:	41 2c       	mov	r4, r1
    2aa2:	51 2c       	mov	r5, r1

	// 32-bit timers
	uint32_t LostModel_timer = 0;
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    2aa4:	1c 86       	std	Y+12, r1	; 0x0c
    2aa6:	1b 86       	std	Y+11, r1	; 0x0b
	bool Interrupted_Clone = false;
	bool OutputTick = false;
	bool OverrideOutput = false;

	// 32-bit timers
	uint32_t LostModel_timer = 0;
    2aa8:	81 2c       	mov	r8, r1
    2aaa:	91 2c       	mov	r9, r1
    2aac:	54 01       	movw	r10, r8

int main(void)
{
	// Flags
	bool Interrupted_Clone = false;
	bool OutputTick = false;
    2aae:	61 2c       	mov	r6, r1
//************************************************************

int main(void)
{
	// Flags
	bool Interrupted_Clone = false;
    2ab0:	19 82       	std	Y+1, r1	; 0x01

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    2ab2:	80 91 16 05 	lds	r24, 0x0516
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	80 93 16 05 	sts	0x0516, r24
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    2abc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2abe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ac0:	2c 34       	cpi	r18, 0x4C	; 76
    2ac2:	3c 44       	sbci	r19, 0x4C	; 76
    2ac4:	c8 f0       	brcs	.+50     	; 0x2af8 <main+0x8a>
		{
			Status_seconds++;
    2ac6:	73 94       	inc	r7
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    2ac8:	10 92 1a 05 	sts	0x051A, r1
    2acc:	10 92 19 05 	sts	0x0519, r1
			InterruptCounter = 0;
			
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    2ad0:	0e 94 c3 3f 	call	0x7f86	; 0x7f86 <GetVbat>
    2ad4:	20 91 76 06 	lds	r18, 0x0676
    2ad8:	30 91 77 06 	lds	r19, 0x0677
    2adc:	82 17       	cp	r24, r18
    2ade:	93 07       	cpc	r25, r19
    2ae0:	20 f4       	brcc	.+8      	; 0x2aea <main+0x7c>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    2ae2:	80 91 1d 05 	lds	r24, 0x051D
    2ae6:	88 60       	ori	r24, 0x08	; 8
    2ae8:	03 c0       	rjmp	.+6      	; 0x2af0 <main+0x82>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    2aea:	80 91 1d 05 	lds	r24, 0x051D
    2aee:	87 7f       	andi	r24, 0xF7	; 247
    2af0:	80 93 1d 05 	sts	0x051D, r24

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    2af4:	1c 86       	std	Y+12, r1	; 0x0c
    2af6:	1b 86       	std	Y+11, r1	; 0x0b
		// Assume output is OK until through the state machine
		// If the state machine requires output to be blocked,
		// it will set this flag
		OverrideOutput = false;
		
		switch(Menu_mode) 
    2af8:	81 2f       	mov	r24, r17
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	8b 30       	cpi	r24, 0x0B	; 11
    2afe:	91 05       	cpc	r25, r1
    2b00:	08 f0       	brcs	.+2      	; 0x2b04 <main+0x96>
    2b02:	60 c0       	rjmp	.+192    	; 0x2bc4 <main+0x156>
    2b04:	fc 01       	movw	r30, r24
    2b06:	e2 5c       	subi	r30, 0xC2	; 194
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	0c 94 44 42 	jmp	0x8488	; 0x8488 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    2b0e:	83 b1       	in	r24, 0x03	; 3
    2b10:	80 7f       	andi	r24, 0xF0	; 240
    2b12:	80 3f       	cpi	r24, 0xF0	; 240
    2b14:	39 f0       	breq	.+14     	; 0x2b24 <main+0xb6>
					OverrideOutput = true;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause output generation interruption
					TIMSK0 |= (1 << TOIE0);	
    2b16:	80 91 6e 00 	lds	r24, 0x006E
    2b1a:	81 60       	ori	r24, 0x01	; 1
    2b1c:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    2b20:	13 e0       	ldi	r17, 0x03	; 3
    2b22:	4b c0       	rjmp	.+150    	; 0x2bba <main+0x14c>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt output generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    2b24:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	85 bb       	out	0x15, r24	; 21
    2b2c:	4b c0       	rjmp	.+150    	; 0x2bc4 <main+0x156>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If failsafe is true, there is no data to interrupt.
			// output activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
    2b2e:	80 91 6a 07 	lds	r24, 0x076A
    2b32:	81 11       	cpse	r24, r1
    2b34:	44 c0       	rjmp	.+136    	; 0x2bbe <main+0x150>
    2b36:	29 81       	ldd	r18, Y+1	; 0x01
    2b38:	21 11       	cpse	r18, r1
    2b3a:	41 c0       	rjmp	.+130    	; 0x2bbe <main+0x150>
    2b3c:	80 91 1c 05 	lds	r24, 0x051C
    2b40:	82 ff       	sbrs	r24, 2
    2b42:	40 c0       	rjmp	.+128    	; 0x2bc4 <main+0x156>
				{
					// Ready to move on
					Menu_mode = STATUS;
    2b44:	14 e0       	ldi	r17, 0x04	; 4
    2b46:	4a c0       	rjmp	.+148    	; 0x2bdc <main+0x16e>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    2b48:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Display_status>

				// Prevent output output just after updating the LCD
				OverrideOutput = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    2b4c:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    2b4e:	41 2c       	mov	r4, r1
    2b50:	51 2c       	mov	r5, r1
    2b52:	44 c0       	rjmp	.+136    	; 0x2bdc <main+0x16e>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    2b54:	1f 9b       	sbis	0x03, 7	; 3
    2b56:	36 c0       	rjmp	.+108    	; 0x2bc4 <main+0x156>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    2b58:	15 e0       	ldi	r17, 0x05	; 5
    2b5a:	34 c0       	rjmp	.+104    	; 0x2bc4 <main+0x156>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= STATUS_OFF_TIME)
    2b5c:	32 e0       	ldi	r19, 0x02	; 2
    2b5e:	37 15       	cp	r19, r7
    2b60:	98 f1       	brcs	.+102    	; 0x2bc8 <main+0x15a>
					// Prevent output output just after updating the LCD
					OverrideOutput = true;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    2b62:	1f 9b       	sbis	0x03, 7	; 3
    2b64:	33 c0       	rjmp	.+102    	; 0x2bcc <main+0x15e>
					// Prevent output output
					OverrideOutput = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    2b66:	43 e1       	ldi	r20, 0x13	; 19
    2b68:	44 16       	cp	r4, r20
    2b6a:	54 06       	cpc	r5, r20
    2b6c:	58 f1       	brcs	.+86     	; 0x2bc4 <main+0x156>
				{
					Menu_mode = PRESTATUS;
    2b6e:	13 e0       	ldi	r17, 0x03	; 3
    2b70:	35 c0       	rjmp	.+106    	; 0x2bdc <main+0x16e>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If failsafe is true, there is no data to interrupt.
			// output activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
    2b72:	80 91 6a 07 	lds	r24, 0x076A
    2b76:	81 11       	cpse	r24, r1
    2b78:	2b c0       	rjmp	.+86     	; 0x2bd0 <main+0x162>
    2b7a:	29 81       	ldd	r18, Y+1	; 0x01
    2b7c:	21 11       	cpse	r18, r1
    2b7e:	28 c0       	rjmp	.+80     	; 0x2bd0 <main+0x162>
    2b80:	80 91 1c 05 	lds	r24, 0x051C
    2b84:	82 ff       	sbrs	r24, 2
    2b86:	2a c0       	rjmp	.+84     	; 0x2bdc <main+0x16e>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    2b88:	18 e0       	ldi	r17, 0x08	; 8
    2b8a:	1c c0       	rjmp	.+56     	; 0x2bc4 <main+0x156>
			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:

				// Pop up the Idle screen
				idle_screen();
    2b8c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    2b90:	19 e0       	ldi	r17, 0x09	; 9
    2b92:	24 c0       	rjmp	.+72     	; 0x2bdc <main+0x16e>

			// In POSTSTATUS_TIMEOUT mode, we wait for a output cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
    2b94:	80 91 6a 07 	lds	r24, 0x076A
    2b98:	81 11       	cpse	r24, r1
    2b9a:	1c c0       	rjmp	.+56     	; 0x2bd4 <main+0x166>
    2b9c:	39 81       	ldd	r19, Y+1	; 0x01
    2b9e:	31 11       	cpse	r19, r1
    2ba0:	19 c0       	rjmp	.+50     	; 0x2bd4 <main+0x166>
    2ba2:	80 91 1c 05 	lds	r24, 0x051C
    2ba6:	82 ff       	sbrs	r24, 2
    2ba8:	19 c0       	rjmp	.+50     	; 0x2bdc <main+0x16e>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    2baa:	10 e0       	ldi	r17, 0x00	; 0
    2bac:	0b c0       	rjmp	.+22     	; 0x2bc4 <main+0x156>
								
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    2bae:	29 98       	cbi	0x05, 1	; 5
				// Start the menu system
				menu_main();
    2bb0:	0e 94 77 2d 	call	0x5aee	; 0x5aee <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    2bb4:	0e 94 04 21 	call	0x4208	; 0x4208 <reset_IMU>
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    2bb8:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    2bba:	71 2c       	mov	r7, r1
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <main+0x16e>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
				{
					// Ready to move on
					Menu_mode = STATUS;
    2bbe:	14 e0       	ldi	r17, 0x04	; 4

					// Prevent output output
					OverrideOutput = true;
    2bc0:	01 e0       	ldi	r16, 0x01	; 1
    2bc2:	0a c0       	rjmp	.+20     	; 0x2bd8 <main+0x16a>
		//************************************************************
		
		// Assume output is OK until through the state machine
		// If the state machine requires output to be blocked,
		// it will set this flag
		OverrideOutput = false;
    2bc4:	00 e0       	ldi	r16, 0x00	; 0
    2bc6:	0b c0       	rjmp	.+22     	; 0x2bde <main+0x170>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= STATUS_OFF_TIME)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    2bc8:	17 e0       	ldi	r17, 0x07	; 7
    2bca:	08 c0       	rjmp	.+16     	; 0x2bdc <main+0x16e>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    2bcc:	1a e0       	ldi	r17, 0x0A	; 10
    2bce:	06 c0       	rjmp	.+12     	; 0x2bdc <main+0x16e>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    2bd0:	18 e0       	ldi	r17, 0x08	; 8
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <main+0x168>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || (Flight_flags & (1 << FailsafeFlag)))
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    2bd4:	10 e0       	ldi	r17, 0x00	; 0

					// Prevent output output
					OverrideOutput = false;
    2bd6:	00 e0       	ldi	r16, 0x00	; 0
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    2bd8:	19 82       	std	Y+1, r1	; 0x01
    2bda:	01 c0       	rjmp	.+2      	; 0x2bde <main+0x170>
				}
				else
				{
					// Enable output output
					OverrideOutput = true;
    2bdc:	01 e0       	ldi	r16, 0x01	; 1
		//************************************************************
		//* Alarms
		//************************************************************

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
    2bde:	80 91 b2 00 	lds	r24, 0x00B2
		Lost_TCNT2 = TCNT2;
    2be2:	40 91 b2 00 	lds	r20, 0x00B2
    2be6:	4a 87       	std	Y+10, r20	; 0x0a

		// Reset LMA count if any RX activity, LMA off
		if ((Flight_flags & (1 << RxActivity)) || (Config.LMA_enable == 0))
    2be8:	90 91 1c 05 	lds	r25, 0x051C
    2bec:	40 91 80 06 	lds	r20, 0x0680
    2bf0:	93 fd       	sbrc	r25, 3
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <main+0x18a>
    2bf4:	41 11       	cpse	r20, r1
    2bf6:	07 c0       	rjmp	.+14     	; 0x2c06 <main+0x198>
		{														
			LostModel_timer = 0;
			LMA_minutes = 0;
			General_error &= ~(1 << LOST_MODEL); // Clear lost model bit
    2bf8:	80 91 1d 05 	lds	r24, 0x051D
    2bfc:	8b 7f       	andi	r24, 0xFB	; 251
    2bfe:	80 93 1d 05 	sts	0x051D, r24

		// Reset LMA count if any RX activity, LMA off
		if ((Flight_flags & (1 << RxActivity)) || (Config.LMA_enable == 0))
		{														
			LostModel_timer = 0;
			LMA_minutes = 0;
    2c02:	21 2c       	mov	r2, r1
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <main+0x1b4>
		//************************************************************
		//* Alarms
		//************************************************************

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
    2c06:	8f 19       	sub	r24, r15
    2c08:	88 0e       	add	r8, r24
    2c0a:	91 1c       	adc	r9, r1
    2c0c:	a1 1c       	adc	r10, r1
    2c0e:	b1 1c       	adc	r11, r1
			LMA_minutes = 0;
			General_error &= ~(1 << LOST_MODEL); // Clear lost model bit
		}
		
		// Count the minutes
		if (LostModel_timer > LMA_TIMEOUT)
    2c10:	85 e9       	ldi	r24, 0x95	; 149
    2c12:	88 16       	cp	r8, r24
    2c14:	81 ee       	ldi	r24, 0xE1	; 225
    2c16:	98 06       	cpc	r9, r24
    2c18:	81 e1       	ldi	r24, 0x11	; 17
    2c1a:	a8 06       	cpc	r10, r24
    2c1c:	b1 04       	cpc	r11, r1
    2c1e:	20 f0       	brcs	.+8      	; 0x2c28 <main+0x1ba>
		{
			LMA_minutes++;
    2c20:	23 94       	inc	r2
			LostModel_timer = 0;
    2c22:	81 2c       	mov	r8, r1
    2c24:	91 2c       	mov	r9, r1
    2c26:	54 01       	movw	r10, r8
		}

		// Trigger lost model alarm if enabled and due or failsafe
		if ((LMA_minutes >= Config.LMA_enable) && (Config.LMA_enable != 0))	
    2c28:	22 2d       	mov	r18, r2
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	84 2f       	mov	r24, r20
    2c2e:	99 27       	eor	r25, r25
    2c30:	87 fd       	sbrc	r24, 7
    2c32:	90 95       	com	r25
    2c34:	28 17       	cp	r18, r24
    2c36:	39 07       	cpc	r19, r25
    2c38:	3c f0       	brlt	.+14     	; 0x2c48 <main+0x1da>
    2c3a:	44 23       	and	r20, r20
    2c3c:	29 f0       	breq	.+10     	; 0x2c48 <main+0x1da>
		{
			General_error |= (1 << LOST_MODEL); // Set lost model bit
    2c3e:	80 91 1d 05 	lds	r24, 0x051D
    2c42:	84 60       	ori	r24, 0x04	; 4
    2c44:	80 93 1d 05 	sts	0x051D, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    2c48:	0e 94 c3 3f 	call	0x7f86	; 0x7f86 <GetVbat>
    2c4c:	20 91 76 06 	lds	r18, 0x0676
    2c50:	30 91 77 06 	lds	r19, 0x0677
    2c54:	82 17       	cp	r24, r18
    2c56:	93 07       	cpc	r25, r19
    2c58:	20 f4       	brcc	.+8      	; 0x2c62 <main+0x1f4>
		{
			General_error |= (1 << LVA_ALARM); 	// Set low battery bit
    2c5a:	80 91 1d 05 	lds	r24, 0x051D
    2c5e:	88 60       	ori	r24, 0x08	; 8
    2c60:	03 c0       	rjmp	.+6      	; 0x2c68 <main+0x1fa>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
    2c62:	80 91 1d 05 	lds	r24, 0x051D
    2c66:	87 7f       	andi	r24, 0xF7	; 247
    2c68:	80 93 1d 05 	sts	0x051D, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
    2c6c:	80 91 1d 05 	lds	r24, 0x051D
    2c70:	83 fd       	sbrc	r24, 3
    2c72:	0c c0       	rjmp	.+24     	; 0x2c8c <main+0x21e>
			  (General_error & (1 << LOST_MODEL)) || 
    2c74:	80 91 1d 05 	lds	r24, 0x051D
		{
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
    2c78:	82 fd       	sbrc	r24, 2
    2c7a:	08 c0       	rjmp	.+16     	; 0x2c8c <main+0x21e>
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
    2c7c:	80 91 1d 05 	lds	r24, 0x051D
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
    2c80:	81 fd       	sbrc	r24, 1
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <main+0x21e>
			  (General_error & (1 << THROTTLE_HIGH)) ||	
			  (Flight_flags & (1 << FailsafeFlag))) &&
    2c84:	80 91 1c 05 	lds	r24, 0x051C
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
    2c88:	82 ff       	sbrs	r24, 2
    2c8a:	06 c0       	rjmp	.+12     	; 0x2c98 <main+0x22a>
			  (Flight_flags & (1 << FailsafeFlag))) &&
			  (Alarm_flags & (1 << BUZZER_ON))) 
    2c8c:	80 91 1b 05 	lds	r24, 0x051B

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
			  (Flight_flags & (1 << FailsafeFlag))) &&
    2c90:	84 ff       	sbrs	r24, 4
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <main+0x22a>
			  (Alarm_flags & (1 << BUZZER_ON))) 
		{
			LVA = 1;
    2c94:	29 9a       	sbi	0x05, 1	; 5
    2c96:	01 c0       	rjmp	.+2      	; 0x2c9a <main+0x22c>
		}
		else 
		{
			LVA = 0;
    2c98:	29 98       	cbi	0x05, 1	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    2c9a:	0e 94 b2 39 	call	0x7364	; 0x7364 <RxGetChannels>

		// Zero RC when in Failsafe
		if (Flight_flags & (1 << FailsafeFlag))
    2c9e:	80 91 1c 05 	lds	r24, 0x051C
    2ca2:	82 fd       	sbrc	r24, 2
    2ca4:	12 c0       	rjmp	.+36     	; 0x2cca <main+0x25c>
				RCinputs[i] = 0;
			}
		}

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    2ca6:	80 91 cd 07 	lds	r24, 0x07CD
    2caa:	90 91 ce 07 	lds	r25, 0x07CE
    2cae:	c2 97       	sbiw	r24, 0x32	; 50
    2cb0:	d4 f4       	brge	.+52     	; 0x2ce6 <main+0x278>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);
    2cb2:	80 91 1d 05 	lds	r24, 0x051D
    2cb6:	8d 7f       	andi	r24, 0xFD	; 253
    2cb8:	80 93 1d 05 	sts	0x051D, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    2cbc:	8c e0       	ldi	r24, 0x0C	; 12
    2cbe:	e9 ea       	ldi	r30, 0xA9	; 169
    2cc0:	f7 e0       	ldi	r31, 0x07	; 7
    2cc2:	11 92       	st	Z+, r1
    2cc4:	8a 95       	dec	r24
    2cc6:	e9 f7       	brne	.-6      	; 0x2cc2 <main+0x254>
    2cc8:	0e c0       	rjmp	.+28     	; 0x2ce6 <main+0x278>

		// Update zeroed RC channel data
		RxGetChannels();

		// Zero RC when in Failsafe
		if (Flight_flags & (1 << FailsafeFlag))
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
		{
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				RCinputs[i] = 0;
    2cce:	fc 01       	movw	r30, r24
    2cd0:	ee 0f       	add	r30, r30
    2cd2:	ff 1f       	adc	r31, r31
    2cd4:	e1 53       	subi	r30, 0x31	; 49
    2cd6:	f8 4f       	sbci	r31, 0xF8	; 248
    2cd8:	11 82       	std	Z+1, r1	; 0x01
    2cda:	10 82       	st	Z, r1
    2cdc:	01 96       	adiw	r24, 0x01	; 1
		RxGetChannels();

		// Zero RC when in Failsafe
		if (Flight_flags & (1 << FailsafeFlag))
		{
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    2cde:	88 30       	cpi	r24, 0x08	; 8
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	a9 f7       	brne	.-22     	; 0x2cce <main+0x260>
    2ce4:	e0 cf       	rjmp	.-64     	; 0x2ca6 <main+0x238>
		//************************************************************
		//* Flight mode selection. Now hard-coded to the following.
		//* 0 to -50 = 1, -50 to +50 = 2 and  >50 = 3
		//************************************************************

		if (RCinputs[Config.FlightChan] > 500)
    2ce6:	e0 91 0e 06 	lds	r30, 0x060E
    2cea:	ee 0f       	add	r30, r30
    2cec:	ff 0b       	sbc	r31, r31
    2cee:	e1 53       	subi	r30, 0x31	; 49
    2cf0:	f8 4f       	sbci	r31, 0xF8	; 248
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	85 3f       	cpi	r24, 0xF5	; 245
    2cf8:	91 40       	sbci	r25, 0x01	; 1
    2cfa:	24 f0       	brlt	.+8      	; 0x2d04 <main+0x296>
		{
			Config.Flight = 2;			// Flight mode 2
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	80 93 46 07 	sts	0x0746, r24
    2d02:	0b c0       	rjmp	.+22     	; 0x2d1a <main+0x2ac>
		}	
		else if (RCinputs[Config.FlightChan] > -500)
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	8d 30       	cpi	r24, 0x0D	; 13
    2d0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d0c:	24 f0       	brlt	.+8      	; 0x2d16 <main+0x2a8>
		{
			Config.Flight = 1;			// Flight mode 1
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	40 93 46 07 	sts	0x0746, r20
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <main+0x2ac>
		}
		else
		{
			Config.Flight = 0;			// Flight mode 0
    2d16:	10 92 46 07 	sts	0x0746, r1
		}

		// When changing flight modes or on first startup
		if ((Config.Flight != old_flight) || (Flight_flags & (1 << FirstTimeFlightMode)))
    2d1a:	20 91 46 07 	lds	r18, 0x0746
    2d1e:	33 27       	eor	r19, r19
    2d20:	27 fd       	sbrc	r18, 7
    2d22:	30 95       	com	r19
    2d24:	4f 81       	ldd	r20, Y+7	; 0x07
    2d26:	84 2f       	mov	r24, r20
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	28 17       	cp	r18, r24
    2d2c:	39 07       	cpc	r19, r25
    2d2e:	21 f4       	brne	.+8      	; 0x2d38 <main+0x2ca>
    2d30:	80 91 1c 05 	lds	r24, 0x051C
    2d34:	87 ff       	sbrs	r24, 7
    2d36:	10 c0       	rjmp	.+32     	; 0x2d58 <main+0x2ea>
		{
			// Clear first time flag
			Flight_flags &= ~(1 << FirstTimeFlightMode);
    2d38:	80 91 1c 05 	lds	r24, 0x051C
    2d3c:	8f 77       	andi	r24, 0x7F	; 127
    2d3e:	80 93 1c 05 	sts	0x051C, r24

			// Update travel limits
			UpdateLimits();
    2d42:	0e 94 22 31 	call	0x6244	; 0x6244 <UpdateLimits>
	
			// Reset I-terms so that neutral is reset
			// Using memset saves code space
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    2d46:	8c e0       	ldi	r24, 0x0C	; 12
    2d48:	e9 ea       	ldi	r30, 0xA9	; 169
    2d4a:	f7 e0       	ldi	r31, 0x07	; 7
    2d4c:	11 92       	st	Z+, r1
    2d4e:	8a 95       	dec	r24
    2d50:	e9 f7       	brne	.-6      	; 0x2d4c <main+0x2de>

			old_flight = Config.Flight;
    2d52:	20 91 46 07 	lds	r18, 0x0746
    2d56:	2f 83       	std	Y+7, r18	; 0x07
		}
			
		// Detect when sticks centered (hands free)
		RC_Deadband();
    2d58:	0e 94 6e 3a 	call	0x74dc	; 0x74dc <RC_Deadband>
		//*		Autolevel always OFF if Config.AutoMode = OFF (default)
		//*		Autolevel disabled if Launch_Block = true
		//*		Autolevel always ON if in Advanced failsafe condition
		//************************************************************

		switch(Config.FlightMode[Config.Flight].AutoMode)
    2d5c:	e0 91 46 07 	lds	r30, 0x0746
    2d60:	8e 2f       	mov	r24, r30
    2d62:	99 27       	eor	r25, r25
    2d64:	87 fd       	sbrc	r24, 7
    2d66:	90 95       	com	r25
    2d68:	36 e1       	ldi	r19, 0x16	; 22
    2d6a:	e3 02       	muls	r30, r19
    2d6c:	f0 01       	movw	r30, r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	e4 5e       	subi	r30, 0xE4	; 228
    2d72:	f9 4f       	sbci	r31, 0xF9	; 249
    2d74:	20 81       	ld	r18, Z
    2d76:	21 30       	cpi	r18, 0x01	; 1
    2d78:	69 f0       	breq	.+26     	; 0x2d94 <main+0x326>
    2d7a:	22 30       	cpi	r18, 0x02	; 2
    2d7c:	19 f0       	breq	.+6      	; 0x2d84 <main+0x316>
    2d7e:	21 11       	cpse	r18, r1
    2d80:	0e c0       	rjmp	.+28     	; 0x2d9e <main+0x330>
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <main+0x31e>
		{
			case DISABLED:
				Flight_flags &= ~(1 << AutoLevel);	// De-activate autolevel mode
				break;
			case HANDSFREE:
				if (Flight_flags & (1 << HandsFree))// If hands free
    2d84:	20 91 1c 05 	lds	r18, 0x051C
    2d88:	24 fd       	sbrc	r18, 4
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <main+0x326>
				{
					Flight_flags |= (1 << AutoLevel);// Activate autolevel mode
				}	
				else
				{
					Flight_flags &= ~(1 << AutoLevel); // De-activate autolevel mode
    2d8c:	20 91 1c 05 	lds	r18, 0x051C
    2d90:	2e 7f       	andi	r18, 0xFE	; 254
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <main+0x32c>
				}
				break;
			case ALWAYSON:
				Flight_flags |= (1 << AutoLevel);	// Activate autolevel mode
    2d94:	20 91 1c 05 	lds	r18, 0x051C
    2d98:	21 60       	ori	r18, 0x01	; 1
    2d9a:	20 93 1c 05 	sts	0x051C, r18
			default:								// Disable by default
				break;
		}

		// Check for advanced Failsafe
		if ((Config.FailsafeType == ADVANCED) && (Flight_flags & (1 << FailsafeFlag)))
    2d9e:	20 91 16 06 	lds	r18, 0x0616
    2da2:	22 30       	cpi	r18, 0x02	; 2
    2da4:	49 f4       	brne	.+18     	; 0x2db8 <main+0x34a>
    2da6:	20 91 1c 05 	lds	r18, 0x051C
    2daa:	22 ff       	sbrs	r18, 2
    2dac:	05 c0       	rjmp	.+10     	; 0x2db8 <main+0x34a>
		{
			Flight_flags |= (1 << AutoLevel);
    2dae:	20 91 1c 05 	lds	r18, 0x051C
    2db2:	21 60       	ori	r18, 0x01	; 1
    2db4:	20 93 1c 05 	sts	0x051C, r18
		//* Primary override:
		//*		Stability enabled if Config.StabMode = ON
		//*		Stability always OFF if Config.StabMode = OFF (default)
		//************************************************************

		switch(Config.FlightMode[Config.Flight].StabMode)
    2db8:	26 e1       	ldi	r18, 0x16	; 22
    2dba:	28 9f       	mul	r18, r24
    2dbc:	f0 01       	movw	r30, r0
    2dbe:	29 9f       	mul	r18, r25
    2dc0:	f0 0d       	add	r31, r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	e5 5e       	subi	r30, 0xE5	; 229
    2dc6:	f9 4f       	sbci	r31, 0xF9	; 249
    2dc8:	80 81       	ld	r24, Z
    2dca:	88 23       	and	r24, r24
    2dcc:	31 f0       	breq	.+12     	; 0x2dda <main+0x36c>
    2dce:	81 30       	cpi	r24, 0x01	; 1
    2dd0:	49 f4       	brne	.+18     	; 0x2de4 <main+0x376>
		{
			case DISABLED:
				Flight_flags &= ~(1 << Stability);// De-activate autolevel mode
				break;
			case ALWAYSON:
				Flight_flags |= (1 << Stability);// Activate autolevel mode
    2dd2:	80 91 1c 05 	lds	r24, 0x051C
    2dd6:	82 60       	ori	r24, 0x02	; 2
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <main+0x372>
		//************************************************************

		switch(Config.FlightMode[Config.Flight].StabMode)
		{
			case DISABLED:
				Flight_flags &= ~(1 << Stability);// De-activate autolevel mode
    2dda:	80 91 1c 05 	lds	r24, 0x051C
    2dde:	8d 7f       	andi	r24, 0xFD	; 253
				break;
			case ALWAYSON:
				Flight_flags |= (1 << Stability);// Activate autolevel mode
    2de0:	80 93 1c 05 	sts	0x051C, r24
				break;
		}

		// Reset I-terms when stabilise is off
		// This is probably superfluous...
		if (!(Flight_flags & (1 << Stability)))
    2de4:	80 91 1c 05 	lds	r24, 0x051C
    2de8:	81 fd       	sbrc	r24, 1
    2dea:	06 c0       	rjmp	.+12     	; 0x2df8 <main+0x38a>
		{
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    2dec:	8c e0       	ldi	r24, 0x0C	; 12
    2dee:	e9 ea       	ldi	r30, 0xA9	; 169
    2df0:	f7 e0       	ldi	r31, 0x07	; 7
    2df2:	11 92       	st	Z+, r1
    2df4:	8a 95       	dec	r24
    2df6:	e9 f7       	brne	.-6      	; 0x2df2 <main+0x384>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    2df8:	0e 94 9f 22 	call	0x453e	; 0x453e <TIM16_ReadTCNT1>
    2dfc:	99 87       	std	Y+9, r25	; 0x09
    2dfe:	88 87       	std	Y+8, r24	; 0x08

		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)
		
		// Sets the desired output rate
		FrameDrop_Output_Rate += (uint16_t)(Save_TCNT1 - FrameRate_TCNT1);
    2e00:	40 91 12 05 	lds	r20, 0x0512
    2e04:	50 91 13 05 	lds	r21, 0x0513
    2e08:	60 91 14 05 	lds	r22, 0x0514
    2e0c:	70 91 15 05 	lds	r23, 0x0515
    2e10:	8c 19       	sub	r24, r12
    2e12:	9d 09       	sbc	r25, r13
    2e14:	a0 e0       	ldi	r26, 0x00	; 0
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	48 0f       	add	r20, r24
    2e1a:	59 1f       	adc	r21, r25
    2e1c:	6a 1f       	adc	r22, r26
    2e1e:	7b 1f       	adc	r23, r27
    2e20:	40 93 12 05 	sts	0x0512, r20
    2e24:	50 93 13 05 	sts	0x0513, r21
    2e28:	60 93 14 05 	sts	0x0514, r22
    2e2c:	70 93 15 05 	sts	0x0515, r23
		Failsafe_Output_Rate += (uint16_t)(Save_TCNT1 - FrameRate_TCNT1);
    2e30:	40 91 0e 05 	lds	r20, 0x050E
    2e34:	50 91 0f 05 	lds	r21, 0x050F
    2e38:	60 91 10 05 	lds	r22, 0x0510
    2e3c:	70 91 11 05 	lds	r23, 0x0511
    2e40:	48 0f       	add	r20, r24
    2e42:	59 1f       	adc	r21, r25
    2e44:	6a 1f       	adc	r22, r26
    2e46:	7b 1f       	adc	r23, r27
    2e48:	40 93 0e 05 	sts	0x050E, r20
    2e4c:	50 93 0f 05 	sts	0x050F, r21
    2e50:	60 93 10 05 	sts	0x0510, r22
    2e54:	70 93 11 05 	sts	0x0511, r23
				
		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz		

		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - RC_TCNT2);
    2e58:	80 91 0c 05 	lds	r24, 0x050C
    2e5c:	90 91 0d 05 	lds	r25, 0x050D
    2e60:	20 91 b2 00 	lds	r18, 0x00B2
    2e64:	3e 81       	ldd	r19, Y+6	; 0x06
    2e66:	23 1b       	sub	r18, r19
    2e68:	82 0f       	add	r24, r18
    2e6a:	91 1d       	adc	r25, r1
    2e6c:	90 93 0d 05 	sts	0x050D, r25
    2e70:	80 93 0c 05 	sts	0x050C, r24
		RC_TCNT2 = TCNT2;
    2e74:	40 91 b2 00 	lds	r20, 0x00B2
    2e78:	4e 83       	std	Y+6, r20	; 0x06

		// Update status timeout
		Status_timeout += (uint8_t) (TCNT2 - Status_TCNT2);
    2e7a:	80 91 b2 00 	lds	r24, 0x00B2
    2e7e:	83 19       	sub	r24, r3
    2e80:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e82:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e84:	28 0f       	add	r18, r24
    2e86:	31 1d       	adc	r19, r1
    2e88:	3c 87       	std	Y+12, r19	; 0x0c
    2e8a:	2b 87       	std	Y+11, r18	; 0x0b
		Status_TCNT2 = TCNT2;
    2e8c:	30 90 b2 00 	lds	r3, 0x00B2

		// Status refresh timer
		UpdateStatus_timer += (uint8_t) (TCNT2 - Refresh_TCNT2);
    2e90:	80 91 b2 00 	lds	r24, 0x00B2
    2e94:	3c 81       	ldd	r19, Y+4	; 0x04
    2e96:	83 1b       	sub	r24, r19
    2e98:	48 0e       	add	r4, r24
    2e9a:	51 1c       	adc	r5, r1
		Refresh_TCNT2 = TCNT2;
    2e9c:	40 91 b2 00 	lds	r20, 0x00B2
    2ea0:	4c 83       	std	Y+4, r20	; 0x04

		// Timer for audible alarms
		Ticker_Count += (uint8_t) (TCNT2 - Ticker_TCNT2);
    2ea2:	80 91 b2 00 	lds	r24, 0x00B2
    2ea6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ea8:	82 1b       	sub	r24, r18
    2eaa:	2a 81       	ldd	r18, Y+2	; 0x02
    2eac:	3b 81       	ldd	r19, Y+3	; 0x03
    2eae:	28 0f       	add	r18, r24
    2eb0:	31 1d       	adc	r19, r1
    2eb2:	3b 83       	std	Y+3, r19	; 0x03
    2eb4:	2a 83       	std	Y+2, r18	; 0x02
		Ticker_TCNT2 = TCNT2;
    2eb6:	30 91 b2 00 	lds	r19, 0x00B2
    2eba:	3d 83       	std	Y+5, r19	; 0x05
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    2ebc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ebe:	3b 81       	ldd	r19, Y+3	; 0x03
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    2ec0:	80 91 1b 05 	lds	r24, 0x051B
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    2ec4:	33 ff       	sbrs	r19, 3
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <main+0x45e>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    2ec8:	80 61       	ori	r24, 0x10	; 16
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <main+0x460>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    2ecc:	8f 7e       	andi	r24, 0xEF	; 239
    2ece:	80 93 1b 05 	sts	0x051B, r24
		//* RC_Timeout is reset at the successful completion of a new RC packet
		//* Reset on successful receipt of an RX packet. Both FailsafeFlag and RC_Timeout.
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    2ed2:	80 91 0c 05 	lds	r24, 0x050C
    2ed6:	90 91 0d 05 	lds	r25, 0x050D
    2eda:	86 32       	cpi	r24, 0x26	; 38
    2edc:	96 42       	sbci	r25, 0x26	; 38
    2ede:	90 f0       	brcs	.+36     	; 0x2f04 <main+0x496>
		{
			 Flight_flags |= (1 << FailsafeFlag);	// This results in a failsafe condition
    2ee0:	80 91 1c 05 	lds	r24, 0x051C
    2ee4:	84 60       	ori	r24, 0x04	; 4
    2ee6:	80 93 1c 05 	sts	0x051C, r24
			 
			// As T2 increments at 19.531 kHz, this will wrap after 3.35s.
			// To stop this problem, clip the value at 1s.			
			if (RC_Timeout > SECOND_TIMER)
    2eea:	80 91 0c 05 	lds	r24, 0x050C
    2eee:	90 91 0d 05 	lds	r25, 0x050D
    2ef2:	8c 34       	cpi	r24, 0x4C	; 76
    2ef4:	9c 44       	sbci	r25, 0x4C	; 76
    2ef6:	30 f0       	brcs	.+12     	; 0x2f04 <main+0x496>
			{
				RC_Timeout = SECOND_TIMER;
    2ef8:	8b e4       	ldi	r24, 0x4B	; 75
    2efa:	9c e4       	ldi	r25, 0x4C	; 76
    2efc:	90 93 0d 05 	sts	0x050D, r25
    2f00:	80 93 0c 05 	sts	0x050C, r24
		//* start of burst to start of next burst.
		//* FrameDrop_Output_Rate is also in T1 units (1/2,500,000), wraps at 1718s
		//*
		//***********************************************************

		if (Failsafe_Output_Rate > (FramePeriod + FAILSAFE_MARGIN))
    2f04:	40 91 0e 05 	lds	r20, 0x050E
    2f08:	50 91 0f 05 	lds	r21, 0x050F
    2f0c:	60 91 10 05 	lds	r22, 0x0510
    2f10:	70 91 11 05 	lds	r23, 0x0511
    2f14:	80 91 99 07 	lds	r24, 0x0799
    2f18:	90 91 9a 07 	lds	r25, 0x079A
    2f1c:	a0 91 9b 07 	lds	r26, 0x079B
    2f20:	b0 91 9c 07 	lds	r27, 0x079C
    2f24:	88 57       	subi	r24, 0x78	; 120
    2f26:	9c 4e       	sbci	r25, 0xEC	; 236
    2f28:	af 4f       	sbci	r26, 0xFF	; 255
    2f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2c:	84 17       	cp	r24, r20
    2f2e:	95 07       	cpc	r25, r21
    2f30:	a6 07       	cpc	r26, r22
    2f32:	b7 07       	cpc	r27, r23
    2f34:	68 f4       	brcc	.+26     	; 0x2f50 <main+0x4e2>
		{
			// Flag that the frame has been dropped, but only when NOT in failsafe mode
			// and only if valid reception has started
			if (!(Flight_flags & (1 << FailsafeFlag)) && (Flight_flags & (1 << RxStarted)))
    2f36:	80 91 1c 05 	lds	r24, 0x051C
    2f3a:	82 fd       	sbrc	r24, 2
    2f3c:	09 c0       	rjmp	.+18     	; 0x2f50 <main+0x4e2>
    2f3e:	80 91 1c 05 	lds	r24, 0x051C
    2f42:	86 ff       	sbrs	r24, 6
    2f44:	05 c0       	rjmp	.+10     	; 0x2f50 <main+0x4e2>
			{
				Flight_flags |= (1 << FrameDrop);
    2f46:	80 91 1c 05 	lds	r24, 0x051C
    2f4a:	80 62       	ori	r24, 0x20	; 32
    2f4c:	80 93 1c 05 	sts	0x051C, r24
			}
		}

		// Outputs run at approximately the Failsafe_Output_Rate
		if ((FrameDrop_Output_Rate > FramePeriod) && (Flight_flags & (1 << RxStarted)))
    2f50:	40 91 12 05 	lds	r20, 0x0512
    2f54:	50 91 13 05 	lds	r21, 0x0513
    2f58:	60 91 14 05 	lds	r22, 0x0514
    2f5c:	70 91 15 05 	lds	r23, 0x0515
    2f60:	80 91 99 07 	lds	r24, 0x0799
    2f64:	90 91 9a 07 	lds	r25, 0x079A
    2f68:	a0 91 9b 07 	lds	r26, 0x079B
    2f6c:	b0 91 9c 07 	lds	r27, 0x079C
    2f70:	84 17       	cp	r24, r20
    2f72:	95 07       	cpc	r25, r21
    2f74:	a6 07       	cpc	r26, r22
    2f76:	b7 07       	cpc	r27, r23
    2f78:	70 f4       	brcc	.+28     	; 0x2f96 <main+0x528>
    2f7a:	80 91 1c 05 	lds	r24, 0x051C
    2f7e:	86 ff       	sbrs	r24, 6
    2f80:	0a c0       	rjmp	.+20     	; 0x2f96 <main+0x528>
		{
			OutputTick = true;
			FrameDrop_Output_Rate = 0; // This makes an asynchronous oscillator
    2f82:	10 92 12 05 	sts	0x0512, r1
    2f86:	10 92 13 05 	sts	0x0513, r1
    2f8a:	10 92 14 05 	sts	0x0514, r1
    2f8e:	10 92 15 05 	sts	0x0515, r1
		}

		// Outputs run at approximately the Failsafe_Output_Rate
		if ((FrameDrop_Output_Rate > FramePeriod) && (Flight_flags & (1 << RxStarted)))
		{
			OutputTick = true;
    2f92:	66 24       	eor	r6, r6
    2f94:	63 94       	inc	r6
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    2f96:	0e 94 41 1b 	call	0x3682	; 0x3682 <ReadGyros>
		ReadAcc();
    2f9a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    2f9e:	0e 94 9f 22 	call	0x453e	; 0x453e <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    2fa2:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    2fa4:	20 91 17 05 	lds	r18, 0x0517
    2fa8:	30 91 18 05 	lds	r19, 0x0518
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    2fac:	20 91 17 05 	lds	r18, 0x0517
    2fb0:	30 91 18 05 	lds	r19, 0x0518
    2fb4:	ac 01       	movw	r20, r24
    2fb6:	42 1b       	sub	r20, r18
    2fb8:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    2fba:	90 93 18 05 	sts	0x0518, r25
    2fbe:	80 93 17 05 	sts	0x0517, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    2fc2:	80 91 84 07 	lds	r24, 0x0784
    2fc6:	90 91 85 07 	lds	r25, 0x0785
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	02 97       	sbiw	r24, 0x02	; 2
    2fd0:	18 f4       	brcc	.+6      	; 0x2fd8 <main+0x56a>
		{
			interval = ticker_16; // uint16_t
    2fd2:	6a 01       	movw	r12, r20
    2fd4:	7b 01       	movw	r14, r22
    2fd6:	11 c0       	rjmp	.+34     	; 0x2ffa <main+0x58c>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    2fd8:	c0 90 84 07 	lds	r12, 0x0784
    2fdc:	d0 90 85 07 	lds	r13, 0x0785
    2fe0:	e1 2c       	mov	r14, r1
    2fe2:	f1 2c       	mov	r15, r1
    2fe4:	8f e0       	ldi	r24, 0x0F	; 15
    2fe6:	cc 0c       	add	r12, r12
    2fe8:	dd 1c       	adc	r13, r13
    2fea:	ee 1c       	adc	r14, r14
    2fec:	ff 1c       	adc	r15, r15
    2fee:	8a 95       	dec	r24
    2ff0:	d1 f7       	brne	.-12     	; 0x2fe6 <main+0x578>
    2ff2:	c4 0e       	add	r12, r20
    2ff4:	d5 1e       	adc	r13, r21
    2ff6:	e6 1e       	adc	r14, r22
    2ff8:	f7 1e       	adc	r15, r23
		}

		TMR0_counter = 0;
    2ffa:	10 92 85 07 	sts	0x0785, r1
    2ffe:	10 92 84 07 	sts	0x0784, r1

		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    3002:	c7 01       	movw	r24, r14
    3004:	b6 01       	movw	r22, r12
    3006:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    300a:	c7 01       	movw	r24, r14
    300c:	b6 01       	movw	r22, r12
    300e:	0e 94 ba 36 	call	0x6d74	; 0x6d74 <Sensor_PID>
		//* (you are in a failsafe condition anyways) than to have jumbled 
		//* frames together." - Jim Drew
		//*
		//************************************************************

		if ((Alarm_flags & (1 << FAILSAFE_ENDED)) && (Interrupted))
    3012:	80 91 1b 05 	lds	r24, 0x051B
    3016:	85 ff       	sbrs	r24, 5
    3018:	0b c0       	rjmp	.+22     	; 0x3030 <main+0x5c2>
    301a:	80 91 6a 07 	lds	r24, 0x076A
    301e:	88 23       	and	r24, r24
    3020:	39 f0       	breq	.+14     	; 0x3030 <main+0x5c2>
		{
			Interrupted = false;
    3022:	10 92 6a 07 	sts	0x076A, r1
			Alarm_flags &= ~(1 << FAILSAFE_ENDED);
    3026:	80 91 1b 05 	lds	r24, 0x051B
    302a:	8f 7d       	andi	r24, 0xDF	; 223
    302c:	80 93 1b 05 	sts	0x051B, r24
		//************************************************************
		
		// Cases where we are ready to output. These must be exclusive
		if	(
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||
    3030:	80 91 6a 07 	lds	r24, 0x076A
		//* Output serial data where required, 
		//* based on a very specific set of conditions
		//************************************************************
		
		// Cases where we are ready to output. These must be exclusive
		if	(
    3034:	88 23       	and	r24, r24
    3036:	21 f0       	breq	.+8      	; 0x3040 <main+0x5d2>
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||
    3038:	80 91 1c 05 	lds	r24, 0x051C
    303c:	86 fd       	sbrc	r24, 6
    303e:	20 c0       	rjmp	.+64     	; 0x3080 <main+0x612>

				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||
    3040:	80 91 6a 07 	lds	r24, 0x076A
		//************************************************************
		
		// Cases where we are ready to output. These must be exclusive
		if	(
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||
    3044:	81 11       	cpse	r24, r1
    3046:	0a c0       	rjmp	.+20     	; 0x305c <main+0x5ee>

				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||
    3048:	80 91 1c 05 	lds	r24, 0x051C
    304c:	82 fd       	sbrc	r24, 2
    304e:	06 c0       	rjmp	.+12     	; 0x305c <main+0x5ee>
    3050:	80 91 1c 05 	lds	r24, 0x051C
    3054:	85 ff       	sbrs	r24, 5
    3056:	02 c0       	rjmp	.+4      	; 0x305c <main+0x5ee>
    3058:	61 10       	cpse	r6, r1
    305a:	12 c0       	rjmp	.+36     	; 0x3080 <main+0x612>

				// OutputTick for failsafe (>500ms) once RX started and if enabled (Failsafe type = FIXED or ADVANCED)
				((!Interrupted) && (Flight_flags & (1 << FailsafeFlag)) && (OutputTick) && (Config.FailsafeType != NOFAILSAFE))
    305c:	80 91 6a 07 	lds	r24, 0x076A
				// Running at RC rate when Interrupted, assuming that RX has ever started
				((Interrupted) && (Flight_flags & (1 << RxStarted))) ||

				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||
    3060:	88 23       	and	r24, r24
    3062:	21 f0       	breq	.+8      	; 0x306c <main+0x5fe>
				// Note that TransmitData() assumes that ServoOut[] is 
				// updated prior to calling as it destroys the contents
				TransmitData();				// Output serial data			
			}

			LoopCount = 0;					// Reset loop counter
    3064:	fa 84       	ldd	r15, Y+10	; 0x0a
    3066:	c8 84       	ldd	r12, Y+8	; 0x08
    3068:	d9 84       	ldd	r13, Y+9	; 0x09
    306a:	23 cd       	rjmp	.-1466   	; 0x2ab2 <main+0x44>
				// OutputTick for dropped frames once RX started and NOT in failsafe mode
				// This will stop once failsafe flag is set.
				((!Interrupted) && (!(Flight_flags & (1 << FailsafeFlag))) && (Flight_flags & (1 << FrameDrop)) && (OutputTick)) ||

				// OutputTick for failsafe (>500ms) once RX started and if enabled (Failsafe type = FIXED or ADVANCED)
				((!Interrupted) && (Flight_flags & (1 << FailsafeFlag)) && (OutputTick) && (Config.FailsafeType != NOFAILSAFE))
    306c:	80 91 1c 05 	lds	r24, 0x051C
    3070:	82 ff       	sbrs	r24, 2
    3072:	f8 cf       	rjmp	.-16     	; 0x3064 <main+0x5f6>
    3074:	66 20       	and	r6, r6
    3076:	b1 f3       	breq	.-20     	; 0x3064 <main+0x5f6>
    3078:	80 91 16 06 	lds	r24, 0x0616
    307c:	88 23       	and	r24, r24
    307e:	91 f3       	breq	.-28     	; 0x3064 <main+0x5f6>

			//******************************************************************
			//* The following code runs once when serial output is desired
			//******************************************************************

			if (Interrupted)
    3080:	80 91 6a 07 	lds	r24, 0x076A
    3084:	88 23       	and	r24, r24
    3086:	21 f0       	breq	.+8      	; 0x3090 <main+0x622>
			{
				Interrupted_Clone = true;			// Hand "Interrupted" baton on to its clone
				Interrupted = false;				// Reset interrupted flag if that was the cause of entry			
    3088:	10 92 6a 07 	sts	0x076A, r1
			//* The following code runs once when serial output is desired
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;			// Hand "Interrupted" baton on to its clone
    308c:	21 e0       	ldi	r18, 0x01	; 1
    308e:	29 83       	std	Y+1, r18	; 0x01
			if (OutputTick)
			{
				OutputTick = false;	
			}
			
			Calculate_PID();				// Calculate PID values
    3090:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <Calculate_PID>
			ProcessMixer();					// Do all the mixer tasks - can be very slow
    3094:	0e 94 a4 32 	call	0x6548	; 0x6548 <ProcessMixer>
			Process_servos();				// Check for reversal and limits
    3098:	0e 94 2b 3b 	call	0x7656	; 0x7656 <Process_servos>
							
			// Prevent output output is requested
			if (!OverrideOutput)
    309c:	01 11       	cpse	r16, r1
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <main+0x636>
			{
				// Note that TransmitData() assumes that ServoOut[] is 
				// updated prior to calling as it destroys the contents
				TransmitData();				// Output serial data			
    30a0:	0e 94 06 3d 	call	0x7a0c	; 0x7a0c <TransmitData>
			}

			LoopCount = 0;					// Reset loop counter
    30a4:	10 92 16 05 	sts	0x0516, r1
    30a8:	61 2c       	mov	r6, r1
    30aa:	dc cf       	rjmp	.-72     	; 0x3064 <main+0x5f6>

000030ac <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	cf 93       	push	r28
    30b2:	df 93       	push	r29
    30b4:	c7 e0       	ldi	r28, 0x07	; 7
    30b6:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    30b8:	08 2f       	mov	r16, r24
    30ba:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    30bc:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    30be:	c8 01       	movw	r24, r16
    30c0:	0c 2e       	mov	r0, r28
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <spiwrite+0x1c>
    30c4:	95 95       	asr	r25
    30c6:	87 95       	ror	r24
    30c8:	0a 94       	dec	r0
    30ca:	e2 f7       	brpl	.-8      	; 0x30c4 <spiwrite+0x18>
    30cc:	80 ff       	sbrs	r24, 0
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <spiwrite+0x28>
		{
			LCD_SI = 1;
    30d0:	59 9a       	sbi	0x0b, 1	; 11
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    30d4:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    30d6:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    30d8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <glcd_delay>
    30dc:	21 97       	sbiw	r28, 0x01	; 1
    30de:	70 f7       	brcc	.-36     	; 0x30bc <spiwrite+0x10>
	}
}
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	08 95       	ret

000030ea <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    30ea:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    30ec:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <spiwrite>

000030f0 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    30f0:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    30f2:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <spiwrite>

000030f6 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    30f6:	cf 93       	push	r28
    30f8:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    30fa:	81 e8       	ldi	r24, 0x81	; 129
    30fc:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
	st7565_command(val);
    3100:	8c 2f       	mov	r24, r28
}
    3102:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    3104:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <st7565_command>

00003108 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    310c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    310e:	5e 98       	cbi	0x0b, 6	; 11
    3110:	87 e8       	ldi	r24, 0x87	; 135
    3112:	93 e1       	ldi	r25, 0x13	; 19
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <st7565_init+0xc>
    3118:	00 c0       	rjmp	.+0      	; 0x311a <st7565_init+0x12>
    311a:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    311c:	5e 9a       	sbi	0x0b, 6	; 11
    311e:	cf ee       	ldi	r28, 0xEF	; 239
    3120:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    3122:	fe 01       	movw	r30, r28
    3124:	84 91       	lpm	r24, Z
    3126:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
    312a:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    312c:	fd e0       	ldi	r31, 0x0D	; 13
    312e:	cd 3f       	cpi	r28, 0xFD	; 253
    3130:	df 07       	cpc	r29, r31
    3132:	b9 f7       	brne	.-18     	; 0x3122 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    3134:	80 91 7e 06 	lds	r24, 0x067E
    3138:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    313c:	88 ec       	ldi	r24, 0xC8	; 200
}
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3142:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <st7565_command>

00003146 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    3146:	df 92       	push	r13
    3148:	ef 92       	push	r14
    314a:	ff 92       	push	r15
    314c:	0f 93       	push	r16
    314e:	1f 93       	push	r17
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	cd ef       	ldi	r28, 0xFD	; 253
    3156:	dd e0       	ldi	r29, 0x0D	; 13
    3158:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    315a:	fe 01       	movw	r30, r28
    315c:	84 91       	lpm	r24, Z
    315e:	80 6b       	ori	r24, 0xB0	; 176
    3160:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    316a:	80 e1       	ldi	r24, 0x10	; 16
    316c:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    3170:	80 ee       	ldi	r24, 0xE0	; 224
    3172:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
    3176:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    3178:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    317a:	f7 01       	movw	r30, r14
    317c:	81 91       	ld	r24, Z+
    317e:	7f 01       	movw	r14, r30
    3180:	0e 94 78 18 	call	0x30f0	; 0x30f0 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    3184:	d3 94       	inc	r13
    3186:	f0 e8       	ldi	r31, 0x80	; 128
    3188:	df 12       	cpse	r13, r31
    318a:	f7 cf       	rjmp	.-18     	; 0x317a <write_buffer+0x34>
    318c:	21 96       	adiw	r28, 0x01	; 1
    318e:	00 58       	subi	r16, 0x80	; 128
    3190:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    3192:	8e e0       	ldi	r24, 0x0E	; 14
    3194:	c5 30       	cpi	r28, 0x05	; 5
    3196:	d8 07       	cpc	r29, r24
    3198:	01 f7       	brne	.-64     	; 0x315a <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	df 90       	pop	r13
    31a8:	08 95       	ret

000031aa <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	34 e0       	ldi	r19, 0x04	; 4
    31ae:	fc 01       	movw	r30, r24
    31b0:	a9 01       	movw	r20, r18
    31b2:	11 92       	st	Z+, r1
    31b4:	41 50       	subi	r20, 0x01	; 1
    31b6:	50 40       	sbci	r21, 0x00	; 0
    31b8:	e1 f7       	brne	.-8      	; 0x31b2 <clear_buffer+0x8>
    31ba:	08 95       	ret

000031bc <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    31c0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    31c2:	8d 2f       	mov	r24, r29
    31c4:	80 6b       	ori	r24, 0xB0	; 176
    31c6:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    31ca:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    31cc:	8c 2f       	mov	r24, r28
    31ce:	8f 70       	andi	r24, 0x0F	; 15
    31d0:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    31d4:	8c 2f       	mov	r24, r28
    31d6:	82 95       	swap	r24
    31d8:	8f 70       	andi	r24, 0x0F	; 15
    31da:	80 61       	ori	r24, 0x10	; 16
    31dc:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
			st7565_data(0x00);											// Clear data
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	0e 94 78 18 	call	0x30f0	; 0x30f0 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    31e6:	cf 5f       	subi	r28, 0xFF	; 255
    31e8:	c0 38       	cpi	r28, 0x80	; 128
    31ea:	81 f7       	brne	.-32     	; 0x31cc <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    31ec:	df 5f       	subi	r29, 0xFF	; 255
    31ee:	d8 30       	cpi	r29, 0x08	; 8
    31f0:	41 f7       	brne	.-48     	; 0x31c2 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	08 95       	ret

000031f8 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    31f8:	67 fd       	sbrc	r22, 7
    31fa:	36 c0       	rjmp	.+108    	; 0x3268 <setpixel+0x70>
    31fc:	40 34       	cpi	r20, 0x40	; 64
    31fe:	a0 f5       	brcc	.+104    	; 0x3268 <setpixel+0x70>
    3200:	34 2f       	mov	r19, r20
    3202:	36 95       	lsr	r19
    3204:	36 95       	lsr	r19
    3206:	36 95       	lsr	r19
    3208:	e6 2f       	mov	r30, r22
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    320e:	22 23       	and	r18, r18
    3210:	a9 f0       	breq	.+42     	; 0x323c <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    3212:	20 e8       	ldi	r18, 0x80	; 128
    3214:	32 9f       	mul	r19, r18
    3216:	e0 0d       	add	r30, r0
    3218:	f1 1d       	adc	r31, r1
    321a:	11 24       	eor	r1, r1
    321c:	e8 0f       	add	r30, r24
    321e:	f9 1f       	adc	r31, r25
    3220:	40 95       	com	r20
    3222:	50 95       	com	r21
    3224:	47 70       	andi	r20, 0x07	; 7
    3226:	55 27       	eor	r21, r21
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	04 2e       	mov	r0, r20
    322e:	01 c0       	rjmp	.+2      	; 0x3232 <setpixel+0x3a>
    3230:	88 0f       	add	r24, r24
    3232:	0a 94       	dec	r0
    3234:	ea f7       	brpl	.-6      	; 0x3230 <setpixel+0x38>
    3236:	90 81       	ld	r25, Z
    3238:	98 2b       	or	r25, r24
    323a:	15 c0       	rjmp	.+42     	; 0x3266 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    323c:	20 e8       	ldi	r18, 0x80	; 128
    323e:	32 9f       	mul	r19, r18
    3240:	e0 0d       	add	r30, r0
    3242:	f1 1d       	adc	r31, r1
    3244:	11 24       	eor	r1, r1
    3246:	e8 0f       	add	r30, r24
    3248:	f9 1f       	adc	r31, r25
    324a:	40 95       	com	r20
    324c:	50 95       	com	r21
    324e:	47 70       	andi	r20, 0x07	; 7
    3250:	55 27       	eor	r21, r21
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	04 2e       	mov	r0, r20
    3258:	01 c0       	rjmp	.+2      	; 0x325c <setpixel+0x64>
    325a:	88 0f       	add	r24, r24
    325c:	0a 94       	dec	r0
    325e:	ea f7       	brpl	.-6      	; 0x325a <setpixel+0x62>
    3260:	80 95       	com	r24
    3262:	90 81       	ld	r25, Z
    3264:	98 23       	and	r25, r24
    3266:	90 83       	st	Z, r25
    3268:	08 95       	ret

0000326a <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    326a:	9f 92       	push	r9
    326c:	af 92       	push	r10
    326e:	bf 92       	push	r11
    3270:	cf 92       	push	r12
    3272:	df 92       	push	r13
    3274:	ef 92       	push	r14
    3276:	ff 92       	push	r15
    3278:	0f 93       	push	r16
    327a:	1f 93       	push	r17
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	ec 01       	movw	r28, r24
    3282:	16 2f       	mov	r17, r22
    3284:	f4 2e       	mov	r15, r20
    3286:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    3288:	a0 2f       	mov	r26, r16
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	a4 1b       	sub	r26, r20
    328e:	b1 09       	sbc	r27, r1
    3290:	b7 ff       	sbrs	r27, 7
    3292:	03 c0       	rjmp	.+6      	; 0x329a <drawline+0x30>
    3294:	b1 95       	neg	r27
    3296:	a1 95       	neg	r26
    3298:	b1 09       	sbc	r27, r1
    329a:	ed 2d       	mov	r30, r13
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	e1 1b       	sub	r30, r17
    32a0:	f1 09       	sbc	r31, r1
    32a2:	f7 ff       	sbrs	r31, 7
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <drawline+0x42>
    32a6:	f1 95       	neg	r31
    32a8:	e1 95       	neg	r30
    32aa:	f1 09       	sbc	r31, r1
    32ac:	bb 24       	eor	r11, r11
    32ae:	b3 94       	inc	r11
    32b0:	ea 17       	cp	r30, r26
    32b2:	fb 07       	cpc	r31, r27
    32b4:	14 f0       	brlt	.+4      	; 0x32ba <drawline+0x50>
    32b6:	b1 2c       	mov	r11, r1
    32b8:	06 c0       	rjmp	.+12     	; 0x32c6 <drawline+0x5c>
    32ba:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    32bc:	d0 2e       	mov	r13, r16
    32be:	08 2f       	mov	r16, r24
    32c0:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    32c2:	1f 2d       	mov	r17, r15
    32c4:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    32c6:	d1 16       	cp	r13, r17
    32c8:	30 f4       	brcc	.+12     	; 0x32d6 <drawline+0x6c>
    32ca:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    32cc:	f0 2e       	mov	r15, r16
    32ce:	08 2f       	mov	r16, r24
    32d0:	81 2f       	mov	r24, r17
    32d2:	1d 2d       	mov	r17, r13
    32d4:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    32d6:	ad 2c       	mov	r10, r13
    32d8:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    32da:	e0 2f       	mov	r30, r16
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	ef 19       	sub	r30, r15
    32e0:	f1 09       	sbc	r31, r1
    32e2:	f7 ff       	sbrs	r31, 7
    32e4:	03 c0       	rjmp	.+6      	; 0x32ec <drawline+0x82>
    32e6:	f1 95       	neg	r31
    32e8:	e1 95       	neg	r30
    32ea:	f1 09       	sbc	r31, r1
    32ec:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    32ee:	ca 2c       	mov	r12, r10
    32f0:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    32f2:	f0 16       	cp	r15, r16
    32f4:	10 f4       	brcc	.+4      	; 0x32fa <drawline+0x90>
	{
		ystep = 1;
    32f6:	01 e0       	ldi	r16, 0x01	; 1
    32f8:	10 c0       	rjmp	.+32     	; 0x331a <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    32fa:	0f ef       	ldi	r16, 0xFF	; 255
    32fc:	0e c0       	rjmp	.+28     	; 0x331a <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    32fe:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    3300:	bb 20       	and	r11, r11
    3302:	71 f0       	breq	.+28     	; 0x3320 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    3304:	41 2f       	mov	r20, r17
    3306:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3308:	ce 01       	movw	r24, r28
    330a:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
		}
		err -= dy;
    330e:	c9 18       	sub	r12, r9
		if (err < 0) 
    3310:	c7 fe       	sbrs	r12, 7
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <drawline+0xae>
		{
			y0 += ystep;
    3314:	f0 0e       	add	r15, r16
			err += dx;
    3316:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    3318:	1f 5f       	subi	r17, 0xFF	; 255
    331a:	1d 15       	cp	r17, r13
    331c:	80 f3       	brcs	.-32     	; 0x32fe <drawline+0x94>
    331e:	03 c0       	rjmp	.+6      	; 0x3326 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3320:	4f 2d       	mov	r20, r15
    3322:	61 2f       	mov	r22, r17
    3324:	f1 cf       	rjmp	.-30     	; 0x3308 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	bf 90       	pop	r11
    3338:	af 90       	pop	r10
    333a:	9f 90       	pop	r9
    333c:	08 95       	ret

0000333e <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    333e:	af 92       	push	r10
    3340:	bf 92       	push	r11
    3342:	cf 92       	push	r12
    3344:	df 92       	push	r13
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	6c 01       	movw	r12, r24
    3354:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3356:	f6 2e       	mov	r15, r22
    3358:	c2 2f       	mov	r28, r18
    335a:	d0 e0       	ldi	r29, 0x00	; 0
    335c:	c6 0f       	add	r28, r22
    335e:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    3360:	10 e0       	ldi	r17, 0x00	; 0
    3362:	04 0f       	add	r16, r20
    3364:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3366:	8f 2d       	mov	r24, r15
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	8c 17       	cp	r24, r28
    336c:	9d 07       	cpc	r25, r29
    336e:	84 f4       	brge	.+32     	; 0x3390 <fillrect+0x52>
    3370:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    3372:	8b 2d       	mov	r24, r11
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	80 17       	cp	r24, r16
    3378:	91 07       	cpc	r25, r17
    337a:	44 f4       	brge	.+16     	; 0x338c <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    337c:	2e 2d       	mov	r18, r14
    337e:	4b 2d       	mov	r20, r11
    3380:	6f 2d       	mov	r22, r15
    3382:	c6 01       	movw	r24, r12
    3384:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    3388:	b3 94       	inc	r11
    338a:	f3 cf       	rjmp	.-26     	; 0x3372 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    338c:	f3 94       	inc	r15
    338e:	eb cf       	rjmp	.-42     	; 0x3366 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	ff 90       	pop	r15
    339a:	ef 90       	pop	r14
    339c:	df 90       	pop	r13
    339e:	cf 90       	pop	r12
    33a0:	bf 90       	pop	r11
    33a2:	af 90       	pop	r10
    33a4:	08 95       	ret

000033a6 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	ec 01       	movw	r28, r24
    33be:	f6 2e       	mov	r15, r22
    33c0:	b4 2e       	mov	r11, r20
    33c2:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    33c4:	16 2f       	mov	r17, r22
    33c6:	c2 2e       	mov	r12, r18
    33c8:	d1 2c       	mov	r13, r1
    33ca:	c6 0e       	add	r12, r22
    33cc:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    33ce:	aa 24       	eor	r10, r10
    33d0:	aa 94       	dec	r10
    33d2:	a0 0e       	add	r10, r16
    33d4:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    33d6:	81 2f       	mov	r24, r17
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	8c 15       	cp	r24, r12
    33dc:	9d 05       	cpc	r25, r13
    33de:	74 f4       	brge	.+28     	; 0x33fc <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    33e0:	2e 2d       	mov	r18, r14
    33e2:	4b 2d       	mov	r20, r11
    33e4:	61 2f       	mov	r22, r17
    33e6:	ce 01       	movw	r24, r28
    33e8:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
		setpixel(buff, i, y+h-1, color);
    33ec:	2e 2d       	mov	r18, r14
    33ee:	4a 2d       	mov	r20, r10
    33f0:	61 2f       	mov	r22, r17
    33f2:	ce 01       	movw	r24, r28
    33f4:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    33f8:	1f 5f       	subi	r17, 0xFF	; 255
    33fa:	ed cf       	rjmp	.-38     	; 0x33d6 <drawrect+0x30>
    33fc:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    33fe:	10 e0       	ldi	r17, 0x00	; 0
    3400:	0b 0d       	add	r16, r11
    3402:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    3404:	cc 24       	eor	r12, r12
    3406:	ca 94       	dec	r12
    3408:	c9 0c       	add	r12, r9
    340a:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    340c:	8d 2d       	mov	r24, r13
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	80 17       	cp	r24, r16
    3412:	91 07       	cpc	r25, r17
    3414:	74 f4       	brge	.+28     	; 0x3432 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    3416:	2e 2d       	mov	r18, r14
    3418:	4d 2d       	mov	r20, r13
    341a:	6f 2d       	mov	r22, r15
    341c:	ce 01       	movw	r24, r28
    341e:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
		setpixel(buff, x+w-1, i, color);
    3422:	2e 2d       	mov	r18, r14
    3424:	4d 2d       	mov	r20, r13
    3426:	6c 2d       	mov	r22, r12
    3428:	ce 01       	movw	r24, r28
    342a:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    342e:	d3 94       	inc	r13
    3430:	ed cf       	rjmp	.-38     	; 0x340c <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	df 90       	pop	r13
    3440:	cf 90       	pop	r12
    3442:	bf 90       	pop	r11
    3444:	af 90       	pop	r10
    3446:	9f 90       	pop	r9
    3448:	08 95       	ret

0000344a <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    344a:	4f 92       	push	r4
    344c:	5f 92       	push	r5
    344e:	6f 92       	push	r6
    3450:	7f 92       	push	r7
    3452:	8f 92       	push	r8
    3454:	9f 92       	push	r9
    3456:	af 92       	push	r10
    3458:	bf 92       	push	r11
    345a:	cf 92       	push	r12
    345c:	df 92       	push	r13
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	ec 01       	movw	r28, r24
    346c:	96 2e       	mov	r9, r22
    346e:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    3470:	bb 24       	eor	r11, r11
    3472:	b3 94       	inc	r11
    3474:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    3476:	82 2e       	mov	r8, r18
    3478:	81 94       	neg	r8
    347a:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    347c:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    347e:	74 2e       	mov	r7, r20
    3480:	72 1a       	sub	r7, r18
    3482:	e4 2e       	mov	r14, r20
    3484:	f1 2c       	mov	r15, r1
    3486:	67 01       	movw	r12, r14
    3488:	c2 0e       	add	r12, r18
    348a:	d1 1c       	adc	r13, r1
    348c:	87 2d       	mov	r24, r7
    348e:	99 27       	eor	r25, r25
    3490:	87 fd       	sbrc	r24, 7
    3492:	90 95       	com	r25
    3494:	c8 16       	cp	r12, r24
    3496:	d9 06       	cpc	r13, r25
    3498:	44 f0       	brlt	.+16     	; 0x34aa <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    349a:	20 2f       	mov	r18, r16
    349c:	47 2d       	mov	r20, r7
    349e:	69 2d       	mov	r22, r9
    34a0:	ce 01       	movw	r24, r28
    34a2:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
    34a6:	73 94       	inc	r7
    34a8:	f1 cf       	rjmp	.-30     	; 0x348c <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    34aa:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    34ac:	71 16       	cp	r7, r17
    34ae:	0c f0       	brlt	.+2      	; 0x34b2 <fillcircle+0x68>
    34b0:	4c c0       	rjmp	.+152    	; 0x354a <fillcircle+0x100>
	{
		if (f >= 0) 
    34b2:	b7 fc       	sbrc	r11, 7
    34b4:	04 c0       	rjmp	.+8      	; 0x34be <fillcircle+0x74>
		{
			y--;
    34b6:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    34b8:	83 94       	inc	r8
    34ba:	83 94       	inc	r8
			f += ddF_y;
    34bc:	b8 0c       	add	r11, r8
    34be:	73 94       	inc	r7
    34c0:	87 2d       	mov	r24, r7
    34c2:	88 0f       	add	r24, r24
    34c4:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    34c6:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    34c8:	6a 2c       	mov	r6, r10
    34ca:	61 1a       	sub	r6, r17
    34cc:	67 01       	movw	r12, r14
    34ce:	c1 0e       	add	r12, r17
    34d0:	d1 1c       	adc	r13, r1
    34d2:	17 fd       	sbrc	r17, 7
    34d4:	da 94       	dec	r13
    34d6:	47 2c       	mov	r4, r7
    34d8:	49 0c       	add	r4, r9
    34da:	59 2c       	mov	r5, r9
    34dc:	57 18       	sub	r5, r7
    34de:	86 2d       	mov	r24, r6
    34e0:	99 27       	eor	r25, r25
    34e2:	87 fd       	sbrc	r24, 7
    34e4:	90 95       	com	r25
    34e6:	c8 16       	cp	r12, r24
    34e8:	d9 06       	cpc	r13, r25
    34ea:	74 f0       	brlt	.+28     	; 0x3508 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    34ec:	20 2f       	mov	r18, r16
    34ee:	46 2d       	mov	r20, r6
    34f0:	64 2d       	mov	r22, r4
    34f2:	ce 01       	movw	r24, r28
    34f4:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
			setpixel(buff, x0-x, i, color);
    34f8:	20 2f       	mov	r18, r16
    34fa:	46 2d       	mov	r20, r6
    34fc:	65 2d       	mov	r22, r5
    34fe:	ce 01       	movw	r24, r28
    3500:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
    3504:	63 94       	inc	r6
    3506:	eb cf       	rjmp	.-42     	; 0x34de <fillcircle+0x94>
    3508:	6a 2c       	mov	r6, r10
    350a:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    350c:	67 01       	movw	r12, r14
    350e:	c7 0c       	add	r12, r7
    3510:	d1 1c       	adc	r13, r1
    3512:	77 fc       	sbrc	r7, 7
    3514:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    3516:	41 2e       	mov	r4, r17
    3518:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    351a:	59 2c       	mov	r5, r9
    351c:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    351e:	86 2d       	mov	r24, r6
    3520:	99 27       	eor	r25, r25
    3522:	87 fd       	sbrc	r24, 7
    3524:	90 95       	com	r25
    3526:	c8 16       	cp	r12, r24
    3528:	d9 06       	cpc	r13, r25
    352a:	0c f4       	brge	.+2      	; 0x352e <fillcircle+0xe4>
    352c:	bf cf       	rjmp	.-130    	; 0x34ac <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    352e:	20 2f       	mov	r18, r16
    3530:	46 2d       	mov	r20, r6
    3532:	64 2d       	mov	r22, r4
    3534:	ce 01       	movw	r24, r28
    3536:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
			setpixel(buff, x0-y, i, color);
    353a:	20 2f       	mov	r18, r16
    353c:	46 2d       	mov	r20, r6
    353e:	65 2d       	mov	r22, r5
    3540:	ce 01       	movw	r24, r28
    3542:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
    3546:	63 94       	inc	r6
    3548:	ea cf       	rjmp	.-44     	; 0x351e <fillcircle+0xd4>
		}    
	}
}
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	bf 90       	pop	r11
    355c:	af 90       	pop	r10
    355e:	9f 90       	pop	r9
    3560:	8f 90       	pop	r8
    3562:	7f 90       	pop	r7
    3564:	6f 90       	pop	r6
    3566:	5f 90       	pop	r5
    3568:	4f 90       	pop	r4
    356a:	08 95       	ret

0000356c <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint8_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    356c:	e8 2f       	mov	r30, r24
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	ee 0f       	add	r30, r30
    3572:	ff 1f       	adc	r31, r31
    3574:	eb 5f       	subi	r30, 0xFB	; 251
    3576:	f1 4f       	sbci	r31, 0xF1	; 241
    3578:	85 91       	lpm	r24, Z+
    357a:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    357c:	0c 94 57 36 	jmp	0x6cae	; 0x6cae <pgm_mugui_lcd_puts>

00003580 <gLCDprint_Menu_P>:
    3580:	0c 94 57 36 	jmp	0x6cae	; 0x6cae <pgm_mugui_lcd_puts>

00003584 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	91 e0       	ldi	r25, 0x01	; 1
    3588:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(122,(const unsigned char*)Verdana14,40,10);	// "Press"
    358c:	2a e0       	ldi	r18, 0x0A	; 10
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	48 e2       	ldi	r20, 0x28	; 40
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	60 e7       	ldi	r22, 0x70	; 112
    3596:	71 e0       	ldi	r23, 0x01	; 1
    3598:	8a e7       	ldi	r24, 0x7A	; 122
    359a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	LCD_Display_Text(123,(const unsigned char*)Verdana14,24,30);	// "for status"
    359e:	2e e1       	ldi	r18, 0x1E	; 30
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	48 e1       	ldi	r20, 0x18	; 24
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	60 e7       	ldi	r22, 0x70	; 112
    35a8:	71 e0       	ldi	r23, 0x01	; 1
    35aa:	8b e7       	ldi	r24, 0x7B	; 123
    35ac:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	
	write_buffer(buffer);
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <write_buffer>

000035b8 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	2c 97       	sbiw	r28, 0x0c	; 12
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
#ifdef KK21
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    35cc:	26 e0       	ldi	r18, 0x06	; 6
    35ce:	ae 01       	movw	r20, r28
    35d0:	4f 5f       	subi	r20, 0xFF	; 255
    35d2:	5f 4f       	sbci	r21, 0xFF	; 255
    35d4:	63 e4       	ldi	r22, 0x43	; 67
    35d6:	80 ed       	ldi	r24, 0xD0	; 208
    35d8:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	98 2f       	mov	r25, r24
    35e2:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    35e4:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    35e6:	82 0f       	add	r24, r18
    35e8:	91 1d       	adc	r25, r1
    35ea:	34 e0       	ldi	r19, 0x04	; 4
    35ec:	95 95       	asr	r25
    35ee:	87 95       	ror	r24
    35f0:	3a 95       	dec	r19
    35f2:	e1 f7       	brne	.-8      	; 0x35ec <get_raw_gyros+0x34>
    35f4:	9a 87       	std	Y+10, r25	; 0x0a
    35f6:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	98 2f       	mov	r25, r24
    35fe:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    3600:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    3602:	82 0f       	add	r24, r18
    3604:	91 1d       	adc	r25, r1
    3606:	54 e0       	ldi	r21, 0x04	; 4
    3608:	95 95       	asr	r25
    360a:	87 95       	ror	r24
    360c:	5a 95       	dec	r21
    360e:	e1 f7       	brne	.-8      	; 0x3608 <get_raw_gyros+0x50>
    3610:	98 87       	std	Y+8, r25	; 0x08
    3612:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	98 2f       	mov	r25, r24
    361a:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    361c:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    361e:	82 0f       	add	r24, r18
    3620:	91 1d       	adc	r25, r1
    3622:	74 e0       	ldi	r23, 0x04	; 4
    3624:	95 95       	asr	r25
    3626:	87 95       	ror	r24
    3628:	7a 95       	dec	r23
    362a:	e1 f7       	brne	.-8      	; 0x3624 <get_raw_gyros+0x6c>
    362c:	9c 87       	std	Y+12, r25	; 0x0c
    362e:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    3630:	20 91 7d 06 	lds	r18, 0x067D
    3634:	a4 e8       	ldi	r26, 0x84	; 132
    3636:	b5 e0       	ldi	r27, 0x05	; 5
    3638:	43 e0       	ldi	r20, 0x03	; 3
    363a:	24 02       	muls	r18, r20
    363c:	90 01       	movw	r18, r0
    363e:	11 24       	eor	r1, r1
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	2b 57       	subi	r18, 0x7B	; 123
    3646:	39 4e       	sbci	r19, 0xE9	; 233
    3648:	f9 01       	movw	r30, r18
    364a:	e8 0f       	add	r30, r24
    364c:	f9 1f       	adc	r31, r25
    364e:	e4 91       	lpm	r30, Z
    3650:	ee 0f       	add	r30, r30
    3652:	ff 0b       	sbc	r31, r31
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	4c 0f       	add	r20, r28
    365a:	5d 1f       	adc	r21, r29
    365c:	e4 0f       	add	r30, r20
    365e:	f5 1f       	adc	r31, r21
    3660:	46 81       	ldd	r20, Z+6	; 0x06
    3662:	57 81       	ldd	r21, Z+7	; 0x07
    3664:	4d 93       	st	X+, r20
    3666:	5d 93       	st	X+, r21
    3668:	01 96       	adiw	r24, 0x01	; 1
	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
	RawADC[YAW] = ADCW;
#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    366a:	83 30       	cpi	r24, 0x03	; 3
    366c:	91 05       	cpc	r25, r1
    366e:	61 f7       	brne	.-40     	; 0x3648 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    3670:	2c 96       	adiw	r28, 0x0c	; 12
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    3682:	1f 93       	push	r17
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    3688:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    368c:	20 91 7d 06 	lds	r18, 0x067D
    3690:	c0 e4       	ldi	r28, 0x40	; 64
    3692:	d7 e0       	ldi	r29, 0x07	; 7
    3694:	a4 e8       	ldi	r26, 0x84	; 132
    3696:	b5 e0       	ldi	r27, 0x05	; 5
    3698:	83 e0       	ldi	r24, 0x03	; 3
    369a:	28 02       	muls	r18, r24
    369c:	90 01       	movw	r18, r0
    369e:	11 24       	eor	r1, r1
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	2d 58       	subi	r18, 0x8D	; 141
    36a6:	39 4e       	sbci	r19, 0xE9	; 233
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    36a8:	69 91       	ld	r22, Y+
    36aa:	79 91       	ld	r23, Y+
    36ac:	f9 01       	movw	r30, r18
    36ae:	e8 0f       	add	r30, r24
    36b0:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    36b2:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    36b4:	4d 91       	ld	r20, X+
    36b6:	5c 91       	ld	r21, X
    36b8:	11 97       	sbiw	r26, 0x01	; 1
    36ba:	46 1b       	sub	r20, r22
    36bc:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    36be:	14 03       	mulsu	r17, r20
    36c0:	b0 01       	movw	r22, r0
    36c2:	15 9f       	mul	r17, r21
    36c4:	70 0d       	add	r23, r0
    36c6:	11 24       	eor	r1, r1
    36c8:	6d 93       	st	X+, r22
    36ca:	7d 93       	st	X+, r23
    36cc:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    36ce:	83 30       	cpi	r24, 0x03	; 3
    36d0:	91 05       	cpc	r25, r1
    36d2:	51 f7       	brne	.-44     	; 0x36a8 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	08 95       	ret

000036dc <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    36dc:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    36de:	86 e0       	ldi	r24, 0x06	; 6
    36e0:	e0 e4       	ldi	r30, 0x40	; 64
    36e2:	f7 e0       	ldi	r31, 0x07	; 7
    36e4:	df 01       	movw	r26, r30
    36e6:	1d 92       	st	X+, r1
    36e8:	8a 95       	dec	r24
    36ea:	e9 f7       	brne	.-6      	; 0x36e6 <CalibrateGyrosFast+0xa>
    36ec:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    36ee:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];
    36f2:	40 91 40 07 	lds	r20, 0x0740
    36f6:	50 91 41 07 	lds	r21, 0x0741
    36fa:	80 91 84 05 	lds	r24, 0x0584
    36fe:	90 91 85 05 	lds	r25, 0x0585
    3702:	48 0f       	add	r20, r24
    3704:	59 1f       	adc	r21, r25
    3706:	50 93 41 07 	sts	0x0741, r21
    370a:	40 93 40 07 	sts	0x0740, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];
    370e:	20 91 42 07 	lds	r18, 0x0742
    3712:	30 91 43 07 	lds	r19, 0x0743
    3716:	80 91 86 05 	lds	r24, 0x0586
    371a:	90 91 87 05 	lds	r25, 0x0587
    371e:	28 0f       	add	r18, r24
    3720:	39 1f       	adc	r19, r25
    3722:	30 93 43 07 	sts	0x0743, r19
    3726:	20 93 42 07 	sts	0x0742, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    372a:	80 91 44 07 	lds	r24, 0x0744
    372e:	90 91 45 07 	lds	r25, 0x0745
    3732:	60 91 88 05 	lds	r22, 0x0588
    3736:	70 91 89 05 	lds	r23, 0x0589
    373a:	86 0f       	add	r24, r22
    373c:	97 1f       	adc	r25, r23
    373e:	90 93 45 07 	sts	0x0745, r25
    3742:	80 93 44 07 	sts	0x0744, r24
    3746:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    3748:	91 f6       	brne	.-92     	; 0x36ee <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32
    374a:	e5 e0       	ldi	r30, 0x05	; 5
    374c:	55 95       	asr	r21
    374e:	47 95       	ror	r20
    3750:	ea 95       	dec	r30
    3752:	e1 f7       	brne	.-8      	; 0x374c <CalibrateGyrosFast+0x70>
    3754:	50 93 41 07 	sts	0x0741, r21
    3758:	40 93 40 07 	sts	0x0740, r20
    375c:	f5 e0       	ldi	r31, 0x05	; 5
    375e:	35 95       	asr	r19
    3760:	27 95       	ror	r18
    3762:	fa 95       	dec	r31
    3764:	e1 f7       	brne	.-8      	; 0x375e <CalibrateGyrosFast+0x82>
    3766:	30 93 43 07 	sts	0x0743, r19
    376a:	20 93 42 07 	sts	0x0742, r18
    376e:	a5 e0       	ldi	r26, 0x05	; 5
    3770:	95 95       	asr	r25
    3772:	87 95       	ror	r24
    3774:	aa 95       	dec	r26
    3776:	e1 f7       	brne	.-8      	; 0x3770 <CalibrateGyrosFast+0x94>
    3778:	90 93 45 07 	sts	0x0745, r25
    377c:	80 93 44 07 	sts	0x0744, r24
	}

	Save_Config_to_EEPROM();
}
    3780:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32
	}

	Save_Config_to_EEPROM();
    3782:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>

00003786 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    3786:	2f 92       	push	r2
    3788:	3f 92       	push	r3
    378a:	4f 92       	push	r4
    378c:	5f 92       	push	r5
    378e:	6f 92       	push	r6
    3790:	7f 92       	push	r7
    3792:	8f 92       	push	r8
    3794:	9f 92       	push	r9
    3796:	af 92       	push	r10
    3798:	bf 92       	push	r11
    379a:	cf 92       	push	r12
    379c:	df 92       	push	r13
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	65 97       	sbiw	r28, 0x15	; 21
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    37ba:	1e 86       	std	Y+14, r1	; 0x0e
    37bc:	1d 86       	std	Y+13, r1	; 0x0d
    37be:	18 8a       	std	Y+16, r1	; 0x10
    37c0:	1f 86       	std	Y+15, r1	; 0x0f
    37c2:	1a 8a       	std	Y+18, r1	; 0x12
    37c4:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();
    37c6:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];
    37ca:	60 91 40 07 	lds	r22, 0x0740
    37ce:	70 91 41 07 	lds	r23, 0x0741
    37d2:	88 27       	eor	r24, r24
    37d4:	77 fd       	sbrc	r23, 7
    37d6:	80 95       	com	r24
    37d8:	98 2f       	mov	r25, r24
    37da:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    37de:	69 83       	std	Y+1, r22	; 0x01
    37e0:	7a 83       	std	Y+2, r23	; 0x02
    37e2:	8b 83       	std	Y+3, r24	; 0x03
    37e4:	9c 83       	std	Y+4, r25	; 0x04
    37e6:	60 91 42 07 	lds	r22, 0x0742
    37ea:	70 91 43 07 	lds	r23, 0x0743
    37ee:	88 27       	eor	r24, r24
    37f0:	77 fd       	sbrc	r23, 7
    37f2:	80 95       	com	r24
    37f4:	98 2f       	mov	r25, r24
    37f6:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    37fa:	6d 83       	std	Y+5, r22	; 0x05
    37fc:	7e 83       	std	Y+6, r23	; 0x06
    37fe:	8f 83       	std	Y+7, r24	; 0x07
    3800:	98 87       	std	Y+8, r25	; 0x08
    3802:	60 91 44 07 	lds	r22, 0x0744
    3806:	70 91 45 07 	lds	r23, 0x0745
    380a:	88 27       	eor	r24, r24
    380c:	77 fd       	sbrc	r23, 7
    380e:	80 95       	com	r24
    3810:	98 2f       	mov	r25, r24
    3812:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    3816:	69 87       	std	Y+9, r22	; 0x09
    3818:	7a 87       	std	Y+10, r23	; 0x0a
    381a:	8b 87       	std	Y+11, r24	; 0x0b
    381c:	9c 87       	std	Y+12, r25	; 0x0c
    381e:	1d 8a       	std	Y+21, r1	; 0x15
    3820:	1b 8a       	std	Y+19, r1	; 0x13
    3822:	e1 2c       	mov	r14, r1
    3824:	f1 2c       	mov	r15, r1
    3826:	00 e0       	ldi	r16, 0x00	; 0
    3828:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    382a:	80 91 b2 00 	lds	r24, 0x00B2
    382e:	9d 89       	ldd	r25, Y+21	; 0x15
    3830:	89 1b       	sub	r24, r25
    3832:	e8 0e       	add	r14, r24
    3834:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    3836:	e0 91 b2 00 	lds	r30, 0x00B2
    383a:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    383c:	fc e4       	ldi	r31, 0x4C	; 76
    383e:	ef 16       	cp	r14, r31
    3840:	ff 06       	cpc	r15, r31
    3842:	28 f0       	brcs	.+10     	; 0x384e <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    3844:	8b 89       	ldd	r24, Y+19	; 0x13
    3846:	8f 5f       	subi	r24, 0xFF	; 255
    3848:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    384a:	e1 2c       	mov	r14, r1
    384c:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    384e:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <get_raw_gyros>
    3852:	fe 01       	movw	r30, r28
    3854:	31 96       	adiw	r30, 0x01	; 1
    3856:	6f 01       	movw	r12, r30
    3858:	b4 e8       	ldi	r27, 0x84	; 132
    385a:	2b 2e       	mov	r2, r27
    385c:	b5 e0       	ldi	r27, 0x05	; 5
    385e:	3b 2e       	mov	r3, r27
    3860:	ce 01       	movw	r24, r28
    3862:	0d 96       	adiw	r24, 0x0d	; 13
    3864:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++)
    3866:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    3868:	f1 01       	movw	r30, r2
    386a:	81 90       	ld	r8, Z+
    386c:	91 90       	ld	r9, Z+
    386e:	1f 01       	movw	r2, r30
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 ec       	ldi	r19, 0xC0	; 192
    3874:	49 e7       	ldi	r20, 0x79	; 121
    3876:	54 e4       	ldi	r21, 0x44	; 68
    3878:	f6 01       	movw	r30, r12
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3886:	2b 01       	movw	r4, r22
    3888:	3c 01       	movw	r6, r24
    388a:	b4 01       	movw	r22, r8
    388c:	88 27       	eor	r24, r24
    388e:	77 fd       	sbrc	r23, 7
    3890:	80 95       	com	r24
    3892:	98 2f       	mov	r25, r24
    3894:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    3898:	9b 01       	movw	r18, r22
    389a:	ac 01       	movw	r20, r24
    389c:	c3 01       	movw	r24, r6
    389e:	b2 01       	movw	r22, r4
    38a0:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__addsf3>
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a e7       	ldi	r20, 0x7A	; 122
    38aa:	54 e4       	ldi	r21, 0x44	; 68
    38ac:	0e 94 4b 40 	call	0x8096	; 0x8096 <__divsf3>
    38b0:	f6 01       	movw	r30, r12
    38b2:	60 83       	st	Z, r22
    38b4:	71 83       	std	Z+1, r23	; 0x01
    38b6:	82 83       	std	Z+2, r24	; 0x02
    38b8:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    38ba:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    38be:	f5 01       	movw	r30, r10
    38c0:	20 81       	ld	r18, Z
    38c2:	31 81       	ldd	r19, Z+1	; 0x01
    38c4:	26 17       	cp	r18, r22
    38c6:	37 07       	cpc	r19, r23
    38c8:	11 f0       	breq	.+4      	; 0x38ce <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    38ca:	00 e0       	ldi	r16, 0x00	; 0
    38cc:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    38ce:	f5 01       	movw	r30, r10
    38d0:	61 93       	st	Z+, r22
    38d2:	71 93       	st	Z+, r23
    38d4:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++)
    38d6:	fc 89       	ldd	r31, Y+20	; 0x14
    38d8:	ff 5f       	subi	r31, 0xFF	; 255
    38da:	fc 8b       	std	Y+20, r31	; 0x14
    38dc:	84 e0       	ldi	r24, 0x04	; 4
    38de:	c8 0e       	add	r12, r24
    38e0:	d1 1c       	adc	r13, r1
    38e2:	f3 30       	cpi	r31, 0x03	; 3
    38e4:	09 f6       	brne	.-126    	; 0x3868 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    38e6:	0f 5f       	subi	r16, 0xFF	; 255
    38e8:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    38ea:	09 3c       	cpi	r16, 0xC9	; 201
    38ec:	11 05       	cpc	r17, r1
    38ee:	20 f0       	brcs	.+8      	; 0x38f8 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;
			CalibrateGyrosFast();
    38f0:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	01 c0       	rjmp	.+2      	; 0x38fa <CalibrateGyrosSlow+0x174>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	e7 e8       	ldi	r30, 0x87	; 135
    38fc:	f3 e1       	ldi	r31, 0x13	; 19
    38fe:	31 97       	sbiw	r30, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <CalibrateGyrosSlow+0x178>
    3902:	00 c0       	rjmp	.+0      	; 0x3904 <CalibrateGyrosSlow+0x17e>
    3904:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    3906:	81 11       	cpse	r24, r1
    3908:	04 c0       	rjmp	.+8      	; 0x3912 <CalibrateGyrosSlow+0x18c>
    390a:	fb 89       	ldd	r31, Y+19	; 0x13
    390c:	f6 30       	cpi	r31, 0x06	; 6
    390e:	08 f4       	brcc	.+2      	; 0x3912 <CalibrateGyrosSlow+0x18c>
    3910:	8c cf       	rjmp	.-232    	; 0x382a <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    3912:	65 96       	adiw	r28, 0x15	; 21
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	df 90       	pop	r13
    392c:	cf 90       	pop	r12
    392e:	bf 90       	pop	r11
    3930:	af 90       	pop	r10
    3932:	9f 90       	pop	r9
    3934:	8f 90       	pop	r8
    3936:	7f 90       	pop	r7
    3938:	6f 90       	pop	r6
    393a:	5f 90       	pop	r5
    393c:	4f 90       	pop	r4
    393e:	3f 90       	pop	r3
    3940:	2f 90       	pop	r2
    3942:	08 95       	ret

00003944 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    3944:	41 e0       	ldi	r20, 0x01	; 1
    3946:	6b e6       	ldi	r22, 0x6B	; 107
    3948:	80 ed       	ldi	r24, 0xD0	; 208
    394a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    394e:	40 e4       	ldi	r20, 0x40	; 64
    3950:	67 e3       	ldi	r22, 0x37	; 55
    3952:	80 ed       	ldi	r24, 0xD0	; 208
    3954:	0e 94 b9 1c 	call	0x3972	; 0x3972 <writeI2Cbyte>

	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    3958:	46 e0       	ldi	r20, 0x06	; 6
    395a:	80 91 83 06 	lds	r24, 0x0683
    395e:	48 1b       	sub	r20, r24
    3960:	6a e1       	ldi	r22, 0x1A	; 26
    3962:	80 ed       	ldi	r24, 0xD0	; 208
    3964:	0e 94 b9 1c 	call	0x3972	; 0x3972 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    3968:	48 e1       	ldi	r20, 0x18	; 24
    396a:	6b e1       	ldi	r22, 0x1B	; 27
    396c:	80 ed       	ldi	r24, 0xD0	; 208
    396e:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <writeI2Cbyte>

00003972 <writeI2Cbyte>:
//************************************************************
// KK2.1 gyro-specifc code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    3972:	cf 93       	push	r28
    3974:	df 93       	push	r29
    3976:	00 d0       	rcall	.+0      	; 0x3978 <writeI2Cbyte+0x6>
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
	i2c_start_wait(address+I2C_WRITE);				// Set up device address
    397c:	4a 83       	std	Y+2, r20	; 0x02
    397e:	69 83       	std	Y+1, r22	; 0x01
    3980:	0e 94 a3 3b 	call	0x7746	; 0x7746 <i2c_start_wait>
	i2c_write(location);							// Set up register address
    3984:	69 81       	ldd	r22, Y+1	; 0x01
    3986:	86 2f       	mov	r24, r22
    3988:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <i2c_write>
	i2c_write(value); 								// Write byte
    398c:	4a 81       	ldd	r20, Y+2	; 0x02
    398e:	84 2f       	mov	r24, r20
    3990:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <i2c_write>
	i2c_stop();
}
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
	i2c_start_wait(address+I2C_WRITE);				// Set up device address
	i2c_write(location);							// Set up register address
	i2c_write(value); 								// Write byte
	i2c_stop();
    399c:	0c 94 e4 3b 	jmp	0x77c8	; 0x77c8 <i2c_stop>

000039a0 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    39a0:	cf 92       	push	r12
    39a2:	df 92       	push	r13
    39a4:	ef 92       	push	r14
    39a6:	ff 92       	push	r15
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	00 d0       	rcall	.+0      	; 0x39b2 <readI2CbyteArray+0x12>
    39b2:	1f 92       	push	r1
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	18 2f       	mov	r17, r24
    39ba:	e2 2e       	mov	r14, r18
	int i=0;

	i2c_start_wait(address+I2C_WRITE);
    39bc:	4a 83       	std	Y+2, r20	; 0x02
    39be:	5b 83       	std	Y+3, r21	; 0x03
    39c0:	69 83       	std	Y+1, r22	; 0x01
    39c2:	0e 94 a3 3b 	call	0x7746	; 0x7746 <i2c_start_wait>
	i2c_write(location);							// Set up register address
    39c6:	69 81       	ldd	r22, Y+1	; 0x01
    39c8:	86 2f       	mov	r24, r22
    39ca:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <i2c_write>
	i2c_rep_start(address+I2C_READ);
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	81 0f       	add	r24, r17
    39d2:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <i2c_rep_start>
    39d6:	4a 81       	ldd	r20, Y+2	; 0x02
    39d8:	c4 2e       	mov	r12, r20
    39da:	5b 81       	ldd	r21, Y+3	; 0x03
    39dc:	d5 2e       	mov	r13, r21
	i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    39de:	00 e0       	ldi	r16, 0x00	; 0
    39e0:	10 e0       	ldi	r17, 0x00	; 0

	i2c_start_wait(address+I2C_WRITE);
	i2c_write(location);							// Set up register address
	i2c_rep_start(address+I2C_READ);

	while (i < size)
    39e2:	f1 2c       	mov	r15, r1
    39e4:	0e 15       	cp	r16, r14
    39e6:	1f 05       	cpc	r17, r15
    39e8:	84 f4       	brge	.+32     	; 0x3a0a <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    39ea:	0f 5f       	subi	r16, 0xFF	; 255
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	0e 15       	cp	r16, r14
    39f0:	1f 05       	cpc	r17, r15
    39f2:	19 f0       	breq	.+6      	; 0x39fa <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    39f4:	0e 94 13 3c 	call	0x7826	; 0x7826 <i2c_readAck>
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    39fa:	0e 94 2c 3c 	call	0x7858	; 0x7858 <i2c_readNak>
    39fe:	f6 01       	movw	r30, r12
    3a00:	80 83       	st	Z, r24
    3a02:	ff ef       	ldi	r31, 0xFF	; 255
    3a04:	cf 1a       	sub	r12, r31
    3a06:	df 0a       	sbc	r13, r31
    3a08:	ed cf       	rjmp	.-38     	; 0x39e4 <readI2CbyteArray+0x44>
		}
		i++;
	}

	i2c_stop();
}
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	df 91       	pop	r29
    3a12:	cf 91       	pop	r28
    3a14:	1f 91       	pop	r17
    3a16:	0f 91       	pop	r16
    3a18:	ff 90       	pop	r15
    3a1a:	ef 90       	pop	r14
    3a1c:	df 90       	pop	r13
    3a1e:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

	i2c_stop();
    3a20:	0c 94 e4 3b 	jmp	0x77c8	; 0x77c8 <i2c_stop>

00003a24 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    3a24:	4f 92       	push	r4
    3a26:	5f 92       	push	r5
    3a28:	6f 92       	push	r6
    3a2a:	7f 92       	push	r7
    3a2c:	8f 92       	push	r8
    3a2e:	9f 92       	push	r9
    3a30:	af 92       	push	r10
    3a32:	bf 92       	push	r11
    3a34:	cf 92       	push	r12
    3a36:	df 92       	push	r13
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	28 97       	sbiw	r28, 0x08	; 8
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	6b 01       	movw	r12, r22
    3a52:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    3a54:	80 90 ba 05 	lds	r8, 0x05BA
    3a58:	90 90 bb 05 	lds	r9, 0x05BB
    3a5c:	a0 90 bc 05 	lds	r10, 0x05BC
    3a60:	b0 90 bd 05 	lds	r11, 0x05BD
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    3a64:	9b 01       	movw	r18, r22
    3a66:	ac 01       	movw	r20, r24
    3a68:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e0       	ldi	r20, 0x00	; 0
    3a72:	5f e3       	ldi	r21, 0x3F	; 63
    3a74:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3a78:	9b 01       	movw	r18, r22
    3a7a:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	80 e8       	ldi	r24, 0x80	; 128
    3a82:	9f e3       	ldi	r25, 0x3F	; 63
    3a84:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    3a88:	69 83       	std	Y+1, r22	; 0x01
    3a8a:	7a 83       	std	Y+2, r23	; 0x02
    3a8c:	8b 83       	std	Y+3, r24	; 0x03
    3a8e:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    3a90:	40 90 be 05 	lds	r4, 0x05BE
    3a94:	50 90 bf 05 	lds	r5, 0x05BF
    3a98:	60 90 c0 05 	lds	r6, 0x05C0
    3a9c:	70 90 c1 05 	lds	r7, 0x05C1
    3aa0:	9b 01       	movw	r18, r22
    3aa2:	ac 01       	movw	r20, r24
    3aa4:	c5 01       	movw	r24, r10
    3aa6:	b4 01       	movw	r22, r8
    3aa8:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3aac:	6d 83       	std	Y+5, r22	; 0x05
    3aae:	7e 83       	std	Y+6, r23	; 0x06
    3ab0:	8f 83       	std	Y+7, r24	; 0x07
    3ab2:	98 87       	std	Y+8, r25	; 0x08
    3ab4:	a7 01       	movw	r20, r14
    3ab6:	96 01       	movw	r18, r12
    3ab8:	c3 01       	movw	r24, r6
    3aba:	b2 01       	movw	r22, r4
    3abc:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3ac0:	9b 01       	movw	r18, r22
    3ac2:	ac 01       	movw	r20, r24
    3ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    3ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    3ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    3aca:	98 85       	ldd	r25, Y+8	; 0x08
    3acc:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    3ad0:	60 93 a6 05 	sts	0x05A6, r22
    3ad4:	70 93 a7 05 	sts	0x05A7, r23
    3ad8:	80 93 a8 05 	sts	0x05A8, r24
    3adc:	90 93 a9 05 	sts	0x05A9, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    3ae0:	a7 01       	movw	r20, r14
    3ae2:	96 01       	movw	r18, r12
    3ae4:	c5 01       	movw	r24, r10
    3ae6:	b4 01       	movw	r22, r8
    3ae8:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3aec:	6b 01       	movw	r12, r22
    3aee:	7c 01       	movw	r14, r24
    3af0:	29 81       	ldd	r18, Y+1	; 0x01
    3af2:	3a 81       	ldd	r19, Y+2	; 0x02
    3af4:	4b 81       	ldd	r20, Y+3	; 0x03
    3af6:	5c 81       	ldd	r21, Y+4	; 0x04
    3af8:	c3 01       	movw	r24, r6
    3afa:	b2 01       	movw	r22, r4
    3afc:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3b00:	9b 01       	movw	r18, r22
    3b02:	ac 01       	movw	r20, r24
    3b04:	c7 01       	movw	r24, r14
    3b06:	b6 01       	movw	r22, r12
    3b08:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__addsf3>
    3b0c:	60 93 8a 05 	sts	0x058A, r22
    3b10:	70 93 8b 05 	sts	0x058B, r23
    3b14:	80 93 8c 05 	sts	0x058C, r24
    3b18:	90 93 8d 05 	sts	0x058D, r25
}
    3b1c:	28 96       	adiw	r28, 0x08	; 8
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	ff 90       	pop	r15
    3b2e:	ef 90       	pop	r14
    3b30:	df 90       	pop	r13
    3b32:	cf 90       	pop	r12
    3b34:	bf 90       	pop	r11
    3b36:	af 90       	pop	r10
    3b38:	9f 90       	pop	r9
    3b3a:	8f 90       	pop	r8
    3b3c:	7f 90       	pop	r7
    3b3e:	6f 90       	pop	r6
    3b40:	5f 90       	pop	r5
    3b42:	4f 90       	pop	r4
    3b44:	08 95       	ret

00003b46 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    3b46:	cf 92       	push	r12
    3b48:	df 92       	push	r13
    3b4a:	ef 92       	push	r14
    3b4c:	ff 92       	push	r15
    3b4e:	69 01       	movw	r12, r18
    3b50:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    3b52:	25 ef       	ldi	r18, 0xF5	; 245
    3b54:	31 ea       	ldi	r19, 0xA1	; 161
    3b56:	4b e8       	ldi	r20, 0x8B	; 139
    3b58:	5c e3       	ldi	r21, 0x3C	; 60
    3b5a:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3b5e:	a7 01       	movw	r20, r14
    3b60:	96 01       	movw	r18, r12
    3b62:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3b66:	6b 01       	movw	r12, r22
    3b68:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    3b6a:	26 ea       	ldi	r18, 0xA6	; 166
    3b6c:	3a e0       	ldi	r19, 0x0A	; 10
    3b6e:	46 e8       	ldi	r20, 0x86	; 134
    3b70:	5e e3       	ldi	r21, 0x3E	; 62
    3b72:	0e 94 96 41 	call	0x832c	; 0x832c <__gesf2>
    3b76:	18 16       	cp	r1, r24
    3b78:	9c f0       	brlt	.+38     	; 0x3ba0 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    3b7a:	26 ea       	ldi	r18, 0xA6	; 166
    3b7c:	3a e0       	ldi	r19, 0x0A	; 10
    3b7e:	46 e8       	ldi	r20, 0x86	; 134
    3b80:	5e eb       	ldi	r21, 0xBE	; 190
    3b82:	c7 01       	movw	r24, r14
    3b84:	b6 01       	movw	r22, r12
    3b86:	0e 94 47 40 	call	0x808e	; 0x808e <__cmpsf2>
    3b8a:	87 ff       	sbrs	r24, 7
    3b8c:	11 c0       	rjmp	.+34     	; 0x3bb0 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    3b8e:	86 ea       	ldi	r24, 0xA6	; 166
    3b90:	c8 2e       	mov	r12, r24
    3b92:	8a e0       	ldi	r24, 0x0A	; 10
    3b94:	d8 2e       	mov	r13, r24
    3b96:	86 e8       	ldi	r24, 0x86	; 134
    3b98:	e8 2e       	mov	r14, r24
    3b9a:	8e eb       	ldi	r24, 0xBE	; 190
    3b9c:	f8 2e       	mov	r15, r24
    3b9e:	08 c0       	rjmp	.+16     	; 0x3bb0 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    3ba0:	96 ea       	ldi	r25, 0xA6	; 166
    3ba2:	c9 2e       	mov	r12, r25
    3ba4:	9a e0       	ldi	r25, 0x0A	; 10
    3ba6:	d9 2e       	mov	r13, r25
    3ba8:	96 e8       	ldi	r25, 0x86	; 134
    3baa:	e9 2e       	mov	r14, r25
    3bac:	9e e3       	ldi	r25, 0x3E	; 62
    3bae:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    3bb0:	c7 01       	movw	r24, r14
    3bb2:	b6 01       	movw	r22, r12
    3bb4:	ff 90       	pop	r15
    3bb6:	ef 90       	pop	r14
    3bb8:	df 90       	pop	r13
    3bba:	cf 90       	pop	r12
    3bbc:	08 95       	ret

00003bbe <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	6b 01       	movw	r12, r22
    3bd4:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    3bd6:	60 91 9a 05 	lds	r22, 0x059A
    3bda:	70 91 9b 05 	lds	r23, 0x059B
    3bde:	80 91 9c 05 	lds	r24, 0x059C
    3be2:	90 91 9d 05 	lds	r25, 0x059D
    3be6:	a7 01       	movw	r20, r14
    3be8:	96 01       	movw	r18, r12
    3bea:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <thetascale>
	VectorA = VectorY;
    3bee:	00 91 1e 05 	lds	r16, 0x051E
    3bf2:	10 91 1f 05 	lds	r17, 0x051F
    3bf6:	20 91 20 05 	lds	r18, 0x0520
    3bfa:	30 91 21 05 	lds	r19, 0x0521
    3bfe:	00 93 ba 05 	sts	0x05BA, r16
    3c02:	10 93 bb 05 	sts	0x05BB, r17
    3c06:	20 93 bc 05 	sts	0x05BC, r18
    3c0a:	30 93 bd 05 	sts	0x05BD, r19
	VectorB = VectorZ;
    3c0e:	00 91 00 05 	lds	r16, 0x0500
    3c12:	10 91 01 05 	lds	r17, 0x0501
    3c16:	20 91 02 05 	lds	r18, 0x0502
    3c1a:	30 91 03 05 	lds	r19, 0x0503
    3c1e:	00 93 be 05 	sts	0x05BE, r16
    3c22:	10 93 bf 05 	sts	0x05BF, r17
    3c26:	20 93 c0 05 	sts	0x05C0, r18
    3c2a:	30 93 c1 05 	sts	0x05C1, r19
	RotateVector(theta);
    3c2e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <RotateVector>
	VectorY = VectorNewA;
    3c32:	80 91 a6 05 	lds	r24, 0x05A6
    3c36:	90 91 a7 05 	lds	r25, 0x05A7
    3c3a:	a0 91 a8 05 	lds	r26, 0x05A8
    3c3e:	b0 91 a9 05 	lds	r27, 0x05A9
    3c42:	80 93 1e 05 	sts	0x051E, r24
    3c46:	90 93 1f 05 	sts	0x051F, r25
    3c4a:	a0 93 20 05 	sts	0x0520, r26
    3c4e:	b0 93 21 05 	sts	0x0521, r27
	VectorZ = VectorNewB;
    3c52:	80 90 8a 05 	lds	r8, 0x058A
    3c56:	90 90 8b 05 	lds	r9, 0x058B
    3c5a:	a0 90 8c 05 	lds	r10, 0x058C
    3c5e:	b0 90 8d 05 	lds	r11, 0x058D
    3c62:	80 92 00 05 	sts	0x0500, r8
    3c66:	90 92 01 05 	sts	0x0501, r9
    3c6a:	a0 92 02 05 	sts	0x0502, r10
    3c6e:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    3c72:	60 91 9e 05 	lds	r22, 0x059E
    3c76:	70 91 9f 05 	lds	r23, 0x059F
    3c7a:	80 91 a0 05 	lds	r24, 0x05A0
    3c7e:	90 91 a1 05 	lds	r25, 0x05A1
    3c82:	a7 01       	movw	r20, r14
    3c84:	96 01       	movw	r18, r12
    3c86:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <thetascale>
	VectorA = VectorX;
    3c8a:	00 91 22 05 	lds	r16, 0x0522
    3c8e:	10 91 23 05 	lds	r17, 0x0523
    3c92:	20 91 24 05 	lds	r18, 0x0524
    3c96:	30 91 25 05 	lds	r19, 0x0525
    3c9a:	00 93 ba 05 	sts	0x05BA, r16
    3c9e:	10 93 bb 05 	sts	0x05BB, r17
    3ca2:	20 93 bc 05 	sts	0x05BC, r18
    3ca6:	30 93 bd 05 	sts	0x05BD, r19
	VectorB = VectorZ;
    3caa:	80 92 be 05 	sts	0x05BE, r8
    3cae:	90 92 bf 05 	sts	0x05BF, r9
    3cb2:	a0 92 c0 05 	sts	0x05C0, r10
    3cb6:	b0 92 c1 05 	sts	0x05C1, r11
	RotateVector(theta);
    3cba:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <RotateVector>
	VectorX = VectorNewA;
    3cbe:	80 90 a6 05 	lds	r8, 0x05A6
    3cc2:	90 90 a7 05 	lds	r9, 0x05A7
    3cc6:	a0 90 a8 05 	lds	r10, 0x05A8
    3cca:	b0 90 a9 05 	lds	r11, 0x05A9
    3cce:	80 92 22 05 	sts	0x0522, r8
    3cd2:	90 92 23 05 	sts	0x0523, r9
    3cd6:	a0 92 24 05 	sts	0x0524, r10
    3cda:	b0 92 25 05 	sts	0x0525, r11
	VectorZ = VectorNewB;
    3cde:	80 91 8a 05 	lds	r24, 0x058A
    3ce2:	90 91 8b 05 	lds	r25, 0x058B
    3ce6:	a0 91 8c 05 	lds	r26, 0x058C
    3cea:	b0 91 8d 05 	lds	r27, 0x058D
    3cee:	80 93 00 05 	sts	0x0500, r24
    3cf2:	90 93 01 05 	sts	0x0501, r25
    3cf6:	a0 93 02 05 	sts	0x0502, r26
    3cfa:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    3cfe:	60 91 88 05 	lds	r22, 0x0588
    3d02:	70 91 89 05 	lds	r23, 0x0589
    3d06:	88 27       	eor	r24, r24
    3d08:	77 fd       	sbrc	r23, 7
    3d0a:	80 95       	com	r24
    3d0c:	98 2f       	mov	r25, r24
    3d0e:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    3d12:	a7 01       	movw	r20, r14
    3d14:	96 01       	movw	r18, r12
    3d16:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <thetascale>
	VectorA = VectorX;
    3d1a:	80 92 ba 05 	sts	0x05BA, r8
    3d1e:	90 92 bb 05 	sts	0x05BB, r9
    3d22:	a0 92 bc 05 	sts	0x05BC, r10
    3d26:	b0 92 bd 05 	sts	0x05BD, r11
	VectorB = VectorY;
    3d2a:	c0 90 1e 05 	lds	r12, 0x051E
    3d2e:	d0 90 1f 05 	lds	r13, 0x051F
    3d32:	e0 90 20 05 	lds	r14, 0x0520
    3d36:	f0 90 21 05 	lds	r15, 0x0521
    3d3a:	c0 92 be 05 	sts	0x05BE, r12
    3d3e:	d0 92 bf 05 	sts	0x05BF, r13
    3d42:	e0 92 c0 05 	sts	0x05C0, r14
    3d46:	f0 92 c1 05 	sts	0x05C1, r15
	RotateVector(theta);
    3d4a:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <RotateVector>
	VectorX = VectorNewA;
    3d4e:	80 91 a6 05 	lds	r24, 0x05A6
    3d52:	90 91 a7 05 	lds	r25, 0x05A7
    3d56:	a0 91 a8 05 	lds	r26, 0x05A8
    3d5a:	b0 91 a9 05 	lds	r27, 0x05A9
    3d5e:	80 93 22 05 	sts	0x0522, r24
    3d62:	90 93 23 05 	sts	0x0523, r25
    3d66:	a0 93 24 05 	sts	0x0524, r26
    3d6a:	b0 93 25 05 	sts	0x0525, r27
	VectorY = VectorNewB;
    3d6e:	80 91 8a 05 	lds	r24, 0x058A
    3d72:	90 91 8b 05 	lds	r25, 0x058B
    3d76:	a0 91 8c 05 	lds	r26, 0x058C
    3d7a:	b0 91 8d 05 	lds	r27, 0x058D
    3d7e:	80 93 1e 05 	sts	0x051E, r24
    3d82:	90 93 1f 05 	sts	0x051F, r25
    3d86:	a0 93 20 05 	sts	0x0520, r26
    3d8a:	b0 93 21 05 	sts	0x0521, r27
}
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	ff 90       	pop	r15
    3d94:	ef 90       	pop	r14
    3d96:	df 90       	pop	r13
    3d98:	cf 90       	pop	r12
    3d9a:	bf 90       	pop	r11
    3d9c:	af 90       	pop	r10
    3d9e:	9f 90       	pop	r9
    3da0:	8f 90       	pop	r8
    3da2:	08 95       	ret

00003da4 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    3da4:	cf 92       	push	r12
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	44 eb       	ldi	r20, 0xB4	; 180
    3db2:	52 e4       	ldi	r21, 0x42	; 66
    3db4:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3db8:	6b 01       	movw	r12, r22
    3dba:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	a9 01       	movw	r20, r18
    3dc2:	60 91 00 05 	lds	r22, 0x0500
    3dc6:	70 91 01 05 	lds	r23, 0x0501
    3dca:	80 91 02 05 	lds	r24, 0x0502
    3dce:	90 91 03 05 	lds	r25, 0x0503
    3dd2:	0e 94 47 40 	call	0x808e	; 0x808e <__cmpsf2>
    3dd6:	87 ff       	sbrs	r24, 7
    3dd8:	18 c0       	rjmp	.+48     	; 0x3e0a <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	a9 01       	movw	r20, r18
    3de0:	c7 01       	movw	r24, r14
    3de2:	b6 01       	movw	r22, r12
    3de4:	0e 94 96 41 	call	0x832c	; 0x832c <__gesf2>
		{
			temp = 180 - temp;
    3de8:	a7 01       	movw	r20, r14
    3dea:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    3dec:	18 16       	cp	r1, r24
    3dee:	2c f4       	brge	.+10     	; 0x3dfa <ext2+0x56>
		{
			temp = 180 - temp;
    3df0:	60 e0       	ldi	r22, 0x00	; 0
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	84 e3       	ldi	r24, 0x34	; 52
    3df6:	93 e4       	ldi	r25, 0x43	; 67
    3df8:	04 c0       	rjmp	.+8      	; 0x3e02 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	84 e3       	ldi	r24, 0x34	; 52
    3e00:	93 ec       	ldi	r25, 0xC3	; 195
    3e02:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    3e06:	6b 01       	movw	r12, r22
    3e08:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    3e0a:	c7 01       	movw	r24, r14
    3e0c:	b6 01       	movw	r22, r12
    3e0e:	ff 90       	pop	r15
    3e10:	ef 90       	pop	r14
    3e12:	df 90       	pop	r13
    3e14:	cf 90       	pop	r12
    3e16:	08 95       	ret

00003e18 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    3e18:	60 91 22 05 	lds	r22, 0x0522
    3e1c:	70 91 23 05 	lds	r23, 0x0523
    3e20:	80 91 24 05 	lds	r24, 0x0524
    3e24:	90 91 25 05 	lds	r25, 0x0525
    3e28:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <ext2>
    3e2c:	60 93 b6 05 	sts	0x05B6, r22
    3e30:	70 93 b7 05 	sts	0x05B7, r23
    3e34:	80 93 b8 05 	sts	0x05B8, r24
    3e38:	90 93 b9 05 	sts	0x05B9, r25
	EulerAnglePitch = ext2(VectorY);
    3e3c:	60 91 1e 05 	lds	r22, 0x051E
    3e40:	70 91 1f 05 	lds	r23, 0x051F
    3e44:	80 91 20 05 	lds	r24, 0x0520
    3e48:	90 91 21 05 	lds	r25, 0x0521
    3e4c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <ext2>
    3e50:	60 93 8e 05 	sts	0x058E, r22
    3e54:	70 93 8f 05 	sts	0x058F, r23
    3e58:	80 93 90 05 	sts	0x0590, r24
    3e5c:	90 93 91 05 	sts	0x0591, r25
    3e60:	08 95       	ret

00003e62 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    3e62:	4f 92       	push	r4
    3e64:	5f 92       	push	r5
    3e66:	6f 92       	push	r6
    3e68:	7f 92       	push	r7
    3e6a:	8f 92       	push	r8
    3e6c:	9f 92       	push	r9
    3e6e:	af 92       	push	r10
    3e70:	bf 92       	push	r11
    3e72:	cf 92       	push	r12
    3e74:	df 92       	push	r13
    3e76:	ef 92       	push	r14
    3e78:	ff 92       	push	r15
    3e7a:	0f 93       	push	r16
    3e7c:	1f 93       	push	r17
    3e7e:	cf 93       	push	r28
    3e80:	df 93       	push	r29
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	60 97       	sbiw	r28, 0x10	; 16
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    3e92:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <__floatunsisf>
    3e96:	69 83       	std	Y+1, r22	; 0x01
    3e98:	7a 83       	std	Y+2, r23	; 0x02
    3e9a:	8b 83       	std	Y+3, r24	; 0x03
    3e9c:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    3e9e:	20 e8       	ldi	r18, 0x80	; 128
    3ea0:	36 e9       	ldi	r19, 0x96	; 150
    3ea2:	48 e1       	ldi	r20, 0x18	; 24
    3ea4:	5a e4       	ldi	r21, 0x4A	; 74
    3ea6:	0e 94 4b 40 	call	0x8096	; 0x8096 <__divsf3>
    3eaa:	6d 87       	std	Y+13, r22	; 0x0d
    3eac:	7e 87       	std	Y+14, r23	; 0x0e
    3eae:	8f 87       	std	Y+15, r24	; 0x0f
    3eb0:	98 8b       	std	Y+16, r25	; 0x10

	//************************************************************
	// Acc LPF
	//************************************************************	

	memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    3eb2:	60 91 82 06 	lds	r22, 0x0682
    3eb6:	84 e0       	ldi	r24, 0x04	; 4
    3eb8:	68 02       	muls	r22, r24
    3eba:	b0 01       	movw	r22, r0
    3ebc:	11 24       	eor	r1, r1
    3ebe:	69 56       	subi	r22, 0x69	; 105
    3ec0:	79 4e       	sbci	r23, 0xE9	; 233
    3ec2:	44 e0       	ldi	r20, 0x04	; 4
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	0e 94 9d 42 	call	0x853a	; 0x853a <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    3ece:	50 90 82 06 	lds	r5, 0x0682
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    3ed2:	c9 80       	ldd	r12, Y+1	; 0x01
    3ed4:	da 80       	ldd	r13, Y+2	; 0x02
    3ed6:	eb 80       	ldd	r14, Y+3	; 0x03
    3ed8:	fc 80       	ldd	r15, Y+4	; 0x04
    3eda:	2e e3       	ldi	r18, 0x3E	; 62
    3edc:	62 2e       	mov	r6, r18
    3ede:	25 e0       	ldi	r18, 0x05	; 5
    3ee0:	72 2e       	mov	r7, r18
    3ee2:	0a ea       	ldi	r16, 0xAA	; 170
    3ee4:	15 e0       	ldi	r17, 0x05	; 5
	memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    3ee6:	d3 01       	movw	r26, r6
    3ee8:	6d 91       	ld	r22, X+
    3eea:	7d 91       	ld	r23, X+
    3eec:	3d 01       	movw	r6, r26
    3eee:	88 27       	eor	r24, r24
    3ef0:	77 fd       	sbrc	r23, 7
    3ef2:	80 95       	com	r24
    3ef4:	98 2f       	mov	r25, r24
    3ef6:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    3efa:	4b 01       	movw	r8, r22
    3efc:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    3efe:	b7 e0       	ldi	r27, 0x07	; 7
    3f00:	5b 16       	cp	r5, r27
    3f02:	f1 f0       	breq	.+60     	; 0x3f40 <imu_update+0xde>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e8       	ldi	r20, 0x80	; 128
    3f0a:	5f e3       	ldi	r21, 0x3F	; 63
    3f0c:	c7 01       	movw	r24, r14
    3f0e:	b6 01       	movw	r22, r12
    3f10:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    3f14:	f8 01       	movw	r30, r16
    3f16:	20 81       	ld	r18, Z
    3f18:	31 81       	ldd	r19, Z+1	; 0x01
    3f1a:	42 81       	ldd	r20, Z+2	; 0x02
    3f1c:	53 81       	ldd	r21, Z+3	; 0x03
    3f1e:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3f22:	a5 01       	movw	r20, r10
    3f24:	94 01       	movw	r18, r8
    3f26:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    3f2a:	a7 01       	movw	r20, r14
    3f2c:	96 01       	movw	r18, r12
    3f2e:	0e 94 4b 40 	call	0x8096	; 0x8096 <__divsf3>
    3f32:	d8 01       	movw	r26, r16
    3f34:	6d 93       	st	X+, r22
    3f36:	7d 93       	st	X+, r23
    3f38:	8d 93       	st	X+, r24
    3f3a:	9c 93       	st	X, r25
    3f3c:	13 97       	sbiw	r26, 0x03	; 3
    3f3e:	09 c0       	rjmp	.+18     	; 0x3f52 <imu_update+0xf0>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    3f40:	b7 fa       	bst	r11, 7
    3f42:	b0 94       	com	r11
    3f44:	b7 f8       	bld	r11, 7
    3f46:	b0 94       	com	r11
    3f48:	f8 01       	movw	r30, r16
    3f4a:	80 82       	st	Z, r8
    3f4c:	91 82       	std	Z+1, r9	; 0x01
    3f4e:	a2 82       	std	Z+2, r10	; 0x02
    3f50:	b3 82       	std	Z+3, r11	; 0x03
    3f52:	0c 5f       	subi	r16, 0xFC	; 252
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
	//************************************************************	

	memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    3f56:	f4 e4       	ldi	r31, 0x44	; 68
    3f58:	6f 16       	cp	r6, r31
    3f5a:	f5 e0       	ldi	r31, 0x05	; 5
    3f5c:	7f 06       	cpc	r7, r31
    3f5e:	19 f6       	brne	.-122    	; 0x3ee6 <imu_update+0x84>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    3f60:	23 ec       	ldi	r18, 0xC3	; 195
    3f62:	35 ef       	ldi	r19, 0xF5	; 245
    3f64:	48 e2       	ldi	r20, 0x28	; 40
    3f66:	5f e3       	ldi	r21, 0x3F	; 63
    3f68:	60 91 aa 05 	lds	r22, 0x05AA
    3f6c:	70 91 ab 05 	lds	r23, 0x05AB
    3f70:	80 91 ac 05 	lds	r24, 0x05AC
    3f74:	90 91 ad 05 	lds	r25, 0x05AD
    3f78:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3f7c:	6d 83       	std	Y+5, r22	; 0x05
    3f7e:	7e 83       	std	Y+6, r23	; 0x06
    3f80:	8f 83       	std	Y+7, r24	; 0x07
    3f82:	98 87       	std	Y+8, r25	; 0x08
    3f84:	60 93 92 05 	sts	0x0592, r22
    3f88:	70 93 93 05 	sts	0x0593, r23
    3f8c:	80 93 94 05 	sts	0x0594, r24
    3f90:	90 93 95 05 	sts	0x0595, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    3f94:	23 ec       	ldi	r18, 0xC3	; 195
    3f96:	35 ef       	ldi	r19, 0xF5	; 245
    3f98:	48 e2       	ldi	r20, 0x28	; 40
    3f9a:	5f e3       	ldi	r21, 0x3F	; 63
    3f9c:	60 91 ae 05 	lds	r22, 0x05AE
    3fa0:	70 91 af 05 	lds	r23, 0x05AF
    3fa4:	80 91 b0 05 	lds	r24, 0x05B0
    3fa8:	90 91 b1 05 	lds	r25, 0x05B1
    3fac:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    3fb0:	69 87       	std	Y+9, r22	; 0x09
    3fb2:	7a 87       	std	Y+10, r23	; 0x0a
    3fb4:	8b 87       	std	Y+11, r24	; 0x0b
    3fb6:	9c 87       	std	Y+12, r25	; 0x0c
    3fb8:	60 93 96 05 	sts	0x0596, r22
    3fbc:	70 93 97 05 	sts	0x0597, r23
    3fc0:	80 93 98 05 	sts	0x0598, r24
    3fc4:	90 93 99 05 	sts	0x0599, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    3fc8:	60 91 84 05 	lds	r22, 0x0584
    3fcc:	70 91 85 05 	lds	r23, 0x0585
    3fd0:	88 27       	eor	r24, r24
    3fd2:	77 fd       	sbrc	r23, 7
    3fd4:	80 95       	com	r24
    3fd6:	98 2f       	mov	r25, r24
    3fd8:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    3fdc:	2b 01       	movw	r4, r22
    3fde:	3c 01       	movw	r6, r24
    3fe0:	60 93 9e 05 	sts	0x059E, r22
    3fe4:	70 93 9f 05 	sts	0x059F, r23
    3fe8:	80 93 a0 05 	sts	0x05A0, r24
    3fec:	90 93 a1 05 	sts	0x05A1, r25
	GyroPitchVC = gyroADC[PITCH];
    3ff0:	60 91 86 05 	lds	r22, 0x0586
    3ff4:	70 91 87 05 	lds	r23, 0x0587
    3ff8:	88 27       	eor	r24, r24
    3ffa:	77 fd       	sbrc	r23, 7
    3ffc:	80 95       	com	r24
    3ffe:	98 2f       	mov	r25, r24
    4000:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    4004:	6b 01       	movw	r12, r22
    4006:	7c 01       	movw	r14, r24
    4008:	60 93 9a 05 	sts	0x059A, r22
    400c:	70 93 9b 05 	sts	0x059B, r23
    4010:	80 93 9c 05 	sts	0x059C, r24
    4014:	90 93 9d 05 	sts	0x059D, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4018:	20 91 3e 05 	lds	r18, 0x053E
    401c:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4020:	40 91 40 05 	lds	r20, 0x0540
    4024:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4028:	e0 91 42 05 	lds	r30, 0x0542
    402c:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4030:	44 9f       	mul	r20, r20
    4032:	40 01       	movw	r8, r0
    4034:	45 9f       	mul	r20, r21
    4036:	90 0c       	add	r9, r0
    4038:	90 0c       	add	r9, r0
    403a:	11 24       	eor	r1, r1
    403c:	b4 01       	movw	r22, r8
    403e:	88 27       	eor	r24, r24
    4040:	77 fd       	sbrc	r23, 7
    4042:	80 95       	com	r24
    4044:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4046:	22 9f       	mul	r18, r18
    4048:	a0 01       	movw	r20, r0
    404a:	23 9f       	mul	r18, r19
    404c:	50 0d       	add	r21, r0
    404e:	50 0d       	add	r21, r0
    4050:	11 24       	eor	r1, r1
    4052:	8a 01       	movw	r16, r20
    4054:	22 27       	eor	r18, r18
    4056:	17 fd       	sbrc	r17, 7
    4058:	20 95       	com	r18
    405a:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    405c:	60 0f       	add	r22, r16
    405e:	71 1f       	adc	r23, r17
    4060:	82 1f       	adc	r24, r18
    4062:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4064:	ee 9f       	mul	r30, r30
    4066:	90 01       	movw	r18, r0
    4068:	ef 9f       	mul	r30, r31
    406a:	30 0d       	add	r19, r0
    406c:	30 0d       	add	r19, r0
    406e:	11 24       	eor	r1, r1
    4070:	89 01       	movw	r16, r18
    4072:	22 27       	eor	r18, r18
    4074:	17 fd       	sbrc	r17, 7
    4076:	20 95       	com	r18
    4078:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    407a:	60 0f       	add	r22, r16
    407c:	71 1f       	adc	r23, r17
    407e:	82 1f       	adc	r24, r18
    4080:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    4082:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <__floatunsisf>
    4086:	4b 01       	movw	r8, r22
    4088:	5c 01       	movw	r10, r24
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	34 ef       	ldi	r19, 0xF4	; 244
    408e:	48 e3       	ldi	r20, 0x38	; 56
    4090:	56 e4       	ldi	r21, 0x46	; 70
    4092:	0e 94 96 41 	call	0x832c	; 0x832c <__gesf2>
    4096:	18 16       	cp	r1, r24
    4098:	0c f0       	brlt	.+2      	; 0x409c <imu_update+0x23a>
    409a:	6f c0       	rjmp	.+222    	; 0x417a <imu_update+0x318>
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	38 e4       	ldi	r19, 0x48	; 72
    40a0:	49 ea       	ldi	r20, 0xA9	; 169
    40a2:	56 e4       	ldi	r21, 0x46	; 70
    40a4:	c5 01       	movw	r24, r10
    40a6:	b4 01       	movw	r22, r8
    40a8:	0e 94 47 40 	call	0x808e	; 0x808e <__cmpsf2>
    40ac:	87 ff       	sbrs	r24, 7
    40ae:	65 c0       	rjmp	.+202    	; 0x417a <imu_update+0x318>
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e0       	ldi	r20, 0x00	; 0
    40b6:	5f e3       	ldi	r21, 0x3F	; 63
    40b8:	60 91 00 05 	lds	r22, 0x0500
    40bc:	70 91 01 05 	lds	r23, 0x0501
    40c0:	80 91 02 05 	lds	r24, 0x0502
    40c4:	90 91 03 05 	lds	r25, 0x0503
    40c8:	0e 94 96 41 	call	0x832c	; 0x832c <__gesf2>
    40cc:	18 16       	cp	r1, r24
    40ce:	0c f0       	brlt	.+2      	; 0x40d2 <imu_update+0x270>
    40d0:	54 c0       	rjmp	.+168    	; 0x417a <imu_update+0x318>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    40d2:	80 91 81 06 	lds	r24, 0x0681
    40d6:	6b e0       	ldi	r22, 0x0B	; 11
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	68 1b       	sub	r22, r24
    40dc:	71 09       	sbc	r23, r1
    40de:	87 fd       	sbrc	r24, 7
    40e0:	73 95       	inc	r23
    40e2:	88 27       	eor	r24, r24
    40e4:	77 fd       	sbrc	r23, 7
    40e6:	80 95       	com	r24
    40e8:	98 2f       	mov	r25, r24
    40ea:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
    40ee:	4b 01       	movw	r8, r22
    40f0:	5c 01       	movw	r10, r24
    40f2:	2d 81       	ldd	r18, Y+5	; 0x05
    40f4:	3e 81       	ldd	r19, Y+6	; 0x06
    40f6:	4f 81       	ldd	r20, Y+7	; 0x07
    40f8:	58 85       	ldd	r21, Y+8	; 0x08
    40fa:	60 91 b6 05 	lds	r22, 0x05B6
    40fe:	70 91 b7 05 	lds	r23, 0x05B7
    4102:	80 91 b8 05 	lds	r24, 0x05B8
    4106:	90 91 b9 05 	lds	r25, 0x05B9
    410a:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    410e:	a5 01       	movw	r20, r10
    4110:	94 01       	movw	r18, r8
    4112:	0e 94 4b 40 	call	0x8096	; 0x8096 <__divsf3>
    4116:	9b 01       	movw	r18, r22
    4118:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    411a:	c3 01       	movw	r24, r6
    411c:	b2 01       	movw	r22, r4
    411e:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__addsf3>
    4122:	60 93 9e 05 	sts	0x059E, r22
    4126:	70 93 9f 05 	sts	0x059F, r23
    412a:	80 93 a0 05 	sts	0x05A0, r24
    412e:	90 93 a1 05 	sts	0x05A1, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    4132:	29 85       	ldd	r18, Y+9	; 0x09
    4134:	3a 85       	ldd	r19, Y+10	; 0x0a
    4136:	4b 85       	ldd	r20, Y+11	; 0x0b
    4138:	5c 85       	ldd	r21, Y+12	; 0x0c
    413a:	60 91 8e 05 	lds	r22, 0x058E
    413e:	70 91 8f 05 	lds	r23, 0x058F
    4142:	80 91 90 05 	lds	r24, 0x0590
    4146:	90 91 91 05 	lds	r25, 0x0591
    414a:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__subsf3>
    414e:	a5 01       	movw	r20, r10
    4150:	94 01       	movw	r18, r8
    4152:	0e 94 4b 40 	call	0x8096	; 0x8096 <__divsf3>
    4156:	9b 01       	movw	r18, r22
    4158:	ac 01       	movw	r20, r24
    415a:	69 83       	std	Y+1, r22	; 0x01
    415c:	7a 83       	std	Y+2, r23	; 0x02
    415e:	8b 83       	std	Y+3, r24	; 0x03
    4160:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    4162:	c7 01       	movw	r24, r14
    4164:	b6 01       	movw	r22, r12
    4166:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__addsf3>
    416a:	60 93 9a 05 	sts	0x059A, r22
    416e:	70 93 9b 05 	sts	0x059B, r23
    4172:	80 93 9c 05 	sts	0x059C, r24
    4176:	90 93 9d 05 	sts	0x059D, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    417a:	6d 85       	ldd	r22, Y+13	; 0x0d
    417c:	7e 85       	ldd	r23, Y+14	; 0x0e
    417e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4180:	98 89       	ldd	r25, Y+16	; 0x10
    4182:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <Rotate3dVector>
	ExtractEulerAngles();
    4186:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	48 ec       	ldi	r20, 0xC8	; 200
    4190:	52 ec       	ldi	r21, 0xC2	; 194
    4192:	60 91 b6 05 	lds	r22, 0x05B6
    4196:	70 91 b7 05 	lds	r23, 0x05B7
    419a:	80 91 b8 05 	lds	r24, 0x05B8
    419e:	90 91 b9 05 	lds	r25, 0x05B9
    41a2:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    41a6:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    41aa:	70 93 a3 05 	sts	0x05A3, r23
    41ae:	60 93 a2 05 	sts	0x05A2, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	48 ec       	ldi	r20, 0xC8	; 200
    41b8:	52 ec       	ldi	r21, 0xC2	; 194
    41ba:	60 91 8e 05 	lds	r22, 0x058E
    41be:	70 91 8f 05 	lds	r23, 0x058F
    41c2:	80 91 90 05 	lds	r24, 0x0590
    41c6:	90 91 91 05 	lds	r25, 0x0591
    41ca:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
    41ce:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    41d2:	70 93 a5 05 	sts	0x05A5, r23
    41d6:	60 93 a4 05 	sts	0x05A4, r22
}
    41da:	60 96       	adiw	r28, 0x10	; 16
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	f8 94       	cli
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	cd bf       	out	0x3d, r28	; 61
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	ff 90       	pop	r15
    41f0:	ef 90       	pop	r14
    41f2:	df 90       	pop	r13
    41f4:	cf 90       	pop	r12
    41f6:	bf 90       	pop	r11
    41f8:	af 90       	pop	r10
    41fa:	9f 90       	pop	r9
    41fc:	8f 90       	pop	r8
    41fe:	7f 90       	pop	r7
    4200:	6f 90       	pop	r6
    4202:	5f 90       	pop	r5
    4204:	4f 90       	pop	r4
    4206:	08 95       	ret

00004208 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    4208:	10 92 22 05 	sts	0x0522, r1
    420c:	10 92 23 05 	sts	0x0523, r1
    4210:	10 92 24 05 	sts	0x0524, r1
    4214:	10 92 25 05 	sts	0x0525, r1
	VectorY = 0;
    4218:	10 92 1e 05 	sts	0x051E, r1
    421c:	10 92 1f 05 	sts	0x051F, r1
    4220:	10 92 20 05 	sts	0x0520, r1
    4224:	10 92 21 05 	sts	0x0521, r1
	VectorZ = 1;
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	a0 e8       	ldi	r26, 0x80	; 128
    422e:	bf e3       	ldi	r27, 0x3F	; 63
    4230:	80 93 00 05 	sts	0x0500, r24
    4234:	90 93 01 05 	sts	0x0501, r25
    4238:	a0 93 02 05 	sts	0x0502, r26
    423c:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    4240:	10 92 ba 05 	sts	0x05BA, r1
    4244:	10 92 bb 05 	sts	0x05BB, r1
    4248:	10 92 bc 05 	sts	0x05BC, r1
    424c:	10 92 bd 05 	sts	0x05BD, r1
	VectorB = 0;
    4250:	10 92 be 05 	sts	0x05BE, r1
    4254:	10 92 bf 05 	sts	0x05BF, r1
    4258:	10 92 c0 05 	sts	0x05C0, r1
    425c:	10 92 c1 05 	sts	0x05C1, r1
	EulerAngleRoll = 0;
    4260:	10 92 b6 05 	sts	0x05B6, r1
    4264:	10 92 b7 05 	sts	0x05B7, r1
    4268:	10 92 b8 05 	sts	0x05B8, r1
    426c:	10 92 b9 05 	sts	0x05B9, r1
	EulerAnglePitch = 0;
    4270:	10 92 8e 05 	sts	0x058E, r1
    4274:	10 92 8f 05 	sts	0x058F, r1
    4278:	10 92 90 05 	sts	0x0590, r1
    427c:	10 92 91 05 	sts	0x0591, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    4280:	10 92 85 07 	sts	0x0785, r1
    4284:	10 92 84 07 	sts	0x0784, r1
	TCNT1 = 0;			// TCNT1 current time
    4288:	10 92 85 00 	sts	0x0085, r1
    428c:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    4290:	10 92 18 05 	sts	0x0518, r1
    4294:	10 92 17 05 	sts	0x0517, r1
    4298:	08 95       	ret

0000429a <init>:
{
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x00;		// Port A - All inputs
    429a:	11 b8       	out	0x01, r1	; 1
	DDRB		= 0x0A;		// Port B - Buzzer and LED1 are outputs
    429c:	8a e0       	ldi	r24, 0x0A	; 10
    429e:	84 b9       	out	0x04, r24	; 4
	DDRC		= 0x00;		// Port C - All inputs
    42a0:	17 b8       	out	0x07, r1	; 7
	DDRD		= 0xF2;		// Port D - SI, SCL, /CSI, /RES and A0 outputs 
    42a2:	82 ef       	ldi	r24, 0xF2	; 242
    42a4:	8a b9       	out	0x0a, r24	; 10
							//			THR, AIL and ELE are inputs

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    42a6:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    42a8:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    42aa:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    42ac:	85 ef       	ldi	r24, 0xF5	; 245
    42ae:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    42b0:	8c e0       	ldi	r24, 0x0C	; 12
    42b2:	89 b9       	out	0x09, r24	; 9
	// 5 low pulses: DSM2 2048/11ms
	// 7 low pulses: DSMX 1024/22ms
	// 9 low pulses: DSMX 2048/11ms
	//***********************************************************

	PIND	= 0x0C;			// Release RX pull up on PD0
    42b4:	89 b9       	out	0x09, r24	; 9
    42b6:	2f e5       	ldi	r18, 0x5F	; 95
    42b8:	88 ed       	ldi	r24, 0xD8	; 216
    42ba:	93 e0       	ldi	r25, 0x03	; 3
    42bc:	21 50       	subi	r18, 0x01	; 1
    42be:	80 40       	sbci	r24, 0x00	; 0
    42c0:	90 40       	sbci	r25, 0x00	; 0
    42c2:	e1 f7       	brne	.-8      	; 0x42bc <init+0x22>
    42c4:	00 c0       	rjmp	.+0      	; 0x42c6 <init+0x2c>
    42c6:	00 00       	nop
							// Tweak until bind pulses about 68ms after power-up		
		
	// Bind as master if any single button pressed.
	// NB: Have to wait until the button pull-ups rise before testing for a button press.
	// Button 1
	if ((PINB & 0xf0) == 0x70)
    42c8:	83 b1       	in	r24, 0x03	; 3
    42ca:	80 7f       	andi	r24, 0xF0	; 240
    42cc:	80 37       	cpi	r24, 0x70	; 112
    42ce:	29 f4       	brne	.+10     	; 0x42da <init+0x40>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    42d0:	83 ef       	ldi	r24, 0xF3	; 243
    42d2:	8a b9       	out	0x0a, r24	; 10
		bind_master(3);
    42d4:	83 e0       	ldi	r24, 0x03	; 3
    42d6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
		
	}
	// Button 2	
	if ((PINB & 0xf0) == 0xb0)
    42da:	83 b1       	in	r24, 0x03	; 3
    42dc:	80 7f       	andi	r24, 0xF0	; 240
    42de:	80 3b       	cpi	r24, 0xB0	; 176
    42e0:	29 f4       	brne	.+10     	; 0x42ec <init+0x52>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    42e2:	83 ef       	ldi	r24, 0xF3	; 243
    42e4:	8a b9       	out	0x0a, r24	; 10
		bind_master(5);
    42e6:	85 e0       	ldi	r24, 0x05	; 5
    42e8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
	}
	// Button 3	
	if ((PINB & 0xf0) == 0xd0)
    42ec:	83 b1       	in	r24, 0x03	; 3
    42ee:	80 7f       	andi	r24, 0xF0	; 240
    42f0:	80 3d       	cpi	r24, 0xD0	; 208
    42f2:	29 f4       	brne	.+10     	; 0x42fe <init+0x64>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    42f4:	83 ef       	ldi	r24, 0xF3	; 243
    42f6:	8a b9       	out	0x0a, r24	; 10
		bind_master(7);
    42f8:	87 e0       	ldi	r24, 0x07	; 7
    42fa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
	}
	
	// Button 4
	if ((PINB & 0xf0) == 0xE0)
    42fe:	83 b1       	in	r24, 0x03	; 3
    4300:	80 7f       	andi	r24, 0xF0	; 240
    4302:	80 3e       	cpi	r24, 0xE0	; 224
    4304:	29 f4       	brne	.+10     	; 0x4310 <init+0x76>
	{
		DDRD	= 0xF3;		// Switch PD0 to output
    4306:	83 ef       	ldi	r24, 0xF3	; 243
    4308:	8a b9       	out	0x0a, r24	; 10
		bind_master(9);
    430a:	89 e0       	ldi	r24, 0x09	; 9
    430c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <bind_master>
	}
	
	DDRD	= 0xF2;			// Reset Port D directions
    4310:	82 ef       	ldi	r24, 0xF2	; 242
    4312:	8a b9       	out	0x0a, r24	; 10
	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    4314:	8d e0       	ldi	r24, 0x0D	; 13
    4316:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    4318:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    431a:	85 e0       	ldi	r24, 0x05	; 5
    431c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    431e:	80 91 6e 00 	lds	r24, 0x006E
    4322:	81 60       	ori	r24, 0x01	; 1
    4324:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    4328:	16 bc       	out	0x26, r1	; 38

	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    432a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    432e:	80 91 81 00 	lds	r24, 0x0081
    4332:	82 60       	ori	r24, 0x02	; 2
    4334:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    4338:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    433c:	87 e0       	ldi	r24, 0x07	; 7
    433e:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    4342:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    4346:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    4348:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT3 (Throttle)
	PCICR  = 0x08;							// PCINT24 to PCINT31 (PCINT3 group - THR (PCINT24))
    434c:	98 e0       	ldi	r25, 0x08	; 8
    434e:	90 93 68 00 	sts	0x0068, r25
	PCIFR  = 0x0F;							// Clear PCIF0 to PCIF3 interrupt flags 
    4352:	9f e0       	ldi	r25, 0x0F	; 15
    4354:	9b bb       	out	0x1b, r25	; 27

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder) - Disabled by EIMSK
	EICRA = 0x15;							// Any change INT0 (Elevator)
    4356:	95 e1       	ldi	r25, 0x15	; 21
    4358:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1 (Aileron)
											// Any change INT2 (Rudder/CPPM)
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    435c:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;	
    435e:	10 92 6a 07 	sts	0x076A, r1
	Flight_flags = 0;					
    4362:	10 92 1c 05 	sts	0x051C, r1
	Flight_flags |= (1 << FirstTimeFlightMode);
    4366:	80 91 1c 05 	lds	r24, 0x051C
    436a:	80 68       	ori	r24, 0x80	; 128
    436c:	80 93 1c 05 	sts	0x051C, r24
	int_count = 0;
    4370:	10 92 59 07 	sts	0x0759, r1
	//***********************************************************
	// GLCD initialisation
	//***********************************************************
	
	// Initialise the GLCD
	st7565_init();
    4374:	0e 94 84 18 	call	0x3108	; 0x3108 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    4378:	0e 94 de 18 	call	0x31bc	; 0x31bc <clear_screen>
    437c:	2f e7       	ldi	r18, 0x7F	; 127
    437e:	8f e4       	ldi	r24, 0x4F	; 79
    4380:	92 e1       	ldi	r25, 0x12	; 18
    4382:	21 50       	subi	r18, 0x01	; 1
    4384:	80 40       	sbci	r24, 0x00	; 0
    4386:	90 40       	sbci	r25, 0x00	; 0
    4388:	e1 f7       	brne	.-8      	; 0x4382 <init+0xe8>
    438a:	00 c0       	rjmp	.+0      	; 0x438c <init+0xf2>
    438c:	00 00       	nop
	
	//***********************************************************
	// Load or reset EEPROM settings
	//***********************************************************
	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    438e:	83 b1       	in	r24, 0x03	; 3
    4390:	80 7f       	andi	r24, 0xF0	; 240
    4392:	80 39       	cpi	r24, 0x90	; 144
    4394:	51 f5       	brne	.+84     	; 0x43ea <init+0x150>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4396:	80 ec       	ldi	r24, 0xC0	; 192
    4398:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
		clear_buffer(buffer);
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	91 e0       	ldi	r25, 0x01	; 1
    43a0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25);
    43a4:	29 e1       	ldi	r18, 0x19	; 25
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	48 e2       	ldi	r20, 0x28	; 40
    43aa:	50 e0       	ldi	r21, 0x00	; 0
    43ac:	60 e7       	ldi	r22, 0x70	; 112
    43ae:	71 e0       	ldi	r23, 0x01	; 1
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		write_buffer(buffer);
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	91 e0       	ldi	r25, 0x01	; 1
    43ba:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
		clear_buffer(buffer);
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	91 e0       	ldi	r25, 0x01	; 1
    43c2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>

		Set_EEPROM_Default_Config();
    43c6:	0e 94 41 14 	call	0x2882	; 0x2882 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    43ca:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
		
		// Now set contrast to the previously saved value
		st7565_set_brightness((uint8_t)Config.Contrast);
    43ce:	80 91 7e 06 	lds	r24, 0x067E
    43d2:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <st7565_set_brightness>
    43d6:	2f e7       	ldi	r18, 0x7F	; 127
    43d8:	84 e8       	ldi	r24, 0x84	; 132
    43da:	9e e1       	ldi	r25, 0x1E	; 30
    43dc:	21 50       	subi	r18, 0x01	; 1
    43de:	80 40       	sbci	r24, 0x00	; 0
    43e0:	90 40       	sbci	r25, 0x00	; 0
    43e2:	e1 f7       	brne	.-8      	; 0x43dc <init+0x142>
    43e4:	00 c0       	rjmp	.+0      	; 0x43e6 <init+0x14c>
    43e6:	00 00       	nop
    43e8:	02 c0       	rjmp	.+4      	; 0x43ee <init+0x154>
		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}
	// Load "Config" global data structure
	else
	{
		Initial_EEPROM_Config_Load();
    43ea:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Initial_EEPROM_Config_Load>
	}		

	// Now set contrast to the previously saved value
	st7565_set_brightness((uint8_t)Config.Contrast);
    43ee:	80 91 7e 06 	lds	r24, 0x067E
    43f2:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <st7565_set_brightness>

#ifdef KK21
	// Write logo from buffer
	write_buffer(buffer);
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	91 e0       	ldi	r25, 0x01	; 1
    43fa:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
    43fe:	2f e7       	ldi	r18, 0x7F	; 127
    4400:	84 e8       	ldi	r24, 0x84	; 132
    4402:	9e e1       	ldi	r25, 0x1E	; 30
    4404:	21 50       	subi	r18, 0x01	; 1
    4406:	80 40       	sbci	r24, 0x00	; 0
    4408:	90 40       	sbci	r25, 0x00	; 0
    440a:	e1 f7       	brne	.-8      	; 0x4404 <init+0x16a>
    440c:	00 c0       	rjmp	.+0      	; 0x440e <init+0x174>
    440e:	00 00       	nop
	_delay_ms(500);
#endif

	clear_buffer(buffer);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	91 e0       	ldi	r25, 0x01	; 1
    4414:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
	write_buffer(buffer);
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	91 e0       	ldi	r25, 0x01	; 1
    441c:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    4420:	0e 94 84 18 	call	0x3108	; 0x3108 <st7565_init>
	//***********************************************************
	// i2c init for KK2.1
	//***********************************************************	

#ifdef KK21
	i2c_init();
    4424:	0e 94 60 3b 	call	0x76c0	; 0x76c0 <i2c_init>
	init_i2c_gyros();
    4428:	0e 94 a2 1c 	call	0x3944	; 0x3944 <init_i2c_gyros>
	init_i2c_accs();
    442c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	91 e0       	ldi	r25, 0x01	; 1
    4434:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4438:	80 ec       	ldi	r24, 0xC0	; 192
    443a:	0e 94 75 18 	call	0x30ea	; 0x30ea <st7565_command>
	LCD_Display_Text(2,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    443e:	29 e1       	ldi	r18, 0x19	; 25
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	42 e1       	ldi	r20, 0x12	; 18
    4444:	50 e0       	ldi	r21, 0x00	; 0
    4446:	60 e7       	ldi	r22, 0x70	; 112
    4448:	71 e0       	ldi	r23, 0x01	; 1
    444a:	82 e0       	ldi	r24, 0x02	; 2
    444c:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	write_buffer(buffer);
    4450:	80 e0       	ldi	r24, 0x00	; 0
    4452:	91 e0       	ldi	r25, 0x01	; 1
    4454:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
	clear_buffer(buffer);
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	91 e0       	ldi	r25, 0x01	; 1
    445c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    4460:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    4464:	0e 94 28 28 	call	0x5050	; 0x5050 <init_int>
	init_uart();							// Initialise UART	
    4468:	0e 94 45 3c 	call	0x788a	; 0x788a <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    446c:	0e 94 c3 1b 	call	0x3786	; 0x3786 <CalibrateGyrosSlow>
    4470:	81 11       	cpse	r24, r1
    4472:	27 c0       	rjmp	.+78     	; 0x44c2 <init+0x228>
	{
		clear_buffer(buffer);
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	91 e0       	ldi	r25, 0x01	; 1
    4478:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    447c:	29 e1       	ldi	r18, 0x19	; 25
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	49 e1       	ldi	r20, 0x19	; 25
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	60 e7       	ldi	r22, 0x70	; 112
    4486:	71 e0       	ldi	r23, 0x01	; 1
    4488:	8d e3       	ldi	r24, 0x3D	; 61
    448a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		write_buffer(buffer);
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	91 e0       	ldi	r25, 0x01	; 1
    4492:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
    4496:	2f ef       	ldi	r18, 0xFF	; 255
    4498:	88 e0       	ldi	r24, 0x08	; 8
    449a:	9d e3       	ldi	r25, 0x3D	; 61
    449c:	21 50       	subi	r18, 0x01	; 1
    449e:	80 40       	sbci	r24, 0x00	; 0
    44a0:	90 40       	sbci	r25, 0x00	; 0
    44a2:	e1 f7       	brne	.-8      	; 0x449c <init+0x202>
    44a4:	00 c0       	rjmp	.+0      	; 0x44a6 <init+0x20c>
    44a6:	00 00       	nop
		_delay_ms(1000);
	
		// Reset
		cli();
    44a8:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    44aa:	28 e0       	ldi	r18, 0x08	; 8
    44ac:	88 e1       	ldi	r24, 0x18	; 24
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	a8 95       	wdr
    44b6:	80 93 60 00 	sts	0x0060, r24
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	20 93 60 00 	sts	0x0060, r18
    44c0:	ff cf       	rjmp	.-2      	; 0x44c0 <init+0x226>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    44c2:	0e 94 c3 3f 	call	0x7f86	; 0x7f86 <GetVbat>
    44c6:	90 93 27 05 	sts	0x0527, r25
    44ca:	80 93 26 05 	sts	0x0526, r24
	UpdateLimits();							// Update travel and trigger limits
    44ce:	0e 94 22 31 	call	0x6244	; 0x6244 <UpdateLimits>

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    44d2:	80 91 6a 07 	lds	r24, 0x076A
    44d6:	88 23       	and	r24, r24
    44d8:	69 f0       	breq	.+26     	; 0x44f4 <init+0x25a>
	{
		RxGetChannels();
    44da:	0e 94 b2 39 	call	0x7364	; 0x7364 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    44de:	80 91 cd 07 	lds	r24, 0x07CD
    44e2:	90 91 ce 07 	lds	r25, 0x07CE
    44e6:	c3 97       	sbiw	r24, 0x33	; 51
    44e8:	2c f0       	brlt	.+10     	; 0x44f4 <init+0x25a>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    44ea:	80 91 1d 05 	lds	r24, 0x051D
    44ee:	82 60       	ori	r24, 0x02	; 2
    44f0:	80 93 1d 05 	sts	0x051D, r24
		}
	}
	
	// Reset IMU
	reset_IMU();
    44f4:	0e 94 04 21 	call	0x4208	; 0x4208 <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    44f8:	29 9a       	sbi	0x05, 1	; 5
    44fa:	2f e9       	ldi	r18, 0x9F	; 159
    44fc:	86 e8       	ldi	r24, 0x86	; 134
    44fe:	91 e0       	ldi	r25, 0x01	; 1
    4500:	21 50       	subi	r18, 0x01	; 1
    4502:	80 40       	sbci	r24, 0x00	; 0
    4504:	90 40       	sbci	r25, 0x00	; 0
    4506:	e1 f7       	brne	.-8      	; 0x4500 <init+0x266>
    4508:	00 c0       	rjmp	.+0      	; 0x450a <init+0x270>
    450a:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    450c:	29 98       	cbi	0x05, 1	; 5
    450e:	08 95       	ret

00004510 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    4510:	1f 92       	push	r1
    4512:	0f 92       	push	r0
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	0f 92       	push	r0
    4518:	11 24       	eor	r1, r1
    451a:	8f 93       	push	r24
    451c:	9f 93       	push	r25
	TMR0_counter++;
    451e:	80 91 84 07 	lds	r24, 0x0784
    4522:	90 91 85 07 	lds	r25, 0x0785
    4526:	01 96       	adiw	r24, 0x01	; 1
    4528:	90 93 85 07 	sts	0x0785, r25
    452c:	80 93 84 07 	sts	0x0784, r24
}
    4530:	9f 91       	pop	r25
    4532:	8f 91       	pop	r24
    4534:	0f 90       	pop	r0
    4536:	0f be       	out	0x3f, r0	; 63
    4538:	0f 90       	pop	r0
    453a:	1f 90       	pop	r1
    453c:	18 95       	reti

0000453e <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    453e:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    4540:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    4542:	80 91 84 00 	lds	r24, 0x0084
    4546:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    454a:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    454c:	08 95       	ret

0000454e <__vector_7>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(PCINT3_vect)
{
    454e:	1f 92       	push	r1
    4550:	0f 92       	push	r0
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	0f 92       	push	r0
    4556:	11 24       	eor	r1, r1
    4558:	2f 93       	push	r18
    455a:	3f 93       	push	r19
    455c:	4f 93       	push	r20
    455e:	5f 93       	push	r21
    4560:	6f 93       	push	r22
    4562:	7f 93       	push	r23
    4564:	8f 93       	push	r24
    4566:	9f 93       	push	r25
    4568:	af 93       	push	r26
    456a:	bf 93       	push	r27
    456c:	ef 93       	push	r30
    456e:	ff 93       	push	r31
	// minimum inter-channel pulse is 300us. This suits "27ms" FrSky
	// CPPM receivers.
	//************************************************************

	// Only respond to negative-going interrupts
	if (CPPM) return;
    4570:	48 99       	sbic	0x09, 0	; 9
    4572:	d7 c0       	rjmp	.+430    	; 0x4722 <__vector_7+0x1d4>

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    4574:	0e 94 9f 22 	call	0x453e	; 0x453e <TIM16_ReadTCNT1>
		
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	if (Save_TCNT1 < PPMSyncStart)
    4578:	20 91 a0 07 	lds	r18, 0x07A0
    457c:	30 91 a1 07 	lds	r19, 0x07A1
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    4580:	20 91 a0 07 	lds	r18, 0x07A0
    4584:	30 91 a1 07 	lds	r19, 0x07A1
    4588:	ac 01       	movw	r20, r24
    458a:	42 1b       	sub	r20, r18
    458c:	53 0b       	sbc	r21, r19
    458e:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet if gap between serial data has been more than 1.0ms
	if (CurrentPeriod > SYNCPULSEWIDTH) // 2.7ms
    4590:	2f 35       	cpi	r18, 0x5F	; 95
    4592:	5a e1       	ldi	r21, 0x1A	; 26
    4594:	35 07       	cpc	r19, r21
    4596:	08 f4       	brcc	.+2      	; 0x459a <__vector_7+0x4c>
    4598:	43 c0       	rjmp	.+134    	; 0x4620 <__vector_7+0xd2>
	{
		if (int_count < MININTCOUNT)
    459a:	20 91 59 07 	lds	r18, 0x0759
    459e:	2a 30       	cpi	r18, 0x0A	; 10
    45a0:	30 f4       	brcc	.+12     	; 0x45ae <__vector_7+0x60>
		{
			// increment the serial interrupt counter
			int_count++;
    45a2:	20 91 59 07 	lds	r18, 0x0759
    45a6:	2f 5f       	subi	r18, 0xFF	; 255
    45a8:	20 93 59 07 	sts	0x0759, r18
    45ac:	05 c0       	rjmp	.+10     	; 0x45b8 <__vector_7+0x6a>
		}
		// Flag that a valid number of serial interrupts has occurred.
		else
		{
			// Set RxStarted flag
			Flight_flags |= (1 << RxStarted);
    45ae:	20 91 1c 05 	lds	r18, 0x051C
    45b2:	20 64       	ori	r18, 0x40	; 64
    45b4:	20 93 1c 05 	sts	0x051C, r18
		}

		// FramePeriod only needs calculation before Rx has officially started
		if (!(Flight_flags & (1 << RxStarted)))
    45b8:	20 91 1c 05 	lds	r18, 0x051C
    45bc:	26 fd       	sbrc	r18, 6
    45be:	29 c0       	rjmp	.+82     	; 0x4612 <__vector_7+0xc4>
		{
			// Measure period from last FrameStart
			if (Save_TCNT1 < FrameStart)
    45c0:	20 91 80 07 	lds	r18, 0x0780
    45c4:	30 91 81 07 	lds	r19, 0x0781
    45c8:	82 17       	cp	r24, r18
    45ca:	93 07       	cpc	r25, r19
    45cc:	88 f4       	brcc	.+34     	; 0x45f0 <__vector_7+0xa2>
			{
				FramePeriod = (65536 - FrameStart + Save_TCNT1);
    45ce:	20 91 80 07 	lds	r18, 0x0780
    45d2:	30 91 81 07 	lds	r19, 0x0781
    45d6:	40 e0       	ldi	r20, 0x00	; 0
    45d8:	50 e0       	ldi	r21, 0x00	; 0
    45da:	61 e0       	ldi	r22, 0x01	; 1
    45dc:	70 e0       	ldi	r23, 0x00	; 0
    45de:	42 1b       	sub	r20, r18
    45e0:	53 0b       	sbc	r21, r19
    45e2:	61 09       	sbc	r22, r1
    45e4:	71 09       	sbc	r23, r1
    45e6:	48 0f       	add	r20, r24
    45e8:	59 1f       	adc	r21, r25
    45ea:	61 1d       	adc	r22, r1
    45ec:	71 1d       	adc	r23, r1
    45ee:	09 c0       	rjmp	.+18     	; 0x4602 <__vector_7+0xb4>
			}
			else
			{
				FramePeriod = (Save_TCNT1 - FrameStart);
    45f0:	20 91 80 07 	lds	r18, 0x0780
    45f4:	30 91 81 07 	lds	r19, 0x0781
    45f8:	ac 01       	movw	r20, r24
    45fa:	42 1b       	sub	r20, r18
    45fc:	53 0b       	sbc	r21, r19
    45fe:	60 e0       	ldi	r22, 0x00	; 0
    4600:	70 e0       	ldi	r23, 0x00	; 0
    4602:	40 93 99 07 	sts	0x0799, r20
    4606:	50 93 9a 07 	sts	0x079A, r21
    460a:	60 93 9b 07 	sts	0x079B, r22
    460e:	70 93 9c 07 	sts	0x079C, r23
			}
		}
			
		// Reset channel counter
		ch_num = 0;
    4612:	10 92 9f 07 	sts	0x079F, r1
			
		// Save the timestamp for the start of data so that
		// we can do a proper full frame rate measurement
		FrameStart = Save_TCNT1;
    4616:	90 93 81 07 	sts	0x0781, r25
    461a:	80 93 80 07 	sts	0x0780, r24
    461e:	05 c0       	rjmp	.+10     	; 0x462a <__vector_7+0xdc>
	}
	
	// Check for pulses smaller than 300us and reset if so
	else if (CurrentPeriod < MINPULSEWIDTH)
    4620:	2e 3e       	cpi	r18, 0xEE	; 238
    4622:	32 40       	sbci	r19, 0x02	; 2
    4624:	10 f4       	brcc	.+4      	; 0x462a <__vector_7+0xdc>
	{
		// Reset channel counter
		ch_num = 0;
    4626:	10 92 9f 07 	sts	0x079F, r1
	}
	
	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    462a:	90 93 a1 07 	sts	0x07A1, r25
    462e:	80 93 a0 07 	sts	0x07A0, r24

	// Get the channel number of the current channel in the requested channel order
    curChannel = Config.ChannelOrder[ch_num];
    4632:	e0 91 9f 07 	lds	r30, 0x079F
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	ee 53       	subi	r30, 0x3E	; 62
    463a:	fa 4f       	sbci	r31, 0xFA	; 250
    463c:	e1 81       	ldd	r30, Z+1	; 0x01

	// Set up previous channel number based on the requested channel order
	if (ch_num > 0)
    463e:	20 91 9f 07 	lds	r18, 0x079F
    4642:	22 23       	and	r18, r18
    4644:	39 f0       	breq	.+14     	; 0x4654 <__vector_7+0x106>
	{
		prevChannel = Config.ChannelOrder[ch_num-1];
    4646:	a0 91 9f 07 	lds	r26, 0x079F
    464a:	b0 e0       	ldi	r27, 0x00	; 0
    464c:	ae 53       	subi	r26, 0x3E	; 62
    464e:	ba 4f       	sbci	r27, 0xFA	; 250
    4650:	2c 91       	ld	r18, X
    4652:	01 c0       	rjmp	.+2      	; 0x4656 <__vector_7+0x108>
	}
	else
	{
		prevChannel = 0;
    4654:	20 e0       	ldi	r18, 0x00	; 0
	}

	// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
	// Prevent code from over-running RxChannelStart[]
    if (ch_num < MAX_CPPM_CHANNELS)
    4656:	30 91 9f 07 	lds	r19, 0x079F
    465a:	38 30       	cpi	r19, 0x08	; 8
    465c:	38 f4       	brcc	.+14     	; 0x466c <__vector_7+0x11e>
	{
        RxChannelStart[curChannel] = Save_TCNT1;
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	ee 0f       	add	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	e9 57       	subi	r30, 0x79	; 121
    4666:	f8 4f       	sbci	r31, 0xF8	; 248
    4668:	91 83       	std	Z+1, r25	; 0x01
    466a:	80 83       	st	Z, r24
	}

	// When ch_num = 0, the first channel has not yet been measured.
	// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
    if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    466c:	30 91 9f 07 	lds	r19, 0x079F
    4670:	33 23       	and	r19, r19
    4672:	99 f0       	breq	.+38     	; 0x469a <__vector_7+0x14c>
    4674:	30 91 9f 07 	lds	r19, 0x079F
    4678:	39 30       	cpi	r19, 0x09	; 9
    467a:	78 f4       	brcc	.+30     	; 0x469a <__vector_7+0x14c>
    {
		RxChannel[prevChannel] = Save_TCNT1 - RxChannelStart[prevChannel];
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	22 0f       	add	r18, r18
    4680:	33 1f       	adc	r19, r19
    4682:	f9 01       	movw	r30, r18
    4684:	e9 57       	subi	r30, 0x79	; 121
    4686:	f8 4f       	sbci	r31, 0xF8	; 248
    4688:	40 81       	ld	r20, Z
    468a:	51 81       	ldd	r21, Z+1	; 0x01
    468c:	84 1b       	sub	r24, r20
    468e:	95 0b       	sbc	r25, r21
    4690:	f9 01       	movw	r30, r18
    4692:	e6 5a       	subi	r30, 0xA6	; 166
    4694:	f8 4f       	sbci	r31, 0xF8	; 248
    4696:	91 83       	std	Z+1, r25	; 0x01
    4698:	80 83       	st	Z, r24
	}

    // Increment to the next channel
	ch_num++;
    469a:	80 91 9f 07 	lds	r24, 0x079F
    469e:	8f 5f       	subi	r24, 0xFF	; 255
    46a0:	80 93 9f 07 	sts	0x079F, r24

	// Work out the highest channel number automatically.
	// Update the maximum channel seen so far, but only while not officially started
	if ((ch_num > max_chan) && !(Flight_flags & (1 << RxStarted)))
    46a4:	90 91 9f 07 	lds	r25, 0x079F
    46a8:	80 91 7b 07 	lds	r24, 0x077B
    46ac:	89 17       	cp	r24, r25
    46ae:	48 f4       	brcc	.+18     	; 0x46c2 <__vector_7+0x174>
    46b0:	80 91 1c 05 	lds	r24, 0x051C
    46b4:	86 fd       	sbrc	r24, 6
    46b6:	05 c0       	rjmp	.+10     	; 0x46c2 <__vector_7+0x174>
	{
		max_chan = ch_num;					// Update max channel number
    46b8:	80 91 9f 07 	lds	r24, 0x079F
    46bc:	80 93 7b 07 	sts	0x077B, r24
    46c0:	30 c0       	rjmp	.+96     	; 0x4722 <__vector_7+0x1d4>
	}
	// If the current channel is the highest channel, CPPM is complete
	else if (ch_num == max_chan)
    46c2:	90 91 9f 07 	lds	r25, 0x079F
    46c6:	80 91 7b 07 	lds	r24, 0x077B
    46ca:	98 13       	cpse	r25, r24
    46cc:	2a c0       	rjmp	.+84     	; 0x4722 <__vector_7+0x1d4>
	{
		// RC sync established
		Interrupted = true;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	80 93 6a 07 	sts	0x076A, r24
					
		// Reset frame timers
		FrameDrop_Output_Rate = 0;
    46d4:	10 92 12 05 	sts	0x0512, r1
    46d8:	10 92 13 05 	sts	0x0513, r1
    46dc:	10 92 14 05 	sts	0x0514, r1
    46e0:	10 92 15 05 	sts	0x0515, r1
		Failsafe_Output_Rate = 0;
    46e4:	10 92 0e 05 	sts	0x050E, r1
    46e8:	10 92 0f 05 	sts	0x050F, r1
    46ec:	10 92 10 05 	sts	0x0510, r1
    46f0:	10 92 11 05 	sts	0x0511, r1
		RC_Timeout = 0;					// Reset 500ms failsafe timeout
    46f4:	10 92 0d 05 	sts	0x050D, r1
    46f8:	10 92 0c 05 	sts	0x050C, r1
					
		// Flag end-of-failsafe if we were in failsafe.
		// Also, clear failsafe.
		if (Flight_flags & (1 << FailsafeFlag))
    46fc:	80 91 1c 05 	lds	r24, 0x051C
    4700:	82 ff       	sbrs	r24, 2
    4702:	0a c0       	rjmp	.+20     	; 0x4718 <__vector_7+0x1ca>
		{
			Alarm_flags |= (1 << FAILSAFE_ENDED);
    4704:	80 91 1b 05 	lds	r24, 0x051B
    4708:	80 62       	ori	r24, 0x20	; 32
    470a:	80 93 1b 05 	sts	0x051B, r24
			Flight_flags &= ~(1 << FailsafeFlag);
    470e:	80 91 1c 05 	lds	r24, 0x051C
    4712:	8b 7f       	andi	r24, 0xFB	; 251
    4714:	80 93 1c 05 	sts	0x051C, r24
		}
					
		Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    4718:	80 91 1c 05 	lds	r24, 0x051C
    471c:	8f 7d       	andi	r24, 0xDF	; 223
    471e:	80 93 1c 05 	sts	0x051C, r24
	}
} // ISR(INT2_vect)
    4722:	ff 91       	pop	r31
    4724:	ef 91       	pop	r30
    4726:	bf 91       	pop	r27
    4728:	af 91       	pop	r26
    472a:	9f 91       	pop	r25
    472c:	8f 91       	pop	r24
    472e:	7f 91       	pop	r23
    4730:	6f 91       	pop	r22
    4732:	5f 91       	pop	r21
    4734:	4f 91       	pop	r20
    4736:	3f 91       	pop	r19
    4738:	2f 91       	pop	r18
    473a:	0f 90       	pop	r0
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	0f 90       	pop	r0
    4740:	1f 90       	pop	r1
    4742:	18 95       	reti

00004744 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    4744:	1f 92       	push	r1
    4746:	0f 92       	push	r0
    4748:	0f b6       	in	r0, 0x3f	; 63
    474a:	0f 92       	push	r0
    474c:	11 24       	eor	r1, r1
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	2f 93       	push	r18
    4754:	3f 93       	push	r19
    4756:	4f 93       	push	r20
    4758:	5f 93       	push	r21
    475a:	6f 93       	push	r22
    475c:	7f 93       	push	r23
    475e:	8f 93       	push	r24
    4760:	9f 93       	push	r25
    4762:	af 93       	push	r26
    4764:	bf 93       	push	r27
    4766:	cf 93       	push	r28
    4768:	df 93       	push	r29
    476a:	ef 93       	push	r30
    476c:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read error flags first
	temp =  UCSR0A;
    476e:	80 91 c0 00 	lds	r24, 0x00C0

	// Check Framing error, Parity error bits
	if (temp & ((1<<FE0)|(1<<UPE0)))
    4772:	98 2f       	mov	r25, r24
    4774:	94 71       	andi	r25, 0x14	; 20
    4776:	21 f4       	brne	.+8      	; 0x4780 <__vector_20+0x3c>
		// Read byte to remove from buffer
		temp = UDR0;
	}

	// Check all for Data overrun
	else if (temp & (1<<DOR0))
    4778:	83 ff       	sbrs	r24, 3
    477a:	05 c0       	rjmp	.+10     	; 0x4786 <__vector_20+0x42>
	{
		// Read byte to remove from buffer
		temp = UDR0;
    477c:	80 91 c6 00 	lds	r24, 0x00C6
		// Read byte to remove from buffer
		temp = UDR0;				
    4780:	80 91 c6 00 	lds	r24, 0x00C6
    4784:	50 c4       	rjmp	.+2208   	; 0x5026 <__vector_20+0x8e2>

	// Valid data
	else
	{
		// Read byte first
		temp = UDR0;
    4786:	c0 91 c6 00 	lds	r28, 0x00C6
			
		// Save current time stamp
		Save_TCNT1 = TIM16_ReadTCNT1();
    478a:	0e 94 9f 22 	call	0x453e	; 0x453e <TIM16_ReadTCNT1>
	
		// Work out frame rate properly
		// Note that CurrentPeriod cannot be larger than 26.2ms
		if (Save_TCNT1 < PPMSyncStart)
    478e:	20 91 a0 07 	lds	r18, 0x07A0
    4792:	30 91 a1 07 	lds	r19, 0x07A1
		{
			CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
		}
		else
		{
			CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    4796:	20 91 a0 07 	lds	r18, 0x07A0
    479a:	30 91 a1 07 	lds	r19, 0x07A1
    479e:	ac 01       	movw	r20, r24
    47a0:	42 1b       	sub	r20, r18
    47a2:	53 0b       	sbc	r21, r19
		}

		// Handle start of new packet if gap between serial data has been more than 1.0ms
		if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    47a4:	45 3c       	cpi	r20, 0xC5	; 197
    47a6:	59 40       	sbci	r21, 0x09	; 9
    47a8:	08 f4       	brcc	.+2      	; 0x47ac <__vector_20+0x68>
    47aa:	4f c0       	rjmp	.+158    	; 0x484a <__vector_20+0x106>
		{
			if (int_count < MININTCOUNT)
    47ac:	20 91 59 07 	lds	r18, 0x0759
    47b0:	2a 30       	cpi	r18, 0x0A	; 10
    47b2:	30 f4       	brcc	.+12     	; 0x47c0 <__vector_20+0x7c>
			{
				// increment the serial interrupt counter
				int_count++;		
    47b4:	20 91 59 07 	lds	r18, 0x0759
    47b8:	2f 5f       	subi	r18, 0xFF	; 255
    47ba:	20 93 59 07 	sts	0x0759, r18
    47be:	05 c0       	rjmp	.+10     	; 0x47ca <__vector_20+0x86>
			}
			// Flag that a valid number of serial interrupts has occurred.
			else
			{
				// Set RxStarted flag
				Flight_flags |= (1 << RxStarted);
    47c0:	20 91 1c 05 	lds	r18, 0x051C
    47c4:	20 64       	ori	r18, 0x40	; 64
    47c6:	20 93 1c 05 	sts	0x051C, r18
			}

			// FramePeriod only needs calculation before Rx has officially started
			if (!(Flight_flags & (1 << RxStarted)))
    47ca:	20 91 1c 05 	lds	r18, 0x051C
    47ce:	26 fd       	sbrc	r18, 6
    47d0:	2a c0       	rjmp	.+84     	; 0x4826 <__vector_20+0xe2>
			{
				// Measure period from last FrameStart
				if (Save_TCNT1 < FrameStart)
    47d2:	20 91 80 07 	lds	r18, 0x0780
    47d6:	30 91 81 07 	lds	r19, 0x0781
    47da:	82 17       	cp	r24, r18
    47dc:	93 07       	cpc	r25, r19
    47de:	88 f4       	brcc	.+34     	; 0x4802 <__vector_20+0xbe>
				{
					FramePeriod = (65536 - FrameStart + Save_TCNT1);
    47e0:	20 91 80 07 	lds	r18, 0x0780
    47e4:	30 91 81 07 	lds	r19, 0x0781
    47e8:	40 e0       	ldi	r20, 0x00	; 0
    47ea:	50 e0       	ldi	r21, 0x00	; 0
    47ec:	61 e0       	ldi	r22, 0x01	; 1
    47ee:	70 e0       	ldi	r23, 0x00	; 0
    47f0:	42 1b       	sub	r20, r18
    47f2:	53 0b       	sbc	r21, r19
    47f4:	61 09       	sbc	r22, r1
    47f6:	71 09       	sbc	r23, r1
    47f8:	48 0f       	add	r20, r24
    47fa:	59 1f       	adc	r21, r25
    47fc:	61 1d       	adc	r22, r1
    47fe:	71 1d       	adc	r23, r1
    4800:	0a c0       	rjmp	.+20     	; 0x4816 <__vector_20+0xd2>
				}
				else
				{
					FramePeriod = (Save_TCNT1 - FrameStart);
    4802:	40 91 80 07 	lds	r20, 0x0780
    4806:	50 91 81 07 	lds	r21, 0x0781
    480a:	dc 01       	movw	r26, r24
    480c:	a4 1b       	sub	r26, r20
    480e:	b5 0b       	sbc	r27, r21
    4810:	ad 01       	movw	r20, r26
    4812:	60 e0       	ldi	r22, 0x00	; 0
    4814:	70 e0       	ldi	r23, 0x00	; 0
    4816:	40 93 99 07 	sts	0x0799, r20
    481a:	50 93 9a 07 	sts	0x079A, r21
    481e:	60 93 9b 07 	sts	0x079B, r22
    4822:	70 93 9c 07 	sts	0x079C, r23
				}
			}
			
			// Reset variables
			rcindex = 0;
    4826:	10 92 58 07 	sts	0x0758, r1
			bytecount = 0;
    482a:	10 92 7e 07 	sts	0x077E, r1
			ch_num = 0;
    482e:	10 92 9f 07 	sts	0x079F, r1
			checksum = 0;
    4832:	10 92 a5 07 	sts	0x07A5, r1
    4836:	10 92 a4 07 	sts	0x07A4, r1
			chanmask16 = 0;
    483a:	10 92 98 07 	sts	0x0798, r1
    483e:	10 92 97 07 	sts	0x0797, r1
		
			// Save the timestamp for the start of data so that
			// we can do a proper full frame rate measurement
			FrameStart = Save_TCNT1;
    4842:	90 93 81 07 	sts	0x0781, r25
    4846:	80 93 80 07 	sts	0x0780, r24
		}

		// Timestamp this interrupt
		PPMSyncStart = Save_TCNT1;
    484a:	90 93 a1 07 	sts	0x07A1, r25
    484e:	80 93 a0 07 	sts	0x07A0, r24
	
		// Put received byte in buffer if space available
		if (rcindex < SBUFFER_SIZE)
    4852:	80 91 58 07 	lds	r24, 0x0758
    4856:	86 32       	cpi	r24, 0x26	; 38
    4858:	50 f4       	brcc	.+20     	; 0x486e <__vector_20+0x12a>
		{
			sBuffer[rcindex++] = temp;		
    485a:	e0 91 58 07 	lds	r30, 0x0758
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	8e 0f       	add	r24, r30
    4862:	80 93 58 07 	sts	0x0758, r24
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	eb 5b       	subi	r30, 0xBB	; 187
    486a:	fa 4f       	sbci	r31, 0xFA	; 250
    486c:	c0 83       	st	Z, r28
		//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
		//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
		//*
		//************************************************************

		if (Config.RxModeIn == XTREME)
    486e:	80 91 0b 06 	lds	r24, 0x060B
    4872:	83 30       	cpi	r24, 0x03	; 3
    4874:	09 f0       	breq	.+2      	; 0x4878 <__vector_20+0x134>
    4876:	70 c1       	rjmp	.+736    	; 0x4b58 <__vector_20+0x414>
		{
			// Look at flag byte to see if the data is ok
			if (bytecount == 0)
    4878:	80 91 7e 07 	lds	r24, 0x077E
    487c:	81 11       	cpse	r24, r1
    487e:	0f c0       	rjmp	.+30     	; 0x489e <__vector_20+0x15a>
			{
				// Save a copy of the flags for retransmission
				Xtreme_Flags = temp;
    4880:	c0 93 7f 07 	sts	0x077F, r28
			
				// Check top 3 bits for channel bank
				// Trash checksum if not clear
				if (temp & 0xE0)
    4884:	8c 2f       	mov	r24, r28
    4886:	80 7e       	andi	r24, 0xE0	; 224
    4888:	51 f0       	breq	.+20     	; 0x489e <__vector_20+0x15a>
				{
					checksum +=	0x55;
    488a:	80 91 a4 07 	lds	r24, 0x07A4
    488e:	90 91 a5 07 	lds	r25, 0x07A5
    4892:	8b 5a       	subi	r24, 0xAB	; 171
    4894:	9f 4f       	sbci	r25, 0xFF	; 255
    4896:	90 93 a5 07 	sts	0x07A5, r25
    489a:	80 93 a4 07 	sts	0x07A4, r24
				}
			}
	
			// Save RSS byte
			if (bytecount == 1)
    489e:	80 91 7e 07 	lds	r24, 0x077E
    48a2:	81 30       	cpi	r24, 0x01	; 1
    48a4:	11 f4       	brne	.+4      	; 0x48aa <__vector_20+0x166>
			{
				Xtreme_RSS = temp;
    48a6:	c0 93 83 07 	sts	0x0783, r28
			}
		
			// Get MSB of mask byte
			if (bytecount == 2)
    48aa:	80 91 7e 07 	lds	r24, 0x077E
    48ae:	2c 2f       	mov	r18, r28
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	82 30       	cpi	r24, 0x02	; 2
    48b4:	21 f4       	brne	.+8      	; 0x48be <__vector_20+0x17a>
			{
				chanmask16 = temp;
    48b6:	30 93 98 07 	sts	0x0798, r19
    48ba:	20 93 97 07 	sts	0x0797, r18
			}

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
    48be:	80 91 7e 07 	lds	r24, 0x077E
    48c2:	83 30       	cpi	r24, 0x03	; 3
    48c4:	b9 f0       	breq	.+46     	; 0x48f4 <__vector_20+0x1b0>
					temp16 &= (temp16 - 1);
				}
			}

			// Add up checksum up until final packet
			if (bytecount < ((ch_num << 1) + 4))
    48c6:	80 91 9f 07 	lds	r24, 0x079F
    48ca:	40 91 7e 07 	lds	r20, 0x077E
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	88 0f       	add	r24, r24
    48d2:	99 1f       	adc	r25, r25
    48d4:	03 96       	adiw	r24, 0x03	; 3
    48d6:	50 e0       	ldi	r21, 0x00	; 0
    48d8:	84 17       	cp	r24, r20
    48da:	95 07       	cpc	r25, r21
    48dc:	d4 f1       	brlt	.+116    	; 0x4952 <__vector_20+0x20e>
			{
				checksum +=	temp;
    48de:	80 91 a4 07 	lds	r24, 0x07A4
    48e2:	90 91 a5 07 	lds	r25, 0x07A5
    48e6:	82 0f       	add	r24, r18
    48e8:	93 1f       	adc	r25, r19
    48ea:	90 93 a5 07 	sts	0x07A5, r25
    48ee:	80 93 a4 07 	sts	0x07A4, r24
    48f2:	94 c3       	rjmp	.+1832   	; 0x501c <__vector_20+0x8d8>

			// Combine with LSB of mask byte
			// Work out how many channels there are supposed to be
			if (bytecount == 3)
			{
				chanmask16 = chanmask16 << 8;	// Form high byte of mask
    48f4:	80 91 97 07 	lds	r24, 0x0797
    48f8:	90 91 98 07 	lds	r25, 0x0798
    48fc:	98 2f       	mov	r25, r24
    48fe:	88 27       	eor	r24, r24
    4900:	90 93 98 07 	sts	0x0798, r25
    4904:	80 93 97 07 	sts	0x0797, r24
				chanmask16 |= (uint8_t)temp;		// Low byte of Mask
    4908:	80 91 97 07 	lds	r24, 0x0797
    490c:	90 91 98 07 	lds	r25, 0x0798
    4910:	82 2b       	or	r24, r18
    4912:	93 2b       	or	r25, r19
    4914:	90 93 98 07 	sts	0x0798, r25
    4918:	80 93 97 07 	sts	0x0797, r24
			
				temp16 = chanmask16;			// Need to keep a copy of chanmask16 to work of number of channels
    491c:	80 91 97 07 	lds	r24, 0x0797
    4920:	90 91 98 07 	lds	r25, 0x0798
				Xtreme_Chanmask = chanmask16;	// Also need to save as a global for retransmission (uint16)
    4924:	40 91 97 07 	lds	r20, 0x0797
    4928:	50 91 98 07 	lds	r21, 0x0798
    492c:	50 93 7d 07 	sts	0x077D, r21
    4930:	40 93 7c 07 	sts	0x077C, r20

				// Count bits set (number of active channels)	
				// ch_num will contain the number of channels found			 
				for (ch_num = 0; temp16; ch_num++)
    4934:	10 92 9f 07 	sts	0x079F, r1
    4938:	00 97       	sbiw	r24, 0x00	; 0
    493a:	29 f2       	breq	.-118    	; 0x48c6 <__vector_20+0x182>
				{
					temp16 &= (temp16 - 1);
    493c:	ac 01       	movw	r20, r24
    493e:	41 50       	subi	r20, 0x01	; 1
    4940:	51 09       	sbc	r21, r1
    4942:	84 23       	and	r24, r20
    4944:	95 23       	and	r25, r21
				temp16 = chanmask16;			// Need to keep a copy of chanmask16 to work of number of channels
				Xtreme_Chanmask = chanmask16;	// Also need to save as a global for retransmission (uint16)

				// Count bits set (number of active channels)	
				// ch_num will contain the number of channels found			 
				for (ch_num = 0; temp16; ch_num++)
    4946:	40 91 9f 07 	lds	r20, 0x079F
    494a:	4f 5f       	subi	r20, 0xFF	; 255
    494c:	40 93 9f 07 	sts	0x079F, r20
    4950:	f3 cf       	rjmp	.-26     	; 0x4938 <__vector_20+0x1f4>
	
			// Process data when whole packet received
			else
			{
				// Check checksum 
				checksum &= 0xff;
    4952:	80 91 a4 07 	lds	r24, 0x07A4
    4956:	90 91 a5 07 	lds	r25, 0x07A5
    495a:	99 27       	eor	r25, r25
    495c:	90 93 a5 07 	sts	0x07A5, r25
    4960:	80 93 a4 07 	sts	0x07A4, r24

				// Ignore packet if checksum wrong
				if (checksum != temp) // temp holds the transmitted checksum byte
    4964:	80 91 a4 07 	lds	r24, 0x07A4
    4968:	90 91 a5 07 	lds	r25, 0x07A5
    496c:	82 17       	cp	r24, r18
    496e:	93 07       	cpc	r25, r19
    4970:	39 f0       	breq	.+14     	; 0x4980 <__vector_20+0x23c>
				{
					ch_num = 0;
    4972:	10 92 9f 07 	sts	0x079F, r1
					checksum = 0;
    4976:	10 92 a5 07 	sts	0x07A5, r1
    497a:	10 92 a4 07 	sts	0x07A4, r1
    497e:	ed c1       	rjmp	.+986    	; 0x4d5a <__vector_20+0x616>
				}
			
				// Checksum OK
				else
				{
					LED1 = 0;
    4980:	2b 98       	cbi	0x05, 3	; 5
				
					// RC sync established
					Interrupted = true;	
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	80 93 6a 07 	sts	0x076A, r24
			
					// Reset frame timers
					FrameDrop_Output_Rate = 0;
    4988:	10 92 12 05 	sts	0x0512, r1
    498c:	10 92 13 05 	sts	0x0513, r1
    4990:	10 92 14 05 	sts	0x0514, r1
    4994:	10 92 15 05 	sts	0x0515, r1
					Failsafe_Output_Rate = 0;
    4998:	10 92 0e 05 	sts	0x050E, r1
    499c:	10 92 0f 05 	sts	0x050F, r1
    49a0:	10 92 10 05 	sts	0x0510, r1
    49a4:	10 92 11 05 	sts	0x0511, r1
					RC_Timeout = 0;					// Reset 500ms failsafe timeout
    49a8:	10 92 0d 05 	sts	0x050D, r1
    49ac:	10 92 0c 05 	sts	0x050C, r1
					
					// Flag end-of-failsafe if we were in failsafe.
					// Also, clear failsafe.
					if (Flight_flags & (1 << FailsafeFlag))
    49b0:	80 91 1c 05 	lds	r24, 0x051C
    49b4:	82 ff       	sbrs	r24, 2
    49b6:	0a c0       	rjmp	.+20     	; 0x49cc <__vector_20+0x288>
					{
						Alarm_flags |= (1 << FAILSAFE_ENDED);
    49b8:	80 91 1b 05 	lds	r24, 0x051B
    49bc:	80 62       	ori	r24, 0x20	; 32
    49be:	80 93 1b 05 	sts	0x051B, r24
						Flight_flags &= ~(1 << FailsafeFlag);
    49c2:	80 91 1c 05 	lds	r24, 0x051C
    49c6:	8b 7f       	andi	r24, 0xFB	; 251
    49c8:	80 93 1c 05 	sts	0x051C, r24
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    49cc:	80 91 1c 05 	lds	r24, 0x051C
    49d0:	8f 7d       	andi	r24, 0xDF	; 223
    49d2:	80 93 1c 05 	sts	0x051C, r24
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
					
						if (Config.RxModeOut == SPEKTRUM)
    49d6:	c0 91 0c 06 	lds	r28, 0x060C
    49da:	80 e0       	ldi	r24, 0x00	; 0
    49dc:	90 e0       	ldi	r25, 0x00	; 0
						{
							ExtChannel[j] = 0xFFFF;
						}
						else if (Config.RxModeOut == SBUS)
						{
							ExtChannel[j] = 0x400;
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	34 e0       	ldi	r19, 0x04	; 4
					{
						RxChannel[j] = 0;
					
						if (Config.RxModeOut == SPEKTRUM)
						{
							ExtChannel[j] = 0xFFFF;
    49e2:	4f ef       	ldi	r20, 0xFF	; 255
    49e4:	5f ef       	ldi	r21, 0xFF	; 255
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
				
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
    49e6:	fc 01       	movw	r30, r24
    49e8:	ee 0f       	add	r30, r30
    49ea:	ff 1f       	adc	r31, r31
    49ec:	df 01       	movw	r26, r30
    49ee:	a6 5a       	subi	r26, 0xA6	; 166
    49f0:	b8 4f       	sbci	r27, 0xF8	; 248
    49f2:	11 96       	adiw	r26, 0x01	; 1
    49f4:	1c 92       	st	X, r1
    49f6:	1e 92       	st	-X, r1
    49f8:	e5 59       	subi	r30, 0x95	; 149
    49fa:	f8 4f       	sbci	r31, 0xF8	; 248
					
						if (Config.RxModeOut == SPEKTRUM)
    49fc:	c2 30       	cpi	r28, 0x02	; 2
    49fe:	19 f4       	brne	.+6      	; 0x4a06 <__vector_20+0x2c2>
						{
							ExtChannel[j] = 0xFFFF;
    4a00:	51 83       	std	Z+1, r21	; 0x01
    4a02:	40 83       	st	Z, r20
    4a04:	07 c0       	rjmp	.+14     	; 0x4a14 <__vector_20+0x2d0>
						}
						else if (Config.RxModeOut == SBUS)
    4a06:	c1 30       	cpi	r28, 0x01	; 1
    4a08:	19 f4       	brne	.+6      	; 0x4a10 <__vector_20+0x2cc>
						{
							ExtChannel[j] = 0x400;
    4a0a:	31 83       	std	Z+1, r19	; 0x01
    4a0c:	20 83       	st	Z, r18
    4a0e:	02 c0       	rjmp	.+4      	; 0x4a14 <__vector_20+0x2d0>
						}
						else
						{
							ExtChannel[j] = 0;
    4a10:	11 82       	std	Z+1, r1	; 0x01
    4a12:	10 82       	st	Z, r1
    4a14:	01 96       	adiw	r24, 0x01	; 1
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
				
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    4a16:	88 30       	cpi	r24, 0x08	; 8
    4a18:	91 05       	cpc	r25, r1
    4a1a:	29 f7       	brne	.-54     	; 0x49e6 <__vector_20+0x2a2>
    4a1c:	28 ef       	ldi	r18, 0xF8	; 248
    4a1e:	3f ef       	ldi	r19, 0xFF	; 255
    4a20:	d4 e0       	ldi	r29, 0x04	; 4
					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
					{
						// If there is a bit set, allocate channel data for it
						if (chanmask16 & (1 << j))
    4a22:	61 e0       	ldi	r22, 0x01	; 1
    4a24:	70 e0       	ldi	r23, 0x00	; 0
    4a26:	40 91 97 07 	lds	r20, 0x0797
    4a2a:	50 91 98 07 	lds	r21, 0x0798
    4a2e:	d9 01       	movw	r26, r18
    4a30:	18 96       	adiw	r26, 0x08	; 8
    4a32:	cb 01       	movw	r24, r22
    4a34:	0a 2e       	mov	r0, r26
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <__vector_20+0x2f8>
    4a38:	88 0f       	add	r24, r24
    4a3a:	99 1f       	adc	r25, r25
    4a3c:	0a 94       	dec	r0
    4a3e:	e2 f7       	brpl	.-8      	; 0x4a38 <__vector_20+0x2f4>
    4a40:	84 23       	and	r24, r20
    4a42:	95 23       	and	r25, r21
    4a44:	89 2b       	or	r24, r25
    4a46:	09 f4       	brne	.+2      	; 0x4a4a <__vector_20+0x306>
    4a48:	80 c0       	rjmp	.+256    	; 0x4b4a <__vector_20+0x406>
						{
							// Reconstruct word
							temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    4a4a:	ed 2f       	mov	r30, r29
    4a4c:	f0 e0       	ldi	r31, 0x00	; 0
    4a4e:	eb 5b       	subi	r30, 0xBB	; 187
    4a50:	fa 4f       	sbci	r31, 0xFA	; 250
    4a52:	80 81       	ld	r24, Z
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	98 2f       	mov	r25, r24
    4a58:	88 27       	eor	r24, r24
    4a5a:	41 81       	ldd	r20, Z+1	; 0x01
    4a5c:	84 0f       	add	r24, r20
    4a5e:	91 1d       	adc	r25, r1
    4a60:	48 e0       	ldi	r20, 0x08	; 8
    4a62:	42 0f       	add	r20, r18

							// Expand to OpenAero2 units if a valid channel
							if (j < MAX_RC_CHANNELS)
    4a64:	48 30       	cpi	r20, 0x08	; 8
    4a66:	70 f4       	brcc	.+28     	; 0x4a84 <__vector_20+0x340>
								// Convert to system values
								itemp16 = temp16;
								itemp16 -= 1500;							// Remove Xtreme offset (+/-500)		
							
								// Multiply by Xtreme-to-System factor (x2.0)
								itemp16 = (itemp16 << 1);
    4a68:	88 0f       	add	r24, r24
    4a6a:	99 1f       	adc	r25, r25
							
								// Add offset
								itemp16 += 3750;							// Add System offset
    4a6c:	82 51       	subi	r24, 0x12	; 18
    4a6e:	9d 4f       	sbci	r25, 0xFD	; 253
    4a70:	f9 01       	movw	r30, r18
    4a72:	ee 53       	subi	r30, 0x3E	; 62
    4a74:	fa 4f       	sbci	r31, 0xFA	; 250
								temp16 = itemp16;		
																
								RxChannel[Config.ChannelOrder[j]] = temp16;
    4a76:	e1 85       	ldd	r30, Z+9	; 0x09
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	ee 0f       	add	r30, r30
    4a7c:	ff 1f       	adc	r31, r31
    4a7e:	e6 5a       	subi	r30, 0xA6	; 166
    4a80:	f8 4f       	sbci	r31, 0xF8	; 248
    4a82:	5e c0       	rjmp	.+188    	; 0x4b40 <__vector_20+0x3fc>
    4a84:	f9 01       	movw	r30, r18
    4a86:	ee 0f       	add	r30, r30
    4a88:	ff 1f       	adc	r31, r31
						
							// Save any extra channels in extra buffer in the format suitable for retransmission
							else if (j < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
							{
								// Extreme to Satellite
								if (Config.RxModeOut == SPEKTRUM)
    4a8a:	c2 30       	cpi	r28, 0x02	; 2
    4a8c:	b1 f5       	brne	.+108    	; 0x4afa <__vector_20+0x3b6>
								{
									// 11 bit data (1000~2000 -> 0~2047)
									itemp16 = temp16;
									itemp16 -= 1500;							// Remove Xtreme offset (+/-500)
    4a8e:	ac 01       	movw	r20, r24
    4a90:	4c 5d       	subi	r20, 0xDC	; 220
    4a92:	55 40       	sbci	r21, 0x05	; 5
						
									//  867.5/50 = 1.735 (1.7344)
									itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 6);
    4a94:	ca 01       	movw	r24, r20
    4a96:	95 95       	asr	r25
    4a98:	87 95       	ror	r24
    4a9a:	95 95       	asr	r25
    4a9c:	87 95       	ror	r24
    4a9e:	84 0f       	add	r24, r20
    4aa0:	95 1f       	adc	r25, r21
    4aa2:	8a 01       	movw	r16, r20
    4aa4:	15 95       	asr	r17
    4aa6:	07 95       	ror	r16
    4aa8:	15 95       	asr	r17
    4aaa:	07 95       	ror	r16
    4aac:	15 95       	asr	r17
    4aae:	07 95       	ror	r16
    4ab0:	80 0f       	add	r24, r16
    4ab2:	91 1f       	adc	r25, r17
    4ab4:	8a 01       	movw	r16, r20
    4ab6:	68 94       	set
    4ab8:	13 f8       	bld	r1, 3
    4aba:	15 95       	asr	r17
    4abc:	07 95       	ror	r16
    4abe:	16 94       	lsr	r1
    4ac0:	e1 f7       	brne	.-8      	; 0x4aba <__vector_20+0x376>
    4ac2:	80 0f       	add	r24, r16
    4ac4:	91 1f       	adc	r25, r17
    4ac6:	8a 01       	movw	r16, r20
    4ac8:	68 94       	set
    4aca:	14 f8       	bld	r1, 4
    4acc:	15 95       	asr	r17
    4ace:	07 95       	ror	r16
    4ad0:	16 94       	lsr	r1
    4ad2:	e1 f7       	brne	.-8      	; 0x4acc <__vector_20+0x388>
    4ad4:	80 0f       	add	r24, r16
    4ad6:	91 1f       	adc	r25, r17
    4ad8:	16 e0       	ldi	r17, 0x06	; 6
    4ada:	55 95       	asr	r21
    4adc:	47 95       	ror	r20
    4ade:	1a 95       	dec	r17
    4ae0:	e1 f7       	brne	.-8      	; 0x4ada <__vector_20+0x396>
    4ae2:	84 0f       	add	r24, r20
    4ae4:	95 1f       	adc	r25, r21
						
									// Add offset
									itemp16 += 1024;							// Add Satellite offset (+/-1024)
    4ae6:	9c 5f       	subi	r25, 0xFC	; 252
									temp16 = itemp16;
						
									temp16 &= 0x7FF;							// Mask off data bits
    4ae8:	97 70       	andi	r25, 0x07	; 7
									temp16 |= (j << 11);						// Shift channel number up to the correct spot
    4aea:	ba 2f       	mov	r27, r26
    4aec:	aa 27       	eor	r26, r26
    4aee:	bb 0f       	add	r27, r27
    4af0:	bb 0f       	add	r27, r27
    4af2:	bb 0f       	add	r27, r27
    4af4:	8a 2b       	or	r24, r26
    4af6:	9b 2b       	or	r25, r27
    4af8:	21 c0       	rjmp	.+66     	; 0x4b3c <__vector_20+0x3f8>
									// Put back into buffer
									ExtChannel[j - MAX_RC_CHANNELS] = temp16;
								}
							
								// Extreme to S.Bus
								else if (Config.RxModeOut == SBUS)
    4afa:	c1 30       	cpi	r28, 0x01	; 1
    4afc:	f9 f4       	brne	.+62     	; 0x4b3c <__vector_20+0x3f8>
								{
									// 11 bit data (1000~2000 -> 0~2047) 
									itemp16 = temp16;
									itemp16 -= 1500;							// Remove Xtreme offset (+/-500)
    4afe:	ac 01       	movw	r20, r24
    4b00:	4c 5d       	subi	r20, 0xDC	; 220
    4b02:	55 40       	sbci	r21, 0x05	; 5
								
									// 800/500 = 1.6 (1.6016)
									itemp16 = itemp16 + (itemp16 >> 1) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 7);
    4b04:	ca 01       	movw	r24, r20
    4b06:	95 95       	asr	r25
    4b08:	87 95       	ror	r24
    4b0a:	84 0f       	add	r24, r20
    4b0c:	95 1f       	adc	r25, r21
    4b0e:	da 01       	movw	r26, r20
    4b10:	14 e0       	ldi	r17, 0x04	; 4
    4b12:	b5 95       	asr	r27
    4b14:	a7 95       	ror	r26
    4b16:	1a 95       	dec	r17
    4b18:	e1 f7       	brne	.-8      	; 0x4b12 <__vector_20+0x3ce>
    4b1a:	8a 0f       	add	r24, r26
    4b1c:	9b 1f       	adc	r25, r27
    4b1e:	da 01       	movw	r26, r20
    4b20:	05 e0       	ldi	r16, 0x05	; 5
    4b22:	b5 95       	asr	r27
    4b24:	a7 95       	ror	r26
    4b26:	0a 95       	dec	r16
    4b28:	e1 f7       	brne	.-8      	; 0x4b22 <__vector_20+0x3de>
    4b2a:	8a 0f       	add	r24, r26
    4b2c:	9b 1f       	adc	r25, r27
    4b2e:	44 0f       	add	r20, r20
    4b30:	45 2f       	mov	r20, r21
    4b32:	44 1f       	adc	r20, r20
    4b34:	55 0b       	sbc	r21, r21
    4b36:	84 0f       	add	r24, r20
    4b38:	95 1f       	adc	r25, r21
								
									// Add offset
									itemp16 += 1024;							// Add S.Bus offset (+/-1024)
    4b3a:	9c 5f       	subi	r25, 0xFC	; 252
								}
							
								// Xtreme to Xtreme
								else
								{
									ExtChannel[j - MAX_RC_CHANNELS] = temp16;							
    4b3c:	e5 59       	subi	r30, 0x95	; 149
    4b3e:	f8 4f       	sbci	r31, 0xF8	; 248
    4b40:	91 83       	std	Z+1, r25	; 0x01
    4b42:	80 83       	st	Z, r24
								}
							}

							// Within the bounds of the buffer
							if (sindex < SBUFFER_SIZE)
    4b44:	d6 32       	cpi	r29, 0x26	; 38
    4b46:	08 f4       	brcc	.+2      	; 0x4b4a <__vector_20+0x406>
							{
								sindex += 2;
    4b48:	de 5f       	subi	r29, 0xFE	; 254
    4b4a:	2f 5f       	subi	r18, 0xFF	; 255
    4b4c:	3f 4f       	sbci	r19, 0xFF	; 255
					// Set start of channel data per format
					sindex = 4; // Channel data from byte 5

					// Work out which channel the data is intended for from the mask bit position
					// Channels can be anywhere in the lower 16 channels of the Xtreme format
					for (j = 0; j < 16; j++)
    4b4e:	28 30       	cpi	r18, 0x08	; 8
    4b50:	31 05       	cpc	r19, r1
    4b52:	09 f0       	breq	.+2      	; 0x4b56 <__vector_20+0x412>
    4b54:	68 cf       	rjmp	.-304    	; 0x4a26 <__vector_20+0x2e2>
    4b56:	62 c2       	rjmp	.+1220   	; 0x501c <__vector_20+0x8d8>
		//* 1824	= 2020us
		//* 2047 	= 2160us
		//*
		//************************************************************

		else if (Config.RxModeIn == SBUS)
    4b58:	81 30       	cpi	r24, 0x01	; 1
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <__vector_20+0x41a>
    4b5c:	00 c1       	rjmp	.+512    	; 0x4d5e <__vector_20+0x61a>
		{
			// Flag that packet has completed
			// End bytes can be 00, 04, 14, 24, 34 and possibly 08 for FASSTest 12-channel
			//if ((bytecount == 24) && ((temp == 0x00) || (temp == 0x04) || (temp == 0x14) || (temp == 0x24) || (temp == 0x34) || (temp == 0x08)))
			if (bytecount == 24)
    4b5e:	90 91 7e 07 	lds	r25, 0x077E
    4b62:	98 31       	cpi	r25, 0x18	; 24
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <__vector_20+0x424>
    4b66:	5a c2       	rjmp	.+1204   	; 0x501c <__vector_20+0x8d8>
			{
				// Save flags
				SBUS_Flags = sBuffer[23];
    4b68:	90 91 5c 05 	lds	r25, 0x055C
    4b6c:	90 93 44 05 	sts	0x0544, r25
			
				// If frame lost, ignore packet
				if ((sBuffer[23] & 0x20) == 0)
    4b70:	95 fd       	sbrc	r25, 5
    4b72:	f3 c0       	rjmp	.+486    	; 0x4d5a <__vector_20+0x616>
				{
					LED1 = 0;
    4b74:	2b 98       	cbi	0x05, 3	; 5
				
					// RC sync established
					Interrupted = true;
    4b76:	80 93 6a 07 	sts	0x076A, r24
			
					// Reset frame timers
					FrameDrop_Output_Rate = 0;
    4b7a:	10 92 12 05 	sts	0x0512, r1
    4b7e:	10 92 13 05 	sts	0x0513, r1
    4b82:	10 92 14 05 	sts	0x0514, r1
    4b86:	10 92 15 05 	sts	0x0515, r1
					Failsafe_Output_Rate = 0;
    4b8a:	10 92 0e 05 	sts	0x050E, r1
    4b8e:	10 92 0f 05 	sts	0x050F, r1
    4b92:	10 92 10 05 	sts	0x0510, r1
    4b96:	10 92 11 05 	sts	0x0511, r1
					RC_Timeout = 0;					// Reset 500ms failsafe timeout
    4b9a:	10 92 0d 05 	sts	0x050D, r1
    4b9e:	10 92 0c 05 	sts	0x050C, r1
					
					// Flag end-of-failsafe if we were in failsafe.
					// Also, clear failsafe.
					if (Flight_flags & (1 << FailsafeFlag))
    4ba2:	80 91 1c 05 	lds	r24, 0x051C
    4ba6:	82 ff       	sbrs	r24, 2
    4ba8:	0a c0       	rjmp	.+20     	; 0x4bbe <__vector_20+0x47a>
					{
						Alarm_flags |= (1 << FAILSAFE_ENDED);
    4baa:	80 91 1b 05 	lds	r24, 0x051B
    4bae:	80 62       	ori	r24, 0x20	; 32
    4bb0:	80 93 1b 05 	sts	0x051B, r24
						Flight_flags &= ~(1 << FailsafeFlag);
    4bb4:	80 91 1c 05 	lds	r24, 0x051C
    4bb8:	8b 7f       	andi	r24, 0xFB	; 251
    4bba:	80 93 1c 05 	sts	0x051C, r24
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    4bbe:	80 91 1c 05 	lds	r24, 0x051C
    4bc2:	8f 7d       	andi	r24, 0xDF	; 223
    4bc4:	80 93 1c 05 	sts	0x051C, r24
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	90 e0       	ldi	r25, 0x00	; 0
					
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						RxChannel[j] = 0;
    4bcc:	9c 01       	movw	r18, r24
    4bce:	22 0f       	add	r18, r18
    4bd0:	33 1f       	adc	r19, r19
    4bd2:	f9 01       	movw	r30, r18
    4bd4:	e6 5a       	subi	r30, 0xA6	; 166
    4bd6:	f8 4f       	sbci	r31, 0xF8	; 248
    4bd8:	11 82       	std	Z+1, r1	; 0x01
    4bda:	10 82       	st	Z, r1
						ExtChannel[j] = 0;
    4bdc:	f9 01       	movw	r30, r18
    4bde:	e5 59       	subi	r30, 0x95	; 149
    4be0:	f8 4f       	sbci	r31, 0xF8	; 248
    4be2:	11 82       	std	Z+1, r1	; 0x01
    4be4:	10 82       	st	Z, r1
    4be6:	01 96       	adiw	r24, 0x01	; 1
					}
					
					Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
					
					// Clear channel data
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    4be8:	88 30       	cpi	r24, 0x08	; 8
    4bea:	91 05       	cpc	r25, r1
    4bec:	79 f7       	brne	.-34     	; 0x4bcc <__vector_20+0x488>
    4bee:	b0 eb       	ldi	r27, 0xB0	; 176
    4bf0:	70 e0       	ldi	r23, 0x00	; 0
    4bf2:	60 e0       	ldi	r22, 0x00	; 0
    4bf4:	a0 e0       	ldi	r26, 0x00	; 0
    4bf6:	c1 e0       	ldi	r28, 0x01	; 1
								RxChannel[Config.ChannelOrder[chan_shift]] |= (1 << data_mask); // RxChannel is 16 bits							
							}
							// Save any extra channels in extra buffer
							else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
							{
								ExtChannel[chan_shift - MAX_RC_CHANNELS] |= (1 << data_mask);							
    4bf8:	21 e0       	ldi	r18, 0x01	; 1
    4bfa:	30 e0       	ldi	r19, 0x00	; 0

					// Deconstruct S-Bus data
					// 16 channels * 11 bits = 176 bits
					for (j = 0; j < 176; j++)
					{
						if (sBuffer[sindex] & (1 << chan_mask))
    4bfc:	ec 2f       	mov	r30, r28
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	eb 5b       	subi	r30, 0xBB	; 187
    4c02:	fa 4f       	sbci	r31, 0xFA	; 250
    4c04:	80 81       	ld	r24, Z
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	0a 2e       	mov	r0, r26
    4c0a:	02 c0       	rjmp	.+4      	; 0x4c10 <__vector_20+0x4cc>
    4c0c:	95 95       	asr	r25
    4c0e:	87 95       	ror	r24
    4c10:	0a 94       	dec	r0
    4c12:	e2 f7       	brpl	.-8      	; 0x4c0c <__vector_20+0x4c8>
    4c14:	80 ff       	sbrs	r24, 0
    4c16:	2b c0       	rjmp	.+86     	; 0x4c6e <__vector_20+0x52a>
						{
							if (chan_shift < MAX_RC_CHANNELS)
    4c18:	68 30       	cpi	r22, 0x08	; 8
    4c1a:	a0 f4       	brcc	.+40     	; 0x4c44 <__vector_20+0x500>
							{
								// Place the RC data into the correct channel order for the transmitted system
								RxChannel[Config.ChannelOrder[chan_shift]] |= (1 << data_mask); // RxChannel is 16 bits							
    4c1c:	e6 2f       	mov	r30, r22
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	ee 53       	subi	r30, 0x3E	; 62
    4c22:	fa 4f       	sbci	r31, 0xFA	; 250
    4c24:	e1 81       	ldd	r30, Z+1	; 0x01
    4c26:	f0 e0       	ldi	r31, 0x00	; 0
    4c28:	ee 0f       	add	r30, r30
    4c2a:	ff 1f       	adc	r31, r31
    4c2c:	e6 5a       	subi	r30, 0xA6	; 166
    4c2e:	f8 4f       	sbci	r31, 0xF8	; 248
    4c30:	80 81       	ld	r24, Z
    4c32:	91 81       	ldd	r25, Z+1	; 0x01
    4c34:	a9 01       	movw	r20, r18
    4c36:	07 2e       	mov	r0, r23
    4c38:	02 c0       	rjmp	.+4      	; 0x4c3e <__vector_20+0x4fa>
    4c3a:	44 0f       	add	r20, r20
    4c3c:	55 1f       	adc	r21, r21
    4c3e:	0a 94       	dec	r0
    4c40:	e2 f7       	brpl	.-8      	; 0x4c3a <__vector_20+0x4f6>
    4c42:	11 c0       	rjmp	.+34     	; 0x4c66 <__vector_20+0x522>
							}
							// Save any extra channels in extra buffer
							else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
    4c44:	60 31       	cpi	r22, 0x10	; 16
    4c46:	98 f4       	brcc	.+38     	; 0x4c6e <__vector_20+0x52a>
							{
								ExtChannel[chan_shift - MAX_RC_CHANNELS] |= (1 << data_mask);							
    4c48:	e6 2f       	mov	r30, r22
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	ee 0f       	add	r30, r30
    4c4e:	ff 1f       	adc	r31, r31
    4c50:	e5 5a       	subi	r30, 0xA5	; 165
    4c52:	f8 4f       	sbci	r31, 0xF8	; 248
    4c54:	40 81       	ld	r20, Z
    4c56:	51 81       	ldd	r21, Z+1	; 0x01
    4c58:	c9 01       	movw	r24, r18
    4c5a:	07 2e       	mov	r0, r23
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <__vector_20+0x51e>
    4c5e:	88 0f       	add	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	0a 94       	dec	r0
    4c64:	e2 f7       	brpl	.-8      	; 0x4c5e <__vector_20+0x51a>
    4c66:	84 2b       	or	r24, r20
    4c68:	95 2b       	or	r25, r21
    4c6a:	91 83       	std	Z+1, r25	; 0x01
    4c6c:	80 83       	st	Z, r24
							}
						}

						chan_mask++;
    4c6e:	af 5f       	subi	r26, 0xFF	; 255
						data_mask++;
    4c70:	7f 5f       	subi	r23, 0xFF	; 255

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
    4c72:	a8 30       	cpi	r26, 0x08	; 8
    4c74:	11 f4       	brne	.+4      	; 0x4c7a <__vector_20+0x536>
						{
							chan_mask =0;
							sindex++;
    4c76:	cf 5f       	subi	r28, 0xFF	; 255
						data_mask++;

						// If we have done 8 bits, move to next byte in buffer
						if (chan_mask == 8)
						{
							chan_mask =0;
    4c78:	a0 e0       	ldi	r26, 0x00	; 0
							sindex++;
						}

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
    4c7a:	7b 30       	cpi	r23, 0x0B	; 11
    4c7c:	11 f4       	brne	.+4      	; 0x4c82 <__vector_20+0x53e>
						{
							data_mask =0;
							chan_shift++;
    4c7e:	6f 5f       	subi	r22, 0xFF	; 255

						// If we have reconstructed all 11 bits of one channel's data (2047)
						// increment the channel number
						if (data_mask == 11)
						{
							data_mask =0;
    4c80:	70 e0       	ldi	r23, 0x00	; 0
    4c82:	b1 50       	subi	r27, 0x01	; 1
					// Start from second byte
					sindex = 1;

					// Deconstruct S-Bus data
					// 16 channels * 11 bits = 176 bits
					for (j = 0; j < 176; j++)
    4c84:	09 f0       	breq	.+2      	; 0x4c88 <__vector_20+0x544>
    4c86:	ba cf       	rjmp	.-140    	; 0x4bfc <__vector_20+0x4b8>
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0

					// S.Bus to System
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// Subtract Futaba offset
						itemp16 = RxChannel[j] - 1024;	
    4c8c:	fc 01       	movw	r30, r24
    4c8e:	ee 0f       	add	r30, r30
    4c90:	ff 1f       	adc	r31, r31
    4c92:	e6 5a       	subi	r30, 0xA6	; 166
    4c94:	f8 4f       	sbci	r31, 0xF8	; 248
    4c96:	40 81       	ld	r20, Z
    4c98:	51 81       	ldd	r21, Z+1	; 0x01
    4c9a:	54 50       	subi	r21, 0x04	; 4
					
						// Expand into OpenAero2 units x1.25 (1.25)	(1000/800)
						itemp16 = itemp16 + (itemp16 >> 2);
    4c9c:	9a 01       	movw	r18, r20
    4c9e:	35 95       	asr	r19
    4ca0:	27 95       	ror	r18
    4ca2:	35 95       	asr	r19
    4ca4:	27 95       	ror	r18
    4ca6:	24 0f       	add	r18, r20
    4ca8:	35 1f       	adc	r19, r21

						// Add back in OpenAero2 offset
						RxChannel[j] = itemp16 + 3750;				
    4caa:	2a 55       	subi	r18, 0x5A	; 90
    4cac:	31 4f       	sbci	r19, 0xF1	; 241
    4cae:	31 83       	std	Z+1, r19	; 0x01
    4cb0:	20 83       	st	Z, r18
    4cb2:	01 96       	adiw	r24, 0x01	; 1
							chan_shift++;
						}
					}

					// S.Bus to System
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    4cb4:	88 30       	cpi	r24, 0x08	; 8
    4cb6:	91 05       	cpc	r25, r1
    4cb8:	49 f7       	brne	.-46     	; 0x4c8c <__vector_20+0x548>
				
					// Convert Extra channel info to the format suitable for retransmission
					for (j = 0; j < MAX_RC_CHANNELS; j++)
					{
						// S.Bus to Satellite
						if (Config.RxModeOut == SPEKTRUM)
    4cba:	a0 91 0c 06 	lds	r26, 0x060C
    4cbe:	20 e0       	ldi	r18, 0x00	; 0
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	a2 30       	cpi	r26, 0x02	; 2
    4cc4:	59 f5       	brne	.+86     	; 0x4d1c <__vector_20+0x5d8>
						{
							// 11bit (Values = 0 to 2047), same as Satellite
							itemp16 = ExtChannel[j];
    4cc6:	f9 01       	movw	r30, r18
    4cc8:	ee 0f       	add	r30, r30
    4cca:	ff 1f       	adc	r31, r31
    4ccc:	e5 59       	subi	r30, 0x95	; 149
    4cce:	f8 4f       	sbci	r31, 0xF8	; 248
    4cd0:	40 81       	ld	r20, Z
    4cd2:	51 81       	ldd	r21, Z+1	; 0x01
							itemp16 -= 1024;							// Subtract S.Bus offset (+/-1024)
    4cd4:	54 50       	subi	r21, 0x04	; 4
						
							//  1.0844 (1.086) (867.5/800) 
							itemp16 = itemp16 + (itemp16 >> 4) + (itemp16 >> 6) + (itemp16 >> 7);
    4cd6:	ca 01       	movw	r24, r20
    4cd8:	c4 e0       	ldi	r28, 0x04	; 4
    4cda:	95 95       	asr	r25
    4cdc:	87 95       	ror	r24
    4cde:	ca 95       	dec	r28
    4ce0:	e1 f7       	brne	.-8      	; 0x4cda <__vector_20+0x596>
    4ce2:	84 0f       	add	r24, r20
    4ce4:	95 1f       	adc	r25, r21
    4ce6:	ba 01       	movw	r22, r20
    4ce8:	d6 e0       	ldi	r29, 0x06	; 6
    4cea:	75 95       	asr	r23
    4cec:	67 95       	ror	r22
    4cee:	da 95       	dec	r29
    4cf0:	e1 f7       	brne	.-8      	; 0x4cea <__vector_20+0x5a6>
    4cf2:	86 0f       	add	r24, r22
    4cf4:	97 1f       	adc	r25, r23
    4cf6:	44 0f       	add	r20, r20
    4cf8:	45 2f       	mov	r20, r21
    4cfa:	44 1f       	adc	r20, r20
    4cfc:	55 0b       	sbc	r21, r21
    4cfe:	84 0f       	add	r24, r20
    4d00:	95 1f       	adc	r25, r21
						
							// Add offset
							itemp16 += 1024;							// Add Satellite offset (+/-1024)
    4d02:	9c 5f       	subi	r25, 0xFC	; 252
							temp16 = itemp16;
						
							temp16 &= 0x7FF;							// Mask off data bits
    4d04:	97 70       	andi	r25, 0x07	; 7
    4d06:	a9 01       	movw	r20, r18
    4d08:	48 5f       	subi	r20, 0xF8	; 248
    4d0a:	5f 4f       	sbci	r21, 0xFF	; 255
							temp16 |= ((j + MAX_RC_CHANNELS) << 11);	// Shift channel number up to the correct spot
    4d0c:	54 2f       	mov	r21, r20
    4d0e:	44 27       	eor	r20, r20
    4d10:	55 0f       	add	r21, r21
    4d12:	55 0f       	add	r21, r21
    4d14:	55 0f       	add	r21, r21
    4d16:	84 2b       	or	r24, r20
    4d18:	95 2b       	or	r25, r21
    4d1a:	16 c0       	rjmp	.+44     	; 0x4d48 <__vector_20+0x604>
							// Put back into buffer
							ExtChannel[j] = temp16;	
						}
					
						// S.Bus to Xtreme	
						else if (Config.RxModeOut == XTREME)
    4d1c:	a3 30       	cpi	r26, 0x03	; 3
    4d1e:	b1 f4       	brne	.+44     	; 0x4d4c <__vector_20+0x608>
						{
							// 11-bit (0 to 2047) to (1000 to 2000) 
							itemp16 = ExtChannel[j];
    4d20:	f9 01       	movw	r30, r18
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	e5 59       	subi	r30, 0x95	; 149
    4d28:	f8 4f       	sbci	r31, 0xF8	; 248
    4d2a:	40 81       	ld	r20, Z
    4d2c:	51 81       	ldd	r21, Z+1	; 0x01
							itemp16 -= 1024;							// Subtract S.bus offset (+/-1024)
    4d2e:	54 50       	subi	r21, 0x04	; 4
						
							//  0.625 (0.625) (500/800) 
							itemp16 = (itemp16 >> 1) + (itemp16 >> 3);
    4d30:	ca 01       	movw	r24, r20
    4d32:	95 95       	asr	r25
    4d34:	87 95       	ror	r24
    4d36:	73 e0       	ldi	r23, 0x03	; 3
    4d38:	55 95       	asr	r21
    4d3a:	47 95       	ror	r20
    4d3c:	7a 95       	dec	r23
    4d3e:	e1 f7       	brne	.-8      	; 0x4d38 <__vector_20+0x5f4>
    4d40:	84 0f       	add	r24, r20
    4d42:	95 1f       	adc	r25, r21
						
							itemp16 += 1500;							// Add in Xtreme offset (1000~2000)
    4d44:	84 52       	subi	r24, 0x24	; 36
    4d46:	9a 4f       	sbci	r25, 0xFA	; 250
							temp16 = itemp16;
						
							// Put back into buffer
							ExtChannel[j] = temp16;						
    4d48:	91 83       	std	Z+1, r25	; 0x01
    4d4a:	80 83       	st	Z, r24
    4d4c:	2f 5f       	subi	r18, 0xFF	; 255
    4d4e:	3f 4f       	sbci	r19, 0xFF	; 255
						// Add back in OpenAero2 offset
						RxChannel[j] = itemp16 + 3750;				
					}
				
					// Convert Extra channel info to the format suitable for retransmission
					for (j = 0; j < MAX_RC_CHANNELS; j++)
    4d50:	28 30       	cpi	r18, 0x08	; 8
    4d52:	31 05       	cpc	r19, r1
    4d54:	09 f0       	breq	.+2      	; 0x4d58 <__vector_20+0x614>
    4d56:	b5 cf       	rjmp	.-150    	; 0x4cc2 <__vector_20+0x57e>
    4d58:	61 c1       	rjmp	.+706    	; 0x501c <__vector_20+0x8d8>
					}
				 	
				} // Frame lost check
				else
				{
					LED1 = 1;
    4d5a:	2b 9a       	sbi	0x05, 3	; 5
    4d5c:	5f c1       	rjmp	.+702    	; 0x501c <__vector_20+0x8d8>
		//* 2047 	= 2100us
		//*
		//************************************************************

		// Handle Spektrum format
		else if (Config.RxModeIn == SPEKTRUM)
    4d5e:	82 30       	cpi	r24, 0x02	; 2
    4d60:	09 f0       	breq	.+2      	; 0x4d64 <__vector_20+0x620>
    4d62:	5c c1       	rjmp	.+696    	; 0x501c <__vector_20+0x8d8>
		{
			// Process data when all packets received
			if (bytecount == 15)
    4d64:	80 91 7e 07 	lds	r24, 0x077E
    4d68:	8f 30       	cpi	r24, 0x0F	; 15
    4d6a:	09 f0       	breq	.+2      	; 0x4d6e <__vector_20+0x62a>
    4d6c:	57 c1       	rjmp	.+686    	; 0x501c <__vector_20+0x8d8>
			{
				// Just stick the last byte into the buffer manually.
				sBuffer[15] = temp;
    4d6e:	c0 93 54 05 	sts	0x0554, r28

				// Set start of channel data
				sindex = 2; // Channel data from byte 3

				// Work out which frame this is from byte 3
				if (sBuffer[2] & 0x80) 	// 0 for frame 0, 1 for frame 1
    4d72:	80 91 47 05 	lds	r24, 0x0547
    4d76:	87 ff       	sbrs	r24, 7
    4d78:	08 c0       	rjmp	.+16     	; 0x4d8a <__vector_20+0x646>
				{
					Spektrum_frame_in = 1;		// Mark as Frame 1 if bit set
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	80 93 86 07 	sts	0x0786, r24
					Spektrum_Chanmask_1 = 0;	// Clear frame mask 1
    4d80:	10 92 9e 07 	sts	0x079E, r1
    4d84:	10 92 9d 07 	sts	0x079D, r1
    4d88:	06 c0       	rjmp	.+12     	; 0x4d96 <__vector_20+0x652>
				}
				else
				{
					Spektrum_frame_in = 0;
    4d8a:	10 92 86 07 	sts	0x0786, r1
					Spektrum_Chanmask_0 = 0;	// Clear frame mask 0
    4d8e:	10 92 a3 07 	sts	0x07A3, r1
    4d92:	10 92 a2 07 	sts	0x07A2, r1
				}			

				// Compare old with new fame loss data
				if (sBuffer[0] != Spektrum_frameloss)
    4d96:	80 91 82 07 	lds	r24, 0x0782
    4d9a:	90 91 45 05 	lds	r25, 0x0545
    4d9e:	98 17       	cp	r25, r24
    4da0:	11 f0       	breq	.+4      	; 0x4da6 <__vector_20+0x662>
				{
					LED1 = 1;
    4da2:	2b 9a       	sbi	0x05, 3	; 5
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <__vector_20+0x664>
				}
				else
				{
					LED1 = 0;
    4da6:	2b 98       	cbi	0x05, 3	; 5
				}
			
				// Save current frame loss data
				Spektrum_frameloss = sBuffer[0];
    4da8:	80 91 45 05 	lds	r24, 0x0545
    4dac:	80 93 82 07 	sts	0x0782, r24
						
				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    4db0:	80 91 46 05 	lds	r24, 0x0546
    4db4:	84 ff       	sbrs	r24, 4
    4db6:	04 c0       	rjmp	.+8      	; 0x4dc0 <__vector_20+0x67c>
				{
					chan_mask = 0x78;	// 11 bit (2048)
					data_mask = 0x07;
    4db8:	c7 e0       	ldi	r28, 0x07	; 7
					chan_shift = 0x03;
    4dba:	63 e0       	ldi	r22, 0x03	; 3
				Spektrum_frameloss = sBuffer[0];
						
				// Work out if this is 10 or 11 bit data
				if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
				{
					chan_mask = 0x78;	// 11 bit (2048)
    4dbc:	78 e7       	ldi	r23, 0x78	; 120
    4dbe:	03 c0       	rjmp	.+6      	; 0x4dc6 <__vector_20+0x682>
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
					data_mask = 0x03;
    4dc0:	c3 e0       	ldi	r28, 0x03	; 3
					chan_shift = 0x02;
    4dc2:	62 e0       	ldi	r22, 0x02	; 2
					data_mask = 0x07;
					chan_shift = 0x03;
				}
				else
				{
					chan_mask = 0x3C;	// 10 bit (1024)
    4dc4:	7c e3       	ldi	r23, 0x3C	; 60
		
					// Save any extra channels in extra buffer as-is, complete with channel number
					else if (ch_num < MAX_SPEKTRUM_CHANNELS)
					{
						// Satellite to Xtreme
						if (Config.RxModeOut == XTREME)
    4dc6:	d0 91 0c 06 	lds	r29, 0x060C
    4dca:	e8 e4       	ldi	r30, 0x48	; 72
    4dcc:	f5 e0       	ldi	r31, 0x05	; 5
							Spektrum_Chanmask_0 |= (1 << ch_num);					
						}
						else
						{
							// Mark which channels are in frame 1
							Spektrum_Chanmask_1 |= (1 << ch_num);
    4dce:	41 e0       	ldi	r20, 0x01	; 1
    4dd0:	50 e0       	ldi	r21, 0x00	; 0
    4dd2:	df 01       	movw	r26, r30
    4dd4:	11 97       	sbiw	r26, 0x01	; 1
				// Work out which channel the data is intended for from the channel number data.
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
				{
					// Extract channel number
					ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    4dd6:	1c 91       	ld	r17, X
    4dd8:	21 2f       	mov	r18, r17
    4dda:	27 23       	and	r18, r23
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	06 2e       	mov	r0, r22
    4de0:	02 c0       	rjmp	.+4      	; 0x4de6 <__vector_20+0x6a2>
    4de2:	35 95       	asr	r19
    4de4:	27 95       	ror	r18
    4de6:	0a 94       	dec	r0
    4de8:	e2 f7       	brpl	.-8      	; 0x4de2 <__vector_20+0x69e>
    4dea:	20 93 9f 07 	sts	0x079F, r18

					// Reconstruct channel data
					temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    4dee:	20 81       	ld	r18, Z
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	a1 2f       	mov	r26, r17
    4df4:	ac 23       	and	r26, r28
    4df6:	b0 e0       	ldi	r27, 0x00	; 0
    4df8:	9a 2f       	mov	r25, r26
    4dfa:	88 27       	eor	r24, r24
    4dfc:	82 0f       	add	r24, r18
    4dfe:	93 1f       	adc	r25, r19

					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16 (0xFFFF)
					if (ch_num < MAX_RC_CHANNELS)
    4e00:	a0 91 9f 07 	lds	r26, 0x079F
    4e04:	a8 30       	cpi	r26, 0x08	; 8
    4e06:	c8 f5       	brcc	.+114    	; 0x4e7a <__vector_20+0x736>
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
						{
							itemp16 = temp16 - 1024;
    4e08:	9c 01       	movw	r18, r24
					// Expand to OpenAero2 units if a valid channel
					// Blank channels have the channel number of 16 (0xFFFF)
					if (ch_num < MAX_RC_CHANNELS)
					{
						// Subtract Spektrum center offset
						if (chan_shift == 0x03) // 11-bit
    4e0a:	63 30       	cpi	r22, 0x03	; 3
    4e0c:	11 f4       	brne	.+4      	; 0x4e12 <__vector_20+0x6ce>
						{
							itemp16 = temp16 - 1024;
    4e0e:	34 50       	subi	r19, 0x04	; 4
    4e10:	01 c0       	rjmp	.+2      	; 0x4e14 <__vector_20+0x6d0>
						}
						else
						{
							itemp16 = temp16 - 512;	
    4e12:	32 50       	subi	r19, 0x02	; 2
						}					

						// Spektrum to System
						// 1.1527 () (1000/867.5) x2 = 2.30547 (2.3047)
						itemp16 = (itemp16 << 1) + (itemp16 >> 2) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 7); 
    4e14:	c9 01       	movw	r24, r18
    4e16:	88 0f       	add	r24, r24
    4e18:	99 1f       	adc	r25, r25
    4e1a:	d9 01       	movw	r26, r18
    4e1c:	b5 95       	asr	r27
    4e1e:	a7 95       	ror	r26
    4e20:	b5 95       	asr	r27
    4e22:	a7 95       	ror	r26
    4e24:	8a 0f       	add	r24, r26
    4e26:	9b 1f       	adc	r25, r27
    4e28:	d9 01       	movw	r26, r18
    4e2a:	05 e0       	ldi	r16, 0x05	; 5
    4e2c:	b5 95       	asr	r27
    4e2e:	a7 95       	ror	r26
    4e30:	0a 95       	dec	r16
    4e32:	e1 f7       	brne	.-8      	; 0x4e2c <__vector_20+0x6e8>
    4e34:	8a 0f       	add	r24, r26
    4e36:	9b 1f       	adc	r25, r27
    4e38:	d9 01       	movw	r26, r18
    4e3a:	16 e0       	ldi	r17, 0x06	; 6
    4e3c:	b5 95       	asr	r27
    4e3e:	a7 95       	ror	r26
    4e40:	1a 95       	dec	r17
    4e42:	e1 f7       	brne	.-8      	; 0x4e3c <__vector_20+0x6f8>
    4e44:	8a 0f       	add	r24, r26
    4e46:	9b 1f       	adc	r25, r27
    4e48:	22 0f       	add	r18, r18
    4e4a:	23 2f       	mov	r18, r19
    4e4c:	22 1f       	adc	r18, r18
    4e4e:	33 0b       	sbc	r19, r19
    4e50:	82 0f       	add	r24, r18
    4e52:	93 1f       	adc	r25, r19

						if (chan_shift == 0x03) // 11-bit
    4e54:	63 30       	cpi	r22, 0x03	; 3
    4e56:	11 f4       	brne	.+4      	; 0x4e5c <__vector_20+0x718>
						{
							// Divide in case of 11-bit value (therefore x1.466)
							itemp16 = itemp16 >> 1;								
    4e58:	95 95       	asr	r25
    4e5a:	87 95       	ror	r24
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4e5c:	a0 91 9f 07 	lds	r26, 0x079F
    4e60:	b0 e0       	ldi	r27, 0x00	; 0
    4e62:	ae 53       	subi	r26, 0x3E	; 62
    4e64:	ba 4f       	sbci	r27, 0xFA	; 250
    4e66:	11 96       	adiw	r26, 0x01	; 1
    4e68:	ac 91       	ld	r26, X
    4e6a:	b0 e0       	ldi	r27, 0x00	; 0
							// Divide in case of 11-bit value (therefore x1.466)
							itemp16 = itemp16 >> 1;								
						}

						// Add back in OpenAero2 offset
						itemp16 += 3750;										
    4e6c:	8a 55       	subi	r24, 0x5A	; 90
    4e6e:	91 4f       	sbci	r25, 0xF1	; 241

						RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4e70:	aa 0f       	add	r26, r26
    4e72:	bb 1f       	adc	r27, r27
    4e74:	a6 5a       	subi	r26, 0xA6	; 166
    4e76:	b8 4f       	sbci	r27, 0xF8	; 248
    4e78:	61 c0       	rjmp	.+194    	; 0x4f3c <__vector_20+0x7f8>
					}
		
					// Save any extra channels in extra buffer as-is, complete with channel number
					else if (ch_num < MAX_SPEKTRUM_CHANNELS)
    4e7a:	a0 91 9f 07 	lds	r26, 0x079F
    4e7e:	ae 30       	cpi	r26, 0x0E	; 14
    4e80:	08 f0       	brcs	.+2      	; 0x4e84 <__vector_20+0x740>
    4e82:	5f c0       	rjmp	.+190    	; 0x4f42 <__vector_20+0x7fe>
					{
						// Satellite to Xtreme
						if (Config.RxModeOut == XTREME)
    4e84:	d3 30       	cpi	r29, 0x03	; 3
    4e86:	19 f5       	brne	.+70     	; 0x4ece <__vector_20+0x78a>
						{
							// Strip off channel number (0~2047)
							temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
						
							itemp16 = temp16;
							itemp16 -= 1024;							// Subtract Spektrum offset (+/-1024)
    4e88:	9c 01       	movw	r18, r24
    4e8a:	34 50       	subi	r19, 0x04	; 4
						
							// x0.5764 (.5762)	(500/867.5)
							itemp16 = (itemp16 >> 1) + (itemp16 >> 4) + (itemp16 >> 7) + (itemp16 >> 8) + (itemp16 >> 9); 
    4e8c:	c9 01       	movw	r24, r18
    4e8e:	95 95       	asr	r25
    4e90:	87 95       	ror	r24
    4e92:	d9 01       	movw	r26, r18
    4e94:	14 e0       	ldi	r17, 0x04	; 4
    4e96:	b5 95       	asr	r27
    4e98:	a7 95       	ror	r26
    4e9a:	1a 95       	dec	r17
    4e9c:	e1 f7       	brne	.-8      	; 0x4e96 <__vector_20+0x752>
    4e9e:	8a 0f       	add	r24, r26
    4ea0:	9b 1f       	adc	r25, r27
    4ea2:	d9 01       	movw	r26, r18
    4ea4:	aa 0f       	add	r26, r26
    4ea6:	ab 2f       	mov	r26, r27
    4ea8:	aa 1f       	adc	r26, r26
    4eaa:	bb 0b       	sbc	r27, r27
    4eac:	8a 0f       	add	r24, r26
    4eae:	9b 1f       	adc	r25, r27
    4eb0:	a3 2f       	mov	r26, r19
    4eb2:	bb 27       	eor	r27, r27
    4eb4:	a7 fd       	sbrc	r26, 7
    4eb6:	ba 95       	dec	r27
    4eb8:	8a 0f       	add	r24, r26
    4eba:	9b 1f       	adc	r25, r27
    4ebc:	23 2f       	mov	r18, r19
    4ebe:	33 0f       	add	r19, r19
    4ec0:	33 0b       	sbc	r19, r19
    4ec2:	25 95       	asr	r18
    4ec4:	82 0f       	add	r24, r18
    4ec6:	93 1f       	adc	r25, r19
						
							// Add offset
							itemp16 += 1500;							// Add Xtreme offset (1000~2000)
    4ec8:	84 52       	subi	r24, 0x24	; 36
    4eca:	9a 4f       	sbci	r25, 0xFA	; 250
    4ecc:	26 c0       	rjmp	.+76     	; 0x4f1a <__vector_20+0x7d6>
							// Put back into buffer
							ExtChannel[ch_num - MAX_RC_CHANNELS] = temp16;
						}
					
						// Satellite to S.Bus
						else if (Config.RxModeOut == SBUS)
    4ece:	d1 30       	cpi	r29, 0x01	; 1
    4ed0:	41 f5       	brne	.+80     	; 0x4f22 <__vector_20+0x7de>
						{
							// Strip off channel number
							temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];

							itemp16 = temp16;
							itemp16 -= 1024;							// Subtract Spektrum offset (+/-1024)
    4ed2:	9c 01       	movw	r18, r24
    4ed4:	34 50       	subi	r19, 0x04	; 4
						
							// 0.9222 (0.9219) (800/867.5) 
							itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 6);
    4ed6:	c9 01       	movw	r24, r18
    4ed8:	95 95       	asr	r25
    4eda:	87 95       	ror	r24
    4edc:	d9 01       	movw	r26, r18
    4ede:	b5 95       	asr	r27
    4ee0:	a7 95       	ror	r26
    4ee2:	b5 95       	asr	r27
    4ee4:	a7 95       	ror	r26
    4ee6:	8a 0f       	add	r24, r26
    4ee8:	9b 1f       	adc	r25, r27
    4eea:	d9 01       	movw	r26, r18
    4eec:	03 e0       	ldi	r16, 0x03	; 3
    4eee:	b5 95       	asr	r27
    4ef0:	a7 95       	ror	r26
    4ef2:	0a 95       	dec	r16
    4ef4:	e1 f7       	brne	.-8      	; 0x4eee <__vector_20+0x7aa>
    4ef6:	8a 0f       	add	r24, r26
    4ef8:	9b 1f       	adc	r25, r27
    4efa:	d9 01       	movw	r26, r18
    4efc:	14 e0       	ldi	r17, 0x04	; 4
    4efe:	b5 95       	asr	r27
    4f00:	a7 95       	ror	r26
    4f02:	1a 95       	dec	r17
    4f04:	e1 f7       	brne	.-8      	; 0x4efe <__vector_20+0x7ba>
    4f06:	8a 0f       	add	r24, r26
    4f08:	9b 1f       	adc	r25, r27
    4f0a:	06 e0       	ldi	r16, 0x06	; 6
    4f0c:	35 95       	asr	r19
    4f0e:	27 95       	ror	r18
    4f10:	0a 95       	dec	r16
    4f12:	e1 f7       	brne	.-8      	; 0x4f0c <__vector_20+0x7c8>
    4f14:	82 0f       	add	r24, r18
    4f16:	93 1f       	adc	r25, r19
						
							// Add offset
							itemp16 += 1024;							// Add S.Bus offset
    4f18:	9c 5f       	subi	r25, 0xFC	; 252
							temp16 = itemp16;

							// Put back into buffer
							ExtChannel[ch_num - MAX_RC_CHANNELS] = temp16;						
    4f1a:	a0 91 9f 07 	lds	r26, 0x079F
    4f1e:	b0 e0       	ldi	r27, 0x00	; 0
    4f20:	09 c0       	rjmp	.+18     	; 0x4f34 <__vector_20+0x7f0>
						}
					
						// Spektrum to Spektrum
						else
						{
							ExtChannel[ch_num - MAX_RC_CHANNELS] = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];						
    4f22:	a0 91 9f 07 	lds	r26, 0x079F
    4f26:	b0 e0       	ldi	r27, 0x00	; 0
    4f28:	81 2f       	mov	r24, r17
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	98 2f       	mov	r25, r24
    4f2e:	88 27       	eor	r24, r24
    4f30:	82 0f       	add	r24, r18
    4f32:	93 1f       	adc	r25, r19
    4f34:	aa 0f       	add	r26, r26
    4f36:	bb 1f       	adc	r27, r27
    4f38:	a5 5a       	subi	r26, 0xA5	; 165
    4f3a:	b8 4f       	sbci	r27, 0xF8	; 248
    4f3c:	11 96       	adiw	r26, 0x01	; 1
    4f3e:	9c 93       	st	X, r25
    4f40:	8e 93       	st	-X, r24
						}
					}

					// Use the channel masks to count the number of channels in the Spektrum packets for each frame
					// Ignore channels above 14. This inlcudes the dummy filler bytes 0xff, 0xff which read as ch16
					if (ch_num < MAX_SPEKTRUM_CHANNELS)
    4f42:	80 91 9f 07 	lds	r24, 0x079F
    4f46:	8e 30       	cpi	r24, 0x0E	; 14
    4f48:	c8 f5       	brcc	.+114    	; 0x4fbc <__vector_20+0x878>
					{
						if (Spektrum_frame_in == 0)
    4f4a:	80 91 86 07 	lds	r24, 0x0786
    4f4e:	81 11       	cpse	r24, r1
    4f50:	14 c0       	rjmp	.+40     	; 0x4f7a <__vector_20+0x836>
						{
							// Mark which channels are in frame 0
							Spektrum_Chanmask_0 |= (1 << ch_num);					
    4f52:	20 91 a2 07 	lds	r18, 0x07A2
    4f56:	30 91 a3 07 	lds	r19, 0x07A3
    4f5a:	80 91 9f 07 	lds	r24, 0x079F
    4f5e:	da 01       	movw	r26, r20
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <__vector_20+0x822>
    4f62:	aa 0f       	add	r26, r26
    4f64:	bb 1f       	adc	r27, r27
    4f66:	8a 95       	dec	r24
    4f68:	e2 f7       	brpl	.-8      	; 0x4f62 <__vector_20+0x81e>
    4f6a:	cd 01       	movw	r24, r26
    4f6c:	82 2b       	or	r24, r18
    4f6e:	93 2b       	or	r25, r19
    4f70:	90 93 a3 07 	sts	0x07A3, r25
    4f74:	80 93 a2 07 	sts	0x07A2, r24
    4f78:	13 c0       	rjmp	.+38     	; 0x4fa0 <__vector_20+0x85c>
						}
						else
						{
							// Mark which channels are in frame 1
							Spektrum_Chanmask_1 |= (1 << ch_num);
    4f7a:	20 91 9d 07 	lds	r18, 0x079D
    4f7e:	30 91 9e 07 	lds	r19, 0x079E
    4f82:	80 91 9f 07 	lds	r24, 0x079F
    4f86:	da 01       	movw	r26, r20
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <__vector_20+0x84a>
    4f8a:	aa 0f       	add	r26, r26
    4f8c:	bb 1f       	adc	r27, r27
    4f8e:	8a 95       	dec	r24
    4f90:	e2 f7       	brpl	.-8      	; 0x4f8a <__vector_20+0x846>
    4f92:	cd 01       	movw	r24, r26
    4f94:	82 2b       	or	r24, r18
    4f96:	93 2b       	or	r25, r19
    4f98:	90 93 9e 07 	sts	0x079E, r25
    4f9c:	80 93 9d 07 	sts	0x079D, r24
						}

						// OR the two masks to get the sum of all channels in the pair of frames.
						Xtreme_Chanmask = (Spektrum_Chanmask_0 | Spektrum_Chanmask_1);
    4fa0:	20 91 a2 07 	lds	r18, 0x07A2
    4fa4:	30 91 a3 07 	lds	r19, 0x07A3
    4fa8:	80 91 9d 07 	lds	r24, 0x079D
    4fac:	90 91 9e 07 	lds	r25, 0x079E
    4fb0:	82 2b       	or	r24, r18
    4fb2:	93 2b       	or	r25, r19
    4fb4:	90 93 7d 07 	sts	0x077D, r25
    4fb8:	80 93 7c 07 	sts	0x077C, r24
    4fbc:	32 96       	adiw	r30, 0x02	; 2
					chan_shift = 0x02;
				}

				// Work out which channel the data is intended for from the channel number data.
				// Channels can also be in the second packet. Spektrum has 7 channels per packet.
				for (j = 0; j < 7; j++)
    4fbe:	b5 e0       	ldi	r27, 0x05	; 5
    4fc0:	e6 35       	cpi	r30, 0x56	; 86
    4fc2:	fb 07       	cpc	r31, r27
    4fc4:	09 f0       	breq	.+2      	; 0x4fc8 <__vector_20+0x884>
    4fc6:	05 cf       	rjmp	.-502    	; 0x4dd2 <__vector_20+0x68e>
					sindex += 2;

				} // For each pair of bytes
			
				// RC sync established
				Interrupted = true;
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	80 93 6a 07 	sts	0x076A, r24
					
				// Reset frame timers
				FrameDrop_Output_Rate = 0;
    4fce:	10 92 12 05 	sts	0x0512, r1
    4fd2:	10 92 13 05 	sts	0x0513, r1
    4fd6:	10 92 14 05 	sts	0x0514, r1
    4fda:	10 92 15 05 	sts	0x0515, r1
				Failsafe_Output_Rate = 0;
    4fde:	10 92 0e 05 	sts	0x050E, r1
    4fe2:	10 92 0f 05 	sts	0x050F, r1
    4fe6:	10 92 10 05 	sts	0x0510, r1
    4fea:	10 92 11 05 	sts	0x0511, r1
				RC_Timeout = 0;					// Reset 500ms failsafe timeout
    4fee:	10 92 0d 05 	sts	0x050D, r1
    4ff2:	10 92 0c 05 	sts	0x050C, r1
				
				// Flag end-of-failsafe if we were in failsafe.
				// Also, clear failsafe.
				if (Flight_flags & (1 << FailsafeFlag))
    4ff6:	80 91 1c 05 	lds	r24, 0x051C
    4ffa:	82 ff       	sbrs	r24, 2
    4ffc:	0a c0       	rjmp	.+20     	; 0x5012 <__vector_20+0x8ce>
				{
					Alarm_flags |= (1 << FAILSAFE_ENDED);
    4ffe:	80 91 1b 05 	lds	r24, 0x051B
    5002:	80 62       	ori	r24, 0x20	; 32
    5004:	80 93 1b 05 	sts	0x051B, r24
					Flight_flags &= ~(1 << FailsafeFlag);
    5008:	80 91 1c 05 	lds	r24, 0x051C
    500c:	8b 7f       	andi	r24, 0xFB	; 251
    500e:	80 93 1c 05 	sts	0x051C, r24
				}
				
				Flight_flags &= ~(1 << FrameDrop);	// And the frame drop flag
    5012:	80 91 1c 05 	lds	r24, 0x051C
    5016:	8f 7d       	andi	r24, 0xDF	; 223
    5018:	80 93 1c 05 	sts	0x051C, r24
		//************************************************************
		//* Common exit code
		//************************************************************

		// Increment byte count
		bytecount++;
    501c:	80 91 7e 07 	lds	r24, 0x077E
    5020:	8f 5f       	subi	r24, 0xFF	; 255
    5022:	80 93 7e 07 	sts	0x077E, r24
	
	} // Valid data
}
    5026:	ff 91       	pop	r31
    5028:	ef 91       	pop	r30
    502a:	df 91       	pop	r29
    502c:	cf 91       	pop	r28
    502e:	bf 91       	pop	r27
    5030:	af 91       	pop	r26
    5032:	9f 91       	pop	r25
    5034:	8f 91       	pop	r24
    5036:	7f 91       	pop	r23
    5038:	6f 91       	pop	r22
    503a:	5f 91       	pop	r21
    503c:	4f 91       	pop	r20
    503e:	3f 91       	pop	r19
    5040:	2f 91       	pop	r18
    5042:	1f 91       	pop	r17
    5044:	0f 91       	pop	r16
    5046:	0f 90       	pop	r0
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	0f 90       	pop	r0
    504c:	1f 90       	pop	r1
    504e:	18 95       	reti

00005050 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5050:	f8 94       	cli

	// Receiver side	
	switch (Config.RxModeIn)
    5052:	80 91 0b 06 	lds	r24, 0x060B
    5056:	88 23       	and	r24, r24
    5058:	b1 f0       	breq	.+44     	; 0x5086 <init_int+0x36>
    505a:	87 fd       	sbrc	r24, 7
    505c:	28 c0       	rjmp	.+80     	; 0x50ae <init_int+0x5e>
    505e:	84 30       	cpi	r24, 0x04	; 4
    5060:	34 f5       	brge	.+76     	; 0x50ae <init_int+0x5e>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable input interrupts
			PCMSK0 = 0;							// Disable PCINT0-7
    5062:	10 92 6b 00 	sts	0x006B, r1
			PCMSK1 = 0;							// Disable PCINT8-15 (AUX, Rudder)
    5066:	10 92 6c 00 	sts	0x006C, r1
			PCMSK2 = 0;							// Disable PCINT16-23
    506a:	10 92 6d 00 	sts	0x006D, r1
			PCMSK3 = 0;							// Disable PCINT24-31 (THR/CPPM input)
    506e:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5072:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5074:	80 91 c1 00 	lds	r24, 0x00C1
    5078:	80 68       	ori	r24, 0x80	; 128
    507a:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver on UART0
    507e:	80 91 c1 00 	lds	r24, 0x00C1
    5082:	80 61       	ori	r24, 0x10	; 16
    5084:	12 c0       	rjmp	.+36     	; 0x50aa <init_int+0x5a>

	// Receiver side	
	switch (Config.RxModeIn)
	{
		case CPPM_MODE:
			PCMSK0 = 0;							// Disable PCINT0-7
    5086:	10 92 6b 00 	sts	0x006B, r1
			PCMSK1 = 0;							// Disable PCINT8-15 (AUX, Rudder)
    508a:	10 92 6c 00 	sts	0x006C, r1
			PCMSK2 = 0;							// Disable PCINT16-23
    508e:	10 92 6d 00 	sts	0x006D, r1
			PCMSK3 = 1;							// Enable  PCINT24 (THR/CPPM input)
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5098:	1d ba       	out	0x1d, r1	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    509a:	80 91 c1 00 	lds	r24, 0x00C1
    509e:	8f 77       	andi	r24, 0x7F	; 127
    50a0:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    50a4:	80 91 c1 00 	lds	r24, 0x00C1
    50a8:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable PCINT24-31 (THR/CPPM input)
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver on UART0
    50aa:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Transmitter side
	UCSR1B = (1 << TXEN1);						// Enable transmitter on UART1
    50ae:	88 e0       	ldi	r24, 0x08	; 8
    50b0:	80 93 c9 00 	sts	0x00C9, r24

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    50b4:	8f e0       	ldi	r24, 0x0F	; 15
    50b6:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x07; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    50b8:	87 e0       	ldi	r24, 0x07	; 7
    50ba:	8c bb       	out	0x1c, r24	; 28

	sei(); // Re-enable interrupts
    50bc:	78 94       	sei
    50be:	08 95       	ret

000050c0 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    50c0:	81 11       	cpse	r24, r1
    50c2:	23 c0       	rjmp	.+70     	; 0x510a <print_menu_frame+0x4a>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    50c4:	29 e3       	ldi	r18, 0x39	; 57
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	40 e0       	ldi	r20, 0x00	; 0
    50ca:	50 e0       	ldi	r21, 0x00	; 0
    50cc:	66 e0       	ldi	r22, 0x06	; 6
    50ce:	71 e0       	ldi	r23, 0x01	; 1
    50d0:	8c e0       	ldi	r24, 0x0C	; 12
    50d2:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    50d6:	2b e3       	ldi	r18, 0x3B	; 59
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	46 e2       	ldi	r20, 0x26	; 38
    50dc:	50 e0       	ldi	r21, 0x00	; 0
    50de:	66 e0       	ldi	r22, 0x06	; 6
    50e0:	71 e0       	ldi	r23, 0x01	; 1
    50e2:	8a e0       	ldi	r24, 0x0A	; 10
    50e4:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    50e8:	2b e3       	ldi	r18, 0x3B	; 59
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	40 e5       	ldi	r20, 0x50	; 80
    50ee:	50 e0       	ldi	r21, 0x00	; 0
    50f0:	66 e0       	ldi	r22, 0x06	; 6
    50f2:	71 e0       	ldi	r23, 0x01	; 1
    50f4:	89 e0       	ldi	r24, 0x09	; 9
    50f6:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); 	// Right
    50fa:	29 e3       	ldi	r18, 0x39	; 57
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	48 e7       	ldi	r20, 0x78	; 120
    5100:	50 e0       	ldi	r21, 0x00	; 0
    5102:	66 e0       	ldi	r22, 0x06	; 6
    5104:	71 e0       	ldi	r23, 0x01	; 1
    5106:	8b e0       	ldi	r24, 0x0B	; 11
    5108:	22 c0       	rjmp	.+68     	; 0x514e <print_menu_frame+0x8e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    510a:	26 e3       	ldi	r18, 0x36	; 54
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e0       	ldi	r20, 0x00	; 0
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	6e e1       	ldi	r22, 0x1E	; 30
    5114:	7a e0       	ldi	r23, 0x0A	; 10
    5116:	80 e1       	ldi	r24, 0x10	; 16
    5118:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    511c:	2b e3       	ldi	r18, 0x3B	; 59
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	46 e2       	ldi	r20, 0x26	; 38
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	66 e0       	ldi	r22, 0x06	; 6
    5126:	71 e0       	ldi	r23, 0x01	; 1
    5128:	8a e0       	ldi	r24, 0x0A	; 10
    512a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    512e:	2b e3       	ldi	r18, 0x3B	; 59
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	40 e5       	ldi	r20, 0x50	; 80
    5134:	50 e0       	ldi	r21, 0x00	; 0
    5136:	66 e0       	ldi	r22, 0x06	; 6
    5138:	71 e0       	ldi	r23, 0x01	; 1
    513a:	89 e0       	ldi	r24, 0x09	; 9
    513c:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5140:	26 e3       	ldi	r18, 0x36	; 54
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	47 e6       	ldi	r20, 0x67	; 103
    5146:	50 e0       	ldi	r21, 0x00	; 0
    5148:	6e e1       	ldi	r22, 0x1E	; 30
    514a:	7a e0       	ldi	r23, 0x0A	; 10
    514c:	81 e1       	ldi	r24, 0x11	; 17
    514e:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	91 e0       	ldi	r25, 0x01	; 1
    5156:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <write_buffer>

0000515a <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	cd b7       	in	r28, 0x3d	; 61
    5160:	de b7       	in	r29, 0x3e	; 62
    5162:	2a 97       	sbiw	r28, 0x0a	; 10
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	de bf       	out	0x3e, r29	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    516e:	25 e0       	ldi	r18, 0x05	; 5
    5170:	62 9f       	mul	r22, r18
    5172:	80 0d       	add	r24, r0
    5174:	91 1d       	adc	r25, r1
    5176:	11 24       	eor	r1, r1
    5178:	bc 01       	movw	r22, r24
    517a:	45 e0       	ldi	r20, 0x05	; 5
    517c:	50 e0       	ldi	r21, 0x00	; 0
    517e:	ce 01       	movw	r24, r28
    5180:	06 96       	adiw	r24, 0x06	; 6
    5182:	0e 94 9d 42 	call	0x853a	; 0x853a <memcpy_P>
	return (range);
    5186:	85 e0       	ldi	r24, 0x05	; 5
    5188:	fe 01       	movw	r30, r28
    518a:	36 96       	adiw	r30, 0x06	; 6
    518c:	de 01       	movw	r26, r28
    518e:	11 96       	adiw	r26, 0x01	; 1
    5190:	01 90       	ld	r0, Z+
    5192:	0d 92       	st	X+, r0
    5194:	8a 95       	dec	r24
    5196:	e1 f7       	brne	.-8      	; 0x5190 <get_menu_range+0x36>
    5198:	29 81       	ldd	r18, Y+1	; 0x01
    519a:	3a 81       	ldd	r19, Y+2	; 0x02
    519c:	4b 81       	ldd	r20, Y+3	; 0x03
    519e:	5c 81       	ldd	r21, Y+4	; 0x04
    51a0:	6d 81       	ldd	r22, Y+5	; 0x05
}
    51a2:	70 e0       	ldi	r23, 0x00	; 0
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	2a 96       	adiw	r28, 0x0a	; 10
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	f8 94       	cli
    51ae:	de bf       	out	0x3e, r29	; 62
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	cd bf       	out	0x3d, r28	; 61
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	08 95       	ret

000051ba <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
    51ba:	0f 93       	push	r16
    51bc:	1f 93       	push	r17
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	e4 2f       	mov	r30, r20
    51c4:	10 e0       	ldi	r17, 0x00	; 0
    51c6:	c2 2f       	mov	r28, r18
    51c8:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    51ca:	66 23       	and	r22, r22
    51cc:	19 f0       	breq	.+6      	; 0x51d4 <print_menu_text+0x1a>
    51ce:	62 50       	subi	r22, 0x02	; 2
    51d0:	62 30       	cpi	r22, 0x02	; 2
    51d2:	78 f4       	brcc	.+30     	; 0x51f2 <print_menu_text+0x38>
    51d4:	4a e0       	ldi	r20, 0x0A	; 10
    51d6:	6b e6       	ldi	r22, 0x6B	; 107
    51d8:	75 e0       	ldi	r23, 0x05	; 5
    51da:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    51de:	98 01       	movw	r18, r16
    51e0:	ae 01       	movw	r20, r28
    51e2:	6e e1       	ldi	r22, 0x1E	; 30
    51e4:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	1f 91       	pop	r17
    51ec:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    51ee:	0c 94 85 36 	jmp	0x6d0a	; 0x6d0a <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    51f2:	98 01       	movw	r18, r16
    51f4:	ae 01       	movw	r20, r28
    51f6:	6e e1       	ldi	r22, 0x1E	; 30
    51f8:	7a e0       	ldi	r23, 0x0A	; 10
    51fa:	8e 2f       	mov	r24, r30
	}
}
    51fc:	df 91       	pop	r29
    51fe:	cf 91       	pop	r28
    5200:	1f 91       	pop	r17
    5202:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5204:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <LCD_Display_Text>

00005208 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    5208:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    520a:	93 b1       	in	r25, 0x03	; 3
    520c:	90 7f       	andi	r25, 0xF0	; 240
    520e:	90 93 a6 07 	sts	0x07A6, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    5212:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    5214:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    5216:	90 91 a6 07 	lds	r25, 0x07A6
    521a:	90 3f       	cpi	r25, 0xF0	; 240
    521c:	c9 f4       	brne	.+50     	; 0x5250 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    521e:	83 b1       	in	r24, 0x03	; 3
    5220:	80 7f       	andi	r24, 0xF0	; 240
    5222:	e7 ea       	ldi	r30, 0xA7	; 167
    5224:	f1 e6       	ldi	r31, 0x61	; 97
    5226:	31 97       	sbiw	r30, 0x01	; 1
    5228:	f1 f7       	brne	.-4      	; 0x5226 <poll_buttons+0x1e>
    522a:	00 c0       	rjmp	.+0      	; 0x522c <poll_buttons+0x24>
    522c:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    522e:	23 b1       	in	r18, 0x03	; 3
    5230:	48 2f       	mov	r20, r24
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	20 7f       	andi	r18, 0xF0	; 240
    5236:	30 e0       	ldi	r19, 0x00	; 0
    5238:	42 17       	cp	r20, r18
    523a:	53 07       	cpc	r21, r19
    523c:	19 f4       	brne	.+6      	; 0x5244 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    523e:	80 93 a6 07 	sts	0x07A6, r24
    5242:	01 c0       	rjmp	.+2      	; 0x5246 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5244:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5246:	10 92 28 05 	sts	0x0528, r1
		button_multiplier = 1;
    524a:	70 93 a7 07 	sts	0x07A7, r23
    524e:	e3 cf       	rjmp	.-58     	; 0x5216 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5250:	66 23       	and	r22, r22
    5252:	71 f0       	breq	.+28     	; 0x5270 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5254:	90 91 28 05 	lds	r25, 0x0528
    5258:	9f 5f       	subi	r25, 0xFF	; 255
    525a:	90 93 28 05 	sts	0x0528, r25
		if (button_count >= 10)
    525e:	9a 30       	cpi	r25, 0x0A	; 10
    5260:	38 f0       	brcs	.+14     	; 0x5270 <poll_buttons+0x68>
		{
			button_count = 0;
    5262:	10 92 28 05 	sts	0x0528, r1
			button_multiplier ++;
    5266:	90 91 a7 07 	lds	r25, 0x07A7
    526a:	9f 5f       	subi	r25, 0xFF	; 255
    526c:	90 93 a7 07 	sts	0x07A7, r25
		}
	}

	return buttons;
}
    5270:	08 95       	ret

00005272 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
    5272:	2f 92       	push	r2
    5274:	3f 92       	push	r3
    5276:	4f 92       	push	r4
    5278:	5f 92       	push	r5
    527a:	6f 92       	push	r6
    527c:	7f 92       	push	r7
    527e:	8f 92       	push	r8
    5280:	9f 92       	push	r9
    5282:	af 92       	push	r10
    5284:	bf 92       	push	r11
    5286:	cf 92       	push	r12
    5288:	df 92       	push	r13
    528a:	ef 92       	push	r14
    528c:	ff 92       	push	r15
    528e:	0f 93       	push	r16
    5290:	1f 93       	push	r17
    5292:	cf 93       	push	r28
    5294:	df 93       	push	r29
    5296:	cd b7       	in	r28, 0x3d	; 61
    5298:	de b7       	in	r29, 0x3e	; 62
    529a:	64 97       	sbiw	r28, 0x14	; 20
    529c:	0f b6       	in	r0, 0x3f	; 63
    529e:	f8 94       	cli
    52a0:	de bf       	out	0x3e, r29	; 62
    52a2:	0f be       	out	0x3f, r0	; 63
    52a4:	cd bf       	out	0x3d, r28	; 61
    52a6:	98 2e       	mov	r9, r24
    52a8:	7e 87       	std	Y+14, r23	; 0x0e
    52aa:	6d 87       	std	Y+13, r22	; 0x0d
    52ac:	b4 2e       	mov	r11, r20
    52ae:	ed 82       	std	Y+5, r14	; 0x05
    52b0:	fe 82       	std	Y+6, r15	; 0x06
    52b2:	0f 83       	std	Y+7, r16	; 0x07
    52b4:	d1 2e       	mov	r13, r17
    52b6:	18 87       	std	Y+8, r17	; 0x08
    52b8:	29 87       	std	Y+9, r18	; 0x09
    52ba:	4e 2d       	mov	r20, r14
    52bc:	3f 2d       	mov	r19, r15
    52be:	0a 87       	std	Y+10, r16	; 0x0a
	mugui_size16_t size;
	//int16_t temp16;
	int16_t value = (int8_t)*values;
    52c0:	fb 01       	movw	r30, r22
    52c2:	20 81       	ld	r18, Z
    52c4:	62 2e       	mov	r6, r18
    52c6:	77 24       	eor	r7, r7
    52c8:	67 fc       	sbrc	r6, 7
    52ca:	70 94       	com	r7
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    52cc:	f2 e0       	ldi	r31, 0x02	; 2
    52ce:	1f 13       	cpse	r17, r31
    52d0:	05 c0       	rjmp	.+10     	; 0x52dc <do_menu_item+0x6a>
	{
		value = value * mult;
    52d2:	5b 2d       	mov	r21, r11
    52d4:	25 03       	mulsu	r18, r21
    52d6:	30 01       	movw	r6, r0
    52d8:	11 24       	eor	r1, r1
    52da:	02 c0       	rjmp	.+4      	; 0x52e0 <do_menu_item+0x6e>
	}
	else mult = 1;
    52dc:	bb 24       	eor	r11, r11
    52de:	b3 94       	inc	r11

	button = NONE;
    52e0:	20 ef       	ldi	r18, 0xF0	; 240
    52e2:	20 93 a6 07 	sts	0x07A6, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    52e6:	8b 2d       	mov	r24, r11
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	98 8b       	std	Y+16, r25	; 0x10
    52ec:	8f 87       	std	Y+15, r24	; 0x0f
    52ee:	2b 2d       	mov	r18, r11
    52f0:	42 03       	mulsu	r20, r18
    52f2:	10 01       	movw	r2, r0
    52f4:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    52f6:	32 03       	mulsu	r19, r18
    52f8:	c0 01       	movw	r24, r0
    52fa:	11 24       	eor	r1, r1
    52fc:	9c 87       	std	Y+12, r25	; 0x0c
    52fe:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5300:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5302:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	//int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5304:	41 2c       	mov	r4, r1
void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	//int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    5306:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5308:	09 2d       	mov	r16, r9
    530a:	10 e0       	ldi	r17, 0x00	; 0
    530c:	00 0f       	add	r16, r16
    530e:	11 1f       	adc	r17, r17
    5310:	0b 5f       	subi	r16, 0xFB	; 251
    5312:	11 4f       	sbci	r17, 0xF1	; 241
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5314:	ec 2d       	mov	r30, r12
    5316:	ff 27       	eor	r31, r31
    5318:	e7 fd       	sbrc	r30, 7
    531a:	f0 95       	com	r31
    531c:	fa 8b       	std	Y+18, r31	; 0x12
    531e:	e9 8b       	std	Y+17, r30	; 0x11

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5320:	5e ef       	ldi	r21, 0xFE	; 254
    5322:	c5 2e       	mov	r12, r21
    5324:	cd 0c       	add	r12, r13
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    5326:	2a 2d       	mov	r18, r10
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	3c 8b       	std	Y+20, r19	; 0x14
    532c:	2b 8b       	std	Y+19, r18	; 0x13
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    532e:	80 91 a6 07 	lds	r24, 0x07A6
    5332:	80 3e       	cpi	r24, 0xE0	; 224
    5334:	09 f4       	brne	.+2      	; 0x5338 <do_menu_item+0xc6>
    5336:	03 c1       	rjmp	.+518    	; 0x553e <do_menu_item+0x2cc>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5338:	88 20       	and	r8, r8
    533a:	11 f0       	breq	.+4      	; 0x5340 <do_menu_item+0xce>
		{
			button_inc = 5; // For servos
    533c:	25 e0       	ldi	r18, 0x05	; 5
    533e:	01 c0       	rjmp	.+2      	; 0x5342 <do_menu_item+0xd0>

		}
		else
		{
			button_inc = 1;	// For everything else
    5340:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    5342:	80 3f       	cpi	r24, 0xF0	; 240
    5344:	19 f0       	breq	.+6      	; 0x534c <do_menu_item+0xda>
		{
			button_update++;
    5346:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5348:	24 15       	cp	r18, r4
    534a:	10 f4       	brcc	.+4      	; 0x5350 <do_menu_item+0xde>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    534c:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    534e:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5350:	88 20       	and	r8, r8
    5352:	49 f0       	breq	.+18     	; 0x5366 <do_menu_item+0xf4>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5354:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5356:	37 e0       	ldi	r19, 0x07	; 7
    5358:	3f 15       	cp	r19, r15
    535a:	10 f4       	brcc	.+4      	; 0x5360 <do_menu_item+0xee>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    535c:	80 3f       	cpi	r24, 0xF0	; 240
    535e:	19 f4       	brne	.+6      	; 0x5366 <do_menu_item+0xf4>
    5360:	99 23       	and	r25, r25
    5362:	09 f4       	brne	.+2      	; 0x5366 <do_menu_item+0xf4>
    5364:	69 c0       	rjmp	.+210    	; 0x5438 <do_menu_item+0x1c6>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5366:	80 e0       	ldi	r24, 0x00	; 0
    5368:	91 e0       	ldi	r25, 0x01	; 1
    536a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    536e:	f8 01       	movw	r30, r16
    5370:	85 91       	lpm	r24, Z+
    5372:	94 91       	lpm	r25, Z
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	40 e0       	ldi	r20, 0x00	; 0
    537a:	50 e0       	ldi	r21, 0x00	; 0
    537c:	60 e7       	ldi	r22, 0x70	; 112
    537e:	71 e0       	ldi	r23, 0x01	; 1
    5380:	0e 94 c0 1a 	call	0x3580	; 0x3580 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5384:	dd 20       	and	r13, r13
    5386:	19 f0       	breq	.+6      	; 0x538e <do_menu_item+0x11c>
    5388:	51 e0       	ldi	r21, 0x01	; 1
    538a:	5c 15       	cp	r21, r12
    538c:	40 f1       	brcs	.+80     	; 0x53de <do_menu_item+0x16c>
    538e:	4a e0       	ldi	r20, 0x0A	; 10
    5390:	6b e6       	ldi	r22, 0x6B	; 107
    5392:	75 e0       	ldi	r23, 0x05	; 5
    5394:	c3 01       	movw	r24, r6
    5396:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    539a:	ae 01       	movw	r20, r28
    539c:	4f 5f       	subi	r20, 0xFF	; 255
    539e:	5f 4f       	sbci	r21, 0xFF	; 255
    53a0:	60 e7       	ldi	r22, 0x70	; 112
    53a2:	71 e0       	ldi	r23, 0x01	; 1
    53a4:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    53a8:	89 81       	ldd	r24, Y+1	; 0x01
    53aa:	9a 81       	ldd	r25, Y+2	; 0x02
    53ac:	20 e8       	ldi	r18, 0x80	; 128
    53ae:	e2 2e       	mov	r14, r18
    53b0:	f1 2c       	mov	r15, r1
    53b2:	e8 1a       	sub	r14, r24
    53b4:	f9 0a       	sbc	r15, r25
    53b6:	f6 94       	lsr	r15
    53b8:	e7 94       	ror	r14
    53ba:	89 89       	ldd	r24, Y+17	; 0x11
    53bc:	9a 89       	ldd	r25, Y+18	; 0x12
    53be:	e8 0e       	add	r14, r24
    53c0:	f9 1e       	adc	r15, r25
    53c2:	4a e0       	ldi	r20, 0x0A	; 10
    53c4:	6b e6       	ldi	r22, 0x6B	; 107
    53c6:	75 e0       	ldi	r23, 0x05	; 5
    53c8:	c3 01       	movw	r24, r6
    53ca:	0e 94 a6 42 	call	0x854c	; 0x854c <__itoa_ncheck>
    53ce:	29 e1       	ldi	r18, 0x19	; 25
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	a7 01       	movw	r20, r14
    53d4:	60 e7       	ldi	r22, 0x70	; 112
    53d6:	71 e0       	ldi	r23, 0x01	; 1
    53d8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <mugui_lcd_puts>
    53dc:	25 c0       	rjmp	.+74     	; 0x5428 <do_menu_item+0x1b6>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    53de:	eb 89       	ldd	r30, Y+19	; 0x13
    53e0:	fc 89       	ldd	r31, Y+20	; 0x14
    53e2:	e6 0d       	add	r30, r6
    53e4:	f7 1d       	adc	r31, r7
    53e6:	ee 0f       	add	r30, r30
    53e8:	ff 1f       	adc	r31, r31
    53ea:	eb 5f       	subi	r30, 0xFB	; 251
    53ec:	f1 4f       	sbci	r31, 0xF1	; 241
    53ee:	85 91       	lpm	r24, Z+
    53f0:	94 91       	lpm	r25, Z
    53f2:	0e 94 84 35 	call	0x6b08	; 0x6b08 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    53f6:	ae 01       	movw	r20, r28
    53f8:	4f 5f       	subi	r20, 0xFF	; 255
    53fa:	5f 4f       	sbci	r21, 0xFF	; 255
    53fc:	60 e7       	ldi	r22, 0x70	; 112
    53fe:	71 e0       	ldi	r23, 0x01	; 1
    5400:	8b e6       	ldi	r24, 0x6B	; 107
    5402:	95 e0       	ldi	r25, 0x05	; 5
    5404:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	9a 81       	ldd	r25, Y+2	; 0x02
    540c:	40 e8       	ldi	r20, 0x80	; 128
    540e:	50 e0       	ldi	r21, 0x00	; 0
    5410:	48 1b       	sub	r20, r24
    5412:	59 0b       	sbc	r21, r25
    5414:	56 95       	lsr	r21
    5416:	47 95       	ror	r20
    5418:	29 e1       	ldi	r18, 0x19	; 25
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	60 e7       	ldi	r22, 0x70	; 112
    541e:	71 e0       	ldi	r23, 0x01	; 1
    5420:	8a 2d       	mov	r24, r10
    5422:	86 0d       	add	r24, r6
    5424:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    5428:	81 e0       	ldi	r24, 0x01	; 1
    542a:	0e 94 60 28 	call	0x50c0	; 0x50c0 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    542e:	80 e0       	ldi	r24, 0x00	; 0
    5430:	91 e0       	ldi	r25, 0x01	; 1
    5432:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5436:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    5438:	92 e0       	ldi	r25, 0x02	; 2
    543a:	d9 16       	cp	r13, r25
    543c:	29 f1       	breq	.+74     	; 0x5488 <do_menu_item+0x216>
    543e:	9d 15       	cp	r25, r13
    5440:	68 f0       	brcs	.+26     	; 0x545c <do_menu_item+0x1ea>
    5442:	dd 20       	and	r13, r13
    5444:	c9 f0       	breq	.+50     	; 0x5478 <do_menu_item+0x206>
    5446:	e1 e0       	ldi	r30, 0x01	; 1
    5448:	de 12       	cpse	r13, r30
    544a:	2f c0       	rjmp	.+94     	; 0x54aa <do_menu_item+0x238>
    544c:	9f e3       	ldi	r25, 0x3F	; 63
    544e:	e2 e4       	ldi	r30, 0x42	; 66
    5450:	ff e0       	ldi	r31, 0x0F	; 15
    5452:	91 50       	subi	r25, 0x01	; 1
    5454:	e0 40       	sbci	r30, 0x00	; 0
    5456:	f0 40       	sbci	r31, 0x00	; 0
    5458:	e1 f7       	brne	.-8      	; 0x5452 <do_menu_item+0x1e0>
    545a:	25 c0       	rjmp	.+74     	; 0x54a6 <do_menu_item+0x234>
    545c:	f3 e0       	ldi	r31, 0x03	; 3
    545e:	df 16       	cp	r13, r31
    5460:	d9 f0       	breq	.+54     	; 0x5498 <do_menu_item+0x226>
    5462:	24 e0       	ldi	r18, 0x04	; 4
    5464:	d2 12       	cpse	r13, r18
    5466:	21 c0       	rjmp	.+66     	; 0x54aa <do_menu_item+0x238>
    5468:	ff e3       	ldi	r31, 0x3F	; 63
    546a:	22 e4       	ldi	r18, 0x42	; 66
    546c:	3f e0       	ldi	r19, 0x0F	; 15
    546e:	f1 50       	subi	r31, 0x01	; 1
    5470:	20 40       	sbci	r18, 0x00	; 0
    5472:	30 40       	sbci	r19, 0x00	; 0
    5474:	e1 f7       	brne	.-8      	; 0x546e <do_menu_item+0x1fc>
    5476:	17 c0       	rjmp	.+46     	; 0x54a6 <do_menu_item+0x234>
    5478:	3f e7       	ldi	r19, 0x7F	; 127
    547a:	5a e1       	ldi	r21, 0x1A	; 26
    547c:	86 e0       	ldi	r24, 0x06	; 6
    547e:	31 50       	subi	r19, 0x01	; 1
    5480:	50 40       	sbci	r21, 0x00	; 0
    5482:	80 40       	sbci	r24, 0x00	; 0
    5484:	e1 f7       	brne	.-8      	; 0x547e <do_menu_item+0x20c>
    5486:	0f c0       	rjmp	.+30     	; 0x54a6 <do_menu_item+0x234>
    5488:	2f e7       	ldi	r18, 0x7F	; 127
    548a:	3a e1       	ldi	r19, 0x1A	; 26
    548c:	56 e0       	ldi	r21, 0x06	; 6
    548e:	21 50       	subi	r18, 0x01	; 1
    5490:	30 40       	sbci	r19, 0x00	; 0
    5492:	50 40       	sbci	r21, 0x00	; 0
    5494:	e1 f7       	brne	.-8      	; 0x548e <do_menu_item+0x21c>
    5496:	07 c0       	rjmp	.+14     	; 0x54a6 <do_menu_item+0x234>
    5498:	8f e7       	ldi	r24, 0x7F	; 127
    549a:	98 e3       	ldi	r25, 0x38	; 56
    549c:	e1 e0       	ldi	r30, 0x01	; 1
    549e:	81 50       	subi	r24, 0x01	; 1
    54a0:	90 40       	sbci	r25, 0x00	; 0
    54a2:	e0 40       	sbci	r30, 0x00	; 0
    54a4:	e1 f7       	brne	.-8      	; 0x549e <do_menu_item+0x22c>
    54a6:	00 c0       	rjmp	.+0      	; 0x54a8 <do_menu_item+0x236>
    54a8:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    54aa:	88 20       	and	r8, r8
    54ac:	41 f0       	breq	.+16     	; 0x54be <do_menu_item+0x24c>
		{
			button = (PINB & 0xf0);	
    54ae:	83 b1       	in	r24, 0x03	; 3
    54b0:	80 7f       	andi	r24, 0xF0	; 240
    54b2:	80 93 a6 07 	sts	0x07A6, r24
			button_multiplier = 1;
    54b6:	51 e0       	ldi	r21, 0x01	; 1
    54b8:	50 93 a7 07 	sts	0x07A7, r21
    54bc:	03 c0       	rjmp	.+6      	; 0x54c4 <do_menu_item+0x252>
		}
		else
		{
			poll_buttons(true);
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	0e 94 04 29 	call	0x5208	; 0x5208 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    54c4:	80 91 a6 07 	lds	r24, 0x07A6
    54c8:	80 3f       	cpi	r24, 0xF0	; 240
    54ca:	39 f1       	breq	.+78     	; 0x551a <do_menu_item+0x2a8>
    54cc:	88 20       	and	r8, r8
    54ce:	c9 f0       	breq	.+50     	; 0x5502 <do_menu_item+0x290>
		{
			button_lock = false;
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    54d0:	80 3d       	cpi	r24, 0xD0	; 208
    54d2:	51 f4       	brne	.+20     	; 0x54e8 <do_menu_item+0x276>
		{
			if (button_lock == false)
    54d4:	51 10       	cpse	r5, r1
    54d6:	58 c0       	rjmp	.+176    	; 0x5588 <do_menu_item+0x316>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    54d8:	80 91 a7 07 	lds	r24, 0x07A7
    54dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    54de:	98 9f       	mul	r25, r24
    54e0:	60 18       	sub	r6, r0
    54e2:	71 08       	sbc	r7, r1
    54e4:	11 24       	eor	r1, r1
    54e6:	0b c0       	rjmp	.+22     	; 0x54fe <do_menu_item+0x28c>
				button_update = 0;
			}
		}

		if (button == UP)
    54e8:	80 3b       	cpi	r24, 0xB0	; 176
    54ea:	81 f4       	brne	.+32     	; 0x550c <do_menu_item+0x29a>
		{
			if (button_lock == false)
    54ec:	51 10       	cpse	r5, r1
    54ee:	4c c0       	rjmp	.+152    	; 0x5588 <do_menu_item+0x316>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    54f0:	80 91 a7 07 	lds	r24, 0x07A7
    54f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    54f6:	e8 9f       	mul	r30, r24
    54f8:	60 0c       	add	r6, r0
    54fa:	71 1c       	adc	r7, r1
    54fc:	11 24       	eor	r1, r1
				button_update = 0;
    54fe:	41 2c       	mov	r4, r1
    5500:	43 c0       	rjmp	.+134    	; 0x5588 <do_menu_item+0x316>
		{
			button_lock = false;
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5502:	80 3d       	cpi	r24, 0xD0	; 208
    5504:	49 f3       	breq	.-46     	; 0x54d8 <do_menu_item+0x266>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    5506:	80 3b       	cpi	r24, 0xB0	; 176
    5508:	99 f3       	breq	.-26     	; 0x54f0 <do_menu_item+0x27e>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    550a:	51 2c       	mov	r5, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    550c:	80 37       	cpi	r24, 0x70	; 112
    550e:	29 f4       	brne	.+10     	; 0x551a <do_menu_item+0x2a8>
		{
			value = (range.default_value * mult);
    5510:	29 85       	ldd	r18, Y+9	; 0x09
    5512:	3b 2d       	mov	r19, r11
    5514:	23 03       	mulsu	r18, r19
    5516:	30 01       	movw	r6, r0
    5518:	11 24       	eor	r1, r1
    551a:	62 14       	cp	r6, r2
    551c:	73 04       	cpc	r7, r3
    551e:	0c f4       	brge	.+2      	; 0x5522 <do_menu_item+0x2b0>
    5520:	31 01       	movw	r6, r2
    5522:	8b 85       	ldd	r24, Y+11	; 0x0b
    5524:	9c 85       	ldd	r25, Y+12	; 0x0c
    5526:	86 15       	cp	r24, r6
    5528:	97 05       	cpc	r25, r7
    552a:	0c f4       	brge	.+2      	; 0x552e <do_menu_item+0x2bc>
    552c:	3c 01       	movw	r6, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    552e:	97 ea       	ldi	r25, 0xA7	; 167
    5530:	99 12       	cpse	r9, r25
    5532:	03 c0       	rjmp	.+6      	; 0x553a <do_menu_item+0x2c8>
		{
			st7565_set_brightness(value);
    5534:	86 2d       	mov	r24, r6
    5536:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <st7565_set_brightness>
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	f8 ce       	rjmp	.-528    	; 0x532e <do_menu_item+0xbc>
		}

	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    553e:	e2 e0       	ldi	r30, 0x02	; 2
    5540:	de 12       	cpse	r13, r30
    5542:	06 c0       	rjmp	.+12     	; 0x5550 <do_menu_item+0x2de>
	{
		value = value / mult;
    5544:	c3 01       	movw	r24, r6
    5546:	6f 85       	ldd	r22, Y+15	; 0x0f
    5548:	78 89       	ldd	r23, Y+16	; 0x10
    554a:	0e 94 11 42 	call	0x8422	; 0x8422 <__divmodhi4>
    554e:	3b 01       	movw	r6, r22
	}

	*values = (int8_t)value;
    5550:	ed 85       	ldd	r30, Y+13	; 0x0d
    5552:	fe 85       	ldd	r31, Y+14	; 0x0e
    5554:	60 82       	st	Z, r6
}
    5556:	64 96       	adiw	r28, 0x14	; 20
    5558:	0f b6       	in	r0, 0x3f	; 63
    555a:	f8 94       	cli
    555c:	de bf       	out	0x3e, r29	; 62
    555e:	0f be       	out	0x3f, r0	; 63
    5560:	cd bf       	out	0x3d, r28	; 61
    5562:	df 91       	pop	r29
    5564:	cf 91       	pop	r28
    5566:	1f 91       	pop	r17
    5568:	0f 91       	pop	r16
    556a:	ff 90       	pop	r15
    556c:	ef 90       	pop	r14
    556e:	df 90       	pop	r13
    5570:	cf 90       	pop	r12
    5572:	bf 90       	pop	r11
    5574:	af 90       	pop	r10
    5576:	9f 90       	pop	r9
    5578:	8f 90       	pop	r8
    557a:	7f 90       	pop	r7
    557c:	6f 90       	pop	r6
    557e:	5f 90       	pop	r5
    5580:	4f 90       	pop	r4
    5582:	3f 90       	pop	r3
    5584:	2f 90       	pop	r2
    5586:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    5588:	55 24       	eor	r5, r5
    558a:	53 94       	inc	r5
    558c:	c6 cf       	rjmp	.-116    	; 0x551a <do_menu_item+0x2a8>

0000558e <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	98 17       	cp	r25, r24
    5592:	81 f0       	breq	.+32     	; 0x55b4 <menu_beep+0x26>
	{ 
		LVA = 1;
    5594:	29 9a       	sbi	0x05, 1	; 5
    5596:	ef e0       	ldi	r30, 0x0F	; 15
    5598:	f7 e2       	ldi	r31, 0x27	; 39
    559a:	31 97       	sbiw	r30, 0x01	; 1
    559c:	f1 f7       	brne	.-4      	; 0x559a <menu_beep+0xc>
    559e:	00 c0       	rjmp	.+0      	; 0x55a0 <menu_beep+0x12>
    55a0:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    55a2:	29 98       	cbi	0x05, 1	; 5
    55a4:	ef e0       	ldi	r30, 0x0F	; 15
    55a6:	f7 e2       	ldi	r31, 0x27	; 39
    55a8:	31 97       	sbiw	r30, 0x01	; 1
    55aa:	f1 f7       	brne	.-4      	; 0x55a8 <menu_beep+0x1a>
    55ac:	00 c0       	rjmp	.+0      	; 0x55ae <menu_beep+0x20>
    55ae:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    55b0:	9f 5f       	subi	r25, 0xFF	; 255
    55b2:	ee cf       	rjmp	.-36     	; 0x5590 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    55b4:	08 95       	ret

000055b6 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint8_t* top, uint8_t* temp)
{
    55b6:	cf 92       	push	r12
    55b8:	df 92       	push	r13
    55ba:	ef 92       	push	r14
    55bc:	ff 92       	push	r15
    55be:	0f 93       	push	r16
    55c0:	1f 93       	push	r17
    55c2:	cf 93       	push	r28
    55c4:	df 93       	push	r29
    55c6:	00 d0       	rcall	.+0      	; 0x55c8 <update_menu+0x12>
    55c8:	1f 92       	push	r1
    55ca:	cd b7       	in	r28, 0x3d	; 61
    55cc:	de b7       	in	r29, 0x3e	; 62
    55ce:	58 2f       	mov	r21, r24
    55d0:	f6 01       	movw	r30, r12
	// Temporarily add in offset :(
	*top = *top + offset;
    55d2:	d7 01       	movw	r26, r14
    55d4:	9c 91       	ld	r25, X
    55d6:	94 0f       	add	r25, r20
    55d8:	9c 93       	st	X, r25
	start = start + offset;
    55da:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    55dc:	20 3e       	cpi	r18, 0xE0	; 224
    55de:	a1 f4       	brne	.+40     	; 0x5608 <update_menu+0x52>
	{
		switch(*cursor) 
    55e0:	d8 01       	movw	r26, r16
    55e2:	8c 91       	ld	r24, X
    55e4:	8f 30       	cpi	r24, 0x0F	; 15
    55e6:	59 f0       	breq	.+22     	; 0x55fe <update_menu+0x48>
    55e8:	18 f4       	brcc	.+6      	; 0x55f0 <update_menu+0x3a>
    55ea:	83 30       	cpi	r24, 0x03	; 3
    55ec:	49 f0       	breq	.+18     	; 0x5600 <update_menu+0x4a>
    55ee:	4b c0       	rjmp	.+150    	; 0x5686 <update_menu+0xd0>
    55f0:	8b 31       	cpi	r24, 0x1B	; 27
    55f2:	41 f0       	breq	.+16     	; 0x5604 <update_menu+0x4e>
    55f4:	87 32       	cpi	r24, 0x27	; 39
    55f6:	09 f0       	breq	.+2      	; 0x55fa <update_menu+0x44>
    55f8:	46 c0       	rjmp	.+140    	; 0x5686 <update_menu+0xd0>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    55fa:	9d 5f       	subi	r25, 0xFD	; 253
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <update_menu+0x4a>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    55fe:	9f 5f       	subi	r25, 0xFF	; 255
    5600:	90 83       	st	Z, r25
				break;	
    5602:	41 c0       	rjmp	.+130    	; 0x5686 <update_menu+0xd0>
			case LINE2:
				*temp = *top + 2;
    5604:	9e 5f       	subi	r25, 0xFE	; 254
    5606:	fc cf       	rjmp	.-8      	; 0x5600 <update_menu+0x4a>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    5608:	20 3d       	cpi	r18, 0xD0	; 208
    560a:	f9 f4       	brne	.+62     	; 0x564a <update_menu+0x94>
	{
		switch(*cursor) 
    560c:	f8 01       	movw	r30, r16
    560e:	80 81       	ld	r24, Z
    5610:	8f 30       	cpi	r24, 0x0F	; 15
    5612:	69 f0       	breq	.+26     	; 0x562e <update_menu+0x78>
    5614:	18 f4       	brcc	.+6      	; 0x561c <update_menu+0x66>
    5616:	83 30       	cpi	r24, 0x03	; 3
    5618:	31 f0       	breq	.+12     	; 0x5626 <update_menu+0x70>
    561a:	15 c0       	rjmp	.+42     	; 0x5646 <update_menu+0x90>
    561c:	8b 31       	cpi	r24, 0x1B	; 27
    561e:	59 f0       	breq	.+22     	; 0x5636 <update_menu+0x80>
    5620:	87 32       	cpi	r24, 0x27	; 39
    5622:	69 f0       	breq	.+26     	; 0x563e <update_menu+0x88>
    5624:	10 c0       	rjmp	.+32     	; 0x5646 <update_menu+0x90>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    5626:	52 30       	cpi	r21, 0x02	; 2
    5628:	70 f1       	brcs	.+92     	; 0x5686 <update_menu+0xd0>
    562a:	8f e0       	ldi	r24, 0x0F	; 15
    562c:	27 c0       	rjmp	.+78     	; 0x567c <update_menu+0xc6>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    562e:	53 30       	cpi	r21, 0x03	; 3
    5630:	50 f1       	brcs	.+84     	; 0x5686 <update_menu+0xd0>
    5632:	8b e1       	ldi	r24, 0x1B	; 27
    5634:	1f c0       	rjmp	.+62     	; 0x5674 <update_menu+0xbe>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    5636:	54 30       	cpi	r21, 0x04	; 4
    5638:	30 f1       	brcs	.+76     	; 0x5686 <update_menu+0xd0>
    563a:	87 e2       	ldi	r24, 0x27	; 39
    563c:	1f c0       	rjmp	.+62     	; 0x567c <update_menu+0xc6>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    563e:	55 30       	cpi	r21, 0x05	; 5
    5640:	10 f1       	brcs	.+68     	; 0x5686 <update_menu+0xd0>
    5642:	88 e2       	ldi	r24, 0x28	; 40
    5644:	17 c0       	rjmp	.+46     	; 0x5674 <update_menu+0xbe>
				break;
			default:
				*cursor = NEXTLINE;
    5646:	88 e2       	ldi	r24, 0x28	; 40
    5648:	19 c0       	rjmp	.+50     	; 0x567c <update_menu+0xc6>
				break;
		}
	}

	if (button == UP)	
    564a:	20 3b       	cpi	r18, 0xB0	; 176
    564c:	d1 f4       	brne	.+52     	; 0x5682 <update_menu+0xcc>
	{
		switch(*cursor) 
    564e:	f8 01       	movw	r30, r16
    5650:	80 81       	ld	r24, Z
    5652:	8f 30       	cpi	r24, 0x0F	; 15
    5654:	69 f0       	breq	.+26     	; 0x5670 <update_menu+0xba>
    5656:	20 f4       	brcc	.+8      	; 0x5660 <update_menu+0xaa>
    5658:	83 30       	cpi	r24, 0x03	; 3
    565a:	79 f4       	brne	.+30     	; 0x567a <update_menu+0xc4>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    565c:	82 e0       	ldi	r24, 0x02	; 2
    565e:	0a c0       	rjmp	.+20     	; 0x5674 <update_menu+0xbe>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    5660:	8b 31       	cpi	r24, 0x1B	; 27
    5662:	21 f0       	breq	.+8      	; 0x566c <update_menu+0xb6>
    5664:	87 32       	cpi	r24, 0x27	; 39
    5666:	49 f4       	brne	.+18     	; 0x567a <update_menu+0xc4>
		{
			case LINE3:
				*cursor = LINE2;
    5668:	8b e1       	ldi	r24, 0x1B	; 27
    566a:	08 c0       	rjmp	.+16     	; 0x567c <update_menu+0xc6>
				break;	
			case LINE2:
				*cursor = LINE1;
    566c:	8f e0       	ldi	r24, 0x0F	; 15
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <update_menu+0xbe>
				break;
			case LINE1:
				*cursor = LINE0;
    5670:	83 e0       	ldi	r24, 0x03	; 3
    5672:	04 c0       	rjmp	.+8      	; 0x567c <update_menu+0xc6>
				break;
			case LINE0:
				*cursor = PREVLINE;
    5674:	f8 01       	movw	r30, r16
    5676:	80 83       	st	Z, r24
				break;
    5678:	06 c0       	rjmp	.+12     	; 0x5686 <update_menu+0xd0>
			default:
				*cursor = PREVLINE;
    567a:	82 e0       	ldi	r24, 0x02	; 2
    567c:	d8 01       	movw	r26, r16
    567e:	8c 93       	st	X, r24
				break;
    5680:	02 c0       	rjmp	.+4      	; 0x5686 <update_menu+0xd0>
		}
	}
	
	if (button != NONE)
    5682:	20 3f       	cpi	r18, 0xF0	; 240
    5684:	91 f0       	breq	.+36     	; 0x56aa <update_menu+0xf4>
	{
		menu_beep(1);
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	4b 83       	std	Y+3, r20	; 0x03
    568a:	5a 83       	std	Y+2, r21	; 0x02
    568c:	69 83       	std	Y+1, r22	; 0x01
    568e:	0e 94 c7 2a 	call	0x558e	; 0x558e <menu_beep>
    5692:	bf ef       	ldi	r27, 0xFF	; 255
    5694:	e4 e3       	ldi	r30, 0x34	; 52
    5696:	fc e0       	ldi	r31, 0x0C	; 12
    5698:	b1 50       	subi	r27, 0x01	; 1
    569a:	e0 40       	sbci	r30, 0x00	; 0
    569c:	f0 40       	sbci	r31, 0x00	; 0
    569e:	e1 f7       	brne	.-8      	; 0x5698 <update_menu+0xe2>
    56a0:	00 c0       	rjmp	.+0      	; 0x56a2 <update_menu+0xec>
    56a2:	00 00       	nop
    56a4:	69 81       	ldd	r22, Y+1	; 0x01
    56a6:	5a 81       	ldd	r21, Y+2	; 0x02
    56a8:	4b 81       	ldd	r20, Y+3	; 0x03
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up
    56aa:	d8 01       	movw	r26, r16
    56ac:	8c 91       	ld	r24, X
    56ae:	82 30       	cpi	r24, 0x02	; 2
    56b0:	41 f4       	brne	.+16     	; 0x56c2 <update_menu+0x10c>
	{
		*cursor  = LINE0;
    56b2:	83 e0       	ldi	r24, 0x03	; 3
    56b4:	8c 93       	st	X, r24
		if (*top > start)
    56b6:	f7 01       	movw	r30, r14
    56b8:	80 81       	ld	r24, Z
    56ba:	68 17       	cp	r22, r24
    56bc:	10 f4       	brcc	.+4      	; 0x56c2 <update_menu+0x10c>
		{
			*top = *top - 1;								// Shuffle list up
    56be:	81 50       	subi	r24, 0x01	; 1
    56c0:	80 83       	st	Z, r24
		}
	}

	if (*cursor == NEXTLINE)								// Down
    56c2:	d8 01       	movw	r26, r16
    56c4:	8c 91       	ld	r24, X
    56c6:	88 32       	cpi	r24, 0x28	; 40
    56c8:	91 f4       	brne	.+36     	; 0x56ee <update_menu+0x138>
	{
		*cursor  = LINE3;
    56ca:	87 e2       	ldi	r24, 0x27	; 39
    56cc:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    56ce:	f7 01       	movw	r30, r14
    56d0:	70 81       	ld	r23, Z
    56d2:	27 2f       	mov	r18, r23
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	2d 5f       	subi	r18, 0xFD	; 253
    56d8:	3f 4f       	sbci	r19, 0xFF	; 255
    56da:	85 2f       	mov	r24, r21
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	86 0f       	add	r24, r22
    56e0:	91 1d       	adc	r25, r1
    56e2:	01 97       	sbiw	r24, 0x01	; 1
    56e4:	28 17       	cp	r18, r24
    56e6:	39 07       	cpc	r19, r25
    56e8:	10 f4       	brcc	.+4      	; 0x56ee <update_menu+0x138>
		{
			*top = *top + 1;								// Shuffle list down
    56ea:	7f 5f       	subi	r23, 0xFF	; 255
    56ec:	70 83       	st	Z, r23
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    56ee:	d7 01       	movw	r26, r14
    56f0:	8c 91       	ld	r24, X
    56f2:	84 1b       	sub	r24, r20
    56f4:	8c 93       	st	X, r24
}
    56f6:	0f 90       	pop	r0
    56f8:	0f 90       	pop	r0
    56fa:	0f 90       	pop	r0
    56fc:	df 91       	pop	r29
    56fe:	cf 91       	pop	r28
    5700:	1f 91       	pop	r17
    5702:	0f 91       	pop	r16
    5704:	ff 90       	pop	r15
    5706:	ef 90       	pop	r14
    5708:	df 90       	pop	r13
    570a:	cf 90       	pop	r12
    570c:	08 95       	ret

0000570e <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    570e:	28 2f       	mov	r18, r24
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	43 e0       	ldi	r20, 0x03	; 3
    5714:	50 e0       	ldi	r21, 0x00	; 0
    5716:	66 e0       	ldi	r22, 0x06	; 6
    5718:	71 e0       	ldi	r23, 0x01	; 1
    571a:	8d e0       	ldi	r24, 0x0D	; 13
    571c:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <LCD_Display_Text>

00005720 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint8_t top, uint8_t start, int8_t values[], uint8_t mult, const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    5720:	2f 92       	push	r2
    5722:	3f 92       	push	r3
    5724:	4f 92       	push	r4
    5726:	5f 92       	push	r5
    5728:	6f 92       	push	r6
    572a:	7f 92       	push	r7
    572c:	8f 92       	push	r8
    572e:	9f 92       	push	r9
    5730:	af 92       	push	r10
    5732:	bf 92       	push	r11
    5734:	cf 92       	push	r12
    5736:	df 92       	push	r13
    5738:	ef 92       	push	r14
    573a:	ff 92       	push	r15
    573c:	0f 93       	push	r16
    573e:	1f 93       	push	r17
    5740:	cf 93       	push	r28
    5742:	df 93       	push	r29
    5744:	cd b7       	in	r28, 0x3d	; 61
    5746:	de b7       	in	r29, 0x3e	; 62
    5748:	29 97       	sbiw	r28, 0x09	; 9
    574a:	0f b6       	in	r0, 0x3f	; 63
    574c:	f8 94       	cli
    574e:	de bf       	out	0x3e, r29	; 62
    5750:	0f be       	out	0x3f, r0	; 63
    5752:	cd bf       	out	0x3d, r28	; 61
    5754:	38 2e       	mov	r3, r24
    5756:	3a 01       	movw	r6, r20
    5758:	22 2e       	mov	r2, r18
    575a:	28 01       	movw	r4, r16
    575c:	ee 82       	std	Y+6, r14	; 0x06
    575e:	cf 82       	std	Y+7, r12	; 0x07
    5760:	88 86       	std	Y+8, r8	; 0x08
	menu_range_t	range1;
	uint8_t multiplier;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    5762:	80 e0       	ldi	r24, 0x00	; 0
    5764:	91 e0       	ldi	r25, 0x01	; 1
    5766:	69 87       	std	Y+9, r22	; 0x09
    5768:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>
	print_menu_frame(0);
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	0e 94 60 28 	call	0x50c0	; 0x50c0 <print_menu_frame>
    5772:	23 2d       	mov	r18, r3
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	69 85       	ldd	r22, Y+9	; 0x09
    5778:	86 2f       	mov	r24, r22
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	68 01       	movw	r12, r16
    577e:	45 e0       	ldi	r20, 0x05	; 5
    5780:	64 9f       	mul	r22, r20
    5782:	c0 18       	sub	r12, r0
    5784:	d1 08       	sbc	r13, r1
    5786:	11 24       	eor	r1, r1
    5788:	e5 e0       	ldi	r30, 0x05	; 5
    578a:	3e 9e       	mul	r3, r30
    578c:	c0 0c       	add	r12, r0
    578e:	d1 1c       	adc	r13, r1
    5790:	11 24       	eor	r1, r1
    5792:	81 2c       	mov	r8, r1
    5794:	91 2c       	mov	r9, r1
    5796:	e1 2c       	mov	r14, r1
    5798:	f1 2c       	mov	r15, r1
    579a:	a8 1a       	sub	r10, r24
    579c:	b9 0a       	sbc	r11, r25
    579e:	a2 0e       	add	r10, r18
    57a0:	b3 1e       	adc	r11, r19
    57a2:	28 1b       	sub	r18, r24
    57a4:	39 0b       	sbc	r19, r25
    57a6:	62 0e       	add	r6, r18
    57a8:	73 1e       	adc	r7, r19
    57aa:	87 01       	movw	r16, r14
    57ac:	09 54       	subi	r16, 0x49	; 73
    57ae:	19 4e       	sbci	r17, 0xE9	; 233
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    57b0:	f8 01       	movw	r30, r16
    57b2:	24 91       	lpm	r18, Z
    57b4:	30 e0       	ldi	r19, 0x00	; 0
    57b6:	4a e0       	ldi	r20, 0x0A	; 10
    57b8:	50 e0       	ldi	r21, 0x00	; 0
    57ba:	6e e1       	ldi	r22, 0x1E	; 30
    57bc:	7a e0       	ldi	r23, 0x0A	; 10
    57be:	83 2d       	mov	r24, r3
    57c0:	8e 0d       	add	r24, r14
    57c2:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    57c6:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    57c8:	45 e0       	ldi	r20, 0x05	; 5
    57ca:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    57cc:	f1 11       	cpse	r31, r1
    57ce:	04 c0       	rjmp	.+8      	; 0x57d8 <print_menu_items+0xb8>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    57d0:	b4 01       	movw	r22, r8
    57d2:	6c 0d       	add	r22, r12
    57d4:	7d 1d       	adc	r23, r13
    57d6:	01 c0       	rjmp	.+2      	; 0x57da <print_menu_items+0xba>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    57d8:	b2 01       	movw	r22, r4
    57da:	ce 01       	movw	r24, r28
    57dc:	01 96       	adiw	r24, 0x01	; 1
    57de:	0e 94 9d 42 	call	0x853a	; 0x853a <memcpy_P>
		}
	
		if (range1.style == 2)
    57e2:	6c 81       	ldd	r22, Y+4	; 0x04
    57e4:	62 30       	cpi	r22, 0x02	; 2
    57e6:	11 f0       	breq	.+4      	; 0x57ec <print_menu_items+0xcc>
		{
			multiplier = mult;
		}
		else
		{
			multiplier = 1;
    57e8:	31 e0       	ldi	r19, 0x01	; 1
    57ea:	01 c0       	rjmp	.+2      	; 0x57ee <print_menu_items+0xce>
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}
	
		if (range1.style == 2)
		{
			multiplier = mult;
    57ec:	32 2d       	mov	r19, r2
		else
		{
			multiplier = 1;
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    57ee:	f8 01       	movw	r30, r16
    57f0:	04 91       	lpm	r16, Z
    57f2:	f5 01       	movw	r30, r10
    57f4:	ee 0d       	add	r30, r14
    57f6:	ff 1d       	adc	r31, r15
    57f8:	44 91       	lpm	r20, Z
    57fa:	d3 01       	movw	r26, r6
    57fc:	ae 0d       	add	r26, r14
    57fe:	bf 1d       	adc	r27, r15
    5800:	5c 91       	ld	r21, X
    5802:	45 0f       	add	r20, r21
    5804:	2f 81       	ldd	r18, Y+7	; 0x07
    5806:	53 03       	mulsu	r21, r19
    5808:	c0 01       	movw	r24, r0
    580a:	11 24       	eor	r1, r1
    580c:	0e 94 dd 28 	call	0x51ba	; 0x51ba <print_menu_text>
    5810:	ff ef       	ldi	r31, 0xFF	; 255
    5812:	ef 1a       	sub	r14, r31
    5814:	ff 0a       	sbc	r15, r31
    5816:	45 e0       	ldi	r20, 0x05	; 5
    5818:	84 0e       	add	r8, r20
    581a:	91 1c       	adc	r9, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    581c:	84 e0       	ldi	r24, 0x04	; 4
    581e:	e8 16       	cp	r14, r24
    5820:	f1 04       	cpc	r15, r1
    5822:	09 f0       	breq	.+2      	; 0x5826 <print_menu_items+0x106>
    5824:	c2 cf       	rjmp	.-124    	; 0x57aa <print_menu_items+0x8a>
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    5826:	88 85       	ldd	r24, Y+8	; 0x08
    5828:	0e 94 87 2b 	call	0x570e	; 0x570e <print_cursor>
	write_buffer(buffer);
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	91 e0       	ldi	r25, 0x01	; 1
    5830:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>
	poll_buttons(true);
    5834:	81 e0       	ldi	r24, 0x01	; 1
    5836:	0e 94 04 29 	call	0x5208	; 0x5208 <poll_buttons>
}
    583a:	29 96       	adiw	r28, 0x09	; 9
    583c:	0f b6       	in	r0, 0x3f	; 63
    583e:	f8 94       	cli
    5840:	de bf       	out	0x3e, r29	; 62
    5842:	0f be       	out	0x3f, r0	; 63
    5844:	cd bf       	out	0x3d, r28	; 61
    5846:	df 91       	pop	r29
    5848:	cf 91       	pop	r28
    584a:	1f 91       	pop	r17
    584c:	0f 91       	pop	r16
    584e:	ff 90       	pop	r15
    5850:	ef 90       	pop	r14
    5852:	df 90       	pop	r13
    5854:	cf 90       	pop	r12
    5856:	bf 90       	pop	r11
    5858:	af 90       	pop	r10
    585a:	9f 90       	pop	r9
    585c:	8f 90       	pop	r8
    585e:	7f 90       	pop	r7
    5860:	6f 90       	pop	r6
    5862:	5f 90       	pop	r5
    5864:	4f 90       	pop	r4
    5866:	3f 90       	pop	r3
    5868:	2f 90       	pop	r2
    586a:	08 95       	ret

0000586c <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    586c:	2f 92       	push	r2
    586e:	3f 92       	push	r3
    5870:	4f 92       	push	r4
    5872:	5f 92       	push	r5
    5874:	6f 92       	push	r6
    5876:	7f 92       	push	r7
    5878:	8f 92       	push	r8
    587a:	9f 92       	push	r9
    587c:	af 92       	push	r10
    587e:	bf 92       	push	r11
    5880:	cf 92       	push	r12
    5882:	df 92       	push	r13
    5884:	ef 92       	push	r14
    5886:	ff 92       	push	r15
    5888:	0f 93       	push	r16
    588a:	1f 93       	push	r17
    588c:	cf 93       	push	r28
    588e:	df 93       	push	r29
    5890:	cd b7       	in	r28, 0x3d	; 61
    5892:	de b7       	in	r29, 0x3e	; 62
    5894:	2f 97       	sbiw	r28, 0x0f	; 15
    5896:	0f b6       	in	r0, 0x3f	; 63
    5898:	f8 94       	cli
    589a:	de bf       	out	0x3e, r29	; 62
    589c:	0f be       	out	0x3f, r0	; 63
    589e:	cd bf       	out	0x3d, r28	; 61
	int8_t temp_gyro_roll = 0;
	int8_t temp_gyro_pitch = 0;
	int8_t temp_gyro_yaw = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    58a0:	90 91 a8 07 	lds	r25, 0x07A8
    58a4:	99 23       	and	r25, r25
    58a6:	29 f0       	breq	.+10     	; 0x58b2 <menu_flight+0x46>
	{
		sub_top = FLIGHTSTART;
    58a8:	90 ec       	ldi	r25, 0xC0	; 192
    58aa:	90 93 2c 05 	sts	0x052C, r25
		menu_flag = 0;
    58ae:	10 92 a8 07 	sts	0x07A8, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	01 97       	sbiw	r24, 0x01	; 1
    58b6:	46 e1       	ldi	r20, 0x16	; 22
    58b8:	48 9f       	mul	r20, r24
    58ba:	90 01       	movw	r18, r0
    58bc:	49 9f       	mul	r20, r25
    58be:	30 0d       	add	r19, r0
    58c0:	11 24       	eor	r1, r1
    58c2:	c9 01       	movw	r24, r18
    58c4:	85 5e       	subi	r24, 0xE5	; 229
    58c6:	99 4f       	sbci	r25, 0xF9	; 249
    58c8:	9f 83       	std	Y+7, r25	; 0x07
    58ca:	8e 83       	std	Y+6, r24	; 0x06

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
    58cc:	f9 01       	movw	r30, r18
    58ce:	ee 53       	subi	r30, 0x3E	; 62
    58d0:	fa 4f       	sbci	r31, 0xFA	; 250
    58d2:	2f 01       	movw	r4, r30
    58d4:	1f 01       	movw	r2, r30
    58d6:	fb e5       	ldi	r31, 0x5B	; 91
    58d8:	2f 0e       	add	r2, r31
    58da:	31 1c       	adc	r3, r1

		// Preset I-limits when gyro mode changes
		if (button == ENTER)
		{
			// If roll gyro type has changed, reset to an appropriate start point
			if (temp_gyro_roll != Config.FlightMode[mode-1].Roll_type)
    58dc:	32 01       	movw	r6, r4
    58de:	3f 86       	std	Y+15, r3	; 0x0f
    58e0:	2e 86       	std	Y+14, r2	; 0x0e
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
		temp_gyro_pitch = Config.FlightMode[mode - 1].Pitch_type;
    58e2:	c2 01       	movw	r24, r4
    58e4:	8e 59       	subi	r24, 0x9E	; 158
    58e6:	9f 4f       	sbci	r25, 0xFF	; 255
    58e8:	9b 87       	std	Y+11, r25	; 0x0b
    58ea:	8a 87       	std	Y+10, r24	; 0x0a
		temp_gyro_yaw = Config.FlightMode[mode - 1].Yaw_type;
    58ec:	f2 01       	movw	r30, r4
    58ee:	e7 59       	subi	r30, 0x97	; 151
    58f0:	ff 4f       	sbci	r31, 0xFF	; 255
    58f2:	fd 87       	std	Y+13, r31	; 0x0d
    58f4:	ec 87       	std	Y+12, r30	; 0x0c
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    58f6:	80 91 a6 07 	lds	r24, 0x07A6
    58fa:	80 37       	cpi	r24, 0x70	; 112
    58fc:	09 f4       	brne	.+2      	; 0x5900 <menu_flight+0x94>
    58fe:	93 c0       	rjmp	.+294    	; 0x5a26 <menu_flight+0x1ba>
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
    5900:	f1 01       	movw	r30, r2
    5902:	90 80       	ld	r9, Z
		temp_gyro_pitch = Config.FlightMode[mode - 1].Pitch_type;
    5904:	ea 85       	ldd	r30, Y+10	; 0x0a
    5906:	fb 85       	ldd	r31, Y+11	; 0x0b
    5908:	f0 81       	ld	r31, Z
    590a:	f9 87       	std	Y+9, r31	; 0x09
		temp_gyro_yaw = Config.FlightMode[mode - 1].Yaw_type;
    590c:	ec 85       	ldd	r30, Y+12	; 0x0c
    590e:	fd 85       	ldd	r31, Y+13	; 0x0d
    5910:	f0 81       	ld	r31, Z
    5912:	f8 87       	std	Y+8, r31	; 0x08

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, 1, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    5914:	80 90 04 05 	lds	r8, 0x0504
    5918:	89 e2       	ldi	r24, 0x29	; 41
    591a:	a8 2e       	mov	r10, r24
    591c:	87 e1       	ldi	r24, 0x17	; 23
    591e:	b8 2e       	mov	r11, r24
    5920:	9f e4       	ldi	r25, 0x4F	; 79
    5922:	c9 2e       	mov	r12, r25
    5924:	e1 2c       	mov	r14, r1
    5926:	0b eb       	ldi	r16, 0xBB	; 187
    5928:	16 e1       	ldi	r17, 0x16	; 22
    592a:	21 e0       	ldi	r18, 0x01	; 1
    592c:	4e 81       	ldd	r20, Y+6	; 0x06
    592e:	5f 81       	ldd	r21, Y+7	; 0x07
    5930:	60 ec       	ldi	r22, 0xC0	; 192
    5932:	80 91 2c 05 	lds	r24, 0x052C
    5936:	0e 94 90 2b 	call	0x5720	; 0x5720 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    593a:	29 e2       	ldi	r18, 0x29	; 41
    593c:	c2 2e       	mov	r12, r18
    593e:	25 e0       	ldi	r18, 0x05	; 5
    5940:	d2 2e       	mov	r13, r18
    5942:	3c e2       	ldi	r19, 0x2C	; 44
    5944:	e3 2e       	mov	r14, r19
    5946:	35 e0       	ldi	r19, 0x05	; 5
    5948:	f3 2e       	mov	r15, r19
    594a:	04 e0       	ldi	r16, 0x04	; 4
    594c:	15 e0       	ldi	r17, 0x05	; 5
    594e:	20 91 a6 07 	lds	r18, 0x07A6
    5952:	40 e0       	ldi	r20, 0x00	; 0
    5954:	60 ec       	ldi	r22, 0xC0	; 192
    5956:	86 e1       	ldi	r24, 0x16	; 22
    5958:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    595c:	60 91 29 05 	lds	r22, 0x0529
    5960:	60 5c       	subi	r22, 0xC0	; 192
    5962:	8b eb       	ldi	r24, 0xBB	; 187
    5964:	96 e1       	ldi	r25, 0x16	; 22
    5966:	0e 94 ad 28 	call	0x515a	; 0x515a <get_menu_range>
    596a:	29 83       	std	Y+1, r18	; 0x01
    596c:	3a 83       	std	Y+2, r19	; 0x02
    596e:	4b 83       	std	Y+3, r20	; 0x03
    5970:	5c 83       	std	Y+4, r21	; 0x04
    5972:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5974:	80 91 a6 07 	lds	r24, 0x07A6
    5978:	80 3e       	cpi	r24, 0xE0	; 224
    597a:	e9 f4       	brne	.+58     	; 0x59b6 <menu_flight+0x14a>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    597c:	80 91 29 05 	lds	r24, 0x0529
    5980:	e8 2f       	mov	r30, r24
    5982:	f0 e0       	ldi	r31, 0x00	; 0
    5984:	e7 59       	subi	r30, 0x97	; 151
    5986:	f9 4e       	sbci	r31, 0xE9	; 233
    5988:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    598a:	68 2f       	mov	r22, r24
    598c:	70 e0       	ldi	r23, 0x00	; 0
    598e:	60 5c       	subi	r22, 0xC0	; 192
    5990:	71 09       	sbc	r23, r1
    5992:	2e 81       	ldd	r18, Y+6	; 0x06
    5994:	3f 81       	ldd	r19, Y+7	; 0x07
    5996:	62 0f       	add	r22, r18
    5998:	73 1f       	adc	r23, r19
    599a:	1f 92       	push	r1
    599c:	1f 92       	push	r1
    599e:	81 2c       	mov	r8, r1
    59a0:	c1 2c       	mov	r12, r1
    59a2:	e9 80       	ldd	r14, Y+1	; 0x01
    59a4:	fa 80       	ldd	r15, Y+2	; 0x02
    59a6:	0b 81       	ldd	r16, Y+3	; 0x03
    59a8:	1c 81       	ldd	r17, Y+4	; 0x04
    59aa:	2d 81       	ldd	r18, Y+5	; 0x05
    59ac:	41 e0       	ldi	r20, 0x01	; 1
    59ae:	0e 94 39 29 	call	0x5272	; 0x5272 <do_menu_item>
    59b2:	0f 90       	pop	r0
    59b4:	0f 90       	pop	r0
		}

		// Preset I-limits when gyro mode changes
		if (button == ENTER)
    59b6:	80 91 a6 07 	lds	r24, 0x07A6
    59ba:	80 3e       	cpi	r24, 0xE0	; 224
    59bc:	09 f0       	breq	.+2      	; 0x59c0 <menu_flight+0x154>
    59be:	9b cf       	rjmp	.-202    	; 0x58f6 <menu_flight+0x8a>
		{
			// If roll gyro type has changed, reset to an appropriate start point
			if (temp_gyro_roll != Config.FlightMode[mode-1].Roll_type)
    59c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    59c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    59c4:	80 81       	ld	r24, Z
    59c6:	98 16       	cp	r9, r24
    59c8:	49 f0       	breq	.+18     	; 0x59dc <menu_flight+0x170>
    59ca:	f3 01       	movw	r30, r6
    59cc:	e1 5a       	subi	r30, 0xA1	; 161
    59ce:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				// Use Gyro type value to preset limits
				if(Config.FlightMode[mode-1].Roll_type == LOCK)
    59d0:	81 30       	cpi	r24, 0x01	; 1
    59d2:	19 f4       	brne	.+6      	; 0x59da <menu_flight+0x16e>
				{
					Config.FlightMode[mode - 1].Roll_limit = 125;
    59d4:	8d e7       	ldi	r24, 0x7D	; 125
    59d6:	80 83       	st	Z, r24
    59d8:	01 c0       	rjmp	.+2      	; 0x59dc <menu_flight+0x170>
				}
				else
				{
					Config.FlightMode[mode - 1].Roll_limit = 0;
    59da:	10 82       	st	Z, r1
				}
			}

			if (temp_gyro_pitch != Config.FlightMode[mode-1].Pitch_type)
    59dc:	f3 01       	movw	r30, r6
    59de:	ee 59       	subi	r30, 0x9E	; 158
    59e0:	ff 4f       	sbci	r31, 0xFF	; 255
    59e2:	80 81       	ld	r24, Z
    59e4:	f9 85       	ldd	r31, Y+9	; 0x09
    59e6:	f8 17       	cp	r31, r24
    59e8:	49 f0       	breq	.+18     	; 0x59fc <menu_flight+0x190>
    59ea:	f3 01       	movw	r30, r6
    59ec:	ea 59       	subi	r30, 0x9A	; 154
    59ee:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if(Config.FlightMode[mode-1].Pitch_type == LOCK)
    59f0:	81 30       	cpi	r24, 0x01	; 1
    59f2:	19 f4       	brne	.+6      	; 0x59fa <menu_flight+0x18e>
				{
					Config.FlightMode[mode - 1].Pitch_limit = 125;
    59f4:	8d e7       	ldi	r24, 0x7D	; 125
    59f6:	80 83       	st	Z, r24
    59f8:	01 c0       	rjmp	.+2      	; 0x59fc <menu_flight+0x190>
				}
				else
				{
					Config.FlightMode[mode - 1].Pitch_limit = 0;
    59fa:	10 82       	st	Z, r1
				}
			}

			if (temp_gyro_yaw != Config.FlightMode[mode-1].Yaw_type)
    59fc:	f3 01       	movw	r30, r6
    59fe:	e7 59       	subi	r30, 0x97	; 151
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	80 81       	ld	r24, Z
    5a04:	28 85       	ldd	r18, Y+8	; 0x08
    5a06:	28 17       	cp	r18, r24
    5a08:	39 f0       	breq	.+14     	; 0x5a18 <menu_flight+0x1ac>
    5a0a:	34 96       	adiw	r30, 0x04	; 4
			{
				if(Config.FlightMode[mode-1].Yaw_type == LOCK)
    5a0c:	81 30       	cpi	r24, 0x01	; 1
    5a0e:	19 f4       	brne	.+6      	; 0x5a16 <menu_flight+0x1aa>
				{
					Config.FlightMode[mode - 1].Yaw_limit = 125;
    5a10:	8d e7       	ldi	r24, 0x7D	; 125
    5a12:	80 83       	st	Z, r24
    5a14:	01 c0       	rjmp	.+2      	; 0x5a18 <menu_flight+0x1ac>
				}
				else
				{
					Config.FlightMode[mode - 1].Yaw_limit = 0;
    5a16:	10 82       	st	Z, r1
				}
			}

			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    5a18:	0e 94 22 31 	call	0x6244	; 0x6244 <UpdateLimits>

			Save_Config_to_EEPROM(); // Save value and return
    5a1c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5a20:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <Wait_BUTTON4>
    5a24:	5e cf       	rjmp	.-324    	; 0x58e2 <menu_flight+0x76>
		}
	}
}
    5a26:	2f 96       	adiw	r28, 0x0f	; 15
    5a28:	0f b6       	in	r0, 0x3f	; 63
    5a2a:	f8 94       	cli
    5a2c:	de bf       	out	0x3e, r29	; 62
    5a2e:	0f be       	out	0x3f, r0	; 63
    5a30:	cd bf       	out	0x3d, r28	; 61
    5a32:	df 91       	pop	r29
    5a34:	cf 91       	pop	r28
    5a36:	1f 91       	pop	r17
    5a38:	0f 91       	pop	r16
    5a3a:	ff 90       	pop	r15
    5a3c:	ef 90       	pop	r14
    5a3e:	df 90       	pop	r13
    5a40:	cf 90       	pop	r12
    5a42:	bf 90       	pop	r11
    5a44:	af 90       	pop	r10
    5a46:	9f 90       	pop	r9
    5a48:	8f 90       	pop	r8
    5a4a:	7f 90       	pop	r7
    5a4c:	6f 90       	pop	r6
    5a4e:	5f 90       	pop	r5
    5a50:	4f 90       	pop	r4
    5a52:	3f 90       	pop	r3
    5a54:	2f 90       	pop	r2
    5a56:	08 95       	ret

00005a58 <do_main_menu_item>:
}


void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	ed 54       	subi	r30, 0x4D	; 77
    5a5e:	f1 09       	sbc	r31, r1
    5a60:	e7 31       	cpi	r30, 0x17	; 23
    5a62:	f1 05       	cpc	r31, r1
    5a64:	b0 f5       	brcc	.+108    	; 0x5ad2 <do_main_menu_item+0x7a>
    5a66:	e7 5b       	subi	r30, 0xB7	; 183
    5a68:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6a:	0c 94 44 42 	jmp	0x8488	; 0x8488 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(3); 		// 1.General
    5a6e:	83 e0       	ldi	r24, 0x03	; 3
    5a70:	01 c0       	rjmp	.+2      	; 0x5a74 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	0c 94 a2 2f 	jmp	0x5f44	; 0x5f44 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_sticks(); 		// 3.Stick polarity	
    5a78:	0c 94 07 13 	jmp	0x260e	; 0x260e <Display_sticks>
			break;
		case MAINSTART+3:
			Display_rcinput();		// 4.RX inputs
    5a7c:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <Display_rcinput>
			break;
		case MAINSTART+4:
			menu_flight(1);			// 5.Flight profile 1
    5a80:	81 e0       	ldi	r24, 0x01	; 1
    5a82:	01 c0       	rjmp	.+2      	; 0x5a86 <do_main_menu_item+0x2e>
			break;
		case MAINSTART+5:
			menu_flight(2); 		// 6.Flight profile 2
    5a84:	82 e0       	ldi	r24, 0x02	; 2
    5a86:	0c 94 36 2c 	jmp	0x586c	; 0x586c <menu_flight>
			break;
		case MAINSTART+6:
			menu_flight(3); 		// 7.Flight profile 3
    5a8a:	83 e0       	ldi	r24, 0x03	; 3
    5a8c:	fc cf       	rjmp	.-8      	; 0x5a86 <do_main_menu_item+0x2e>
			break;
		case MAINSTART+7:
			Display_sensors();		// 8.Sensor calibration
    5a8e:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <Display_sensors>
			break;
		case MAINSTART+8:
			Display_balance();		// 9.Level meter
    5a92:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <Display_balance>
			break;
		case MAINSTART+9:
			menu_mixer(0);			// 9.OUT1 Mixer
    5a96:	80 e0       	ldi	r24, 0x00	; 0
    5a98:	0d c0       	rjmp	.+26     	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+10:
			menu_mixer(1);			// 10.OUT2 Mixer
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	0b c0       	rjmp	.+22     	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+11:
			menu_mixer(2);			// 11.OUT3 Mixer
    5a9e:	82 e0       	ldi	r24, 0x02	; 2
    5aa0:	09 c0       	rjmp	.+18     	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+12:
			menu_mixer(3);			// 12.OUT4 Mixer
    5aa2:	83 e0       	ldi	r24, 0x03	; 3
    5aa4:	07 c0       	rjmp	.+14     	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+13:
			menu_mixer(4);			// 13.OUT5 Mixer
    5aa6:	84 e0       	ldi	r24, 0x04	; 4
    5aa8:	05 c0       	rjmp	.+10     	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+14:
			menu_mixer(5);			// 14.OUT6 Mixer
    5aaa:	85 e0       	ldi	r24, 0x05	; 5
    5aac:	03 c0       	rjmp	.+6      	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+15:
			menu_mixer(6);			// 15.OUT7 Mixer
    5aae:	86 e0       	ldi	r24, 0x06	; 6
    5ab0:	01 c0       	rjmp	.+2      	; 0x5ab4 <do_main_menu_item+0x5c>
			break;
		case MAINSTART+16:
			menu_mixer(7);			// 16.OUT8 Mixer
    5ab2:	87 e0       	ldi	r24, 0x07	; 7
    5ab4:	0c 94 03 2e 	jmp	0x5c06	; 0x5c06 <menu_mixer>
			break;
		case MAINSTART+17:
			menu_servo_setup(1);	// 12.Servo direction
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	09 c0       	rjmp	.+18     	; 0x5ace <do_main_menu_item+0x76>
			break;
		case MAINSTART+18: 
			menu_servo_setup(2); 	// 13.Servo trim (%)
    5abc:	82 e0       	ldi	r24, 0x02	; 2
    5abe:	07 c0       	rjmp	.+14     	; 0x5ace <do_main_menu_item+0x76>
			break;
		case MAINSTART+19:
			menu_servo_setup(3); 	// 14.Neg. Servo trvl. (%)
    5ac0:	83 e0       	ldi	r24, 0x03	; 3
    5ac2:	05 c0       	rjmp	.+10     	; 0x5ace <do_main_menu_item+0x76>
			break;
		case MAINSTART+20:
			menu_servo_setup(4); 	// 15.Pos. Servo trvl. (%)
    5ac4:	84 e0       	ldi	r24, 0x04	; 4
    5ac6:	03 c0       	rjmp	.+6      	; 0x5ace <do_main_menu_item+0x76>
			break;
		case MAINSTART+21:
			menu_rc_setup(2); 		// 16.Failsafe settings
    5ac8:	82 e0       	ldi	r24, 0x02	; 2
    5aca:	d4 cf       	rjmp	.-88     	; 0x5a74 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+22:
			menu_servo_setup(5); 	// 17.Failsafe positions
    5acc:	85 e0       	ldi	r24, 0x05	; 5
    5ace:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <menu_servo_setup>
    5ad2:	08 95       	ret

00005ad4 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    5ad4:	1f 99       	sbic	0x03, 7	; 3
    5ad6:	0a c0       	rjmp	.+20     	; 0x5aec <Wait_BUTTON1+0x18>
    5ad8:	2f e3       	ldi	r18, 0x3F	; 63
    5ada:	8d e0       	ldi	r24, 0x0D	; 13
    5adc:	93 e0       	ldi	r25, 0x03	; 3
    5ade:	21 50       	subi	r18, 0x01	; 1
    5ae0:	80 40       	sbci	r24, 0x00	; 0
    5ae2:	90 40       	sbci	r25, 0x00	; 0
    5ae4:	e1 f7       	brne	.-8      	; 0x5ade <Wait_BUTTON1+0xa>
    5ae6:	00 c0       	rjmp	.+0      	; 0x5ae8 <Wait_BUTTON1+0x14>
    5ae8:	00 00       	nop
    5aea:	f4 cf       	rjmp	.-24     	; 0x5ad4 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    5aec:	08 95       	ret

00005aee <menu_main>:
uint8_t main_top = MAINSTART;
uint8_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    5aee:	af 92       	push	r10
    5af0:	bf 92       	push	r11
    5af2:	cf 92       	push	r12
    5af4:	df 92       	push	r13
    5af6:	ef 92       	push	r14
    5af8:	ff 92       	push	r15
    5afa:	0f 93       	push	r16
    5afc:	1f 93       	push	r17
    5afe:	cf 93       	push	r28
    5b00:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint8_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    5b02:	80 ef       	ldi	r24, 0xF0	; 240
    5b04:	80 93 a6 07 	sts	0x07A6, r24

	// Wait until user's finger is off button 1
	while(BUTTON1 == 0)
    5b08:	1f 99       	sbic	0x03, 7	; 3
    5b0a:	0a c0       	rjmp	.+20     	; 0x5b20 <menu_main+0x32>
    5b0c:	2f e3       	ldi	r18, 0x3F	; 63
    5b0e:	8d e0       	ldi	r24, 0x0D	; 13
    5b10:	93 e0       	ldi	r25, 0x03	; 3
    5b12:	21 50       	subi	r18, 0x01	; 1
    5b14:	80 40       	sbci	r24, 0x00	; 0
    5b16:	90 40       	sbci	r25, 0x00	; 0
    5b18:	e1 f7       	brne	.-8      	; 0x5b12 <menu_main+0x24>
    5b1a:	00 c0       	rjmp	.+0      	; 0x5b1c <menu_main+0x2e>
    5b1c:	00 00       	nop
    5b1e:	f4 cf       	rjmp	.-24     	; 0x5b08 <menu_main+0x1a>
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);

		// If main menu item has changed, reset submenu positions
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    5b20:	23 e0       	ldi	r18, 0x03	; 3
    5b22:	b2 2e       	mov	r11, r18
		
		// If ENTER pressed, jump to menu
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    5b24:	30 ef       	ldi	r19, 0xF0	; 240
    5b26:	a3 2e       	mov	r10, r19
	while(BUTTON1 == 0)
	{
		_delay_ms(50);
	}

	while(button != BACK)
    5b28:	80 91 a6 07 	lds	r24, 0x07A6
    5b2c:	80 37       	cpi	r24, 0x70	; 112
    5b2e:	09 f4       	brne	.+2      	; 0x5b32 <menu_main+0x44>
    5b30:	52 c0       	rjmp	.+164    	; 0x5bd6 <menu_main+0xe8>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    5b32:	80 e0       	ldi	r24, 0x00	; 0
    5b34:	91 e0       	ldi	r25, 0x01	; 1
    5b36:	0e 94 d5 18 	call	0x31aa	; 0x31aa <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    5b3a:	80 e0       	ldi	r24, 0x00	; 0
    5b3c:	0e 94 60 28 	call	0x50c0	; 0x50c0 <print_menu_frame>
    5b40:	c0 e0       	ldi	r28, 0x00	; 0
    5b42:	d0 e0       	ldi	r29, 0x00	; 0
    5b44:	fe 01       	movw	r30, r28
    5b46:	e9 54       	subi	r30, 0x49	; 73
    5b48:	f9 4e       	sbci	r31, 0xE9	; 233
		
		for (uint8_t i = 0; i < 4; i++)
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    5b4a:	24 91       	lpm	r18, Z
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	80 91 06 05 	lds	r24, 0x0506
    5b52:	4a e0       	ldi	r20, 0x0A	; 10
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	6e e1       	ldi	r22, 0x1E	; 30
    5b58:	7a e0       	ldi	r23, 0x0A	; 10
    5b5a:	8c 0f       	add	r24, r28
    5b5c:	0e 94 b6 1a 	call	0x356c	; 0x356c <LCD_Display_Text>
    5b60:	21 96       	adiw	r28, 0x01	; 1
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint8_t i = 0; i < 4; i++)
    5b62:	c4 30       	cpi	r28, 0x04	; 4
    5b64:	d1 05       	cpc	r29, r1
    5b66:	71 f7       	brne	.-36     	; 0x5b44 <menu_main+0x56>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    5b68:	80 91 05 05 	lds	r24, 0x0505
    5b6c:	0e 94 87 2b 	call	0x570e	; 0x570e <print_cursor>
		write_buffer(buffer);
    5b70:	80 e0       	ldi	r24, 0x00	; 0
    5b72:	91 e0       	ldi	r25, 0x01	; 1
    5b74:	0e 94 a3 18 	call	0x3146	; 0x3146 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    5b78:	81 e0       	ldi	r24, 0x01	; 1
    5b7a:	0e 94 04 29 	call	0x5208	; 0x5208 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    5b7e:	8b e2       	ldi	r24, 0x2B	; 43
    5b80:	c8 2e       	mov	r12, r24
    5b82:	85 e0       	ldi	r24, 0x05	; 5
    5b84:	d8 2e       	mov	r13, r24
    5b86:	96 e0       	ldi	r25, 0x06	; 6
    5b88:	e9 2e       	mov	r14, r25
    5b8a:	95 e0       	ldi	r25, 0x05	; 5
    5b8c:	f9 2e       	mov	r15, r25
    5b8e:	05 e0       	ldi	r16, 0x05	; 5
    5b90:	15 e0       	ldi	r17, 0x05	; 5
    5b92:	20 91 a6 07 	lds	r18, 0x07A6
    5b96:	40 e0       	ldi	r20, 0x00	; 0
    5b98:	6d e4       	ldi	r22, 0x4D	; 77
    5b9a:	87 e1       	ldi	r24, 0x17	; 23
    5b9c:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <update_menu>

		// If main menu item has changed, reset submenu positions
		if (main_temp != old_menu)
    5ba0:	80 91 2b 05 	lds	r24, 0x052B
    5ba4:	90 91 2a 05 	lds	r25, 0x052A
    5ba8:	89 17       	cp	r24, r25
    5baa:	49 f0       	breq	.+18     	; 0x5bbe <menu_main+0xd0>
		{
			cursor = LINE0;
    5bac:	b0 92 04 05 	sts	0x0504, r11
			menu_temp = 0;
    5bb0:	10 92 29 05 	sts	0x0529, r1
			old_menu = main_temp;
    5bb4:	80 93 2a 05 	sts	0x052A, r24
			menu_flag = 1;
    5bb8:	91 e0       	ldi	r25, 0x01	; 1
    5bba:	90 93 a8 07 	sts	0x07A8, r25
		}
		
		// If ENTER pressed, jump to menu
		if (button == ENTER)
    5bbe:	90 91 a6 07 	lds	r25, 0x07A6
    5bc2:	90 3e       	cpi	r25, 0xE0	; 224
    5bc4:	09 f0       	breq	.+2      	; 0x5bc8 <menu_main+0xda>
    5bc6:	b0 cf       	rjmp	.-160    	; 0x5b28 <menu_main+0x3a>
		{
			do_main_menu_item(main_temp);
    5bc8:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <do_main_menu_item>
			button = NONE;
    5bcc:	a0 92 a6 07 	sts	0x07A6, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    5bd0:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <Wait_BUTTON1>
    5bd4:	a9 cf       	rjmp	.-174    	; 0x5b28 <menu_main+0x3a>
		}
	}
}
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	1f 91       	pop	r17
    5bdc:	0f 91       	pop	r16
    5bde:	ff 90       	pop	r15
    5be0:	ef 90       	pop	r14
    5be2:	df 90       	pop	r13
    5be4:	cf 90       	pop	r12
    5be6:	bf 90       	pop	r11
    5be8:	af 90       	pop	r10
    5bea:	08 95       	ret

00005bec <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    5bec:	1c 99       	sbic	0x03, 4	; 3
    5bee:	0a c0       	rjmp	.+20     	; 0x5c04 <Wait_BUTTON4+0x18>
    5bf0:	2f e3       	ldi	r18, 0x3F	; 63
    5bf2:	8d e0       	ldi	r24, 0x0D	; 13
    5bf4:	93 e0       	ldi	r25, 0x03	; 3
    5bf6:	21 50       	subi	r18, 0x01	; 1
    5bf8:	80 40       	sbci	r24, 0x00	; 0
    5bfa:	90 40       	sbci	r25, 0x00	; 0
    5bfc:	e1 f7       	brne	.-8      	; 0x5bf6 <Wait_BUTTON4+0xa>
    5bfe:	00 c0       	rjmp	.+0      	; 0x5c00 <Wait_BUTTON4+0x14>
    5c00:	00 00       	nop
    5c02:	f4 cf       	rjmp	.-24     	; 0x5bec <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    5c04:	08 95       	ret

00005c06 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    5c06:	6f 92       	push	r6
    5c08:	7f 92       	push	r7
    5c0a:	8f 92       	push	r8
    5c0c:	af 92       	push	r10
    5c0e:	bf 92       	push	r11
    5c10:	cf 92       	push	r12
    5c12:	df 92       	push	r13
    5c14:	ef 92       	push	r14
    5c16:	ff 92       	push	r15
    5c18:	0f 93       	push	r16
    5c1a:	1f 93       	push	r17
    5c1c:	cf 93       	push	r28
    5c1e:	df 93       	push	r29
    5c20:	00 d0       	rcall	.+0      	; 0x5c22 <menu_mixer+0x1c>
    5c22:	00 d0       	rcall	.+0      	; 0x5c24 <menu_mixer+0x1e>
    5c24:	1f 92       	push	r1
    5c26:	cd b7       	in	r28, 0x3d	; 61
    5c28:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5c2a:	90 91 a8 07 	lds	r25, 0x07A8
    5c2e:	99 23       	and	r25, r25
    5c30:	29 f0       	breq	.+10     	; 0x5c3c <menu_mixer+0x36>
	{
		sub_top = MIXERSTART;
    5c32:	97 ed       	ldi	r25, 0xD7	; 215
    5c34:	90 93 2c 05 	sts	0x052C, r25
		menu_flag = 0;
    5c38:	10 92 a8 07 	sts	0x07A8, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].source_a;
    5c3c:	9f e0       	ldi	r25, 0x0F	; 15
    5c3e:	89 9f       	mul	r24, r25
    5c40:	30 01       	movw	r6, r0
    5c42:	11 24       	eor	r1, r1
    5c44:	c3 01       	movw	r24, r6
    5c46:	8a 57       	subi	r24, 0x7A	; 122
    5c48:	99 4f       	sbci	r25, 0xF9	; 249
    5c4a:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5c4c:	80 91 a6 07 	lds	r24, 0x07A6
    5c50:	80 37       	cpi	r24, 0x70	; 112
    5c52:	09 f4       	brne	.+2      	; 0x5c56 <menu_mixer+0x50>
    5c54:	5a c0       	rjmp	.+180    	; 0x5d0a <menu_mixer+0x104>
	{
		value_ptr = &Config.Channel[i].source_a;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, 1, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    5c56:	80 90 04 05 	lds	r8, 0x0504
    5c5a:	80 e8       	ldi	r24, 0x80	; 128
    5c5c:	a8 2e       	mov	r10, r24
    5c5e:	87 e1       	ldi	r24, 0x17	; 23
    5c60:	b8 2e       	mov	r11, r24
    5c62:	90 e5       	ldi	r25, 0x50	; 80
    5c64:	c9 2e       	mov	r12, r25
    5c66:	e1 2c       	mov	r14, r1
    5c68:	0f e3       	ldi	r16, 0x3F	; 63
    5c6a:	17 e1       	ldi	r17, 0x17	; 23
    5c6c:	21 e0       	ldi	r18, 0x01	; 1
    5c6e:	a3 01       	movw	r20, r6
    5c70:	67 ed       	ldi	r22, 0xD7	; 215
    5c72:	80 91 2c 05 	lds	r24, 0x052C
    5c76:	0e 94 90 2b 	call	0x5720	; 0x5720 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5c7a:	29 e2       	ldi	r18, 0x29	; 41
    5c7c:	c2 2e       	mov	r12, r18
    5c7e:	25 e0       	ldi	r18, 0x05	; 5
    5c80:	d2 2e       	mov	r13, r18
    5c82:	3c e2       	ldi	r19, 0x2C	; 44
    5c84:	e3 2e       	mov	r14, r19
    5c86:	35 e0       	ldi	r19, 0x05	; 5
    5c88:	f3 2e       	mov	r15, r19
    5c8a:	04 e0       	ldi	r16, 0x04	; 4
    5c8c:	15 e0       	ldi	r17, 0x05	; 5
    5c8e:	20 91 a6 07 	lds	r18, 0x07A6
    5c92:	40 e0       	ldi	r20, 0x00	; 0
    5c94:	67 ed       	ldi	r22, 0xD7	; 215
    5c96:	8d e0       	ldi	r24, 0x0D	; 13
    5c98:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    5c9c:	60 91 29 05 	lds	r22, 0x0529
    5ca0:	67 5d       	subi	r22, 0xD7	; 215
    5ca2:	8f e3       	ldi	r24, 0x3F	; 63
    5ca4:	97 e1       	ldi	r25, 0x17	; 23
    5ca6:	0e 94 ad 28 	call	0x515a	; 0x515a <get_menu_range>
    5caa:	29 83       	std	Y+1, r18	; 0x01
    5cac:	3a 83       	std	Y+2, r19	; 0x02
    5cae:	4b 83       	std	Y+3, r20	; 0x03
    5cb0:	5c 83       	std	Y+4, r21	; 0x04
    5cb2:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5cb4:	80 91 a6 07 	lds	r24, 0x07A6
    5cb8:	80 3e       	cpi	r24, 0xE0	; 224
    5cba:	d9 f4       	brne	.+54     	; 0x5cf2 <menu_mixer+0xec>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    5cbc:	80 91 29 05 	lds	r24, 0x0529
    5cc0:	e8 2f       	mov	r30, r24
    5cc2:	f0 e0       	ldi	r31, 0x00	; 0
    5cc4:	e7 55       	subi	r30, 0x57	; 87
    5cc6:	f9 4e       	sbci	r31, 0xE9	; 233
    5cc8:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    5cca:	68 2f       	mov	r22, r24
    5ccc:	70 e0       	ldi	r23, 0x00	; 0
    5cce:	67 5d       	subi	r22, 0xD7	; 215
    5cd0:	71 09       	sbc	r23, r1
    5cd2:	66 0d       	add	r22, r6
    5cd4:	77 1d       	adc	r23, r7
    5cd6:	1f 92       	push	r1
    5cd8:	1f 92       	push	r1
    5cda:	81 2c       	mov	r8, r1
    5cdc:	c1 2c       	mov	r12, r1
    5cde:	e9 80       	ldd	r14, Y+1	; 0x01
    5ce0:	fa 80       	ldd	r15, Y+2	; 0x02
    5ce2:	0b 81       	ldd	r16, Y+3	; 0x03
    5ce4:	1c 81       	ldd	r17, Y+4	; 0x04
    5ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    5ce8:	41 e0       	ldi	r20, 0x01	; 1
    5cea:	0e 94 39 29 	call	0x5272	; 0x5272 <do_menu_item>
    5cee:	0f 90       	pop	r0
    5cf0:	0f 90       	pop	r0
		}

		// Save and exit
		if (button == ENTER)
    5cf2:	80 91 a6 07 	lds	r24, 0x07A6
    5cf6:	80 3e       	cpi	r24, 0xE0	; 224
    5cf8:	09 f0       	breq	.+2      	; 0x5cfc <menu_mixer+0xf6>
    5cfa:	a8 cf       	rjmp	.-176    	; 0x5c4c <menu_mixer+0x46>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    5cfc:	0e 94 22 31 	call	0x6244	; 0x6244 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    5d00:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5d04:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <Wait_BUTTON4>
    5d08:	a1 cf       	rjmp	.-190    	; 0x5c4c <menu_mixer+0x46>
		}
	} // while(button != BACK)
}
    5d0a:	0f 90       	pop	r0
    5d0c:	0f 90       	pop	r0
    5d0e:	0f 90       	pop	r0
    5d10:	0f 90       	pop	r0
    5d12:	0f 90       	pop	r0
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	1f 91       	pop	r17
    5d1a:	0f 91       	pop	r16
    5d1c:	ff 90       	pop	r15
    5d1e:	ef 90       	pop	r14
    5d20:	df 90       	pop	r13
    5d22:	cf 90       	pop	r12
    5d24:	bf 90       	pop	r11
    5d26:	af 90       	pop	r10
    5d28:	8f 90       	pop	r8
    5d2a:	7f 90       	pop	r7
    5d2c:	6f 90       	pop	r6
    5d2e:	08 95       	ret

00005d30 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    5d30:	2f 92       	push	r2
    5d32:	3f 92       	push	r3
    5d34:	4f 92       	push	r4
    5d36:	5f 92       	push	r5
    5d38:	6f 92       	push	r6
    5d3a:	7f 92       	push	r7
    5d3c:	8f 92       	push	r8
    5d3e:	9f 92       	push	r9
    5d40:	af 92       	push	r10
    5d42:	bf 92       	push	r11
    5d44:	cf 92       	push	r12
    5d46:	df 92       	push	r13
    5d48:	ef 92       	push	r14
    5d4a:	ff 92       	push	r15
    5d4c:	0f 93       	push	r16
    5d4e:	1f 93       	push	r17
    5d50:	cf 93       	push	r28
    5d52:	df 93       	push	r29
    5d54:	cd b7       	in	r28, 0x3d	; 61
    5d56:	de b7       	in	r29, 0x3e	; 62
    5d58:	29 97       	sbiw	r28, 0x09	; 9
    5d5a:	0f b6       	in	r0, 0x3f	; 63
    5d5c:	f8 94       	cli
    5d5e:	de bf       	out	0x3e, r29	; 62
    5d60:	0f be       	out	0x3f, r0	; 63
    5d62:	cd bf       	out	0x3d, r28	; 61
    5d64:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5d66:	80 91 a8 07 	lds	r24, 0x07A8
    5d6a:	88 23       	and	r24, r24
    5d6c:	29 f0       	breq	.+10     	; 0x5d78 <menu_servo_setup+0x48>
	{
		sub_top = SERVOSTART;
    5d6e:	88 ee       	ldi	r24, 0xE8	; 232
    5d70:	80 93 2c 05 	sts	0x052C, r24
		menu_flag = 0;
    5d74:	10 92 a8 07 	sts	0x07A8, r1
			}

			// Do not allow servo enable for throttles to prevent accidents
			if ((Config.Channel[menu_temp - SERVOSTART].source_a == THROTTLE) || (Config.Channel[menu_temp - SERVOSTART].source_b == THROTTLE))
			{
				servo_enable = false;
    5d78:	1f 82       	std	Y+7, r1	; 0x07
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    5d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    5d7c:	82 2f       	mov	r24, r18
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	01 97       	sbiw	r24, 0x01	; 1
    5d82:	25 e0       	ldi	r18, 0x05	; 5
    5d84:	28 9f       	mul	r18, r24
    5d86:	20 01       	movw	r4, r0
    5d88:	29 9f       	mul	r18, r25
    5d8a:	50 0c       	add	r5, r0
    5d8c:	11 24       	eor	r1, r1
    5d8e:	92 01       	movw	r18, r4
    5d90:	23 57       	subi	r18, 0x73	; 115
    5d92:	38 4e       	sbci	r19, 0xE8	; 232
    5d94:	29 01       	movw	r4, r18
    5d96:	1c 01       	movw	r2, r24
    5d98:	e3 e0       	ldi	r30, 0x03	; 3
    5d9a:	22 0c       	add	r2, r2
    5d9c:	33 1c       	adc	r3, r3
    5d9e:	ea 95       	dec	r30
    5da0:	e1 f7       	brne	.-8      	; 0x5d9a <menu_servo_setup+0x6a>
    5da2:	c1 01       	movw	r24, r2
    5da4:	8a 55       	subi	r24, 0x5A	; 90
    5da6:	98 4e       	sbci	r25, 0xE8	; 232
    5da8:	99 87       	std	Y+9, r25	; 0x09
    5daa:	88 87       	std	Y+8, r24	; 0x08
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Offset, 3 = Min, 4 = Max, 5 = Failsafe
	while(button != BACK)
    5dac:	80 91 a6 07 	lds	r24, 0x07A6
    5db0:	80 37       	cpi	r24, 0x70	; 112
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <menu_servo_setup+0x86>
    5db4:	ae c0       	rjmp	.+348    	; 0x5f12 <menu_servo_setup+0x1e2>
    5db6:	88 e0       	ldi	r24, 0x08	; 8
    5db8:	91 2c       	mov	r9, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    5dba:	9e 81       	ldd	r25, Y+6	; 0x06
    5dbc:	93 30       	cpi	r25, 0x03	; 3
    5dbe:	c1 f0       	breq	.+48     	; 0x5df0 <menu_servo_setup+0xc0>
    5dc0:	48 f4       	brcc	.+18     	; 0x5dd4 <menu_servo_setup+0xa4>
    5dc2:	92 30       	cpi	r25, 0x02	; 2
    5dc4:	39 f5       	brne	.+78     	; 0x5e14 <menu_servo_setup+0xe4>
				case 1:
					value_ptr = &Config.Servo_reverse[0];
					break;
				case 2:
					value_ptr = &Config.Offset[0];
					servo_enable = true;
    5dc6:	99 24       	eor	r9, r9
    5dc8:	93 94       	inc	r9
			{
				case 1:
					value_ptr = &Config.Servo_reverse[0];
					break;
				case 2:
					value_ptr = &Config.Offset[0];
    5dca:	74 e0       	ldi	r23, 0x04	; 4
    5dcc:	67 2e       	mov	r6, r23
    5dce:	77 e0       	ldi	r23, 0x07	; 7
    5dd0:	77 2e       	mov	r7, r23
    5dd2:	24 c0       	rjmp	.+72     	; 0x5e1c <menu_servo_setup+0xec>
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    5dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    5dd6:	24 30       	cpi	r18, 0x04	; 4
    5dd8:	a1 f0       	breq	.+40     	; 0x5e02 <menu_servo_setup+0xd2>
    5dda:	25 30       	cpi	r18, 0x05	; 5
    5ddc:	d9 f4       	brne	.+54     	; 0x5e14 <menu_servo_setup+0xe4>
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
					servo_enable = true;
					zero_setting = true;
    5dde:	21 e0       	ldi	r18, 0x01	; 1
    5de0:	2f 83       	std	Y+7, r18	; 0x07
					servo_enable = true;
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
					servo_enable = true;
    5de2:	99 24       	eor	r9, r9
    5de4:	93 94       	inc	r9
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
    5de6:	4c e1       	ldi	r20, 0x1C	; 28
    5de8:	64 2e       	mov	r6, r20
    5dea:	47 e0       	ldi	r20, 0x07	; 7
    5dec:	74 2e       	mov	r7, r20
					servo_enable = true;
					zero_setting = true;
					break;
    5dee:	16 c0       	rjmp	.+44     	; 0x5e1c <menu_servo_setup+0xec>
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    5df0:	31 e0       	ldi	r19, 0x01	; 1
    5df2:	3f 83       	std	Y+7, r19	; 0x07
					value_ptr = &Config.Offset[0];
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    5df4:	99 24       	eor	r9, r9
    5df6:	93 94       	inc	r9
				case 2:
					value_ptr = &Config.Offset[0];
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
    5df8:	6c e0       	ldi	r22, 0x0C	; 12
    5dfa:	66 2e       	mov	r6, r22
    5dfc:	67 e0       	ldi	r22, 0x07	; 7
    5dfe:	76 2e       	mov	r7, r22
					servo_enable = true;
					zero_setting = true;
					break;
    5e00:	0d c0       	rjmp	.+26     	; 0x5e1c <menu_servo_setup+0xec>
				case 4:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    5e02:	91 e0       	ldi	r25, 0x01	; 1
    5e04:	9f 83       	std	Y+7, r25	; 0x07
					servo_enable = true;
					zero_setting = true;
					break;
				case 4:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    5e06:	99 24       	eor	r9, r9
    5e08:	93 94       	inc	r9
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 4:
					value_ptr = &Config.max_travel[0];
    5e0a:	54 e1       	ldi	r21, 0x14	; 20
    5e0c:	65 2e       	mov	r6, r21
    5e0e:	57 e0       	ldi	r21, 0x07	; 7
    5e10:	75 2e       	mov	r7, r21
					servo_enable = true;
					zero_setting = true;
					break;
    5e12:	04 c0       	rjmp	.+8      	; 0x5e1c <menu_servo_setup+0xec>
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
			{
				case 1:
					value_ptr = &Config.Servo_reverse[0];
    5e14:	3c ef       	ldi	r19, 0xFC	; 252
    5e16:	63 2e       	mov	r6, r19
    5e18:	36 e0       	ldi	r19, 0x06	; 6
    5e1a:	73 2e       	mov	r7, r19
    5e1c:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Offset, 3 = Min, 4 = Max, 5 = Failsafe
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    5e1e:	69 f6       	brne	.-102    	; 0x5dba <menu_servo_setup+0x8a>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    5e20:	80 90 04 05 	lds	r8, 0x0504
    5e24:	a8 84       	ldd	r10, Y+8	; 0x08
    5e26:	b9 84       	ldd	r11, Y+9	; 0x09
    5e28:	80 e5       	ldi	r24, 0x50	; 80
    5e2a:	c8 2e       	mov	r12, r24
    5e2c:	ee 24       	eor	r14, r14
    5e2e:	e3 94       	inc	r14
    5e30:	82 01       	movw	r16, r4
    5e32:	21 e0       	ldi	r18, 0x01	; 1
    5e34:	a3 01       	movw	r20, r6
    5e36:	68 ee       	ldi	r22, 0xE8	; 232
    5e38:	80 91 2c 05 	lds	r24, 0x052C
    5e3c:	0e 94 90 2b 	call	0x5720	; 0x5720 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5e40:	99 e2       	ldi	r25, 0x29	; 41
    5e42:	c9 2e       	mov	r12, r25
    5e44:	95 e0       	ldi	r25, 0x05	; 5
    5e46:	d9 2e       	mov	r13, r25
    5e48:	2c e2       	ldi	r18, 0x2C	; 44
    5e4a:	e2 2e       	mov	r14, r18
    5e4c:	25 e0       	ldi	r18, 0x05	; 5
    5e4e:	f2 2e       	mov	r15, r18
    5e50:	04 e0       	ldi	r16, 0x04	; 4
    5e52:	15 e0       	ldi	r17, 0x05	; 5
    5e54:	20 91 a6 07 	lds	r18, 0x07A6
    5e58:	40 e0       	ldi	r20, 0x00	; 0
    5e5a:	68 ee       	ldi	r22, 0xE8	; 232
    5e5c:	88 e0       	ldi	r24, 0x08	; 8
    5e5e:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	c2 01       	movw	r24, r4
    5e66:	0e 94 ad 28 	call	0x515a	; 0x515a <get_menu_range>
    5e6a:	29 83       	std	Y+1, r18	; 0x01
    5e6c:	3a 83       	std	Y+2, r19	; 0x02
    5e6e:	4b 83       	std	Y+3, r20	; 0x03
    5e70:	5c 83       	std	Y+4, r21	; 0x04
    5e72:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5e74:	80 91 a6 07 	lds	r24, 0x07A6
    5e78:	80 3e       	cpi	r24, 0xE0	; 224
    5e7a:	09 f0       	breq	.+2      	; 0x5e7e <menu_servo_setup+0x14e>
    5e7c:	3e c0       	rjmp	.+124    	; 0x5efa <menu_servo_setup+0x1ca>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    5e7e:	80 91 29 05 	lds	r24, 0x0529
    5e82:	28 2f       	mov	r18, r24
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	28 5e       	subi	r18, 0xE8	; 232
    5e88:	31 09       	sbc	r19, r1
    5e8a:	f9 01       	movw	r30, r18
    5e8c:	e2 0d       	add	r30, r2
    5e8e:	f3 1d       	adc	r31, r3
    5e90:	ea 55       	subi	r30, 0x5A	; 90
    5e92:	f8 4e       	sbci	r31, 0xE8	; 232
    5e94:	a4 90       	lpm	r10, Z
    5e96:	68 2f       	mov	r22, r24
    5e98:	70 e0       	ldi	r23, 0x00	; 0
			// Zero limits if adjusting
			if (zero_setting)
    5e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    5e9c:	99 23       	and	r25, r25
    5e9e:	31 f0       	breq	.+12     	; 0x5eac <menu_servo_setup+0x17c>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    5ea0:	d3 01       	movw	r26, r6
    5ea2:	a6 0f       	add	r26, r22
    5ea4:	b7 1f       	adc	r27, r23
    5ea6:	a8 5e       	subi	r26, 0xE8	; 232
    5ea8:	b1 09       	sbc	r27, r1
    5eaa:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttles to prevent accidents
			if ((Config.Channel[menu_temp - SERVOSTART].source_a == THROTTLE) || (Config.Channel[menu_temp - SERVOSTART].source_b == THROTTLE))
    5eac:	9f e0       	ldi	r25, 0x0F	; 15
    5eae:	92 9f       	mul	r25, r18
    5eb0:	a0 01       	movw	r20, r0
    5eb2:	93 9f       	mul	r25, r19
    5eb4:	50 0d       	add	r21, r0
    5eb6:	11 24       	eor	r1, r1
    5eb8:	4e 53       	subi	r20, 0x3E	; 62
    5eba:	5a 4f       	sbci	r21, 0xFA	; 250
    5ebc:	da 01       	movw	r26, r20
    5ebe:	ac 53       	subi	r26, 0x3C	; 60
    5ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ec2:	9c 91       	ld	r25, X
    5ec4:	99 23       	and	r25, r25
    5ec6:	31 f0       	breq	.+12     	; 0x5ed4 <menu_servo_setup+0x1a4>
    5ec8:	fa 01       	movw	r30, r20
    5eca:	ea 53       	subi	r30, 0x3A	; 58
    5ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ece:	90 81       	ld	r25, Z
    5ed0:	91 11       	cpse	r25, r1
    5ed2:	01 c0       	rjmp	.+2      	; 0x5ed6 <menu_servo_setup+0x1a6>
			{
				servo_enable = false;
    5ed4:	91 2c       	mov	r9, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    5ed6:	68 5e       	subi	r22, 0xE8	; 232
    5ed8:	71 09       	sbc	r23, r1
    5eda:	66 0d       	add	r22, r6
    5edc:	77 1d       	adc	r23, r7
    5ede:	3f 93       	push	r19
    5ee0:	2f 93       	push	r18
    5ee2:	89 2c       	mov	r8, r9
    5ee4:	c1 2c       	mov	r12, r1
    5ee6:	e9 80       	ldd	r14, Y+1	; 0x01
    5ee8:	fa 80       	ldd	r15, Y+2	; 0x02
    5eea:	0b 81       	ldd	r16, Y+3	; 0x03
    5eec:	1c 81       	ldd	r17, Y+4	; 0x04
    5eee:	2d 81       	ldd	r18, Y+5	; 0x05
    5ef0:	41 e0       	ldi	r20, 0x01	; 1
    5ef2:	0e 94 39 29 	call	0x5272	; 0x5272 <do_menu_item>
    5ef6:	0f 90       	pop	r0
    5ef8:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    5efa:	80 91 a6 07 	lds	r24, 0x07A6
    5efe:	80 3e       	cpi	r24, 0xE0	; 224
    5f00:	09 f0       	breq	.+2      	; 0x5f04 <menu_servo_setup+0x1d4>
    5f02:	54 cf       	rjmp	.-344    	; 0x5dac <menu_servo_setup+0x7c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    5f04:	0e 94 22 31 	call	0x6244	; 0x6244 <UpdateLimits>
						
			Save_Config_to_EEPROM(); // Save value and return
    5f08:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5f0c:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <Wait_BUTTON4>
    5f10:	4d cf       	rjmp	.-358    	; 0x5dac <menu_servo_setup+0x7c>
		}
	}
}
    5f12:	29 96       	adiw	r28, 0x09	; 9
    5f14:	0f b6       	in	r0, 0x3f	; 63
    5f16:	f8 94       	cli
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	0f be       	out	0x3f, r0	; 63
    5f1c:	cd bf       	out	0x3d, r28	; 61
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	1f 91       	pop	r17
    5f24:	0f 91       	pop	r16
    5f26:	ff 90       	pop	r15
    5f28:	ef 90       	pop	r14
    5f2a:	df 90       	pop	r13
    5f2c:	cf 90       	pop	r12
    5f2e:	bf 90       	pop	r11
    5f30:	af 90       	pop	r10
    5f32:	9f 90       	pop	r9
    5f34:	8f 90       	pop	r8
    5f36:	7f 90       	pop	r7
    5f38:	6f 90       	pop	r6
    5f3a:	5f 90       	pop	r5
    5f3c:	4f 90       	pop	r4
    5f3e:	3f 90       	pop	r3
    5f40:	2f 90       	pop	r2
    5f42:	08 95       	ret

00005f44 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    5f44:	2f 92       	push	r2
    5f46:	3f 92       	push	r3
    5f48:	4f 92       	push	r4
    5f4a:	5f 92       	push	r5
    5f4c:	6f 92       	push	r6
    5f4e:	7f 92       	push	r7
    5f50:	8f 92       	push	r8
    5f52:	9f 92       	push	r9
    5f54:	af 92       	push	r10
    5f56:	bf 92       	push	r11
    5f58:	cf 92       	push	r12
    5f5a:	df 92       	push	r13
    5f5c:	ef 92       	push	r14
    5f5e:	ff 92       	push	r15
    5f60:	0f 93       	push	r16
    5f62:	1f 93       	push	r17
    5f64:	cf 93       	push	r28
    5f66:	df 93       	push	r29
    5f68:	cd b7       	in	r28, 0x3d	; 61
    5f6a:	de b7       	in	r29, 0x3e	; 62
    5f6c:	2c 97       	sbiw	r28, 0x0c	; 12
    5f6e:	0f b6       	in	r0, 0x3f	; 63
    5f70:	f8 94       	cli
    5f72:	de bf       	out	0x3e, r29	; 62
    5f74:	0f be       	out	0x3f, r0	; 63
    5f76:	cd bf       	out	0x3d, r28	; 61
    5f78:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t mult = 1;		// Multiplier
	uint8_t offset;			// Index into channel structure
	uint8_t	items;			// Items in group

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5f7a:	80 91 a8 07 	lds	r24, 0x07A8
    5f7e:	88 23       	and	r24, r24
    5f80:	29 f0       	breq	.+10     	; 0x5f8c <menu_rc_setup+0x48>
	{
		sub_top = RCSTART;
    5f82:	85 e9       	ldi	r24, 0x95	; 149
    5f84:	80 93 2c 05 	sts	0x052C, r24
		menu_flag = 0;
    5f88:	10 92 a8 07 	sts	0x07A8, r1
		int8_t temp_type = Config.MixMode;
		int8_t temp_flapchan = Config.FlapChan;
		int8_t temp_RxModeIn = Config.RxModeIn;

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, mult, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5f8c:	2e 81       	ldd	r18, Y+6	; 0x06
    5f8e:	82 2f       	mov	r24, r18
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	01 97       	sbiw	r24, 0x01	; 1
    5f94:	27 e3       	ldi	r18, 0x37	; 55
    5f96:	28 9f       	mul	r18, r24
    5f98:	30 01       	movw	r6, r0
    5f9a:	29 9f       	mul	r18, r25
    5f9c:	70 0c       	add	r7, r0
    5f9e:	11 24       	eor	r1, r1
    5fa0:	d3 01       	movw	r26, r6
    5fa2:	a2 53       	subi	r26, 0x32	; 50
    5fa4:	b8 4e       	sbci	r27, 0xE8	; 232
    5fa6:	3d 01       	movw	r6, r26
    5fa8:	2b e0       	ldi	r18, 0x0B	; 11
    5faa:	28 9f       	mul	r18, r24
    5fac:	10 01       	movw	r2, r0
    5fae:	29 9f       	mul	r18, r25
    5fb0:	30 0c       	add	r3, r0
    5fb2:	11 24       	eor	r1, r1
    5fb4:	91 01       	movw	r18, r2
    5fb6:	2d 58       	subi	r18, 0x8D	; 141
    5fb8:	37 4e       	sbci	r19, 0xE7	; 231
    5fba:	3b 87       	std	Y+11, r19	; 0x0b
    5fbc:	2a 87       	std	Y+10, r18	; 0x0a
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5fbe:	80 91 a6 07 	lds	r24, 0x07A6
    5fc2:	80 37       	cpi	r24, 0x70	; 112
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <menu_rc_setup+0x84>
    5fc6:	18 c1       	rjmp	.+560    	; 0x61f8 <menu_rc_setup+0x2b4>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
    5fc8:	3e 81       	ldd	r19, Y+6	; 0x06
    5fca:	32 30       	cpi	r19, 0x02	; 2
    5fcc:	51 f0       	breq	.+20     	; 0x5fe2 <menu_rc_setup+0x9e>
    5fce:	33 30       	cpi	r19, 0x03	; 3
    5fd0:	81 f4       	brne	.+32     	; 0x5ff2 <menu_rc_setup+0xae>
				value_ptr = &Config.FailsafeType;
				mult = 1;
				break;
			case 3:				// General menu
				offset = RCITEMS + FSITEMS;
				items = GENERALITEMS;
    5fd2:	98 e0       	ldi	r25, 0x08	; 8
				items = FSITEMS;
				value_ptr = &Config.FailsafeType;
				mult = 1;
				break;
			case 3:				// General menu
				offset = RCITEMS + FSITEMS;
    5fd4:	20 e1       	ldi	r18, 0x10	; 16
    5fd6:	92 2e       	mov	r9, r18
				items = GENERALITEMS;
				value_ptr = &Config.MixMode;
    5fd8:	3c e7       	ldi	r19, 0x7C	; 124
    5fda:	43 2e       	mov	r4, r19
    5fdc:	36 e0       	ldi	r19, 0x06	; 6
    5fde:	53 2e       	mov	r5, r19
				mult = 1;
				break;
    5fe0:	0e c0       	rjmp	.+28     	; 0x5ffe <menu_rc_setup+0xba>
				value_ptr = &Config.RxModeIn;
				mult = 1;
				break;
			case 2:				// Failsafe menu
				offset = RCITEMS;
				items = FSITEMS;
    5fe2:	95 e0       	ldi	r25, 0x05	; 5
				items = RCITEMS;
				value_ptr = &Config.RxModeIn;
				mult = 1;
				break;
			case 2:				// Failsafe menu
				offset = RCITEMS;
    5fe4:	4b e0       	ldi	r20, 0x0B	; 11
    5fe6:	94 2e       	mov	r9, r20
				items = FSITEMS;
				value_ptr = &Config.FailsafeType;
    5fe8:	56 e1       	ldi	r21, 0x16	; 22
    5fea:	45 2e       	mov	r4, r21
    5fec:	56 e0       	ldi	r21, 0x06	; 6
    5fee:	55 2e       	mov	r5, r21
    5ff0:	06 c0       	rjmp	.+12     	; 0x5ffe <menu_rc_setup+0xba>
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
		{
			case 1:				// RC setup menu
				offset = 0;
				items = RCITEMS;
    5ff2:	9b e0       	ldi	r25, 0x0B	; 11
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
		{
			case 1:				// RC setup menu
				offset = 0;
    5ff4:	91 2c       	mov	r9, r1
				items = RCITEMS;
				value_ptr = &Config.RxModeIn;
    5ff6:	8b e0       	ldi	r24, 0x0B	; 11
    5ff8:	48 2e       	mov	r4, r24
    5ffa:	86 e0       	ldi	r24, 0x06	; 6
    5ffc:	58 2e       	mov	r5, r24
				value_ptr = &Config.RxModeIn;
				mult = 1;
				break;
		}
		// Save pre-edited values
		int8_t temp_type = Config.MixMode;
    5ffe:	80 91 7c 06 	lds	r24, 0x067C
    6002:	88 87       	std	Y+8, r24	; 0x08
		int8_t temp_flapchan = Config.FlapChan;
    6004:	a0 91 0f 06 	lds	r26, 0x060F
    6008:	af 83       	std	Y+7, r26	; 0x07
		int8_t temp_RxModeIn = Config.RxModeIn;
    600a:	b0 91 0b 06 	lds	r27, 0x060B
    600e:	b9 87       	std	Y+9, r27	; 0x09

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, mult, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6010:	80 91 2c 05 	lds	r24, 0x052C
    6014:	80 90 04 05 	lds	r8, 0x0504
    6018:	aa 84       	ldd	r10, Y+10	; 0x0a
    601a:	bb 84       	ldd	r11, Y+11	; 0x0b
    601c:	b2 e5       	ldi	r27, 0x52	; 82
    601e:	cb 2e       	mov	r12, r27
    6020:	e1 2c       	mov	r14, r1
    6022:	83 01       	movw	r16, r6
    6024:	21 e0       	ldi	r18, 0x01	; 1
    6026:	a2 01       	movw	r20, r4
    6028:	65 e9       	ldi	r22, 0x95	; 149
    602a:	69 0d       	add	r22, r9
    602c:	89 0d       	add	r24, r9
    602e:	9c 87       	std	Y+12, r25	; 0x0c
    6030:	0e 94 90 2b 	call	0x5720	; 0x5720 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    6034:	19 e2       	ldi	r17, 0x29	; 41
    6036:	c1 2e       	mov	r12, r17
    6038:	15 e0       	ldi	r17, 0x05	; 5
    603a:	d1 2e       	mov	r13, r17
    603c:	0c e2       	ldi	r16, 0x2C	; 44
    603e:	e0 2e       	mov	r14, r16
    6040:	05 e0       	ldi	r16, 0x05	; 5
    6042:	f0 2e       	mov	r15, r16
    6044:	04 e0       	ldi	r16, 0x04	; 4
    6046:	15 e0       	ldi	r17, 0x05	; 5
    6048:	20 91 a6 07 	lds	r18, 0x07A6
    604c:	49 2d       	mov	r20, r9
    604e:	65 e9       	ldi	r22, 0x95	; 149
    6050:	9c 85       	ldd	r25, Y+12	; 0x0c
    6052:	89 2f       	mov	r24, r25
    6054:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6058:	60 91 29 05 	lds	r22, 0x0529
    605c:	65 59       	subi	r22, 0x95	; 149
    605e:	69 19       	sub	r22, r9
    6060:	c3 01       	movw	r24, r6
    6062:	0e 94 ad 28 	call	0x515a	; 0x515a <get_menu_range>
    6066:	29 83       	std	Y+1, r18	; 0x01
    6068:	3a 83       	std	Y+2, r19	; 0x02
    606a:	4b 83       	std	Y+3, r20	; 0x03
    606c:	5c 83       	std	Y+4, r21	; 0x04
    606e:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6070:	80 91 a6 07 	lds	r24, 0x07A6
    6074:	80 3e       	cpi	r24, 0xE0	; 224
    6076:	f1 f4       	brne	.+60     	; 0x60b4 <menu_rc_setup+0x170>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    6078:	80 91 29 05 	lds	r24, 0x0529
    607c:	68 2f       	mov	r22, r24
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	65 59       	subi	r22, 0x95	; 149
    6082:	71 09       	sbc	r23, r1
    6084:	69 19       	sub	r22, r9
    6086:	71 09       	sbc	r23, r1
    6088:	fb 01       	movw	r30, r22
    608a:	e2 0d       	add	r30, r2
    608c:	f3 1d       	adc	r31, r3
    608e:	ed 58       	subi	r30, 0x8D	; 141
    6090:	f7 4e       	sbci	r31, 0xE7	; 231
    6092:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), mult, range, 0, text_link, false, 0);
    6094:	64 0d       	add	r22, r4
    6096:	75 1d       	adc	r23, r5
    6098:	1f 92       	push	r1
    609a:	1f 92       	push	r1
    609c:	81 2c       	mov	r8, r1
    609e:	c1 2c       	mov	r12, r1
    60a0:	e9 80       	ldd	r14, Y+1	; 0x01
    60a2:	fa 80       	ldd	r15, Y+2	; 0x02
    60a4:	0b 81       	ldd	r16, Y+3	; 0x03
    60a6:	1c 81       	ldd	r17, Y+4	; 0x04
    60a8:	2d 81       	ldd	r18, Y+5	; 0x05
    60aa:	41 e0       	ldi	r20, 0x01	; 1
    60ac:	0e 94 39 29 	call	0x5272	; 0x5272 <do_menu_item>
    60b0:	0f 90       	pop	r0
    60b2:	0f 90       	pop	r0
		}

		if (button == ENTER)
    60b4:	80 91 a6 07 	lds	r24, 0x07A6
    60b8:	80 3e       	cpi	r24, 0xE0	; 224
    60ba:	09 f0       	breq	.+2      	; 0x60be <menu_rc_setup+0x17a>
    60bc:	80 cf       	rjmp	.-256    	; 0x5fbe <menu_rc_setup+0x7a>
		{
			// Update Ch5. mixer with source from Config.FlapChan if in Aeroplane mode and source changed
			if ((Config.MixMode == AEROPLANE) && (Config.FlapChan != temp_flapchan))
    60be:	60 91 7c 06 	lds	r22, 0x067C
    60c2:	61 11       	cpse	r22, r1
    60c4:	06 c0       	rjmp	.+12     	; 0x60d2 <menu_rc_setup+0x18e>
    60c6:	80 91 0f 06 	lds	r24, 0x060F
    60ca:	2f 81       	ldd	r18, Y+7	; 0x07
    60cc:	82 13       	cpse	r24, r18
			{
				Config.Channel[CH5].source_a = Config.FlapChan;
    60ce:	80 93 c2 06 	sts	0x06C2, r24
			}

			// Reset serial in channel masks every time the input type is changed
			if (temp_RxModeIn != Config.RxModeIn)
    60d2:	80 91 0b 06 	lds	r24, 0x060B
    60d6:	39 85       	ldd	r19, Y+9	; 0x09
    60d8:	38 13       	cpse	r19, r24
    60da:	05 c0       	rjmp	.+10     	; 0x60e6 <menu_rc_setup+0x1a2>
					}
				}
			}

			// If model type has changed, reload preset
			if ((section == 3) && (temp_type != Config.MixMode)) 
    60dc:	8e 81       	ldd	r24, Y+6	; 0x06
    60de:	83 30       	cpi	r24, 0x03	; 3
    60e0:	09 f0       	breq	.+2      	; 0x60e4 <menu_rc_setup+0x1a0>
    60e2:	62 c0       	rjmp	.+196    	; 0x61a8 <menu_rc_setup+0x264>
    60e4:	36 c0       	rjmp	.+108    	; 0x6152 <menu_rc_setup+0x20e>
			}

			// Reset serial in channel masks every time the input type is changed
			if (temp_RxModeIn != Config.RxModeIn)
			{
				Xtreme_Chanmask = 0;
    60e6:	10 92 7d 07 	sts	0x077D, r1
    60ea:	10 92 7c 07 	sts	0x077C, r1
				Xtreme_RSS = 0;
    60ee:	10 92 83 07 	sts	0x0783, r1
				Spektrum_Chanmask_0 = 0;	
    60f2:	10 92 a3 07 	sts	0x07A3, r1
    60f6:	10 92 a2 07 	sts	0x07A2, r1
				Spektrum_Chanmask_1 = 0;		
    60fa:	10 92 9e 07 	sts	0x079E, r1
    60fe:	10 92 9d 07 	sts	0x079D, r1
				Spektrum_frameloss = 0;
    6102:	10 92 82 07 	sts	0x0782, r1
				SBUS_Flags = 0;
    6106:	10 92 44 05 	sts	0x0544, r1
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					RxChannel[i] = 0;
					
					// Unused Spektrum channels set to NULL
					if (Config.RxModeOut == SPEKTRUM)
    610a:	70 91 0c 06 	lds	r23, 0x060C
    610e:	80 e0       	ldi	r24, 0x00	; 0
    6110:	90 e0       	ldi	r25, 0x00	; 0
						ExtChannel[i] = 0xFFFF;
					}	
					// Unused channels set to mid-way
					else if (Config.RxModeOut == SBUS)
					{
						ExtChannel[i] = 0x400;
    6112:	20 e0       	ldi	r18, 0x00	; 0
    6114:	34 e0       	ldi	r19, 0x04	; 4
					RxChannel[i] = 0;
					
					// Unused Spektrum channels set to NULL
					if (Config.RxModeOut == SPEKTRUM)
					{
						ExtChannel[i] = 0xFFFF;
    6116:	4f ef       	ldi	r20, 0xFF	; 255
    6118:	5f ef       	ldi	r21, 0xFF	; 255
				SBUS_Flags = 0;
				
				// Clear channel data
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					RxChannel[i] = 0;
    611a:	fc 01       	movw	r30, r24
    611c:	ee 0f       	add	r30, r30
    611e:	ff 1f       	adc	r31, r31
    6120:	df 01       	movw	r26, r30
    6122:	a6 5a       	subi	r26, 0xA6	; 166
    6124:	b8 4f       	sbci	r27, 0xF8	; 248
    6126:	11 96       	adiw	r26, 0x01	; 1
    6128:	1c 92       	st	X, r1
    612a:	1e 92       	st	-X, r1
    612c:	e5 59       	subi	r30, 0x95	; 149
    612e:	f8 4f       	sbci	r31, 0xF8	; 248
					
					// Unused Spektrum channels set to NULL
					if (Config.RxModeOut == SPEKTRUM)
    6130:	72 30       	cpi	r23, 0x02	; 2
    6132:	19 f4       	brne	.+6      	; 0x613a <menu_rc_setup+0x1f6>
					{
						ExtChannel[i] = 0xFFFF;
    6134:	51 83       	std	Z+1, r21	; 0x01
    6136:	40 83       	st	Z, r20
    6138:	07 c0       	rjmp	.+14     	; 0x6148 <menu_rc_setup+0x204>
					}	
					// Unused channels set to mid-way
					else if (Config.RxModeOut == SBUS)
    613a:	71 30       	cpi	r23, 0x01	; 1
    613c:	19 f4       	brne	.+6      	; 0x6144 <menu_rc_setup+0x200>
					{
						ExtChannel[i] = 0x400;
    613e:	31 83       	std	Z+1, r19	; 0x01
    6140:	20 83       	st	Z, r18
    6142:	02 c0       	rjmp	.+4      	; 0x6148 <menu_rc_setup+0x204>
					}
					// Xtreme doesn't care
					else
					{
						ExtChannel[i] = 0;
    6144:	11 82       	std	Z+1, r1	; 0x01
    6146:	10 82       	st	Z, r1
    6148:	01 96       	adiw	r24, 0x01	; 1
				Spektrum_Chanmask_1 = 0;		
				Spektrum_frameloss = 0;
				SBUS_Flags = 0;
				
				// Clear channel data
				for (i = 0; i < MAX_RC_CHANNELS; i++)
    614a:	88 30       	cpi	r24, 0x08	; 8
    614c:	91 05       	cpc	r25, r1
    614e:	29 f7       	brne	.-54     	; 0x611a <menu_rc_setup+0x1d6>
    6150:	c5 cf       	rjmp	.-118    	; 0x60dc <menu_rc_setup+0x198>
					}
				}
			}

			// If model type has changed, reload preset
			if ((section == 3) && (temp_type != Config.MixMode)) 
    6152:	98 85       	ldd	r25, Y+8	; 0x08
    6154:	96 17       	cp	r25, r22
    6156:	41 f1       	breq	.+80     	; 0x61a8 <menu_rc_setup+0x264>
			{
				switch(Config.MixMode)  // Load selected mix
    6158:	61 30       	cpi	r22, 0x01	; 1
    615a:	39 f0       	breq	.+14     	; 0x616a <menu_rc_setup+0x226>
    615c:	62 30       	cpi	r22, 0x02	; 2
    615e:	51 f0       	breq	.+20     	; 0x6174 <menu_rc_setup+0x230>
    6160:	61 11       	cpse	r22, r1
    6162:	22 c0       	rjmp	.+68     	; 0x61a8 <menu_rc_setup+0x264>
				{
					case AEROPLANE:
						get_preset_mix(AEROPLANE_MIX);
    6164:	8c e0       	ldi	r24, 0x0C	; 12
    6166:	99 e1       	ldi	r25, 0x19	; 25
    6168:	02 c0       	rjmp	.+4      	; 0x616e <menu_rc_setup+0x22a>
						break;	
					case FWING:
						get_preset_mix(FLYING_WING_MIX);
    616a:	84 e9       	ldi	r24, 0x94	; 148
    616c:	98 e1       	ldi	r25, 0x18	; 24
    616e:	0e 94 15 31 	call	0x622a	; 0x622a <get_preset_mix>
						break;
    6172:	1a c0       	rjmp	.+52     	; 0x61a8 <menu_rc_setup+0x264>
					case MANUAL:
						// Clear all channel info
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));
    6174:	88 e7       	ldi	r24, 0x78	; 120
    6176:	e4 e8       	ldi	r30, 0x84	; 132
    6178:	f6 e0       	ldi	r31, 0x06	; 6
    617a:	df 01       	movw	r26, r30
    617c:	1d 92       	st	X+, r1
    617e:	8a 95       	dec	r24
    6180:	e9 f7       	brne	.-6      	; 0x617c <menu_rc_setup+0x238>
    6182:	e1 e9       	ldi	r30, 0x91	; 145
    6184:	f6 e0       	ldi	r31, 0x06	; 6

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
    6186:	80 e0       	ldi	r24, 0x00	; 0
						{
							Config.Channel[i].source_a = i;			// Set to mirror the inputs
							Config.Channel[i].source_a_volume = 100;
    6188:	24 e6       	ldi	r18, 0x64	; 100
							Config.Channel[i].source_b = NOCHAN;
    618a:	98 e0       	ldi	r25, 0x08	; 8
    618c:	df 01       	movw	r26, r30
    618e:	1b 97       	sbiw	r26, 0x0b	; 11
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
						{
							Config.Channel[i].source_a = i;			// Set to mirror the inputs
    6190:	8c 93       	st	X, r24
    6192:	11 96       	adiw	r26, 0x01	; 1
							Config.Channel[i].source_a_volume = 100;
    6194:	2c 93       	st	X, r18
    6196:	11 96       	adiw	r26, 0x01	; 1
							Config.Channel[i].source_b = NOCHAN;
    6198:	9c 93       	st	X, r25
    619a:	17 96       	adiw	r26, 0x07	; 7
							Config.Channel[i].output_b = UNUSED;
    619c:	9c 93       	st	X, r25
							Config.Channel[i].output_c = UNUSED;
    619e:	90 83       	st	Z, r25
					case MANUAL:
						// Clear all channel info
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
    61a0:	8f 5f       	subi	r24, 0xFF	; 255
    61a2:	3f 96       	adiw	r30, 0x0f	; 15
    61a4:	88 30       	cpi	r24, 0x08	; 8
    61a6:	91 f7       	brne	.-28     	; 0x618c <menu_rc_setup+0x248>
					default:
						break;
				}
			}

			init_int();				// In case RC type has changed, reinitialise interrupts
    61a8:	0e 94 28 28 	call	0x5050	; 0x5050 <init_int>
			init_uart();			// and UART
    61ac:	0e 94 45 3c 	call	0x788a	; 0x788a <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    61b0:	0e 94 22 31 	call	0x6244	; 0x6244 <UpdateLimits>

#ifdef KK21
			// Update MPU6050 LPF
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    61b4:	46 e0       	ldi	r20, 0x06	; 6
    61b6:	80 91 83 06 	lds	r24, 0x0683
    61ba:	48 1b       	sub	r20, r24
    61bc:	6a e1       	ldi	r22, 0x1A	; 26
    61be:	80 ed       	ldi	r24, 0xD0	; 208
    61c0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <writeI2Cbyte>
#endif
			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    61c4:	20 91 0d 06 	lds	r18, 0x060D
    61c8:	a3 ec       	ldi	r26, 0xC3	; 195
    61ca:	b5 e0       	ldi	r27, 0x05	; 5
    61cc:	80 e0       	ldi	r24, 0x00	; 0
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	fc 01       	movw	r30, r24
    61d2:	21 30       	cpi	r18, 0x01	; 1
    61d4:	19 f4       	brne	.+6      	; 0x61dc <menu_rc_setup+0x298>
    61d6:	ea 50       	subi	r30, 0x0A	; 10
    61d8:	ff 4f       	sbci	r31, 0xFF	; 255
    61da:	02 c0       	rjmp	.+4      	; 0x61e0 <menu_rc_setup+0x29c>
    61dc:	e2 50       	subi	r30, 0x02	; 2
    61de:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    61e0:	e4 91       	lpm	r30, Z
    61e2:	ec 93       	st	X, r30
    61e4:	01 96       	adiw	r24, 0x01	; 1
    61e6:	11 96       	adiw	r26, 0x01	; 1
#ifdef KK21
			// Update MPU6050 LPF
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
#endif
			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    61e8:	88 30       	cpi	r24, 0x08	; 8
    61ea:	91 05       	cpc	r25, r1
    61ec:	89 f7       	brne	.-30     	; 0x61d0 <menu_rc_setup+0x28c>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
				}
			}

			Save_Config_to_EEPROM(); // Save value and return
    61ee:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    61f2:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <Wait_BUTTON4>
    61f6:	e3 ce       	rjmp	.-570    	; 0x5fbe <menu_rc_setup+0x7a>
		}
	}
}
    61f8:	2c 96       	adiw	r28, 0x0c	; 12
    61fa:	0f b6       	in	r0, 0x3f	; 63
    61fc:	f8 94       	cli
    61fe:	de bf       	out	0x3e, r29	; 62
    6200:	0f be       	out	0x3f, r0	; 63
    6202:	cd bf       	out	0x3d, r28	; 61
    6204:	df 91       	pop	r29
    6206:	cf 91       	pop	r28
    6208:	1f 91       	pop	r17
    620a:	0f 91       	pop	r16
    620c:	ff 90       	pop	r15
    620e:	ef 90       	pop	r14
    6210:	df 90       	pop	r13
    6212:	cf 90       	pop	r12
    6214:	bf 90       	pop	r11
    6216:	af 90       	pop	r10
    6218:	9f 90       	pop	r9
    621a:	8f 90       	pop	r8
    621c:	7f 90       	pop	r7
    621e:	6f 90       	pop	r6
    6220:	5f 90       	pop	r5
    6222:	4f 90       	pop	r4
    6224:	3f 90       	pop	r3
    6226:	2f 90       	pop	r2
    6228:	08 95       	ret

0000622a <get_preset_mix>:

// Get preset mix from Program memory
void get_preset_mix(const channel_t* preset)
{
	// Clear all channels first
	memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));
    622a:	28 e7       	ldi	r18, 0x78	; 120
    622c:	e4 e8       	ldi	r30, 0x84	; 132
    622e:	f6 e0       	ldi	r31, 0x06	; 6
    6230:	df 01       	movw	r26, r30
    6232:	1d 92       	st	X+, r1
    6234:	2a 95       	dec	r18
    6236:	e9 f7       	brne	.-6      	; 0x6232 <get_preset_mix+0x8>
	memcpy_P(&Config.Channel[0].value,&preset[0].value,(sizeof(channel_t) * MAX_OUTPUTS));
    6238:	48 e7       	ldi	r20, 0x78	; 120
    623a:	50 e0       	ldi	r21, 0x00	; 0
    623c:	bc 01       	movw	r22, r24
    623e:	cf 01       	movw	r24, r30
    6240:	0c 94 9d 42 	jmp	0x853a	; 0x853a <memcpy_P>

00006244 <UpdateLimits>:
}

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
void UpdateLimits(void)
{
    6244:	af 92       	push	r10
    6246:	bf 92       	push	r11
    6248:	cf 92       	push	r12
    624a:	df 92       	push	r13
    624c:	ef 92       	push	r14
    624e:	ff 92       	push	r15
    6250:	0f 93       	push	r16
    6252:	1f 93       	push	r17
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
    6258:	00 d0       	rcall	.+0      	; 0x625a <UpdateLimits+0x16>
    625a:	00 d0       	rcall	.+0      	; 0x625c <UpdateLimits+0x18>
    625c:	00 d0       	rcall	.+0      	; 0x625e <UpdateLimits+0x1a>
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int8_t limits[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll_limit, Config.FlightMode[Config.Flight].Pitch_limit, Config.FlightMode[Config.Flight].Yaw_limit};
    6262:	80 91 46 07 	lds	r24, 0x0746
    6266:	26 e1       	ldi	r18, 0x16	; 22
    6268:	82 02       	muls	r24, r18
    626a:	c0 01       	movw	r24, r0
    626c:	11 24       	eor	r1, r1
    626e:	8e 53       	subi	r24, 0x3E	; 62
    6270:	9a 4f       	sbci	r25, 0xFA	; 250
    6272:	fc 01       	movw	r30, r24
    6274:	e1 5a       	subi	r30, 0xA1	; 161
    6276:	ff 4f       	sbci	r31, 0xFF	; 255
    6278:	20 81       	ld	r18, Z
    627a:	2c 83       	std	Y+4, r18	; 0x04
    627c:	37 96       	adiw	r30, 0x07	; 7
    627e:	20 81       	ld	r18, Z
    6280:	2d 83       	std	Y+5, r18	; 0x05
    6282:	37 96       	adiw	r30, 0x07	; 7
    6284:	20 81       	ld	r18, Z
    6286:	2e 83       	std	Y+6, r18	; 0x06
	int32_t temp32, gain32;
	int8_t gains[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.I_mult, Config.FlightMode[Config.Flight].Pitch.I_mult, Config.FlightMode[Config.Flight].Yaw.I_mult};
    6288:	70 97       	sbiw	r30, 0x10	; 16
    628a:	20 81       	ld	r18, Z
    628c:	29 83       	std	Y+1, r18	; 0x01
    628e:	37 96       	adiw	r30, 0x07	; 7
    6290:	20 81       	ld	r18, Z
    6292:	2a 83       	std	Y+2, r18	; 0x02
    6294:	37 96       	adiw	r30, 0x07	; 7
    6296:	80 81       	ld	r24, Z
    6298:	8b 83       	std	Y+3, r24	; 0x03

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    629a:	80 91 7f 06 	lds	r24, 0x067F
    629e:	99 27       	eor	r25, r25
    62a0:	87 fd       	sbrc	r24, 7
    62a2:	90 95       	com	r25
    62a4:	a9 2f       	mov	r26, r25
    62a6:	b9 2f       	mov	r27, r25
    62a8:	89 30       	cpi	r24, 0x09	; 9
    62aa:	91 05       	cpc	r25, r1
    62ac:	08 f5       	brcc	.+66     	; 0x62f0 <UpdateLimits+0xac>
    62ae:	fc 01       	movw	r30, r24
    62b0:	e0 5a       	subi	r30, 0xA0	; 160
    62b2:	ff 4f       	sbci	r31, 0xFF	; 255
    62b4:	0c 94 44 42 	jmp	0x8488	; 0x8488 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    62b8:	80 e4       	ldi	r24, 0x40	; 64
    62ba:	91 e0       	ldi	r25, 0x01	; 1
    62bc:	14 c0       	rjmp	.+40     	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    62be:	8a e4       	ldi	r24, 0x4A	; 74
    62c0:	91 e0       	ldi	r25, 0x01	; 1
    62c2:	11 c0       	rjmp	.+34     	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    62c4:	84 e5       	ldi	r24, 0x54	; 84
    62c6:	91 e0       	ldi	r25, 0x01	; 1
    62c8:	0e c0       	rjmp	.+28     	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    62ca:	8e e5       	ldi	r24, 0x5E	; 94
    62cc:	91 e0       	ldi	r25, 0x01	; 1
    62ce:	0b c0       	rjmp	.+22     	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    62d0:	88 e6       	ldi	r24, 0x68	; 104
    62d2:	91 e0       	ldi	r25, 0x01	; 1
    62d4:	08 c0       	rjmp	.+16     	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    62d6:	82 e7       	ldi	r24, 0x72	; 114
    62d8:	91 e0       	ldi	r25, 0x01	; 1
    62da:	05 c0       	rjmp	.+10     	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    62dc:	8c e7       	ldi	r24, 0x7C	; 124
    62de:	91 e0       	ldi	r25, 0x01	; 1
    62e0:	02 c0       	rjmp	.+4      	; 0x62e6 <UpdateLimits+0xa2>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    62e2:	86 e8       	ldi	r24, 0x86	; 134
    62e4:	91 e0       	ldi	r25, 0x01	; 1
    62e6:	90 93 77 06 	sts	0x0677, r25
    62ea:	80 93 76 06 	sts	0x0676, r24
			break;
    62ee:	04 c0       	rjmp	.+8      	; 0x62f8 <UpdateLimits+0xb4>
		default:
			Config.PowerTriggerActual = 0;			// Off
    62f0:	10 92 77 06 	sts	0x0677, r1
    62f4:	10 92 76 06 	sts	0x0676, r1
			break;
	}
	
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    62f8:	20 91 26 05 	lds	r18, 0x0526
    62fc:	30 91 27 05 	lds	r19, 0x0527
    6300:	80 91 76 06 	lds	r24, 0x0676
    6304:	90 91 77 06 	lds	r25, 0x0677
    6308:	26 36       	cpi	r18, 0x66	; 102
    630a:	48 e0       	ldi	r20, 0x08	; 8
    630c:	34 07       	cpc	r19, r20
    630e:	c0 f0       	brcs	.+48     	; 0x6340 <UpdateLimits+0xfc>
	{
		Config.PowerTriggerActual *= 6;
    6310:	46 e0       	ldi	r20, 0x06	; 6
    6312:	48 9f       	mul	r20, r24
    6314:	90 01       	movw	r18, r0
    6316:	49 9f       	mul	r20, r25
    6318:	30 0d       	add	r19, r0
    631a:	11 24       	eor	r1, r1
    631c:	30 93 77 06 	sts	0x0677, r19
    6320:	20 93 76 06 	sts	0x0676, r18
    6324:	7e 01       	movw	r14, r28
    6326:	64 e0       	ldi	r22, 0x04	; 4
    6328:	e6 0e       	add	r14, r22
    632a:	f1 1c       	adc	r15, r1
    632c:	0d e5       	ldi	r16, 0x5D	; 93
    632e:	16 e0       	ldi	r17, 0x06	; 6
    6330:	ce 01       	movw	r24, r28
    6332:	01 96       	adiw	r24, 0x01	; 1
    6334:	6c 01       	movw	r12, r24
    6336:	5e 01       	movw	r10, r28
    6338:	97 e0       	ldi	r25, 0x07	; 7
    633a:	a9 0e       	add	r10, r25
    633c:	b1 1c       	adc	r11, r1
    633e:	25 c0       	rjmp	.+74     	; 0x638a <UpdateLimits+0x146>
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    6340:	a9 01       	movw	r20, r18
    6342:	42 5c       	subi	r20, 0xC2	; 194
    6344:	56 40       	sbci	r21, 0x06	; 6
    6346:	44 3a       	cpi	r20, 0xA4	; 164
    6348:	51 40       	sbci	r21, 0x01	; 1
    634a:	10 f4       	brcc	.+4      	; 0x6350 <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 5;
    634c:	45 e0       	ldi	r20, 0x05	; 5
    634e:	e1 cf       	rjmp	.-62     	; 0x6312 <UpdateLimits+0xce>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    6350:	a9 01       	movw	r20, r18
    6352:	44 51       	subi	r20, 0x14	; 20
    6354:	55 40       	sbci	r21, 0x05	; 5
    6356:	4e 3a       	cpi	r20, 0xAE	; 174
    6358:	51 40       	sbci	r21, 0x01	; 1
    635a:	28 f4       	brcc	.+10     	; 0x6366 <UpdateLimits+0x122>
	{
		Config.PowerTriggerActual *= 4;
    635c:	88 0f       	add	r24, r24
    635e:	99 1f       	adc	r25, r25
    6360:	88 0f       	add	r24, r24
    6362:	99 1f       	adc	r25, r25
    6364:	0d c0       	rjmp	.+26     	; 0x6380 <UpdateLimits+0x13c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    6366:	24 58       	subi	r18, 0x84	; 132
    6368:	33 40       	sbci	r19, 0x03	; 3
    636a:	20 39       	cpi	r18, 0x90	; 144
    636c:	31 40       	sbci	r19, 0x01	; 1
    636e:	30 f4       	brcc	.+12     	; 0x637c <UpdateLimits+0x138>
	{
		Config.PowerTriggerActual *= 3;
    6370:	9c 01       	movw	r18, r24
    6372:	22 0f       	add	r18, r18
    6374:	33 1f       	adc	r19, r19
    6376:	28 0f       	add	r18, r24
    6378:	39 1f       	adc	r19, r25
    637a:	d0 cf       	rjmp	.-96     	; 0x631c <UpdateLimits+0xd8>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    637c:	88 0f       	add	r24, r24
    637e:	99 1f       	adc	r25, r25
    6380:	90 93 77 06 	sts	0x0677, r25
    6384:	80 93 76 06 	sts	0x0676, r24
    6388:	cd cf       	rjmp	.-102    	; 0x6324 <UpdateLimits+0xe0>
	}

	// Update I_term limits
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		temp32 	= limits[i]; 						// Promote
    638a:	f7 01       	movw	r30, r14
    638c:	a1 91       	ld	r26, Z+
    638e:	7f 01       	movw	r14, r30

		// I-term output (throw). Convert from % to actual count
		// A value of 80,000 results in +/- 1250 or full throw at the output stage
		// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
		Config.Raw_I_Limits[i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6390:	bb 27       	eor	r27, r27
    6392:	a7 fd       	sbrc	r26, 7
    6394:	b0 95       	com	r27
    6396:	20 e8       	ldi	r18, 0x80	; 128
    6398:	32 e0       	ldi	r19, 0x02	; 2
    639a:	0e 94 61 42 	call	0x84c2	; 0x84c2 <__usmulhisi3>
    639e:	d8 01       	movw	r26, r16
    63a0:	6d 93       	st	X+, r22
    63a2:	7d 93       	st	X+, r23
    63a4:	8d 93       	st	X+, r24
    63a6:	9d 93       	st	X+, r25
    63a8:	8d 01       	movw	r16, r26

		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 32) / gain :)

		if (gains[i] != 0)
    63aa:	f6 01       	movw	r30, r12
    63ac:	21 91       	ld	r18, Z+
    63ae:	6f 01       	movw	r12, r30
    63b0:	22 23       	and	r18, r18
    63b2:	b1 f0       	breq	.+44     	; 0x63e0 <UpdateLimits+0x19c>
		{
			gain32 = gains[i];						// Promote gain value
			Config.Raw_I_Constrain[i] = (Config.Raw_I_Limits[i] << 5) / gain32;
    63b4:	e5 e0       	ldi	r30, 0x05	; 5
    63b6:	66 0f       	add	r22, r22
    63b8:	77 1f       	adc	r23, r23
    63ba:	88 1f       	adc	r24, r24
    63bc:	99 1f       	adc	r25, r25
    63be:	ea 95       	dec	r30
    63c0:	d1 f7       	brne	.-12     	; 0x63b6 <UpdateLimits+0x172>
		// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 32) / gain :)

		if (gains[i] != 0)
		{
			gain32 = gains[i];						// Promote gain value
    63c2:	33 27       	eor	r19, r19
    63c4:	27 fd       	sbrc	r18, 7
    63c6:	30 95       	com	r19
    63c8:	43 2f       	mov	r20, r19
    63ca:	53 2f       	mov	r21, r19
			Config.Raw_I_Constrain[i] = (Config.Raw_I_Limits[i] << 5) / gain32;
    63cc:	0e 94 25 42 	call	0x844a	; 0x844a <__divmodsi4>
    63d0:	d8 01       	movw	r26, r16
    63d2:	18 96       	adiw	r26, 0x08	; 8
    63d4:	2d 93       	st	X+, r18
    63d6:	3d 93       	st	X+, r19
    63d8:	4d 93       	st	X+, r20
    63da:	5c 93       	st	X, r21
    63dc:	1b 97       	sbiw	r26, 0x0b	; 11
    63de:	05 c0       	rjmp	.+10     	; 0x63ea <UpdateLimits+0x1a6>
		}
		else
		{
			Config.Raw_I_Constrain[i] = 0;
    63e0:	fd 01       	movw	r30, r26
    63e2:	10 86       	std	Z+8, r1	; 0x08
    63e4:	11 86       	std	Z+9, r1	; 0x09
    63e6:	12 86       	std	Z+10, r1	; 0x0a
    63e8:	13 86       	std	Z+11, r1	; 0x0b
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term limits
	for (i = 0; i < NUMBEROFAXIS; i++)
    63ea:	ea 14       	cp	r14, r10
    63ec:	fb 04       	cpc	r15, r11
    63ee:	69 f6       	brne	.-102    	; 0x638a <UpdateLimits+0x146>
    63f0:	4c e0       	ldi	r20, 0x0C	; 12
    63f2:	57 e0       	ldi	r21, 0x07	; 7
    63f4:	24 e1       	ldi	r18, 0x14	; 20
    63f6:	37 e0       	ldi	r19, 0x07	; 7
    63f8:	8c e1       	ldi	r24, 0x1C	; 28
    63fa:	97 e0       	ldi	r25, 0x07	; 7
    63fc:	64 e0       	ldi	r22, 0x04	; 4
    63fe:	e6 2e       	mov	r14, r22
    6400:	67 e0       	ldi	r22, 0x07	; 7
    6402:	f6 2e       	mov	r15, r22
    6404:	e2 ec       	ldi	r30, 0xC2	; 194
    6406:	f5 e0       	ldi	r31, 0x05	; 5
    6408:	10 e0       	ldi	r17, 0x00	; 0
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
    640a:	da 01       	movw	r26, r20
    640c:	6d 91       	ld	r22, X+
    640e:	ad 01       	movw	r20, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6410:	ba e0       	ldi	r27, 0x0A	; 10
    6412:	6b 02       	muls	r22, r27
    6414:	b0 01       	movw	r22, r0
    6416:	11 24       	eor	r1, r1
    6418:	6a 55       	subi	r22, 0x5A	; 90
    641a:	71 4f       	sbci	r23, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
    641c:	72 87       	std	Z+10, r23	; 0x0a
    641e:	61 87       	std	Z+9, r22	; 0x09
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6420:	d9 01       	movw	r26, r18
    6422:	6d 91       	ld	r22, X+
    6424:	9d 01       	movw	r18, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6426:	ba e0       	ldi	r27, 0x0A	; 10
    6428:	6b 02       	muls	r22, r27
    642a:	b0 01       	movw	r22, r0
    642c:	11 24       	eor	r1, r1
    642e:	6a 55       	subi	r22, 0x5A	; 90
    6430:	71 4f       	sbci	r23, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6432:	74 87       	std	Z+12, r23	; 0x0c
    6434:	63 87       	std	Z+11, r22	; 0x0b
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
    6436:	dc 01       	movw	r26, r24
    6438:	6d 91       	ld	r22, X+
    643a:	cd 01       	movw	r24, r26
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    643c:	ba e0       	ldi	r27, 0x0A	; 10
    643e:	6b 02       	muls	r22, r27
    6440:	b0 01       	movw	r22, r0
    6442:	11 24       	eor	r1, r1
	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
    6444:	76 87       	std	Z+14, r23	; 0x0e
    6446:	65 87       	std	Z+13, r22	; 0x0d
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
    6448:	d7 01       	movw	r26, r14
    644a:	6d 91       	ld	r22, X+
    644c:	7d 01       	movw	r14, r26
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    644e:	ba e0       	ldi	r27, 0x0A	; 10
    6450:	6b 02       	muls	r22, r27
    6452:	b0 01       	movw	r22, r0
    6454:	11 24       	eor	r1, r1
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);			// Limits are checked post conversion to system values, so need to be 2500~5000
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
    6456:	70 8b       	std	Z+16, r23	; 0x10
    6458:	67 87       	std	Z+15, r22	; 0x0f
			Config.Raw_I_Constrain[i] = 0;
		}
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    645a:	1f 5f       	subi	r17, 0xFF	; 255
    645c:	38 96       	adiw	r30, 0x08	; 8
    645e:	18 30       	cpi	r17, 0x08	; 8
    6460:	a1 f6       	brne	.-88     	; 0x640a <UpdateLimits+0x1c6>
		Config.Limits[i].failsafe = scale_percent_nooffset(Config.Failsafe[i]);	// Config.Failsafe and .trim are used prior to conversion, so need to be +/-1250
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
	}

	// Update dynamic gain divisor
	if (Config.DynGain > 0)
    6462:	60 91 11 06 	lds	r22, 0x0611
    6466:	16 16       	cp	r1, r22
    6468:	64 f4       	brge	.+24     	; 0x6482 <UpdateLimits+0x23e>
	{
		Config.DynGainDiv = 2500 / Config.DynGain;
    646a:	77 27       	eor	r23, r23
    646c:	67 fd       	sbrc	r22, 7
    646e:	70 95       	com	r23
    6470:	84 ec       	ldi	r24, 0xC4	; 196
    6472:	99 e0       	ldi	r25, 0x09	; 9
    6474:	0e 94 11 42 	call	0x8422	; 0x8422 <__divmodhi4>
    6478:	70 93 7b 06 	sts	0x067B, r23
    647c:	60 93 7a 06 	sts	0x067A, r22
    6480:	06 c0       	rjmp	.+12     	; 0x648e <UpdateLimits+0x24a>
	}
	else
	{
		Config.DynGainDiv = 2500;
    6482:	84 ec       	ldi	r24, 0xC4	; 196
    6484:	99 e0       	ldi	r25, 0x09	; 9
    6486:	90 93 7b 06 	sts	0x067B, r25
    648a:	80 93 7a 06 	sts	0x067A, r24
	}

	// Update RC deadband amount
	 Config.DeadbandLimit = (Config.Deadband * 12); // 0 to 5% scaled to 0 to 60
    648e:	80 91 15 06 	lds	r24, 0x0615
    6492:	ec e0       	ldi	r30, 0x0C	; 12
    6494:	8e 02       	muls	r24, r30
    6496:	c0 01       	movw	r24, r0
    6498:	11 24       	eor	r1, r1
    649a:	90 93 79 06 	sts	0x0679, r25
    649e:	80 93 78 06 	sts	0x0678, r24

	// Update Hands-free trigger based on deadband setting
	Config.HandsFreetrigger = Config.DeadbandLimit;
    64a2:	80 93 75 06 	sts	0x0675, r24
    64a6:	47 e4       	ldi	r20, 0x47	; 71
    64a8:	57 e0       	ldi	r21, 0x07	; 7
    64aa:	aa e2       	ldi	r26, 0x2A	; 42
    64ac:	b6 e0       	ldi	r27, 0x06	; 6
    64ae:	cd 01       	movw	r24, r26
    64b0:	07 97       	sbiw	r24, 0x07	; 7
	
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = 0; i <= FLIGHT_MODES; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    64b2:	fc 01       	movw	r30, r24
    64b4:	80 81       	ld	r24, Z
    64b6:	fa e0       	ldi	r31, 0x0A	; 10
    64b8:	8f 02       	muls	r24, r31
    64ba:	c0 01       	movw	r24, r0
    64bc:	11 24       	eor	r1, r1
    64be:	fa 01       	movw	r30, r20
    64c0:	81 93       	st	Z+, r24
    64c2:	91 93       	st	Z+, r25
    64c4:	af 01       	movw	r20, r30
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    64c6:	8c 91       	ld	r24, X
    64c8:	fa e0       	ldi	r31, 0x0A	; 10
    64ca:	8f 02       	muls	r24, r31
    64cc:	c0 01       	movw	r24, r0
    64ce:	11 24       	eor	r1, r1
    64d0:	fa 01       	movw	r30, r20
    64d2:	95 83       	std	Z+5, r25	; 0x05
    64d4:	84 83       	std	Z+4, r24	; 0x04
    64d6:	56 96       	adiw	r26, 0x16	; 22
	// Update Hands-free trigger based on deadband setting
	Config.HandsFreetrigger = Config.DeadbandLimit;
	
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = 0; i <= FLIGHT_MODES; i++)
    64d8:	f7 e0       	ldi	r31, 0x07	; 7
    64da:	4f 34       	cpi	r20, 0x4F	; 79
    64dc:	5f 07       	cpc	r21, r31
    64de:	39 f7       	brne	.-50     	; 0x64ae <UpdateLimits+0x26a>
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
	}
}
    64e0:	26 96       	adiw	r28, 0x06	; 6
    64e2:	0f b6       	in	r0, 0x3f	; 63
    64e4:	f8 94       	cli
    64e6:	de bf       	out	0x3e, r29	; 62
    64e8:	0f be       	out	0x3f, r0	; 63
    64ea:	cd bf       	out	0x3d, r28	; 61
    64ec:	df 91       	pop	r29
    64ee:	cf 91       	pop	r28
    64f0:	1f 91       	pop	r17
    64f2:	0f 91       	pop	r16
    64f4:	ff 90       	pop	r15
    64f6:	ef 90       	pop	r14
    64f8:	df 90       	pop	r13
    64fa:	cf 90       	pop	r12
    64fc:	bf 90       	pop	r11
    64fe:	af 90       	pop	r10
    6500:	08 95       	ret

00006502 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6502:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6504:	64 36       	cpi	r22, 0x64	; 100
    6506:	71 05       	cpc	r23, r1
    6508:	e9 f0       	breq	.+58     	; 0x6544 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    650a:	6c 39       	cpi	r22, 0x9C	; 156
    650c:	8f ef       	ldi	r24, 0xFF	; 255
    650e:	78 07       	cpc	r23, r24
    6510:	29 f4       	brne	.+10     	; 0x651c <scale32+0x1a>
	{
		return -value16;
    6512:	88 27       	eor	r24, r24
    6514:	99 27       	eor	r25, r25
    6516:	82 1b       	sub	r24, r18
    6518:	93 0b       	sbc	r25, r19
    651a:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    651c:	61 15       	cp	r22, r1
    651e:	71 05       	cpc	r23, r1
    6520:	71 f0       	breq	.+28     	; 0x653e <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    6522:	db 01       	movw	r26, r22
    6524:	0e 94 4a 42 	call	0x8494	; 0x8494 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    6528:	6e 5c       	subi	r22, 0xCE	; 206
    652a:	7f 4f       	sbci	r23, 0xFF	; 255
    652c:	8f 4f       	sbci	r24, 0xFF	; 255
    652e:	9f 4f       	sbci	r25, 0xFF	; 255
    6530:	24 e6       	ldi	r18, 0x64	; 100
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	40 e0       	ldi	r20, 0x00	; 0
    6536:	50 e0       	ldi	r21, 0x00	; 0
    6538:	0e 94 25 42 	call	0x844a	; 0x844a <__divmodsi4>
    653c:	03 c0       	rjmp	.+6      	; 0x6544 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;
    653e:	80 e0       	ldi	r24, 0x00	; 0
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    6544:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    6546:	08 95       	ret

00006548 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    6548:	3f 92       	push	r3
    654a:	4f 92       	push	r4
    654c:	5f 92       	push	r5
    654e:	6f 92       	push	r6
    6550:	7f 92       	push	r7
    6552:	8f 92       	push	r8
    6554:	9f 92       	push	r9
    6556:	af 92       	push	r10
    6558:	bf 92       	push	r11
    655a:	cf 92       	push	r12
    655c:	df 92       	push	r13
    655e:	ef 92       	push	r14
    6560:	ff 92       	push	r15
    6562:	0f 93       	push	r16
    6564:	1f 93       	push	r17
    6566:	cf 93       	push	r28
    6568:	df 93       	push	r29
    656a:	cd b7       	in	r28, 0x3d	; 61
    656c:	de b7       	in	r29, 0x3e	; 62
    656e:	61 97       	sbiw	r28, 0x11	; 17
    6570:	0f b6       	in	r0, 0x3f	; 63
    6572:	f8 94       	cli
    6574:	de bf       	out	0x3e, r29	; 62
    6576:	0f be       	out	0x3f, r0	; 63
    6578:	cd bf       	out	0x3d, r28	; 61
	int16_t temp2 = 0;
	int16_t solution = 0;
	bool	TwoAilerons = false;
	
	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    657a:	60 91 aa 05 	lds	r22, 0x05AA
    657e:	70 91 ab 05 	lds	r23, 0x05AB
    6582:	80 91 ac 05 	lds	r24, 0x05AC
    6586:	90 91 ad 05 	lds	r25, 0x05AD
    658a:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    658e:	5b 01       	movw	r10, r22
    6590:	43 e0       	ldi	r20, 0x03	; 3
    6592:	aa 0c       	add	r10, r10
    6594:	bb 1c       	adc	r11, r11
    6596:	4a 95       	dec	r20
    6598:	e1 f7       	brne	.-8      	; 0x6592 <ProcessMixer+0x4a>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    659a:	60 91 ae 05 	lds	r22, 0x05AE
    659e:	70 91 af 05 	lds	r23, 0x05AF
    65a2:	80 91 b0 05 	lds	r24, 0x05B0
    65a6:	90 91 b1 05 	lds	r25, 0x05B1
    65aa:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
    65ae:	53 e0       	ldi	r21, 0x03	; 3
    65b0:	66 0f       	add	r22, r22
    65b2:	77 1f       	adc	r23, r23
    65b4:	5a 95       	dec	r21
    65b6:	e1 f7       	brne	.-8      	; 0x65b0 <ProcessMixer+0x68>
	int16_t	SensorData[7] = {PID_Gyros[ROLL], PID_Gyros[PITCH], PID_Gyros[YAW], temp1, temp2, PID_ACCs[ROLL], PID_ACCs[PITCH]};
    65b8:	00 91 b5 07 	lds	r16, 0x07B5
    65bc:	10 91 b6 07 	lds	r17, 0x07B6
    65c0:	1a 83       	std	Y+2, r17	; 0x02
    65c2:	09 83       	std	Y+1, r16	; 0x01
    65c4:	e0 90 b7 07 	lds	r14, 0x07B7
    65c8:	f0 90 b8 07 	lds	r15, 0x07B8
    65cc:	fc 82       	std	Y+4, r15	; 0x04
    65ce:	eb 82       	std	Y+3, r14	; 0x03
    65d0:	c0 90 b9 07 	lds	r12, 0x07B9
    65d4:	d0 90 ba 07 	lds	r13, 0x07BA
    65d8:	de 82       	std	Y+6, r13	; 0x06
    65da:	cd 82       	std	Y+5, r12	; 0x05
    65dc:	b8 86       	std	Y+8, r11	; 0x08
    65de:	af 82       	std	Y+7, r10	; 0x07
    65e0:	7a 87       	std	Y+10, r23	; 0x0a
    65e2:	69 87       	std	Y+9, r22	; 0x09
    65e4:	a0 90 bb 07 	lds	r10, 0x07BB
    65e8:	b0 90 bc 07 	lds	r11, 0x07BC
    65ec:	bc 86       	std	Y+12, r11	; 0x0c
    65ee:	ab 86       	std	Y+11, r10	; 0x0b
    65f0:	80 90 bd 07 	lds	r8, 0x07BD
    65f4:	90 90 be 07 	lds	r9, 0x07BE
    65f8:	9e 86       	std	Y+14, r9	; 0x0e
    65fa:	8d 86       	std	Y+13, r8	; 0x0d

	//************************************************************
	// Un-mix flaps from flaperons as required
	//************************************************************ 

	if (Config.FlapChan != NOCHAN)
    65fc:	30 90 0f 06 	lds	r3, 0x060F
    6600:	28 e0       	ldi	r18, 0x08	; 8
    6602:	32 16       	cp	r3, r18
    6604:	61 f1       	breq	.+88     	; 0x665e <ProcessMixer+0x116>
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
    6606:	80 91 d1 07 	lds	r24, 0x07D1
    660a:	90 91 d2 07 	lds	r25, 0x07D2
    660e:	81 35       	cpi	r24, 0x51	; 81
    6610:	9b 4f       	sbci	r25, 0xFB	; 251
    6612:	54 f1       	brlt	.+84     	; 0x6668 <ProcessMixer+0x120>
			(RCinputs[AILERON] < 1200) &&
    6614:	80 91 d1 07 	lds	r24, 0x07D1
    6618:	90 91 d2 07 	lds	r25, 0x07D2
	//************************************************************ 

	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
    661c:	80 3b       	cpi	r24, 0xB0	; 176
    661e:	94 40       	sbci	r25, 0x04	; 4
    6620:	1c f5       	brge	.+70     	; 0x6668 <ProcessMixer+0x120>
			(RCinputs[AILERON] < 1200) &&
			(RCinputs[Config.FlapChan] > -1200) && 
    6622:	e3 2d       	mov	r30, r3
    6624:	ee 0f       	add	r30, r30
    6626:	ff 0b       	sbc	r31, r31
    6628:	e1 53       	subi	r30, 0x31	; 49
    662a:	f8 4f       	sbci	r31, 0xF8	; 248
    662c:	80 81       	ld	r24, Z
    662e:	91 81       	ldd	r25, Z+1	; 0x01

	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
			(RCinputs[AILERON] < 1200) &&
    6630:	81 35       	cpi	r24, 0x51	; 81
    6632:	9b 4f       	sbci	r25, 0xFB	; 251
    6634:	cc f0       	brlt	.+50     	; 0x6668 <ProcessMixer+0x120>
			(RCinputs[Config.FlapChan] > -1200) && 
			(RCinputs[Config.FlapChan] < 1200))
    6636:	80 81       	ld	r24, Z
    6638:	91 81       	ldd	r25, Z+1	; 0x01
	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
			(RCinputs[AILERON] < 1200) &&
			(RCinputs[Config.FlapChan] > -1200) && 
    663a:	80 3b       	cpi	r24, 0xB0	; 176
    663c:	94 40       	sbci	r25, 0x04	; 4
    663e:	a4 f4       	brge	.+40     	; 0x6668 <ProcessMixer+0x120>
			(RCinputs[Config.FlapChan] < 1200))
		{
			flap = RCinputs[AILERON] - RCinputs[Config.FlapChan]; 	
    6640:	80 91 d1 07 	lds	r24, 0x07D1
    6644:	90 91 d2 07 	lds	r25, 0x07D2
    6648:	20 81       	ld	r18, Z
    664a:	31 81       	ldd	r19, Z+1	; 0x01
    664c:	82 1b       	sub	r24, r18
    664e:	93 0b       	sbc	r25, r19
			flap = flap >> 1; 	
    6650:	95 95       	asr	r25
    6652:	87 95       	ror	r24
    6654:	90 93 33 05 	sts	0x0533, r25
    6658:	80 93 32 05 	sts	0x0532, r24
    665c:	05 c0       	rjmp	.+10     	; 0x6668 <ProcessMixer+0x120>
		}
	}
	else
	{
		flap = 0;
    665e:	10 92 33 05 	sts	0x0533, r1
    6662:	10 92 32 05 	sts	0x0532, r1
    6666:	21 c0       	rjmp	.+66     	; 0x66aa <ProcessMixer+0x162>
	//************************************************************
	// Un-mix ailerons from flaperons as required in all modes
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    6668:	80 91 7c 06 	lds	r24, 0x067C
    666c:	81 11       	cpse	r24, r1
    666e:	1d c0       	rjmp	.+58     	; 0x66aa <ProcessMixer+0x162>
	{
		// Remove flap signal from flaperons, leaving ailerons only
		roll = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    6670:	80 91 d1 07 	lds	r24, 0x07D1
    6674:	90 91 d2 07 	lds	r25, 0x07D2
    6678:	e3 2d       	mov	r30, r3
    667a:	ee 0f       	add	r30, r30
    667c:	ff 0b       	sbc	r31, r31
    667e:	e1 53       	subi	r30, 0x31	; 49
    6680:	f8 4f       	sbci	r31, 0xF8	; 248
    6682:	20 81       	ld	r18, Z
    6684:	31 81       	ldd	r19, Z+1	; 0x01
    6686:	82 0f       	add	r24, r18
    6688:	93 1f       	adc	r25, r19
    668a:	90 93 31 05 	sts	0x0531, r25
    668e:	80 93 30 05 	sts	0x0530, r24

		// Otherwise throw is 50% of both signals
		RCinputs[AILERON] = roll >> 1;
    6692:	95 95       	asr	r25
    6694:	87 95       	ror	r24
    6696:	90 93 d2 07 	sts	0x07D2, r25
    669a:	80 93 d1 07 	sts	0x07D1, r24
		
		// Copy to second aileron channel
		RCinputs[Config.FlapChan] = RCinputs[AILERON];
    669e:	80 91 d1 07 	lds	r24, 0x07D1
    66a2:	90 91 d2 07 	lds	r25, 0x07D2
    66a6:	91 83       	std	Z+1, r25	; 0x01
    66a8:	80 83       	st	Z, r24
    66aa:	b2 e9       	ldi	r27, 0x92	; 146
    66ac:	4b 2e       	mov	r4, r27
    66ae:	b6 e0       	ldi	r27, 0x06	; 6
    66b0:	5b 2e       	mov	r5, r27
		if (Flight_flags & (1 << Stability))
		{
			switch (Config.Channel[i].roll_gyro)
			{
				case ON:
					solution = solution - PID_Gyros[ROLL];
    66b2:	88 27       	eor	r24, r24
    66b4:	99 27       	eor	r25, r25
    66b6:	80 1b       	sub	r24, r16
    66b8:	91 0b       	sbc	r25, r17
    66ba:	98 8b       	std	Y+16, r25	; 0x10
    66bc:	8f 87       	std	Y+15, r24	; 0x0f
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// Use PID gyro values
		if (Flight_flags & (1 << Stability))
    66be:	80 91 1c 05 	lds	r24, 0x051C
    66c2:	81 ff       	sbrs	r24, 1
    66c4:	27 c0       	rjmp	.+78     	; 0x6714 <ProcessMixer+0x1cc>
    66c6:	f2 01       	movw	r30, r4
    66c8:	38 97       	sbiw	r30, 0x08	; 8
		{
			switch (Config.Channel[i].roll_gyro)
    66ca:	80 81       	ld	r24, Z
    66cc:	81 30       	cpi	r24, 0x01	; 1
    66ce:	29 f0       	breq	.+10     	; 0x66da <ProcessMixer+0x192>
    66d0:	82 30       	cpi	r24, 0x02	; 2
    66d2:	31 f0       	breq	.+12     	; 0x66e0 <ProcessMixer+0x198>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		solution = 0;
    66d4:	61 2c       	mov	r6, r1
    66d6:	71 2c       	mov	r7, r1
    66d8:	04 c0       	rjmp	.+8      	; 0x66e2 <ProcessMixer+0x19a>
		if (Flight_flags & (1 << Stability))
		{
			switch (Config.Channel[i].roll_gyro)
			{
				case ON:
					solution = solution - PID_Gyros[ROLL];
    66da:	6f 84       	ldd	r6, Y+15	; 0x0f
    66dc:	78 88       	ldd	r7, Y+16	; 0x10
					break;
    66de:	01 c0       	rjmp	.+2      	; 0x66e2 <ProcessMixer+0x19a>
				case REV:
					solution = solution + PID_Gyros[ROLL];
    66e0:	38 01       	movw	r6, r16
    66e2:	f2 01       	movw	r30, r4
    66e4:	37 97       	sbiw	r30, 0x07	; 7
					break;	
				default:
					break;
			}
			switch (Config.Channel[i].pitch_gyro)
    66e6:	80 81       	ld	r24, Z
    66e8:	81 30       	cpi	r24, 0x01	; 1
    66ea:	29 f0       	breq	.+10     	; 0x66f6 <ProcessMixer+0x1ae>
    66ec:	82 30       	cpi	r24, 0x02	; 2
    66ee:	29 f4       	brne	.+10     	; 0x66fa <ProcessMixer+0x1b2>
			{
				case ON:
					solution = solution + PID_Gyros[PITCH];
					break;
				case REV:
					solution = solution - PID_Gyros[PITCH];
    66f0:	6e 18       	sub	r6, r14
    66f2:	7f 08       	sbc	r7, r15
					break;	
    66f4:	02 c0       	rjmp	.+4      	; 0x66fa <ProcessMixer+0x1b2>
					break;
			}
			switch (Config.Channel[i].pitch_gyro)
			{
				case ON:
					solution = solution + PID_Gyros[PITCH];
    66f6:	6e 0c       	add	r6, r14
    66f8:	7f 1c       	adc	r7, r15
    66fa:	f2 01       	movw	r30, r4
    66fc:	36 97       	sbiw	r30, 0x06	; 6
					solution = solution - PID_Gyros[PITCH];
					break;	
				default:
					break;
			}
			switch (Config.Channel[i].yaw_gyro)
    66fe:	80 81       	ld	r24, Z
    6700:	81 30       	cpi	r24, 0x01	; 1
    6702:	29 f0       	breq	.+10     	; 0x670e <ProcessMixer+0x1c6>
    6704:	82 30       	cpi	r24, 0x02	; 2
    6706:	41 f4       	brne	.+16     	; 0x6718 <ProcessMixer+0x1d0>
			{
				case ON:
					solution = solution + PID_Gyros[YAW];
					break;
				case REV:
					solution = solution - PID_Gyros[YAW];
    6708:	6c 18       	sub	r6, r12
    670a:	7d 08       	sbc	r7, r13
					break;	
    670c:	05 c0       	rjmp	.+10     	; 0x6718 <ProcessMixer+0x1d0>
					break;
			}
			switch (Config.Channel[i].yaw_gyro)
			{
				case ON:
					solution = solution + PID_Gyros[YAW];
    670e:	6c 0c       	add	r6, r12
    6710:	7d 1c       	adc	r7, r13
					break;
    6712:	02 c0       	rjmp	.+4      	; 0x6718 <ProcessMixer+0x1d0>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		solution = 0;
    6714:	61 2c       	mov	r6, r1
    6716:	71 2c       	mov	r7, r1
		//************************************************************
		// Mix in accelerometers
		//************************************************************ 

		// Add PID acc values including trim
		if (Flight_flags & (1 << AutoLevel))
    6718:	80 91 1c 05 	lds	r24, 0x051C
    671c:	80 ff       	sbrs	r24, 0
    671e:	18 c0       	rjmp	.+48     	; 0x6750 <ProcessMixer+0x208>
    6720:	f2 01       	movw	r30, r4
    6722:	35 97       	sbiw	r30, 0x05	; 5
		{
			switch (Config.Channel[i].roll_acc)
    6724:	80 81       	ld	r24, Z
    6726:	81 30       	cpi	r24, 0x01	; 1
    6728:	29 f0       	breq	.+10     	; 0x6734 <ProcessMixer+0x1ec>
    672a:	82 30       	cpi	r24, 0x02	; 2
    672c:	29 f4       	brne	.+10     	; 0x6738 <ProcessMixer+0x1f0>
			{
				case ON:
					solution = solution - PID_ACCs[ROLL];
					break;
				case REV:
					solution = solution + PID_ACCs[ROLL];
    672e:	6a 0c       	add	r6, r10
    6730:	7b 1c       	adc	r7, r11
					break;	
    6732:	02 c0       	rjmp	.+4      	; 0x6738 <ProcessMixer+0x1f0>
		if (Flight_flags & (1 << AutoLevel))
		{
			switch (Config.Channel[i].roll_acc)
			{
				case ON:
					solution = solution - PID_ACCs[ROLL];
    6734:	6a 18       	sub	r6, r10
    6736:	7b 08       	sbc	r7, r11
    6738:	f2 01       	movw	r30, r4
    673a:	34 97       	sbiw	r30, 0x04	; 4
					break;	
				default:
					break;
			}

			switch (Config.Channel[i].pitch_acc)
    673c:	80 81       	ld	r24, Z
    673e:	81 30       	cpi	r24, 0x01	; 1
    6740:	29 f0       	breq	.+10     	; 0x674c <ProcessMixer+0x204>
    6742:	82 30       	cpi	r24, 0x02	; 2
    6744:	29 f4       	brne	.+10     	; 0x6750 <ProcessMixer+0x208>
			{
				case ON:
					solution = solution + PID_ACCs[PITCH];
					break;
				case REV:
					solution = solution - PID_ACCs[PITCH];
    6746:	68 18       	sub	r6, r8
    6748:	79 08       	sbc	r7, r9
					break;	
    674a:	02 c0       	rjmp	.+4      	; 0x6750 <ProcessMixer+0x208>
			}

			switch (Config.Channel[i].pitch_acc)
			{
				case ON:
					solution = solution + PID_ACCs[PITCH];
    674c:	68 0c       	add	r6, r8
    674e:	79 1c       	adc	r7, r9
    6750:	f2 01       	movw	r30, r4
    6752:	3b 97       	sbiw	r30, 0x0b	; 11
		//************************************************************
		// Process RC mixing and source volume calculation
		//************************************************************		
		
		// Skip Source A if no RC mixing required for this channel
		if (Config.Channel[i].source_a_volume != 0)
    6754:	60 81       	ld	r22, Z
    6756:	66 23       	and	r22, r22
    6758:	79 f0       	breq	.+30     	; 0x6778 <ProcessMixer+0x230>
    675a:	31 97       	sbiw	r30, 0x01	; 1
		{		
			temp = scale32(RCinputs[Config.Channel[i].source_a], Config.Channel[i].source_a_volume);
    675c:	e0 81       	ld	r30, Z
    675e:	ee 0f       	add	r30, r30
    6760:	ff 0b       	sbc	r31, r31
    6762:	e1 53       	subi	r30, 0x31	; 49
    6764:	f8 4f       	sbci	r31, 0xF8	; 248
    6766:	80 81       	ld	r24, Z
    6768:	91 81       	ldd	r25, Z+1	; 0x01
    676a:	77 27       	eor	r23, r23
    676c:	67 fd       	sbrc	r22, 7
    676e:	70 95       	com	r23
    6770:	0e 94 81 32 	call	0x6502	; 0x6502 <scale32>
			solution += temp;
    6774:	68 0e       	add	r6, r24
    6776:	79 1e       	adc	r7, r25
    6778:	f2 01       	movw	r30, r4
    677a:	39 97       	sbiw	r30, 0x09	; 9
		}

		// Skip Source B if no RC mixing required for this channel
		if (Config.Channel[i].source_b_volume != 0)
    677c:	60 81       	ld	r22, Z
    677e:	66 23       	and	r22, r22
    6780:	79 f0       	breq	.+30     	; 0x67a0 <ProcessMixer+0x258>
    6782:	31 97       	sbiw	r30, 0x01	; 1
		{
			temp = scale32(RCinputs[Config.Channel[i].source_b], Config.Channel[i].source_b_volume);
    6784:	e0 81       	ld	r30, Z
    6786:	ee 0f       	add	r30, r30
    6788:	ff 0b       	sbc	r31, r31
    678a:	e1 53       	subi	r30, 0x31	; 49
    678c:	f8 4f       	sbci	r31, 0xF8	; 248
    678e:	80 81       	ld	r24, Z
    6790:	91 81       	ldd	r25, Z+1	; 0x01
    6792:	77 27       	eor	r23, r23
    6794:	67 fd       	sbrc	r22, 7
    6796:	70 95       	com	r23
    6798:	0e 94 81 32 	call	0x6502	; 0x6502 <scale32>
			solution += temp;
    679c:	68 0e       	add	r6, r24
    679e:	79 1e       	adc	r7, r25
    67a0:	f2 01       	movw	r30, r4
    67a2:	32 97       	sbiw	r30, 0x02	; 2

		//************************************************************
		// Process universal mixers
		//************************************************************ 

		if ((Config.Channel[i].output_b_volume != 0) && (Config.Channel[i].output_b != NOMIX)) // Mix in first extra source
    67a4:	60 81       	ld	r22, Z
    67a6:	66 23       	and	r22, r22
    67a8:	09 f1       	breq	.+66     	; 0x67ec <ProcessMixer+0x2a4>
    67aa:	31 97       	sbiw	r30, 0x01	; 1
    67ac:	80 81       	ld	r24, Z
    67ae:	8f 30       	cpi	r24, 0x0F	; 15
    67b0:	e9 f0       	breq	.+58     	; 0x67ec <ProcessMixer+0x2a4>
    67b2:	e8 2f       	mov	r30, r24
    67b4:	ff 27       	eor	r31, r31
    67b6:	e7 fd       	sbrc	r30, 7
    67b8:	f0 95       	com	r31
		{
			// Is the source a sensor?
			if (Config.Channel[i].output_b > (MAX_RC_CHANNELS - 1))
    67ba:	88 30       	cpi	r24, 0x08	; 8
    67bc:	54 f0       	brlt	.+20     	; 0x67d2 <ProcessMixer+0x28a>
			{
				temp2 = SensorData[Config.Channel[i].output_b - EXT_SOURCE];
    67be:	38 97       	sbiw	r30, 0x08	; 8
    67c0:	ee 0f       	add	r30, r30
    67c2:	ff 1f       	adc	r31, r31
    67c4:	a1 e0       	ldi	r26, 0x01	; 1
    67c6:	b0 e0       	ldi	r27, 0x00	; 0
    67c8:	ac 0f       	add	r26, r28
    67ca:	bd 1f       	adc	r27, r29
    67cc:	ea 0f       	add	r30, r26
    67ce:	fb 1f       	adc	r31, r27
    67d0:	04 c0       	rjmp	.+8      	; 0x67da <ProcessMixer+0x292>
			}
			// Is the source an RC input?
			else
			{
				temp2 = RCinputs[Config.Channel[i].output_b];
    67d2:	ee 0f       	add	r30, r30
    67d4:	ff 1f       	adc	r31, r31
    67d6:	e1 53       	subi	r30, 0x31	; 49
    67d8:	f8 4f       	sbci	r31, 0xF8	; 248
    67da:	80 81       	ld	r24, Z
    67dc:	91 81       	ldd	r25, Z+1	; 0x01
			}

			temp2 = scale32(temp2, Config.Channel[i].output_b_volume);
    67de:	77 27       	eor	r23, r23
    67e0:	67 fd       	sbrc	r22, 7
    67e2:	70 95       	com	r23
    67e4:	0e 94 81 32 	call	0x6502	; 0x6502 <scale32>
			solution = solution + temp2;
    67e8:	68 0e       	add	r6, r24
    67ea:	79 1e       	adc	r7, r25
		}
		
		if ((Config.Channel[i].output_c_volume != 0) && (Config.Channel[i].output_c != NOMIX)) // Mix in second extra source
    67ec:	f2 01       	movw	r30, r4
    67ee:	60 81       	ld	r22, Z
    67f0:	66 23       	and	r22, r22
    67f2:	09 f1       	breq	.+66     	; 0x6836 <ProcessMixer+0x2ee>
    67f4:	31 97       	sbiw	r30, 0x01	; 1
    67f6:	80 81       	ld	r24, Z
    67f8:	8f 30       	cpi	r24, 0x0F	; 15
    67fa:	e9 f0       	breq	.+58     	; 0x6836 <ProcessMixer+0x2ee>
    67fc:	e8 2f       	mov	r30, r24
    67fe:	ff 27       	eor	r31, r31
    6800:	e7 fd       	sbrc	r30, 7
    6802:	f0 95       	com	r31
		{
			// Is the source a sensor?
			if (Config.Channel[i].output_c > (MAX_RC_CHANNELS - 1))
    6804:	88 30       	cpi	r24, 0x08	; 8
    6806:	54 f0       	brlt	.+20     	; 0x681c <ProcessMixer+0x2d4>
			{
				temp2 = SensorData[Config.Channel[i].output_c - EXT_SOURCE];
    6808:	38 97       	sbiw	r30, 0x08	; 8
    680a:	ee 0f       	add	r30, r30
    680c:	ff 1f       	adc	r31, r31
    680e:	81 e0       	ldi	r24, 0x01	; 1
    6810:	90 e0       	ldi	r25, 0x00	; 0
    6812:	8c 0f       	add	r24, r28
    6814:	9d 1f       	adc	r25, r29
    6816:	e8 0f       	add	r30, r24
    6818:	f9 1f       	adc	r31, r25
    681a:	04 c0       	rjmp	.+8      	; 0x6824 <ProcessMixer+0x2dc>
			}
			// Is the source an RC input?
			else
			{
				temp2 = RCinputs[Config.Channel[i].output_c];
    681c:	ee 0f       	add	r30, r30
    681e:	ff 1f       	adc	r31, r31
    6820:	e1 53       	subi	r30, 0x31	; 49
    6822:	f8 4f       	sbci	r31, 0xF8	; 248
    6824:	80 81       	ld	r24, Z
    6826:	91 81       	ldd	r25, Z+1	; 0x01
			}

			temp2 = scale32(temp2, Config.Channel[i].output_c_volume);
    6828:	77 27       	eor	r23, r23
    682a:	67 fd       	sbrc	r22, 7
    682c:	70 95       	com	r23
    682e:	0e 94 81 32 	call	0x6502	; 0x6502 <scale32>
			solution = solution + temp2;
    6832:	68 0e       	add	r6, r24
    6834:	79 1e       	adc	r7, r25
    6836:	f2 01       	movw	r30, r4
    6838:	3e 97       	sbiw	r30, 0x0e	; 14
		}

		// Save solution for this channel. "solution" contains the current cycle's data.
		// Up to this point, Config.Channel[i].value contains data from the last cycle.
		Config.Channel[i].value = solution;
    683a:	71 82       	std	Z+1, r7	; 0x01
    683c:	60 82       	st	Z, r6
    683e:	9f e0       	ldi	r25, 0x0F	; 15
    6840:	49 0e       	add	r4, r25
    6842:	51 1c       	adc	r5, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MAX_OUTPUTS; i++)
    6844:	aa e0       	ldi	r26, 0x0A	; 10
    6846:	4a 16       	cp	r4, r26
    6848:	a7 e0       	ldi	r26, 0x07	; 7
    684a:	5a 06       	cpc	r5, r26
    684c:	09 f0       	breq	.+2      	; 0x6850 <ProcessMixer+0x308>
    684e:	37 cf       	rjmp	.-402    	; 0x66be <ProcessMixer+0x176>

	//************************************************************
	// Process differential if set up and two ailerons used
	//************************************************************

	if ((Config.FlapChan != NOCHAN) && (Config.Differential != 0))
    6850:	b8 e0       	ldi	r27, 0x08	; 8
    6852:	3b 12       	cpse	r3, r27
    6854:	05 c0       	rjmp	.+10     	; 0x6860 <ProcessMixer+0x318>
    6856:	a1 ed       	ldi	r26, 0xD1	; 209
    6858:	b5 e0       	ldi	r27, 0x05	; 5
    685a:	e4 e8       	ldi	r30, 0x84	; 132
    685c:	f6 e0       	ldi	r31, 0x06	; 6
    685e:	3d c0       	rjmp	.+122    	; 0x68da <ProcessMixer+0x392>
    6860:	80 91 12 06 	lds	r24, 0x0612
    6864:	88 23       	and	r24, r24
    6866:	09 f4       	brne	.+2      	; 0x686a <ProcessMixer+0x322>
    6868:	8d c0       	rjmp	.+282    	; 0x6984 <ProcessMixer+0x43c>
    686a:	04 e8       	ldi	r16, 0x84	; 132
    686c:	16 e0       	ldi	r17, 0x06	; 6
    686e:	96 e8       	ldi	r25, 0x86	; 134
    6870:	c9 2e       	mov	r12, r25
    6872:	96 e0       	ldi	r25, 0x06	; 6
    6874:	d9 2e       	mov	r13, r25
    6876:	20 e0       	ldi	r18, 0x00	; 0

				// For the first aileron (LHS) 
				// Limit positive-going values
				else if (temp > 0)			
				{
					temp = scale32(temp, (100 - Config.Differential));
    6878:	34 e6       	ldi	r19, 0x64	; 100
    687a:	e3 2e       	mov	r14, r19
    687c:	f1 2c       	mov	r15, r1
    687e:	e8 1a       	sub	r14, r24
    6880:	f1 08       	sbc	r15, r1
    6882:	87 fd       	sbrc	r24, 7
    6884:	f3 94       	inc	r15
	{
		// Search through outputs for aileron channels
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Get current channel value
			temp = Config.Channel[i].value;
    6886:	f8 01       	movw	r30, r16
    6888:	80 81       	ld	r24, Z
    688a:	91 81       	ldd	r25, Z+1	; 0x01

			// If some kind of aileron channel
			if ((Config.Channel[i].source_a == AILERON) || (Config.Channel[i].source_a == Config.FlapChan))
    688c:	d6 01       	movw	r26, r12
    688e:	3c 91       	ld	r19, X
    6890:	31 30       	cpi	r19, 0x01	; 1
    6892:	11 f0       	breq	.+4      	; 0x6898 <ProcessMixer+0x350>
    6894:	33 11       	cpse	r19, r3
    6896:	17 c0       	rjmp	.+46     	; 0x68c6 <ProcessMixer+0x37e>
			{
				// For the second aileron (RHS)
				if (TwoAilerons)			
    6898:	22 23       	and	r18, r18
    689a:	59 f0       	breq	.+22     	; 0x68b2 <ProcessMixer+0x36a>
				{
					// Limit negative-going values
					if (temp < 0)
    689c:	97 ff       	sbrs	r25, 7
    689e:	13 c0       	rjmp	.+38     	; 0x68c6 <ProcessMixer+0x37e>
					{
						temp = scale32(temp, (100 - Config.Differential));
    68a0:	b7 01       	movw	r22, r14
    68a2:	29 8b       	std	Y+17, r18	; 0x11
    68a4:	0e 94 81 32 	call	0x6502	; 0x6502 <scale32>
						Config.Channel[i].value = temp;
    68a8:	f8 01       	movw	r30, r16
    68aa:	91 83       	std	Z+1, r25	; 0x01
    68ac:	80 83       	st	Z, r24
    68ae:	29 89       	ldd	r18, Y+17	; 0x11
    68b0:	0a c0       	rjmp	.+20     	; 0x68c6 <ProcessMixer+0x37e>
					}
				}

				// For the first aileron (LHS) 
				// Limit positive-going values
				else if (temp > 0)			
    68b2:	18 16       	cp	r1, r24
    68b4:	19 06       	cpc	r1, r25
    68b6:	34 f4       	brge	.+12     	; 0x68c4 <ProcessMixer+0x37c>
				{
					temp = scale32(temp, (100 - Config.Differential));
    68b8:	b7 01       	movw	r22, r14
    68ba:	0e 94 81 32 	call	0x6502	; 0x6502 <scale32>
					Config.Channel[i].value = temp;
    68be:	d8 01       	movw	r26, r16
    68c0:	8d 93       	st	X+, r24
    68c2:	9c 93       	st	X, r25
    68c4:	21 e0       	ldi	r18, 0x01	; 1
    68c6:	01 5f       	subi	r16, 0xF1	; 241
    68c8:	1f 4f       	sbci	r17, 0xFF	; 255
    68ca:	bf e0       	ldi	r27, 0x0F	; 15
    68cc:	cb 0e       	add	r12, r27
    68ce:	d1 1c       	adc	r13, r1
	//************************************************************

	if ((Config.FlapChan != NOCHAN) && (Config.Differential != 0))
	{
		// Search through outputs for aileron channels
		for (i = 0; i < MAX_OUTPUTS; i++)
    68d0:	e6 e0       	ldi	r30, 0x06	; 6
    68d2:	0c 3f       	cpi	r16, 0xFC	; 252
    68d4:	1e 07       	cpc	r17, r30
    68d6:	b9 f6       	brne	.-82     	; 0x6886 <ProcessMixer+0x33e>
    68d8:	55 c0       	rjmp	.+170    	; 0x6984 <ProcessMixer+0x43c>
	// Add offset value
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].value += Config.Limits[i].trim;
    68da:	80 81       	ld	r24, Z
    68dc:	91 81       	ldd	r25, Z+1	; 0x01
    68de:	2d 91       	ld	r18, X+
    68e0:	3c 91       	ld	r19, X
    68e2:	11 97       	sbiw	r26, 0x01	; 1
    68e4:	82 0f       	add	r24, r18
    68e6:	93 1f       	adc	r25, r19
    68e8:	91 83       	std	Z+1, r25	; 0x01
    68ea:	80 83       	st	Z, r24
    68ec:	3f 96       	adiw	r30, 0x0f	; 15
    68ee:	18 96       	adiw	r26, 0x08	; 8

	//************************************************************
	// Add offset value
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    68f0:	86 e0       	ldi	r24, 0x06	; 6
    68f2:	ec 3f       	cpi	r30, 0xFC	; 252
    68f4:	f8 07       	cpc	r31, r24
    68f6:	89 f7       	brne	.-30     	; 0x68da <ProcessMixer+0x392>

	//************************************************************
	// Handle Failsafe condition
	//************************************************************ 

	if (Flight_flags & (1 << FailsafeFlag))
    68f8:	80 91 1c 05 	lds	r24, 0x051C
    68fc:	82 ff       	sbrs	r24, 2
    68fe:	9e c0       	rjmp	.+316    	; 0x6a3c <ProcessMixer+0x4f4>
	{
		// Simple failsafe. Replace outputs with user-set values
		if (Config.FailsafeType == SIMPLE) 
    6900:	80 91 16 06 	lds	r24, 0x0616
    6904:	81 30       	cpi	r24, 0x01	; 1
    6906:	81 f4       	brne	.+32     	; 0x6928 <ProcessMixer+0x3e0>
    6908:	ef ec       	ldi	r30, 0xCF	; 207
    690a:	f5 e0       	ldi	r31, 0x05	; 5
    690c:	a4 e8       	ldi	r26, 0x84	; 132
    690e:	b6 e0       	ldi	r27, 0x06	; 6
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Note that "value" is still centered on zero
				Config.Channel[i].value = Config.Limits[i].failsafe;
    6910:	80 81       	ld	r24, Z
    6912:	91 81       	ldd	r25, Z+1	; 0x01
    6914:	11 96       	adiw	r26, 0x01	; 1
    6916:	9c 93       	st	X, r25
    6918:	8e 93       	st	-X, r24
    691a:	38 96       	adiw	r30, 0x08	; 8
    691c:	1f 96       	adiw	r26, 0x0f	; 15
	if (Flight_flags & (1 << FailsafeFlag))
	{
		// Simple failsafe. Replace outputs with user-set values
		if (Config.FailsafeType == SIMPLE) 
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
    691e:	96 e0       	ldi	r25, 0x06	; 6
    6920:	ef 30       	cpi	r30, 0x0F	; 15
    6922:	f9 07       	cpc	r31, r25
    6924:	a9 f7       	brne	.-22     	; 0x6910 <ProcessMixer+0x3c8>
    6926:	8a c0       	rjmp	.+276    	; 0x6a3c <ProcessMixer+0x4f4>
		}

		// Advanced failsafe. Autolevel ON, use failsafe trims to adjust autolevel.
		// Set any throttle or rudder channels to preset values
		// Pitch and Roll values trim the pitch/roll autolevel
		else if (Config.FailsafeType == ADVANCED) 
    6928:	82 30       	cpi	r24, 0x02	; 2
    692a:	09 f0       	breq	.+2      	; 0x692e <ProcessMixer+0x3e6>
    692c:	87 c0       	rjmp	.+270    	; 0x6a3c <ProcessMixer+0x4f4>
			{
				// Override throttle
				if ((Config.Channel[i].source_a == THROTTLE) || (Config.Channel[i].source_b == THROTTLE))
				{
					// Convert throttle setting to servo value
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeThrottle);				
    692e:	20 91 17 06 	lds	r18, 0x0617
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    6932:	aa e0       	ldi	r26, 0x0A	; 10
    6934:	2a 02       	muls	r18, r26
    6936:	90 01       	movw	r18, r0
    6938:	11 24       	eor	r1, r1
				}

				// Override rudder						
				if (Config.Channel[i].source_a == RUDDER)
				{
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeRudder);	
    693a:	40 91 1a 06 	lds	r20, 0x061A
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    693e:	ba e0       	ldi	r27, 0x0A	; 10
    6940:	4b 02       	muls	r20, r27
    6942:	a0 01       	movw	r20, r0
    6944:	11 24       	eor	r1, r1
    6946:	e6 e8       	ldi	r30, 0x86	; 134
    6948:	f6 e0       	ldi	r31, 0x06	; 6
    694a:	88 e8       	ldi	r24, 0x88	; 136
    694c:	96 e0       	ldi	r25, 0x06	; 6
    694e:	04 e8       	ldi	r16, 0x84	; 132
    6950:	16 e0       	ldi	r17, 0x06	; 6
		else if (Config.FailsafeType == ADVANCED) 
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Override throttle
				if ((Config.Channel[i].source_a == THROTTLE) || (Config.Channel[i].source_b == THROTTLE))
    6952:	60 81       	ld	r22, Z
    6954:	66 23       	and	r22, r22
    6956:	21 f0       	breq	.+8      	; 0x6960 <ProcessMixer+0x418>
    6958:	dc 01       	movw	r26, r24
    695a:	6c 91       	ld	r22, X
    695c:	61 11       	cpse	r22, r1
    695e:	03 c0       	rjmp	.+6      	; 0x6966 <ProcessMixer+0x41e>
				{
					// Convert throttle setting to servo value
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeThrottle);				
    6960:	d8 01       	movw	r26, r16
    6962:	2d 93       	st	X+, r18
    6964:	3c 93       	st	X, r19
				}

				// Override rudder						
				if (Config.Channel[i].source_a == RUDDER)
    6966:	60 81       	ld	r22, Z
    6968:	63 30       	cpi	r22, 0x03	; 3
    696a:	19 f4       	brne	.+6      	; 0x6972 <ProcessMixer+0x42a>
				{
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeRudder);	
    696c:	d8 01       	movw	r26, r16
    696e:	4d 93       	st	X+, r20
    6970:	5c 93       	st	X, r21
    6972:	3f 96       	adiw	r30, 0x0f	; 15
    6974:	01 5f       	subi	r16, 0xF1	; 241
    6976:	1f 4f       	sbci	r17, 0xFF	; 255
    6978:	0f 96       	adiw	r24, 0x0f	; 15
		// Advanced failsafe. Autolevel ON, use failsafe trims to adjust autolevel.
		// Set any throttle or rudder channels to preset values
		// Pitch and Roll values trim the pitch/roll autolevel
		else if (Config.FailsafeType == ADVANCED) 
		{
			for (i = 0; i < MAX_OUTPUTS; i++)
    697a:	b6 e0       	ldi	r27, 0x06	; 6
    697c:	ee 3f       	cpi	r30, 0xFE	; 254
    697e:	fb 07       	cpc	r31, r27
    6980:	41 f7       	brne	.-48     	; 0x6952 <ProcessMixer+0x40a>
    6982:	5c c0       	rjmp	.+184    	; 0x6a3c <ProcessMixer+0x4f4>
	//************************************************************
	// Re-mix flaps from flaperons as required
	//************************************************************ 

	// The flap part of the signal has been removed so we have to reinsert it here.
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    6984:	80 91 7c 06 	lds	r24, 0x067C
    6988:	81 11       	cpse	r24, r1
    698a:	65 cf       	rjmp	.-310    	; 0x6856 <ProcessMixer+0x30e>
	{
		// If flapspeed is set to anything other than zero (normal)
		if (Config.flapspeed) 
    698c:	80 91 13 06 	lds	r24, 0x0613
    6990:	20 91 32 05 	lds	r18, 0x0532
    6994:	30 91 33 05 	lds	r19, 0x0533
    6998:	60 91 2d 05 	lds	r22, 0x052D
    699c:	48 2f       	mov	r20, r24
    699e:	55 27       	eor	r21, r21
    69a0:	47 fd       	sbrc	r20, 7
    69a2:	50 95       	com	r21
    69a4:	88 23       	and	r24, r24
    69a6:	f9 f0       	breq	.+62     	; 0x69e6 <ProcessMixer+0x49e>
		{
			// Do flap speed control
			if (((slowFlaps - flap) >= 1) || ((slowFlaps - flap) <= -1))	// Difference larger than one step, so ok
    69a8:	80 91 2e 05 	lds	r24, 0x052E
    69ac:	90 91 2f 05 	lds	r25, 0x052F
    69b0:	82 17       	cp	r24, r18
    69b2:	93 07       	cpc	r25, r19
    69b4:	e1 f0       	breq	.+56     	; 0x69ee <ProcessMixer+0x4a6>
			else
			{
				speed = 1;					// Otherwise this will oscillate
			}

			if ((slowFlaps < flap) && (flapskip == Config.flapspeed))
    69b6:	82 17       	cp	r24, r18
    69b8:	93 07       	cpc	r25, r19
    69ba:	3c f4       	brge	.+14     	; 0x69ca <ProcessMixer+0x482>
    69bc:	26 2f       	mov	r18, r22
    69be:	30 e0       	ldi	r19, 0x00	; 0
    69c0:	24 17       	cp	r18, r20
    69c2:	35 07       	cpc	r19, r21
    69c4:	a1 f4       	brne	.+40     	; 0x69ee <ProcessMixer+0x4a6>
			{
				slowFlaps += speed;
    69c6:	0f 96       	adiw	r24, 0x0f	; 15
    69c8:	09 c0       	rjmp	.+18     	; 0x69dc <ProcessMixer+0x494>
			} 
			else if ((slowFlaps > flap) && (flapskip == Config.flapspeed)) 
    69ca:	28 17       	cp	r18, r24
    69cc:	39 07       	cpc	r19, r25
    69ce:	7c f4       	brge	.+30     	; 0x69ee <ProcessMixer+0x4a6>
    69d0:	26 2f       	mov	r18, r22
    69d2:	30 e0       	ldi	r19, 0x00	; 0
    69d4:	24 17       	cp	r18, r20
    69d6:	35 07       	cpc	r19, r21
    69d8:	51 f4       	brne	.+20     	; 0x69ee <ProcessMixer+0x4a6>
			{
				slowFlaps -= speed;
    69da:	0f 97       	sbiw	r24, 0x0f	; 15
    69dc:	90 93 2f 05 	sts	0x052F, r25
    69e0:	80 93 2e 05 	sts	0x052E, r24
    69e4:	04 c0       	rjmp	.+8      	; 0x69ee <ProcessMixer+0x4a6>
			
		} 
		// No speed control requested so copy flaps
		else
		{
		 	slowFlaps = flap;
    69e6:	30 93 2f 05 	sts	0x052F, r19
    69ea:	20 93 2e 05 	sts	0x052E, r18
		}

		flapskip++;
    69ee:	6f 5f       	subi	r22, 0xFF	; 255
		if (flapskip > Config.flapspeed) flapskip = 0;
    69f0:	86 2f       	mov	r24, r22
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	48 17       	cp	r20, r24
    69f6:	59 07       	cpc	r21, r25
    69f8:	1c f0       	brlt	.+6      	; 0x6a00 <ProcessMixer+0x4b8>
		else
		{
		 	slowFlaps = flap;
		}

		flapskip++;
    69fa:	60 93 2d 05 	sts	0x052D, r22
    69fe:	02 c0       	rjmp	.+4      	; 0x6a04 <ProcessMixer+0x4bc>
		if (flapskip > Config.flapspeed) flapskip = 0;
    6a00:	10 92 2d 05 	sts	0x052D, r1
			temp = Config.Channel[i].value;

			// Restore flaps
			if (Config.Channel[i].source_a == AILERON)
			{
				temp += slowFlaps;
    6a04:	20 91 2e 05 	lds	r18, 0x052E
    6a08:	30 91 2f 05 	lds	r19, 0x052F
    6a0c:	e4 e8       	ldi	r30, 0x84	; 132
    6a0e:	f6 e0       	ldi	r31, 0x06	; 6
    6a10:	a6 e8       	ldi	r26, 0x86	; 134
    6a12:	b6 e0       	ldi	r27, 0x06	; 6
		if (flapskip > Config.flapspeed) flapskip = 0;

		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Get solution
			temp = Config.Channel[i].value;
    6a14:	80 81       	ld	r24, Z
    6a16:	91 81       	ldd	r25, Z+1	; 0x01

			// Restore flaps
			if (Config.Channel[i].source_a == AILERON)
    6a18:	4c 91       	ld	r20, X
    6a1a:	41 30       	cpi	r20, 0x01	; 1
    6a1c:	11 f4       	brne	.+4      	; 0x6a22 <ProcessMixer+0x4da>
			{
				temp += slowFlaps;
    6a1e:	82 0f       	add	r24, r18
    6a20:	93 1f       	adc	r25, r19
			}
			if (Config.Channel[i].source_a == Config.FlapChan)
    6a22:	43 11       	cpse	r20, r3
    6a24:	02 c0       	rjmp	.+4      	; 0x6a2a <ProcessMixer+0x4e2>
			{
				temp -= slowFlaps;
    6a26:	82 1b       	sub	r24, r18
    6a28:	93 0b       	sbc	r25, r19
			}

			// Update channel data solution
			Config.Channel[i].value = temp;
    6a2a:	91 83       	std	Z+1, r25	; 0x01
    6a2c:	80 83       	st	Z, r24
    6a2e:	3f 96       	adiw	r30, 0x0f	; 15
    6a30:	1f 96       	adiw	r26, 0x0f	; 15
		}

		flapskip++;
		if (flapskip > Config.flapspeed) flapskip = 0;

		for (i = 0; i < MAX_OUTPUTS; i++)
    6a32:	66 e0       	ldi	r22, 0x06	; 6
    6a34:	ec 3f       	cpi	r30, 0xFC	; 252
    6a36:	f6 07       	cpc	r31, r22
    6a38:	69 f7       	brne	.-38     	; 0x6a14 <ProcessMixer+0x4cc>
    6a3a:	0d cf       	rjmp	.-486    	; 0x6856 <ProcessMixer+0x30e>
					Config.Channel[i].value = scale_percent_nooffset(Config.FailsafeRudder);	
				}
			}
		}
	} // Failsafe
}
    6a3c:	61 96       	adiw	r28, 0x11	; 17
    6a3e:	0f b6       	in	r0, 0x3f	; 63
    6a40:	f8 94       	cli
    6a42:	de bf       	out	0x3e, r29	; 62
    6a44:	0f be       	out	0x3f, r0	; 63
    6a46:	cd bf       	out	0x3d, r28	; 61
    6a48:	df 91       	pop	r29
    6a4a:	cf 91       	pop	r28
    6a4c:	1f 91       	pop	r17
    6a4e:	0f 91       	pop	r16
    6a50:	ff 90       	pop	r15
    6a52:	ef 90       	pop	r14
    6a54:	df 90       	pop	r13
    6a56:	cf 90       	pop	r12
    6a58:	bf 90       	pop	r11
    6a5a:	af 90       	pop	r10
    6a5c:	9f 90       	pop	r9
    6a5e:	8f 90       	pop	r8
    6a60:	7f 90       	pop	r7
    6a62:	6f 90       	pop	r6
    6a64:	5f 90       	pop	r5
    6a66:	4f 90       	pop	r4
    6a68:	3f 90       	pop	r3
    6a6a:	08 95       	ret

00006a6c <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    6a6c:	df 92       	push	r13
    6a6e:	ef 92       	push	r14
    6a70:	ff 92       	push	r15
    6a72:	0f 93       	push	r16
    6a74:	1f 93       	push	r17
    6a76:	cf 93       	push	r28
    6a78:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    6a7a:	dc 01       	movw	r26, r24
    6a7c:	0d 90       	ld	r0, X+
    6a7e:	00 20       	and	r0, r0
    6a80:	e9 f7       	brne	.-6      	; 0x6a7c <mugui_text_sizestring+0x10>
    6a82:	11 97       	sbiw	r26, 0x01	; 1
    6a84:	a8 1b       	sub	r26, r24
    6a86:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    6a88:	fb 01       	movw	r30, r22
    6a8a:	34 96       	adiw	r30, 0x04	; 4
    6a8c:	e4 90       	lpm	r14, Z
    6a8e:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    6a90:	32 97       	sbiw	r30, 0x02	; 2
    6a92:	d4 90       	lpm	r13, Z
    6a94:	ec 01       	movw	r28, r24
    6a96:	a8 0f       	add	r26, r24
    6a98:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    6a9a:	80 e0       	ldi	r24, 0x00	; 0
    6a9c:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    6a9e:	ca 17       	cp	r28, r26
    6aa0:	db 07       	cpc	r29, r27
    6aa2:	29 f1       	breq	.+74     	; 0x6aee <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    6aa4:	29 91       	ld	r18, Y+
    6aa6:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6aa8:	30 e0       	ldi	r19, 0x00	; 0
    6aaa:	22 0f       	add	r18, r18
    6aac:	33 1f       	adc	r19, r19
    6aae:	f9 01       	movw	r30, r18
    6ab0:	35 96       	adiw	r30, 0x05	; 5
    6ab2:	e6 0f       	add	r30, r22
    6ab4:	f7 1f       	adc	r31, r23
    6ab6:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6ab8:	f9 01       	movw	r30, r18
    6aba:	36 96       	adiw	r30, 0x06	; 6
    6abc:	e6 0f       	add	r30, r22
    6abe:	f7 1f       	adc	r31, r23
    6ac0:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    6ac2:	10 e0       	ldi	r17, 0x00	; 0
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    6ac8:	32 2f       	mov	r19, r18
    6aca:	21 2f       	mov	r18, r17
    6acc:	10 2f       	mov	r17, r16
    6ace:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    6ad0:	0e 0f       	add	r16, r30
    6ad2:	11 1d       	adc	r17, r1
    6ad4:	21 1d       	adc	r18, r1
    6ad6:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    6ad8:	fb 01       	movw	r30, r22
    6ada:	e0 0f       	add	r30, r16
    6adc:	f1 1f       	adc	r31, r17
    6ade:	04 91       	lpm	r16, Z
    6ae0:	20 2f       	mov	r18, r16
    6ae2:	30 e0       	ldi	r19, 0x00	; 0
    6ae4:	2f 5f       	subi	r18, 0xFF	; 255
    6ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae8:	82 0f       	add	r24, r18
    6aea:	93 1f       	adc	r25, r19
    6aec:	d8 cf       	rjmp	.-80     	; 0x6a9e <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    6aee:	fa 01       	movw	r30, r20
    6af0:	91 83       	std	Z+1, r25	; 0x01
    6af2:	80 83       	st	Z, r24
	size->y = height;
    6af4:	f3 82       	std	Z+3, r15	; 0x03
    6af6:	e2 82       	std	Z+2, r14	; 0x02
}
    6af8:	df 91       	pop	r29
    6afa:	cf 91       	pop	r28
    6afc:	1f 91       	pop	r17
    6afe:	0f 91       	pop	r16
    6b00:	ff 90       	pop	r15
    6b02:	ef 90       	pop	r14
    6b04:	df 90       	pop	r13
    6b06:	08 95       	ret

00006b08 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    6b08:	ab e6       	ldi	r26, 0x6B	; 107
    6b0a:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    6b0c:	20 e0       	ldi	r18, 0x00	; 0
    6b0e:	30 e0       	ldi	r19, 0x00	; 0
    6b10:	fc 01       	movw	r30, r24
    6b12:	e2 0f       	add	r30, r18
    6b14:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    6b16:	44 91       	lpm	r20, Z
    6b18:	44 23       	and	r20, r20
    6b1a:	41 f0       	breq	.+16     	; 0x6b2c <pgm_mugui_scopy+0x24>
    6b1c:	28 31       	cpi	r18, 0x18	; 24
    6b1e:	31 05       	cpc	r19, r1
    6b20:	29 f0       	breq	.+10     	; 0x6b2c <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    6b22:	e4 91       	lpm	r30, Z
    6b24:	ed 93       	st	X+, r30
		i++;
    6b26:	2f 5f       	subi	r18, 0xFF	; 255
    6b28:	3f 4f       	sbci	r19, 0xFF	; 255
    6b2a:	f2 cf       	rjmp	.-28     	; 0x6b10 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    6b2c:	f9 01       	movw	r30, r18
    6b2e:	e5 59       	subi	r30, 0x95	; 149
    6b30:	fa 4f       	sbci	r31, 0xFA	; 250
    6b32:	10 82       	st	Z, r1
    6b34:	08 95       	ret

00006b36 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6b36:	2f 92       	push	r2
    6b38:	3f 92       	push	r3
    6b3a:	4f 92       	push	r4
    6b3c:	5f 92       	push	r5
    6b3e:	6f 92       	push	r6
    6b40:	7f 92       	push	r7
    6b42:	8f 92       	push	r8
    6b44:	9f 92       	push	r9
    6b46:	af 92       	push	r10
    6b48:	bf 92       	push	r11
    6b4a:	cf 92       	push	r12
    6b4c:	df 92       	push	r13
    6b4e:	ef 92       	push	r14
    6b50:	ff 92       	push	r15
    6b52:	0f 93       	push	r16
    6b54:	1f 93       	push	r17
    6b56:	cf 93       	push	r28
    6b58:	df 93       	push	r29
    6b5a:	cd b7       	in	r28, 0x3d	; 61
    6b5c:	de b7       	in	r29, 0x3e	; 62
    6b5e:	29 97       	sbiw	r28, 0x09	; 9
    6b60:	0f b6       	in	r0, 0x3f	; 63
    6b62:	f8 94       	cli
    6b64:	de bf       	out	0x3e, r29	; 62
    6b66:	0f be       	out	0x3f, r0	; 63
    6b68:	cd bf       	out	0x3d, r28	; 61
    6b6a:	4c 83       	std	Y+4, r20	; 0x04
    6b6c:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    6b6e:	fb 01       	movw	r30, r22
    6b70:	32 96       	adiw	r30, 0x02	; 2
    6b72:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    6b74:	32 96       	adiw	r30, 0x02	; 2
    6b76:	e4 91       	lpm	r30, Z
    6b78:	2e 2e       	mov	r2, r30
    6b7a:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    6b7c:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	88 0f       	add	r24, r24
    6b82:	99 1f       	adc	r25, r25
    6b84:	fc 01       	movw	r30, r24
    6b86:	35 96       	adiw	r30, 0x05	; 5
    6b88:	e6 0f       	add	r30, r22
    6b8a:	f7 1f       	adc	r31, r23
    6b8c:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6b8e:	fc 01       	movw	r30, r24
    6b90:	36 96       	adiw	r30, 0x06	; 6
    6b92:	e6 0f       	add	r30, r22
    6b94:	f7 1f       	adc	r31, r23
    6b96:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    6b98:	06 2d       	mov	r16, r6
    6b9a:	10 e0       	ldi	r17, 0x00	; 0
    6b9c:	20 e0       	ldi	r18, 0x00	; 0
    6b9e:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    6ba0:	32 2f       	mov	r19, r18
    6ba2:	21 2f       	mov	r18, r17
    6ba4:	10 2f       	mov	r17, r16
    6ba6:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    6ba8:	08 0f       	add	r16, r24
    6baa:	11 1d       	adc	r17, r1
    6bac:	21 1d       	adc	r18, r1
    6bae:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    6bb0:	c8 01       	movw	r24, r16
    6bb2:	fb 01       	movw	r30, r22
    6bb4:	e0 0f       	add	r30, r16
    6bb6:	f1 1f       	adc	r31, r17
    6bb8:	64 90       	lpm	r6, Z
    6bba:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    6bbc:	21 01       	movw	r4, r2
    6bbe:	21 e0       	ldi	r18, 0x01	; 1
    6bc0:	42 1a       	sub	r4, r18
    6bc2:	51 08       	sbc	r5, r1
    6bc4:	13 e0       	ldi	r17, 0x03	; 3
    6bc6:	56 94       	lsr	r5
    6bc8:	47 94       	ror	r4
    6bca:	1a 95       	dec	r17
    6bcc:	e1 f7       	brne	.-8      	; 0x6bc6 <mugui_lcd_putc+0x90>
    6bce:	43 94       	inc	r4
    6bd0:	a4 2d       	mov	r26, r4
    6bd2:	b0 e0       	ldi	r27, 0x00	; 0
    6bd4:	ba 83       	std	Y+2, r27	; 0x02
    6bd6:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    6bd8:	a1 2c       	mov	r10, r1
    6bda:	b1 2c       	mov	r11, r1
    6bdc:	00 e0       	ldi	r16, 0x00	; 0
    6bde:	10 e0       	ldi	r17, 0x00	; 0
    6be0:	4b 01       	movw	r8, r22
    6be2:	bf ef       	ldi	r27, 0xFF	; 255
    6be4:	8b 1a       	sub	r8, r27
    6be6:	9b 0a       	sbc	r9, r27
    6be8:	88 0e       	add	r8, r24
    6bea:	99 1e       	adc	r9, r25
    6bec:	06 15       	cp	r16, r6
    6bee:	17 05       	cpc	r17, r7
    6bf0:	08 f0       	brcs	.+2      	; 0x6bf4 <mugui_lcd_putc+0xbe>
    6bf2:	43 c0       	rjmp	.+134    	; 0x6c7a <mugui_lcd_putc+0x144>
    6bf4:	c1 2c       	mov	r12, r1
    6bf6:	d1 2c       	mov	r13, r1
    6bf8:	e1 2c       	mov	r14, r1
    6bfa:	f1 2c       	mov	r15, r1
    6bfc:	94 01       	movw	r18, r8
    6bfe:	2a 0d       	add	r18, r10
    6c00:	3b 1d       	adc	r19, r11
    6c02:	3f 83       	std	Y+7, r19	; 0x07
    6c04:	2e 83       	std	Y+6, r18	; 0x06
    6c06:	5c 80       	ldd	r5, Y+4	; 0x04
    6c08:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    6c0a:	c4 14       	cp	r12, r4
    6c0c:	78 f5       	brcc	.+94     	; 0x6c6c <mugui_lcd_putc+0x136>
    6c0e:	ee 81       	ldd	r30, Y+6	; 0x06
    6c10:	ff 81       	ldd	r31, Y+7	; 0x07
    6c12:	ec 0d       	add	r30, r12
    6c14:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    6c16:	34 91       	lpm	r19, Z
    6c18:	3b 83       	std	Y+3, r19	; 0x03
    6c1a:	19 86       	std	Y+9, r1	; 0x09
    6c1c:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6c1e:	e2 14       	cp	r14, r2
    6c20:	f3 04       	cpc	r15, r3
    6c22:	00 f5       	brcc	.+64     	; 0x6c64 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    6c24:	81 e0       	ldi	r24, 0x01	; 1
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	08 84       	ldd	r0, Y+8	; 0x08
    6c2a:	02 c0       	rjmp	.+4      	; 0x6c30 <mugui_lcd_putc+0xfa>
    6c2c:	88 0f       	add	r24, r24
    6c2e:	99 1f       	adc	r25, r25
    6c30:	0a 94       	dec	r0
    6c32:	e2 f7       	brpl	.-8      	; 0x6c2c <mugui_lcd_putc+0xf6>
					bit = data & mask;
    6c34:	3b 81       	ldd	r19, Y+3	; 0x03
    6c36:	83 23       	and	r24, r19
    6c38:	4d 81       	ldd	r20, Y+5	; 0x05
    6c3a:	4e 0d       	add	r20, r14
					if(bit)
    6c3c:	88 23       	and	r24, r24
    6c3e:	11 f0       	breq	.+4      	; 0x6c44 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    6c40:	21 e0       	ldi	r18, 0x01	; 1
    6c42:	01 c0       	rjmp	.+2      	; 0x6c46 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    6c44:	20 e0       	ldi	r18, 0x00	; 0
    6c46:	65 2d       	mov	r22, r5
    6c48:	80 e0       	ldi	r24, 0x00	; 0
    6c4a:	91 e0       	ldi	r25, 0x01	; 1
    6c4c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <setpixel>
					}
					ty++;
    6c50:	8f ef       	ldi	r24, 0xFF	; 255
    6c52:	e8 1a       	sub	r14, r24
    6c54:	f8 0a       	sbc	r15, r24
    6c56:	a8 85       	ldd	r26, Y+8	; 0x08
    6c58:	b9 85       	ldd	r27, Y+9	; 0x09
    6c5a:	11 96       	adiw	r26, 0x01	; 1
    6c5c:	b9 87       	std	Y+9, r27	; 0x09
    6c5e:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6c60:	18 97       	sbiw	r26, 0x08	; 8
    6c62:	e9 f6       	brne	.-70     	; 0x6c1e <mugui_lcd_putc+0xe8>
    6c64:	bf ef       	ldi	r27, 0xFF	; 255
    6c66:	cb 1a       	sub	r12, r27
    6c68:	db 0a       	sbc	r13, r27
    6c6a:	cf cf       	rjmp	.-98     	; 0x6c0a <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    6c6c:	0f 5f       	subi	r16, 0xFF	; 255
    6c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    6c70:	e9 81       	ldd	r30, Y+1	; 0x01
    6c72:	fa 81       	ldd	r31, Y+2	; 0x02
    6c74:	ae 0e       	add	r10, r30
    6c76:	bf 1e       	adc	r11, r31
    6c78:	b9 cf       	rjmp	.-142    	; 0x6bec <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    6c7a:	c3 01       	movw	r24, r6
    6c7c:	29 96       	adiw	r28, 0x09	; 9
    6c7e:	0f b6       	in	r0, 0x3f	; 63
    6c80:	f8 94       	cli
    6c82:	de bf       	out	0x3e, r29	; 62
    6c84:	0f be       	out	0x3f, r0	; 63
    6c86:	cd bf       	out	0x3d, r28	; 61
    6c88:	df 91       	pop	r29
    6c8a:	cf 91       	pop	r28
    6c8c:	1f 91       	pop	r17
    6c8e:	0f 91       	pop	r16
    6c90:	ff 90       	pop	r15
    6c92:	ef 90       	pop	r14
    6c94:	df 90       	pop	r13
    6c96:	cf 90       	pop	r12
    6c98:	bf 90       	pop	r11
    6c9a:	af 90       	pop	r10
    6c9c:	9f 90       	pop	r9
    6c9e:	8f 90       	pop	r8
    6ca0:	7f 90       	pop	r7
    6ca2:	6f 90       	pop	r6
    6ca4:	5f 90       	pop	r5
    6ca6:	4f 90       	pop	r4
    6ca8:	3f 90       	pop	r3
    6caa:	2f 90       	pop	r2
    6cac:	08 95       	ret

00006cae <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6cae:	af 92       	push	r10
    6cb0:	bf 92       	push	r11
    6cb2:	cf 92       	push	r12
    6cb4:	df 92       	push	r13
    6cb6:	ef 92       	push	r14
    6cb8:	ff 92       	push	r15
    6cba:	0f 93       	push	r16
    6cbc:	1f 93       	push	r17
    6cbe:	cf 93       	push	r28
    6cc0:	df 93       	push	r29
    6cc2:	ec 01       	movw	r28, r24
    6cc4:	7b 01       	movw	r14, r22
    6cc6:	6a 01       	movw	r12, r20
    6cc8:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    6cca:	00 e0       	ldi	r16, 0x00	; 0
    6ccc:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    6cce:	ce 01       	movw	r24, r28
    6cd0:	fe 01       	movw	r30, r28
    6cd2:	24 91       	lpm	r18, Z
    6cd4:	22 23       	and	r18, r18
    6cd6:	71 f0       	breq	.+28     	; 0x6cf4 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    6cd8:	21 96       	adiw	r28, 0x01	; 1
    6cda:	fc 01       	movw	r30, r24
    6cdc:	84 91       	lpm	r24, Z
    6cde:	a8 01       	movw	r20, r16
    6ce0:	4c 0d       	add	r20, r12
    6ce2:	5d 1d       	adc	r21, r13
    6ce4:	95 01       	movw	r18, r10
    6ce6:	b7 01       	movw	r22, r14
    6ce8:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <mugui_lcd_putc>
    6cec:	01 96       	adiw	r24, 0x01	; 1
    6cee:	08 0f       	add	r16, r24
    6cf0:	19 1f       	adc	r17, r25
    6cf2:	ed cf       	rjmp	.-38     	; 0x6cce <pgm_mugui_lcd_puts+0x20>
	}
}
    6cf4:	df 91       	pop	r29
    6cf6:	cf 91       	pop	r28
    6cf8:	1f 91       	pop	r17
    6cfa:	0f 91       	pop	r16
    6cfc:	ff 90       	pop	r15
    6cfe:	ef 90       	pop	r14
    6d00:	df 90       	pop	r13
    6d02:	cf 90       	pop	r12
    6d04:	bf 90       	pop	r11
    6d06:	af 90       	pop	r10
    6d08:	08 95       	ret

00006d0a <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6d0a:	8f 92       	push	r8
    6d0c:	9f 92       	push	r9
    6d0e:	af 92       	push	r10
    6d10:	bf 92       	push	r11
    6d12:	cf 92       	push	r12
    6d14:	df 92       	push	r13
    6d16:	ef 92       	push	r14
    6d18:	ff 92       	push	r15
    6d1a:	0f 93       	push	r16
    6d1c:	1f 93       	push	r17
    6d1e:	cf 93       	push	r28
    6d20:	df 93       	push	r29
    6d22:	6b 01       	movw	r12, r22
    6d24:	5a 01       	movw	r10, r20
    6d26:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    6d28:	ec 01       	movw	r28, r24
    6d2a:	09 90       	ld	r0, Y+
    6d2c:	00 20       	and	r0, r0
    6d2e:	e9 f7       	brne	.-6      	; 0x6d2a <mugui_lcd_puts+0x20>
    6d30:	8c 01       	movw	r16, r24
    6d32:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    6d34:	e1 2c       	mov	r14, r1
    6d36:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    6d38:	0c 17       	cp	r16, r28
    6d3a:	1d 07       	cpc	r17, r29
    6d3c:	71 f0       	breq	.+28     	; 0x6d5a <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    6d3e:	a7 01       	movw	r20, r14
    6d40:	4a 0d       	add	r20, r10
    6d42:	5b 1d       	adc	r21, r11
    6d44:	94 01       	movw	r18, r8
    6d46:	b6 01       	movw	r22, r12
    6d48:	f8 01       	movw	r30, r16
    6d4a:	81 91       	ld	r24, Z+
    6d4c:	8f 01       	movw	r16, r30
    6d4e:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <mugui_lcd_putc>
    6d52:	01 96       	adiw	r24, 0x01	; 1
    6d54:	e8 0e       	add	r14, r24
    6d56:	f9 1e       	adc	r15, r25
    6d58:	ef cf       	rjmp	.-34     	; 0x6d38 <mugui_lcd_puts+0x2e>
	}
}
    6d5a:	df 91       	pop	r29
    6d5c:	cf 91       	pop	r28
    6d5e:	1f 91       	pop	r17
    6d60:	0f 91       	pop	r16
    6d62:	ff 90       	pop	r15
    6d64:	ef 90       	pop	r14
    6d66:	df 90       	pop	r13
    6d68:	cf 90       	pop	r12
    6d6a:	bf 90       	pop	r11
    6d6c:	af 90       	pop	r10
    6d6e:	9f 90       	pop	r9
    6d70:	8f 90       	pop	r8
    6d72:	08 95       	ret

00006d74 <Sensor_PID>:

int16_t DynGain = 0;

// Run each loop to average gyro data
void Sensor_PID(uint32_t period)
{
    6d74:	2f 92       	push	r2
    6d76:	3f 92       	push	r3
    6d78:	4f 92       	push	r4
    6d7a:	5f 92       	push	r5
    6d7c:	6f 92       	push	r6
    6d7e:	7f 92       	push	r7
    6d80:	8f 92       	push	r8
    6d82:	9f 92       	push	r9
    6d84:	af 92       	push	r10
    6d86:	bf 92       	push	r11
    6d88:	cf 92       	push	r12
    6d8a:	df 92       	push	r13
    6d8c:	ef 92       	push	r14
    6d8e:	ff 92       	push	r15
    6d90:	0f 93       	push	r16
    6d92:	1f 93       	push	r17
    6d94:	cf 93       	push	r28
    6d96:	df 93       	push	r29
    6d98:	cd b7       	in	r28, 0x3d	; 61
    6d9a:	de b7       	in	r29, 0x3e	; 62
    6d9c:	2a 97       	sbiw	r28, 0x0a	; 10
    6d9e:	0f b6       	in	r0, 0x3f	; 63
    6da0:	f8 94       	cli
    6da2:	de bf       	out	0x3e, r29	; 62
    6da4:	0f be       	out	0x3f, r0	; 63
    6da6:	cd bf       	out	0x3d, r28	; 61
    6da8:	8b 01       	movw	r16, r22
    6daa:	9c 01       	movw	r18, r24
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    6dac:	80 91 d1 07 	lds	r24, 0x07D1
    6db0:	90 91 d2 07 	lds	r25, 0x07D2
    6db4:	91 95       	neg	r25
    6db6:	81 95       	neg	r24
    6db8:	91 09       	sbc	r25, r1
    6dba:	9a 83       	std	Y+2, r25	; 0x02
    6dbc:	89 83       	std	Y+1, r24	; 0x01
    6dbe:	80 91 d3 07 	lds	r24, 0x07D3
    6dc2:	90 91 d4 07 	lds	r25, 0x07D4
    6dc6:	9c 83       	std	Y+4, r25	; 0x04
    6dc8:	8b 83       	std	Y+3, r24	; 0x03
    6dca:	80 91 d5 07 	lds	r24, 0x07D5
    6dce:	90 91 d6 07 	lds	r25, 0x07D6
    6dd2:	9e 83       	std	Y+6, r25	; 0x06
    6dd4:	8d 83       	std	Y+5, r24	; 0x05
	// Set up dynamic gain variable once per loop
	// N.B. Config.DynGainDiv = 2500 / Config.DynGain;
	//************************************************************

	// Channel controlling the dynamic gain
	DynGain = RxChannel[Config.DynGainSrc] - 2500; // 0-1250-2500 range
    6dd6:	e0 91 10 06 	lds	r30, 0x0610
    6dda:	ee 0f       	add	r30, r30
    6ddc:	ff 0b       	sbc	r31, r31
    6dde:	e6 5a       	subi	r30, 0xA6	; 166
    6de0:	f8 4f       	sbci	r31, 0xF8	; 248
    6de2:	80 81       	ld	r24, Z
    6de4:	91 81       	ldd	r25, Z+1	; 0x01
    6de6:	84 5c       	subi	r24, 0xC4	; 196
    6de8:	99 40       	sbci	r25, 0x09	; 9

	// Scale 0 - 2500 down to 0 - Config.DynGain (%)
	DynGain = DynGain / Config.DynGainDiv;
    6dea:	60 91 7a 06 	lds	r22, 0x067A
    6dee:	70 91 7b 06 	lds	r23, 0x067B
    6df2:	0e 94 11 42 	call	0x8422	; 0x8422 <__divmodhi4>
    6df6:	70 93 3b 05 	sts	0x053B, r23
    6dfa:	60 93 3a 05 	sts	0x053A, r22
	//************************************************************
	// Un-mix ailerons from flaperons as required
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    6dfe:	e0 91 0f 06 	lds	r30, 0x060F
    6e02:	80 91 7c 06 	lds	r24, 0x067C
    6e06:	e8 30       	cpi	r30, 0x08	; 8
    6e08:	c1 f1       	breq	.+112    	; 0x6e7a <Sensor_PID+0x106>
    6e0a:	81 11       	cpse	r24, r1
    6e0c:	36 c0       	rjmp	.+108    	; 0x6e7a <Sensor_PID+0x106>
	{
		// Recreate actual roll signal from flaperons
		roll_actual = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    6e0e:	80 91 d1 07 	lds	r24, 0x07D1
    6e12:	90 91 d2 07 	lds	r25, 0x07D2
    6e16:	ee 0f       	add	r30, r30
    6e18:	ff 0b       	sbc	r31, r31
    6e1a:	e1 53       	subi	r30, 0x31	; 49
    6e1c:	f8 4f       	sbci	r31, 0xF8	; 248
    6e1e:	40 81       	ld	r20, Z
    6e20:	51 81       	ldd	r21, Z+1	; 0x01
    6e22:	84 0f       	add	r24, r20
    6e24:	95 1f       	adc	r25, r21
		RCinputsAxis[ROLL] = roll_actual >> 1;
    6e26:	95 95       	asr	r25
    6e28:	87 95       	ror	r24
    6e2a:	9a 83       	std	Y+2, r25	; 0x02
    6e2c:	89 83       	std	Y+1, r24	; 0x01
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    6e2e:	80 91 14 06 	lds	r24, 0x0614
    6e32:	92 e0       	ldi	r25, 0x02	; 2
    6e34:	c9 2e       	mov	r12, r25
    6e36:	d1 2c       	mov	r13, r1
    6e38:	c8 1a       	sub	r12, r24
    6e3a:	d1 08       	sbc	r13, r1
    6e3c:	87 fd       	sbrc	r24, 7
    6e3e:	d3 94       	inc	r13
		
		P1_temp = gyroADC[axis] + stick;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    6e40:	c9 01       	movw	r24, r18
    6e42:	b8 01       	movw	r22, r16
    6e44:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <__floatunsisf>
    6e48:	20 e0       	ldi	r18, 0x00	; 0
    6e4a:	30 e3       	ldi	r19, 0x30	; 48
    6e4c:	4f e5       	ldi	r20, 0x5F	; 95
    6e4e:	55 e4       	ldi	r21, 0x45	; 69
    6e50:	0e 94 4b 40 	call	0x8096	; 0x8096 <__divsf3>
    6e54:	2b 01       	movw	r4, r22
    6e56:	3c 01       	movw	r6, r24
    6e58:	ce 01       	movw	r24, r28
    6e5a:	01 96       	adiw	r24, 0x01	; 1
    6e5c:	9a 87       	std	Y+10, r25	; 0x0a
    6e5e:	89 87       	std	Y+9, r24	; 0x09
    6e60:	a4 e8       	ldi	r26, 0x84	; 132
    6e62:	b5 e0       	ldi	r27, 0x05	; 5
    6e64:	b8 87       	std	Y+8, r27	; 0x08
    6e66:	af 83       	std	Y+7, r26	; 0x07
    6e68:	09 ea       	ldi	r16, 0xA9	; 169
    6e6a:	17 e0       	ldi	r17, 0x07	; 7
    6e6c:	21 ec       	ldi	r18, 0xC1	; 193
    6e6e:	22 2e       	mov	r2, r18
    6e70:	27 e0       	ldi	r18, 0x07	; 7
    6e72:	32 2e       	mov	r3, r18
    6e74:	e1 2c       	mov	r14, r1
    6e76:	f1 2c       	mov	r15, r1
    6e78:	17 c0       	rjmp	.+46     	; 0x6ea8 <Sensor_PID+0x134>
		RCinputsAxis[ROLL] = roll_actual >> 1;
	}

	// In in Flying Wing mode RCinputsAxis comes directly from RCinputs
	// Pitch has to be reversed
	else if (Config.MixMode == FWING)
    6e7a:	81 30       	cpi	r24, 0x01	; 1
    6e7c:	81 f4       	brne	.+32     	; 0x6e9e <Sensor_PID+0x12a>
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
    6e7e:	80 91 d1 07 	lds	r24, 0x07D1
    6e82:	90 91 d2 07 	lds	r25, 0x07D2
    6e86:	9a 83       	std	Y+2, r25	; 0x02
    6e88:	89 83       	std	Y+1, r24	; 0x01
		RCinputsAxis[PITCH] = -RCinputs[ELEVATOR];
    6e8a:	80 91 d3 07 	lds	r24, 0x07D3
    6e8e:	90 91 d4 07 	lds	r25, 0x07D4
    6e92:	91 95       	neg	r25
    6e94:	81 95       	neg	r24
    6e96:	91 09       	sbc	r25, r1
    6e98:	9c 83       	std	Y+4, r25	; 0x04
    6e9a:	8b 83       	std	Y+3, r24	; 0x03
    6e9c:	c8 cf       	rjmp	.-112    	; 0x6e2e <Sensor_PID+0xba>
	}

	// Otherwise roll is just roll...
	else
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
    6e9e:	80 91 d1 07 	lds	r24, 0x07D1
    6ea2:	90 91 d2 07 	lds	r25, 0x07D2
    6ea6:	c1 cf       	rjmp	.-126    	; 0x6e2a <Sensor_PID+0xb6>
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    6ea8:	e9 85       	ldd	r30, Y+9	; 0x09
    6eaa:	fa 85       	ldd	r31, Y+10	; 0x0a
    6eac:	81 90       	ld	r8, Z+
    6eae:	91 90       	ld	r9, Z+
    6eb0:	fa 87       	std	Y+10, r31	; 0x0a
    6eb2:	e9 87       	std	Y+9, r30	; 0x09
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		
		P1_temp = gyroADC[axis] + stick;
    6eb4:	af 81       	ldd	r26, Y+7	; 0x07
    6eb6:	b8 85       	ldd	r27, Y+8	; 0x08
    6eb8:	ad 90       	ld	r10, X+
    6eba:	bd 90       	ld	r11, X+
    6ebc:	b8 87       	std	Y+8, r27	; 0x08
    6ebe:	af 83       	std	Y+7, r26	; 0x07
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    6ec0:	b4 01       	movw	r22, r8
    6ec2:	0c 2c       	mov	r0, r12
    6ec4:	02 c0       	rjmp	.+4      	; 0x6eca <Sensor_PID+0x156>
    6ec6:	75 95       	asr	r23
    6ec8:	67 95       	ror	r22
    6eca:	0a 94       	dec	r0
    6ecc:	e2 f7       	brpl	.-8      	; 0x6ec6 <Sensor_PID+0x152>
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		
		P1_temp = gyroADC[axis] + stick;
    6ece:	6a 0d       	add	r22, r10
    6ed0:	7b 1d       	adc	r23, r11
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    6ed2:	88 27       	eor	r24, r24
    6ed4:	77 fd       	sbrc	r23, 7
    6ed6:	80 95       	com	r24
    6ed8:	98 2f       	mov	r25, r24
    6eda:	0e 94 e6 40 	call	0x81cc	; 0x81cc <__floatsisf>
		tempf2 = tempf2 * factor;
    6ede:	a3 01       	movw	r20, r6
    6ee0:	92 01       	movw	r18, r4
    6ee2:	0e 94 9a 41 	call	0x8334	; 0x8334 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    6ee6:	0e 94 b3 40 	call	0x8166	; 0x8166 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[axis] += P1_temp;
    6eea:	f8 01       	movw	r30, r16
    6eec:	20 81       	ld	r18, Z
    6eee:	31 81       	ldd	r19, Z+1	; 0x01
    6ef0:	42 81       	ldd	r20, Z+2	; 0x02
    6ef2:	53 81       	ldd	r21, Z+3	; 0x03
    6ef4:	62 0f       	add	r22, r18
    6ef6:	73 1f       	adc	r23, r19
    6ef8:	84 1f       	adc	r24, r20
    6efa:	95 1f       	adc	r25, r21
    6efc:	60 83       	st	Z, r22
    6efe:	71 83       	std	Z+1, r23	; 0x01
    6f00:	82 83       	std	Z+2, r24	; 0x02
    6f02:	93 83       	std	Z+3, r25	; 0x03

		// Reset the I-terms when you need to adjust the I-term with RC
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
    6f04:	89 28       	or	r8, r9
    6f06:	41 f1       	breq	.+80     	; 0x6f58 <Sensor_PID+0x1e4>
    6f08:	f7 01       	movw	r30, r14
    6f0a:	e7 59       	subi	r30, 0x97	; 151
    6f0c:	f9 4f       	sbci	r31, 0xF9	; 249
		{
			if (IntegralGyro[axis] > Config.Raw_I_Constrain[axis])
    6f0e:	20 81       	ld	r18, Z
    6f10:	31 81       	ldd	r19, Z+1	; 0x01
    6f12:	42 81       	ldd	r20, Z+2	; 0x02
    6f14:	53 81       	ldd	r21, Z+3	; 0x03
    6f16:	26 17       	cp	r18, r22
    6f18:	37 07       	cpc	r19, r23
    6f1a:	48 07       	cpc	r20, r24
    6f1c:	59 07       	cpc	r21, r25
    6f1e:	2c f4       	brge	.+10     	; 0x6f2a <Sensor_PID+0x1b6>
			{
				IntegralGyro[axis] = Config.Raw_I_Constrain[axis];
    6f20:	f8 01       	movw	r30, r16
    6f22:	20 83       	st	Z, r18
    6f24:	31 83       	std	Z+1, r19	; 0x01
    6f26:	42 83       	std	Z+2, r20	; 0x02
    6f28:	53 83       	std	Z+3, r21	; 0x03
			}
			if (IntegralGyro[axis] < -Config.Raw_I_Constrain[axis])
    6f2a:	da 01       	movw	r26, r20
    6f2c:	c9 01       	movw	r24, r18
    6f2e:	44 27       	eor	r20, r20
    6f30:	55 27       	eor	r21, r21
    6f32:	ba 01       	movw	r22, r20
    6f34:	48 1b       	sub	r20, r24
    6f36:	59 0b       	sbc	r21, r25
    6f38:	6a 0b       	sbc	r22, r26
    6f3a:	7b 0b       	sbc	r23, r27
    6f3c:	f8 01       	movw	r30, r16
    6f3e:	80 81       	ld	r24, Z
    6f40:	91 81       	ldd	r25, Z+1	; 0x01
    6f42:	a2 81       	ldd	r26, Z+2	; 0x02
    6f44:	b3 81       	ldd	r27, Z+3	; 0x03
    6f46:	84 17       	cp	r24, r20
    6f48:	95 07       	cpc	r25, r21
    6f4a:	a6 07       	cpc	r26, r22
    6f4c:	b7 07       	cpc	r27, r23
    6f4e:	24 f4       	brge	.+8      	; 0x6f58 <Sensor_PID+0x1e4>
			{
				IntegralGyro[axis] = -Config.Raw_I_Constrain[axis];
    6f50:	40 83       	st	Z, r20
    6f52:	51 83       	std	Z+1, r21	; 0x01
    6f54:	62 83       	std	Z+2, r22	; 0x02
    6f56:	73 83       	std	Z+3, r23	; 0x03

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    6f58:	a5 01       	movw	r20, r10
    6f5a:	66 27       	eor	r22, r22
    6f5c:	57 fd       	sbrc	r21, 7
    6f5e:	60 95       	com	r22
    6f60:	76 2f       	mov	r23, r22
    6f62:	f1 01       	movw	r30, r2
    6f64:	80 81       	ld	r24, Z
    6f66:	91 81       	ldd	r25, Z+1	; 0x01
    6f68:	a2 81       	ldd	r26, Z+2	; 0x02
    6f6a:	b3 81       	ldd	r27, Z+3	; 0x03
    6f6c:	84 0f       	add	r24, r20
    6f6e:	95 1f       	adc	r25, r21
    6f70:	a6 1f       	adc	r26, r22
    6f72:	b7 1f       	adc	r27, r23
    6f74:	81 93       	st	Z+, r24
    6f76:	91 93       	st	Z+, r25
    6f78:	a1 93       	st	Z+, r26
    6f7a:	b1 93       	st	Z+, r27
    6f7c:	1f 01       	movw	r2, r30
    6f7e:	0c 5f       	subi	r16, 0xFC	; 252
    6f80:	1f 4f       	sbci	r17, 0xFF	; 255
    6f82:	f4 e0       	ldi	r31, 0x04	; 4
    6f84:	ef 0e       	add	r14, r31
    6f86:	f1 1c       	adc	r15, r1

	//************************************************************
	// Per-cycle PID handling
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    6f88:	8c e0       	ldi	r24, 0x0C	; 12
    6f8a:	e8 16       	cp	r14, r24
    6f8c:	f1 04       	cpc	r15, r1
    6f8e:	09 f0       	breq	.+2      	; 0x6f92 <Sensor_PID+0x21e>
    6f90:	8b cf       	rjmp	.-234    	; 0x6ea8 <Sensor_PID+0x134>
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
		
	} // for (axis = 0; axis <= YAW; axis ++)
}
    6f92:	2a 96       	adiw	r28, 0x0a	; 10
    6f94:	0f b6       	in	r0, 0x3f	; 63
    6f96:	f8 94       	cli
    6f98:	de bf       	out	0x3e, r29	; 62
    6f9a:	0f be       	out	0x3f, r0	; 63
    6f9c:	cd bf       	out	0x3d, r28	; 61
    6f9e:	df 91       	pop	r29
    6fa0:	cf 91       	pop	r28
    6fa2:	1f 91       	pop	r17
    6fa4:	0f 91       	pop	r16
    6fa6:	ff 90       	pop	r15
    6fa8:	ef 90       	pop	r14
    6faa:	df 90       	pop	r13
    6fac:	cf 90       	pop	r12
    6fae:	bf 90       	pop	r11
    6fb0:	af 90       	pop	r10
    6fb2:	9f 90       	pop	r9
    6fb4:	8f 90       	pop	r8
    6fb6:	7f 90       	pop	r7
    6fb8:	6f 90       	pop	r6
    6fba:	5f 90       	pop	r5
    6fbc:	4f 90       	pop	r4
    6fbe:	3f 90       	pop	r3
    6fc0:	2f 90       	pop	r2
    6fc2:	08 95       	ret

00006fc4 <Calculate_PID>:

void Calculate_PID(void)
{
    6fc4:	2f 92       	push	r2
    6fc6:	3f 92       	push	r3
    6fc8:	4f 92       	push	r4
    6fca:	5f 92       	push	r5
    6fcc:	6f 92       	push	r6
    6fce:	7f 92       	push	r7
    6fd0:	8f 92       	push	r8
    6fd2:	9f 92       	push	r9
    6fd4:	af 92       	push	r10
    6fd6:	bf 92       	push	r11
    6fd8:	cf 92       	push	r12
    6fda:	df 92       	push	r13
    6fdc:	ef 92       	push	r14
    6fde:	ff 92       	push	r15
    6fe0:	0f 93       	push	r16
    6fe2:	1f 93       	push	r17
    6fe4:	cf 93       	push	r28
    6fe6:	df 93       	push	r29
    6fe8:	cd b7       	in	r28, 0x3d	; 61
    6fea:	de b7       	in	r29, 0x3e	; 62
    6fec:	a6 97       	sbiw	r28, 0x26	; 38
    6fee:	0f b6       	in	r0, 0x3f	; 63
    6ff0:	f8 94       	cli
    6ff2:	de bf       	out	0x3e, r29	; 62
    6ff4:	0f be       	out	0x3f, r0	; 63
    6ff6:	cd bf       	out	0x3d, r28	; 61
	int32_t temp32 = 0;						// Needed for 32-bit dynamic gain calculations
	int32_t mult32 = 0;
	int32_t PID_Gyros_32;

	// Initialise arrays with gain values. Cludgy fix to reduce code space
	int8_t 	P_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.P_mult, Config.FlightMode[Config.Flight].Pitch.P_mult, Config.FlightMode[Config.Flight].Yaw.P_mult};
    6ff8:	20 91 46 07 	lds	r18, 0x0746
    6ffc:	36 e1       	ldi	r19, 0x16	; 22
    6ffe:	23 02       	muls	r18, r19
    7000:	c0 01       	movw	r24, r0
    7002:	11 24       	eor	r1, r1
    7004:	8e 53       	subi	r24, 0x3E	; 62
    7006:	9a 4f       	sbci	r25, 0xFA	; 250
    7008:	fc 01       	movw	r30, r24
    700a:	e4 5a       	subi	r30, 0xA4	; 164
    700c:	ff 4f       	sbci	r31, 0xFF	; 255
    700e:	30 81       	ld	r19, Z
    7010:	3b 87       	std	Y+11, r19	; 0x0b
    7012:	37 96       	adiw	r30, 0x07	; 7
    7014:	30 81       	ld	r19, Z
    7016:	3c 87       	std	Y+12, r19	; 0x0c
    7018:	37 96       	adiw	r30, 0x07	; 7
    701a:	30 81       	ld	r19, Z
    701c:	3d 87       	std	Y+13, r19	; 0x0d
	int8_t 	I_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.I_mult, Config.FlightMode[Config.Flight].Pitch.I_mult, Config.FlightMode[Config.Flight].Yaw.I_mult};
    701e:	3d 97       	sbiw	r30, 0x0d	; 13
    7020:	30 81       	ld	r19, Z
    7022:	38 87       	std	Y+8, r19	; 0x08
    7024:	37 96       	adiw	r30, 0x07	; 7
    7026:	30 81       	ld	r19, Z
    7028:	39 87       	std	Y+9, r19	; 0x09
    702a:	37 96       	adiw	r30, 0x07	; 7
    702c:	30 81       	ld	r19, Z
    702e:	3a 87       	std	Y+10, r19	; 0x0a
	int8_t 	D_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.D_mult, Config.FlightMode[Config.Flight].Pitch.D_mult, Config.FlightMode[Config.Flight].Yaw.D_mult};
    7030:	3d 97       	sbiw	r30, 0x0d	; 13
    7032:	30 81       	ld	r19, Z
    7034:	3d 83       	std	Y+5, r19	; 0x05
    7036:	37 96       	adiw	r30, 0x07	; 7
    7038:	30 81       	ld	r19, Z
    703a:	3e 83       	std	Y+6, r19	; 0x06
    703c:	37 96       	adiw	r30, 0x07	; 7
    703e:	30 81       	ld	r19, Z
    7040:	3f 83       	std	Y+7, r19	; 0x07
	int8_t 	L_gain[NUMBEROFAXIS - 1] = {Config.FlightMode[Config.Flight].A_Roll_P_mult, Config.FlightMode[Config.Flight].A_Pitch_P_mult};
    7042:	3c 97       	sbiw	r30, 0x0c	; 12
    7044:	30 81       	ld	r19, Z
    7046:	3e 87       	std	Y+14, r19	; 0x0e
    7048:	37 96       	adiw	r30, 0x07	; 7
    704a:	30 81       	ld	r19, Z
    704c:	3f 87       	std	Y+15, r19	; 0x0f

	// Only for roll and pitch acc trim
	int16_t	L_trim[2] =	{Config.Rolltrim[Config.Flight], Config.Pitchtrim[Config.Flight]};
    704e:	22 0f       	add	r18, r18
    7050:	33 0b       	sbc	r19, r19
    7052:	2e 53       	subi	r18, 0x3E	; 62
    7054:	3a 4f       	sbci	r19, 0xFA	; 250
    7056:	f9 01       	movw	r30, r18
    7058:	eb 57       	subi	r30, 0x7B	; 123
    705a:	fe 4f       	sbci	r31, 0xFE	; 254
    705c:	40 81       	ld	r20, Z
    705e:	51 81       	ldd	r21, Z+1	; 0x01
    7060:	5a 83       	std	Y+2, r21	; 0x02
    7062:	49 83       	std	Y+1, r20	; 0x01
    7064:	36 96       	adiw	r30, 0x06	; 6
    7066:	20 81       	ld	r18, Z
    7068:	31 81       	ldd	r19, Z+1	; 0x01
    706a:	3c 83       	std	Y+4, r19	; 0x04
    706c:	2b 83       	std	Y+3, r18	; 0x03
		// Do this by mixing between (no PID) and PID
		// PID gains are not changed but the effect is the same
		//************************************************************

		// If dynamic gain set up 
		if (Config.DynGainSrc != NOCHAN)
    706e:	a0 91 10 06 	lds	r26, 0x0610
    7072:	ac a3       	std	Y+36, r26	; 0x24
    7074:	a1 ec       	ldi	r26, 0xC1	; 193
    7076:	8a 2e       	mov	r8, r26
    7078:	a7 e0       	ldi	r26, 0x07	; 7
    707a:	9a 2e       	mov	r9, r26
    707c:	e4 e8       	ldi	r30, 0x84	; 132
    707e:	f5 e0       	ldi	r31, 0x05	; 5
    7080:	fb 8f       	std	Y+27, r31	; 0x1b
    7082:	ea 8f       	std	Y+26, r30	; 0x1a
    7084:	bb eb       	ldi	r27, 0xBB	; 187
    7086:	2b 2e       	mov	r2, r27
    7088:	b7 e0       	ldi	r27, 0x07	; 7
    708a:	3b 2e       	mov	r3, r27
    708c:	25 eb       	ldi	r18, 0xB5	; 181
    708e:	37 e0       	ldi	r19, 0x07	; 7
    7090:	39 8b       	std	Y+17, r19	; 0x11
    7092:	28 8b       	std	Y+16, r18	; 0x10
    7094:	de 01       	movw	r26, r28
    7096:	1b 96       	adiw	r26, 0x0b	; 11
    7098:	b9 8f       	std	Y+25, r27	; 0x19
    709a:	a8 8f       	std	Y+24, r26	; 0x18
    709c:	e9 ea       	ldi	r30, 0xA9	; 169
    709e:	f7 e0       	ldi	r31, 0x07	; 7
    70a0:	fd 8f       	std	Y+29, r31	; 0x1d
    70a2:	ec 8f       	std	Y+28, r30	; 0x1c
    70a4:	9e 01       	movw	r18, r28
    70a6:	28 5f       	subi	r18, 0xF8	; 248
    70a8:	3f 4f       	sbci	r19, 0xFF	; 255
    70aa:	3f 8f       	std	Y+31, r19	; 0x1f
    70ac:	2e 8f       	std	Y+30, r18	; 0x1e
    70ae:	a4 e3       	ldi	r26, 0x34	; 52
    70b0:	b5 e0       	ldi	r27, 0x05	; 5
    70b2:	bb 8b       	std	Y+19, r27	; 0x13
    70b4:	aa 8b       	std	Y+18, r26	; 0x12
    70b6:	fe 01       	movw	r30, r28
    70b8:	35 96       	adiw	r30, 0x05	; 5
    70ba:	f9 a3       	std	Y+33, r31	; 0x21
    70bc:	e8 a3       	std	Y+32, r30	; 0x20
    70be:	2d e5       	ldi	r18, 0x5D	; 93
    70c0:	36 e0       	ldi	r19, 0x06	; 6
    70c2:	3b a3       	std	Y+35, r19	; 0x23
    70c4:	2a a3       	std	Y+34, r18	; 0x22
    70c6:	a1 2c       	mov	r10, r1
    70c8:	b1 2c       	mov	r11, r1
    70ca:	00 e0       	ldi	r16, 0x00	; 0
    70cc:	10 e0       	ldi	r17, 0x00	; 0
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp = (int32_t)(Config.FlightMode[Config.Flight].Yaw_trim << PID_SCALE);
    70ce:	dc 01       	movw	r26, r24
    70d0:	a2 59       	subi	r26, 0x92	; 146
    70d2:	bf 4f       	sbci	r27, 0xFF	; 255
    70d4:	be a3       	std	Y+38, r27	; 0x26
    70d6:	ad a3       	std	Y+37, r26	; 0x25
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    70d8:	20 91 16 05 	lds	r18, 0x0516
    70dc:	30 e0       	ldi	r19, 0x00	; 0
    70de:	40 e0       	ldi	r20, 0x00	; 0
    70e0:	50 e0       	ldi	r21, 0x00	; 0
    70e2:	f4 01       	movw	r30, r8
    70e4:	60 81       	ld	r22, Z
    70e6:	71 81       	ldd	r23, Z+1	; 0x01
    70e8:	82 81       	ldd	r24, Z+2	; 0x02
    70ea:	93 81       	ldd	r25, Z+3	; 0x03
    70ec:	0e 94 25 42 	call	0x844a	; 0x844a <__divmodsi4>
    70f0:	69 01       	movw	r12, r18
    70f2:	7a 01       	movw	r14, r20
    70f4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    70f6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    70f8:	2d 93       	st	X+, r18
    70fa:	3d 93       	st	X+, r19
    70fc:	bb 8f       	std	Y+27, r27	; 0x1b
    70fe:	aa 8f       	std	Y+26, r26	; 0x1a
		PID_AvgGyro[axis] = 0;					// Reset average		
    7100:	f4 01       	movw	r30, r8
    7102:	10 82       	st	Z, r1
    7104:	11 82       	std	Z+1, r1	; 0x01
    7106:	12 82       	std	Z+2, r1	; 0x02
    7108:	13 82       	std	Z+3, r1	; 0x03
    710a:	e0 2f       	mov	r30, r16
		
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    710c:	02 30       	cpi	r16, 0x02	; 2
    710e:	69 f4       	brne	.+26     	; 0x712a <Calculate_PID+0x166>
		{
			PID_gyro_temp = (int32_t)(Config.FlightMode[Config.Flight].Yaw_trim << PID_SCALE);
    7110:	ad a1       	ldd	r26, Y+37	; 0x25
    7112:	be a1       	ldd	r27, Y+38	; 0x26
    7114:	4c 91       	ld	r20, X
    7116:	b0 e4       	ldi	r27, 0x40	; 64
    7118:	4b 02       	muls	r20, r27
    711a:	a0 01       	movw	r20, r0
    711c:	11 24       	eor	r1, r1
    711e:	2a 01       	movw	r4, r20
    7120:	66 24       	eor	r6, r6
    7122:	57 fc       	sbrc	r5, 7
    7124:	60 94       	com	r6
    7126:	76 2c       	mov	r7, r6
    7128:	03 c0       	rjmp	.+6      	; 0x7130 <Calculate_PID+0x16c>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp = 0;
    712a:	41 2c       	mov	r4, r1
    712c:	51 2c       	mov	r5, r1
    712e:	32 01       	movw	r6, r4
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term
		PID_gyro_temp += gyroADC[axis] * P_gain[axis];				// Multiply P-term (Max gain of 127)
    7130:	a8 8d       	ldd	r26, Y+24	; 0x18
    7132:	b9 8d       	ldd	r27, Y+25	; 0x19
    7134:	2d 91       	ld	r18, X+
    7136:	b9 8f       	std	Y+25, r27	; 0x19
    7138:	a8 8f       	std	Y+24, r26	; 0x18
    713a:	33 27       	eor	r19, r19
    713c:	27 fd       	sbrc	r18, 7
    713e:	30 95       	com	r19
    7140:	2c 9d       	mul	r18, r12
    7142:	c0 01       	movw	r24, r0
    7144:	2d 9d       	mul	r18, r13
    7146:	90 0d       	add	r25, r0
    7148:	3c 9d       	mul	r19, r12
    714a:	90 0d       	add	r25, r0
    714c:	11 24       	eor	r1, r1
    714e:	9c 01       	movw	r18, r24
    7150:	44 27       	eor	r20, r20
    7152:	37 fd       	sbrc	r19, 7
    7154:	40 95       	com	r20
    7156:	54 2f       	mov	r21, r20
    7158:	24 0d       	add	r18, r4
    715a:	35 1d       	adc	r19, r5
    715c:	46 1d       	adc	r20, r6
    715e:	57 1d       	adc	r21, r7
		PID_gyro_temp = PID_gyro_temp * (int32_t)3;					// Multiply by 3
    7160:	a3 e0       	ldi	r26, 0x03	; 3
    7162:	b0 e0       	ldi	r27, 0x00	; 0
    7164:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__muluhisi3>
    7168:	6c 8b       	std	Y+20, r22	; 0x14
    716a:	7d 8b       	std	Y+21, r23	; 0x15
    716c:	8e 8b       	std	Y+22, r24	; 0x16
    716e:	9f 8b       	std	Y+23, r25	; 0x17

		// Gyro I-term
		PID_Gyro_I_actual = IntegralGyro[axis] * I_gain[axis];		// Multiply I-term (Max gain of 127)
    7170:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7172:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7174:	2d 91       	ld	r18, X+
    7176:	3d 91       	ld	r19, X+
    7178:	4d 91       	ld	r20, X+
    717a:	5d 91       	ld	r21, X+
    717c:	bd 8f       	std	Y+29, r27	; 0x1d
    717e:	ac 8f       	std	Y+28, r26	; 0x1c
    7180:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7182:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7184:	8d 91       	ld	r24, X+
    7186:	bf 8f       	std	Y+31, r27	; 0x1f
    7188:	ae 8f       	std	Y+30, r26	; 0x1e
    718a:	a8 2f       	mov	r26, r24
    718c:	bb 27       	eor	r27, r27
    718e:	a7 fd       	sbrc	r26, 7
    7190:	b0 95       	com	r27
    7192:	0e 94 73 42 	call	0x84e6	; 0x84e6 <__mulshisi3>
    7196:	2b 01       	movw	r4, r22
    7198:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual = PID_Gyro_I_actual >> 5;					// Divide by 32
    719a:	75 e0       	ldi	r23, 0x05	; 5
    719c:	75 94       	asr	r7
    719e:	67 94       	ror	r6
    71a0:	57 94       	ror	r5
    71a2:	47 94       	ror	r4
    71a4:	7a 95       	dec	r23
    71a6:	d1 f7       	brne	.-12     	; 0x719c <Calculate_PID+0x1d8>

		// Gyro D-term
		DifferentialGyro = (int16_t)(gyroADC[axis] - lastError[axis]);
    71a8:	aa 89       	ldd	r26, Y+18	; 0x12
    71aa:	bb 89       	ldd	r27, Y+19	; 0x13
    71ac:	8d 91       	ld	r24, X+
    71ae:	9c 91       	ld	r25, X
    71b0:	11 97       	sbiw	r26, 0x01	; 1
    71b2:	96 01       	movw	r18, r12
    71b4:	28 1b       	sub	r18, r24
    71b6:	39 0b       	sbc	r19, r25
		lastError[axis] = gyroADC[axis];
    71b8:	cd 92       	st	X+, r12
    71ba:	dc 92       	st	X, r13
		DifferentialGyro *= D_gain[axis];							// Multiply D-term by up to 127
    71bc:	a8 a1       	ldd	r26, Y+32	; 0x20
    71be:	b9 a1       	ldd	r27, Y+33	; 0x21
    71c0:	8d 91       	ld	r24, X+
    71c2:	b9 a3       	std	Y+33, r27	; 0x21
    71c4:	a8 a3       	std	Y+32, r26	; 0x20
    71c6:	a8 2f       	mov	r26, r24
    71c8:	bb 27       	eor	r27, r27
    71ca:	a7 fd       	sbrc	r26, 7
    71cc:	b0 95       	com	r27
    71ce:	0e 94 4a 42 	call	0x8494	; 0x8494 <__mulhisi3>
		DifferentialGyro = DifferentialGyro << 4;					// Multiply by 16
    71d2:	f4 e0       	ldi	r31, 0x04	; 4
    71d4:	66 0f       	add	r22, r22
    71d6:	77 1f       	adc	r23, r23
    71d8:	88 1f       	adc	r24, r24
    71da:	99 1f       	adc	r25, r25
    71dc:	fa 95       	dec	r31
    71de:	d1 f7       	brne	.-12     	; 0x71d4 <Calculate_PID+0x210>
		//************************************************************
		// I-term output limits
		//************************************************************

		// Maximum 125% limit is full servo throw 
		if (PID_Gyro_I_actual > Config.Raw_I_Limits[axis]) 
    71e0:	aa a1       	ldd	r26, Y+34	; 0x22
    71e2:	bb a1       	ldd	r27, Y+35	; 0x23
    71e4:	2d 91       	ld	r18, X+
    71e6:	3d 91       	ld	r19, X+
    71e8:	4d 91       	ld	r20, X+
    71ea:	5d 91       	ld	r21, X+
    71ec:	bb a3       	std	Y+35, r27	; 0x23
    71ee:	aa a3       	std	Y+34, r26	; 0x22
    71f0:	24 15       	cp	r18, r4
    71f2:	35 05       	cpc	r19, r5
    71f4:	46 05       	cpc	r20, r6
    71f6:	57 05       	cpc	r21, r7
    71f8:	84 f0       	brlt	.+32     	; 0x721a <Calculate_PID+0x256>
		{
			PID_Gyro_I_temp = Config.Raw_I_Limits[axis];
		}
		else if (PID_Gyro_I_actual < -Config.Raw_I_Limits[axis]) 
    71fa:	cc 24       	eor	r12, r12
    71fc:	dd 24       	eor	r13, r13
    71fe:	76 01       	movw	r14, r12
    7200:	c2 1a       	sub	r12, r18
    7202:	d3 0a       	sbc	r13, r19
    7204:	e4 0a       	sbc	r14, r20
    7206:	f5 0a       	sbc	r15, r21
    7208:	a3 01       	movw	r20, r6
    720a:	92 01       	movw	r18, r4
    720c:	4c 14       	cp	r4, r12
    720e:	5d 04       	cpc	r5, r13
    7210:	6e 04       	cpc	r6, r14
    7212:	7f 04       	cpc	r7, r15
    7214:	14 f4       	brge	.+4      	; 0x721a <Calculate_PID+0x256>
    7216:	a7 01       	movw	r20, r14
    7218:	96 01       	movw	r18, r12

		//************************************************************
		// Sum Gyro P and D terms and rescale
		//************************************************************
	
		PID_Gyros[axis] = (int16_t)((PID_gyro_temp + PID_Gyro_I_temp + DifferentialGyro) >> PID_SCALE);
    721a:	4c 88       	ldd	r4, Y+20	; 0x14
    721c:	5d 88       	ldd	r5, Y+21	; 0x15
    721e:	6e 88       	ldd	r6, Y+22	; 0x16
    7220:	7f 88       	ldd	r7, Y+23	; 0x17
    7222:	42 0e       	add	r4, r18
    7224:	53 1e       	adc	r5, r19
    7226:	64 1e       	adc	r6, r20
    7228:	75 1e       	adc	r7, r21
    722a:	46 0e       	add	r4, r22
    722c:	57 1e       	adc	r5, r23
    722e:	68 1e       	adc	r6, r24
    7230:	79 1e       	adc	r7, r25
    7232:	66 e0       	ldi	r22, 0x06	; 6
    7234:	75 94       	asr	r7
    7236:	67 94       	ror	r6
    7238:	57 94       	ror	r5
    723a:	47 94       	ror	r4
    723c:	6a 95       	dec	r22
    723e:	d1 f7       	brne	.-12     	; 0x7234 <Calculate_PID+0x270>
    7240:	a8 89       	ldd	r26, Y+16	; 0x10
    7242:	b9 89       	ldd	r27, Y+17	; 0x11
    7244:	4d 92       	st	X+, r4
    7246:	5c 92       	st	X, r5
		// Do this by mixing between (no PID) and PID
		// PID gains are not changed but the effect is the same
		//************************************************************

		// If dynamic gain set up 
		if (Config.DynGainSrc != NOCHAN)
    7248:	bc a1       	ldd	r27, Y+36	; 0x24
    724a:	b8 30       	cpi	r27, 0x08	; 8
    724c:	21 f0       	breq	.+8      	; 0x7256 <Calculate_PID+0x292>

			// Normalise the PID
			temp32 = (PID_Gyros_32 / (int32_t)Config.DynGain);

			// Cast back to native size
			PID_Gyros[axis] = (int16_t)temp32;
    724e:	a8 89       	ldd	r26, Y+16	; 0x10
    7250:	b9 89       	ldd	r27, Y+17	; 0x11
    7252:	1d 92       	st	X+, r1
    7254:	1c 92       	st	X, r1
		//************************************************************
		// Calculate acc error from angle data (roll and pitch only)
		//************************************************************

		// Autolevel mode (Use IMU to calculate attitude) for roll and pitch only
		if ((Flight_flags & (1 << AutoLevel)) && (axis < YAW)) 
    7256:	80 91 1c 05 	lds	r24, 0x051C
    725a:	80 ff       	sbrs	r24, 0
    725c:	27 c0       	rjmp	.+78     	; 0x72ac <Calculate_PID+0x2e8>
    725e:	e2 30       	cpi	r30, 0x02	; 2
    7260:	29 f1       	breq	.+74     	; 0x72ac <Calculate_PID+0x2e8>
		{
			PID_acc_temp = angle[axis] - L_trim[axis];				// Offset angle with trim
    7262:	f5 01       	movw	r30, r10
    7264:	ee 55       	subi	r30, 0x5E	; 94
    7266:	fa 4f       	sbci	r31, 0xFA	; 250
    7268:	20 81       	ld	r18, Z
    726a:	31 81       	ldd	r19, Z+1	; 0x01
    726c:	e1 e0       	ldi	r30, 0x01	; 1
    726e:	f0 e0       	ldi	r31, 0x00	; 0
    7270:	ec 0f       	add	r30, r28
    7272:	fd 1f       	adc	r31, r29
    7274:	ea 0d       	add	r30, r10
    7276:	fb 1d       	adc	r31, r11
    7278:	80 81       	ld	r24, Z
    727a:	91 81       	ldd	r25, Z+1	; 0x01
    727c:	28 1b       	sub	r18, r24
    727e:	39 0b       	sbc	r19, r25
    7280:	ee e0       	ldi	r30, 0x0E	; 14
    7282:	f0 e0       	ldi	r31, 0x00	; 0
    7284:	ec 0f       	add	r30, r28
    7286:	fd 1f       	adc	r31, r29
    7288:	e0 0f       	add	r30, r16
    728a:	f1 1f       	adc	r31, r17
			PID_acc_temp *= L_gain[axis];							// P-term of accelerometer (Max gain of 127)
    728c:	a0 81       	ld	r26, Z
    728e:	bb 27       	eor	r27, r27
    7290:	a7 fd       	sbrc	r26, 7
    7292:	b0 95       	com	r27
    7294:	0e 94 4a 42 	call	0x8494	; 0x8494 <__mulhisi3>
			PID_ACCs[axis] = (int16_t)(PID_acc_temp >> 8);			// Accs need much less scaling
    7298:	bb 27       	eor	r27, r27
    729a:	97 fd       	sbrc	r25, 7
    729c:	ba 95       	dec	r27
    729e:	a9 2f       	mov	r26, r25
    72a0:	98 2f       	mov	r25, r24
    72a2:	87 2f       	mov	r24, r23
    72a4:	f1 01       	movw	r30, r2
    72a6:	91 83       	std	Z+1, r25	; 0x01
    72a8:	80 83       	st	Z, r24
    72aa:	03 c0       	rjmp	.+6      	; 0x72b2 <Calculate_PID+0x2ee>
		}
		else
		{
			PID_ACCs[axis] = 0;										// Ensure these are zeroed when autolevel OFF
    72ac:	d1 01       	movw	r26, r2
    72ae:	1d 92       	st	X+, r1
    72b0:	1c 92       	st	X, r1
    72b2:	0f 5f       	subi	r16, 0xFF	; 255
    72b4:	1f 4f       	sbci	r17, 0xFF	; 255
    72b6:	b4 e0       	ldi	r27, 0x04	; 4
    72b8:	8b 0e       	add	r8, r27
    72ba:	91 1c       	adc	r9, r1
    72bc:	e2 e0       	ldi	r30, 0x02	; 2
    72be:	ae 0e       	add	r10, r30
    72c0:	b1 1c       	adc	r11, r1
    72c2:	f2 e0       	ldi	r31, 0x02	; 2
    72c4:	2f 0e       	add	r2, r31
    72c6:	31 1c       	adc	r3, r1
    72c8:	28 89       	ldd	r18, Y+16	; 0x10
    72ca:	39 89       	ldd	r19, Y+17	; 0x11
    72cc:	2e 5f       	subi	r18, 0xFE	; 254
    72ce:	3f 4f       	sbci	r19, 0xFF	; 255
    72d0:	39 8b       	std	Y+17, r19	; 0x11
    72d2:	28 8b       	std	Y+16, r18	; 0x10
    72d4:	8a 89       	ldd	r24, Y+18	; 0x12
    72d6:	9b 89       	ldd	r25, Y+19	; 0x13
    72d8:	02 96       	adiw	r24, 0x02	; 2
    72da:	9b 8b       	std	Y+19, r25	; 0x13
    72dc:	8a 8b       	std	Y+18, r24	; 0x12

	//************************************************************
	// PID loop
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    72de:	03 30       	cpi	r16, 0x03	; 3
    72e0:	11 05       	cpc	r17, r1
    72e2:	09 f0       	breq	.+2      	; 0x72e6 <Calculate_PID+0x322>
    72e4:	f9 ce       	rjmp	.-526    	; 0x70d8 <Calculate_PID+0x114>
			PID_ACCs[axis] = 0;										// Ensure these are zeroed when autolevel OFF
		}
	} // PID loop

	// Offset Autolevel trims in failsafe mode. This is not cumulative.
	if ((Config.FailsafeType == ADVANCED) && (Flight_flags & (1 << FailsafeFlag)))
    72e6:	80 91 16 06 	lds	r24, 0x0616
    72ea:	82 30       	cpi	r24, 0x02	; 2
    72ec:	11 f5       	brne	.+68     	; 0x7332 <Calculate_PID+0x36e>
    72ee:	80 91 1c 05 	lds	r24, 0x051C
    72f2:	82 ff       	sbrs	r24, 2
    72f4:	1e c0       	rjmp	.+60     	; 0x7332 <Calculate_PID+0x36e>
	{
		PID_ACCs[ROLL] += (Config.FailsafeAileron * 10);
    72f6:	20 91 19 06 	lds	r18, 0x0619
    72fa:	80 91 bb 07 	lds	r24, 0x07BB
    72fe:	90 91 bc 07 	lds	r25, 0x07BC
    7302:	aa e0       	ldi	r26, 0x0A	; 10
    7304:	2a 02       	muls	r18, r26
    7306:	80 0d       	add	r24, r0
    7308:	91 1d       	adc	r25, r1
    730a:	11 24       	eor	r1, r1
    730c:	90 93 bc 07 	sts	0x07BC, r25
    7310:	80 93 bb 07 	sts	0x07BB, r24
		PID_ACCs[PITCH] += (Config.FailsafeElevator * 10);
    7314:	20 91 18 06 	lds	r18, 0x0618
    7318:	80 91 bd 07 	lds	r24, 0x07BD
    731c:	90 91 be 07 	lds	r25, 0x07BE
    7320:	ba e0       	ldi	r27, 0x0A	; 10
    7322:	2b 02       	muls	r18, r27
    7324:	80 0d       	add	r24, r0
    7326:	91 1d       	adc	r25, r1
    7328:	11 24       	eor	r1, r1
    732a:	90 93 be 07 	sts	0x07BE, r25
    732e:	80 93 bd 07 	sts	0x07BD, r24
	}

}
    7332:	a6 96       	adiw	r28, 0x26	; 38
    7334:	0f b6       	in	r0, 0x3f	; 63
    7336:	f8 94       	cli
    7338:	de bf       	out	0x3e, r29	; 62
    733a:	0f be       	out	0x3f, r0	; 63
    733c:	cd bf       	out	0x3d, r28	; 61
    733e:	df 91       	pop	r29
    7340:	cf 91       	pop	r28
    7342:	1f 91       	pop	r17
    7344:	0f 91       	pop	r16
    7346:	ff 90       	pop	r15
    7348:	ef 90       	pop	r14
    734a:	df 90       	pop	r13
    734c:	cf 90       	pop	r12
    734e:	bf 90       	pop	r11
    7350:	af 90       	pop	r10
    7352:	9f 90       	pop	r9
    7354:	8f 90       	pop	r8
    7356:	7f 90       	pop	r7
    7358:	6f 90       	pop	r6
    735a:	5f 90       	pop	r5
    735c:	4f 90       	pop	r4
    735e:	3f 90       	pop	r3
    7360:	2f 90       	pop	r2
    7362:	08 95       	ret

00007364 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    7364:	e4 e2       	ldi	r30, 0x24	; 36
    7366:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    7368:	80 e0       	ldi	r24, 0x00	; 0
    736a:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    736c:	ac 01       	movw	r20, r24
    736e:	44 0f       	add	r20, r20
    7370:	55 1f       	adc	r21, r21
    7372:	da 01       	movw	r26, r20
    7374:	a6 5a       	subi	r26, 0xA6	; 166
    7376:	b8 4f       	sbci	r27, 0xF8	; 248
    7378:	2d 91       	ld	r18, X+
    737a:	3c 91       	ld	r19, X
    737c:	61 91       	ld	r22, Z+
    737e:	71 91       	ld	r23, Z+
    7380:	26 1b       	sub	r18, r22
    7382:	37 0b       	sbc	r19, r23
    7384:	da 01       	movw	r26, r20
    7386:	a1 53       	subi	r26, 0x31	; 49
    7388:	b8 4f       	sbci	r27, 0xF8	; 248
    738a:	11 96       	adiw	r26, 0x01	; 1
    738c:	3c 93       	st	X, r19
    738e:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    7390:	01 96       	adiw	r24, 0x01	; 1
    7392:	88 30       	cpi	r24, 0x08	; 8
    7394:	91 05       	cpc	r25, r1
    7396:	51 f7       	brne	.-44     	; 0x736c <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    7398:	80 91 5a 07 	lds	r24, 0x075A
    739c:	90 91 5b 07 	lds	r25, 0x075B
    73a0:	20 91 24 07 	lds	r18, 0x0724
    73a4:	30 91 25 07 	lds	r19, 0x0725
    73a8:	82 1b       	sub	r24, r18
    73aa:	93 0b       	sbc	r25, r19
    73ac:	90 93 ce 07 	sts	0x07CE, r25
    73b0:	80 93 cd 07 	sts	0x07CD, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750;
    73b4:	80 91 5a 07 	lds	r24, 0x075A
    73b8:	90 91 5b 07 	lds	r25, 0x075B
    73bc:	86 5a       	subi	r24, 0xA6	; 166
    73be:	9e 40       	sbci	r25, 0x0E	; 14
    73c0:	90 93 d0 07 	sts	0x07D0, r25
    73c4:	80 93 cf 07 	sts	0x07CF, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    73c8:	80 91 54 07 	lds	r24, 0x0754
    73cc:	81 30       	cpi	r24, 0x01	; 1
    73ce:	71 f4       	brne	.+28     	; 0x73ec <RxGetChannels+0x88>
	{
		// Note we have to reverse the source otherwise we get a double reverse if someone sets up
		// the second aileron as AILERON
		RCinputs[AILERON] = -(RxChannel[AILERON] - Config.RxChannelZeroOffset[AILERON]);
    73d0:	20 91 5c 07 	lds	r18, 0x075C
    73d4:	30 91 5d 07 	lds	r19, 0x075D
    73d8:	80 91 26 07 	lds	r24, 0x0726
    73dc:	90 91 27 07 	lds	r25, 0x0727
    73e0:	82 1b       	sub	r24, r18
    73e2:	93 0b       	sbc	r25, r19
    73e4:	90 93 d2 07 	sts	0x07D2, r25
    73e8:	80 93 d1 07 	sts	0x07D1, r24
	}

	// Only reverse second aileron if set up
	if ((Config.SecAileronPol == REVERSED) && (Config.FlapChan != NOCHAN))
    73ec:	80 91 55 07 	lds	r24, 0x0755
    73f0:	81 30       	cpi	r24, 0x01	; 1
    73f2:	d9 f4       	brne	.+54     	; 0x742a <RxGetChannels+0xc6>
    73f4:	e0 91 0f 06 	lds	r30, 0x060F
    73f8:	e8 30       	cpi	r30, 0x08	; 8
    73fa:	b9 f0       	breq	.+46     	; 0x742a <RxGetChannels+0xc6>
	{
		// Note we have to reverse the source otherwise we get a double reverse if someone sets up
		// the second aileron as AILERON
		RCinputs[Config.FlapChan] = -(RxChannel[Config.FlapChan] - Config.RxChannelZeroOffset[Config.FlapChan]);
    73fc:	ff 27       	eor	r31, r31
    73fe:	e7 fd       	sbrc	r30, 7
    7400:	f0 95       	com	r31
    7402:	9f 01       	movw	r18, r30
    7404:	22 0f       	add	r18, r18
    7406:	33 1f       	adc	r19, r19
    7408:	d9 01       	movw	r26, r18
    740a:	a6 5a       	subi	r26, 0xA6	; 166
    740c:	b8 4f       	sbci	r27, 0xF8	; 248
    740e:	4d 91       	ld	r20, X+
    7410:	5c 91       	ld	r21, X
    7412:	f9 01       	movw	r30, r18
    7414:	ec 5d       	subi	r30, 0xDC	; 220
    7416:	f8 4f       	sbci	r31, 0xF8	; 248
    7418:	80 81       	ld	r24, Z
    741a:	91 81       	ldd	r25, Z+1	; 0x01
    741c:	84 1b       	sub	r24, r20
    741e:	95 0b       	sbc	r25, r21
    7420:	f9 01       	movw	r30, r18
    7422:	e1 53       	subi	r30, 0x31	; 49
    7424:	f8 4f       	sbci	r31, 0xF8	; 248
    7426:	91 83       	std	Z+1, r25	; 0x01
    7428:	80 83       	st	Z, r24
	}

	if (Config.ElevatorPol == REVERSED)
    742a:	80 91 56 07 	lds	r24, 0x0756
    742e:	81 30       	cpi	r24, 0x01	; 1
    7430:	59 f4       	brne	.+22     	; 0x7448 <RxGetChannels+0xe4>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    7432:	80 91 d3 07 	lds	r24, 0x07D3
    7436:	90 91 d4 07 	lds	r25, 0x07D4
    743a:	91 95       	neg	r25
    743c:	81 95       	neg	r24
    743e:	91 09       	sbc	r25, r1
    7440:	90 93 d4 07 	sts	0x07D4, r25
    7444:	80 93 d3 07 	sts	0x07D3, r24
	}

	if (Config.RudderPol == REVERSED)
    7448:	80 91 57 07 	lds	r24, 0x0757
    744c:	81 30       	cpi	r24, 0x01	; 1
    744e:	59 f4       	brne	.+22     	; 0x7466 <RxGetChannels+0x102>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    7450:	80 91 d5 07 	lds	r24, 0x07D5
    7454:	90 91 d6 07 	lds	r25, 0x07D6
    7458:	91 95       	neg	r25
    745a:	81 95       	neg	r24
    745c:	91 09       	sbc	r25, r1
    745e:	90 93 d6 07 	sts	0x07D6, r25
    7462:	80 93 d5 07 	sts	0x07D5, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[GEAR] + RCinputs[RUDDER] + RCinputs[AUX1];
    7466:	80 91 d1 07 	lds	r24, 0x07D1
    746a:	90 91 d2 07 	lds	r25, 0x07D2
    746e:	e0 91 d3 07 	lds	r30, 0x07D3
    7472:	f0 91 d4 07 	lds	r31, 0x07D4
    7476:	60 91 d7 07 	lds	r22, 0x07D7
    747a:	70 91 d8 07 	lds	r23, 0x07D8
    747e:	40 91 d5 07 	lds	r20, 0x07D5
    7482:	50 91 d6 07 	lds	r21, 0x07D6
    7486:	20 91 d9 07 	lds	r18, 0x07D9
    748a:	30 91 da 07 	lds	r19, 0x07DA
    748e:	8e 0f       	add	r24, r30
    7490:	9f 1f       	adc	r25, r31
    7492:	86 0f       	add	r24, r22
    7494:	97 1f       	adc	r25, r23
    7496:	84 0f       	add	r24, r20
    7498:	95 1f       	adc	r25, r21
    749a:	82 0f       	add	r24, r18
    749c:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    749e:	20 91 3c 05 	lds	r18, 0x053C
    74a2:	30 91 3d 05 	lds	r19, 0x053D
    74a6:	ac 01       	movw	r20, r24
    74a8:	42 1b       	sub	r20, r18
    74aa:	53 0b       	sbc	r21, r19
    74ac:	9a 01       	movw	r18, r20

	// Set RX activity flag
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH)) 
    74ae:	2b 5f       	subi	r18, 0xFB	; 251
    74b0:	3f 4f       	sbci	r19, 0xFF	; 255
    74b2:	2b 30       	cpi	r18, 0x0B	; 11
    74b4:	31 05       	cpc	r19, r1
    74b6:	20 f0       	brcs	.+8      	; 0x74c0 <RxGetChannels+0x15c>
	{
		Flight_flags |= (1 << RxActivity);
    74b8:	20 91 1c 05 	lds	r18, 0x051C
    74bc:	28 60       	ori	r18, 0x08	; 8
    74be:	03 c0       	rjmp	.+6      	; 0x74c6 <RxGetChannels+0x162>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    74c0:	20 91 1c 05 	lds	r18, 0x051C
    74c4:	27 7f       	andi	r18, 0xF7	; 247
    74c6:	20 93 1c 05 	sts	0x051C, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    74ca:	10 92 e0 07 	sts	0x07E0, r1
    74ce:	10 92 df 07 	sts	0x07DF, r1

	OldRxSum = RxSum;
    74d2:	90 93 3d 05 	sts	0x053D, r25
    74d6:	80 93 3c 05 	sts	0x053C, r24
    74da:	08 95       	ret

000074dc <RC_Deadband>:
void RC_Deadband(void)
{
	int16_t	aileron_actual = 0;

	// If flaperons set up 
	if (Config.FlapChan != NOCHAN)
    74dc:	e0 91 0f 06 	lds	r30, 0x060F
	{
		// Recreate actual roll signal from flaperons
		aileron_actual  = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    74e0:	80 91 d1 07 	lds	r24, 0x07D1
    74e4:	90 91 d2 07 	lds	r25, 0x07D2
void RC_Deadband(void)
{
	int16_t	aileron_actual = 0;

	// If flaperons set up 
	if (Config.FlapChan != NOCHAN)
    74e8:	e8 30       	cpi	r30, 0x08	; 8
    74ea:	51 f0       	breq	.+20     	; 0x7500 <RC_Deadband+0x24>
	{
		// Recreate actual roll signal from flaperons
		aileron_actual  = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    74ec:	ee 0f       	add	r30, r30
    74ee:	ff 0b       	sbc	r31, r31
    74f0:	e1 53       	subi	r30, 0x31	; 49
    74f2:	f8 4f       	sbci	r31, 0xF8	; 248
    74f4:	20 81       	ld	r18, Z
    74f6:	31 81       	ldd	r19, Z+1	; 0x01
    74f8:	82 0f       	add	r24, r18
    74fa:	93 1f       	adc	r25, r19
		aileron_actual  = aileron_actual >> 1;
    74fc:	95 95       	asr	r25
    74fe:	87 95       	ror	r24
	{
		aileron_actual  = RCinputs[AILERON];
	}

	// Hands-free detection
	if (((aileron_actual < Config.HandsFreetrigger) && (aileron_actual > -Config.HandsFreetrigger))
    7500:	20 91 75 06 	lds	r18, 0x0675
    7504:	30 e0       	ldi	r19, 0x00	; 0
    7506:	82 17       	cp	r24, r18
    7508:	93 07       	cpc	r25, r19
    750a:	cc f4       	brge	.+50     	; 0x753e <RC_Deadband+0x62>
    750c:	44 27       	eor	r20, r20
    750e:	55 27       	eor	r21, r21
    7510:	42 1b       	sub	r20, r18
    7512:	53 0b       	sbc	r21, r19
    7514:	48 17       	cp	r20, r24
    7516:	59 07       	cpc	r21, r25
    7518:	94 f4       	brge	.+36     	; 0x753e <RC_Deadband+0x62>
	 && ((RCinputs[ELEVATOR]  < Config.HandsFreetrigger) && (RCinputs[ELEVATOR]  > -Config.HandsFreetrigger)))
    751a:	80 91 d3 07 	lds	r24, 0x07D3
    751e:	90 91 d4 07 	lds	r25, 0x07D4
    7522:	82 17       	cp	r24, r18
    7524:	93 07       	cpc	r25, r19
    7526:	5c f4       	brge	.+22     	; 0x753e <RC_Deadband+0x62>
    7528:	80 91 d3 07 	lds	r24, 0x07D3
    752c:	90 91 d4 07 	lds	r25, 0x07D4
    7530:	48 17       	cp	r20, r24
    7532:	59 07       	cpc	r21, r25
    7534:	24 f4       	brge	.+8      	; 0x753e <RC_Deadband+0x62>
	{
		Flight_flags |= (1 << HandsFree);
    7536:	80 91 1c 05 	lds	r24, 0x051C
    753a:	80 61       	ori	r24, 0x10	; 16
    753c:	03 c0       	rjmp	.+6      	; 0x7544 <RC_Deadband+0x68>
	}
	else
	{
		Flight_flags &= ~(1 << HandsFree);
    753e:	80 91 1c 05 	lds	r24, 0x051C
    7542:	8f 7e       	andi	r24, 0xEF	; 239
    7544:	80 93 1c 05 	sts	0x051C, r24
    7548:	08 95       	ret

0000754a <CenterSticks>:
	}
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    754a:	0f 93       	push	r16
    754c:	1f 93       	push	r17
    754e:	cf 93       	push	r28
    7550:	df 93       	push	r29
    7552:	cd b7       	in	r28, 0x3d	; 61
    7554:	de b7       	in	r29, 0x3e	; 62
    7556:	60 97       	sbiw	r28, 0x10	; 16
    7558:	0f b6       	in	r0, 0x3f	; 63
    755a:	f8 94       	cli
    755c:	de bf       	out	0x3e, r29	; 62
    755e:	0f be       	out	0x3f, r0	; 63
    7560:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    7562:	8e 01       	movw	r16, r28
    7564:	0f 5f       	subi	r16, 0xFF	; 255
    7566:	1f 4f       	sbci	r17, 0xFF	; 255
    7568:	80 e1       	ldi	r24, 0x10	; 16
    756a:	d8 01       	movw	r26, r16
    756c:	1d 92       	st	X+, r1
    756e:	8a 95       	dec	r24
    7570:	e9 f7       	brne	.-6      	; 0x756c <CenterSticks+0x22>
    7572:	68 e0       	ldi	r22, 0x08	; 8
	}
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    7574:	d8 01       	movw	r26, r16
    7576:	80 e0       	ldi	r24, 0x00	; 0
    7578:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
	{
		for (j=0;j<MAX_RC_CHANNELS;j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    757a:	9c 01       	movw	r18, r24
    757c:	22 0f       	add	r18, r18
    757e:	33 1f       	adc	r19, r19
    7580:	26 5a       	subi	r18, 0xA6	; 166
    7582:	38 4f       	sbci	r19, 0xF8	; 248
    7584:	f9 01       	movw	r30, r18
    7586:	40 81       	ld	r20, Z
    7588:	51 81       	ldd	r21, Z+1	; 0x01
    758a:	2d 91       	ld	r18, X+
    758c:	3c 91       	ld	r19, X
    758e:	11 97       	sbiw	r26, 0x01	; 1
    7590:	24 0f       	add	r18, r20
    7592:	35 1f       	adc	r19, r21
    7594:	2d 93       	st	X+, r18
    7596:	3d 93       	st	X+, r19
    7598:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
	{
		for (j=0;j<MAX_RC_CHANNELS;j++)
    759a:	88 30       	cpi	r24, 0x08	; 8
    759c:	91 05       	cpc	r25, r1
    759e:	69 f7       	brne	.-38     	; 0x757a <CenterSticks+0x30>
    75a0:	ff e7       	ldi	r31, 0x7F	; 127
    75a2:	2a e1       	ldi	r18, 0x1A	; 26
    75a4:	86 e0       	ldi	r24, 0x06	; 6
    75a6:	f1 50       	subi	r31, 0x01	; 1
    75a8:	20 40       	sbci	r18, 0x00	; 0
    75aa:	80 40       	sbci	r24, 0x00	; 0
    75ac:	e1 f7       	brne	.-8      	; 0x75a6 <CenterSticks+0x5c>
    75ae:	00 c0       	rjmp	.+0      	; 0x75b0 <CenterSticks+0x66>
    75b0:	00 00       	nop
    75b2:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
    75b4:	f9 f6       	brne	.-66     	; 0x7574 <CenterSticks+0x2a>
    75b6:	a4 e2       	ldi	r26, 0x24	; 36
    75b8:	b7 e0       	ldi	r27, 0x07	; 7
    75ba:	9e 01       	movw	r18, r28
    75bc:	2f 5e       	subi	r18, 0xEF	; 239
    75be:	3f 4f       	sbci	r19, 0xFF	; 255
    75c0:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    75c2:	81 91       	ld	r24, Z+
    75c4:	91 91       	ld	r25, Z+
    75c6:	04 96       	adiw	r24, 0x04	; 4
    75c8:	43 e0       	ldi	r20, 0x03	; 3
    75ca:	96 95       	lsr	r25
    75cc:	87 95       	ror	r24
    75ce:	4a 95       	dec	r20
    75d0:	e1 f7       	brne	.-8      	; 0x75ca <CenterSticks+0x80>
    75d2:	8d 93       	st	X+, r24
    75d4:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    75d6:	e2 17       	cp	r30, r18
    75d8:	f3 07       	cpc	r31, r19
    75da:	99 f7       	brne	.-26     	; 0x75c2 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    75dc:	60 96       	adiw	r28, 0x10	; 16
    75de:	0f b6       	in	r0, 0x3f	; 63
    75e0:	f8 94       	cli
    75e2:	de bf       	out	0x3e, r29	; 62
    75e4:	0f be       	out	0x3f, r0	; 63
    75e6:	cd bf       	out	0x3d, r28	; 61
    75e8:	df 91       	pop	r29
    75ea:	cf 91       	pop	r28
    75ec:	1f 91       	pop	r17
    75ee:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    75f0:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>

000075f4 <SetFailsafe>:
}

// Set failsafe position
void SetFailsafe(void)		
{
    75f4:	0f 93       	push	r16
    75f6:	1f 93       	push	r17
    75f8:	cf 93       	push	r28
    75fa:	df 93       	push	r29
	uint8_t i;
	int16_t failsafe;
	int16_t temp;

	// Update latest values of each channel
	ProcessMixer();
    75fc:	0e 94 a4 32 	call	0x6548	; 0x6548 <ProcessMixer>
    7600:	e4 e8       	ldi	r30, 0x84	; 132
    7602:	f6 e0       	ldi	r31, 0x06	; 6
    7604:	cf ec       	ldi	r28, 0xCF	; 207
    7606:	d5 e0       	ldi	r29, 0x05	; 5
    7608:	2c e1       	ldi	r18, 0x1C	; 28
    760a:	37 e0       	ldi	r19, 0x07	; 7
		// Set primary failsafe point
		temp = Config.Channel[i].value;		// Mixer values are +/-1250
		Config.Limits[i].failsafe = temp;

		// Round and rescale and set noob-friendly mixer failsafe percentages
		failsafe = (temp + (int16_t)5) / (int16_t)10;
    760c:	0a e0       	ldi	r16, 0x0A	; 10
    760e:	10 e0       	ldi	r17, 0x00	; 0

	// Update Config settings based on servo position
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Set primary failsafe point
		temp = Config.Channel[i].value;		// Mixer values are +/-1250
    7610:	80 81       	ld	r24, Z
    7612:	91 81       	ldd	r25, Z+1	; 0x01
		Config.Limits[i].failsafe = temp;
    7614:	99 83       	std	Y+1, r25	; 0x01
    7616:	88 83       	st	Y, r24

		// Round and rescale and set noob-friendly mixer failsafe percentages
		failsafe = (temp + (int16_t)5) / (int16_t)10;
    7618:	05 96       	adiw	r24, 0x05	; 5
    761a:	b8 01       	movw	r22, r16
    761c:	0e 94 11 42 	call	0x8422	; 0x8422 <__divmodhi4>
		
		// Bounds check 
		if (failsafe > 125)
    7620:	6e 37       	cpi	r22, 0x7E	; 126
    7622:	71 05       	cpc	r23, r1
    7624:	3c f4       	brge	.+14     	; 0x7634 <SetFailsafe+0x40>
		{
			failsafe = 125;
		}
		if (failsafe < -125)
    7626:	63 38       	cpi	r22, 0x83	; 131
    7628:	8f ef       	ldi	r24, 0xFF	; 255
    762a:	78 07       	cpc	r23, r24
    762c:	2c f4       	brge	.+10     	; 0x7638 <SetFailsafe+0x44>
		{
			failsafe = -125;
    762e:	63 e8       	ldi	r22, 0x83	; 131
    7630:	7f ef       	ldi	r23, 0xFF	; 255
    7632:	02 c0       	rjmp	.+4      	; 0x7638 <SetFailsafe+0x44>
		failsafe = (temp + (int16_t)5) / (int16_t)10;
		
		// Bounds check 
		if (failsafe > 125)
		{
			failsafe = 125;
    7634:	6d e7       	ldi	r22, 0x7D	; 125
    7636:	70 e0       	ldi	r23, 0x00	; 0
		{
			failsafe = -125;
		}		
		
		// Save as percentage
		Config.Failsafe[i] = failsafe;
    7638:	d9 01       	movw	r26, r18
    763a:	6d 93       	st	X+, r22
    763c:	9d 01       	movw	r18, r26
    763e:	3f 96       	adiw	r30, 0x0f	; 15
    7640:	28 96       	adiw	r28, 0x08	; 8

	// Update latest values of each channel
	ProcessMixer();

	// Update Config settings based on servo position
	for (i = 0; i < MAX_OUTPUTS; i++)
    7642:	b6 e0       	ldi	r27, 0x06	; 6
    7644:	ec 3f       	cpi	r30, 0xFC	; 252
    7646:	fb 07       	cpc	r31, r27
    7648:	19 f7       	brne	.-58     	; 0x7610 <SetFailsafe+0x1c>
		// Save as percentage
		Config.Failsafe[i] = failsafe;
	}

	Save_Config_to_EEPROM();
}
    764a:	df 91       	pop	r29
    764c:	cf 91       	pop	r28
    764e:	1f 91       	pop	r17
    7650:	0f 91       	pop	r16
		
		// Save as percentage
		Config.Failsafe[i] = failsafe;
	}

	Save_Config_to_EEPROM();
    7652:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <Save_Config_to_EEPROM>

00007656 <Process_servos>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void Process_servos(void)
{
    7656:	cf 93       	push	r28
    7658:	df 93       	push	r29
    765a:	a4 e8       	ldi	r26, 0x84	; 132
    765c:	b6 e0       	ldi	r27, 0x06	; 6
    765e:	4c ef       	ldi	r20, 0xFC	; 252
    7660:	56 e0       	ldi	r21, 0x06	; 6
    7662:	eb ec       	ldi	r30, 0xCB	; 203
    7664:	f5 e0       	ldi	r31, 0x05	; 5
    7666:	20 e0       	ldi	r18, 0x00	; 0
    7668:	30 e0       	ldi	r19, 0x00	; 0
	// Formerly in UpdateServos()
	// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Servo reverse and trim
		temp = Config.Channel[i].value;
    766a:	8d 91       	ld	r24, X+
    766c:	9c 91       	ld	r25, X
    766e:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel
		if (Config.Servo_reverse[i] == ON)
    7670:	ea 01       	movw	r28, r20
    7672:	69 91       	ld	r22, Y+
    7674:	ae 01       	movw	r20, r28
    7676:	61 30       	cpi	r22, 0x01	; 1
    7678:	19 f4       	brne	.+6      	; 0x7680 <Process_servos+0x2a>
		{
			temp = -temp;
    767a:	91 95       	neg	r25
    767c:	81 95       	neg	r24
    767e:	91 09       	sbc	r25, r1
		}

		// Add offset value to restore to system compatible value
		// +/-1250 --> 2500~5000
		temp += 3750;
    7680:	ec 01       	movw	r28, r24
    7682:	ca 55       	subi	r28, 0x5A	; 90
    7684:	d1 4f       	sbci	r29, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp > Config.Limits[i].maximum)
    7686:	82 81       	ldd	r24, Z+2	; 0x02
    7688:	93 81       	ldd	r25, Z+3	; 0x03
    768a:	8c 17       	cp	r24, r28
    768c:	9d 07       	cpc	r25, r29
    768e:	3c f0       	brlt	.+14     	; 0x769e <Process_servos+0x48>
		{
			temp = Config.Limits[i].maximum;
		}

		else if (temp < Config.Limits[i].minimum)
    7690:	60 81       	ld	r22, Z
    7692:	71 81       	ldd	r23, Z+1	; 0x01
    7694:	ce 01       	movw	r24, r28
    7696:	c6 17       	cp	r28, r22
    7698:	d7 07       	cpc	r29, r23
    769a:	0c f4       	brge	.+2      	; 0x769e <Process_servos+0x48>
    769c:	cb 01       	movw	r24, r22
		{
			temp = Config.Limits[i].minimum;
		}
		
		// Save back to servo array
		ServoOut[i] = temp;
    769e:	e9 01       	movw	r28, r18
    76a0:	cc 0f       	add	r28, r28
    76a2:	dd 1f       	adc	r29, r29
    76a4:	cf 51       	subi	r28, 0x1F	; 31
    76a6:	d8 4f       	sbci	r29, 0xF8	; 248
    76a8:	99 83       	std	Y+1, r25	; 0x01
    76aa:	88 83       	st	Y, r24
    76ac:	2f 5f       	subi	r18, 0xFF	; 255
    76ae:	3f 4f       	sbci	r19, 0xFF	; 255
    76b0:	1f 96       	adiw	r26, 0x0f	; 15
    76b2:	38 96       	adiw	r30, 0x08	; 8
	int16_t temp = 0;
	uint8_t i = 0;
	
	// Formerly in UpdateServos()
	// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    76b4:	28 30       	cpi	r18, 0x08	; 8
    76b6:	31 05       	cpc	r19, r1
    76b8:	c1 f6       	brne	.-80     	; 0x766a <Process_servos+0x14>
		}
		
		// Save back to servo array
		ServoOut[i] = temp;
	}
}
    76ba:	df 91       	pop	r29
    76bc:	cf 91       	pop	r28
    76be:	08 95       	ret

000076c0 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    76c0:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    76c4:	81 e1       	ldi	r24, 0x11	; 17
    76c6:	80 93 b8 00 	sts	0x00B8, r24
    76ca:	08 95       	ret

000076cc <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    76cc:	94 ea       	ldi	r25, 0xA4	; 164
    76ce:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    76d2:	4f ef       	ldi	r20, 0xFF	; 255
    76d4:	50 e0       	ldi	r21, 0x00	; 0
    76d6:	60 e0       	ldi	r22, 0x00	; 0
    76d8:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    76da:	90 91 bc 00 	lds	r25, 0x00BC
    76de:	97 fd       	sbrc	r25, 7
    76e0:	06 c0       	rjmp	.+12     	; 0x76ee <i2c_start+0x22>
    76e2:	41 50       	subi	r20, 0x01	; 1
    76e4:	51 09       	sbc	r21, r1
    76e6:	61 09       	sbc	r22, r1
    76e8:	71 09       	sbc	r23, r1
    76ea:	b8 f7       	brcc	.-18     	; 0x76da <i2c_start+0xe>
    76ec:	06 c0       	rjmp	.+12     	; 0x76fa <i2c_start+0x2e>
	if(i2c_timer == 0)
    76ee:	45 2b       	or	r20, r21
    76f0:	46 2b       	or	r20, r22
    76f2:	47 2b       	or	r20, r23
    76f4:	11 f4       	brne	.+4      	; 0x76fa <i2c_start+0x2e>
		return 1;
    76f6:	81 e0       	ldi	r24, 0x01	; 1
    76f8:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    76fa:	90 91 b9 00 	lds	r25, 0x00B9
    76fe:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    7700:	98 30       	cpi	r25, 0x08	; 8
    7702:	11 f0       	breq	.+4      	; 0x7708 <i2c_start+0x3c>
    7704:	90 31       	cpi	r25, 0x10	; 16
    7706:	b9 f7       	brne	.-18     	; 0x76f6 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    7708:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    770c:	84 e8       	ldi	r24, 0x84	; 132
    770e:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    7712:	8f ef       	ldi	r24, 0xFF	; 255
    7714:	90 e0       	ldi	r25, 0x00	; 0
    7716:	a0 e0       	ldi	r26, 0x00	; 0
    7718:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    771a:	20 91 bc 00 	lds	r18, 0x00BC
    771e:	27 fd       	sbrc	r18, 7
    7720:	05 c0       	rjmp	.+10     	; 0x772c <i2c_start+0x60>
    7722:	01 97       	sbiw	r24, 0x01	; 1
    7724:	a1 09       	sbc	r26, r1
    7726:	b1 09       	sbc	r27, r1
    7728:	c0 f7       	brcc	.-16     	; 0x771a <i2c_start+0x4e>
    772a:	04 c0       	rjmp	.+8      	; 0x7734 <i2c_start+0x68>
	if(i2c_timer == 0)
    772c:	89 2b       	or	r24, r25
    772e:	8a 2b       	or	r24, r26
    7730:	8b 2b       	or	r24, r27
    7732:	09 f3       	breq	.-62     	; 0x76f6 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    7734:	80 91 b9 00 	lds	r24, 0x00B9
    7738:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    773a:	88 31       	cpi	r24, 0x18	; 24
    773c:	11 f0       	breq	.+4      	; 0x7742 <i2c_start+0x76>
    773e:	80 34       	cpi	r24, 0x40	; 64
    7740:	d1 f6       	brne	.-76     	; 0x76f6 <i2c_start+0x2a>

	return 0;
    7742:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    7744:	08 95       	ret

00007746 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7746:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7748:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    774a:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    774c:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7750:	20 e0       	ldi	r18, 0x00	; 0
    7752:	30 e0       	ldi	r19, 0x00	; 0
    7754:	90 91 bc 00 	lds	r25, 0x00BC
    7758:	97 fd       	sbrc	r25, 7
    775a:	06 c0       	rjmp	.+12     	; 0x7768 <i2c_start_wait+0x22>
    775c:	2f 5f       	subi	r18, 0xFF	; 255
    775e:	3f 4f       	sbci	r19, 0xFF	; 255
    7760:	21 15       	cp	r18, r1
    7762:	91 e0       	ldi	r25, 0x01	; 1
    7764:	39 07       	cpc	r19, r25
    7766:	b1 f7       	brne	.-20     	; 0x7754 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7768:	90 91 b9 00 	lds	r25, 0x00B9
    776c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    776e:	98 30       	cpi	r25, 0x08	; 8
    7770:	11 f0       	breq	.+4      	; 0x7776 <i2c_start_wait+0x30>
    7772:	90 31       	cpi	r25, 0x10	; 16
    7774:	59 f7       	brne	.-42     	; 0x774c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    7776:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    777a:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    777e:	20 e0       	ldi	r18, 0x00	; 0
    7780:	30 e0       	ldi	r19, 0x00	; 0
    7782:	90 91 bc 00 	lds	r25, 0x00BC
    7786:	97 fd       	sbrc	r25, 7
    7788:	06 c0       	rjmp	.+12     	; 0x7796 <i2c_start_wait+0x50>
    778a:	2f 5f       	subi	r18, 0xFF	; 255
    778c:	3f 4f       	sbci	r19, 0xFF	; 255
    778e:	21 15       	cp	r18, r1
    7790:	91 e0       	ldi	r25, 0x01	; 1
    7792:	39 07       	cpc	r19, r25
    7794:	b1 f7       	brne	.-20     	; 0x7782 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7796:	90 91 b9 00 	lds	r25, 0x00B9
    779a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    779c:	90 32       	cpi	r25, 0x20	; 32
    779e:	11 f0       	breq	.+4      	; 0x77a4 <i2c_start_wait+0x5e>
    77a0:	98 35       	cpi	r25, 0x58	; 88
    77a2:	79 f4       	brne	.+30     	; 0x77c2 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    77a4:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    77a8:	20 e0       	ldi	r18, 0x00	; 0
    77aa:	30 e0       	ldi	r19, 0x00	; 0
    77ac:	90 91 bc 00 	lds	r25, 0x00BC
    77b0:	94 ff       	sbrs	r25, 4
    77b2:	cc cf       	rjmp	.-104    	; 0x774c <i2c_start_wait+0x6>
    77b4:	2f 5f       	subi	r18, 0xFF	; 255
    77b6:	3f 4f       	sbci	r19, 0xFF	; 255
    77b8:	21 15       	cp	r18, r1
    77ba:	91 e0       	ldi	r25, 0x01	; 1
    77bc:	39 07       	cpc	r19, r25
    77be:	b1 f7       	brne	.-20     	; 0x77ac <i2c_start_wait+0x66>
    77c0:	c5 cf       	rjmp	.-118    	; 0x774c <i2c_start_wait+0x6>
    77c2:	08 95       	ret

000077c4 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    77c4:	0c 94 66 3b 	jmp	0x76cc	; 0x76cc <i2c_start>

000077c8 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    77c8:	84 e9       	ldi	r24, 0x94	; 148
    77ca:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    77ce:	80 e0       	ldi	r24, 0x00	; 0
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	20 91 bc 00 	lds	r18, 0x00BC
    77d6:	24 ff       	sbrs	r18, 4
    77d8:	05 c0       	rjmp	.+10     	; 0x77e4 <i2c_stop+0x1c>
    77da:	01 96       	adiw	r24, 0x01	; 1
    77dc:	81 15       	cp	r24, r1
    77de:	21 e0       	ldi	r18, 0x01	; 1
    77e0:	92 07       	cpc	r25, r18
    77e2:	b9 f7       	brne	.-18     	; 0x77d2 <i2c_stop+0xa>
    77e4:	08 95       	ret

000077e6 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    77e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    77ea:	84 e8       	ldi	r24, 0x84	; 132
    77ec:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    77f0:	8f ef       	ldi	r24, 0xFF	; 255
    77f2:	90 e0       	ldi	r25, 0x00	; 0
    77f4:	a0 e0       	ldi	r26, 0x00	; 0
    77f6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    77f8:	20 91 bc 00 	lds	r18, 0x00BC
    77fc:	27 fd       	sbrc	r18, 7
    77fe:	05 c0       	rjmp	.+10     	; 0x780a <i2c_write+0x24>
    7800:	01 97       	sbiw	r24, 0x01	; 1
    7802:	a1 09       	sbc	r26, r1
    7804:	b1 09       	sbc	r27, r1
    7806:	c0 f7       	brcc	.-16     	; 0x77f8 <i2c_write+0x12>
    7808:	04 c0       	rjmp	.+8      	; 0x7812 <i2c_write+0x2c>
	if(i2c_timer == 0)
    780a:	89 2b       	or	r24, r25
    780c:	8a 2b       	or	r24, r26
    780e:	8b 2b       	or	r24, r27
    7810:	41 f0       	breq	.+16     	; 0x7822 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    7812:	90 91 b9 00 	lds	r25, 0x00B9
    7816:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	98 32       	cpi	r25, 0x28	; 40
    781c:	19 f4       	brne	.+6      	; 0x7824 <i2c_write+0x3e>
    781e:	80 e0       	ldi	r24, 0x00	; 0
    7820:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    7822:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    7824:	08 95       	ret

00007826 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    7826:	84 ec       	ldi	r24, 0xC4	; 196
    7828:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    782c:	8f ef       	ldi	r24, 0xFF	; 255
    782e:	90 e0       	ldi	r25, 0x00	; 0
    7830:	a0 e0       	ldi	r26, 0x00	; 0
    7832:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7834:	20 91 bc 00 	lds	r18, 0x00BC
    7838:	27 fd       	sbrc	r18, 7
    783a:	05 c0       	rjmp	.+10     	; 0x7846 <i2c_readAck+0x20>
    783c:	01 97       	sbiw	r24, 0x01	; 1
    783e:	a1 09       	sbc	r26, r1
    7840:	b1 09       	sbc	r27, r1
    7842:	c0 f7       	brcc	.-16     	; 0x7834 <i2c_readAck+0xe>
    7844:	04 c0       	rjmp	.+8      	; 0x784e <i2c_readAck+0x28>
	if(i2c_timer == 0)
    7846:	89 2b       	or	r24, r25
    7848:	8a 2b       	or	r24, r26
    784a:	8b 2b       	or	r24, r27
    784c:	19 f0       	breq	.+6      	; 0x7854 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    784e:	80 91 bb 00 	lds	r24, 0x00BB
    7852:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7854:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    7856:	08 95       	ret

00007858 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    7858:	84 e8       	ldi	r24, 0x84	; 132
    785a:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    785e:	8f ef       	ldi	r24, 0xFF	; 255
    7860:	90 e0       	ldi	r25, 0x00	; 0
    7862:	a0 e0       	ldi	r26, 0x00	; 0
    7864:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7866:	20 91 bc 00 	lds	r18, 0x00BC
    786a:	27 fd       	sbrc	r18, 7
    786c:	05 c0       	rjmp	.+10     	; 0x7878 <i2c_readNak+0x20>
    786e:	01 97       	sbiw	r24, 0x01	; 1
    7870:	a1 09       	sbc	r26, r1
    7872:	b1 09       	sbc	r27, r1
    7874:	c0 f7       	brcc	.-16     	; 0x7866 <i2c_readNak+0xe>
    7876:	04 c0       	rjmp	.+8      	; 0x7880 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    7878:	89 2b       	or	r24, r25
    787a:	8a 2b       	or	r24, r26
    787c:	8b 2b       	or	r24, r27
    787e:	19 f0       	breq	.+6      	; 0x7886 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    7880:	80 91 bb 00 	lds	r24, 0x00BB
    7884:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7886:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    7888:	08 95       	ret

0000788a <init_uart>:
#define SPEKTRUM_CHNUM	7

// Initialise UART with adjusted bit rate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    788a:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    788c:	80 91 c1 00 	lds	r24, 0x00C1
    7890:	8f 77       	andi	r24, 0x7F	; 127
    7892:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    7896:	80 91 c0 00 	lds	r24, 0x00C0
    789a:	87 ff       	sbrs	r24, 7
    789c:	05 c0       	rjmp	.+10     	; 0x78a8 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    789e:	80 91 c6 00 	lds	r24, 0x00C6
    78a2:	80 93 c2 00 	sts	0x00C2, r24
    78a6:	f7 cf       	rjmp	.-18     	; 0x7896 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    78a8:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    78ac:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    78b0:	86 e0       	ldi	r24, 0x06	; 6
    78b2:	80 93 c2 00 	sts	0x00C2, r24
	UCSR1A = 0; // U2X = 0, no master mode, flags cleared
    78b6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = 0; // Clear flags, disable tx/rx, 8 bits
    78ba:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C = 6; // 8N1
    78be:	80 93 ca 00 	sts	0x00CA, r24

	// Setup RX side
	switch (Config.RxModeIn)
    78c2:	80 91 0b 06 	lds	r24, 0x060B
    78c6:	81 30       	cpi	r24, 0x01	; 1
    78c8:	a9 f0       	breq	.+42     	; 0x78f4 <init_uart+0x6a>
    78ca:	34 f4       	brge	.+12     	; 0x78d8 <init_uart+0x4e>
    78cc:	81 11       	cpse	r24, r1
    78ce:	4d c0       	rjmp	.+154    	; 0x796a <init_uart+0xe0>
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in CPPM modes
    78d0:	80 91 c1 00 	lds	r24, 0x00C1
    78d4:	8f 7e       	andi	r24, 0xEF	; 239
    78d6:	47 c0       	rjmp	.+142    	; 0x7966 <init_uart+0xdc>
	UCSR1A = 0; // U2X = 0, no master mode, flags cleared
	UCSR1B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR1C = 6; // 8N1

	// Setup RX side
	switch (Config.RxModeIn)
    78d8:	82 30       	cpi	r24, 0x02	; 2
    78da:	49 f1       	breq	.+82     	; 0x792e <init_uart+0xa4>
    78dc:	83 30       	cpi	r24, 0x03	; 3
    78de:	09 f0       	breq	.+2      	; 0x78e2 <init_uart+0x58>
    78e0:	44 c0       	rjmp	.+136    	; 0x796a <init_uart+0xe0>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    78e2:	80 91 c0 00 	lds	r24, 0x00C0
    78e6:	8d 7f       	andi	r24, 0xFD	; 253
    78e8:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    78ec:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_XTREME & 0xff;		// 0x04
    78f0:	84 e0       	ldi	r24, 0x04	; 4
    78f2:	25 c0       	rjmp	.+74     	; 0x793e <init_uart+0xb4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    78f4:	80 91 c0 00 	lds	r24, 0x00C0
    78f8:	82 60       	ori	r24, 0x02	; 2
    78fa:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    78fe:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    7902:	88 e1       	ldi	r24, 0x18	; 24
    7904:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    7908:	80 91 c1 00 	lds	r24, 0x00C1
    790c:	80 61       	ori	r24, 0x10	; 16
    790e:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    7912:	80 91 c2 00 	lds	r24, 0x00C2
    7916:	88 60       	ori	r24, 0x08	; 8
    7918:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    791c:	80 91 c2 00 	lds	r24, 0x00C2
    7920:	8f 7e       	andi	r24, 0xEF	; 239
    7922:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    7926:	80 91 c2 00 	lds	r24, 0x00C2
    792a:	80 62       	ori	r24, 0x20	; 32
    792c:	17 c0       	rjmp	.+46     	; 0x795c <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    792e:	80 91 c0 00 	lds	r24, 0x00C0
    7932:	8d 7f       	andi	r24, 0xFD	; 253
    7934:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    7938:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    793c:	8a e0       	ldi	r24, 0x0A	; 10
    793e:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    7942:	80 91 c1 00 	lds	r24, 0x00C1
    7946:	80 61       	ori	r24, 0x10	; 16
    7948:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    794c:	80 91 c2 00 	lds	r24, 0x00C2
    7950:	87 7f       	andi	r24, 0xF7	; 247
    7952:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    7956:	80 91 c2 00 	lds	r24, 0x00C2
    795a:	8f 7e       	andi	r24, 0xEF	; 239
    795c:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    7960:	80 91 c1 00 	lds	r24, 0x00C1
    7964:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in CPPM modes
    7966:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Setup TX side
	switch (Config.RxModeOut)
    796a:	80 91 0c 06 	lds	r24, 0x060C
    796e:	82 30       	cpi	r24, 0x02	; 2
    7970:	59 f1       	breq	.+86     	; 0x79c8 <init_uart+0x13e>
    7972:	83 30       	cpi	r24, 0x03	; 3
    7974:	01 f1       	breq	.+64     	; 0x79b6 <init_uart+0x12c>
    7976:	81 30       	cpi	r24, 0x01	; 1
    7978:	09 f0       	breq	.+2      	; 0x797c <init_uart+0xf2>
    797a:	3f c0       	rjmp	.+126    	; 0x79fa <init_uart+0x170>

		break;
		
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS:
		UCSR1A |=  (1 << U2X1);						// Need to set the 2x flag
    797c:	80 91 c8 00 	lds	r24, 0x00C8
    7980:	82 60       	ori	r24, 0x02	; 2
    7982:	80 93 c8 00 	sts	0x00C8, r24
		UBRR1H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%
    7986:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    798a:	88 e1       	ldi	r24, 0x18	; 24
    798c:	80 93 cc 00 	sts	0x00CC, r24
		UCSR1B |=  (1 << TXEN1);					// Enable transmitter
    7990:	80 91 c9 00 	lds	r24, 0x00C9
    7994:	88 60       	ori	r24, 0x08	; 8
    7996:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C |=  (1 << USBS1); 					// 2 stop bits
    799a:	80 91 ca 00 	lds	r24, 0x00CA
    799e:	88 60       	ori	r24, 0x08	; 8
    79a0:	80 93 ca 00 	sts	0x00CA, r24
		UCSR1C &= ~(1 << UPM10); 					// Even parity
    79a4:	80 91 ca 00 	lds	r24, 0x00CA
    79a8:	8f 7e       	andi	r24, 0xEF	; 239
    79aa:	80 93 ca 00 	sts	0x00CA, r24
		UCSR1C |=  (1 << UPM11);
    79ae:	80 91 ca 00 	lds	r24, 0x00CA
    79b2:	80 62       	ori	r24, 0x20	; 32
    79b4:	20 c0       	rjmp	.+64     	; 0x79f6 <init_uart+0x16c>
	// Setup TX side
	switch (Config.RxModeOut)
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
		UCSR1A &= ~(1 << U2X1);						// Clear the 2x flag
    79b6:	80 91 c8 00 	lds	r24, 0x00C8
    79ba:	8d 7f       	andi	r24, 0xFD	; 253
    79bc:	80 93 c8 00 	sts	0x00C8, r24
		UBRR1H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    79c0:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L  =  BAUD_PRESCALE_XTREME & 0xff;		// 0x04
    79c4:	84 e0       	ldi	r24, 0x04	; 4
    79c6:	08 c0       	rjmp	.+16     	; 0x79d8 <init_uart+0x14e>
		UCSR1C |=  (1 << UPM11);
		break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM:
		UCSR1A &=  ~(1 << U2X1);					// Clear the 2x flag
    79c8:	80 91 c8 00 	lds	r24, 0x00C8
    79cc:	8d 7f       	andi	r24, 0xFD	; 253
    79ce:	80 93 c8 00 	sts	0x00C8, r24
		UBRR1H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    79d2:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)
    79d6:	8a e0       	ldi	r24, 0x0A	; 10
    79d8:	80 93 cc 00 	sts	0x00CC, r24
		UCSR1B |= 	(1 << TXEN1);					// Enable transmitter
    79dc:	80 91 c9 00 	lds	r24, 0x00C9
    79e0:	88 60       	ori	r24, 0x08	; 8
    79e2:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C &=  ~(1 << USBS1); 					// 1 stop bit
    79e6:	80 91 ca 00 	lds	r24, 0x00CA
    79ea:	87 7f       	andi	r24, 0xF7	; 247
    79ec:	80 93 ca 00 	sts	0x00CA, r24
		UCSR1C &=  ~(1 << UPM10) | 					// No parity
    79f0:	80 91 ca 00 	lds	r24, 0x00CA
    79f4:	8f 7e       	andi	r24, 0xEF	; 239
    79f6:	80 93 ca 00 	sts	0x00CA, r24
		default:
		break;
	}

	// Re-enable interrupts
	sei();
    79fa:	78 94       	sei
    79fc:	08 95       	ret

000079fe <USART_Transmit>:

// USART_Transmit routine straight from the Atmel datasheet
void USART_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR1A & (1<<UDRE1)));
    79fe:	90 91 c8 00 	lds	r25, 0x00C8
    7a02:	95 ff       	sbrs	r25, 5
    7a04:	fc cf       	rjmp	.-8      	; 0x79fe <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR1 = data;
    7a06:	80 93 ce 00 	sts	0x00CE, r24
    7a0a:	08 95       	ret

00007a0c <TransmitData>:
}

// Transmit data packet based on the TX mode
void TransmitData(void)
{
    7a0c:	bf 92       	push	r11
    7a0e:	cf 92       	push	r12
    7a10:	df 92       	push	r13
    7a12:	ef 92       	push	r14
    7a14:	ff 92       	push	r15
    7a16:	0f 93       	push	r16
    7a18:	1f 93       	push	r17
    7a1a:	cf 93       	push	r28
    7a1c:	df 93       	push	r29
	//*	2000	= 2000us
	//*	2250 	= 2250us
	//*
	//************************************************************

	if (Config.RxModeOut == XTREME)
    7a1e:	20 91 0c 06 	lds	r18, 0x060C
    7a22:	23 30       	cpi	r18, 0x03	; 3
    7a24:	09 f0       	breq	.+2      	; 0x7a28 <TransmitData+0x1c>
    7a26:	dc c0       	rjmp	.+440    	; 0x7be0 <TransmitData+0x1d4>
	{
		checksum = 0;					// Reset checksum
    7a28:	10 92 a5 07 	sts	0x07A5, r1
    7a2c:	10 92 a4 07 	sts	0x07A4, r1

		Xtreme_Chanmask |= 0x00FF;		// Always transmit at least the bottom 8 channels. 
    7a30:	80 91 7c 07 	lds	r24, 0x077C
    7a34:	90 91 7d 07 	lds	r25, 0x077D
    7a38:	8f 6f       	ori	r24, 0xFF	; 255
    7a3a:	90 93 7d 07 	sts	0x077D, r25
    7a3e:	80 93 7c 07 	sts	0x077C, r24

		// Fake frame loss data if necessary
		if (Config.RxModeIn != XTREME)
    7a42:	80 91 0b 06 	lds	r24, 0x060B
    7a46:	83 30       	cpi	r24, 0x03	; 3
    7a48:	61 f0       	breq	.+24     	; 0x7a62 <TransmitData+0x56>
		{		
			Xtreme_Flags = 0;
    7a4a:	10 92 7f 07 	sts	0x077F, r1
			Xtreme_RSS = 0;
    7a4e:	10 92 83 07 	sts	0x0783, r1
		}
		
		// S.Bus will always be transmitted as 16 channels
		// Xtreme and Spektrum will know how many channels to transmit
		if (Config.RxModeIn == SBUS)
    7a52:	81 30       	cpi	r24, 0x01	; 1
    7a54:	31 f4       	brne	.+12     	; 0x7a62 <TransmitData+0x56>
		{
			Xtreme_Chanmask = 0xFFFF;
    7a56:	8f ef       	ldi	r24, 0xFF	; 255
    7a58:	9f ef       	ldi	r25, 0xFF	; 255
    7a5a:	90 93 7d 07 	sts	0x077D, r25
    7a5e:	80 93 7c 07 	sts	0x077C, r24
		}
			
		// Transmit Xtreme data
		checksum += Xtreme_Flags;
    7a62:	80 91 a4 07 	lds	r24, 0x07A4
    7a66:	90 91 a5 07 	lds	r25, 0x07A5
    7a6a:	20 91 7f 07 	lds	r18, 0x077F
    7a6e:	82 0f       	add	r24, r18
    7a70:	91 1d       	adc	r25, r1
    7a72:	90 93 a5 07 	sts	0x07A5, r25
    7a76:	80 93 a4 07 	sts	0x07A4, r24
		USART_Transmit(Xtreme_Flags);	// Copy of flags byte from input
    7a7a:	80 91 7f 07 	lds	r24, 0x077F
    7a7e:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
		
		checksum += Xtreme_RSS;
    7a82:	80 91 a4 07 	lds	r24, 0x07A4
    7a86:	90 91 a5 07 	lds	r25, 0x07A5
    7a8a:	20 91 83 07 	lds	r18, 0x0783
    7a8e:	82 0f       	add	r24, r18
    7a90:	91 1d       	adc	r25, r1
    7a92:	90 93 a5 07 	sts	0x07A5, r25
    7a96:	80 93 a4 07 	sts	0x07A4, r24
		USART_Transmit(Xtreme_RSS);		// Copy of RSS byte from input
    7a9a:	80 91 83 07 	lds	r24, 0x0783
    7a9e:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
		
		temp = Xtreme_Chanmask >> 8;	// High byte of channel mask
    7aa2:	80 91 7c 07 	lds	r24, 0x077C
    7aa6:	90 91 7d 07 	lds	r25, 0x077D
    7aaa:	89 2f       	mov	r24, r25
    7aac:	99 27       	eor	r25, r25
		checksum += temp;
    7aae:	20 91 a4 07 	lds	r18, 0x07A4
    7ab2:	30 91 a5 07 	lds	r19, 0x07A5
    7ab6:	28 0f       	add	r18, r24
    7ab8:	39 1f       	adc	r19, r25
    7aba:	30 93 a5 07 	sts	0x07A5, r19
    7abe:	20 93 a4 07 	sts	0x07A4, r18
		USART_Transmit(temp);
    7ac2:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
		
		temp = 0xFF;					// Low byte of channel mask - always set to show CH1 to CH8
		Xtreme_Chanmask |= temp;		// Re-write the CH1 to CH8 bits of the original channel mask
    7ac6:	80 91 7c 07 	lds	r24, 0x077C
    7aca:	90 91 7d 07 	lds	r25, 0x077D
    7ace:	8f 6f       	ori	r24, 0xFF	; 255
    7ad0:	90 93 7d 07 	sts	0x077D, r25
    7ad4:	80 93 7c 07 	sts	0x077C, r24
		
		checksum += temp;
    7ad8:	80 91 a4 07 	lds	r24, 0x07A4
    7adc:	90 91 a5 07 	lds	r25, 0x07A5
    7ae0:	81 50       	subi	r24, 0x01	; 1
    7ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ae4:	90 93 a5 07 	sts	0x07A5, r25
    7ae8:	80 93 a4 07 	sts	0x07A4, r24
		USART_Transmit(temp);
    7aec:	8f ef       	ldi	r24, 0xFF	; 255
    7aee:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
    7af2:	c0 e0       	ldi	r28, 0x00	; 0
    7af4:	d0 e0       	ldi	r29, 0x00	; 0
		// Work out which channel the data is intended for from the mask bit position
		// This way the outgoing data will match the ingoing...
		for (j = 0; j < 16; j++)
		{
			// If there is a bit set, allocate channel data for it
			if (Xtreme_Chanmask & (1 << j))
    7af6:	ee 24       	eor	r14, r14
    7af8:	e3 94       	inc	r14
    7afa:	f1 2c       	mov	r15, r1
    7afc:	20 91 7c 07 	lds	r18, 0x077C
    7b00:	30 91 7d 07 	lds	r19, 0x077D
    7b04:	c7 01       	movw	r24, r14
    7b06:	0c 2e       	mov	r0, r28
    7b08:	02 c0       	rjmp	.+4      	; 0x7b0e <TransmitData+0x102>
    7b0a:	88 0f       	add	r24, r24
    7b0c:	99 1f       	adc	r25, r25
    7b0e:	0a 94       	dec	r0
    7b10:	e2 f7       	brpl	.-8      	; 0x7b0a <TransmitData+0xfe>
    7b12:	82 23       	and	r24, r18
    7b14:	93 23       	and	r25, r19
    7b16:	89 2b       	or	r24, r25
    7b18:	09 f4       	brne	.+2      	; 0x7b1c <TransmitData+0x110>
    7b1a:	4e c0       	rjmp	.+156    	; 0x7bb8 <TransmitData+0x1ac>
			{
				// First eight channels come from ServoOut[]
				if (j < MAX_RC_CHANNELS)
    7b1c:	c8 30       	cpi	r28, 0x08	; 8
    7b1e:	38 f5       	brcc	.+78     	; 0x7b6e <TransmitData+0x162>
				{
					// Remove system offset
					itemp16 = ServoOut[j];
    7b20:	fe 01       	movw	r30, r28
    7b22:	ee 0f       	add	r30, r30
    7b24:	ff 1f       	adc	r31, r31
    7b26:	ef 51       	subi	r30, 0x1F	; 31
    7b28:	f8 4f       	sbci	r31, 0xF8	; 248
    7b2a:	00 81       	ld	r16, Z
    7b2c:	11 81       	ldd	r17, Z+1	; 0x01
					itemp16 -= 3750;
    7b2e:	06 5a       	subi	r16, 0xA6	; 166
    7b30:	1e 40       	sbci	r17, 0x0E	; 14
					
					// Conversion factor x0.5 
					itemp16 = (itemp16 >> 1);
    7b32:	15 95       	asr	r17
    7b34:	07 95       	ror	r16
					
					// Add in Extreme offset
					itemp16 += 1500;
    7b36:	04 52       	subi	r16, 0x24	; 36
    7b38:	1a 4f       	sbci	r17, 0xFA	; 250
					temp16 = itemp16;
					
					// Send bytes				
					temp = (uint8_t)(temp16 >> 8);		// High byte first
    7b3a:	81 2f       	mov	r24, r17
    7b3c:	99 27       	eor	r25, r25
					checksum +=	temp;					// Add to checksum
    7b3e:	20 91 a4 07 	lds	r18, 0x07A4
    7b42:	30 91 a5 07 	lds	r19, 0x07A5
    7b46:	28 0f       	add	r18, r24
    7b48:	39 1f       	adc	r19, r25
    7b4a:	30 93 a5 07 	sts	0x07A5, r19
    7b4e:	20 93 a4 07 	sts	0x07A4, r18
					USART_Transmit(temp);
    7b52:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>

					temp = (uint8_t)(temp16 & 0xFF);	// Low byte next
					checksum +=	temp;					// Add to checksum
    7b56:	80 91 a4 07 	lds	r24, 0x07A4
    7b5a:	90 91 a5 07 	lds	r25, 0x07A5
    7b5e:	80 0f       	add	r24, r16
    7b60:	91 1d       	adc	r25, r1
    7b62:	90 93 a5 07 	sts	0x07A5, r25
    7b66:	80 93 a4 07 	sts	0x07A4, r24
					USART_Transmit(temp);
    7b6a:	80 2f       	mov	r24, r16
    7b6c:	23 c0       	rjmp	.+70     	; 0x7bb4 <TransmitData+0x1a8>
				}
				// Extra channels come from ExtChannel[]
				else if (j < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
				{
					temp = (uint8_t)(ExtChannel[j - MAX_RC_CHANNELS] >> 8);	// High byte first
    7b6e:	8e 01       	movw	r16, r28
    7b70:	00 0f       	add	r16, r16
    7b72:	11 1f       	adc	r17, r17
    7b74:	05 5a       	subi	r16, 0xA5	; 165
    7b76:	18 4f       	sbci	r17, 0xF8	; 248
    7b78:	d8 01       	movw	r26, r16
    7b7a:	8d 91       	ld	r24, X+
    7b7c:	9c 91       	ld	r25, X
    7b7e:	89 2f       	mov	r24, r25
    7b80:	99 27       	eor	r25, r25
					checksum +=	temp;										// Add to checksum
    7b82:	20 91 a4 07 	lds	r18, 0x07A4
    7b86:	30 91 a5 07 	lds	r19, 0x07A5
    7b8a:	28 0f       	add	r18, r24
    7b8c:	39 1f       	adc	r19, r25
    7b8e:	30 93 a5 07 	sts	0x07A5, r19
    7b92:	20 93 a4 07 	sts	0x07A4, r18
					USART_Transmit(temp);
    7b96:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>

					temp = (uint8_t)(ExtChannel[j - MAX_RC_CHANNELS] & 0xFF);	// Low byte next
    7b9a:	f8 01       	movw	r30, r16
    7b9c:	80 81       	ld	r24, Z
    7b9e:	91 81       	ldd	r25, Z+1	; 0x01
					checksum +=	temp;										// Add to checksum
    7ba0:	20 91 a4 07 	lds	r18, 0x07A4
    7ba4:	30 91 a5 07 	lds	r19, 0x07A5
    7ba8:	28 0f       	add	r18, r24
    7baa:	31 1d       	adc	r19, r1
    7bac:	30 93 a5 07 	sts	0x07A5, r19
    7bb0:	20 93 a4 07 	sts	0x07A4, r18
					USART_Transmit(temp);					
    7bb4:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
    7bb8:	21 96       	adiw	r28, 0x01	; 1
		checksum += temp;
		USART_Transmit(temp);

		// Work out which channel the data is intended for from the mask bit position
		// This way the outgoing data will match the ingoing...
		for (j = 0; j < 16; j++)
    7bba:	c0 31       	cpi	r28, 0x10	; 16
    7bbc:	d1 05       	cpc	r29, r1
    7bbe:	09 f0       	breq	.+2      	; 0x7bc2 <TransmitData+0x1b6>
    7bc0:	9d cf       	rjmp	.-198    	; 0x7afc <TransmitData+0xf0>
					USART_Transmit(temp);					
				}
			}
		}
		
		temp = (uint8_t)(checksum & 0xFF);
    7bc2:	80 91 a4 07 	lds	r24, 0x07A4
    7bc6:	90 91 a5 07 	lds	r25, 0x07A5
		for (j = 0; j < 25; j++)
		{
			USART_Transmit(sBuffer[j]);
		}
	}
    7bca:	df 91       	pop	r29
    7bcc:	cf 91       	pop	r28
    7bce:	1f 91       	pop	r17
    7bd0:	0f 91       	pop	r16
    7bd2:	ff 90       	pop	r15
    7bd4:	ef 90       	pop	r14
    7bd6:	df 90       	pop	r13
    7bd8:	cf 90       	pop	r12
    7bda:	bf 90       	pop	r11
				}
			}
		}
		
		temp = (uint8_t)(checksum & 0xFF);
		USART_Transmit(temp);			// Checksum
    7bdc:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <USART_Transmit>
	//* Where possible, interleave as many channels back into the packets.
	//*
	//************************************************************

	// Handle Spektrum format
	else if (Config.RxModeOut == SPEKTRUM)
    7be0:	22 30       	cpi	r18, 0x02	; 2
    7be2:	09 f0       	breq	.+2      	; 0x7be6 <TransmitData+0x1da>
    7be4:	25 c1       	rjmp	.+586    	; 0x7e30 <TransmitData+0x424>
	{
		// Transmit frame loss data - fake if necessary
		if (Config.RxModeIn != SPEKTRUM)
    7be6:	40 91 0b 06 	lds	r20, 0x060B
    7bea:	42 30       	cpi	r20, 0x02	; 2
    7bec:	11 f0       	breq	.+4      	; 0x7bf2 <TransmitData+0x1e6>
		{
			Spektrum_frameloss = 0;
    7bee:	10 92 82 07 	sts	0x0782, r1
		}

		// CPPM has a maximum of 8 channels. Spektrum has 7 per frame.
		// So arrange channels as best fit. CH1-6 in both frames, 7 and 8 once per pair.
		if (Config.RxModeIn == CPPM)
    7bf2:	29 b1       	in	r18, 0x09	; 9
    7bf4:	82 2f       	mov	r24, r18
    7bf6:	81 70       	andi	r24, 0x01	; 1
    7bf8:	90 e0       	ldi	r25, 0x00	; 0
    7bfa:	24 2f       	mov	r18, r20
    7bfc:	33 27       	eor	r19, r19
    7bfe:	27 fd       	sbrc	r18, 7
    7c00:	30 95       	com	r19
    7c02:	28 17       	cp	r18, r24
    7c04:	39 07       	cpc	r19, r25
    7c06:	61 f4       	brne	.+24     	; 0x7c20 <TransmitData+0x214>
		{
			Spektrum_Chanmask_0 = 0x007F; // CH1-7 in frame 0
    7c08:	8f e7       	ldi	r24, 0x7F	; 127
    7c0a:	90 e0       	ldi	r25, 0x00	; 0
    7c0c:	90 93 a3 07 	sts	0x07A3, r25
    7c10:	80 93 a2 07 	sts	0x07A2, r24
			Spektrum_Chanmask_1 = 0x00BF; // CH1-6, 8 in frame 1
    7c14:	8f eb       	ldi	r24, 0xBF	; 191
    7c16:	90 e0       	ldi	r25, 0x00	; 0
    7c18:	90 93 9e 07 	sts	0x079E, r25
    7c1c:	80 93 9d 07 	sts	0x079D, r24
		}

		// S.Bus will always be transmitted as 16 channels
		// So mark all channels as set
		if (Config.RxModeIn == SBUS)
    7c20:	41 30       	cpi	r20, 0x01	; 1
    7c22:	69 f4       	brne	.+26     	; 0x7c3e <TransmitData+0x232>
		{
			Spektrum_Chanmask_0 = 0x007F; // CH1-7 in frame 0
    7c24:	8f e7       	ldi	r24, 0x7F	; 127
    7c26:	90 e0       	ldi	r25, 0x00	; 0
    7c28:	90 93 a3 07 	sts	0x07A3, r25
    7c2c:	80 93 a2 07 	sts	0x07A2, r24
			Spektrum_Chanmask_1 = 0x3F80; // CH8-14 in frame 1
    7c30:	80 e8       	ldi	r24, 0x80	; 128
    7c32:	9f e3       	ldi	r25, 0x3F	; 63
    7c34:	90 93 9e 07 	sts	0x079E, r25
    7c38:	80 93 9d 07 	sts	0x079D, r24
    7c3c:	3c c0       	rjmp	.+120    	; 0x7cb6 <TransmitData+0x2aa>
		}

		// Xtreme knows how many channels to transmit
		// Copy them out into the two frames
		if (Config.RxModeIn == XTREME)
    7c3e:	43 30       	cpi	r20, 0x03	; 3
    7c40:	d1 f5       	brne	.+116    	; 0x7cb6 <TransmitData+0x2aa>
		{
			i = 0;
			Spektrum_Chanmask_0 = 0;
    7c42:	10 92 a3 07 	sts	0x07A3, r1
    7c46:	10 92 a2 07 	sts	0x07A2, r1
			Spektrum_Chanmask_1 = 0;
    7c4a:	10 92 9e 07 	sts	0x079E, r1
    7c4e:	10 92 9d 07 	sts	0x079D, r1
    7c52:	80 e0       	ldi	r24, 0x00	; 0
    7c54:	90 e0       	ldi	r25, 0x00	; 0

		// Xtreme knows how many channels to transmit
		// Copy them out into the two frames
		if (Config.RxModeIn == XTREME)
		{
			i = 0;
    7c56:	e0 e0       	ldi	r30, 0x00	; 0
			Spektrum_Chanmask_1 = 0;
			
			// Transfer the Xtreme channels to the two Spektrum frames 
			for (j = 0; j < 16; j++)
			{	
				if (Xtreme_Chanmask & (1 << j))
    7c58:	61 e0       	ldi	r22, 0x01	; 1
    7c5a:	70 e0       	ldi	r23, 0x00	; 0
    7c5c:	20 91 7c 07 	lds	r18, 0x077C
    7c60:	30 91 7d 07 	lds	r19, 0x077D
    7c64:	ab 01       	movw	r20, r22
    7c66:	08 2e       	mov	r0, r24
    7c68:	02 c0       	rjmp	.+4      	; 0x7c6e <TransmitData+0x262>
    7c6a:	44 0f       	add	r20, r20
    7c6c:	55 1f       	adc	r21, r21
    7c6e:	0a 94       	dec	r0
    7c70:	e2 f7       	brpl	.-8      	; 0x7c6a <TransmitData+0x25e>
    7c72:	24 23       	and	r18, r20
    7c74:	35 23       	and	r19, r21
    7c76:	23 2b       	or	r18, r19
    7c78:	d1 f0       	breq	.+52     	; 0x7cae <TransmitData+0x2a2>
				{
					// CH1 to 7 go to Frame 0
					if (i < SPEKTRUM_CHNUM)
    7c7a:	e7 30       	cpi	r30, 0x07	; 7
    7c7c:	58 f4       	brcc	.+22     	; 0x7c94 <TransmitData+0x288>
					{
						Spektrum_Chanmask_0 |= (1 << j);
    7c7e:	20 91 a2 07 	lds	r18, 0x07A2
    7c82:	30 91 a3 07 	lds	r19, 0x07A3
    7c86:	24 2b       	or	r18, r20
    7c88:	35 2b       	or	r19, r21
    7c8a:	30 93 a3 07 	sts	0x07A3, r19
    7c8e:	20 93 a2 07 	sts	0x07A2, r18
    7c92:	0c c0       	rjmp	.+24     	; 0x7cac <TransmitData+0x2a0>
					}
					// CH8 to 14 go to Frame 1
					else if (i < (SPEKTRUM_CHNUM << 1))
    7c94:	ee 30       	cpi	r30, 0x0E	; 14
    7c96:	50 f4       	brcc	.+20     	; 0x7cac <TransmitData+0x2a0>
					{
						Spektrum_Chanmask_1 |= (1 << j);
    7c98:	20 91 9d 07 	lds	r18, 0x079D
    7c9c:	30 91 9e 07 	lds	r19, 0x079E
    7ca0:	24 2b       	or	r18, r20
    7ca2:	35 2b       	or	r19, r21
    7ca4:	30 93 9e 07 	sts	0x079E, r19
    7ca8:	20 93 9d 07 	sts	0x079D, r18
					}
					// Increment Spektrum channel number
					i++;
    7cac:	ef 5f       	subi	r30, 0xFF	; 255
    7cae:	01 96       	adiw	r24, 0x01	; 1
			i = 0;
			Spektrum_Chanmask_0 = 0;
			Spektrum_Chanmask_1 = 0;
			
			// Transfer the Xtreme channels to the two Spektrum frames 
			for (j = 0; j < 16; j++)
    7cb0:	80 31       	cpi	r24, 0x10	; 16
    7cb2:	91 05       	cpc	r25, r1
    7cb4:	99 f6       	brne	.-90     	; 0x7c5c <TransmitData+0x250>
					i++;
				}
			}
		}
		
		USART_Transmit(Spektrum_frameloss);	// Copy of last frame loss byte from input		
    7cb6:	80 91 82 07 	lds	r24, 0x0782
    7cba:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>

		// Transmit flags (hard coded to 2048 and 2 frames per packet)
		USART_Transmit(SPEKTRUM_2048);
    7cbe:	82 e1       	ldi	r24, 0x12	; 18
    7cc0:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
		// We will always transmit eight channels of data.

		i = 0; // Reset channel counter  

		// Select the appropriate channel mask for this frame
		if (Spektrum_frame_in == 0)
    7cc4:	80 91 86 07 	lds	r24, 0x0786
    7cc8:	81 11       	cpse	r24, r1
    7cca:	05 c0       	rjmp	.+10     	; 0x7cd6 <TransmitData+0x2ca>
		{
			SpektrumMask = Spektrum_Chanmask_0; // Use mask 0
    7ccc:	e0 90 a2 07 	lds	r14, 0x07A2
    7cd0:	f0 90 a3 07 	lds	r15, 0x07A3
    7cd4:	04 c0       	rjmp	.+8      	; 0x7cde <TransmitData+0x2d2>
		}
		else
		{
			SpektrumMask = Spektrum_Chanmask_1; // Use mask 1
    7cd6:	e0 90 9d 07 	lds	r14, 0x079D
    7cda:	f0 90 9e 07 	lds	r15, 0x079E

		// Xtreme knows how many channels to transmit
		// Copy them out into the two frames
		if (Config.RxModeIn == XTREME)
		{
			i = 0;
    7cde:	c0 e0       	ldi	r28, 0x00	; 0
    7ce0:	d0 e0       	ldi	r29, 0x00	; 0
		USART_Transmit(SPEKTRUM_2048);

		// Process alternate frames correctly
		// We will always transmit eight channels of data.

		i = 0; // Reset channel counter  
    7ce2:	b1 2c       	mov	r11, r1
		// This way the outgoing data will match the ingoing... fill in blanks with 0xFFFF
		for (j = 0; j < 16; j++)
		{
			// If there is a bit set in the mask, allocate channel data for it.
			// If not, move to next channel/bit
			if (SpektrumMask & (1 << j))
    7ce4:	cc 24       	eor	r12, r12
    7ce6:	c3 94       	inc	r12
    7ce8:	d1 2c       	mov	r13, r1
    7cea:	c6 01       	movw	r24, r12
    7cec:	0c 2e       	mov	r0, r28
    7cee:	02 c0       	rjmp	.+4      	; 0x7cf4 <TransmitData+0x2e8>
    7cf0:	88 0f       	add	r24, r24
    7cf2:	99 1f       	adc	r25, r25
    7cf4:	0a 94       	dec	r0
    7cf6:	e2 f7       	brpl	.-8      	; 0x7cf0 <TransmitData+0x2e4>
    7cf8:	8e 21       	and	r24, r14
    7cfa:	9f 21       	and	r25, r15
    7cfc:	89 2b       	or	r24, r25
    7cfe:	09 f4       	brne	.+2      	; 0x7d02 <TransmitData+0x2f6>
    7d00:	73 c0       	rjmp	.+230    	; 0x7de8 <TransmitData+0x3dc>
			{
				// We can only fit seven channels in each frame
				if (i < SPEKTRUM_CHNUM)
    7d02:	26 e0       	ldi	r18, 0x06	; 6
    7d04:	2b 15       	cp	r18, r11
    7d06:	08 f4       	brcc	.+2      	; 0x7d0a <TransmitData+0x2fe>
    7d08:	6f c0       	rjmp	.+222    	; 0x7de8 <TransmitData+0x3dc>
				{
					// First eight channels come from ServoOut[]
					if (j < MAX_RC_CHANNELS)
    7d0a:	c8 30       	cpi	r28, 0x08	; 8
    7d0c:	08 f0       	brcs	.+2      	; 0x7d10 <TransmitData+0x304>
    7d0e:	50 c0       	rjmp	.+160    	; 0x7db0 <TransmitData+0x3a4>
					{
						// Convert to Spektrum values (2500~5000 -> 0~2047)
						itemp16 = ServoOut[j];
    7d10:	fe 01       	movw	r30, r28
    7d12:	ee 0f       	add	r30, r30
    7d14:	ff 1f       	adc	r31, r31
    7d16:	ef 51       	subi	r30, 0x1F	; 31
    7d18:	f8 4f       	sbci	r31, 0xF8	; 248
    7d1a:	20 81       	ld	r18, Z
    7d1c:	31 81       	ldd	r19, Z+1	; 0x01
						itemp16 -= 3750;				// Remove local offset (-1250~1250)
    7d1e:	26 5a       	subi	r18, 0xA6	; 166
    7d20:	3e 40       	sbci	r19, 0x0E	; 14
							
						// Respan to Spektrum units (0-2047)
						// x0.8675 (0.8672)
						itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 4) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 7);
    7d22:	c9 01       	movw	r24, r18
    7d24:	95 95       	asr	r25
    7d26:	87 95       	ror	r24
    7d28:	a9 01       	movw	r20, r18
    7d2a:	55 95       	asr	r21
    7d2c:	47 95       	ror	r20
    7d2e:	55 95       	asr	r21
    7d30:	47 95       	ror	r20
    7d32:	84 0f       	add	r24, r20
    7d34:	95 1f       	adc	r25, r21
    7d36:	a9 01       	movw	r20, r18
    7d38:	74 e0       	ldi	r23, 0x04	; 4
    7d3a:	55 95       	asr	r21
    7d3c:	47 95       	ror	r20
    7d3e:	7a 95       	dec	r23
    7d40:	e1 f7       	brne	.-8      	; 0x7d3a <TransmitData+0x32e>
    7d42:	84 0f       	add	r24, r20
    7d44:	95 1f       	adc	r25, r21
    7d46:	a9 01       	movw	r20, r18
    7d48:	e5 e0       	ldi	r30, 0x05	; 5
    7d4a:	55 95       	asr	r21
    7d4c:	47 95       	ror	r20
    7d4e:	ea 95       	dec	r30
    7d50:	e1 f7       	brne	.-8      	; 0x7d4a <TransmitData+0x33e>
    7d52:	84 0f       	add	r24, r20
    7d54:	95 1f       	adc	r25, r21
    7d56:	a9 01       	movw	r20, r18
    7d58:	f6 e0       	ldi	r31, 0x06	; 6
    7d5a:	55 95       	asr	r21
    7d5c:	47 95       	ror	r20
    7d5e:	fa 95       	dec	r31
    7d60:	e1 f7       	brne	.-8      	; 0x7d5a <TransmitData+0x34e>
    7d62:	84 0f       	add	r24, r20
    7d64:	95 1f       	adc	r25, r21
    7d66:	22 0f       	add	r18, r18
    7d68:	23 2f       	mov	r18, r19
    7d6a:	22 1f       	adc	r18, r18
    7d6c:	33 0b       	sbc	r19, r19
    7d6e:	82 0f       	add	r24, r18
    7d70:	93 1f       	adc	r25, r19
							
						itemp16 += 1024;				// Add Spektrum offset
    7d72:	8c 01       	movw	r16, r24
    7d74:	1c 5f       	subi	r17, 0xFC	; 252
							
						// Bounds check (0 to 2047)
						if (itemp16 < 0)
    7d76:	17 fd       	sbrc	r17, 7
    7d78:	07 c0       	rjmp	.+14     	; 0x7d88 <TransmitData+0x37c>
						{
							itemp16 = 0;
						}
						if (itemp16 > 2047)
    7d7a:	01 15       	cp	r16, r1
    7d7c:	48 e0       	ldi	r20, 0x08	; 8
    7d7e:	14 07       	cpc	r17, r20
    7d80:	2c f0       	brlt	.+10     	; 0x7d8c <TransmitData+0x380>
						{
							itemp16 = 2047;
    7d82:	0f ef       	ldi	r16, 0xFF	; 255
    7d84:	17 e0       	ldi	r17, 0x07	; 7
    7d86:	02 c0       	rjmp	.+4      	; 0x7d8c <TransmitData+0x380>
						itemp16 += 1024;				// Add Spektrum offset
							
						// Bounds check (0 to 2047)
						if (itemp16 < 0)
						{
							itemp16 = 0;
    7d88:	00 e0       	ldi	r16, 0x00	; 0
    7d8a:	10 e0       	ldi	r17, 0x00	; 0
							itemp16 = 2047;
						}
							
						// Reshuffle bits into byte pairs
						temp = (uint8_t)(itemp16 >> 8);		// OR the channel number together with the upper 3 bits of the data
						temp |= (j << 3);					// Shift channel number up to the correct spot. j = channel number
    7d8c:	ce 01       	movw	r24, r28
    7d8e:	23 e0       	ldi	r18, 0x03	; 3
    7d90:	88 0f       	add	r24, r24
    7d92:	99 1f       	adc	r25, r25
    7d94:	2a 95       	dec	r18
    7d96:	e1 f7       	brne	.-8      	; 0x7d90 <TransmitData+0x384>
    7d98:	81 2b       	or	r24, r17
	
						// Set the "2nd frame" bit for first byte of channel data if we are generating the second frame
						// i is the count of channels output in this frame
						if ((Spektrum_frame_in == 1) && (i == 0))
    7d9a:	90 91 86 07 	lds	r25, 0x0786
    7d9e:	91 30       	cpi	r25, 0x01	; 1
    7da0:	19 f4       	brne	.+6      	; 0x7da8 <TransmitData+0x39c>
    7da2:	b1 10       	cpse	r11, r1
    7da4:	01 c0       	rjmp	.+2      	; 0x7da8 <TransmitData+0x39c>
						{
							temp |= 0x80;			
    7da6:	80 68       	ori	r24, 0x80	; 128
						}
							
						// Transmit channel data msb
						USART_Transmit(temp);
    7da8:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
							
						// Transmit channel data lsb
						temp = (uint8_t)(itemp16 & 0xFF);
						USART_Transmit(temp);
    7dac:	80 2f       	mov	r24, r16
    7dae:	19 c0       	rjmp	.+50     	; 0x7de2 <TransmitData+0x3d6>
    7db0:	8e 01       	movw	r16, r28
    7db2:	08 50       	subi	r16, 0x08	; 8
    7db4:	11 09       	sbc	r17, r1
					}
					// Ext channel - already formatted correctly
					else
					{
						// Reshuffle bits into byte pairs
						temp = (uint8_t)(ExtChannel[j - MAX_RC_CHANNELS] >> 8);
    7db6:	00 0f       	add	r16, r16
    7db8:	11 1f       	adc	r17, r17
    7dba:	f8 01       	movw	r30, r16
    7dbc:	e5 59       	subi	r30, 0x95	; 149
    7dbe:	f8 4f       	sbci	r31, 0xF8	; 248
    7dc0:	20 81       	ld	r18, Z
    7dc2:	31 81       	ldd	r19, Z+1	; 0x01
    7dc4:	83 2f       	mov	r24, r19
						
						// Set the "2nd frame" bit for first byte of channel data if we are generating the second frame
						if ((Spektrum_frame_in == 1) && (i == 0))
    7dc6:	90 91 86 07 	lds	r25, 0x0786
    7dca:	91 30       	cpi	r25, 0x01	; 1
    7dcc:	19 f4       	brne	.+6      	; 0x7dd4 <TransmitData+0x3c8>
    7dce:	b1 10       	cpse	r11, r1
    7dd0:	01 c0       	rjmp	.+2      	; 0x7dd4 <TransmitData+0x3c8>
						{
							temp |= 0x80;
    7dd2:	80 68       	ori	r24, 0x80	; 128
						}
						
						// Transmit channel data msb
						USART_Transmit(temp);
    7dd4:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
							
						// Transmit channel data lsb
						temp = (ExtChannel[j - MAX_RC_CHANNELS] & 0xFF);
    7dd8:	f8 01       	movw	r30, r16
    7dda:	e5 59       	subi	r30, 0x95	; 149
    7ddc:	f8 4f       	sbci	r31, 0xF8	; 248
    7dde:	80 81       	ld	r24, Z
    7de0:	91 81       	ldd	r25, Z+1	; 0x01
						USART_Transmit(temp);
    7de2:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
					}
			
					i++; // Count the channels inserted into this frame
    7de6:	b3 94       	inc	r11
    7de8:	21 96       	adiw	r28, 0x01	; 1
			SpektrumMask = Spektrum_Chanmask_1; // Use mask 1
		}
			
		// Work out which channel the data is intended for from the mask bit position
		// This way the outgoing data will match the ingoing... fill in blanks with 0xFFFF
		for (j = 0; j < 16; j++)
    7dea:	c0 31       	cpi	r28, 0x10	; 16
    7dec:	d1 05       	cpc	r29, r1
    7dee:	09 f0       	breq	.+2      	; 0x7df2 <TransmitData+0x3e6>
    7df0:	7c cf       	rjmp	.-264    	; 0x7cea <TransmitData+0x2de>
			} // If there is a bit set
		} // for (j = 0; j < 16; j++)

		// Fill in any extras with 0xffff
		// i is the count of channels output in this frame
		for (j = i; j < SPEKTRUM_CHNUM; j++)
    7df2:	86 e0       	ldi	r24, 0x06	; 6
    7df4:	8b 15       	cp	r24, r11
    7df6:	40 f0       	brcs	.+16     	; 0x7e08 <TransmitData+0x3fc>
		{
			// Transmit channel data msb
			USART_Transmit(0xFF);
    7df8:	8f ef       	ldi	r24, 0xFF	; 255
    7dfa:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
				
			// Transmit channel data lsb
			USART_Transmit(0xFF);
    7dfe:	8f ef       	ldi	r24, 0xFF	; 255
    7e00:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
			} // If there is a bit set
		} // for (j = 0; j < 16; j++)

		// Fill in any extras with 0xffff
		// i is the count of channels output in this frame
		for (j = i; j < SPEKTRUM_CHNUM; j++)
    7e04:	b3 94       	inc	r11
    7e06:	f5 cf       	rjmp	.-22     	; 0x7df2 <TransmitData+0x3e6>
			USART_Transmit(0xFF);
		}

		// Flip to alternate frame for generating when in failsafe or not fed by a Spektrum source
		// Otherwise we will keep generating the same frame...
		if ((Flight_flags & (1 << FailsafeFlag)) || (Config.RxModeIn != SPEKTRUM))
    7e08:	80 91 1c 05 	lds	r24, 0x051C
    7e0c:	82 fd       	sbrc	r24, 2
    7e0e:	05 c0       	rjmp	.+10     	; 0x7e1a <TransmitData+0x40e>
    7e10:	80 91 0b 06 	lds	r24, 0x060B
    7e14:	82 30       	cpi	r24, 0x02	; 2
    7e16:	09 f4       	brne	.+2      	; 0x7e1a <TransmitData+0x40e>
    7e18:	ac c0       	rjmp	.+344    	; 0x7f72 <TransmitData+0x566>
		{
			if (Spektrum_frame_in == 0)
    7e1a:	80 91 86 07 	lds	r24, 0x0786
    7e1e:	81 11       	cpse	r24, r1
    7e20:	04 c0       	rjmp	.+8      	; 0x7e2a <TransmitData+0x41e>
			{
				Spektrum_frame_in = 1;
    7e22:	81 e0       	ldi	r24, 0x01	; 1
    7e24:	80 93 86 07 	sts	0x0786, r24
    7e28:	a4 c0       	rjmp	.+328    	; 0x7f72 <TransmitData+0x566>
			}
			else
			{
				Spektrum_frame_in = 0;
    7e2a:	10 92 86 07 	sts	0x0786, r1
    7e2e:	a1 c0       	rjmp	.+322    	; 0x7f72 <TransmitData+0x566>
	//*				1877 (+855) = 2.0ms
	//*				2047 (+1023) = 2098us
	//*	
	//************************************************************

	else if (Config.RxModeOut == SBUS)
    7e30:	21 30       	cpi	r18, 0x01	; 1
    7e32:	09 f0       	breq	.+2      	; 0x7e36 <TransmitData+0x42a>
    7e34:	9e c0       	rjmp	.+316    	; 0x7f72 <TransmitData+0x566>
	{
		// Clear entire sBuffer first
		memset(&sBuffer[0],0,(sizeof(sBuffer)));
    7e36:	86 e2       	ldi	r24, 0x26	; 38
    7e38:	e5 e4       	ldi	r30, 0x45	; 69
    7e3a:	f5 e0       	ldi	r31, 0x05	; 5
    7e3c:	df 01       	movw	r26, r30
    7e3e:	1d 92       	st	X+, r1
    7e40:	8a 95       	dec	r24
    7e42:	e9 f7       	brne	.-6      	; 0x7e3e <TransmitData+0x432>
		
		// S.Bus start byte
		sBuffer[0] = SBUS_START;
    7e44:	80 ef       	ldi	r24, 0xF0	; 240
    7e46:	80 93 45 05 	sts	0x0545, r24
    7e4a:	40 e0       	ldi	r20, 0x00	; 0
    7e4c:	50 e0       	ldi	r21, 0x00	; 0

		// Convert servo data to S.Bus data size
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Convert to S.BUS values
			itemp16 = ServoOut[i];			// Copy to signed register (2500~5000)
    7e4e:	ba 01       	movw	r22, r20
    7e50:	66 0f       	add	r22, r22
    7e52:	77 1f       	adc	r23, r23
    7e54:	fb 01       	movw	r30, r22
    7e56:	ef 51       	subi	r30, 0x1F	; 31
    7e58:	f8 4f       	sbci	r31, 0xF8	; 248
    7e5a:	20 81       	ld	r18, Z
    7e5c:	31 81       	ldd	r19, Z+1	; 0x01

			itemp16 -= 3750;				// Remove local offset (-1250~1250)
    7e5e:	26 5a       	subi	r18, 0xA6	; 166
    7e60:	3e 40       	sbci	r19, 0x0E	; 14
			
			// Respan to S.BUS values (x0.8) (0.8008)
			itemp16 = (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 5) + (itemp16 >> 6) + (itemp16 >> 8);
    7e62:	c9 01       	movw	r24, r18
    7e64:	95 95       	asr	r25
    7e66:	87 95       	ror	r24
    7e68:	f9 01       	movw	r30, r18
    7e6a:	f5 95       	asr	r31
    7e6c:	e7 95       	ror	r30
    7e6e:	f5 95       	asr	r31
    7e70:	e7 95       	ror	r30
    7e72:	8e 0f       	add	r24, r30
    7e74:	9f 1f       	adc	r25, r31
    7e76:	f9 01       	movw	r30, r18
    7e78:	b5 e0       	ldi	r27, 0x05	; 5
    7e7a:	f5 95       	asr	r31
    7e7c:	e7 95       	ror	r30
    7e7e:	ba 95       	dec	r27
    7e80:	e1 f7       	brne	.-8      	; 0x7e7a <TransmitData+0x46e>
    7e82:	8e 0f       	add	r24, r30
    7e84:	9f 1f       	adc	r25, r31
    7e86:	f9 01       	movw	r30, r18
    7e88:	c6 e0       	ldi	r28, 0x06	; 6
    7e8a:	f5 95       	asr	r31
    7e8c:	e7 95       	ror	r30
    7e8e:	ca 95       	dec	r28
    7e90:	e1 f7       	brne	.-8      	; 0x7e8a <TransmitData+0x47e>
    7e92:	8e 0f       	add	r24, r30
    7e94:	9f 1f       	adc	r25, r31
    7e96:	23 2f       	mov	r18, r19
    7e98:	33 0f       	add	r19, r19
    7e9a:	33 0b       	sbc	r19, r19
    7e9c:	82 0f       	add	r24, r18
    7e9e:	93 1f       	adc	r25, r19
			
			itemp16 += 1024;				// Add S.Bus offset
    7ea0:	9c 5f       	subi	r25, 0xFC	; 252
			
			// Bounds check (0 to 2047)
			if (itemp16 < 0)
    7ea2:	97 fd       	sbrc	r25, 7
    7ea4:	07 c0       	rjmp	.+14     	; 0x7eb4 <TransmitData+0x4a8>
			{
				itemp16 = 0;
			}
			if (itemp16 > 2047)
    7ea6:	81 15       	cp	r24, r1
    7ea8:	b8 e0       	ldi	r27, 0x08	; 8
    7eaa:	9b 07       	cpc	r25, r27
    7eac:	2c f0       	brlt	.+10     	; 0x7eb8 <TransmitData+0x4ac>
			{
				itemp16 = 2047;
    7eae:	8f ef       	ldi	r24, 0xFF	; 255
    7eb0:	97 e0       	ldi	r25, 0x07	; 7
    7eb2:	02 c0       	rjmp	.+4      	; 0x7eb8 <TransmitData+0x4ac>
			itemp16 += 1024;				// Add S.Bus offset
			
			// Bounds check (0 to 2047)
			if (itemp16 < 0)
			{
				itemp16 = 0;
    7eb4:	80 e0       	ldi	r24, 0x00	; 0
    7eb6:	90 e0       	ldi	r25, 0x00	; 0

			// Copy to unsigned register
			temp16 = (itemp16 & 0x7FFF);
			
			// Copy back to ServoOut for now
			ServoOut[i] = temp16;
    7eb8:	fb 01       	movw	r30, r22
    7eba:	ef 51       	subi	r30, 0x1F	; 31
    7ebc:	f8 4f       	sbci	r31, 0xF8	; 248
    7ebe:	91 83       	std	Z+1, r25	; 0x01
    7ec0:	80 83       	st	Z, r24
    7ec2:	4f 5f       	subi	r20, 0xFF	; 255
    7ec4:	5f 4f       	sbci	r21, 0xFF	; 255
		
		// S.Bus start byte
		sBuffer[0] = SBUS_START;

		// Convert servo data to S.Bus data size
		for (i = 0; i < MAX_OUTPUTS; i++)
    7ec6:	48 30       	cpi	r20, 0x08	; 8
    7ec8:	51 05       	cpc	r21, r1
    7eca:	09 f6       	brne	.-126    	; 0x7e4e <TransmitData+0x442>
    7ecc:	c0 eb       	ldi	r28, 0xB0	; 176
    7ece:	b1 e0       	ldi	r27, 0x01	; 1
    7ed0:	a0 e0       	ldi	r26, 0x00	; 0
    7ed2:	70 e0       	ldi	r23, 0x00	; 0
    7ed4:	60 e0       	ldi	r22, 0x00	; 0
			}
			// Extra channels in extra buffer
			else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
			{
				// Transfer set bits from 16-bit extra channel data to the sBuffer
				if (ExtChannel[chan_shift - MAX_RC_CHANNELS] & (1 << data_mask))
    7ed6:	81 e0       	ldi	r24, 0x01	; 1
    7ed8:	90 e0       	ldi	r25, 0x00	; 0
	
		sindex = 1;	// Step over flag byte
		
        for (j = 0; j < 176; j++)
		{
			if (chan_shift < MAX_RC_CHANNELS)
    7eda:	78 30       	cpi	r23, 0x08	; 8
    7edc:	38 f4       	brcc	.+14     	; 0x7eec <TransmitData+0x4e0>
			{
				// Transfer set bits from 16-bit servo data to the sBuffer
				if (ServoOut[chan_shift] & (1 << data_mask))
    7ede:	e7 2f       	mov	r30, r23
    7ee0:	f0 e0       	ldi	r31, 0x00	; 0
    7ee2:	ee 0f       	add	r30, r30
    7ee4:	ff 1f       	adc	r31, r31
    7ee6:	ef 51       	subi	r30, 0x1F	; 31
    7ee8:	f8 4f       	sbci	r31, 0xF8	; 248
    7eea:	08 c0       	rjmp	.+16     	; 0x7efc <TransmitData+0x4f0>
					// Place the RC data into buffer directly
					sBuffer[sindex] |= (1 << chan_mask);
				}
			}
			// Extra channels in extra buffer
			else if (chan_shift < (MAX_EXT_CHANNELS + MAX_RC_CHANNELS))
    7eec:	70 31       	cpi	r23, 0x10	; 16
    7eee:	00 f5       	brcc	.+64     	; 0x7f30 <TransmitData+0x524>
			{
				// Transfer set bits from 16-bit extra channel data to the sBuffer
				if (ExtChannel[chan_shift - MAX_RC_CHANNELS] & (1 << data_mask))
    7ef0:	e7 2f       	mov	r30, r23
    7ef2:	f0 e0       	ldi	r31, 0x00	; 0
    7ef4:	ee 0f       	add	r30, r30
    7ef6:	ff 1f       	adc	r31, r31
    7ef8:	e5 5a       	subi	r30, 0xA5	; 165
    7efa:	f8 4f       	sbci	r31, 0xF8	; 248
    7efc:	40 81       	ld	r20, Z
    7efe:	51 81       	ldd	r21, Z+1	; 0x01
    7f00:	9c 01       	movw	r18, r24
    7f02:	0a 2e       	mov	r0, r26
    7f04:	02 c0       	rjmp	.+4      	; 0x7f0a <TransmitData+0x4fe>
    7f06:	22 0f       	add	r18, r18
    7f08:	33 1f       	adc	r19, r19
    7f0a:	0a 94       	dec	r0
    7f0c:	e2 f7       	brpl	.-8      	; 0x7f06 <TransmitData+0x4fa>
    7f0e:	24 23       	and	r18, r20
    7f10:	35 23       	and	r19, r21
    7f12:	23 2b       	or	r18, r19
    7f14:	69 f0       	breq	.+26     	; 0x7f30 <TransmitData+0x524>
				{
					// Place the RC data into buffer directly
					sBuffer[sindex] |= (1 << chan_mask);
    7f16:	eb 2f       	mov	r30, r27
    7f18:	f0 e0       	ldi	r31, 0x00	; 0
    7f1a:	eb 5b       	subi	r30, 0xBB	; 187
    7f1c:	fa 4f       	sbci	r31, 0xFA	; 250
    7f1e:	40 81       	ld	r20, Z
    7f20:	9c 01       	movw	r18, r24
    7f22:	06 2e       	mov	r0, r22
    7f24:	01 c0       	rjmp	.+2      	; 0x7f28 <TransmitData+0x51c>
    7f26:	22 0f       	add	r18, r18
    7f28:	0a 94       	dec	r0
    7f2a:	ea f7       	brpl	.-6      	; 0x7f26 <TransmitData+0x51a>
    7f2c:	42 2b       	or	r20, r18
    7f2e:	40 83       	st	Z, r20
				}
			}

            chan_mask++;
    7f30:	6f 5f       	subi	r22, 0xFF	; 255
            data_mask++;
    7f32:	af 5f       	subi	r26, 0xFF	; 255

            // If we have done 8 bits, move to next byte in sBuffer
            if (chan_mask == 8)
    7f34:	68 30       	cpi	r22, 0x08	; 8
    7f36:	11 f4       	brne	.+4      	; 0x7f3c <TransmitData+0x530>
            {
	            chan_mask = 0;
	            sindex++;
    7f38:	bf 5f       	subi	r27, 0xFF	; 255
            data_mask++;

            // If we have done 8 bits, move to next byte in sBuffer
            if (chan_mask == 8)
            {
	            chan_mask = 0;
    7f3a:	60 e0       	ldi	r22, 0x00	; 0
	            sindex++;
            }

            // If we have reconstructed all 11 bits of one channel's data (2047)
            // increment the channel number
            if (data_mask == 11)
    7f3c:	ab 30       	cpi	r26, 0x0B	; 11
    7f3e:	11 f4       	brne	.+4      	; 0x7f44 <TransmitData+0x538>
            {
	            data_mask = 0;
	            chan_shift++;
    7f40:	7f 5f       	subi	r23, 0xFF	; 255

            // If we have reconstructed all 11 bits of one channel's data (2047)
            // increment the channel number
            if (data_mask == 11)
            {
	            data_mask = 0;
    7f42:	a0 e0       	ldi	r26, 0x00	; 0
    7f44:	c1 50       	subi	r28, 0x01	; 1
		//* 	etc.
		// Our data is 8ch x 11 bits or 88 bits but the whole space is 16ch or 176 bits (22*8)
	
		sindex = 1;	// Step over flag byte
		
        for (j = 0; j < 176; j++)
    7f46:	49 f6       	brne	.-110    	; 0x7eda <TransmitData+0x4ce>
	            chan_shift++;
            }			
		}

		// Transmit S.Bus flags if they exist	
		if (Config.RxModeIn != SBUS)
    7f48:	80 91 0b 06 	lds	r24, 0x060B
    7f4c:	81 30       	cpi	r24, 0x01	; 1
    7f4e:	11 f0       	breq	.+4      	; 0x7f54 <TransmitData+0x548>
		{
			SBUS_Flags = 0;
    7f50:	10 92 44 05 	sts	0x0544, r1
		}		

		sBuffer[23] = SBUS_Flags;	
    7f54:	80 91 44 05 	lds	r24, 0x0544
    7f58:	80 93 5c 05 	sts	0x055C, r24
		
		// Transmit S.Bus end byte
		sBuffer[24] = SBUS_END;	
    7f5c:	10 92 5d 05 	sts	0x055D, r1
    7f60:	c5 e4       	ldi	r28, 0x45	; 69
    7f62:	d5 e0       	ldi	r29, 0x05	; 5
		
		// Transmit whole S.Bus packet
		for (j = 0; j < 25; j++)
		{
			USART_Transmit(sBuffer[j]);
    7f64:	89 91       	ld	r24, Y+
    7f66:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <USART_Transmit>
		
		// Transmit S.Bus end byte
		sBuffer[24] = SBUS_END;	
		
		// Transmit whole S.Bus packet
		for (j = 0; j < 25; j++)
    7f6a:	e5 e0       	ldi	r30, 0x05	; 5
    7f6c:	ce 35       	cpi	r28, 0x5E	; 94
    7f6e:	de 07       	cpc	r29, r30
    7f70:	c9 f7       	brne	.-14     	; 0x7f64 <TransmitData+0x558>
		{
			USART_Transmit(sBuffer[j]);
		}
	}
    7f72:	df 91       	pop	r29
    7f74:	cf 91       	pop	r28
    7f76:	1f 91       	pop	r17
    7f78:	0f 91       	pop	r16
    7f7a:	ff 90       	pop	r15
    7f7c:	ef 90       	pop	r14
    7f7e:	df 90       	pop	r13
    7f80:	cf 90       	pop	r12
    7f82:	bf 90       	pop	r11
    7f84:	08 95       	ret

00007f86 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT0);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    7f86:	83 e0       	ldi	r24, 0x03	; 3
    7f88:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    7f8c:	80 91 78 00 	lds	r24, 0x0078
    7f90:	90 91 79 00 	lds	r25, 0x0079

#ifdef KK21
	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    7f94:	9c 01       	movw	r18, r24
    7f96:	36 95       	lsr	r19
    7f98:	27 95       	ror	r18
    7f9a:	ac 01       	movw	r20, r24
    7f9c:	44 0f       	add	r20, r20
    7f9e:	55 1f       	adc	r21, r21
    7fa0:	24 0f       	add	r18, r20
    7fa2:	35 1f       	adc	r19, r21
    7fa4:	ac 01       	movw	r20, r24
    7fa6:	74 e0       	ldi	r23, 0x04	; 4
    7fa8:	56 95       	lsr	r21
    7faa:	47 95       	ror	r20
    7fac:	7a 95       	dec	r23
    7fae:	e1 f7       	brne	.-8      	; 0x7fa8 <GetVbat+0x22>
    7fb0:	24 0f       	add	r18, r20
    7fb2:	35 1f       	adc	r19, r21
    7fb4:	e6 e0       	ldi	r30, 0x06	; 6
    7fb6:	96 95       	lsr	r25
    7fb8:	87 95       	ror	r24
    7fba:	ea 95       	dec	r30
    7fbc:	e1 f7       	brne	.-8      	; 0x7fb6 <GetVbat+0x30>
	// 2 + 1/2 + 1/8 + 1/128 :)
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 3) + (vBat >> 7); // Multiply by 2.633
#endif

	return vBat;
}
    7fbe:	82 0f       	add	r24, r18
    7fc0:	93 1f       	adc	r25, r19
    7fc2:	08 95       	ret

00007fc4 <__subsf3>:
    7fc4:	50 58       	subi	r21, 0x80	; 128

00007fc6 <__addsf3>:
    7fc6:	bb 27       	eor	r27, r27
    7fc8:	aa 27       	eor	r26, r26
    7fca:	0e d0       	rcall	.+28     	; 0x7fe8 <__addsf3x>
    7fcc:	75 c1       	rjmp	.+746    	; 0x82b8 <__fp_round>
    7fce:	66 d1       	rcall	.+716    	; 0x829c <__fp_pscA>
    7fd0:	30 f0       	brcs	.+12     	; 0x7fde <__addsf3+0x18>
    7fd2:	6b d1       	rcall	.+726    	; 0x82aa <__fp_pscB>
    7fd4:	20 f0       	brcs	.+8      	; 0x7fde <__addsf3+0x18>
    7fd6:	31 f4       	brne	.+12     	; 0x7fe4 <__addsf3+0x1e>
    7fd8:	9f 3f       	cpi	r25, 0xFF	; 255
    7fda:	11 f4       	brne	.+4      	; 0x7fe0 <__addsf3+0x1a>
    7fdc:	1e f4       	brtc	.+6      	; 0x7fe4 <__addsf3+0x1e>
    7fde:	5b c1       	rjmp	.+694    	; 0x8296 <__fp_nan>
    7fe0:	0e f4       	brtc	.+2      	; 0x7fe4 <__addsf3+0x1e>
    7fe2:	e0 95       	com	r30
    7fe4:	e7 fb       	bst	r30, 7
    7fe6:	51 c1       	rjmp	.+674    	; 0x828a <__fp_inf>

00007fe8 <__addsf3x>:
    7fe8:	e9 2f       	mov	r30, r25
    7fea:	77 d1       	rcall	.+750    	; 0x82da <__fp_split3>
    7fec:	80 f3       	brcs	.-32     	; 0x7fce <__addsf3+0x8>
    7fee:	ba 17       	cp	r27, r26
    7ff0:	62 07       	cpc	r22, r18
    7ff2:	73 07       	cpc	r23, r19
    7ff4:	84 07       	cpc	r24, r20
    7ff6:	95 07       	cpc	r25, r21
    7ff8:	18 f0       	brcs	.+6      	; 0x8000 <__addsf3x+0x18>
    7ffa:	71 f4       	brne	.+28     	; 0x8018 <__addsf3x+0x30>
    7ffc:	9e f5       	brtc	.+102    	; 0x8064 <__addsf3x+0x7c>
    7ffe:	8f c1       	rjmp	.+798    	; 0x831e <__fp_zero>
    8000:	0e f4       	brtc	.+2      	; 0x8004 <__addsf3x+0x1c>
    8002:	e0 95       	com	r30
    8004:	0b 2e       	mov	r0, r27
    8006:	ba 2f       	mov	r27, r26
    8008:	a0 2d       	mov	r26, r0
    800a:	0b 01       	movw	r0, r22
    800c:	b9 01       	movw	r22, r18
    800e:	90 01       	movw	r18, r0
    8010:	0c 01       	movw	r0, r24
    8012:	ca 01       	movw	r24, r20
    8014:	a0 01       	movw	r20, r0
    8016:	11 24       	eor	r1, r1
    8018:	ff 27       	eor	r31, r31
    801a:	59 1b       	sub	r21, r25
    801c:	99 f0       	breq	.+38     	; 0x8044 <__addsf3x+0x5c>
    801e:	59 3f       	cpi	r21, 0xF9	; 249
    8020:	50 f4       	brcc	.+20     	; 0x8036 <__addsf3x+0x4e>
    8022:	50 3e       	cpi	r21, 0xE0	; 224
    8024:	68 f1       	brcs	.+90     	; 0x8080 <__addsf3x+0x98>
    8026:	1a 16       	cp	r1, r26
    8028:	f0 40       	sbci	r31, 0x00	; 0
    802a:	a2 2f       	mov	r26, r18
    802c:	23 2f       	mov	r18, r19
    802e:	34 2f       	mov	r19, r20
    8030:	44 27       	eor	r20, r20
    8032:	58 5f       	subi	r21, 0xF8	; 248
    8034:	f3 cf       	rjmp	.-26     	; 0x801c <__addsf3x+0x34>
    8036:	46 95       	lsr	r20
    8038:	37 95       	ror	r19
    803a:	27 95       	ror	r18
    803c:	a7 95       	ror	r26
    803e:	f0 40       	sbci	r31, 0x00	; 0
    8040:	53 95       	inc	r21
    8042:	c9 f7       	brne	.-14     	; 0x8036 <__addsf3x+0x4e>
    8044:	7e f4       	brtc	.+30     	; 0x8064 <__addsf3x+0x7c>
    8046:	1f 16       	cp	r1, r31
    8048:	ba 0b       	sbc	r27, r26
    804a:	62 0b       	sbc	r22, r18
    804c:	73 0b       	sbc	r23, r19
    804e:	84 0b       	sbc	r24, r20
    8050:	ba f0       	brmi	.+46     	; 0x8080 <__addsf3x+0x98>
    8052:	91 50       	subi	r25, 0x01	; 1
    8054:	a1 f0       	breq	.+40     	; 0x807e <__addsf3x+0x96>
    8056:	ff 0f       	add	r31, r31
    8058:	bb 1f       	adc	r27, r27
    805a:	66 1f       	adc	r22, r22
    805c:	77 1f       	adc	r23, r23
    805e:	88 1f       	adc	r24, r24
    8060:	c2 f7       	brpl	.-16     	; 0x8052 <__addsf3x+0x6a>
    8062:	0e c0       	rjmp	.+28     	; 0x8080 <__addsf3x+0x98>
    8064:	ba 0f       	add	r27, r26
    8066:	62 1f       	adc	r22, r18
    8068:	73 1f       	adc	r23, r19
    806a:	84 1f       	adc	r24, r20
    806c:	48 f4       	brcc	.+18     	; 0x8080 <__addsf3x+0x98>
    806e:	87 95       	ror	r24
    8070:	77 95       	ror	r23
    8072:	67 95       	ror	r22
    8074:	b7 95       	ror	r27
    8076:	f7 95       	ror	r31
    8078:	9e 3f       	cpi	r25, 0xFE	; 254
    807a:	08 f0       	brcs	.+2      	; 0x807e <__addsf3x+0x96>
    807c:	b3 cf       	rjmp	.-154    	; 0x7fe4 <__addsf3+0x1e>
    807e:	93 95       	inc	r25
    8080:	88 0f       	add	r24, r24
    8082:	08 f0       	brcs	.+2      	; 0x8086 <__addsf3x+0x9e>
    8084:	99 27       	eor	r25, r25
    8086:	ee 0f       	add	r30, r30
    8088:	97 95       	ror	r25
    808a:	87 95       	ror	r24
    808c:	08 95       	ret

0000808e <__cmpsf2>:
    808e:	d9 d0       	rcall	.+434    	; 0x8242 <__fp_cmp>
    8090:	08 f4       	brcc	.+2      	; 0x8094 <__cmpsf2+0x6>
    8092:	81 e0       	ldi	r24, 0x01	; 1
    8094:	08 95       	ret

00008096 <__divsf3>:
    8096:	0c d0       	rcall	.+24     	; 0x80b0 <__divsf3x>
    8098:	0f c1       	rjmp	.+542    	; 0x82b8 <__fp_round>
    809a:	07 d1       	rcall	.+526    	; 0x82aa <__fp_pscB>
    809c:	40 f0       	brcs	.+16     	; 0x80ae <__divsf3+0x18>
    809e:	fe d0       	rcall	.+508    	; 0x829c <__fp_pscA>
    80a0:	30 f0       	brcs	.+12     	; 0x80ae <__divsf3+0x18>
    80a2:	21 f4       	brne	.+8      	; 0x80ac <__divsf3+0x16>
    80a4:	5f 3f       	cpi	r21, 0xFF	; 255
    80a6:	19 f0       	breq	.+6      	; 0x80ae <__divsf3+0x18>
    80a8:	f0 c0       	rjmp	.+480    	; 0x828a <__fp_inf>
    80aa:	51 11       	cpse	r21, r1
    80ac:	39 c1       	rjmp	.+626    	; 0x8320 <__fp_szero>
    80ae:	f3 c0       	rjmp	.+486    	; 0x8296 <__fp_nan>

000080b0 <__divsf3x>:
    80b0:	14 d1       	rcall	.+552    	; 0x82da <__fp_split3>
    80b2:	98 f3       	brcs	.-26     	; 0x809a <__divsf3+0x4>

000080b4 <__divsf3_pse>:
    80b4:	99 23       	and	r25, r25
    80b6:	c9 f3       	breq	.-14     	; 0x80aa <__divsf3+0x14>
    80b8:	55 23       	and	r21, r21
    80ba:	b1 f3       	breq	.-20     	; 0x80a8 <__divsf3+0x12>
    80bc:	95 1b       	sub	r25, r21
    80be:	55 0b       	sbc	r21, r21
    80c0:	bb 27       	eor	r27, r27
    80c2:	aa 27       	eor	r26, r26
    80c4:	62 17       	cp	r22, r18
    80c6:	73 07       	cpc	r23, r19
    80c8:	84 07       	cpc	r24, r20
    80ca:	38 f0       	brcs	.+14     	; 0x80da <__divsf3_pse+0x26>
    80cc:	9f 5f       	subi	r25, 0xFF	; 255
    80ce:	5f 4f       	sbci	r21, 0xFF	; 255
    80d0:	22 0f       	add	r18, r18
    80d2:	33 1f       	adc	r19, r19
    80d4:	44 1f       	adc	r20, r20
    80d6:	aa 1f       	adc	r26, r26
    80d8:	a9 f3       	breq	.-22     	; 0x80c4 <__divsf3_pse+0x10>
    80da:	33 d0       	rcall	.+102    	; 0x8142 <__divsf3_pse+0x8e>
    80dc:	0e 2e       	mov	r0, r30
    80de:	3a f0       	brmi	.+14     	; 0x80ee <__divsf3_pse+0x3a>
    80e0:	e0 e8       	ldi	r30, 0x80	; 128
    80e2:	30 d0       	rcall	.+96     	; 0x8144 <__divsf3_pse+0x90>
    80e4:	91 50       	subi	r25, 0x01	; 1
    80e6:	50 40       	sbci	r21, 0x00	; 0
    80e8:	e6 95       	lsr	r30
    80ea:	00 1c       	adc	r0, r0
    80ec:	ca f7       	brpl	.-14     	; 0x80e0 <__divsf3_pse+0x2c>
    80ee:	29 d0       	rcall	.+82     	; 0x8142 <__divsf3_pse+0x8e>
    80f0:	fe 2f       	mov	r31, r30
    80f2:	27 d0       	rcall	.+78     	; 0x8142 <__divsf3_pse+0x8e>
    80f4:	66 0f       	add	r22, r22
    80f6:	77 1f       	adc	r23, r23
    80f8:	88 1f       	adc	r24, r24
    80fa:	bb 1f       	adc	r27, r27
    80fc:	26 17       	cp	r18, r22
    80fe:	37 07       	cpc	r19, r23
    8100:	48 07       	cpc	r20, r24
    8102:	ab 07       	cpc	r26, r27
    8104:	b0 e8       	ldi	r27, 0x80	; 128
    8106:	09 f0       	breq	.+2      	; 0x810a <__divsf3_pse+0x56>
    8108:	bb 0b       	sbc	r27, r27
    810a:	80 2d       	mov	r24, r0
    810c:	bf 01       	movw	r22, r30
    810e:	ff 27       	eor	r31, r31
    8110:	93 58       	subi	r25, 0x83	; 131
    8112:	5f 4f       	sbci	r21, 0xFF	; 255
    8114:	2a f0       	brmi	.+10     	; 0x8120 <__divsf3_pse+0x6c>
    8116:	9e 3f       	cpi	r25, 0xFE	; 254
    8118:	51 05       	cpc	r21, r1
    811a:	68 f0       	brcs	.+26     	; 0x8136 <__divsf3_pse+0x82>
    811c:	b6 c0       	rjmp	.+364    	; 0x828a <__fp_inf>
    811e:	00 c1       	rjmp	.+512    	; 0x8320 <__fp_szero>
    8120:	5f 3f       	cpi	r21, 0xFF	; 255
    8122:	ec f3       	brlt	.-6      	; 0x811e <__divsf3_pse+0x6a>
    8124:	98 3e       	cpi	r25, 0xE8	; 232
    8126:	dc f3       	brlt	.-10     	; 0x811e <__divsf3_pse+0x6a>
    8128:	86 95       	lsr	r24
    812a:	77 95       	ror	r23
    812c:	67 95       	ror	r22
    812e:	b7 95       	ror	r27
    8130:	f7 95       	ror	r31
    8132:	9f 5f       	subi	r25, 0xFF	; 255
    8134:	c9 f7       	brne	.-14     	; 0x8128 <__divsf3_pse+0x74>
    8136:	88 0f       	add	r24, r24
    8138:	91 1d       	adc	r25, r1
    813a:	96 95       	lsr	r25
    813c:	87 95       	ror	r24
    813e:	97 f9       	bld	r25, 7
    8140:	08 95       	ret
    8142:	e1 e0       	ldi	r30, 0x01	; 1
    8144:	66 0f       	add	r22, r22
    8146:	77 1f       	adc	r23, r23
    8148:	88 1f       	adc	r24, r24
    814a:	bb 1f       	adc	r27, r27
    814c:	62 17       	cp	r22, r18
    814e:	73 07       	cpc	r23, r19
    8150:	84 07       	cpc	r24, r20
    8152:	ba 07       	cpc	r27, r26
    8154:	20 f0       	brcs	.+8      	; 0x815e <__divsf3_pse+0xaa>
    8156:	62 1b       	sub	r22, r18
    8158:	73 0b       	sbc	r23, r19
    815a:	84 0b       	sbc	r24, r20
    815c:	ba 0b       	sbc	r27, r26
    815e:	ee 1f       	adc	r30, r30
    8160:	88 f7       	brcc	.-30     	; 0x8144 <__divsf3_pse+0x90>
    8162:	e0 95       	com	r30
    8164:	08 95       	ret

00008166 <__fixsfsi>:
    8166:	04 d0       	rcall	.+8      	; 0x8170 <__fixunssfsi>
    8168:	68 94       	set
    816a:	b1 11       	cpse	r27, r1
    816c:	d9 c0       	rjmp	.+434    	; 0x8320 <__fp_szero>
    816e:	08 95       	ret

00008170 <__fixunssfsi>:
    8170:	bc d0       	rcall	.+376    	; 0x82ea <__fp_splitA>
    8172:	88 f0       	brcs	.+34     	; 0x8196 <__fixunssfsi+0x26>
    8174:	9f 57       	subi	r25, 0x7F	; 127
    8176:	90 f0       	brcs	.+36     	; 0x819c <__fixunssfsi+0x2c>
    8178:	b9 2f       	mov	r27, r25
    817a:	99 27       	eor	r25, r25
    817c:	b7 51       	subi	r27, 0x17	; 23
    817e:	a0 f0       	brcs	.+40     	; 0x81a8 <__fixunssfsi+0x38>
    8180:	d1 f0       	breq	.+52     	; 0x81b6 <__fixunssfsi+0x46>
    8182:	66 0f       	add	r22, r22
    8184:	77 1f       	adc	r23, r23
    8186:	88 1f       	adc	r24, r24
    8188:	99 1f       	adc	r25, r25
    818a:	1a f0       	brmi	.+6      	; 0x8192 <__fixunssfsi+0x22>
    818c:	ba 95       	dec	r27
    818e:	c9 f7       	brne	.-14     	; 0x8182 <__fixunssfsi+0x12>
    8190:	12 c0       	rjmp	.+36     	; 0x81b6 <__fixunssfsi+0x46>
    8192:	b1 30       	cpi	r27, 0x01	; 1
    8194:	81 f0       	breq	.+32     	; 0x81b6 <__fixunssfsi+0x46>
    8196:	c3 d0       	rcall	.+390    	; 0x831e <__fp_zero>
    8198:	b1 e0       	ldi	r27, 0x01	; 1
    819a:	08 95       	ret
    819c:	c0 c0       	rjmp	.+384    	; 0x831e <__fp_zero>
    819e:	67 2f       	mov	r22, r23
    81a0:	78 2f       	mov	r23, r24
    81a2:	88 27       	eor	r24, r24
    81a4:	b8 5f       	subi	r27, 0xF8	; 248
    81a6:	39 f0       	breq	.+14     	; 0x81b6 <__fixunssfsi+0x46>
    81a8:	b9 3f       	cpi	r27, 0xF9	; 249
    81aa:	cc f3       	brlt	.-14     	; 0x819e <__fixunssfsi+0x2e>
    81ac:	86 95       	lsr	r24
    81ae:	77 95       	ror	r23
    81b0:	67 95       	ror	r22
    81b2:	b3 95       	inc	r27
    81b4:	d9 f7       	brne	.-10     	; 0x81ac <__fixunssfsi+0x3c>
    81b6:	3e f4       	brtc	.+14     	; 0x81c6 <__fixunssfsi+0x56>
    81b8:	90 95       	com	r25
    81ba:	80 95       	com	r24
    81bc:	70 95       	com	r23
    81be:	61 95       	neg	r22
    81c0:	7f 4f       	sbci	r23, 0xFF	; 255
    81c2:	8f 4f       	sbci	r24, 0xFF	; 255
    81c4:	9f 4f       	sbci	r25, 0xFF	; 255
    81c6:	08 95       	ret

000081c8 <__floatunsisf>:
    81c8:	e8 94       	clt
    81ca:	09 c0       	rjmp	.+18     	; 0x81de <__floatsisf+0x12>

000081cc <__floatsisf>:
    81cc:	97 fb       	bst	r25, 7
    81ce:	3e f4       	brtc	.+14     	; 0x81de <__floatsisf+0x12>
    81d0:	90 95       	com	r25
    81d2:	80 95       	com	r24
    81d4:	70 95       	com	r23
    81d6:	61 95       	neg	r22
    81d8:	7f 4f       	sbci	r23, 0xFF	; 255
    81da:	8f 4f       	sbci	r24, 0xFF	; 255
    81dc:	9f 4f       	sbci	r25, 0xFF	; 255
    81de:	99 23       	and	r25, r25
    81e0:	a9 f0       	breq	.+42     	; 0x820c <__floatsisf+0x40>
    81e2:	f9 2f       	mov	r31, r25
    81e4:	96 e9       	ldi	r25, 0x96	; 150
    81e6:	bb 27       	eor	r27, r27
    81e8:	93 95       	inc	r25
    81ea:	f6 95       	lsr	r31
    81ec:	87 95       	ror	r24
    81ee:	77 95       	ror	r23
    81f0:	67 95       	ror	r22
    81f2:	b7 95       	ror	r27
    81f4:	f1 11       	cpse	r31, r1
    81f6:	f8 cf       	rjmp	.-16     	; 0x81e8 <__floatsisf+0x1c>
    81f8:	fa f4       	brpl	.+62     	; 0x8238 <__floatsisf+0x6c>
    81fa:	bb 0f       	add	r27, r27
    81fc:	11 f4       	brne	.+4      	; 0x8202 <__floatsisf+0x36>
    81fe:	60 ff       	sbrs	r22, 0
    8200:	1b c0       	rjmp	.+54     	; 0x8238 <__floatsisf+0x6c>
    8202:	6f 5f       	subi	r22, 0xFF	; 255
    8204:	7f 4f       	sbci	r23, 0xFF	; 255
    8206:	8f 4f       	sbci	r24, 0xFF	; 255
    8208:	9f 4f       	sbci	r25, 0xFF	; 255
    820a:	16 c0       	rjmp	.+44     	; 0x8238 <__floatsisf+0x6c>
    820c:	88 23       	and	r24, r24
    820e:	11 f0       	breq	.+4      	; 0x8214 <__floatsisf+0x48>
    8210:	96 e9       	ldi	r25, 0x96	; 150
    8212:	11 c0       	rjmp	.+34     	; 0x8236 <__floatsisf+0x6a>
    8214:	77 23       	and	r23, r23
    8216:	21 f0       	breq	.+8      	; 0x8220 <__floatsisf+0x54>
    8218:	9e e8       	ldi	r25, 0x8E	; 142
    821a:	87 2f       	mov	r24, r23
    821c:	76 2f       	mov	r23, r22
    821e:	05 c0       	rjmp	.+10     	; 0x822a <__floatsisf+0x5e>
    8220:	66 23       	and	r22, r22
    8222:	71 f0       	breq	.+28     	; 0x8240 <__floatsisf+0x74>
    8224:	96 e8       	ldi	r25, 0x86	; 134
    8226:	86 2f       	mov	r24, r22
    8228:	70 e0       	ldi	r23, 0x00	; 0
    822a:	60 e0       	ldi	r22, 0x00	; 0
    822c:	2a f0       	brmi	.+10     	; 0x8238 <__floatsisf+0x6c>
    822e:	9a 95       	dec	r25
    8230:	66 0f       	add	r22, r22
    8232:	77 1f       	adc	r23, r23
    8234:	88 1f       	adc	r24, r24
    8236:	da f7       	brpl	.-10     	; 0x822e <__floatsisf+0x62>
    8238:	88 0f       	add	r24, r24
    823a:	96 95       	lsr	r25
    823c:	87 95       	ror	r24
    823e:	97 f9       	bld	r25, 7
    8240:	08 95       	ret

00008242 <__fp_cmp>:
    8242:	99 0f       	add	r25, r25
    8244:	00 08       	sbc	r0, r0
    8246:	55 0f       	add	r21, r21
    8248:	aa 0b       	sbc	r26, r26
    824a:	e0 e8       	ldi	r30, 0x80	; 128
    824c:	fe ef       	ldi	r31, 0xFE	; 254
    824e:	16 16       	cp	r1, r22
    8250:	17 06       	cpc	r1, r23
    8252:	e8 07       	cpc	r30, r24
    8254:	f9 07       	cpc	r31, r25
    8256:	c0 f0       	brcs	.+48     	; 0x8288 <__fp_cmp+0x46>
    8258:	12 16       	cp	r1, r18
    825a:	13 06       	cpc	r1, r19
    825c:	e4 07       	cpc	r30, r20
    825e:	f5 07       	cpc	r31, r21
    8260:	98 f0       	brcs	.+38     	; 0x8288 <__fp_cmp+0x46>
    8262:	62 1b       	sub	r22, r18
    8264:	73 0b       	sbc	r23, r19
    8266:	84 0b       	sbc	r24, r20
    8268:	95 0b       	sbc	r25, r21
    826a:	39 f4       	brne	.+14     	; 0x827a <__fp_cmp+0x38>
    826c:	0a 26       	eor	r0, r26
    826e:	61 f0       	breq	.+24     	; 0x8288 <__fp_cmp+0x46>
    8270:	23 2b       	or	r18, r19
    8272:	24 2b       	or	r18, r20
    8274:	25 2b       	or	r18, r21
    8276:	21 f4       	brne	.+8      	; 0x8280 <__fp_cmp+0x3e>
    8278:	08 95       	ret
    827a:	0a 26       	eor	r0, r26
    827c:	09 f4       	brne	.+2      	; 0x8280 <__fp_cmp+0x3e>
    827e:	a1 40       	sbci	r26, 0x01	; 1
    8280:	a6 95       	lsr	r26
    8282:	8f ef       	ldi	r24, 0xFF	; 255
    8284:	81 1d       	adc	r24, r1
    8286:	81 1d       	adc	r24, r1
    8288:	08 95       	ret

0000828a <__fp_inf>:
    828a:	97 f9       	bld	r25, 7
    828c:	9f 67       	ori	r25, 0x7F	; 127
    828e:	80 e8       	ldi	r24, 0x80	; 128
    8290:	70 e0       	ldi	r23, 0x00	; 0
    8292:	60 e0       	ldi	r22, 0x00	; 0
    8294:	08 95       	ret

00008296 <__fp_nan>:
    8296:	9f ef       	ldi	r25, 0xFF	; 255
    8298:	80 ec       	ldi	r24, 0xC0	; 192
    829a:	08 95       	ret

0000829c <__fp_pscA>:
    829c:	00 24       	eor	r0, r0
    829e:	0a 94       	dec	r0
    82a0:	16 16       	cp	r1, r22
    82a2:	17 06       	cpc	r1, r23
    82a4:	18 06       	cpc	r1, r24
    82a6:	09 06       	cpc	r0, r25
    82a8:	08 95       	ret

000082aa <__fp_pscB>:
    82aa:	00 24       	eor	r0, r0
    82ac:	0a 94       	dec	r0
    82ae:	12 16       	cp	r1, r18
    82b0:	13 06       	cpc	r1, r19
    82b2:	14 06       	cpc	r1, r20
    82b4:	05 06       	cpc	r0, r21
    82b6:	08 95       	ret

000082b8 <__fp_round>:
    82b8:	09 2e       	mov	r0, r25
    82ba:	03 94       	inc	r0
    82bc:	00 0c       	add	r0, r0
    82be:	11 f4       	brne	.+4      	; 0x82c4 <__fp_round+0xc>
    82c0:	88 23       	and	r24, r24
    82c2:	52 f0       	brmi	.+20     	; 0x82d8 <__fp_round+0x20>
    82c4:	bb 0f       	add	r27, r27
    82c6:	40 f4       	brcc	.+16     	; 0x82d8 <__fp_round+0x20>
    82c8:	bf 2b       	or	r27, r31
    82ca:	11 f4       	brne	.+4      	; 0x82d0 <__fp_round+0x18>
    82cc:	60 ff       	sbrs	r22, 0
    82ce:	04 c0       	rjmp	.+8      	; 0x82d8 <__fp_round+0x20>
    82d0:	6f 5f       	subi	r22, 0xFF	; 255
    82d2:	7f 4f       	sbci	r23, 0xFF	; 255
    82d4:	8f 4f       	sbci	r24, 0xFF	; 255
    82d6:	9f 4f       	sbci	r25, 0xFF	; 255
    82d8:	08 95       	ret

000082da <__fp_split3>:
    82da:	57 fd       	sbrc	r21, 7
    82dc:	90 58       	subi	r25, 0x80	; 128
    82de:	44 0f       	add	r20, r20
    82e0:	55 1f       	adc	r21, r21
    82e2:	59 f0       	breq	.+22     	; 0x82fa <__fp_splitA+0x10>
    82e4:	5f 3f       	cpi	r21, 0xFF	; 255
    82e6:	71 f0       	breq	.+28     	; 0x8304 <__fp_splitA+0x1a>
    82e8:	47 95       	ror	r20

000082ea <__fp_splitA>:
    82ea:	88 0f       	add	r24, r24
    82ec:	97 fb       	bst	r25, 7
    82ee:	99 1f       	adc	r25, r25
    82f0:	61 f0       	breq	.+24     	; 0x830a <__fp_splitA+0x20>
    82f2:	9f 3f       	cpi	r25, 0xFF	; 255
    82f4:	79 f0       	breq	.+30     	; 0x8314 <__fp_splitA+0x2a>
    82f6:	87 95       	ror	r24
    82f8:	08 95       	ret
    82fa:	12 16       	cp	r1, r18
    82fc:	13 06       	cpc	r1, r19
    82fe:	14 06       	cpc	r1, r20
    8300:	55 1f       	adc	r21, r21
    8302:	f2 cf       	rjmp	.-28     	; 0x82e8 <__fp_split3+0xe>
    8304:	46 95       	lsr	r20
    8306:	f1 df       	rcall	.-30     	; 0x82ea <__fp_splitA>
    8308:	08 c0       	rjmp	.+16     	; 0x831a <__fp_splitA+0x30>
    830a:	16 16       	cp	r1, r22
    830c:	17 06       	cpc	r1, r23
    830e:	18 06       	cpc	r1, r24
    8310:	99 1f       	adc	r25, r25
    8312:	f1 cf       	rjmp	.-30     	; 0x82f6 <__fp_splitA+0xc>
    8314:	86 95       	lsr	r24
    8316:	71 05       	cpc	r23, r1
    8318:	61 05       	cpc	r22, r1
    831a:	08 94       	sec
    831c:	08 95       	ret

0000831e <__fp_zero>:
    831e:	e8 94       	clt

00008320 <__fp_szero>:
    8320:	bb 27       	eor	r27, r27
    8322:	66 27       	eor	r22, r22
    8324:	77 27       	eor	r23, r23
    8326:	cb 01       	movw	r24, r22
    8328:	97 f9       	bld	r25, 7
    832a:	08 95       	ret

0000832c <__gesf2>:
    832c:	8a df       	rcall	.-236    	; 0x8242 <__fp_cmp>
    832e:	08 f4       	brcc	.+2      	; 0x8332 <__gesf2+0x6>
    8330:	8f ef       	ldi	r24, 0xFF	; 255
    8332:	08 95       	ret

00008334 <__mulsf3>:
    8334:	0b d0       	rcall	.+22     	; 0x834c <__mulsf3x>
    8336:	c0 cf       	rjmp	.-128    	; 0x82b8 <__fp_round>
    8338:	b1 df       	rcall	.-158    	; 0x829c <__fp_pscA>
    833a:	28 f0       	brcs	.+10     	; 0x8346 <__mulsf3+0x12>
    833c:	b6 df       	rcall	.-148    	; 0x82aa <__fp_pscB>
    833e:	18 f0       	brcs	.+6      	; 0x8346 <__mulsf3+0x12>
    8340:	95 23       	and	r25, r21
    8342:	09 f0       	breq	.+2      	; 0x8346 <__mulsf3+0x12>
    8344:	a2 cf       	rjmp	.-188    	; 0x828a <__fp_inf>
    8346:	a7 cf       	rjmp	.-178    	; 0x8296 <__fp_nan>
    8348:	11 24       	eor	r1, r1
    834a:	ea cf       	rjmp	.-44     	; 0x8320 <__fp_szero>

0000834c <__mulsf3x>:
    834c:	c6 df       	rcall	.-116    	; 0x82da <__fp_split3>
    834e:	a0 f3       	brcs	.-24     	; 0x8338 <__mulsf3+0x4>

00008350 <__mulsf3_pse>:
    8350:	95 9f       	mul	r25, r21
    8352:	d1 f3       	breq	.-12     	; 0x8348 <__mulsf3+0x14>
    8354:	95 0f       	add	r25, r21
    8356:	50 e0       	ldi	r21, 0x00	; 0
    8358:	55 1f       	adc	r21, r21
    835a:	62 9f       	mul	r22, r18
    835c:	f0 01       	movw	r30, r0
    835e:	72 9f       	mul	r23, r18
    8360:	bb 27       	eor	r27, r27
    8362:	f0 0d       	add	r31, r0
    8364:	b1 1d       	adc	r27, r1
    8366:	63 9f       	mul	r22, r19
    8368:	aa 27       	eor	r26, r26
    836a:	f0 0d       	add	r31, r0
    836c:	b1 1d       	adc	r27, r1
    836e:	aa 1f       	adc	r26, r26
    8370:	64 9f       	mul	r22, r20
    8372:	66 27       	eor	r22, r22
    8374:	b0 0d       	add	r27, r0
    8376:	a1 1d       	adc	r26, r1
    8378:	66 1f       	adc	r22, r22
    837a:	82 9f       	mul	r24, r18
    837c:	22 27       	eor	r18, r18
    837e:	b0 0d       	add	r27, r0
    8380:	a1 1d       	adc	r26, r1
    8382:	62 1f       	adc	r22, r18
    8384:	73 9f       	mul	r23, r19
    8386:	b0 0d       	add	r27, r0
    8388:	a1 1d       	adc	r26, r1
    838a:	62 1f       	adc	r22, r18
    838c:	83 9f       	mul	r24, r19
    838e:	a0 0d       	add	r26, r0
    8390:	61 1d       	adc	r22, r1
    8392:	22 1f       	adc	r18, r18
    8394:	74 9f       	mul	r23, r20
    8396:	33 27       	eor	r19, r19
    8398:	a0 0d       	add	r26, r0
    839a:	61 1d       	adc	r22, r1
    839c:	23 1f       	adc	r18, r19
    839e:	84 9f       	mul	r24, r20
    83a0:	60 0d       	add	r22, r0
    83a2:	21 1d       	adc	r18, r1
    83a4:	82 2f       	mov	r24, r18
    83a6:	76 2f       	mov	r23, r22
    83a8:	6a 2f       	mov	r22, r26
    83aa:	11 24       	eor	r1, r1
    83ac:	9f 57       	subi	r25, 0x7F	; 127
    83ae:	50 40       	sbci	r21, 0x00	; 0
    83b0:	8a f0       	brmi	.+34     	; 0x83d4 <__mulsf3_pse+0x84>
    83b2:	e1 f0       	breq	.+56     	; 0x83ec <__mulsf3_pse+0x9c>
    83b4:	88 23       	and	r24, r24
    83b6:	4a f0       	brmi	.+18     	; 0x83ca <__mulsf3_pse+0x7a>
    83b8:	ee 0f       	add	r30, r30
    83ba:	ff 1f       	adc	r31, r31
    83bc:	bb 1f       	adc	r27, r27
    83be:	66 1f       	adc	r22, r22
    83c0:	77 1f       	adc	r23, r23
    83c2:	88 1f       	adc	r24, r24
    83c4:	91 50       	subi	r25, 0x01	; 1
    83c6:	50 40       	sbci	r21, 0x00	; 0
    83c8:	a9 f7       	brne	.-22     	; 0x83b4 <__mulsf3_pse+0x64>
    83ca:	9e 3f       	cpi	r25, 0xFE	; 254
    83cc:	51 05       	cpc	r21, r1
    83ce:	70 f0       	brcs	.+28     	; 0x83ec <__mulsf3_pse+0x9c>
    83d0:	5c cf       	rjmp	.-328    	; 0x828a <__fp_inf>
    83d2:	a6 cf       	rjmp	.-180    	; 0x8320 <__fp_szero>
    83d4:	5f 3f       	cpi	r21, 0xFF	; 255
    83d6:	ec f3       	brlt	.-6      	; 0x83d2 <__mulsf3_pse+0x82>
    83d8:	98 3e       	cpi	r25, 0xE8	; 232
    83da:	dc f3       	brlt	.-10     	; 0x83d2 <__mulsf3_pse+0x82>
    83dc:	86 95       	lsr	r24
    83de:	77 95       	ror	r23
    83e0:	67 95       	ror	r22
    83e2:	b7 95       	ror	r27
    83e4:	f7 95       	ror	r31
    83e6:	e7 95       	ror	r30
    83e8:	9f 5f       	subi	r25, 0xFF	; 255
    83ea:	c1 f7       	brne	.-16     	; 0x83dc <__mulsf3_pse+0x8c>
    83ec:	fe 2b       	or	r31, r30
    83ee:	88 0f       	add	r24, r24
    83f0:	91 1d       	adc	r25, r1
    83f2:	96 95       	lsr	r25
    83f4:	87 95       	ror	r24
    83f6:	97 f9       	bld	r25, 7
    83f8:	08 95       	ret

000083fa <__udivmodhi4>:
    83fa:	aa 1b       	sub	r26, r26
    83fc:	bb 1b       	sub	r27, r27
    83fe:	51 e1       	ldi	r21, 0x11	; 17
    8400:	07 c0       	rjmp	.+14     	; 0x8410 <__udivmodhi4_ep>

00008402 <__udivmodhi4_loop>:
    8402:	aa 1f       	adc	r26, r26
    8404:	bb 1f       	adc	r27, r27
    8406:	a6 17       	cp	r26, r22
    8408:	b7 07       	cpc	r27, r23
    840a:	10 f0       	brcs	.+4      	; 0x8410 <__udivmodhi4_ep>
    840c:	a6 1b       	sub	r26, r22
    840e:	b7 0b       	sbc	r27, r23

00008410 <__udivmodhi4_ep>:
    8410:	88 1f       	adc	r24, r24
    8412:	99 1f       	adc	r25, r25
    8414:	5a 95       	dec	r21
    8416:	a9 f7       	brne	.-22     	; 0x8402 <__udivmodhi4_loop>
    8418:	80 95       	com	r24
    841a:	90 95       	com	r25
    841c:	bc 01       	movw	r22, r24
    841e:	cd 01       	movw	r24, r26
    8420:	08 95       	ret

00008422 <__divmodhi4>:
    8422:	97 fb       	bst	r25, 7
    8424:	07 2e       	mov	r0, r23
    8426:	16 f4       	brtc	.+4      	; 0x842c <__divmodhi4+0xa>
    8428:	00 94       	com	r0
    842a:	07 d0       	rcall	.+14     	; 0x843a <__divmodhi4_neg1>
    842c:	77 fd       	sbrc	r23, 7
    842e:	09 d0       	rcall	.+18     	; 0x8442 <__divmodhi4_neg2>
    8430:	0e 94 fd 41 	call	0x83fa	; 0x83fa <__udivmodhi4>
    8434:	07 fc       	sbrc	r0, 7
    8436:	05 d0       	rcall	.+10     	; 0x8442 <__divmodhi4_neg2>
    8438:	3e f4       	brtc	.+14     	; 0x8448 <__divmodhi4_exit>

0000843a <__divmodhi4_neg1>:
    843a:	90 95       	com	r25
    843c:	81 95       	neg	r24
    843e:	9f 4f       	sbci	r25, 0xFF	; 255
    8440:	08 95       	ret

00008442 <__divmodhi4_neg2>:
    8442:	70 95       	com	r23
    8444:	61 95       	neg	r22
    8446:	7f 4f       	sbci	r23, 0xFF	; 255

00008448 <__divmodhi4_exit>:
    8448:	08 95       	ret

0000844a <__divmodsi4>:
    844a:	05 2e       	mov	r0, r21
    844c:	97 fb       	bst	r25, 7
    844e:	1e f4       	brtc	.+6      	; 0x8456 <__divmodsi4+0xc>
    8450:	00 94       	com	r0
    8452:	0e 94 3c 42 	call	0x8478	; 0x8478 <__negsi2>
    8456:	57 fd       	sbrc	r21, 7
    8458:	07 d0       	rcall	.+14     	; 0x8468 <__divmodsi4_neg2>
    845a:	0e 94 7b 42 	call	0x84f6	; 0x84f6 <__udivmodsi4>
    845e:	07 fc       	sbrc	r0, 7
    8460:	03 d0       	rcall	.+6      	; 0x8468 <__divmodsi4_neg2>
    8462:	4e f4       	brtc	.+18     	; 0x8476 <__divmodsi4_exit>
    8464:	0c 94 3c 42 	jmp	0x8478	; 0x8478 <__negsi2>

00008468 <__divmodsi4_neg2>:
    8468:	50 95       	com	r21
    846a:	40 95       	com	r20
    846c:	30 95       	com	r19
    846e:	21 95       	neg	r18
    8470:	3f 4f       	sbci	r19, 0xFF	; 255
    8472:	4f 4f       	sbci	r20, 0xFF	; 255
    8474:	5f 4f       	sbci	r21, 0xFF	; 255

00008476 <__divmodsi4_exit>:
    8476:	08 95       	ret

00008478 <__negsi2>:
    8478:	90 95       	com	r25
    847a:	80 95       	com	r24
    847c:	70 95       	com	r23
    847e:	61 95       	neg	r22
    8480:	7f 4f       	sbci	r23, 0xFF	; 255
    8482:	8f 4f       	sbci	r24, 0xFF	; 255
    8484:	9f 4f       	sbci	r25, 0xFF	; 255
    8486:	08 95       	ret

00008488 <__tablejump2__>:
    8488:	ee 0f       	add	r30, r30
    848a:	ff 1f       	adc	r31, r31

0000848c <__tablejump__>:
    848c:	05 90       	lpm	r0, Z+
    848e:	f4 91       	lpm	r31, Z
    8490:	e0 2d       	mov	r30, r0
    8492:	09 94       	ijmp

00008494 <__mulhisi3>:
    8494:	0e 94 52 42 	call	0x84a4	; 0x84a4 <__umulhisi3>
    8498:	33 23       	and	r19, r19
    849a:	12 f4       	brpl	.+4      	; 0x84a0 <__mulhisi3+0xc>
    849c:	8a 1b       	sub	r24, r26
    849e:	9b 0b       	sbc	r25, r27
    84a0:	0c 94 63 42 	jmp	0x84c6	; 0x84c6 <__usmulhisi3_tail>

000084a4 <__umulhisi3>:
    84a4:	a2 9f       	mul	r26, r18
    84a6:	b0 01       	movw	r22, r0
    84a8:	b3 9f       	mul	r27, r19
    84aa:	c0 01       	movw	r24, r0
    84ac:	a3 9f       	mul	r26, r19
    84ae:	70 0d       	add	r23, r0
    84b0:	81 1d       	adc	r24, r1
    84b2:	11 24       	eor	r1, r1
    84b4:	91 1d       	adc	r25, r1
    84b6:	b2 9f       	mul	r27, r18
    84b8:	70 0d       	add	r23, r0
    84ba:	81 1d       	adc	r24, r1
    84bc:	11 24       	eor	r1, r1
    84be:	91 1d       	adc	r25, r1
    84c0:	08 95       	ret

000084c2 <__usmulhisi3>:
    84c2:	0e 94 52 42 	call	0x84a4	; 0x84a4 <__umulhisi3>

000084c6 <__usmulhisi3_tail>:
    84c6:	b7 ff       	sbrs	r27, 7
    84c8:	08 95       	ret
    84ca:	82 1b       	sub	r24, r18
    84cc:	93 0b       	sbc	r25, r19
    84ce:	08 95       	ret

000084d0 <__muluhisi3>:
    84d0:	0e 94 52 42 	call	0x84a4	; 0x84a4 <__umulhisi3>
    84d4:	a5 9f       	mul	r26, r21
    84d6:	90 0d       	add	r25, r0
    84d8:	b4 9f       	mul	r27, r20
    84da:	90 0d       	add	r25, r0
    84dc:	a4 9f       	mul	r26, r20
    84de:	80 0d       	add	r24, r0
    84e0:	91 1d       	adc	r25, r1
    84e2:	11 24       	eor	r1, r1
    84e4:	08 95       	ret

000084e6 <__mulshisi3>:
    84e6:	b7 ff       	sbrs	r27, 7
    84e8:	0c 94 68 42 	jmp	0x84d0	; 0x84d0 <__muluhisi3>

000084ec <__mulohisi3>:
    84ec:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__muluhisi3>
    84f0:	82 1b       	sub	r24, r18
    84f2:	93 0b       	sbc	r25, r19
    84f4:	08 95       	ret

000084f6 <__udivmodsi4>:
    84f6:	a1 e2       	ldi	r26, 0x21	; 33
    84f8:	1a 2e       	mov	r1, r26
    84fa:	aa 1b       	sub	r26, r26
    84fc:	bb 1b       	sub	r27, r27
    84fe:	fd 01       	movw	r30, r26
    8500:	0d c0       	rjmp	.+26     	; 0x851c <__udivmodsi4_ep>

00008502 <__udivmodsi4_loop>:
    8502:	aa 1f       	adc	r26, r26
    8504:	bb 1f       	adc	r27, r27
    8506:	ee 1f       	adc	r30, r30
    8508:	ff 1f       	adc	r31, r31
    850a:	a2 17       	cp	r26, r18
    850c:	b3 07       	cpc	r27, r19
    850e:	e4 07       	cpc	r30, r20
    8510:	f5 07       	cpc	r31, r21
    8512:	20 f0       	brcs	.+8      	; 0x851c <__udivmodsi4_ep>
    8514:	a2 1b       	sub	r26, r18
    8516:	b3 0b       	sbc	r27, r19
    8518:	e4 0b       	sbc	r30, r20
    851a:	f5 0b       	sbc	r31, r21

0000851c <__udivmodsi4_ep>:
    851c:	66 1f       	adc	r22, r22
    851e:	77 1f       	adc	r23, r23
    8520:	88 1f       	adc	r24, r24
    8522:	99 1f       	adc	r25, r25
    8524:	1a 94       	dec	r1
    8526:	69 f7       	brne	.-38     	; 0x8502 <__udivmodsi4_loop>
    8528:	60 95       	com	r22
    852a:	70 95       	com	r23
    852c:	80 95       	com	r24
    852e:	90 95       	com	r25
    8530:	9b 01       	movw	r18, r22
    8532:	ac 01       	movw	r20, r24
    8534:	bd 01       	movw	r22, r26
    8536:	cf 01       	movw	r24, r30
    8538:	08 95       	ret

0000853a <memcpy_P>:
    853a:	fb 01       	movw	r30, r22
    853c:	dc 01       	movw	r26, r24
    853e:	02 c0       	rjmp	.+4      	; 0x8544 <memcpy_P+0xa>
    8540:	05 90       	lpm	r0, Z+
    8542:	0d 92       	st	X+, r0
    8544:	41 50       	subi	r20, 0x01	; 1
    8546:	50 40       	sbci	r21, 0x00	; 0
    8548:	d8 f7       	brcc	.-10     	; 0x8540 <memcpy_P+0x6>
    854a:	08 95       	ret

0000854c <__itoa_ncheck>:
    854c:	bb 27       	eor	r27, r27
    854e:	4a 30       	cpi	r20, 0x0A	; 10
    8550:	31 f4       	brne	.+12     	; 0x855e <__itoa_ncheck+0x12>
    8552:	99 23       	and	r25, r25
    8554:	22 f4       	brpl	.+8      	; 0x855e <__itoa_ncheck+0x12>
    8556:	bd e2       	ldi	r27, 0x2D	; 45
    8558:	90 95       	com	r25
    855a:	81 95       	neg	r24
    855c:	9f 4f       	sbci	r25, 0xFF	; 255
    855e:	0c 94 b2 42 	jmp	0x8564	; 0x8564 <__utoa_common>

00008562 <__utoa_ncheck>:
    8562:	bb 27       	eor	r27, r27

00008564 <__utoa_common>:
    8564:	fb 01       	movw	r30, r22
    8566:	55 27       	eor	r21, r21
    8568:	aa 27       	eor	r26, r26
    856a:	88 0f       	add	r24, r24
    856c:	99 1f       	adc	r25, r25
    856e:	aa 1f       	adc	r26, r26
    8570:	a4 17       	cp	r26, r20
    8572:	10 f0       	brcs	.+4      	; 0x8578 <__utoa_common+0x14>
    8574:	a4 1b       	sub	r26, r20
    8576:	83 95       	inc	r24
    8578:	50 51       	subi	r21, 0x10	; 16
    857a:	b9 f7       	brne	.-18     	; 0x856a <__utoa_common+0x6>
    857c:	a0 5d       	subi	r26, 0xD0	; 208
    857e:	aa 33       	cpi	r26, 0x3A	; 58
    8580:	08 f0       	brcs	.+2      	; 0x8584 <__utoa_common+0x20>
    8582:	a9 5d       	subi	r26, 0xD9	; 217
    8584:	a1 93       	st	Z+, r26
    8586:	00 97       	sbiw	r24, 0x00	; 0
    8588:	79 f7       	brne	.-34     	; 0x8568 <__utoa_common+0x4>
    858a:	b1 11       	cpse	r27, r1
    858c:	b1 93       	st	Z+, r27
    858e:	11 92       	st	Z+, r1
    8590:	cb 01       	movw	r24, r22
    8592:	0c 94 f1 42 	jmp	0x85e2	; 0x85e2 <strrev>

00008596 <__eerd_block_m644p>:
    8596:	dc 01       	movw	r26, r24
    8598:	cb 01       	movw	r24, r22

0000859a <__eerd_blraw_m644p>:
    859a:	fc 01       	movw	r30, r24
    859c:	f9 99       	sbic	0x1f, 1	; 31
    859e:	fe cf       	rjmp	.-4      	; 0x859c <__eerd_blraw_m644p+0x2>
    85a0:	06 c0       	rjmp	.+12     	; 0x85ae <__eerd_blraw_m644p+0x14>
    85a2:	f2 bd       	out	0x22, r31	; 34
    85a4:	e1 bd       	out	0x21, r30	; 33
    85a6:	f8 9a       	sbi	0x1f, 0	; 31
    85a8:	31 96       	adiw	r30, 0x01	; 1
    85aa:	00 b4       	in	r0, 0x20	; 32
    85ac:	0d 92       	st	X+, r0
    85ae:	41 50       	subi	r20, 0x01	; 1
    85b0:	50 40       	sbci	r21, 0x00	; 0
    85b2:	b8 f7       	brcc	.-18     	; 0x85a2 <__eerd_blraw_m644p+0x8>
    85b4:	08 95       	ret

000085b6 <__eerd_byte_m644p>:
    85b6:	f9 99       	sbic	0x1f, 1	; 31
    85b8:	fe cf       	rjmp	.-4      	; 0x85b6 <__eerd_byte_m644p>
    85ba:	92 bd       	out	0x22, r25	; 34
    85bc:	81 bd       	out	0x21, r24	; 33
    85be:	f8 9a       	sbi	0x1f, 0	; 31
    85c0:	99 27       	eor	r25, r25
    85c2:	80 b5       	in	r24, 0x20	; 32
    85c4:	08 95       	ret

000085c6 <__eewr_byte_m644p>:
    85c6:	26 2f       	mov	r18, r22

000085c8 <__eewr_r18_m644p>:
    85c8:	f9 99       	sbic	0x1f, 1	; 31
    85ca:	fe cf       	rjmp	.-4      	; 0x85c8 <__eewr_r18_m644p>
    85cc:	1f ba       	out	0x1f, r1	; 31
    85ce:	92 bd       	out	0x22, r25	; 34
    85d0:	81 bd       	out	0x21, r24	; 33
    85d2:	20 bd       	out	0x20, r18	; 32
    85d4:	0f b6       	in	r0, 0x3f	; 63
    85d6:	f8 94       	cli
    85d8:	fa 9a       	sbi	0x1f, 2	; 31
    85da:	f9 9a       	sbi	0x1f, 1	; 31
    85dc:	0f be       	out	0x3f, r0	; 63
    85de:	01 96       	adiw	r24, 0x01	; 1
    85e0:	08 95       	ret

000085e2 <strrev>:
    85e2:	dc 01       	movw	r26, r24
    85e4:	fc 01       	movw	r30, r24
    85e6:	67 2f       	mov	r22, r23
    85e8:	71 91       	ld	r23, Z+
    85ea:	77 23       	and	r23, r23
    85ec:	e1 f7       	brne	.-8      	; 0x85e6 <strrev+0x4>
    85ee:	32 97       	sbiw	r30, 0x02	; 2
    85f0:	04 c0       	rjmp	.+8      	; 0x85fa <strrev+0x18>
    85f2:	7c 91       	ld	r23, X
    85f4:	6d 93       	st	X+, r22
    85f6:	70 83       	st	Z, r23
    85f8:	62 91       	ld	r22, -Z
    85fa:	ae 17       	cp	r26, r30
    85fc:	bf 07       	cpc	r27, r31
    85fe:	c8 f3       	brcs	.-14     	; 0x85f2 <strrev+0x10>
    8600:	08 95       	ret

00008602 <_exit>:
    8602:	f8 94       	cli

00008604 <__stop_program>:
    8604:	ff cf       	rjmp	.-2      	; 0x8604 <__stop_program>
