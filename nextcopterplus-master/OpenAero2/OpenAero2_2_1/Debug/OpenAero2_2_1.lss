
OpenAero2_2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040c  00800100  000086a4  00008738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000086a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002cc  0080050c  0080050c  00008b44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008b44  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000660  00000000  00000000  00008b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013f61  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003674  00000000  00000000  0001d139  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004327  00000000  00000000  000207ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000013a8  00000000  00000000  00024ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000027be  00000000  00000000  00025e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008766  00000000  00000000  0002863a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  00030da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__ctors_end>
       4:	0c 94 64 27 	jmp	0x4ec8	; 0x4ec8 <__vector_1>
       8:	0c 94 2c 27 	jmp	0x4e58	; 0x4e58 <__vector_2>
       c:	0c 94 17 28 	jmp	0x502e	; 0x502e <__vector_3>
      10:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      14:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__vector_5>
      18:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      1c:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <__vector_7>
      20:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      24:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      28:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      2c:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      30:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      34:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      38:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      3c:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      40:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      44:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      48:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__vector_18>
      4c:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      50:	0c 94 d3 28 	jmp	0x51a6	; 0x51a6 <__vector_20>
      54:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      58:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      5c:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      60:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      64:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      68:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      6c:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      70:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      74:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      78:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__bad_interrupt>
      7c:	fd 17       	cp	r31, r29
      7e:	73 18       	sub	r7, r3
      80:	73 18       	sub	r7, r3
      82:	0f 18       	sub	r0, r15
      84:	1c 18       	sub	r1, r12
      86:	28 18       	sub	r2, r8
      88:	23 18       	sub	r2, r3
      8a:	36 18       	sub	r3, r6
      8c:	43 18       	sub	r4, r3
      8e:	47 18       	sub	r4, r7
      90:	53 18       	sub	r5, r3
      92:	3c 30       	cpi	r19, 0x0C	; 12
      94:	3e 30       	cpi	r19, 0x0E	; 14
      96:	41 30       	cpi	r20, 0x01	; 1
      98:	43 30       	cpi	r20, 0x03	; 3
      9a:	45 30       	cpi	r20, 0x05	; 5
      9c:	47 30       	cpi	r20, 0x07	; 7
      9e:	4a 30       	cpi	r20, 0x0A	; 10
      a0:	4c 30       	cpi	r20, 0x0C	; 12
      a2:	4e 30       	cpi	r20, 0x0E	; 14
      a4:	50 30       	cpi	r21, 0x00	; 0
      a6:	52 30       	cpi	r21, 0x02	; 2
      a8:	54 30       	cpi	r21, 0x04	; 4
      aa:	56 30       	cpi	r21, 0x06	; 6
      ac:	58 30       	cpi	r21, 0x08	; 8
      ae:	5a 30       	cpi	r21, 0x0A	; 10
      b0:	5c 30       	cpi	r21, 0x0C	; 12
      b2:	5e 30       	cpi	r21, 0x0E	; 14
      b4:	61 30       	cpi	r22, 0x01	; 1
      b6:	63 30       	cpi	r22, 0x03	; 3
      b8:	65 30       	cpi	r22, 0x05	; 5
      ba:	67 30       	cpi	r22, 0x07	; 7
      bc:	69 30       	cpi	r22, 0x09	; 9
      be:	6b 30       	cpi	r22, 0x0B	; 11
      c0:	4c 34       	cpi	r20, 0x4C	; 76
      c2:	30 34       	cpi	r19, 0x40	; 64
      c4:	33 34       	cpi	r19, 0x43	; 67
      c6:	36 34       	cpi	r19, 0x46	; 70
      c8:	39 34       	cpi	r19, 0x49	; 73
      ca:	3c 34       	cpi	r19, 0x4C	; 76
      cc:	3f 34       	cpi	r19, 0x4F	; 79
      ce:	42 34       	cpi	r20, 0x42	; 66
      d0:	45 34       	cpi	r20, 0x45	; 69

000000d2 <Acc_Pol>:
      d2:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      e2:	ff ff                                               ..

000000e4 <ACC_RPY_Order>:
      e4:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      f4:	02 01                                               ..

000000f6 <FUTABA>:
      f6:	01 02 00 03 04 05 06 07                             ........

000000fe <JR>:
      fe:	00 01 02 03 04 05 06 07                             ........

00000106 <Wingdings>:
     106:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     116:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     126:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     136:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     146:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     156:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     166:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000170 <Verdana14>:
     170:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     180:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     190:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a0:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b0:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c0:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d0:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e0:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f0:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     200:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     210:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     220:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     230:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     240:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     250:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     260:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     270:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     280:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     290:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a0:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b0:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c0:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d0:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e0:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f0:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     300:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     310:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     320:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     330:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     340:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     350:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     360:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     370:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     380:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     390:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a0:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b0:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c0:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d0:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e0:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f0:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     400:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     410:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     420:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     430:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     440:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     450:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     460:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     470:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     480:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     490:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a0:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b0:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c0:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d0:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e0:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f0:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     500:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     510:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     520:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     530:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     540:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     550:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     560:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     570:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     580:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     590:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a0:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b0:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c0:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d0:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e0:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f0:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     600:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     610:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     620:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     630:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     640:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     650:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     660:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     670:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     680:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     690:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a0:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b0:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c0:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d0:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e0:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f0:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     700:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     710:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     720:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     730:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     740:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     750:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     760:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     770:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     780:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     790:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a0:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b0:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c0:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d0:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e0:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f0:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     800:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     810:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     820:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     830:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     840:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     850:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     860:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     870:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     880:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     890:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a0:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b0:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c0:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d0:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e0:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f0:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     900:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     910:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     920:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     930:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     940:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     950:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     960:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     970:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     980:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     990:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a0:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b0:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c0:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d0:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e0:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f0:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a00:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a10:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a1e <Verdana8>:
     a1e:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a2e:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a3e:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a4e:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a5e:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a6e:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a7e:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a8e:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a9e:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     aae:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     abe:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ace:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ade:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     aee:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     afe:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b0e:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b1e:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b2e:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b3e:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b4e:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b5e:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b6e:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b7e:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b8e:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b9e:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bae:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bbe:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bce:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bde:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bee:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bfe:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c0e:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c1e:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c2e:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c3e:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c4e:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c5e:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c6e:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c7e:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c8e:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c9e:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cae:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cbe:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cce:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cde:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cee:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cfe:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d0e:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d1e:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d2e:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d3e:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d4e:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d5e:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d6e:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d7e:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d8e:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d9e:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     dae:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dbe:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dce:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     dde:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     dee:	01                                                  .

00000def <lcd_commmands>:
     def:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dfd <pagemap>:
     dfd:	07 06 05 04 03 02 01 00                             ........

00000e05 <text_menu>:
     e05:	40 11 3a 11 2e 11 c1 16 9c 16 a8 13 b2 16 b0 16     @.:.............
     e15:	ae 16 92 16 8a 16 90 16 8e 16 8c 16 85 16 80 16     ................
     e25:	7b 16 76 16 94 16 7a 11 74 11 aa 14 4f 12 48 12     {.v...z.t...O.H.
     e35:	d5 12 41 12 d0 14 cb 14 c5 14 c1 14 bd 14 23 10     ..A...........#.
     e45:	aa 11 a1 11 b2 11 9a 11 95 11 b3 14 bf 13 bc 13     ................
     e55:	b1 13 c9 11 c1 11 bb 11 85 10 7b 10 94 14 9f 14     ..........{.....
     e65:	2d 13 13 13 20 13 17 13 26 13 23 10 23 10 23 10     -... ...&.#.#.#.
     e75:	75 10 70 10 23 10 23 10 b8 14 22 11 bf 13 1e 10     u.p.#.#...".....
     e85:	19 10 14 10 0f 10 0a 10 05 10 00 10 fb 0f 23 10     ..............#.
     e95:	6d 11 31 10 29 10 6a 11 63 11 6b 16 59 16 47 16     m.1.).j.c.k.Y.G.
     ea5:	34 16 20 16 0c 16 f8 15 e2 15 d3 15 c4 15 b5 15     4. .............
     eb5:	a6 15 97 15 88 15 79 15 6a 15 5b 15 47 15 34 15     ......y.j.[.G.4.
     ec5:	1b 15 02 15 ec 14 d5 14 23 10 bf 13 bc 13 35 10     ........#.....5.
     ed5:	23 10 b2 11 aa 11 a1 11 9a 11 95 11 90 11 8b 11     #...............
     ee5:	86 11 81 11 23 10 23 10 10 13 09 13 ff 12 31 10     ....#.#.......1.
     ef5:	29 10 24 10 fa 10 ef 10 68 10 5f 10 56 10 52 10     ).$.....h._.V.R.
     f05:	49 10 41 10 5d 11 58 11 52 11 a4 16 4a 11 14 11     I.A.].X.R...J...
     f15:	06 11 00 11 23 10 23 10 23 10 3a 10 35 10 bf 13     ....#.#.#.:.5...
     f25:	bc 13 35 10 cb 14 c5 14 c1 14 a8 13 9e 13 93 13     ..5.............
     f35:	84 13 74 13 66 13 59 13 4b 13 3f 13 83 12 32 13     ..t.f.Y.K.?...2.
     f45:	bb 16 78 12 a1 11 aa 11 9a 11 9c 16 f2 12 e8 12     ..x.............
     f55:	de 12 d5 12 c8 12 bb 12 b1 12 a5 12 9b 12 8e 12     ................
     f65:	b2 11 aa 11 a1 11 9a 11 95 11 90 11 8b 11 86 11     ................
     f75:	be 10 b4 10 ac 10 a4 10 9b 10 93 10 8a 10 81 11     ................
     f85:	9f 14 94 14 89 14 81 14 79 14 71 14 63 14 55 14     ........y.q.c.U.
     f95:	4a 14 3e 14 35 14 2c 14 23 14 14 14 05 14 f9 13     J.>.5.,.#.......
     fa5:	ef 13 e8 13 e1 13 da 13 cd 13 c3 13 39 12 2c 12     ............9.,.
     fb5:	14 12 1f 12 14 12 09 12 fd 11 f3 11 e9 11 de 11     ................
     fc5:	d1 11 14 12 d1 11 14 12 23 10 23 10 23 10 23 10     ........#.#.#.#.
     fd5:	ea 10 e5 10 e0 10 db 10 d6 10 d1 10 cc 10 c7 10     ................
     fe5:	81 11 74 12 6f 12 6a 12 65 12 60 12 5a 12 54 12     ..t.o.j.e.`.Z.T.
     ff5:	81 11 23 10 23 10                                   ..#.#.

00000ffb <VBAT39>:
     ffb:	33 2e 39 56 00                                      3.9V.

00001000 <VBAT38>:
    1000:	33 2e 38 56 00                                      3.8V.

00001005 <VBAT37>:
    1005:	33 2e 37 56 00                                      3.7V.

0000100a <VBAT36>:
    100a:	33 2e 36 56 00                                      3.6V.

0000100f <VBAT35>:
    100f:	33 2e 35 56 00                                      3.5V.

00001014 <VBAT34>:
    1014:	33 2e 34 56 00                                      3.4V.

00001019 <VBAT33>:
    1019:	33 2e 33 56 00                                      3.3V.

0000101e <VBAT32>:
    101e:	33 2e 32 56 00                                      3.2V.

00001023 <Dummy0>:
	...

00001024 <GeneralText50>:
    1024:	48 69 67 68 00                                      High.

00001029 <GeneralText5>:
    1029:	53 79 6e 63 20 52 43 00                             Sync RC.

00001031 <GeneralText4>:
    1031:	4c 6f 77 00                                         Low.

00001035 <MixerItem12>:
    1035:	52 65 76 2e 00                                      Rev..

0000103a <MixerItem11>:
    103a:	4e 6f 72 6d 61 6c 00                                Normal.

00001041 <MixerMenuItem7>:
    1041:	50 69 74 63 68 55 70 00                             PitchUp.

00001049 <MixerMenuItem6>:
    1049:	53 69 64 65 77 61 79 73 00                          Sideways.

00001052 <MixerMenuItem5>:
    1052:	41 66 74 00                                         Aft.

00001056 <MixerMenuItem4>:
    1056:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000105f <MixerMenuItem3>:
    105f:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001068 <MixerMenuItem2>:
    1068:	46 6f 72 77 61 72 64 00                             Forward.

00001070 <FSmode1>:
    1070:	41 64 76 2e 00                                      Adv..

00001075 <FSmode0>:
    1075:	46 69 78 65 64 00                                   Fixed.

0000107b <HeadingHold2>:
    107b:	41 78 69 73 20 6c 6f 63 6b 00                       Axis lock.

00001085 <HeadingHold1>:
    1085:	52 61 74 65 00                                      Rate.

0000108a <MixerItem81>:
    108a:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001093 <MixerItem80>:
    1093:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000109b <MixerItem74>:
    109b:	41 63 63 50 69 74 63 68 00                          AccPitch.

000010a4 <MixerItem73>:
    10a4:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000010ac <MixerItem72>:
    10ac:	47 79 72 6f 59 61 77 00                             GyroYaw.

000010b4 <MixerItem71>:
    10b4:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000010be <MixerItem70>:
    10be:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000010c7 <MOUT8>:
    10c7:	4f 55 54 38 00                                      OUT8.

000010cc <MOUT7>:
    10cc:	4f 55 54 37 00                                      OUT7.

000010d1 <MOUT6>:
    10d1:	4f 55 54 36 00                                      OUT6.

000010d6 <MOUT5>:
    10d6:	4f 55 54 35 00                                      OUT5.

000010db <MOUT4>:
    10db:	4f 55 54 34 00                                      OUT4.

000010e0 <MOUT3>:
    10e0:	4f 55 54 33 00                                      OUT3.

000010e5 <MOUT2>:
    10e5:	4f 55 54 32 00                                      OUT2.

000010ea <MOUT1>:
    10ea:	4f 55 54 31 00                                      OUT1.

000010ef <Status2>:
    10ef:	66 6f 72 20 73 74 61 74 75 73 00                    for status.

000010fa <Status0>:
    10fa:	50 72 65 73 73 00                                   Press.

00001100 <WizardText2>:
    1100:	44 6f 6e 65 21 00                                   Done!.

00001106 <WizardText1>:
    1106:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001114 <WizardText0>:
    1114:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 3f 00           No RX signal?.

00001122 <PText4>:
    1122:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

0000112e <PText2>:
    112e:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

0000113a <PText1>:
    113a:	52 65 73 65 74 00                                   Reset.

00001140 <PText0>:
    1140:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

0000114a <Status3>:
    114a:	42 61 74 74 65 72 79 00                             Battery.

00001152 <ErrorText7>:
    1152:	4d 6f 64 65 6c 00                                   Model.

00001158 <ErrorText6>:
    1158:	4c 6f 73 74 00                                      Lost.

0000115d <ErrorText5>:
    115d:	45 72 72 6f 72 00                                   Error.

00001163 <ErrorText4>:
    1163:	53 69 67 6e 61 6c 00                                Signal.

0000116a <ErrorText3>:
    116a:	4e 6f 00                                            No.

0000116d <ErrorText0>:
    116d:	53 65 6e 73 6f 72 00                                Sensor.

00001174 <ChannelRef12>:
    1174:	45 6c 65 76 2e 00                                   Elev..

0000117a <ChannelRef10>:
    117a:	54 68 72 6f 74 2e 00                                Throt..

00001181 <ChannelRef8>:
    1181:	4e 6f 6e 65 00                                      None.

00001186 <ChannelRef7>:
    1186:	41 55 58 33 00                                      AUX3.

0000118b <ChannelRef6>:
    118b:	41 55 58 32 00                                      AUX2.

00001190 <ChannelRef5>:
    1190:	41 55 58 31 00                                      AUX1.

00001195 <ChannelRef4>:
    1195:	47 65 61 72 00                                      Gear.

0000119a <ChannelRef3>:
    119a:	52 75 64 64 65 72 00                                Rudder.

000011a1 <ChannelRef2>:
    11a1:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000011aa <ChannelRef1>:
    11aa:	41 69 6c 65 72 6f 6e 00                             Aileron.

000011b2 <ChannelRef0>:
    11b2:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000011bb <MixerItem42>:
    11bb:	4d 6f 74 6f 72 00                                   Motor.

000011c1 <MixerItem41>:
    11c1:	44 2e 53 65 72 76 6f 00                             D.Servo.

000011c9 <MixerItem40>:
    11c9:	41 2e 53 65 72 76 6f 00                             A.Servo.

000011d1 <MixerItem15>:
    11d1:	45 78 74 2e 20 53 6f 75 72 63 65 3a 00              Ext. Source:.

000011de <MixerItem3>:
    11de:	50 69 74 63 68 20 61 63 63 3a 00                    Pitch acc:.

000011e9 <MixerItem7>:
    11e9:	52 6f 6c 6c 20 61 63 63 3a 00                       Roll acc:.

000011f3 <MixerItem6>:
    11f3:	59 61 77 20 67 79 72 6f 3a 00                       Yaw gyro:.

000011fd <MixerItem5>:
    11fd:	50 69 74 63 68 20 67 79 72 6f 3a 00                 Pitch gyro:.

00001209 <MixerItem4>:
    1209:	52 6f 6c 6c 20 67 79 72 6f 3a 00                    Roll gyro:.

00001214 <MixerItem2>:
    1214:	56 6f 6c 75 6d 65 28 25 29 3a 00                    Volume(%):.

0000121f <MixerItem13>:
    121f:	52 43 20 73 6f 75 72 63 65 20 42 3a 00              RC source B:.

0000122c <MixerItem0>:
    122c:	52 43 20 73 6f 75 72 63 65 20 41 3a 00              RC source A:.

00001239 <MixerItem00>:
    1239:	44 65 76 69 63 65 3a 00                             Device:.

00001241 <RXMode6>:
    1241:	4d 61 6e 75 61 6c 00                                Manual.

00001248 <RXMode5>:
    1248:	46 2e 57 69 6e 67 00                                F.Wing.

0000124f <RXMode4>:
    124f:	41 65 72 6f 00                                      Aero.

00001254 <MPU6050LPF7>:
    1254:	32 36 30 48 7a 00                                   260Hz.

0000125a <MPU6050LPF6>:
    125a:	31 38 34 48 7a 00                                   184Hz.

00001260 <MPU6050LPF5>:
    1260:	39 34 48 7a 00                                      94Hz.

00001265 <MPU6050LPF4>:
    1265:	34 34 48 7a 00                                      44Hz.

0000126a <MPU6050LPF3>:
    126a:	32 31 48 7a 00                                      21Hz.

0000126f <MPU6050LPF2>:
    126f:	31 30 48 7a 00                                      10Hz.

00001274 <MPU6050LPF1>:
    1274:	35 48 7a 00                                         5Hz.

00001278 <AutoMenuItem16>:
    1278:	54 48 52 2e 70 6f 73 20 25 3a 00                    THR.pos %:.

00001283 <GeneralText9>:
    1283:	4c 6f 63 6b 20 72 61 74 65 3a 00                    Lock rate:.

0000128e <GeneralText20>:
    128e:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

0000129b <GeneralText6>:
    129b:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000012a5 <GeneralText7>:
    12a5:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

000012b1 <GeneralText2>:
    12b1:	4c 4d 41 20 74 69 6d 65 3a 00                       LMA time:.

000012bb <BattMenuItem2>:
    12bb:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

000012c8 <GeneralText10>:
    12c8:	43 61 6d 2e 20 63 65 6e 74 65 72 3a 00              Cam. center:.

000012d5 <MainMenuItem6>:
    12d5:	43 61 6d 73 74 61 62 2e 00                          Camstab..

000012de <GeneralText3>:
    12de:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000012e8 <Contrast0>:
    12e8:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000012f2 <MixerMenuItem0>:
    12f2:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000012ff <RCMenuItem13>:
    12ff:	53 61 74 65 6c 6c 69 74 65 00                       Satellite.

00001309 <RCMenuItem7>:
    1309:	46 75 74 61 62 61 00                                Futaba.

00001310 <RCMenuItem6>:
    1310:	4a 52 00                                            JR.

00001313 <RXMode44>:
    1313:	50 57 4d 00                                         PWM.

00001317 <RXMode3>:
    1317:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

00001320 <RXMode2>:
    1320:	53 2d 42 75 73 00                                   S-Bus.

00001326 <RXMode1>:
    1326:	58 74 72 65 6d 65 00                                Xtreme.

0000132d <RXMode0>:
    132d:	43 50 50 4d 00                                      CPPM.

00001332 <RCMenuItem21>:
    1332:	44 65 61 64 62 61 6e 64 28 25 29 3a 00              Deadband(%):.

0000133f <RCMenuItem20>:
    133f:	46 6c 61 70 20 73 70 65 65 64 3a 00                 Flap speed:.

0000134b <RCMenuItem11>:
    134b:	44 69 66 66 65 72 65 6e 74 69 61 6c 3a 00           Differential:.

00001359 <StabMenuItem15>:
    1359:	44 79 6e 2e 47 61 69 6e 28 25 29 3a 00              Dyn.Gain(%):.

00001366 <StabMenuItem14>:
    1366:	44 79 6e 2e 47 61 69 6e 20 43 68 2e 3a 00           Dyn.Gain Ch.:.

00001374 <RCMenuItem4>:
    1374:	32 6e 64 20 41 69 6c 2e 20 43 68 61 6e 2e 3a 00     2nd Ail. Chan.:.

00001384 <RCMenuItem2>:
    1384:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001393 <RCMenuItem0>:
    1393:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

0000139e <RCMenuItem30>:
    139e:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000013a8 <RCMenuItem1>:
    13a8:	52 58 20 74 79 70 65 3a 00                          RX type:.

000013b1 <AutoMenuItem17>:
    13b1:	48 61 6e 64 73 20 46 72 65 65 00                    Hands Free.

000013bc <AutoMenuItem15>:
    13bc:	4f 4e 00                                            ON.

000013bf <AutoMenuItem11>:
    13bf:	4f 46 46 00                                         OFF.

000013c3 <StabMenuItem30>:
    13c3:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

000013cd <StabMenuItem12>:
    13cd:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

000013da <StabMenuItem9>:
    13da:	59 61 77 20 44 3a 00                                Yaw D:.

000013e1 <StabMenuItem8>:
    13e1:	59 61 77 20 49 3a 00                                Yaw I:.

000013e8 <StabMenuItem7>:
    13e8:	59 61 77 20 50 3a 00                                Yaw P:.

000013ef <GyroType3>:
    13ef:	59 61 77 20 67 79 72 6f 3a 00                       Yaw gyro:.

000013f9 <AutoMenuItem8>:
    13f9:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001405 <AutoMenuItem21>:
    1405:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001414 <StabMenuItem11>:
    1414:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

00001423 <StabMenuItem6>:
    1423:	50 69 74 63 68 20 44 3a 00                          Pitch D:.

0000142c <StabMenuItem5>:
    142c:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001435 <AutoMenuItem4>:
    1435:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000143e <GyroType2>:
    143e:	50 69 74 63 68 20 67 79 72 6f 3a 00                 Pitch gyro:.

0000144a <AutoMenuItem7>:
    144a:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00001455 <AutoMenuItem20>:
    1455:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001463 <StabMenuItem10>:
    1463:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001471 <StabMenuItem3>:
    1471:	52 6f 6c 6c 20 44 3a 00                             Roll D:.

00001479 <StabMenuItem2>:
    1479:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001481 <AutoMenuItem1>:
    1481:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001489 <GyroType1>:
    1489:	52 6f 6c 6c 20 67 79 72 6f 3a 00                    Roll gyro:.

00001494 <AutoMenuItem9>:
    1494:	41 75 74 6f 6c 65 76 65 6c 3a 00                    Autolevel:.

0000149f <AutoMenuItem10>:
    149f:	53 74 61 62 69 6c 69 74 79 3a 00                    Stability:.

000014aa <SensorMenuItem3>:
    14aa:	46 61 69 6c 73 61 66 65 00                          Failsafe.

000014b3 <SensorMenuItem2>:
    14b3:	49 6e 76 2e 00                                      Inv..

000014b8 <SensorMenuItem1>:
    14b8:	43 61 6c 2e 00                                      Cal..

000014bd <PText19>:
    14bd:	41 63 63 00                                         Acc.

000014c1 <PText18>:
    14c1:	59 61 77 00                                         Yaw.

000014c5 <PText17>:
    14c5:	50 69 74 63 68 00                                   Pitch.

000014cb <PText16>:
    14cb:	52 6f 6c 6c 00                                      Roll.

000014d0 <PText15>:
    14d0:	47 79 72 6f 00                                      Gyro.

000014d5 <MainMenuItem24>:
    14d5:	32 33 2e 20 46 61 69 6c 73 61 66 65 20 70 6f 73     23. Failsafe pos
    14e5:	69 74 69 6f 6e 73 00                                itions.

000014ec <MainMenuItem4>:
    14ec:	32 32 2e 20 46 61 69 6c 73 61 66 65 20 73 65 74     22. Failsafe set
    14fc:	74 69 6e 67 73 00                                   tings.

00001502 <MainMenuItem23>:
    1502:	32 31 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     21. Pos. Servo t
    1512:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000151b <MainMenuItem22>:
    151b:	32 30 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     20. Neg. Servo t
    152b:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001534 <MainMenuItem21>:
    1534:	31 39 2e 20 53 65 72 76 6f 20 74 72 69 6d 20 28     19. Servo trim (
    1544:	25 29 00                                            %).

00001547 <MainMenuItem20>:
    1547:	31 38 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     18. Servo direct
    1557:	69 6f 6e 00                                         ion.

0000155b <MainMenuItem18>:
    155b:	31 37 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        17. OUT8 Mixer.

0000156a <MainMenuItem17>:
    156a:	31 36 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        16. OUT7 Mixer.

00001579 <MainMenuItem16>:
    1579:	31 35 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        15. OUT6 Mixer.

00001588 <MainMenuItem15>:
    1588:	31 34 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        14. OUT5 Mixer.

00001597 <MainMenuItem14>:
    1597:	31 33 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        13. OUT4 Mixer.

000015a6 <MainMenuItem13>:
    15a6:	31 32 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        12. OUT3 Mixer.

000015b5 <MainMenuItem12>:
    15b5:	31 31 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        11. OUT2 Mixer.

000015c4 <MainMenuItem110>:
    15c4:	31 30 2e 20 4f 55 54 31 20 4d 69 78 65 72 00        10. OUT1 Mixer.

000015d3 <MainMenuItem10>:
    15d3:	39 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        9. Level meter.

000015e2 <MainMenuItem8>:
    15e2:	38 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     8. Sensor calibr
    15f2:	61 74 69 6f 6e 00                                   ation.

000015f8 <MainMenuItem11>:
    15f8:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1608:	65 20 33 00                                         e 3.

0000160c <MainMenuItem3>:
    160c:	36 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     6. Flight profil
    161c:	65 20 32 00                                         e 2.

00001620 <MainMenuItem2>:
    1620:	35 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     5. Flight profil
    1630:	65 20 31 00                                         e 1.

00001634 <MainMenuItem9>:
    1634:	34 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     4. Receiver inpu
    1644:	74 73 00                                            ts.

00001647 <MainMenuItem7>:
    1647:	33 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     3. Stick polarit
    1657:	79 00                                               y.

00001659 <MainMenuItem1>:
    1659:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1669:	70 00                                               p.

0000166b <MainMenuItem0>:
    166b:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001676 <MenuFrame8>:
    1676:	53 61 76 65 00                                      Save.

0000167b <MenuFrame7>:
    167b:	44 65 66 2e 00                                      Def..

00001680 <MenuFrame6>:
    1680:	42 61 63 6b 00                                      Back.

00001685 <MenuFrame5>:
    1685:	4d 65 6e 75 00                                      Menu.

0000168a <MenuFrame1>:
    168a:	45 00                                               E.

0000168c <MenuFrame4>:
    168c:	44 00                                               D.

0000168e <MenuFrame3>:
    168e:	43 00                                               C.

00001690 <MenuFrame2>:
    1690:	42 00                                               B.

00001692 <MenuFrame0>:
    1692:	41 00                                               A.

00001694 <StatusText9>:
    1694:	4a 69 74 74 65 72 3a 00                             Jitter:.

0000169c <StatusText7>:
    169c:	50 72 65 73 65 74 3a 00                             Preset:.

000016a4 <StatusText6>:
    16a4:	46 72 65 65 20 52 41 4d 3a 00                       Free RAM:.

000016ae <StatusText5>:
    16ae:	30 00                                               0.

000016b0 <StatusText4>:
    16b0:	2e 00                                               ..

000016b2 <StatusText3>:
    16b2:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000016bb <StatusText1>:
    16bb:	4d 6f 64 65 3a 00                                   Mode:.

000016c1 <StatusText0>:
    16c1:	56 65 72 73 69 6f 6e 3a 20 20 20 56 31 2e 34 20     Version:   V1.4 
    16d1:	42 32 00                                            B2.

000016d4 <Gyro_Pol>:
    16d4:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    16e4:	01 01                                               ..

000016e6 <Gyro_RPY_Order>:
    16e6:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    16f6:	01 00                                               ..

000016f8 <LPF_lookup_HS>:
    16f8:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1708:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001718 <LPF_lookup>:
    1718:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1728:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001738 <lines>:
    1738:	03 0f 1b 27                                         ...'

0000173c <flight_menu_ranges>:
    173c:	00 01 01 01 00 00 02 01 01 00 00 01 01 01 00 00     ................
    174c:	7f 01 00 50 00 7f 01 00 00 00 7f 01 00 00 00 7d     ...P...........}
    175c:	01 00 00 00 7f 01 00 3c 81 7f 01 00 00 00 01 01     .......<........
    176c:	01 00 00 7f 01 00 50 00 7f 01 00 00 00 7f 01 00     ......P.........
    177c:	00 00 7d 01 00 00 00 7f 01 00 3c 81 7f 01 00 00     ..}.......<.....
    178c:	00 01 01 01 00 00 7f 01 00 50 00 7f 01 00 00 00     .........P......
    179c:	7f 01 00 00 00 7d 01 00 00 81 7f 01 00 00           .....}........

000017aa <FlightMenuText>:
    17aa:	26 26 2c 00 00 00 00 00 00 2c 00 00 00 00 00 00     &&,......,......
    17ba:	2c 00 00 00 00 00                                   ,.....

000017c0 <mixer_menu_ranges>:
    17c0:	00 02 01 01 00 00 08 01 01 00 83 7d 01 00 00 00     ...........}....
    17d0:	08 01 01 08 83 7d 01 00 00 00 02 01 01 00 00 02     .....}..........
    17e0:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    17f0:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1800:	0f 83 7d 01 00 00                                   ..}...

00001806 <MixerMenuText>:
    1806:	29 69 00 69 00 8f 8f 8f 8f 8f b0 00 b0 00           )i.i..........

00001814 <servo_menu_ranges>:
    1814:	00 01 01 01 00 83 7d 01 03 00 83 00 01 03 9c 00     ......}.........
    1824:	7d 01 03 64 83 7d 01 03 00                          }..d.}...

0000182d <ServoMenuText>:
    182d:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

00001855 <rc_menu_ranges>:
    1855:	00 03 01 01 01 00 04 01 01 04 00 01 01 01 00 00     ................
    1865:	08 01 01 04 00 08 01 01 08 00 08 01 01 05 00 64     ...............d
    1875:	05 00 64 00 64 01 00 00 00 14 01 00 00 00 04 01     ..d.d...........
    1885:	00 03 00 05 01 00 02 00 01 01 01 00 9c 64 01 00     .............d..
    1895:	9c 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00 00     ..}....}....}...
	...
    18c1:	00 00 00 03 01 01 00 00 05 01 01 00 1c 32 01 00     .............2..
    18d1:	24 00 02 01 01 00 00 01 01 01 00 00 01 01 01 00     $...............
    18e1:	00 08 01 01 00 00 1e 01 00 03 01 0a 01 00 07 00     ................
    18f1:	07 01 01 02 00 06 01 01 02                          .........

000018fa <RCMenuText>:
    18fa:	30 69 74 69 69 69 00 00 00 00 00 38 00 00 00 00     0itiii.....8....
    190a:	00 00 00 00 00 00 16 7c 00 77 65 65 3e 00 00 f1     .......|.wee>...
    191a:	f1                                                  .

0000191b <CAM_STAB>:
    191b:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    192b:	00 00 00 08 00 08 00 00 01 00 00 01 0f 00 0f 00     ................
    193b:	00 00 00 08 00 08 00 00 00 01 00 00 0f 00 0f 00     ................
    194b:	00 00 00 08 00 08 00 01 00 00 01 00 0f 00 0f 00     ................
    195b:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    196b:	00 00 00 02 64 08 00 00 01 00 00 01 0f 00 0f 00     ....d...........
    197b:	00 00 00 03 64 08 00 00 00 01 00 00 0f 00 0f 00     ....d...........
    198b:	00 00 00 01 64 08 00 01 00 00 01 00 0f 00 0f 00     ....d...........

0000199b <FLYING_WING_MIX>:
    199b:	00 00 02 00 64 08 00 00 00 00 00 00 0f 00 0f 00     ....d...........
    19ab:	00 00 00 01 32 02 32 01 01 00 01 01 0f 00 0f 00     ....2.2.........
    19bb:	00 00 00 01 ce 02 32 01 01 00 01 01 0f 00 0f 00     ......2.........
    19cb:	00 00 00 03 64 08 00 00 00 01 00 00 0f 00 0f 00     ....d...........
    19db:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    19eb:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    19fb:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    1a0b:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................

00001a1b <AEROPLANE_MIX>:
    1a1b:	00 00 02 00 64 08 00 00 00 00 00 00 0f 00 0f 00     ....d...........
    1a2b:	00 00 00 01 64 08 00 01 00 00 01 00 0f 00 0f 00     ....d...........
    1a3b:	00 00 00 02 64 08 00 00 01 00 00 01 0f 00 0f 00     ....d...........
    1a4b:	00 00 00 03 64 08 00 00 00 01 00 00 0f 00 0f 00     ....d...........
    1a5b:	00 00 00 08 00 08 00 01 00 00 01 00 0f 00 0f 00     ................
    1a6b:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    1a7b:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
    1a8b:	00 00 00 08 00 08 00 00 00 00 00 00 0f 00 0f 00     ................
	...

00001a9c <__ctors_end>:
    1a9c:	11 24       	eor	r1, r1
    1a9e:	1f be       	out	0x3f, r1	; 63
    1aa0:	cf ef       	ldi	r28, 0xFF	; 255
    1aa2:	d0 e1       	ldi	r29, 0x10	; 16
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	cd bf       	out	0x3d, r28	; 61

00001aa8 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1aa8:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1aaa:	88 e1       	ldi	r24, 0x18	; 24
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	80 93 60 00 	sts	0x0060, r24
    1ab4:	10 92 60 00 	sts	0x0060, r1
    1ab8:	0f be       	out	0x3f, r0	; 63

00001aba <__do_copy_data>:
    1aba:	15 e0       	ldi	r17, 0x05	; 5
    1abc:	a0 e0       	ldi	r26, 0x00	; 0
    1abe:	b1 e0       	ldi	r27, 0x01	; 1
    1ac0:	e4 ea       	ldi	r30, 0xA4	; 164
    1ac2:	f6 e8       	ldi	r31, 0x86	; 134
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <__do_copy_data+0x10>
    1ac6:	05 90       	lpm	r0, Z+
    1ac8:	0d 92       	st	X+, r0
    1aca:	ac 30       	cpi	r26, 0x0C	; 12
    1acc:	b1 07       	cpc	r27, r17
    1ace:	d9 f7       	brne	.-10     	; 0x1ac6 <__do_copy_data+0xc>

00001ad0 <__do_clear_bss>:
    1ad0:	27 e0       	ldi	r18, 0x07	; 7
    1ad2:	ac e0       	ldi	r26, 0x0C	; 12
    1ad4:	b5 e0       	ldi	r27, 0x05	; 5
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <.do_clear_bss_start>

00001ad8 <.do_clear_bss_loop>:
    1ad8:	1d 92       	st	X+, r1

00001ada <.do_clear_bss_start>:
    1ada:	a8 3d       	cpi	r26, 0xD8	; 216
    1adc:	b2 07       	cpc	r27, r18
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <.do_clear_bss_loop>
    1ae0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <main>
    1ae4:	0c 94 50 43 	jmp	0x86a0	; 0x86a0 <_exit>

00001ae8 <__bad_interrupt>:
    1ae8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001aec <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1aec:	00 00       	nop
	ret					// 4 (5 cycles)
    1aee:	08 95       	ret

00001af0 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1af0:	fd df       	rcall	.-6      	; 0x1aec <glcd_delay>
	rcall	glcd_delay
    1af2:	fc df       	rcall	.-8      	; 0x1aec <glcd_delay>
	rcall	glcd_delay
    1af4:	fb df       	rcall	.-10     	; 0x1aec <glcd_delay>
	rcall	glcd_delay
    1af6:	fa df       	rcall	.-12     	; 0x1aec <glcd_delay>
	ret
    1af8:	08 95       	ret

00001afa <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1afa:	cf 93       	push	r28
	push	XL			//	1
    1afc:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1afe:	a5 e0       	ldi	r26, 0x05	; 5

00001b00 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1b00:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1b02:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1b04:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <VarDelay>
	sbi		BIND		//	2
    1b08:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1b0a:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1b0c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <VarDelay>
	dec		XL			//	1
    1b10:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1b12:	b1 f7       	brne	.-20     	; 0x1b00 <master_loop>

	pop		XL			//	  1
    1b14:	af 91       	pop	r26
	pop		YL			//	  1
    1b16:	cf 91       	pop	r28
	ret					//	  4 
    1b18:	08 95       	ret

00001b1a <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1b1a:	00 c0       	rjmp	.+0      	; 0x1b1c <VarDelay+0x2>
	rjmp .+0			// 2
    1b1c:	00 c0       	rjmp	.+0      	; 0x1b1e <VarDelay+0x4>
	rjmp .+0			// 2
    1b1e:	00 c0       	rjmp	.+0      	; 0x1b20 <VarDelay+0x6>
	rjmp .+0			// 2
    1b20:	00 c0       	rjmp	.+0      	; 0x1b22 <VarDelay+0x8>
	rjmp .+0			// 2
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <VarDelay+0xa>
	rjmp .+0			// 2
    1b24:	00 c0       	rjmp	.+0      	; 0x1b26 <VarDelay+0xc>
	rjmp .+0			// 2
    1b26:	00 c0       	rjmp	.+0      	; 0x1b28 <VarDelay+0xe>
	rjmp .+0			// 2
    1b28:	00 c0       	rjmp	.+0      	; 0x1b2a <VarDelay+0x10>
	nop					// 1
    1b2a:	00 00       	nop
	dec 	YL			// 1
    1b2c:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1b2e:	a9 f7       	brne	.-22     	; 0x1b1a <VarDelay>
	ret					//   4 
    1b30:	08 95       	ret

00001b32 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1b32:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1b34:	ef 93       	push	r30
	push	ZH			// 2
    1b36:	ff 93       	push	r31
	push	XL			// 2
    1b38:	af 93       	push	r26
	push	XH			// 2
    1b3a:	bf 93       	push	r27
	push	YL			// 2
    1b3c:	cf 93       	push	r28
	push	YH			// 2
    1b3e:	df 93       	push	r29
	push	16			// 2
    1b40:	0f 93       	push	r16
	push	17			// 2
    1b42:	1f 93       	push	r17
	push	18			// 2
    1b44:	2f 93       	push	r18
	push	19			// 2
    1b46:	3f 93       	push	r19
	push	20			// 2
    1b48:	4f 93       	push	r20
	push	21			// 2
    1b4a:	5f 93       	push	r21
	push	22			// 2
    1b4c:	6f 93       	push	r22
	push	23			// 2
    1b4e:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b50:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1b52:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1b54:	8f 93       	push	r24
	push	25			// 2
    1b56:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1b58:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1b5a:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1b5c:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1b5e:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1b60:	af 93       	push	r26
	push	XH 			// 2
    1b62:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1b64:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1b66:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1b68:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b6a:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1b6c:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1b6e:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b70:	af 93       	push	r26
	push	XH 		
    1b72:	bf 93       	push	r27
	andi	XL,	0x07
    1b74:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1b76:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1b78:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b7a:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1b7c:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1b7e:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b80:	af 93       	push	r26
	push	XH 		
    1b82:	bf 93       	push	r27
	andi	XL,	0x07
    1b84:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1b86:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1b88:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b8a:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1b8c:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1b8e:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b90:	af 93       	push	r26
	push	XH 	
    1b92:	bf 93       	push	r27
	andi	XL,	0x07
    1b94:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1b96:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1b98:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b9a:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1b9c:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1b9e:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1ba0:	af 93       	push	r26
	push	XH 	
    1ba2:	bf 93       	push	r27
	andi	XL,	0x07
    1ba4:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1ba6:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1ba8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1baa:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1bac:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1bae:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bb0:	af 93       	push	r26
	push	XH 	
    1bb2:	bf 93       	push	r27
	andi	XL,	0x07
    1bb4:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1bb6:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1bb8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bba:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1bbc:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1bbe:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bc0:	af 93       	push	r26
	push	XH 
    1bc2:	bf 93       	push	r27
	andi	XL,	0x07
    1bc4:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1bc6:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1bc8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bca:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1bcc:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1bce:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1bd0:	af 93       	push	r26
	push	XH 
    1bd2:	bf 93       	push	r27
	andi	XL,	0x07
    1bd4:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1bd6:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1bd8:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1bda:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1bde:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1be0:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1be2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M2
	mov		r25,r22
    1be6:	96 2f       	mov	r25, r22
	call	DelayHigh
    1be8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1bec:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1bee:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1bf0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M3
	mov		r25,r21
    1bf4:	95 2f       	mov	r25, r21
	call	DelayHigh
    1bf6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1bfa:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1bfc:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1bfe:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M4
	mov		r25,r20
    1c02:	94 2f       	mov	r25, r20
	call	DelayHigh
    1c04:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1c08:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1c0a:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1c0c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M5
	mov		r25,r19
    1c10:	93 2f       	mov	r25, r19
	call	DelayHigh
    1c12:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1c16:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1c18:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1c1a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M6
	mov		r25,r18
    1c1e:	92 2f       	mov	r25, r18
	call	DelayHigh
    1c20:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1c24:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1c26:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1c28:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M7
	mov		r25,r17
    1c2c:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c2e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c32:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c34:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c36:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// M8
	mov		r25,r16
    1c3a:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c3c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c40:	f7 fc       	sbrc	r15, 7
	sbi 	M8
    1c42:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c44:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c48:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <pwm_delay>
	call    pwm_delay
    1c4c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <pwm_delay>
	call    pwm_delay
    1c50:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c54:	bf 91       	pop	r27
	pop		XL
    1c56:	af 91       	pop	r26
	call	shuffle_8
    1c58:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r16,XL
    1c5c:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c5e:	bf 91       	pop	r27
	pop		XL
    1c60:	af 91       	pop	r26
	call	shuffle_8
    1c62:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r17,XL
    1c66:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c68:	bf 91       	pop	r27
	pop		XL
    1c6a:	af 91       	pop	r26
	call	shuffle_8
    1c6c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r18,XL
    1c70:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1c72:	bf 91       	pop	r27
	pop		XL
    1c74:	af 91       	pop	r26
	call	shuffle_8
    1c76:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r19,XL
    1c7a:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1c7c:	bf 91       	pop	r27
	pop		XL
    1c7e:	af 91       	pop	r26
	call	shuffle_8
    1c80:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r20,XL
    1c84:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1c86:	bf 91       	pop	r27
	pop		XL
    1c88:	af 91       	pop	r26
	call	shuffle_8
    1c8a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r21,XL
    1c8e:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1c90:	bf 91       	pop	r27
	pop		XL
    1c92:	af 91       	pop	r26
	call	shuffle_8
    1c94:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r22,XL
    1c98:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1c9a:	bf 91       	pop	r27
	pop		XL
    1c9c:	af 91       	pop	r26
	call	shuffle_8
    1c9e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <shuffle_8>
	mov		r23,XL
    1ca2:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1ca4:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1ca6:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1ca8:	00 24       	eor	r0, r0

00001caa <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1caa:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1cac:	19 f4       	brne	.+6      	; 0x1cb4 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1cae:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1cb0:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <jj1>

00001cb4 <j1>:
j1:
	rjmp 	.+0			// 2
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <j1+0x2>
	rjmp 	.+0			// 2
    1cb6:	00 c0       	rjmp	.+0      	; 0x1cb8 <jj1>

00001cb8 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1cb8:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1cba:	19 f4       	brne	.+6      	; 0x1cc2 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1cbc:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1cbe:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <jj2>

00001cc2 <j2>:
j2:
	rjmp	.+0
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <j2+0x2>
	rjmp	.+0
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <jj2>

00001cc6 <jj2>:
jj2:
	subi	r21,1
    1cc6:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <j3>
	cbi 	M3
    1cca:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1ccc:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <jj3>

00001cd0 <j3>:
j3:
	rjmp	.+0
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <j3+0x2>
	rjmp	.+0
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <jj3>

00001cd4 <jj3>:
jj3:
	subi 	r20,1
    1cd4:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1cd6:	19 f4       	brne	.+6      	; 0x1cde <j4>
	cbi 	M4
    1cd8:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1cda:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <jj4>

00001cde <j4>:
j4:
	rjmp 	.+0
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <j4+0x2>
	rjmp 	.+0
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <jj4>

00001ce2 <jj4>:
jj4:
	subi	r19,1
    1ce2:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1ce4:	19 f4       	brne	.+6      	; 0x1cec <j5>
	cbi 	M5
    1ce6:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1ce8:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <jj5>

00001cec <j5>:
j5:
	rjmp 	.+0
    1cec:	00 c0       	rjmp	.+0      	; 0x1cee <j5+0x2>
	rjmp 	.+0
    1cee:	00 c0       	rjmp	.+0      	; 0x1cf0 <jj5>

00001cf0 <jj5>:
jj5:
	subi	r18,1
    1cf0:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1cf2:	19 f4       	brne	.+6      	; 0x1cfa <j6>
	cbi 	M6
    1cf4:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1cf6:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <jj6>

00001cfa <j6>:
j6:
	rjmp 	.+0
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <j6+0x2>
	rjmp	.+0
    1cfc:	00 c0       	rjmp	.+0      	; 0x1cfe <jj6>

00001cfe <jj6>:
jj6:
	subi	r17,1
    1cfe:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1d00:	19 f4       	brne	.+6      	; 0x1d08 <j7>
	cbi 	M7
    1d02:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1d04:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <jj7>

00001d08 <j7>:
j7:
	rjmp 	.+0
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <j7+0x2>
	rjmp 	.+0
    1d0a:	00 c0       	rjmp	.+0      	; 0x1d0c <jj7>

00001d0c <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1d0c:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <j8>
	cbi 	M8
    1d10:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1d12:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <jj8>

00001d16 <j8>:
j8:
	rjmp 	.+0
    1d16:	00 c0       	rjmp	.+0      	; 0x1d18 <j8+0x2>
	rjmp 	.+0
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <jj8>

00001d1a <jj8>:
jj8:
	call	pad_100_delay // (100)
    1d1a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <pad_100_delay>

	subi 	YL,1		// 1
    1d1e:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1d20:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1d24:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <nloop>

00001d28 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1d28:	9f 91       	pop	r25
	pop		24			// 		2
    1d2a:	8f 91       	pop	r24
	pop		23			//		2
    1d2c:	7f 91       	pop	r23
	pop		22			//		2
    1d2e:	6f 91       	pop	r22
	pop		21			//		2
    1d30:	5f 91       	pop	r21
	pop		20			//		2
    1d32:	4f 91       	pop	r20
	pop		19			//		2
    1d34:	3f 91       	pop	r19
	pop		18			//		2
    1d36:	2f 91       	pop	r18
	pop		17			//		2
    1d38:	1f 91       	pop	r17
	pop		16			//		2
    1d3a:	0f 91       	pop	r16
	pop		YH			//		2
    1d3c:	df 91       	pop	r29
	pop		YL			//		2
    1d3e:	cf 91       	pop	r28
	pop		XH			//		2
    1d40:	bf 91       	pop	r27
	pop		XL			//		2
    1d42:	af 91       	pop	r26
	pop		ZH			// 		2
    1d44:	ff 91       	pop	r31
	pop		ZL			//		2
    1d46:	ef 91       	pop	r30

	ret					//		4
    1d48:	08 95       	ret

00001d4a <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d4a:	0f 93       	push	r16
	push	17
    1d4c:	1f 93       	push	r17
	push	18
    1d4e:	2f 93       	push	r18

	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d50:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d52:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d54:	00 24       	eor	r0, r0

00001d56 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d56:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <in1>
	cpi		r24,0x01	; 1
    1d5a:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d5c:	79 f0       	breq	.+30     	; 0x1d7c <in2>
	cpi		r24,0x02	; 2
    1d5e:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d60:	81 f0       	breq	.+32     	; 0x1d82 <in3>
	cpi		r24,0x03	; 3
    1d62:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d64:	89 f0       	breq	.+34     	; 0x1d88 <in4>
	cpi		r24,0x04	; 4
    1d66:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d68:	91 f0       	breq	.+36     	; 0x1d8e <in5>
	cpi		r24,0x05	; 5
    1d6a:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d6c:	99 f0       	breq	.+38     	; 0x1d94 <in6>
	cpi		r24,0x06	; 6
    1d6e:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d70:	a1 f0       	breq	.+40     	; 0x1d9a <in7>
	cpi		r24,0x07	; 7
    1d72:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1d74:	a9 f0       	breq	.+42     	; 0x1da0 <in8>

00001d76 <in1>:

in1:sbi 	M1			// Set output high
    1d76:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1d78:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001d7c <in2>:
in2:sbi 	M2
    1d7c:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1d7e:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001d82 <in3>:
in3:sbi 	M3	
    1d82:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1d84:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001d88 <in4>:
in4:sbi 	M4
    1d88:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1d8a:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001d8e <in5>:
in5:sbi 	M5
    1d8e:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1d90:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001d94 <in6>:
in6:sbi 	M6
    1d94:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1d96:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001d9a <in7>:
in7:sbi 	M7
    1d9a:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1d9c:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001da0 <in8>:
in8:sbi 	M8
    1da0:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1da2:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <loopin>

00001da6 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1da6:	00 c0       	rjmp	.+0      	; 0x1da8 <loopin+0x2>
	rjmp .+0			// 2
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <loopin+0x4>
	rjmp .+0			// 2
    1daa:	00 c0       	rjmp	.+0      	; 0x1dac <loopin+0x6>
	rjmp .+0			// 2
    1dac:	00 c0       	rjmp	.+0      	; 0x1dae <loopin+0x8>
	rjmp .+0			// 2
    1dae:	00 c0       	rjmp	.+0      	; 0x1db0 <loopin+0xa>
	rjmp .+0			// 2
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1db2:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1db4:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1db6:	19 f4       	brne	.+6      	; 0x1dbe <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1db8:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1dba:	28 b9       	out	0x08, r18	; 8
#ifdef KK21
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1dbc:	22 b9       	out	0x02, r18	; 2

00001dbe <loopout>:
#endif

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1dbe:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1dc0:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1dc2:	89 f7       	brne	.-30     	; 0x1da6 <loopin>

	pop		18
    1dc4:	2f 91       	pop	r18
	pop		17			// Restore regs
    1dc6:	1f 91       	pop	r17
	pop		16
    1dc8:	0f 91       	pop	r16
	ret	
    1dca:	08 95       	ret

00001dcc <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1dcc:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1dce:	05 e6       	ldi	r16, 0x65	; 101

00001dd0 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1dd0:	00 c0       	rjmp	.+0      	; 0x1dd2 <pwm_loop+0x2>
	rjmp .+0			// 2
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <pwm_loop+0x4>
	rjmp .+0			// 2
    1dd4:	00 c0       	rjmp	.+0      	; 0x1dd6 <pwm_loop+0x6>
	subi	r16,1		// 1
    1dd6:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1dd8:	d9 f7       	brne	.-10     	; 0x1dd0 <pwm_loop>

00001dda <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1dda:	0f 91       	pop	r16
	ret					//    4 to return
    1ddc:	08 95       	ret

00001dde <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1dde:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1de0:	09 e0       	ldi	r16, 0x09	; 9

00001de2 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1de2:	00 c0       	rjmp	.+0      	; 0x1de4 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1de4:	00 c0       	rjmp	.+0      	; 0x1de6 <pad_100+0x4>
	rjmp .+0			// 2
    1de6:	00 c0       	rjmp	.+0      	; 0x1de8 <pad_100+0x6>

	subi 	16,1		// 1
    1de8:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1dea:	d9 f7       	brne	.-10     	; 0x1de2 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1dec:	00 00       	nop
	rjmp .+0			// 		2
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <pad_100+0xe>
	rjmp .+0			// 		2
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1df2:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1df4:	08 95       	ret

00001df6 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1df6:	00 c0       	rjmp	.+0      	; 0x1df8 <us_delay+0x2>
	rjmp .+0			// 2
    1df8:	00 c0       	rjmp	.+0      	; 0x1dfa <us_delay+0x4>
	rjmp .+0			// 2
    1dfa:	00 c0       	rjmp	.+0      	; 0x1dfc <us_delay+0x6>
	rjmp .+0			// 2
    1dfc:	00 c0       	rjmp	.+0      	; 0x1dfe <us_delay+0x8>
	ret					// 4 (16 cycles)
    1dfe:	08 95       	ret

00001e00 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1e00:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1e02:	a7 95       	ror	r26
	lsr		XH			// 1
    1e04:	b6 95       	lsr	r27
	ror		XL			// 1
    1e06:	a7 95       	ror	r26
	lsr		XH			// 1
    1e08:	b6 95       	lsr	r27
	ror		XL			// 1
    1e0a:	a7 95       	ror	r26
	ret					// 4
    1e0c:	08 95       	ret

00001e0e <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1e0e:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1e10:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1e12:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <LoopHighOut1>

00001e16 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1e16:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <us_delay>
	dec 	YL			// 		1	1
    1e1a:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1e1e:	fb cf       	rjmp	.-10     	; 0x1e16 <LoopHigh>

00001e20 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <LoopHighOut1>

00001e22 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1e22:	00 00       	nop
    ret					// 4	4	4
    1e24:	08 95       	ret

00001e26 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1e26:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1e28:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <LoopLowOut1>

00001e2c <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e2c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <us_delay>
	dec 	YL			//		1	1
    1e30:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e34:	fb cf       	rjmp	.-10     	; 0x1e2c <LoopLow>

00001e36 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <LoopLowOut1>

00001e38 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e38:	08 95       	ret

00001e3a <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	2c 97       	sbiw	r28, 0x0c	; 12
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050 for KK2.1
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// For KK2.1 boards, use the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e4e:	26 e0       	ldi	r18, 0x06	; 6
    1e50:	ae 01       	movw	r20, r28
    1e52:	4f 5f       	subi	r20, 0xFF	; 255
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	6b e3       	ldi	r22, 0x3B	; 59
    1e58:	80 ed       	ldi	r24, 0xD0	; 208
    1e5a:	0e 94 70 21 	call	0x42e0	; 0x42e0 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	98 2f       	mov	r25, r24
    1e64:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e66:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e68:	82 0f       	add	r24, r18
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	36 e0       	ldi	r19, 0x06	; 6
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	3a 95       	dec	r19
    1e74:	e1 f7       	brne	.-8      	; 0x1e6e <get_raw_accs+0x34>
    1e76:	98 87       	std	Y+8, r25	; 0x08
    1e78:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	98 2f       	mov	r25, r24
    1e80:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1e84:	82 0f       	add	r24, r18
    1e86:	91 1d       	adc	r25, r1
    1e88:	56 e0       	ldi	r21, 0x06	; 6
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	5a 95       	dec	r21
    1e90:	e1 f7       	brne	.-8      	; 0x1e8a <get_raw_accs+0x50>
    1e92:	91 95       	neg	r25
    1e94:	81 95       	neg	r24
    1e96:	91 09       	sbc	r25, r1
    1e98:	9a 87       	std	Y+10, r25	; 0x0a
    1e9a:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1ea4:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1ea6:	82 0f       	add	r24, r18
    1ea8:	91 1d       	adc	r25, r1
    1eaa:	76 e0       	ldi	r23, 0x06	; 6
    1eac:	95 95       	asr	r25
    1eae:	87 95       	ror	r24
    1eb0:	7a 95       	dec	r23
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <get_raw_accs+0x72>
    1eb4:	9c 87       	std	Y+12, r25	; 0x0c
    1eb6:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1eb8:	20 91 76 06 	lds	r18, 0x0676
    1ebc:	a6 e3       	ldi	r26, 0x36	; 54
    1ebe:	b5 e0       	ldi	r27, 0x05	; 5
    1ec0:	43 e0       	ldi	r20, 0x03	; 3
    1ec2:	24 02       	muls	r18, r20
    1ec4:	90 01       	movw	r18, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	2c 51       	subi	r18, 0x1C	; 28
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	f9 01       	movw	r30, r18
    1ed2:	e8 0f       	add	r30, r24
    1ed4:	f9 1f       	adc	r31, r25
    1ed6:	e4 91       	lpm	r30, Z
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 0b       	sbc	r31, r31
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	4c 0f       	add	r20, r28
    1ee2:	5d 1f       	adc	r21, r29
    1ee4:	e4 0f       	add	r30, r20
    1ee6:	f5 1f       	adc	r31, r21
    1ee8:	46 81       	ldd	r20, Z+6	; 0x06
    1eea:	57 81       	ldd	r21, Z+7	; 0x07
    1eec:	4d 93       	st	X+, r20
    1eee:	5d 93       	st	X+, r21
    1ef0:	01 96       	adiw	r24, 0x01	; 1
	RawADC[YAW] = ADCW;

#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	61 f7       	brne	.-40     	; 0x1ed0 <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1ef8:	2c 96       	adiw	r28, 0x0c	; 12
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	08 95       	ret

00001f0a <ReadAcc>:
//************************************************************

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order

void ReadAcc()
{
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1f10:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1f14:	80 91 57 07 	lds	r24, 0x0757
    1f18:	80 fd       	sbrc	r24, 0
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <ReadAcc+0x1c>
	{
#ifdef KK21 
		Config.AccZero[YAW] = 0;
    1f1c:	10 92 3d 07 	sts	0x073D, r1
    1f20:	10 92 3c 07 	sts	0x073C, r1
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1f26:	80 91 3e 07 	lds	r24, 0x073E
    1f2a:	90 91 3f 07 	lds	r25, 0x073F
    1f2e:	20 91 42 07 	lds	r18, 0x0742
    1f32:	30 91 43 07 	lds	r19, 0x0743
    1f36:	82 1b       	sub	r24, r18
    1f38:	93 0b       	sbc	r25, r19
    1f3a:	90 93 3d 07 	sts	0x073D, r25
    1f3e:	80 93 3c 07 	sts	0x073C, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f42:	20 91 76 06 	lds	r18, 0x0676
    1f46:	c8 e3       	ldi	r28, 0x38	; 56
    1f48:	d7 e0       	ldi	r29, 0x07	; 7
    1f4a:	a6 e3       	ldi	r26, 0x36	; 54
    1f4c:	b5 e0       	ldi	r27, 0x05	; 5
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	28 02       	muls	r18, r24
    1f52:	90 01       	movw	r18, r0
    1f54:	11 24       	eor	r1, r1
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	2e 52       	subi	r18, 0x2E	; 46
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f5e:	69 91       	ld	r22, Y+
    1f60:	79 91       	ld	r23, Y+
    1f62:	f9 01       	movw	r30, r18
    1f64:	e8 0f       	add	r30, r24
    1f66:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f68:	14 91       	lpm	r17, Z
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f6a:	4d 91       	ld	r20, X+
    1f6c:	5c 91       	ld	r21, X
    1f6e:	11 97       	sbiw	r26, 0x01	; 1
    1f70:	46 1b       	sub	r20, r22
    1f72:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f74:	14 03       	mulsu	r17, r20
    1f76:	b0 01       	movw	r22, r0
    1f78:	15 9f       	mul	r17, r21
    1f7a:	70 0d       	add	r23, r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	6d 93       	st	X+, r22
    1f80:	7d 93       	st	X+, r23
    1f82:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i<NUMBEROFAXIS; i++)
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	51 f7       	brne	.-44     	; 0x1f5e <ReadAcc+0x54>
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
	}
}
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	08 95       	ret

00001f92 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1f92:	1f 93       	push	r17
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <CalibrateAcc+0x8>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <CalibrateAcc+0xa>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <CalibrateAcc+0xc>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1fa2:	1a 82       	std	Y+2, r1	; 0x02
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	1c 82       	std	Y+4, r1	; 0x04
    1fa8:	1b 82       	std	Y+3, r1	; 0x03
    1faa:	1e 82       	std	Y+6, r1	; 0x06
    1fac:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1fae:	81 11       	cpse	r24, r1
    1fb0:	72 c0       	rjmp	.+228    	; 0x2096 <CalibrateAcc+0x104>
    1fb2:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1fb4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	20 91 36 05 	lds	r18, 0x0536
    1fc0:	30 91 37 05 	lds	r19, 0x0537
    1fc4:	82 0f       	add	r24, r18
    1fc6:	93 1f       	adc	r25, r19
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	20 91 38 05 	lds	r18, 0x0538
    1fd4:	30 91 39 05 	lds	r19, 0x0539
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	20 91 3a 05 	lds	r18, 0x053A
    1fe8:	30 91 3b 05 	lds	r19, 0x053B
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ff4:	8f e4       	ldi	r24, 0x4F	; 79
    1ff6:	93 ec       	ldi	r25, 0xC3	; 195
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <CalibrateAcc+0x66>
    1ffc:	00 c0       	rjmp	.+0      	; 0x1ffe <CalibrateAcc+0x6c>
    1ffe:	00 00       	nop
    2000:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
    2002:	c1 f6       	brne	.-80     	; 0x1fb4 <CalibrateAcc+0x22>
    2004:	fe 01       	movw	r30, r28
    2006:	31 96       	adiw	r30, 0x01	; 1
    2008:	9e 01       	movw	r18, r28
    200a:	29 5f       	subi	r18, 0xF9	; 249
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	40 96       	adiw	r24, 0x10	; 16
    2014:	45 e0       	ldi	r20, 0x05	; 5
    2016:	95 95       	asr	r25
    2018:	87 95       	ror	r24
    201a:	4a 95       	dec	r20
    201c:	e1 f7       	brne	.-8      	; 0x2016 <CalibrateAcc+0x84>
    201e:	81 93       	st	Z+, r24
    2020:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
    2022:	e2 17       	cp	r30, r18
    2024:	f3 07       	cpc	r31, r19
    2026:	99 f7       	brne	.-26     	; 0x200e <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL];
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	90 93 39 07 	sts	0x0739, r25
    2030:	80 93 38 07 	sts	0x0738, r24
		Config.AccZero[PITCH] = accZero[PITCH];
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	90 93 3b 07 	sts	0x073B, r25
    203c:	80 93 3a 07 	sts	0x073A, r24
		Config.AccZeroNormZ = accZero[YAW];
		
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2040:	80 91 76 06 	lds	r24, 0x0676
    2044:	99 27       	eor	r25, r25
    2046:	87 fd       	sbrc	r24, 7
    2048:	90 95       	com	r25
    204a:	fc 01       	movw	r30, r24
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	e8 0f       	add	r30, r24
    2052:	f9 1f       	adc	r31, r25
    2054:	ec 52       	subi	r30, 0x2C	; 44
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	44 91       	lpm	r20, Z
    205a:	2d 81       	ldd	r18, Y+5	; 0x05
    205c:	3e 81       	ldd	r19, Y+6	; 0x06
    205e:	42 03       	mulsu	r20, r18
    2060:	c0 01       	movw	r24, r0
    2062:	43 9f       	mul	r20, r19
    2064:	90 0d       	add	r25, r0
    2066:	11 24       	eor	r1, r1
    2068:	90 93 3f 07 	sts	0x073F, r25
    206c:	80 93 3e 07 	sts	0x073E, r24
		
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    2070:	80 91 57 07 	lds	r24, 0x0757
    2074:	82 60       	ori	r24, 0x02	; 2
    2076:	80 93 57 07 	sts	0x0757, r24
		
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    207a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
		LED1 = 1;
    207e:	2b 9a       	sbi	0x05, 3	; 5
    2080:	9f e7       	ldi	r25, 0x7F	; 127
    2082:	24 e8       	ldi	r18, 0x84	; 132
    2084:	4e e1       	ldi	r20, 0x1E	; 30
    2086:	91 50       	subi	r25, 0x01	; 1
    2088:	20 40       	sbci	r18, 0x00	; 0
    208a:	40 40       	sbci	r20, 0x00	; 0
    208c:	e1 f7       	brne	.-8      	; 0x2086 <CalibrateAcc+0xf4>
    208e:	00 c0       	rjmp	.+0      	; 0x2090 <CalibrateAcc+0xfe>
    2090:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    2092:	2b 98       	cbi	0x05, 3	; 5
    2094:	76 c0       	rjmp	.+236    	; 0x2182 <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    2096:	80 91 57 07 	lds	r24, 0x0757
    209a:	81 ff       	sbrs	r24, 1
    209c:	72 c0       	rjmp	.+228    	; 0x2182 <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    209e:	10 92 41 07 	sts	0x0741, r1
    20a2:	10 92 40 07 	sts	0x0740, r1
    20a6:	10 e2       	ldi	r17, 0x20	; 32

			for (i=0; i<32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    20a8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    20ac:	80 91 40 07 	lds	r24, 0x0740
    20b0:	90 91 41 07 	lds	r25, 0x0741
    20b4:	20 91 3a 05 	lds	r18, 0x053A
    20b8:	30 91 3b 05 	lds	r19, 0x053B
    20bc:	82 0f       	add	r24, r18
    20be:	93 1f       	adc	r25, r19
    20c0:	90 93 41 07 	sts	0x0741, r25
    20c4:	80 93 40 07 	sts	0x0740, r24
    20c8:	8f e4       	ldi	r24, 0x4F	; 79
    20ca:	93 ec       	ldi	r25, 0xC3	; 195
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <CalibrateAcc+0x13a>
    20d0:	00 c0       	rjmp	.+0      	; 0x20d2 <CalibrateAcc+0x140>
    20d2:	00 00       	nop
    20d4:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i=0; i<32; i++)
    20d6:	41 f7       	brne	.-48     	; 0x20a8 <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    20d8:	80 91 76 06 	lds	r24, 0x0676
    20dc:	99 27       	eor	r25, r25
    20de:	87 fd       	sbrc	r24, 7
    20e0:	90 95       	com	r25
    20e2:	fc 01       	movw	r30, r24
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	e8 0f       	add	r30, r24
    20ea:	f9 1f       	adc	r31, r25
    20ec:	ec 52       	subi	r30, 0x2C	; 44
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    20f2:	20 91 40 07 	lds	r18, 0x0740
    20f6:	30 91 41 07 	lds	r19, 0x0741
    20fa:	20 5f       	subi	r18, 0xF0	; 240
    20fc:	3f 4f       	sbci	r19, 0xFF	; 255
    20fe:	b5 e0       	ldi	r27, 0x05	; 5
    2100:	35 95       	asr	r19
    2102:	27 95       	ror	r18
    2104:	ba 95       	dec	r27
    2106:	e1 f7       	brne	.-8      	; 0x2100 <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2108:	42 03       	mulsu	r20, r18
    210a:	c0 01       	movw	r24, r0
    210c:	43 9f       	mul	r20, r19
    210e:	90 0d       	add	r25, r0
    2110:	11 24       	eor	r1, r1
    2112:	90 93 41 07 	sts	0x0741, r25
    2116:	80 93 40 07 	sts	0x0740, r24

			// Test if board is actually inverted relative to board orientation.
#ifdef KK21
			if (Config.AccZeroInvZ < 0)
    211a:	97 ff       	sbrs	r25, 7
    211c:	32 c0       	rjmp	.+100    	; 0x2182 <CalibrateAcc+0x1f0>
			if	(Config.AccZeroInvZ < Config.AccZero[YAW])
#endif
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    211e:	20 91 3e 07 	lds	r18, 0x073E
    2122:	30 91 3f 07 	lds	r19, 0x073F
    2126:	a9 01       	movw	r20, r18
    2128:	48 1b       	sub	r20, r24
    212a:	59 0b       	sbc	r21, r25
    212c:	ca 01       	movw	r24, r20
    212e:	95 95       	asr	r25
    2130:	87 95       	ror	r24
    2132:	90 93 43 07 	sts	0x0743, r25
    2136:	80 93 42 07 	sts	0x0742, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    213a:	28 1b       	sub	r18, r24
    213c:	39 0b       	sbc	r19, r25
    213e:	30 93 3d 07 	sts	0x073D, r19
    2142:	20 93 3c 07 	sts	0x073C, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2146:	80 91 57 07 	lds	r24, 0x0757
    214a:	81 60       	ori	r24, 0x01	; 1
    214c:	80 93 57 07 	sts	0x0757, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    2150:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
				LED1 = 1;
    2154:	2b 9a       	sbi	0x05, 3	; 5
    2156:	5f e7       	ldi	r21, 0x7F	; 127
    2158:	84 e8       	ldi	r24, 0x84	; 132
    215a:	9e e1       	ldi	r25, 0x1E	; 30
    215c:	51 50       	subi	r21, 0x01	; 1
    215e:	80 40       	sbci	r24, 0x00	; 0
    2160:	90 40       	sbci	r25, 0x00	; 0
    2162:	e1 f7       	brne	.-8      	; 0x215c <CalibrateAcc+0x1ca>
    2164:	00 c0       	rjmp	.+0      	; 0x2166 <CalibrateAcc+0x1d4>
    2166:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    2168:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    216a:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    216c:	26 96       	adiw	r28, 0x06	; 6
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    217e:	0c 94 cc 2d 	jmp	0x5b98	; 0x5b98 <menu_beep>
			}
		}
	}
}
    2182:	26 96       	adiw	r28, 0x06	; 6
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	08 95       	ret

00002196 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	6b e6       	ldi	r22, 0x6B	; 107
    219a:	80 ed       	ldi	r24, 0xD0	; 208
    219c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    21a0:	48 e0       	ldi	r20, 0x08	; 8
    21a2:	6c e1       	ldi	r22, 0x1C	; 28
    21a4:	80 ed       	ldi	r24, 0xD0	; 208
    21a6:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <writeI2Cbyte>

000021aa <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    21b0:	10 92 7b 00 	sts	0x007B, r1
    21b4:	08 95       	ret

000021b6 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    21b6:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    21ba:	86 ec       	ldi	r24, 0xC6	; 198
    21bc:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    21c0:	80 91 7a 00 	lds	r24, 0x007A
    21c4:	86 fd       	sbrc	r24, 6
    21c6:	fc cf       	rjmp	.-8      	; 0x21c0 <read_adc+0xa>
}
    21c8:	08 95       	ret

000021ca <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    21ca:	cf 92       	push	r12
    21cc:	df 92       	push	r13
    21ce:	ef 92       	push	r14
    21d0:	0f 93       	push	r16
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    21d6:	cb e0       	ldi	r28, 0x0B	; 11
    21d8:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    21da:	1f 9b       	sbis	0x03, 7	; 3
    21dc:	7e c0       	rjmp	.+252    	; 0x22da <Display_balance+0x110>
	{
		// Read accs
		ReadAcc();
    21de:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	cb 01       	movw	r24, r22
    21e8:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <imu_update>
    21ec:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    21ee:	20 97       	sbiw	r28, 0x00	; 0
    21f0:	a1 f7       	brne	.-24     	; 0x21da <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	52 e4       	ldi	r21, 0x42	; 66
    21fa:	60 91 a5 05 	lds	r22, 0x05A5
    21fe:	70 91 a6 05 	lds	r23, 0x05A6
    2202:	80 91 a7 05 	lds	r24, 0x05A7
    2206:	90 91 a8 05 	lds	r25, 0x05A8
    220a:	0e 94 32 40 	call	0x8064	; 0x8064 <__addsf3>
    220e:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    2212:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	52 e4       	ldi	r21, 0x42	; 66
    221c:	60 91 a1 05 	lds	r22, 0x05A1
    2220:	70 91 a2 05 	lds	r23, 0x05A2
    2224:	80 91 a3 05 	lds	r24, 0x05A3
    2228:	90 91 a4 05 	lds	r25, 0x05A4
    222c:	0e 94 32 40 	call	0x8064	; 0x8064 <__addsf3>
    2230:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    2234:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2236:	d7 fd       	sbrc	r29, 7
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    223a:	c1 34       	cpi	r28, 0x41	; 65
    223c:	d1 05       	cpc	r29, r1
    223e:	2c f0       	brlt	.+10     	; 0x224a <Display_balance+0x80>
    2240:	c0 e4       	ldi	r28, 0x40	; 64
    2242:	d0 e0       	ldi	r29, 0x00	; 0
    2244:	02 c0       	rjmp	.+4      	; 0x224a <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2246:	c0 e0       	ldi	r28, 0x00	; 0
    2248:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    224a:	d7 fc       	sbrc	r13, 7
    224c:	08 c0       	rjmp	.+16     	; 0x225e <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    224e:	81 e8       	ldi	r24, 0x81	; 129
    2250:	c8 16       	cp	r12, r24
    2252:	d1 04       	cpc	r13, r1
    2254:	34 f0       	brlt	.+12     	; 0x2262 <Display_balance+0x98>
    2256:	80 e8       	ldi	r24, 0x80	; 128
    2258:	c8 2e       	mov	r12, r24
    225a:	d1 2c       	mov	r13, r1
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    225e:	c1 2c       	mov	r12, r1
    2260:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2262:	27 e3       	ldi	r18, 0x37	; 55
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	42 e0       	ldi	r20, 0x02	; 2
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	71 e0       	ldi	r23, 0x01	; 1
    226e:	8c e0       	ldi	r24, 0x0C	; 12
    2270:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2274:	ee 24       	eor	r14, r14
    2276:	e3 94       	inc	r14
    2278:	00 e4       	ldi	r16, 0x40	; 64
    227a:	20 e8       	ldi	r18, 0x80	; 128
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2288:	05 e1       	ldi	r16, 0x15	; 21
    228a:	25 e1       	ldi	r18, 0x15	; 21
    228c:	46 e1       	ldi	r20, 0x16	; 22
    228e:	66 e3       	ldi	r22, 0x36	; 54
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    2298:	08 e3       	ldi	r16, 0x38	; 56
    229a:	20 e4       	ldi	r18, 0x40	; 64
    229c:	48 e0       	ldi	r20, 0x08	; 8
    229e:	60 e4       	ldi	r22, 0x40	; 64
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    22a8:	00 e2       	ldi	r16, 0x20	; 32
    22aa:	20 e6       	ldi	r18, 0x60	; 96
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	60 e2       	ldi	r22, 0x20	; 32
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    22b8:	01 e0       	ldi	r16, 0x01	; 1
    22ba:	28 e0       	ldi	r18, 0x08	; 8
    22bc:	4c 2f       	mov	r20, r28
    22be:	6c 2d       	mov	r22, r12
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
			clear_buffer(buffer);
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
    22d8:	7e cf       	rjmp	.-260    	; 0x21d6 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	0f 91       	pop	r16
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	08 95       	ret

000022e8 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High speed mode may have left them off
	init_int();
    22e8:	0e 94 0a 2b 	call	0x5614	; 0x5614 <init_int>
	
	while(BUTTON1 != 0)
    22ec:	1f 9b       	sbis	0x03, 7	; 3
    22ee:	0e c1       	rjmp	.+540    	; 0x250c <Display_rcinput+0x224>
	{
		if (BUTTON4 == 0)
    22f0:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    22f2:	0e 94 be 3d 	call	0x7b7c	; 0x7b7c <CenterSticks>
		}

		if (BUTTON3 == 0)
    22f6:	1d 9b       	sbis	0x03, 5	; 3
		{
			SetFailsafe();
    22f8:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <SetFailsafe>
		}

		RxGetChannels();
    22fc:	0e 94 cf 3c 	call	0x799e	; 0x799e <RxGetChannels>

		LCD_Display_Text(19,(const unsigned char*)Verdana8,0,0);
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	6e e1       	ldi	r22, 0x1E	; 30
    230a:	7a e0       	ldi	r23, 0x0A	; 10
    230c:	83 e1       	ldi	r24, 0x13	; 19
    230e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	6e e1       	ldi	r22, 0x1E	; 30
    231c:	7a e0       	ldi	r23, 0x0A	; 10
    231e:	80 e2       	ldi	r24, 0x20	; 32
    2320:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(20,(const unsigned char*)Verdana8,0,20);
    2324:	24 e1       	ldi	r18, 0x14	; 20
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	6e e1       	ldi	r22, 0x1E	; 30
    232e:	7a e0       	ldi	r23, 0x0A	; 10
    2330:	84 e1       	ldi	r24, 0x14	; 20
    2332:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2336:	2e e1       	ldi	r18, 0x1E	; 30
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	6e e1       	ldi	r22, 0x1E	; 30
    2340:	7a e0       	ldi	r23, 0x0A	; 10
    2342:	83 e2       	ldi	r24, 0x23	; 35
    2344:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0);
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	46 e4       	ldi	r20, 0x46	; 70
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	6e e1       	ldi	r22, 0x1E	; 30
    2352:	7a e0       	ldi	r23, 0x0A	; 10
    2354:	8d e6       	ldi	r24, 0x6D	; 109
    2356:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    235a:	2a e0       	ldi	r18, 0x0A	; 10
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	46 e4       	ldi	r20, 0x46	; 70
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	6e e1       	ldi	r22, 0x1E	; 30
    2364:	7a e0       	ldi	r23, 0x0A	; 10
    2366:	8e e6       	ldi	r24, 0x6E	; 110
    2368:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    236c:	24 e1       	ldi	r18, 0x14	; 20
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	46 e4       	ldi	r20, 0x46	; 70
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	6e e1       	ldi	r22, 0x1E	; 30
    2376:	7a e0       	ldi	r23, 0x0A	; 10
    2378:	8f e6       	ldi	r24, 0x6F	; 111
    237a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    237e:	2e e1       	ldi	r18, 0x1E	; 30
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	46 e4       	ldi	r20, 0x46	; 70
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	6e e1       	ldi	r22, 0x1E	; 30
    2388:	7a e0       	ldi	r23, 0x0A	; 10
    238a:	80 e7       	ldi	r24, 0x70	; 112
    238c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    2390:	80 91 b4 07 	lds	r24, 0x07B4
    2394:	90 91 b5 07 	lds	r25, 0x07B5
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2398:	4a e0       	ldi	r20, 0x0A	; 10
    239a:	62 e6       	ldi	r22, 0x62	; 98
    239c:	75 e0       	ldi	r23, 0x05	; 5
    239e:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	45 e2       	ldi	r20, 0x25	; 37
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	6e e1       	ldi	r22, 0x1E	; 30
    23ac:	7a e0       	ldi	r23, 0x0A	; 10
    23ae:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    23b2:	80 91 b8 07 	lds	r24, 0x07B8
    23b6:	90 91 b9 07 	lds	r25, 0x07B9
    23ba:	4a e0       	ldi	r20, 0x0A	; 10
    23bc:	62 e6       	ldi	r22, 0x62	; 98
    23be:	75 e0       	ldi	r23, 0x05	; 5
    23c0:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    23c4:	2a e0       	ldi	r18, 0x0A	; 10
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	45 e2       	ldi	r20, 0x25	; 37
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	6e e1       	ldi	r22, 0x1E	; 30
    23ce:	7a e0       	ldi	r23, 0x0A	; 10
    23d0:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    23d4:	80 91 ba 07 	lds	r24, 0x07BA
    23d8:	90 91 bb 07 	lds	r25, 0x07BB
    23dc:	4a e0       	ldi	r20, 0x0A	; 10
    23de:	62 e6       	ldi	r22, 0x62	; 98
    23e0:	75 e0       	ldi	r23, 0x05	; 5
    23e2:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    23e6:	24 e1       	ldi	r18, 0x14	; 20
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	45 e2       	ldi	r20, 0x25	; 37
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	6e e1       	ldi	r22, 0x1E	; 30
    23f0:	7a e0       	ldi	r23, 0x0A	; 10
    23f2:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    23f6:	80 91 bc 07 	lds	r24, 0x07BC
    23fa:	90 91 bd 07 	lds	r25, 0x07BD
    23fe:	4a e0       	ldi	r20, 0x0A	; 10
    2400:	62 e6       	ldi	r22, 0x62	; 98
    2402:	75 e0       	ldi	r23, 0x05	; 5
    2404:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    2408:	2e e1       	ldi	r18, 0x1E	; 30
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	45 e2       	ldi	r20, 0x25	; 37
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	6e e1       	ldi	r22, 0x1E	; 30
    2412:	7a e0       	ldi	r23, 0x0A	; 10
    2414:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2418:	80 91 be 07 	lds	r24, 0x07BE
    241c:	90 91 bf 07 	lds	r25, 0x07BF
    2420:	4a e0       	ldi	r20, 0x0A	; 10
    2422:	62 e6       	ldi	r22, 0x62	; 98
    2424:	75 e0       	ldi	r23, 0x05	; 5
    2426:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	44 e6       	ldi	r20, 0x64	; 100
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	6e e1       	ldi	r22, 0x1E	; 30
    2434:	7a e0       	ldi	r23, 0x0A	; 10
    2436:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    243a:	80 91 c0 07 	lds	r24, 0x07C0
    243e:	90 91 c1 07 	lds	r25, 0x07C1
    2442:	4a e0       	ldi	r20, 0x0A	; 10
    2444:	62 e6       	ldi	r22, 0x62	; 98
    2446:	75 e0       	ldi	r23, 0x05	; 5
    2448:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    244c:	2a e0       	ldi	r18, 0x0A	; 10
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	44 e6       	ldi	r20, 0x64	; 100
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	6e e1       	ldi	r22, 0x1E	; 30
    2456:	7a e0       	ldi	r23, 0x0A	; 10
    2458:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    245c:	80 91 c2 07 	lds	r24, 0x07C2
    2460:	90 91 c3 07 	lds	r25, 0x07C3
    2464:	4a e0       	ldi	r20, 0x0A	; 10
    2466:	62 e6       	ldi	r22, 0x62	; 98
    2468:	75 e0       	ldi	r23, 0x05	; 5
    246a:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    246e:	24 e1       	ldi	r18, 0x14	; 20
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	44 e6       	ldi	r20, 0x64	; 100
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	6e e1       	ldi	r22, 0x1E	; 30
    2478:	7a e0       	ldi	r23, 0x0A	; 10
    247a:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    247e:	80 91 c4 07 	lds	r24, 0x07C4
    2482:	90 91 c5 07 	lds	r25, 0x07C5
    2486:	4a e0       	ldi	r20, 0x0A	; 10
    2488:	62 e6       	ldi	r22, 0x62	; 98
    248a:	75 e0       	ldi	r23, 0x05	; 5
    248c:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    2490:	2e e1       	ldi	r18, 0x1E	; 30
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	44 e6       	ldi	r20, 0x64	; 100
    2496:	50 e0       	ldi	r21, 0x00	; 0
    2498:	6e e1       	ldi	r22, 0x1E	; 30
    249a:	7a e0       	ldi	r23, 0x0A	; 10
    249c:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>


		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    24a0:	29 e3       	ldi	r18, 0x39	; 57
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	66 e0       	ldi	r22, 0x06	; 6
    24aa:	71 e0       	ldi	r23, 0x01	; 1
    24ac:	8c e0       	ldi	r24, 0x0C	; 12
    24ae:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(21, (const unsigned char*)Verdana8, 40, 55); 	// Failsafe
    24b2:	27 e3       	ldi	r18, 0x37	; 55
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	48 e2       	ldi	r20, 0x28	; 40
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	6e e1       	ldi	r22, 0x1E	; 30
    24bc:	7a e0       	ldi	r23, 0x0A	; 10
    24be:	85 e1       	ldi	r24, 0x15	; 21
    24c0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    24c4:	2b e3       	ldi	r18, 0x3B	; 59
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e5       	ldi	r20, 0x50	; 80
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	66 e0       	ldi	r22, 0x06	; 6
    24ce:	71 e0       	ldi	r23, 0x01	; 1
    24d0:	89 e0       	ldi	r24, 0x09	; 9
    24d2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 100, 55); 	// Cal.
    24d6:	27 e3       	ldi	r18, 0x37	; 55
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	44 e6       	ldi	r20, 0x64	; 100
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	6e e1       	ldi	r22, 0x1E	; 30
    24e0:	7a e0       	ldi	r23, 0x0A	; 10
    24e2:	8c e3       	ldi	r24, 0x3C	; 60
    24e4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 119, 59); 	// Down
    24e8:	2b e3       	ldi	r18, 0x3B	; 59
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	47 e7       	ldi	r20, 0x77	; 119
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	66 e0       	ldi	r22, 0x06	; 6
    24f2:	71 e0       	ldi	r23, 0x01	; 1
    24f4:	89 e0       	ldi	r24, 0x09	; 9
    24f6:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
		clear_buffer(buffer);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
    250a:	f0 ce       	rjmp	.-544    	; 0x22ec <Display_rcinput+0x4>
	}
}
    250c:	08 95       	ret

0000250e <Display_sensors>:
//************************************************************
// Code
//************************************************************

void Display_sensors(void)
{
    250e:	cf 93       	push	r28
	bool	first_time = true;
		
	clear_buffer(buffer);
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	91 e0       	ldi	r25, 0x01	; 1
    2514:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
// Code
//************************************************************

void Display_sensors(void)
{
	bool	first_time = true;
    2518:	c1 e0       	ldi	r28, 0x01	; 1
		
	clear_buffer(buffer);
		
	// While BACK not pressed
	while(BUTTON1 != 0)
    251a:	1f 9b       	sbis	0x03, 7	; 3
    251c:	df c0       	rjmp	.+446    	; 0x26dc <Display_sensors+0x1ce>
	{
		ReadGyros();
    251e:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <ReadGyros>
		ReadAcc();
    2522:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	45 e2       	ldi	r20, 0x25	; 37
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	6e e1       	ldi	r22, 0x1E	; 30
    2530:	7a e0       	ldi	r23, 0x0A	; 10
    2532:	8a e1       	ldi	r24, 0x1A	; 26
    2534:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4d e4       	ldi	r20, 0x4D	; 77
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	6e e1       	ldi	r22, 0x1E	; 30
    2542:	7a e0       	ldi	r23, 0x0A	; 10
    2544:	8e e1       	ldi	r24, 0x1E	; 30
    2546:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    254a:	2d e0       	ldi	r18, 0x0D	; 13
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	45 e0       	ldi	r20, 0x05	; 5
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	6e e1       	ldi	r22, 0x1E	; 30
    2554:	7a e0       	ldi	r23, 0x0A	; 10
    2556:	8b e1       	ldi	r24, 0x1B	; 27
    2558:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    255c:	27 e1       	ldi	r18, 0x17	; 23
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	45 e0       	ldi	r20, 0x05	; 5
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	6e e1       	ldi	r22, 0x1E	; 30
    2566:	7a e0       	ldi	r23, 0x0A	; 10
    2568:	8c e1       	ldi	r24, 0x1C	; 28
    256a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    256e:	21 e2       	ldi	r18, 0x21	; 33
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	45 e0       	ldi	r20, 0x05	; 5
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	6e e1       	ldi	r22, 0x1E	; 30
    2578:	7a e0       	ldi	r23, 0x0A	; 10
    257a:	8d e1       	ldi	r24, 0x1D	; 29
    257c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
    2580:	4a e0       	ldi	r20, 0x0A	; 10
    2582:	62 e6       	ldi	r22, 0x62	; 98
    2584:	75 e0       	ldi	r23, 0x05	; 5
    2586:	80 91 7b 05 	lds	r24, 0x057B
    258a:	90 91 7c 05 	lds	r25, 0x057C
    258e:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2592:	2d e0       	ldi	r18, 0x0D	; 13
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	48 e2       	ldi	r20, 0x28	; 40
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	6e e1       	ldi	r22, 0x1E	; 30
    259c:	7a e0       	ldi	r23, 0x0A	; 10
    259e:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
    25a2:	4a e0       	ldi	r20, 0x0A	; 10
    25a4:	62 e6       	ldi	r22, 0x62	; 98
    25a6:	75 e0       	ldi	r23, 0x05	; 5
    25a8:	80 91 7d 05 	lds	r24, 0x057D
    25ac:	90 91 7e 05 	lds	r25, 0x057E
    25b0:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    25b4:	27 e1       	ldi	r18, 0x17	; 23
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	48 e2       	ldi	r20, 0x28	; 40
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	6e e1       	ldi	r22, 0x1E	; 30
    25be:	7a e0       	ldi	r23, 0x0A	; 10
    25c0:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
    25c4:	4a e0       	ldi	r20, 0x0A	; 10
    25c6:	62 e6       	ldi	r22, 0x62	; 98
    25c8:	75 e0       	ldi	r23, 0x05	; 5
    25ca:	80 91 7f 05 	lds	r24, 0x057F
    25ce:	90 91 80 05 	lds	r25, 0x0580
    25d2:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    25d6:	21 e2       	ldi	r18, 0x21	; 33
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	48 e2       	ldi	r20, 0x28	; 40
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	6e e1       	ldi	r22, 0x1E	; 30
    25e0:	7a e0       	ldi	r23, 0x0A	; 10
    25e2:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
    25e6:	4a e0       	ldi	r20, 0x0A	; 10
    25e8:	62 e6       	ldi	r22, 0x62	; 98
    25ea:	75 e0       	ldi	r23, 0x05	; 5
    25ec:	80 91 36 05 	lds	r24, 0x0536
    25f0:	90 91 37 05 	lds	r25, 0x0537
    25f4:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    25f8:	2d e0       	ldi	r18, 0x0D	; 13
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e5       	ldi	r20, 0x50	; 80
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	6e e1       	ldi	r22, 0x1E	; 30
    2602:	7a e0       	ldi	r23, 0x0A	; 10
    2604:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
    2608:	4a e0       	ldi	r20, 0x0A	; 10
    260a:	62 e6       	ldi	r22, 0x62	; 98
    260c:	75 e0       	ldi	r23, 0x05	; 5
    260e:	80 91 38 05 	lds	r24, 0x0538
    2612:	90 91 39 05 	lds	r25, 0x0539
    2616:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    261a:	27 e1       	ldi	r18, 0x17	; 23
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e5       	ldi	r20, 0x50	; 80
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	6e e1       	ldi	r22, 0x1E	; 30
    2624:	7a e0       	ldi	r23, 0x0A	; 10
    2626:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
    262a:	4a e0       	ldi	r20, 0x0A	; 10
    262c:	62 e6       	ldi	r22, 0x62	; 98
    262e:	75 e0       	ldi	r23, 0x05	; 5
    2630:	80 91 3a 05 	lds	r24, 0x053A
    2634:	90 91 3b 05 	lds	r25, 0x053B
    2638:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    263c:	21 e2       	ldi	r18, 0x21	; 33
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e5       	ldi	r20, 0x50	; 80
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	6e e1       	ldi	r22, 0x1E	; 30
    2646:	7a e0       	ldi	r23, 0x0A	; 10
    2648:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    264c:	29 e3       	ldi	r18, 0x39	; 57
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	66 e0       	ldi	r22, 0x06	; 6
    2656:	71 e0       	ldi	r23, 0x01	; 1
    2658:	8c e0       	ldi	r24, 0x0C	; 12
    265a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(37, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate
    265e:	27 e3       	ldi	r18, 0x37	; 55
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4b e4       	ldi	r20, 0x4B	; 75
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	6e e1       	ldi	r22, 0x1E	; 30
    2668:	7a e0       	ldi	r23, 0x0A	; 10
    266a:	85 e2       	ldi	r24, 0x25	; 37
    266c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    2670:	27 e3       	ldi	r18, 0x37	; 55
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4c e6       	ldi	r20, 0x6C	; 108
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	6e e1       	ldi	r22, 0x1E	; 30
    267a:	7a e0       	ldi	r23, 0x0A	; 10
    267c:	8c e3       	ldi	r24, 0x3C	; 60
    267e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
		clear_buffer(buffer);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>

		if (first_time)
    2692:	c1 11       	cpse	r28, r1
		{
			// Wait until finger off button
			Wait_BUTTON4();
    2694:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <Wait_BUTTON4>
			
			first_time = false;
		}
		
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2698:	1c 99       	sbic	0x03, 4	; 3
    269a:	10 c0       	rjmp	.+32     	; 0x26bc <Display_sensors+0x1ae>
		{
			// Wait until finger off button
			Wait_BUTTON4();
    269c:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <Wait_BUTTON4>
    26a0:	2f e3       	ldi	r18, 0x3F	; 63
    26a2:	82 e4       	ldi	r24, 0x42	; 66
    26a4:	9f e0       	ldi	r25, 0x0F	; 15
    26a6:	21 50       	subi	r18, 0x01	; 1
    26a8:	80 40       	sbci	r24, 0x00	; 0
    26aa:	90 40       	sbci	r25, 0x00	; 0
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <Display_sensors+0x198>
    26ae:	00 c0       	rjmp	.+0      	; 0x26b0 <Display_sensors+0x1a2>
    26b0:	00 00       	nop
			
			// Pause until steady
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();
    26b2:	0e 94 0e 20 	call	0x401c	; 0x401c <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    26bc:	1d 99       	sbic	0x03, 5	; 3
    26be:	0c c0       	rjmp	.+24     	; 0x26d8 <Display_sensors+0x1ca>
    26c0:	2f e3       	ldi	r18, 0x3F	; 63
    26c2:	82 e4       	ldi	r24, 0x42	; 66
    26c4:	9f e0       	ldi	r25, 0x0F	; 15
    26c6:	21 50       	subi	r18, 0x01	; 1
    26c8:	80 40       	sbci	r24, 0x00	; 0
    26ca:	90 40       	sbci	r25, 0x00	; 0
    26cc:	e1 f7       	brne	.-8      	; 0x26c6 <Display_sensors+0x1b8>
    26ce:	00 c0       	rjmp	.+0      	; 0x26d0 <Display_sensors+0x1c2>
    26d0:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CalibrateAcc>
    26d8:	c0 e0       	ldi	r28, 0x00	; 0
    26da:	1f cf       	rjmp	.-450    	; 0x251a <Display_sensors+0xc>
		}
	}
}
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <Display_status+0x14>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <Display_status+0x16>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	int16_t temp, range, scale;
	uint16_t vbat_temp;
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>

	// Display text
	LCD_Display_Text(4,(const unsigned char*)Verdana8,0,0); 	// Preset
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	6e e1       	ldi	r22, 0x1E	; 30
    270c:	7a e0       	ldi	r23, 0x0A	; 10
    270e:	84 e0       	ldi	r24, 0x04	; 4
    2710:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,11); 	// Version text
    2714:	2b e0       	ldi	r18, 0x0B	; 11
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	6e e1       	ldi	r22, 0x1E	; 30
    271e:	7a e0       	ldi	r23, 0x0A	; 10
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	LCD_Display_Text(5,(const unsigned char*)Verdana8,0,22); 	// RX sync
    2726:	26 e1       	ldi	r18, 0x16	; 22
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	6e e1       	ldi	r22, 0x1E	; 30
    2730:	7a e0       	ldi	r23, 0x0A	; 10
    2732:	85 e0       	ldi	r24, 0x05	; 5
    2734:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,33); 	// Profile
    2738:	21 e2       	ldi	r18, 0x21	; 33
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	6e e1       	ldi	r22, 0x1E	; 30
    2742:	7a e0       	ldi	r23, 0x0A	; 10
    2744:	86 e0       	ldi	r24, 0x06	; 6
    2746:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    274a:	2b e3       	ldi	r18, 0x3B	; 59
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	66 e0       	ldi	r22, 0x06	; 6
    2754:	71 e0       	ldi	r23, 0x01	; 1
    2756:	89 e0       	ldi	r24, 0x09	; 9
    2758:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    275c:	27 e3       	ldi	r18, 0x37	; 55
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a e0       	ldi	r20, 0x0A	; 10
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	6e e1       	ldi	r22, 0x1E	; 30
    2766:	7a e0       	ldi	r23, 0x0A	; 10
    2768:	8e e0       	ldi	r24, 0x0E	; 14
    276a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (22 + Config.MixMode), 45, 0);
    276e:	40 91 75 06 	lds	r20, 0x0675
    2772:	4a 5e       	subi	r20, 0xEA	; 234
    2774:	00 e0       	ldi	r16, 0x00	; 0
    2776:	2d e2       	ldi	r18, 0x2D	; 45
    2778:	61 e0       	ldi	r22, 0x01	; 1
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 c0 2b 	call	0x5780	; 0x5780 <print_menu_text>
	print_menu_text(0, 1, (48 + Config.RxMode), 45, 22);
    2782:	40 91 02 06 	lds	r20, 0x0602
    2786:	40 5d       	subi	r20, 0xD0	; 208
    2788:	06 e1       	ldi	r16, 0x16	; 22
    278a:	2d e2       	ldi	r18, 0x2D	; 45
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 c0 2b 	call	0x5780	; 0x5780 <print_menu_text>
	mugui_lcd_puts(itoa((Config.Flight + 1),pBuffer,10),(const unsigned char*)Verdana8,45,33);
    2796:	80 91 4a 07 	lds	r24, 0x074A
    279a:	99 27       	eor	r25, r25
    279c:	87 fd       	sbrc	r24, 7
    279e:	90 95       	com	r25
    27a0:	4a e0       	ldi	r20, 0x0A	; 10
    27a2:	62 e6       	ldi	r22, 0x62	; 98
    27a4:	75 e0       	ldi	r23, 0x05	; 5
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    27ac:	21 e2       	ldi	r18, 0x21	; 33
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	4d e2       	ldi	r20, 0x2D	; 45
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	6e e1       	ldi	r22, 0x1E	; 30
    27b6:	7a e0       	ldi	r23, 0x0A	; 10
    27b8:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>

	// Interrupt counter
	if (Config.RxMode == PWM)
    27bc:	80 91 02 06 	lds	r24, 0x0602
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	d1 f4       	brne	.+52     	; 0x27f8 <Display_status+0x118>
	{
		LCD_Display_Text(18,(const unsigned char*)Verdana8,0,44); // Interrupt counter text
    27c4:	2c e2       	ldi	r18, 0x2C	; 44
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	6e e1       	ldi	r22, 0x1E	; 30
    27ce:	7a e0       	ldi	r23, 0x0A	; 10
    27d0:	82 e1       	ldi	r24, 0x12	; 18
    27d2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,45,44); // Interrupt counter
    27d6:	80 91 10 05 	lds	r24, 0x0510
    27da:	90 91 11 05 	lds	r25, 0x0511
    27de:	4a e0       	ldi	r20, 0x0A	; 10
    27e0:	62 e6       	ldi	r22, 0x62	; 98
    27e2:	75 e0       	ldi	r23, 0x05	; 5
    27e4:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    27e8:	2c e2       	ldi	r18, 0x2C	; 44
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4d e2       	ldi	r20, 0x2D	; 45
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	6e e1       	ldi	r22, 0x1E	; 30
    27f2:	7a e0       	ldi	r23, 0x0A	; 10
    27f4:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
	}

	// Draw battery
	drawrect(buffer, 100,4, 28, 50, 1);					// Battery body
    27f8:	ee 24       	eor	r14, r14
    27fa:	e3 94       	inc	r14
    27fc:	02 e3       	ldi	r16, 0x32	; 50
    27fe:	2c e1       	ldi	r18, 0x1C	; 28
    2800:	44 e0       	ldi	r20, 0x04	; 4
    2802:	64 e6       	ldi	r22, 0x64	; 100
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <drawrect>
	drawrect(buffer, 110,0, 8, 5, 1);					// Battery terminal
    280c:	05 e0       	ldi	r16, 0x05	; 5
    280e:	28 e0       	ldi	r18, 0x08	; 8
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	6e e6       	ldi	r22, 0x6E	; 110
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <drawrect>

	vbat_temp = GetVbat();
    281c:	0e 94 12 40 	call	0x8024	; 0x8024 <GetVbat>
    2820:	6c 01       	movw	r12, r24

	// Calculate battery voltage limits
	range = SystemVoltage - Config.PowerTriggerActual;
    2822:	80 91 1e 05 	lds	r24, 0x051E
    2826:	90 91 1f 05 	lds	r25, 0x051F
    282a:	20 91 6f 06 	lds	r18, 0x066F
    282e:	30 91 70 06 	lds	r19, 0x0670
	scale = range / 50;

	// Look out for that divide-by-zero... :)
	if ((vbat_temp >= Config.PowerTriggerActual) && (scale > 0))
    2832:	c2 16       	cp	r12, r18
    2834:	d3 06       	cpc	r13, r19
    2836:	a0 f0       	brcs	.+40     	; 0x2860 <Display_status+0x180>
	drawrect(buffer, 110,0, 8, 5, 1);					// Battery terminal

	vbat_temp = GetVbat();

	// Calculate battery voltage limits
	range = SystemVoltage - Config.PowerTriggerActual;
    2838:	82 1b       	sub	r24, r18
    283a:	93 0b       	sbc	r25, r19
	scale = range / 50;
    283c:	62 e3       	ldi	r22, 0x32	; 50
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	0e 94 60 42 	call	0x84c0	; 0x84c0 <__divmodhi4>

	// Look out for that divide-by-zero... :)
	if ((vbat_temp >= Config.PowerTriggerActual) && (scale > 0))
    2844:	16 16       	cp	r1, r22
    2846:	17 06       	cpc	r1, r23
    2848:	5c f4       	brge	.+22     	; 0x2860 <Display_status+0x180>
	{
		temp = (vbat_temp - Config.PowerTriggerActual) / scale;
    284a:	c6 01       	movw	r24, r12
    284c:	82 1b       	sub	r24, r18
    284e:	93 0b       	sbc	r25, r19
    2850:	0e 94 4c 42 	call	0x8498	; 0x8498 <__udivmodhi4>
	else
	{
		temp = 0;
	}

	if (temp > 50) temp = 50;
    2854:	63 33       	cpi	r22, 0x33	; 51
    2856:	71 05       	cpc	r23, r1
    2858:	2c f0       	brlt	.+10     	; 0x2864 <Display_status+0x184>
    285a:	62 e3       	ldi	r22, 0x32	; 50
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <Display_status+0x184>
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	70 e0       	ldi	r23, 0x00	; 0

	fillrect(buffer, 100,54-temp, 28, temp, 1);				// Battery filler (max is 60)
    2864:	46 e3       	ldi	r20, 0x36	; 54
    2866:	46 1b       	sub	r20, r22
    2868:	ee 24       	eor	r14, r14
    286a:	e3 94       	inc	r14
    286c:	06 2f       	mov	r16, r22
    286e:	2c e1       	ldi	r18, 0x1C	; 28
    2870:	64 e6       	ldi	r22, 0x64	; 100
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <fillrect>

	// Display voltage
	uint8_t x_loc = 102;	// X location of voltage display
	uint8_t y_loc = 55;		// Y location of voltage display

	temp = vbat_temp/100;	// Display whole decimal part first
    287a:	c6 01       	movw	r24, r12
    287c:	64 e6       	ldi	r22, 0x64	; 100
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	0e 94 4c 42 	call	0x8498	; 0x8498 <__udivmodhi4>
    2884:	7b 01       	movw	r14, r22
    2886:	4a e0       	ldi	r20, 0x0A	; 10
    2888:	62 e6       	ldi	r22, 0x62	; 98
    288a:	75 e0       	ldi	r23, 0x05	; 5
    288c:	c7 01       	movw	r24, r14
    288e:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2892:	ae 01       	movw	r20, r28
    2894:	4f 5f       	subi	r20, 0xFF	; 255
    2896:	5f 4f       	sbci	r21, 0xFF	; 255
    2898:	6e e1       	ldi	r22, 0x1E	; 30
    289a:	7a e0       	ldi	r23, 0x0A	; 10
    289c:	0e 94 1f 38 	call	0x703e	; 0x703e <mugui_text_sizestring>
    28a0:	4a e0       	ldi	r20, 0x0A	; 10
    28a2:	62 e6       	ldi	r22, 0x62	; 98
    28a4:	75 e0       	ldi	r23, 0x05	; 5
    28a6:	c7 01       	movw	r24, r14
    28a8:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    28ac:	27 e3       	ldi	r18, 0x37	; 55
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	46 e6       	ldi	r20, 0x66	; 102
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	6e e1       	ldi	r22, 0x1E	; 30
    28b6:	7a e0       	ldi	r23, 0x0A	; 10
    28b8:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    28bc:	2c e9       	ldi	r18, 0x9C	; 156
    28be:	a7 01       	movw	r20, r14
    28c0:	24 03       	mulsu	r18, r20
    28c2:	80 01       	movw	r16, r0
    28c4:	25 9f       	mul	r18, r21
    28c6:	10 0d       	add	r17, r0
    28c8:	11 24       	eor	r1, r1
    28ca:	0c 0d       	add	r16, r12
    28cc:	1d 1d       	adc	r17, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    28ce:	c9 80       	ldd	r12, Y+1	; 0x01
    28d0:	dd 24       	eor	r13, r13
    28d2:	c7 fc       	sbrc	r12, 7
    28d4:	d0 94       	com	r13
    28d6:	56 e6       	ldi	r21, 0x66	; 102
    28d8:	c5 0e       	add	r12, r21
    28da:	d1 1c       	adc	r13, r1
    28dc:	27 e3       	ldi	r18, 0x37	; 55
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	a6 01       	movw	r20, r12
    28e2:	6e e1       	ldi	r22, 0x1E	; 30
    28e4:	7a e0       	ldi	r23, 0x0A	; 10
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    28ec:	ae 01       	movw	r20, r28
    28ee:	4f 5f       	subi	r20, 0xFF	; 255
    28f0:	5f 4f       	sbci	r21, 0xFF	; 255
    28f2:	6e e1       	ldi	r22, 0x1E	; 30
    28f4:	7a e0       	ldi	r23, 0x0A	; 10
    28f6:	87 e0       	ldi	r24, 0x07	; 7
    28f8:	95 e0       	ldi	r25, 0x05	; 5
    28fa:	0e 94 1f 38 	call	0x703e	; 0x703e <mugui_text_sizestring>
	pos3 = size.x;
    28fe:	e9 80       	ldd	r14, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2900:	ae 01       	movw	r20, r28
    2902:	4f 5f       	subi	r20, 0xFF	; 255
    2904:	5f 4f       	sbci	r21, 0xFF	; 255
    2906:	6e e1       	ldi	r22, 0x1E	; 30
    2908:	7a e0       	ldi	r23, 0x0A	; 10
    290a:	89 e0       	ldi	r24, 0x09	; 9
    290c:	95 e0       	ldi	r25, 0x05	; 5
    290e:	0e 94 1f 38 	call	0x703e	; 0x703e <mugui_text_sizestring>
	pos2 = size.x;
    2912:	b9 80       	ldd	r11, Y+1	; 0x01
    2914:	ff 24       	eor	r15, r15
    2916:	e7 fc       	sbrc	r14, 7
    2918:	f0 94       	com	r15

	if (vbat_temp >= 10)
    291a:	0a 30       	cpi	r16, 0x0A	; 10
    291c:	11 05       	cpc	r17, r1
    291e:	40 f0       	brcs	.+16     	; 0x2930 <Display_status+0x250>
    2920:	4a e0       	ldi	r20, 0x0A	; 10
    2922:	62 e6       	ldi	r22, 0x62	; 98
    2924:	75 e0       	ldi	r23, 0x05	; 5
    2926:	c8 01       	movw	r24, r16
    2928:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    292c:	a6 01       	movw	r20, r12
    292e:	15 c0       	rjmp	.+42     	; 0x295a <Display_status+0x27a>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2930:	a6 01       	movw	r20, r12
    2932:	4e 0d       	add	r20, r14
    2934:	5f 1d       	adc	r21, r15
    2936:	27 e3       	ldi	r18, 0x37	; 55
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	6e e1       	ldi	r22, 0x1E	; 30
    293c:	7a e0       	ldi	r23, 0x0A	; 10
    293e:	88 e0       	ldi	r24, 0x08	; 8
    2940:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
    2944:	4a e0       	ldi	r20, 0x0A	; 10
    2946:	62 e6       	ldi	r22, 0x62	; 98
    2948:	75 e0       	ldi	r23, 0x05	; 5
    294a:	c8 01       	movw	r24, r16
    294c:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2950:	a6 01       	movw	r20, r12
    2952:	4b 0d       	add	r20, r11
    2954:	51 1d       	adc	r21, r1
    2956:	b7 fc       	sbrc	r11, 7
    2958:	5a 95       	dec	r21
    295a:	4e 0d       	add	r20, r14
    295c:	5f 1d       	adc	r21, r15
    295e:	27 e3       	ldi	r18, 0x37	; 55
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	6e e1       	ldi	r22, 0x1E	; 30
    2964:	7a e0       	ldi	r23, 0x0A	; 10
    2966:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
	}

	// Draw error messages, if any
	if (General_error != 0)
    296a:	80 91 15 05 	lds	r24, 0x0515
    296e:	88 23       	and	r24, r24
    2970:	09 f4       	brne	.+2      	; 0x2974 <Display_status+0x294>
    2972:	67 c0       	rjmp	.+206    	; 0x2a42 <Display_status+0x362>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    2974:	e1 2c       	mov	r14, r1
    2976:	00 e3       	ldi	r16, 0x30	; 48
    2978:	20 e6       	ldi	r18, 0x60	; 96
    297a:	48 e0       	ldi	r20, 0x08	; 8
    297c:	6e e0       	ldi	r22, 0x0E	; 14
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    2986:	ee 24       	eor	r14, r14
    2988:	e3 94       	inc	r14
    298a:	20 e6       	ldi	r18, 0x60	; 96
    298c:	48 e0       	ldi	r20, 0x08	; 8
    298e:	6e e0       	ldi	r22, 0x0E	; 14
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <drawrect>

		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2998:	80 91 15 05 	lds	r24, 0x0515
    299c:	84 ff       	sbrs	r24, 4
    299e:	11 c0       	rjmp	.+34     	; 0x29c2 <Display_status+0x2e2>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14); // Battery
    29a0:	2e e0       	ldi	r18, 0x0E	; 14
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	41 e2       	ldi	r20, 0x21	; 33
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	60 e7       	ldi	r22, 0x70	; 112
    29aa:	71 e0       	ldi	r23, 0x01	; 1
    29ac:	86 e8       	ldi	r24, 0x86	; 134
    29ae:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
			LCD_Display_Text(119,(const unsigned char*)Verdana14,46,34); // Low
    29b2:	22 e2       	ldi	r18, 0x22	; 34
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4e e2       	ldi	r20, 0x2E	; 46
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	60 e7       	ldi	r22, 0x70	; 112
    29bc:	71 e0       	ldi	r23, 0x01	; 1
    29be:	87 e7       	ldi	r24, 0x77	; 119
    29c0:	3e c0       	rjmp	.+124    	; 0x2a3e <Display_status+0x35e>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    29c2:	80 91 15 05 	lds	r24, 0x0515
    29c6:	82 ff       	sbrs	r24, 2
    29c8:	11 c0       	rjmp	.+34     	; 0x29ec <Display_status+0x30c>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); // No
    29ca:	2d e0       	ldi	r18, 0x0D	; 13
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	43 e3       	ldi	r20, 0x33	; 51
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	60 e7       	ldi	r22, 0x70	; 112
    29d4:	71 e0       	ldi	r23, 0x01	; 1
    29d6:	8b e4       	ldi	r24, 0x4B	; 75
    29d8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33); // Signal
    29dc:	21 e2       	ldi	r18, 0x21	; 33
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	47 e2       	ldi	r20, 0x27	; 39
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	60 e7       	ldi	r22, 0x70	; 112
    29e6:	71 e0       	ldi	r23, 0x01	; 1
    29e8:	8c e4       	ldi	r24, 0x4C	; 76
    29ea:	29 c0       	rjmp	.+82     	; 0x2a3e <Display_status+0x35e>
		}
		else if((General_error & (1 << LOST_MODEL)) != 0)
    29ec:	80 91 15 05 	lds	r24, 0x0515
    29f0:	83 ff       	sbrs	r24, 3
    29f2:	11 c0       	rjmp	.+34     	; 0x2a16 <Display_status+0x336>
		{
			LCD_Display_Text(131,(const unsigned char*)Verdana14,45,14); // Lost
    29f4:	2e e0       	ldi	r18, 0x0E	; 14
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	4d e2       	ldi	r20, 0x2D	; 45
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	60 e7       	ldi	r22, 0x70	; 112
    29fe:	71 e0       	ldi	r23, 0x01	; 1
    2a00:	83 e8       	ldi	r24, 0x83	; 131
    2a02:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
			LCD_Display_Text(132,(const unsigned char*)Verdana14,40,34);// Model
    2a06:	22 e2       	ldi	r18, 0x22	; 34
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	48 e2       	ldi	r20, 0x28	; 40
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	60 e7       	ldi	r22, 0x70	; 112
    2a10:	71 e0       	ldi	r23, 0x01	; 1
    2a12:	84 e8       	ldi	r24, 0x84	; 132
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <Display_status+0x35e>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2a16:	80 91 15 05 	lds	r24, 0x0515
    2a1a:	81 ff       	sbrs	r24, 1
    2a1c:	12 c0       	rjmp	.+36     	; 0x2a42 <Display_status+0x362>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14); // Throttle
    2a1e:	2e e0       	ldi	r18, 0x0E	; 14
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4c e1       	ldi	r20, 0x1C	; 28
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	60 e7       	ldi	r22, 0x70	; 112
    2a28:	71 e0       	ldi	r23, 0x01	; 1
    2a2a:	89 e6       	ldi	r24, 0x69	; 105
    2a2c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
			LCD_Display_Text(121,(const unsigned char*)Verdana14,46,34); // High
    2a30:	22 e2       	ldi	r18, 0x22	; 34
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4e e2       	ldi	r20, 0x2E	; 46
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	60 e7       	ldi	r22, 0x70	; 112
    2a3a:	71 e0       	ldi	r23, 0x01	; 1
    2a3c:	89 e7       	ldi	r24, 0x79	; 121
    2a3e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
	clear_buffer(buffer);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	df 90       	pop	r13
    2a68:	cf 90       	pop	r12
    2a6a:	bf 90       	pop	r11
    2a6c:	08 95       	ret

00002a6e <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2a6e:	9f 92       	push	r9
    2a70:	af 92       	push	r10
    2a72:	bf 92       	push	r11
    2a74:	cf 92       	push	r12
    2a76:	df 92       	push	r13
    2a78:	ef 92       	push	r14
    2a7a:	ff 92       	push	r15
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2a84:	c0 90 58 07 	lds	r12, 0x0758
	temp_2ndaileron = Config.SecAileronPol;
    2a88:	d0 90 59 07 	lds	r13, 0x0759
	temp_elevator = Config.ElevatorPol;
    2a8c:	f0 90 5a 07 	lds	r15, 0x075A
	temp_rudder = Config.RudderPol;
    2a90:	90 90 5b 07 	lds	r9, 0x075B

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2a94:	10 92 58 07 	sts	0x0758, r1
	Config.SecAileronPol = NORMAL;
    2a98:	10 92 59 07 	sts	0x0759, r1
	Config.ElevatorPol =  NORMAL;
    2a9c:	10 92 5a 07 	sts	0x075A, r1
	Config.RudderPol = NORMAL;
    2aa0:	10 92 5b 07 	sts	0x075B, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2aa4:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_2ndaileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2aa6:	c0 e0       	ldi	r28, 0x00	; 0
	Config.SecAileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
    2aa8:	1f 9b       	sbis	0x03, 7	; 3
    2aaa:	de c0       	rjmp	.+444    	; 0x2c68 <Display_sticks+0x1fa>
    2aac:	c1 11       	cpse	r28, r1
    2aae:	de c0       	rjmp	.+444    	; 0x2c6c <Display_sticks+0x1fe>
	{
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
    2ab8:	92 e0       	ldi	r25, 0x02	; 2
    2aba:	b9 2e       	mov	r11, r25
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		offset = 0;
    2abc:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2abe:	61 e1       	ldi	r22, 0x11	; 17
    2ac0:	61 0f       	add	r22, r17
    2ac2:	ee 24       	eor	r14, r14
    2ac4:	e3 94       	inc	r14
    2ac6:	08 e2       	ldi	r16, 0x28	; 40
    2ac8:	28 e2       	ldi	r18, 0x28	; 40
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2ad4:	86 e2       	ldi	r24, 0x26	; 38
    2ad6:	a8 2e       	mov	r10, r24
    2ad8:	a1 0e       	add	r10, r17
    2ada:	20 e3       	ldi	r18, 0x30	; 48
    2adc:	21 0f       	add	r18, r17
    2ade:	03 e0       	ldi	r16, 0x03	; 3
    2ae0:	44 e1       	ldi	r20, 0x14	; 20
    2ae2:	6a 2d       	mov	r22, r10
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2aec:	28 e3       	ldi	r18, 0x38	; 56
    2aee:	21 0f       	add	r18, r17
    2af0:	69 e2       	ldi	r22, 0x29	; 41
    2af2:	61 0f       	add	r22, r17
    2af4:	06 e0       	ldi	r16, 0x06	; 6
    2af6:	45 e1       	ldi	r20, 0x15	; 21
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	91 e0       	ldi	r25, 0x01	; 1
    2afc:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
    2b00:	01 e0       	ldi	r16, 0x01	; 1
    2b02:	22 e0       	ldi	r18, 0x02	; 2
    2b04:	45 e1       	ldi	r20, 0x15	; 21
    2b06:	6a 2d       	mov	r22, r10
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2b10:	63 e3       	ldi	r22, 0x33	; 51
    2b12:	61 0f       	add	r22, r17
    2b14:	24 e0       	ldi	r18, 0x04	; 4
    2b16:	45 e0       	ldi	r20, 0x05	; 5
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <fillcircle>
    2b20:	ba 94       	dec	r11

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <Display_sticks+0xba>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			offset = 52;
    2b24:	14 e3       	ldi	r17, 0x34	; 52
    2b26:	cb cf       	rjmp	.-106    	; 0x2abe <Display_sticks+0x50>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2b28:	29 e3       	ldi	r18, 0x39	; 57
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	66 e0       	ldi	r22, 0x06	; 6
    2b32:	71 e0       	ldi	r23, 0x01	; 1
    2b34:	8c e0       	ldi	r24, 0x0C	; 12
    2b36:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2b3a:	0e 94 cf 3c 	call	0x799e	; 0x799e <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2b3e:	80 91 b8 07 	lds	r24, 0x07B8
    2b42:	90 91 b9 07 	lds	r25, 0x07B9
    2b46:	80 33       	cpi	r24, 0x30	; 48
    2b48:	98 4f       	sbci	r25, 0xF8	; 248
    2b4a:	3c f0       	brlt	.+14     	; 0x2b5a <Display_sticks+0xec>
    2b4c:	80 91 b8 07 	lds	r24, 0x07B8
    2b50:	90 91 b9 07 	lds	r25, 0x07B9
    2b54:	81 3d       	cpi	r24, 0xD1	; 209
    2b56:	97 40       	sbci	r25, 0x07	; 7
    2b58:	64 f0       	brlt	.+24     	; 0x2b72 <Display_sticks+0x104>
    2b5a:	d1 11       	cpse	r29, r1
    2b5c:	0a c0       	rjmp	.+20     	; 0x2b72 <Display_sticks+0x104>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
    2b5e:	2b e2       	ldi	r18, 0x2B	; 43
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4e e0       	ldi	r20, 0x0E	; 14
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	60 e7       	ldi	r22, 0x70	; 112
    2b68:	71 e0       	ldi	r23, 0x01	; 1
    2b6a:	87 e8       	ldi	r24, 0x87	; 135
    2b6c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
    2b70:	76 c0       	rjmp	.+236    	; 0x2c5e <Display_sticks+0x1f0>
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2b72:	80 91 b8 07 	lds	r24, 0x07B8
    2b76:	90 91 b9 07 	lds	r25, 0x07B9
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
    2b7a:	84 3f       	cpi	r24, 0xF4	; 244
    2b7c:	91 40       	sbci	r25, 0x01	; 1
    2b7e:	3c f4       	brge	.+14     	; 0x2b8e <Display_sticks+0x120>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2b80:	80 91 b8 07 	lds	r24, 0x07B8
    2b84:	90 91 b9 07 	lds	r25, 0x07B9
    2b88:	8d 30       	cpi	r24, 0x0D	; 13
    2b8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b8c:	e4 f4       	brge	.+56     	; 0x2bc6 <Display_sticks+0x158>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2b8e:	80 91 ba 07 	lds	r24, 0x07BA
    2b92:	90 91 bb 07 	lds	r25, 0x07BB
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal?"
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
    2b96:	84 3f       	cpi	r24, 0xF4	; 244
    2b98:	91 40       	sbci	r25, 0x01	; 1
    2b9a:	3c f4       	brge	.+14     	; 0x2baa <Display_sticks+0x13c>
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2b9c:	80 91 ba 07 	lds	r24, 0x07BA
    2ba0:	90 91 bb 07 	lds	r25, 0x07BB
    2ba4:	8d 30       	cpi	r24, 0x0D	; 13
    2ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba8:	74 f4       	brge	.+28     	; 0x2bc6 <Display_sticks+0x158>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
    2baa:	80 91 bc 07 	lds	r24, 0x07BC
    2bae:	90 91 bd 07 	lds	r25, 0x07BD
			}

			// Sticks have not moved far enough but RC being received
			else if (
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
    2bb2:	84 3f       	cpi	r24, 0xF4	; 244
    2bb4:	91 40       	sbci	r25, 0x01	; 1
    2bb6:	94 f4       	brge	.+36     	; 0x2bdc <Display_sticks+0x16e>
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
    2bb8:	80 91 bc 07 	lds	r24, 0x07BC
    2bbc:	90 91 bd 07 	lds	r25, 0x07BD
    2bc0:	8d 30       	cpi	r24, 0x0D	; 13
    2bc2:	9e 4f       	sbci	r25, 0xFE	; 254
    2bc4:	5c f0       	brlt	.+22     	; 0x2bdc <Display_sticks+0x16e>
					)
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bc6:	2b e2       	ldi	r18, 0x2B	; 43
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	49 e0       	ldi	r20, 0x09	; 9
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	60 e7       	ldi	r22, 0x70	; 112
    2bd0:	71 e0       	ldi	r23, 0x01	; 1
    2bd2:	88 e8       	ldi	r24, 0x88	; 136
    2bd4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
						((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500)) ||
						((RCinputs[ELEVATOR] < 500) && (RCinputs[ELEVATOR] > -500)) ||
						((RCinputs[RUDDER] < 500) && (RCinputs[RUDDER] > -500))
					)
			{
				CalibrateStarted = true;
    2bd8:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bda:	41 c0       	rjmp	.+130    	; 0x2c5e <Display_sticks+0x1f0>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2bdc:	80 91 b8 07 	lds	r24, 0x07B8
    2be0:	90 91 b9 07 	lds	r25, 0x07B9
    2be4:	97 ff       	sbrs	r25, 7
    2be6:	03 c0       	rjmp	.+6      	; 0x2bee <Display_sticks+0x180>
				{
					Config.AileronPol = REVERSED;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	80 93 58 07 	sts	0x0758, r24
				}

				// Only reverse 2nd aileron if set up as one
				if ((Config.FlapChan != NOCHAN) && (RCinputs[Config.FlapChan] < 0))
    2bee:	e0 91 06 06 	lds	r30, 0x0606
    2bf2:	e8 30       	cpi	r30, 0x08	; 8
    2bf4:	59 f0       	breq	.+22     	; 0x2c0c <Display_sticks+0x19e>
    2bf6:	ee 0f       	add	r30, r30
    2bf8:	ff 0b       	sbc	r31, r31
    2bfa:	ea 54       	subi	r30, 0x4A	; 74
    2bfc:	f8 4f       	sbci	r31, 0xF8	; 248
    2bfe:	80 81       	ld	r24, Z
    2c00:	91 81       	ldd	r25, Z+1	; 0x01
    2c02:	97 ff       	sbrs	r25, 7
    2c04:	03 c0       	rjmp	.+6      	; 0x2c0c <Display_sticks+0x19e>
				{
					Config.SecAileronPol = REVERSED;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	80 93 59 07 	sts	0x0759, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2c0c:	80 91 ba 07 	lds	r24, 0x07BA
    2c10:	90 91 bb 07 	lds	r25, 0x07BB
    2c14:	97 ff       	sbrs	r25, 7
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <Display_sticks+0x1b0>
				{
					Config.ElevatorPol = REVERSED;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	80 93 5a 07 	sts	0x075A, r24
				}

				if (RCinputs[RUDDER] < 0)
    2c1e:	80 91 bc 07 	lds	r24, 0x07BC
    2c22:	90 91 bd 07 	lds	r25, 0x07BD
    2c26:	97 ff       	sbrs	r25, 7
    2c28:	03 c0       	rjmp	.+6      	; 0x2c30 <Display_sticks+0x1c2>
				{
					Config.RudderPol = REVERSED;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	80 93 5b 07 	sts	0x075B, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2c30:	80 91 b8 07 	lds	r24, 0x07B8
    2c34:	90 91 b9 07 	lds	r25, 0x07B9
    2c38:	18 16       	cp	r1, r24
    2c3a:	19 06       	cpc	r1, r25
    2c3c:	84 f4       	brge	.+32     	; 0x2c5e <Display_sticks+0x1f0>
    2c3e:	80 91 ba 07 	lds	r24, 0x07BA
    2c42:	90 91 bb 07 	lds	r25, 0x07BB
    2c46:	18 16       	cp	r1, r24
    2c48:	19 06       	cpc	r1, r25
    2c4a:	4c f4       	brge	.+18     	; 0x2c5e <Display_sticks+0x1f0>
    2c4c:	80 91 bc 07 	lds	r24, 0x07BC
    2c50:	90 91 bd 07 	lds	r25, 0x07BD
    2c54:	c1 e0       	ldi	r28, 0x01	; 1
    2c56:	18 16       	cp	r1, r24
    2c58:	19 06       	cpc	r1, r25
    2c5a:	0c f0       	brlt	.+2      	; 0x2c5e <Display_sticks+0x1f0>
    2c5c:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	91 e0       	ldi	r25, 0x01	; 1
    2c62:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
    2c66:	20 cf       	rjmp	.-448    	; 0x2aa8 <Display_sticks+0x3a>
	}

	// Save value and return
	if (CalibrateDone)
    2c68:	cc 23       	and	r28, r28
    2c6a:	39 f1       	breq	.+78     	; 0x2cba <Display_sticks+0x24c>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2c6c:	2b e2       	ldi	r18, 0x2B	; 43
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	48 e2       	ldi	r20, 0x28	; 40
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	60 e7       	ldi	r22, 0x70	; 112
    2c76:	71 e0       	ldi	r23, 0x01	; 1
    2c78:	89 e8       	ldi	r24, 0x89	; 137
    2c7a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
		clear_buffer(buffer);
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	91 e0       	ldi	r25, 0x01	; 1
    2c8a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
    2c8e:	8f e7       	ldi	r24, 0x7F	; 127
    2c90:	94 e8       	ldi	r25, 0x84	; 132
    2c92:	2e e1       	ldi	r18, 0x1E	; 30
    2c94:	81 50       	subi	r24, 0x01	; 1
    2c96:	90 40       	sbci	r25, 0x00	; 0
    2c98:	20 40       	sbci	r18, 0x00	; 0
    2c9a:	e1 f7       	brne	.-8      	; 0x2c94 <Display_sticks+0x226>
    2c9c:	00 c0       	rjmp	.+0      	; 0x2c9e <Display_sticks+0x230>
    2c9e:	00 00       	nop
		Config.AileronPol = temp_aileron;
		Config.SecAileronPol = temp_2ndaileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	9f 90       	pop	r9
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2cb6:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2cba:	c0 92 58 07 	sts	0x0758, r12
		Config.SecAileronPol = temp_2ndaileron;
    2cbe:	d0 92 59 07 	sts	0x0759, r13
		Config.ElevatorPol = temp_elevator;
    2cc2:	f0 92 5a 07 	sts	0x075A, r15
		Config.RudderPol = temp_rudder;
    2cc6:	90 92 5b 07 	sts	0x075B, r9
	}
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	9f 90       	pop	r9
    2ce0:	08 95       	ret

00002ce2 <Set_EEPROM_Default_Config>:

const uint8_t	JR[MAX_RC_CHANNELS] PROGMEM 	= {0,1,2,3,4,5,6,7}; 	// JR/Spektrum channel sequence (TAERG123)
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Set_EEPROM_Default_Config(void)
{
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    2ce6:	83 ea       	ldi	r24, 0xA3	; 163
    2ce8:	91 e0       	ldi	r25, 0x01	; 1
    2cea:	e9 eb       	ldi	r30, 0xB9	; 185
    2cec:	f5 e0       	ldi	r31, 0x05	; 5
    2cee:	df 01       	movw	r26, r30
    2cf0:	ec 01       	movw	r28, r24
    2cf2:	1d 92       	st	X+, r1
    2cf4:	21 97       	sbiw	r28, 0x01	; 1
    2cf6:	e9 f7       	brne	.-6      	; 0x2cf2 <Set_EEPROM_Default_Config+0x10>

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
    2cf8:	88 e1       	ldi	r24, 0x18	; 24
    2cfa:	80 93 b9 05 	sts	0x05B9, r24
    2cfe:	60 e1       	ldi	r22, 0x10	; 16
    2d00:	77 e0       	ldi	r23, 0x07	; 7
    2d02:	a8 e1       	ldi	r26, 0x18	; 24
    2d04:	b7 e0       	ldi	r27, 0x07	; 7
    2d06:	ee e8       	ldi	r30, 0x8E	; 142
    2d08:	f6 e0       	ldi	r31, 0x06	; 6
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
	{	
		Config.min_travel[i] = -100;
    2d0a:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;	
    2d0c:	34 e6       	ldi	r19, 0x64	; 100
		Config.Channel[i].output_b = NOMIX;
    2d0e:	2f e0       	ldi	r18, 0x0F	; 15
	Config.setup = MAGIC_NUMBER;
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
	{	
		Config.min_travel[i] = -100;
    2d10:	eb 01       	movw	r28, r22
    2d12:	49 93       	st	Y+, r20
    2d14:	be 01       	movw	r22, r28
		Config.max_travel[i] = 100;	
    2d16:	3d 93       	st	X+, r19
    2d18:	cf 01       	movw	r24, r30
    2d1a:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].output_b = NOMIX;
    2d1c:	ec 01       	movw	r28, r24
    2d1e:	28 83       	st	Y, r18
		Config.Channel[i].output_c = NOMIX;
    2d20:	20 83       	st	Z, r18
    2d22:	70 96       	adiw	r30, 0x10	; 16

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
	
	// Servo and mixer defaults
	for (i = 0; i < MAX_OUTPUTS; i++)
    2d24:	d7 e0       	ldi	r29, 0x07	; 7
    2d26:	a0 32       	cpi	r26, 0x20	; 32
    2d28:	bd 07       	cpc	r27, r29
    2d2a:	91 f7       	brne	.-28     	; 0x2d10 <Set_EEPROM_Default_Config+0x2e>
    2d2c:	ee ef       	ldi	r30, 0xFE	; 254
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	ca eb       	ldi	r28, 0xBA	; 186
    2d32:	d5 e0       	ldi	r29, 0x05	; 5
    2d34:	a8 e2       	ldi	r26, 0x28	; 40
    2d36:	b7 e0       	ldi	r27, 0x07	; 7
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    2d38:	86 ea       	ldi	r24, 0xA6	; 166
    2d3a:	9e e0       	ldi	r25, 0x0E	; 14
	}
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    2d3c:	24 91       	lpm	r18, Z
    2d3e:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    2d40:	8d 93       	st	X+, r24
    2d42:	9d 93       	st	X+, r25
    2d44:	31 96       	adiw	r30, 0x01	; 1
		Config.Channel[i].output_b = NOMIX;
		Config.Channel[i].output_c = NOMIX;
	}
	
	// RC channel defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    2d46:	21 e0       	ldi	r18, 0x01	; 1
    2d48:	e6 30       	cpi	r30, 0x06	; 6
    2d4a:	f2 07       	cpc	r31, r18
    2d4c:	b9 f7       	brne	.-18     	; 0x2d3c <Set_EEPROM_Default_Config+0x5a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    2d4e:	8e eb       	ldi	r24, 0xBE	; 190
    2d50:	9a e0       	ldi	r25, 0x0A	; 10
    2d52:	90 93 29 07 	sts	0x0729, r25
    2d56:	80 93 28 07 	sts	0x0728, r24

	Config.Failsafe[0] = -100;			// Throttle should failsafe to minimum
    2d5a:	8c e9       	ldi	r24, 0x9C	; 156
    2d5c:	80 93 20 07 	sts	0x0720, r24
	//
	get_preset_mix(AEROPLANE_MIX);		// Load AEROPLANE default mix
    2d60:	8b e1       	ldi	r24, 0x1B	; 27
    2d62:	9a e1       	ldi	r25, 0x1A	; 26
    2d64:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <get_preset_mix>
	//
	Config.RxMode = PWM;				// Default to PWM1
    2d68:	21 e0       	ldi	r18, 0x01	; 1
    2d6a:	20 93 02 06 	sts	0x0602, r18
	Config.PWM_Sync = GEAR;
    2d6e:	84 e0       	ldi	r24, 0x04	; 4
    2d70:	80 93 03 06 	sts	0x0603, r24
	Config.TxSeq = JRSEQ;
    2d74:	10 92 04 06 	sts	0x0604, r1

#ifdef KK21
	Config.AccZero[ROLL] 	= 0;		// Acc calibration defaults for KK2.1
    2d78:	10 92 39 07 	sts	0x0739, r1
    2d7c:	10 92 38 07 	sts	0x0738, r1
	Config.AccZero[PITCH]	= 0;
    2d80:	10 92 3b 07 	sts	0x073B, r1
    2d84:	10 92 3a 07 	sts	0x073A, r1
	Config.AccZero[YAW]		= 0;
    2d88:	10 92 3d 07 	sts	0x073D, r1
    2d8c:	10 92 3c 07 	sts	0x073C, r1
	Config.AccZeroNormZ		= 128;
    2d90:	80 e8       	ldi	r24, 0x80	; 128
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	90 93 3f 07 	sts	0x073F, r25
    2d98:	80 93 3e 07 	sts	0x073E, r24
	Config.AccZero[YAW]		= 643; 		// 643 is the center
	Config.AccZeroNormZ		= 765;
#endif
	
	// Set up flight modes for all three profiles
	Config.FlightMode[1].StabMode = ALWAYSON;
    2d9c:	20 93 28 06 	sts	0x0628, r18
	Config.FlightMode[2].StabMode = ALWAYSON;
    2da0:	20 93 3e 06 	sts	0x063E, r18
	Config.FlightMode[2].AutoMode = ALWAYSON;
    2da4:	20 93 3f 06 	sts	0x063F, r18
    2da8:	e4 e2       	ldi	r30, 0x24	; 36
    2daa:	f6 e0       	ldi	r31, 0x06	; 6

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll.P_mult = 80;			// PID defaults		
    2dac:	80 e5       	ldi	r24, 0x50	; 80
		Config.FlightMode[i].Roll.I_mult = 50;	
    2dae:	22 e3       	ldi	r18, 0x32	; 50
		Config.FlightMode[i].Pitch.P_mult = 80;
		Config.FlightMode[i].Pitch.I_mult = 50;
		Config.FlightMode[i].Yaw.P_mult = 80;
		Config.FlightMode[i].Yaw.I_mult = 80;
		Config.FlightMode[i].A_Roll_P_mult = 20;
    2db0:	94 e1       	ldi	r25, 0x14	; 20
    2db2:	df 01       	movw	r26, r30
    2db4:	1f 97       	sbiw	r26, 0x0f	; 15
	Config.FlightMode[2].AutoMode = ALWAYSON;

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll.P_mult = 80;			// PID defaults		
    2db6:	8c 93       	st	X, r24
    2db8:	11 96       	adiw	r26, 0x01	; 1
		Config.FlightMode[i].Roll.I_mult = 50;	
    2dba:	2c 93       	st	X, r18
    2dbc:	16 96       	adiw	r26, 0x06	; 6
		Config.FlightMode[i].Pitch.P_mult = 80;
    2dbe:	8c 93       	st	X, r24
    2dc0:	11 96       	adiw	r26, 0x01	; 1
		Config.FlightMode[i].Pitch.I_mult = 50;
    2dc2:	2c 93       	st	X, r18
    2dc4:	16 96       	adiw	r26, 0x06	; 6
		Config.FlightMode[i].Yaw.P_mult = 80;
    2dc6:	8c 93       	st	X, r24
		Config.FlightMode[i].Yaw.I_mult = 80;
    2dc8:	80 83       	st	Z, r24
    2dca:	1a 97       	sbiw	r26, 0x0a	; 10
		Config.FlightMode[i].A_Roll_P_mult = 20;
    2dcc:	9c 93       	st	X, r25
    2dce:	17 96       	adiw	r26, 0x07	; 7
		Config.FlightMode[i].A_Pitch_P_mult = 20;
    2dd0:	9c 93       	st	X, r25
    2dd2:	76 96       	adiw	r30, 0x16	; 22
	Config.FlightMode[1].StabMode = ALWAYSON;
	Config.FlightMode[2].StabMode = ALWAYSON;
	Config.FlightMode[2].AutoMode = ALWAYSON;

	// Set up all three profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
    2dd4:	36 e0       	ldi	r19, 0x06	; 6
    2dd6:	e6 36       	cpi	r30, 0x66	; 102
    2dd8:	f3 07       	cpc	r31, r19
    2dda:	59 f7       	brne	.-42     	; 0x2db2 <Set_EEPROM_Default_Config+0xd0>
		Config.FlightMode[i].Yaw.I_mult = 80;
		Config.FlightMode[i].A_Roll_P_mult = 20;
		Config.FlightMode[i].A_Pitch_P_mult = 20;
	}

	Config.Acc_LPF = HZ21;
    2ddc:	82 e0       	ldi	r24, 0x02	; 2
    2dde:	80 93 7e 06 	sts	0x067E, r24
#ifdef KK21
	Config.MPU6050_LPF = HZ21;			// 21Hz
    2de2:	80 93 7f 06 	sts	0x067F, r24
#endif
	Config.CF_factor = 7;
    2de6:	97 e0       	ldi	r25, 0x07	; 7
    2de8:	90 93 7d 06 	sts	0x067D, r25
	Config.DynGainSrc = NOCHAN;
    2dec:	98 e0       	ldi	r25, 0x08	; 8
    2dee:	90 93 07 06 	sts	0x0607, r25
	Config.DynGain = 100;
    2df2:	24 e6       	ldi	r18, 0x64	; 100
    2df4:	20 93 08 06 	sts	0x0608, r18
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    2df8:	24 e0       	ldi	r18, 0x04	; 4
    2dfa:	20 93 05 06 	sts	0x0605, r18
	Config.FlapChan = NOCHAN;			// This is to make sure that flaperons are handled correctly when disabled
    2dfe:	90 93 06 06 	sts	0x0606, r25
	Config.Orientation = HORIZONTAL;	// Board orientation
    2e02:	10 92 76 06 	sts	0x0676, r1
#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
#else
	Config.Contrast = 36;				// Contrast (Everything else)
    2e06:	94 e2       	ldi	r25, 0x24	; 36
    2e08:	90 93 77 06 	sts	0x0677, r25
#endif
	Config.LMA_enable = 0;				// Default to off
    2e0c:	10 92 7c 06 	sts	0x067C, r1
	Config.Servo_rate = LOW;			// Default to LOW (50Hz)
    2e10:	10 92 78 06 	sts	0x0678, r1
	Config.Stick_Lock_rate = 3;
    2e14:	93 e0       	ldi	r25, 0x03	; 3
    2e16:	90 93 0b 06 	sts	0x060B, r25
	Config.Deadband = 2;				// RC deadband = 2%
    2e1a:	80 93 0c 06 	sts	0x060C, r24
	Config.FailsafeThrottle = -100;		// Throttle position in failsafe
    2e1e:	8c e9       	ldi	r24, 0x9C	; 156
    2e20:	80 93 0e 06 	sts	0x060E, r24
}
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	08 95       	ret

00002e2a <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2e2a:	0f 93       	push	r16
    2e2c:	1f 93       	push	r17
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	1f 92       	push	r1
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2e3a:	69 83       	std	Y+1, r22	; 0x01
    2e3c:	0e 94 2a 43 	call	0x8654	; 0x8654 <__eerd_byte_m644p>
    2e40:	69 81       	ldd	r22, Y+1	; 0x01
    2e42:	86 17       	cp	r24, r22
    2e44:	41 f0       	breq	.+16     	; 0x2e56 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2e46:	c8 01       	movw	r24, r16
	}
}
    2e48:	0f 90       	pop	r0
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2e52:	0c 94 32 43 	jmp	0x8664	; 0x8664 <__eewr_byte_m644p>
	}
}
    2e56:	0f 90       	pop	r0
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	08 95       	ret

00002e62 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	ec 01       	movw	r28, r24
    2e70:	8b 01       	movw	r16, r22
    2e72:	7a 01       	movw	r14, r20
    2e74:	e8 0e       	add	r14, r24
    2e76:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2e78:	ce 15       	cp	r28, r14
    2e7a:	df 05       	cpc	r29, r15
    2e7c:	39 f0       	breq	.+14     	; 0x2e8c <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2e7e:	69 91       	ld	r22, Y+
    2e80:	c8 01       	movw	r24, r16
    2e82:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <eeprom_write_byte_changed>
		src++;
		dest++;
    2e86:	0f 5f       	subi	r16, 0xFF	; 255
    2e88:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8a:	f6 cf       	rjmp	.-20     	; 0x2e78 <eeprom_write_block_changes+0x16>
	}
}
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	08 95       	ret

00002e9a <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2e9a:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    2e9c:	43 ea       	ldi	r20, 0xA3	; 163
    2e9e:	51 e0       	ldi	r21, 0x01	; 1
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	89 eb       	ldi	r24, 0xB9	; 185
    2ea6:	95 e0       	ldi	r25, 0x05	; 5
    2ea8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <eeprom_write_block_changes>
	sei();
    2eac:	78 94       	sei
    2eae:	08 95       	ret

00002eb0 <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// Load last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!= MAGIC_NUMBER)
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 2a 43 	call	0x8654	; 0x8654 <__eerd_byte_m644p>
    2eb8:	88 31       	cpi	r24, 0x18	; 24
    2eba:	21 f0       	breq	.+8      	; 0x2ec4 <Initial_EEPROM_Config_Load+0x14>
	{
		Set_EEPROM_Default_Config();
    2ebc:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <Set_EEPROM_Default_Config>
		// Write to eeProm
		Save_Config_to_EEPROM();
    2ec0:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
	} 
	else 
	{
		// Read eeProm
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
    2ec4:	43 ea       	ldi	r20, 0xA3	; 163
    2ec6:	51 e0       	ldi	r21, 0x01	; 1
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	89 eb       	ldi	r24, 0xB9	; 185
    2ece:	95 e0       	ldi	r25, 0x05	; 5
    2ed0:	0c 94 1a 43 	jmp	0x8634	; 0x8634 <__eerd_block_m644p>

00002ed4 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	a5 97       	sbiw	r28, 0x25	; 37
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval


	init();							// Do all init tasks
    2ee8:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <init>
	uint8_t Menu_mode = STATUS_TIMEOUT;
	uint8_t	old_flight = 0;			// Current/old flight profile
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    2eec:	b3 e0       	ldi	r27, 0x03	; 3
    2eee:	6b 2e       	mov	r6, r27
    2ef0:	71 2c       	mov	r7, r1
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	uint8_t	old_flight = 0;			// Current/old flight profile
	uint8_t	old_alarms = 0;
    2ef2:	19 a2       	std	Y+33, r1	; 0x21
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	uint8_t	old_flight = 0;			// Current/old flight profile
    2ef4:	18 a2       	std	Y+32, r1	; 0x20

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    2ef6:	28 e0       	ldi	r18, 0x08	; 8
    2ef8:	2c a3       	std	Y+36, r18	; 0x24
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
	uint8_t Status_seconds = 0;
    2efa:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	LMA_minutes = 0;
    2efc:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    2efe:	1a 8a       	std	Y+18, r1	; 0x12
    2f00:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
	uint8_t fast_sync_TCNT2 = 0;
    2f02:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    2f04:	1e 8e       	std	Y+30, r1	; 0x1e
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    2f06:	1d 8e       	std	Y+29, r1	; 0x1d
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    2f08:	1c 8e       	std	Y+28, r1	; 0x1c
	
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Lost_TCNT2 = 0;
    2f0a:	b1 2c       	mov	r11, r1
	uint16_t fast_sync_timer = 0;
	
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    2f0c:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;
	
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Status_TCNT2 = 0;
    2f0e:	1a 8e       	std	Y+26, r1	; 0x1a
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;
	uint16_t fast_sync_timer = 0;
	
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    2f10:	81 2c       	mov	r8, r1
    2f12:	91 2c       	mov	r9, r1
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    2f14:	1e 86       	std	Y+14, r1	; 0x0e
    2f16:	1d 86       	std	Y+13, r1	; 0x0d

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    2f18:	1a 82       	std	Y+2, r1	; 0x02
    2f1a:	19 82       	std	Y+1, r1	; 0x01
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    2f1c:	19 8e       	std	Y+25, r1	; 0x19
    2f1e:	18 8e       	std	Y+24, r1	; 0x18
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    2f20:	1d 8a       	std	Y+21, r1	; 0x15
    2f22:	1c 8a       	std	Y+20, r1	; 0x14
	uint32_t LostModel_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.

	// 16-bit timers
	uint16_t Status_timeout = 0;
    2f24:	1c 86       	std	Y+12, r1	; 0x0c
    2f26:	1b 86       	std	Y+11, r1	; 0x0b
	bool SlowRC = true;

	// 32-bit timers
	uint32_t LostModel_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    2f28:	11 e6       	ldi	r17, 0x61	; 97
    2f2a:	c1 2e       	mov	r12, r17
    2f2c:	11 e5       	ldi	r17, 0x51	; 81
    2f2e:	d1 2e       	mov	r13, r17
    2f30:	e1 2c       	mov	r14, r1
    2f32:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t LostModel_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    2f34:	21 2c       	mov	r2, r1
    2f36:	31 2c       	mov	r3, r1
    2f38:	21 01       	movw	r4, r2
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t LostModel_timer = 0;
    2f3a:	1f 82       	std	Y+7, r1	; 0x07
    2f3c:	18 86       	std	Y+8, r1	; 0x08
    2f3e:	19 86       	std	Y+9, r1	; 0x09
    2f40:	1a 86       	std	Y+10, r1	; 0x0a
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    2f42:	31 e0       	ldi	r19, 0x01	; 1
    2f44:	3c 83       	std	Y+4, r19	; 0x04
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    2f46:	10 e0       	ldi	r17, 0x00	; 0
	// Flags
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    2f48:	1f 8a       	std	Y+23, r1	; 0x17
{
	// Flags
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    2f4a:	1b 82       	std	Y+3, r1	; 0x03
int main(void)
{
	// Flags
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    2f4c:	1e 82       	std	Y+6, r1	; 0x06

int main(void)
{
	// Flags
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    2f4e:	1d 82       	std	Y+5, r1	; 0x05
//************************************************************

int main(void)
{
	// Flags
	bool RCrateMeasured = false;
    2f50:	1d a2       	std	Y+37, r1	; 0x25

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    2f52:	80 91 0c 05 	lds	r24, 0x050C
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	80 93 0c 05 	sts	0x050C, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    2f5c:	80 91 88 07 	lds	r24, 0x0788
    2f60:	88 23       	and	r24, r24
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <main+0x9c>
		{
			InterruptCounter++;
    2f64:	49 89       	ldd	r20, Y+17	; 0x11
    2f66:	5a 89       	ldd	r21, Y+18	; 0x12
    2f68:	4f 5f       	subi	r20, 0xFF	; 255
    2f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6c:	5a 8b       	std	Y+18, r21	; 0x12
    2f6e:	49 8b       	std	Y+17, r20	; 0x11
		//* - Do an RC rate resample
		//* - Check the battery voltage
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    2f70:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f72:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f74:	2c 34       	cpi	r18, 0x4C	; 76
    2f76:	3c 44       	sbci	r19, 0x4C	; 76
    2f78:	a0 f1       	brcs	.+104    	; 0x2fe2 <main+0x10e>
		{
			Status_seconds++;
    2f7a:	5b 89       	ldd	r21, Y+19	; 0x13
    2f7c:	5f 5f       	subi	r21, 0xFF	; 255
    2f7e:	5b 8b       	std	Y+19, r21	; 0x13
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    2f80:	29 89       	ldd	r18, Y+17	; 0x11
    2f82:	3a 89       	ldd	r19, Y+18	; 0x12
    2f84:	30 93 11 05 	sts	0x0511, r19
    2f88:	20 93 10 05 	sts	0x0510, r18
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    2f8c:	80 91 78 06 	lds	r24, 0x0678
    2f90:	82 30       	cpi	r24, 0x02	; 2
    2f92:	11 f4       	brne	.+4      	; 0x2f98 <main+0xc4>
			{
				ResampleRCRate = true;
    2f94:	31 e0       	ldi	r19, 0x01	; 1
    2f96:	3f 8b       	std	Y+23, r19	; 0x17
			}
	
			// Check if Vbat lower than trigger
			if (GetVbat() < Config.PowerTriggerActual)
    2f98:	0e 94 12 40 	call	0x8024	; 0x8024 <GetVbat>
    2f9c:	20 91 6f 06 	lds	r18, 0x066F
    2fa0:	30 91 70 06 	lds	r19, 0x0670
    2fa4:	82 17       	cp	r24, r18
    2fa6:	93 07       	cpc	r25, r19
    2fa8:	20 f4       	brcc	.+8      	; 0x2fb2 <main+0xde>
			{
				General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    2faa:	80 91 15 05 	lds	r24, 0x0515
    2fae:	80 61       	ori	r24, 0x10	; 16
    2fb0:	03 c0       	rjmp	.+6      	; 0x2fb8 <main+0xe4>
			}
			else
			{
				General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    2fb2:	80 91 15 05 	lds	r24, 0x0515
    2fb6:	8f 7e       	andi	r24, 0xEF	; 239
    2fb8:	80 93 15 05 	sts	0x0515, r24
			//
			// If no signal, try resetting the UART once per second.
			// Also, wait long enough to ensure that at least one set of data has arrived.
			//************************************************************
		
			if ((General_error & (1 << NO_SIGNAL)) != 0)
    2fbc:	80 91 15 05 	lds	r24, 0x0515
    2fc0:	82 ff       	sbrs	r24, 2
    2fc2:	0b c0       	rjmp	.+22     	; 0x2fda <main+0x106>
			{
				init_uart();
    2fc4:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <init_uart>
    2fc8:	4f e9       	ldi	r20, 0x9F	; 159
    2fca:	56 e8       	ldi	r21, 0x86	; 134
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	41 50       	subi	r20, 0x01	; 1
    2fd0:	50 40       	sbci	r21, 0x00	; 0
    2fd2:	80 40       	sbci	r24, 0x00	; 0
    2fd4:	e1 f7       	brne	.-8      	; 0x2fce <main+0xfa>
    2fd6:	00 c0       	rjmp	.+0      	; 0x2fd8 <main+0x104>
    2fd8:	00 00       	nop
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    2fda:	1a 8a       	std	Y+18, r1	; 0x12
    2fdc:	19 8a       	std	Y+17, r1	; 0x11

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    2fde:	1c 86       	std	Y+12, r1	; 0x0c
    2fe0:	1b 86       	std	Y+11, r1	; 0x0b
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    2fe2:	2c a1       	ldd	r18, Y+36	; 0x24
    2fe4:	82 2f       	mov	r24, r18
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	8b 30       	cpi	r24, 0x0B	; 11
    2fea:	91 05       	cpc	r25, r1
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <main+0x11c>
    2fee:	7b c0       	rjmp	.+246    	; 0x30e6 <main+0x212>
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	e2 5c       	subi	r30, 0xC2	; 194
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	0c 94 93 42 	jmp	0x8526	; 0x8526 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    2ffa:	83 b1       	in	r24, 0x03	; 3
    2ffc:	80 7f       	andi	r24, 0xF0	; 240
    2ffe:	80 3f       	cpi	r24, 0xF0	; 240
    3000:	49 f0       	breq	.+18     	; 0x3014 <main+0x140>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3002:	80 91 6e 00 	lds	r24, 0x006E
    3006:	81 60       	ori	r24, 0x01	; 1
    3008:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    300c:	33 e0       	ldi	r19, 0x03	; 3
    300e:	3c a3       	std	Y+36, r19	; 0x24
					// Reset the status screen timeout
					Status_seconds = 0;
    3010:	1b 8a       	std	Y+19, r1	; 0x13
    3012:	69 c0       	rjmp	.+210    	; 0x30e6 <main+0x212>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3014:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	85 bb       	out	0x15, r24	; 21
    301c:	64 c0       	rjmp	.+200    	; 0x30e6 <main+0x212>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    301e:	80 91 6d 07 	lds	r24, 0x076D
    3022:	81 11       	cpse	r24, r1
    3024:	49 c0       	rjmp	.+146    	; 0x30b8 <main+0x1e4>
    3026:	11 11       	cpse	r17, r1
    3028:	4a c0       	rjmp	.+148    	; 0x30be <main+0x1ea>
    302a:	80 91 0d 05 	lds	r24, 0x050D
    302e:	88 23       	and	r24, r24
    3030:	09 f4       	brne	.+2      	; 0x3034 <main+0x160>
    3032:	59 c0       	rjmp	.+178    	; 0x30e6 <main+0x212>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3034:	34 e0       	ldi	r19, 0x04	; 4
    3036:	47 c0       	rjmp	.+142    	; 0x30c6 <main+0x1f2>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3038:	0e 94 70 13 	call	0x26e0	; 0x26e0 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    303c:	46 e0       	ldi	r20, 0x06	; 6
    303e:	4c a3       	std	Y+36, r20	; 0x24
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    3040:	1d 8a       	std	Y+21, r1	; 0x15
    3042:	1c 8a       	std	Y+20, r1	; 0x14
    3044:	52 c0       	rjmp	.+164    	; 0x30ea <main+0x216>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3046:	1f 9b       	sbis	0x03, 7	; 3
    3048:	4e c0       	rjmp	.+156    	; 0x30e6 <main+0x212>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    304a:	45 e0       	ldi	r20, 0x05	; 5
    304c:	4c a3       	std	Y+36, r20	; 0x24
    304e:	4b c0       	rjmp	.+150    	; 0x30e6 <main+0x212>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= STATUS_OFF_TIME)
    3050:	5b 89       	ldd	r21, Y+19	; 0x13
    3052:	53 30       	cpi	r21, 0x03	; 3
    3054:	d0 f5       	brcc	.+116    	; 0x30ca <main+0x1f6>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3056:	1f 9b       	sbis	0x03, 7	; 3
    3058:	3b c0       	rjmp	.+118    	; 0x30d0 <main+0x1fc>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    305a:	2c 89       	ldd	r18, Y+20	; 0x14
    305c:	3d 89       	ldd	r19, Y+21	; 0x15
    305e:	23 31       	cpi	r18, 0x13	; 19
    3060:	33 41       	sbci	r19, 0x13	; 19
    3062:	08 f4       	brcc	.+2      	; 0x3066 <main+0x192>
    3064:	40 c0       	rjmp	.+128    	; 0x30e6 <main+0x212>
				{
					Menu_mode = PRESTATUS;
    3066:	53 e0       	ldi	r21, 0x03	; 3
    3068:	5c a3       	std	Y+36, r21	; 0x24
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <main+0x216>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    306c:	80 91 6d 07 	lds	r24, 0x076D
    3070:	81 11       	cpse	r24, r1
    3072:	31 c0       	rjmp	.+98     	; 0x30d6 <main+0x202>
    3074:	11 11       	cpse	r17, r1
    3076:	32 c0       	rjmp	.+100    	; 0x30dc <main+0x208>
    3078:	80 91 0d 05 	lds	r24, 0x050D
    307c:	88 23       	and	r24, r24
    307e:	a9 f1       	breq	.+106    	; 0x30ea <main+0x216>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3080:	28 e0       	ldi	r18, 0x08	; 8
    3082:	2c a3       	std	Y+36, r18	; 0x24
    3084:	30 c0       	rjmp	.+96     	; 0x30e6 <main+0x212>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3086:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    308a:	39 e0       	ldi	r19, 0x09	; 9
    308c:	1c c0       	rjmp	.+56     	; 0x30c6 <main+0x1f2>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    308e:	80 91 6d 07 	lds	r24, 0x076D
    3092:	81 11       	cpse	r24, r1
    3094:	26 c0       	rjmp	.+76     	; 0x30e2 <main+0x20e>
    3096:	11 11       	cpse	r17, r1
    3098:	24 c0       	rjmp	.+72     	; 0x30e2 <main+0x20e>
    309a:	80 91 0d 05 	lds	r24, 0x050D
    309e:	88 23       	and	r24, r24
    30a0:	21 f1       	breq	.+72     	; 0x30ea <main+0x216>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    30a2:	1c a2       	std	Y+36, r1	; 0x24
    30a4:	20 c0       	rjmp	.+64     	; 0x30e6 <main+0x212>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    30a6:	29 98       	cbi	0x05, 1	; 5
				// Start the menu system
				menu_main();
    30a8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    30ac:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <reset_IMU>
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    30b0:	44 e0       	ldi	r20, 0x04	; 4
    30b2:	4c a3       	std	Y+36, r20	; 0x24
				// Reset timeout once back in status screen
				Status_seconds = 0;
    30b4:	1b 8a       	std	Y+19, r1	; 0x13
    30b6:	19 c0       	rjmp	.+50     	; 0x30ea <main+0x216>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    30b8:	54 e0       	ldi	r21, 0x04	; 4
    30ba:	5c a3       	std	Y+36, r21	; 0x24
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <main+0x1ee>
    30be:	24 e0       	ldi	r18, 0x04	; 4
    30c0:	2c a3       	std	Y+36, r18	; 0x24
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    30c2:	10 e0       	ldi	r17, 0x00	; 0
    30c4:	12 c0       	rjmp	.+36     	; 0x30ea <main+0x216>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    30c6:	3c a3       	std	Y+36, r19	; 0x24
    30c8:	10 c0       	rjmp	.+32     	; 0x30ea <main+0x216>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= STATUS_OFF_TIME)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    30ca:	57 e0       	ldi	r21, 0x07	; 7
    30cc:	5c a3       	std	Y+36, r21	; 0x24
    30ce:	0b c0       	rjmp	.+22     	; 0x30e6 <main+0x212>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    30d0:	2a e0       	ldi	r18, 0x0A	; 10
    30d2:	2c a3       	std	Y+36, r18	; 0x24
    30d4:	0a c0       	rjmp	.+20     	; 0x30ea <main+0x216>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    30d6:	38 e0       	ldi	r19, 0x08	; 8
    30d8:	3c a3       	std	Y+36, r19	; 0x24
    30da:	04 c0       	rjmp	.+8      	; 0x30e4 <main+0x210>
    30dc:	48 e0       	ldi	r20, 0x08	; 8
    30de:	4c a3       	std	Y+36, r20	; 0x24
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <main+0x210>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    30e2:	1c a2       	std	Y+36, r1	; 0x24
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    30e4:	10 e0       	ldi	r17, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    30e6:	00 e0       	ldi	r16, 0x00	; 0
    30e8:	01 c0       	rjmp	.+2      	; 0x30ec <main+0x218>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    30ea:	01 e0       	ldi	r16, 0x01	; 1
		//************************************************************

		// If overdue, signal RX error message and
		// set failsafe flag. If in independent camstab mode, 
		// don't bother with either.
		if (Overdue && (Config.CamStab == OFF))
    30ec:	80 91 0d 05 	lds	r24, 0x050D
    30f0:	88 23       	and	r24, r24
    30f2:	69 f0       	breq	.+26     	; 0x310e <main+0x23a>
    30f4:	80 91 79 06 	lds	r24, 0x0679
    30f8:	81 11       	cpse	r24, r1
    30fa:	09 c0       	rjmp	.+18     	; 0x310e <main+0x23a>
		{
			General_error |= (1 << NO_SIGNAL);	// Set NO_SIGNAL bit
    30fc:	80 91 15 05 	lds	r24, 0x0515
    3100:	84 60       	ori	r24, 0x04	; 4
    3102:	80 93 15 05 	sts	0x0515, r24
			Flight_flags |= (1 << Failsafe);
    3106:	80 91 14 05 	lds	r24, 0x0514
    310a:	84 60       	ori	r24, 0x04	; 4
    310c:	08 c0       	rjmp	.+16     	; 0x311e <main+0x24a>
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    310e:	80 91 15 05 	lds	r24, 0x0515
    3112:	8b 7f       	andi	r24, 0xFB	; 251
    3114:	80 93 15 05 	sts	0x0515, r24
			Flight_flags &= ~(1 << Failsafe);
    3118:	80 91 14 05 	lds	r24, 0x0514
    311c:	8b 7f       	andi	r24, 0xFB	; 251
    311e:	80 93 14 05 	sts	0x0514, r24
		}

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
    3122:	80 91 b2 00 	lds	r24, 0x00B2
		Lost_TCNT2 = TCNT2;
    3126:	50 91 b2 00 	lds	r21, 0x00B2
    312a:	5a a3       	std	Y+34, r21	; 0x22

		// Reset LMA count if any RX activity, LMA off, or CamStab (no RC used)
		if ((Flight_flags & (1 << RxActivity)) || (Config.LMA_enable == 0) || (Config.CamStab == ON))
    312c:	90 91 14 05 	lds	r25, 0x0514
    3130:	93 fd       	sbrc	r25, 3
    3132:	08 c0       	rjmp	.+16     	; 0x3144 <main+0x270>
    3134:	90 91 7c 06 	lds	r25, 0x067C
    3138:	99 23       	and	r25, r25
    313a:	21 f0       	breq	.+8      	; 0x3144 <main+0x270>
    313c:	90 91 79 06 	lds	r25, 0x0679
    3140:	91 30       	cpi	r25, 0x01	; 1
    3142:	39 f4       	brne	.+14     	; 0x3152 <main+0x27e>
		{														
			LostModel_timer = 0;
			LMA_minutes = 0;
			General_error &= ~(1 << LOST_MODEL); // Clear lost model bit
    3144:	80 91 15 05 	lds	r24, 0x0515
    3148:	87 7f       	andi	r24, 0xF7	; 247
    314a:	80 93 15 05 	sts	0x0515, r24

		// Reset LMA count if any RX activity, LMA off, or CamStab (no RC used)
		if ((Flight_flags & (1 << RxActivity)) || (Config.LMA_enable == 0) || (Config.CamStab == ON))
		{														
			LostModel_timer = 0;
			LMA_minutes = 0;
    314e:	1e 8a       	std	Y+22, r1	; 0x16
    3150:	15 c0       	rjmp	.+42     	; 0x317c <main+0x2a8>
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
			Flight_flags &= ~(1 << Failsafe);
		}

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
    3152:	8b 19       	sub	r24, r11
    3154:	2f 81       	ldd	r18, Y+7	; 0x07
    3156:	38 85       	ldd	r19, Y+8	; 0x08
    3158:	49 85       	ldd	r20, Y+9	; 0x09
    315a:	5a 85       	ldd	r21, Y+10	; 0x0a
    315c:	28 0f       	add	r18, r24
    315e:	31 1d       	adc	r19, r1
    3160:	41 1d       	adc	r20, r1
    3162:	51 1d       	adc	r21, r1
    3164:	2f 83       	std	Y+7, r18	; 0x07
    3166:	38 87       	std	Y+8, r19	; 0x08
    3168:	49 87       	std	Y+9, r20	; 0x09
    316a:	5a 87       	std	Y+10, r21	; 0x0a
			LMA_minutes = 0;
			General_error &= ~(1 << LOST_MODEL); // Clear lost model bit
		}
		
		// Count the minutes
		if (LostModel_timer > LMA_TIMEOUT)
    316c:	25 39       	cpi	r18, 0x95	; 149
    316e:	31 4e       	sbci	r19, 0xE1	; 225
    3170:	41 41       	sbci	r20, 0x11	; 17
    3172:	51 05       	cpc	r21, r1
    3174:	38 f0       	brcs	.+14     	; 0x3184 <main+0x2b0>
		{
			LMA_minutes++;
    3176:	2e 89       	ldd	r18, Y+22	; 0x16
    3178:	2f 5f       	subi	r18, 0xFF	; 255
    317a:	2e 8b       	std	Y+22, r18	; 0x16
			LostModel_timer = 0;
    317c:	1f 82       	std	Y+7, r1	; 0x07
    317e:	18 86       	std	Y+8, r1	; 0x08
    3180:	19 86       	std	Y+9, r1	; 0x09
    3182:	1a 86       	std	Y+10, r1	; 0x0a
		}

		// Trigger lost model alarm if enabled and due or failsafe
		if ((LMA_minutes >= Config.LMA_enable) && (Config.LMA_enable != 0))	
    3184:	40 91 7c 06 	lds	r20, 0x067C
    3188:	5e 89       	ldd	r21, Y+22	; 0x16
    318a:	25 2f       	mov	r18, r21
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	84 2f       	mov	r24, r20
    3190:	99 27       	eor	r25, r25
    3192:	87 fd       	sbrc	r24, 7
    3194:	90 95       	com	r25
    3196:	28 17       	cp	r18, r24
    3198:	39 07       	cpc	r19, r25
    319a:	3c f0       	brlt	.+14     	; 0x31aa <main+0x2d6>
    319c:	44 23       	and	r20, r20
    319e:	29 f0       	breq	.+10     	; 0x31aa <main+0x2d6>
		{
			General_error |= (1 << LOST_MODEL); // Set lost model bit
    31a0:	80 91 15 05 	lds	r24, 0x0515
    31a4:	88 60       	ori	r24, 0x08	; 8
    31a6:	80 93 15 05 	sts	0x0515, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    31aa:	0e 94 12 40 	call	0x8024	; 0x8024 <GetVbat>
    31ae:	20 91 6f 06 	lds	r18, 0x066F
    31b2:	30 91 70 06 	lds	r19, 0x0670
    31b6:	82 17       	cp	r24, r18
    31b8:	93 07       	cpc	r25, r19
    31ba:	20 f4       	brcc	.+8      	; 0x31c4 <main+0x2f0>
		{
			General_error |= (1 << LVA_ALARM); 	// Set low battery bit
    31bc:	80 91 15 05 	lds	r24, 0x0515
    31c0:	80 61       	ori	r24, 0x10	; 16
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <main+0x2f6>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
    31c4:	80 91 15 05 	lds	r24, 0x0515
    31c8:	8f 7e       	andi	r24, 0xEF	; 239
    31ca:	80 93 15 05 	sts	0x0515, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
    31ce:	80 91 15 05 	lds	r24, 0x0515
    31d2:	84 fd       	sbrc	r24, 4
    31d4:	0c c0       	rjmp	.+24     	; 0x31ee <main+0x31a>
			  (General_error & (1 << LOST_MODEL)) || 
    31d6:	80 91 15 05 	lds	r24, 0x0515
		{
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
    31da:	83 fd       	sbrc	r24, 3
    31dc:	08 c0       	rjmp	.+16     	; 0x31ee <main+0x31a>
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
    31de:	80 91 15 05 	lds	r24, 0x0515
			General_error &= ~(1 << LVA_ALARM); 	// Clear low battery bit
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
    31e2:	81 fd       	sbrc	r24, 1
    31e4:	04 c0       	rjmp	.+8      	; 0x31ee <main+0x31a>
			  (General_error & (1 << THROTTLE_HIGH)) ||	
			  (General_error & (1 << NO_SIGNAL))) &&
    31e6:	80 91 15 05 	lds	r24, 0x0515
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
    31ea:	82 ff       	sbrs	r24, 2
    31ec:	06 c0       	rjmp	.+12     	; 0x31fa <main+0x326>
			  (General_error & (1 << NO_SIGNAL))) &&
			  (Alarm_flags	 & (1 << BUZZER_ON))) 
    31ee:	80 91 12 05 	lds	r24, 0x0512

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(((General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << LOST_MODEL)) || 
			  (General_error & (1 << THROTTLE_HIGH)) ||	
			  (General_error & (1 << NO_SIGNAL))) &&
    31f2:	85 ff       	sbrs	r24, 5
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <main+0x326>
			  (Alarm_flags	 & (1 << BUZZER_ON))) 
		{
			LVA = 1;
    31f6:	29 9a       	sbi	0x05, 1	; 5
    31f8:	01 c0       	rjmp	.+2      	; 0x31fc <main+0x328>
		}
		else 
		{
			LVA = 0;
    31fa:	29 98       	cbi	0x05, 1	; 5
		}

		// All code based on RC inputs is redundant until new RC data is ready,
		// otherwise the same data will be read back each and every time.
		if (Interrupted || Interrupted_Clone)
    31fc:	80 91 6d 07 	lds	r24, 0x076D
    3200:	81 11       	cpse	r24, r1
    3202:	03 c0       	rjmp	.+6      	; 0x320a <main+0x336>
    3204:	11 23       	and	r17, r17
    3206:	09 f4       	brne	.+2      	; 0x320a <main+0x336>
    3208:	63 c0       	rjmp	.+198    	; 0x32d0 <main+0x3fc>
			//************************************************************
			//* Get RC data
			//************************************************************

			// Update zeroed RC channel data
			RxGetChannels();
    320a:	0e 94 cf 3c 	call	0x799e	; 0x799e <RxGetChannels>

			// Zero RC when in Failsafe
			if (Flight_flags & (1 << Failsafe))
    320e:	80 91 14 05 	lds	r24, 0x0514
    3212:	82 fd       	sbrc	r24, 2
    3214:	12 c0       	rjmp	.+36     	; 0x323a <main+0x366>
					RCinputs[i] = 0;
				}
			}

			// Check for throttle reset
			if (MonopolarThrottle < THROTTLEIDLE)
    3216:	80 91 b4 07 	lds	r24, 0x07B4
    321a:	90 91 b5 07 	lds	r25, 0x07B5
    321e:	c2 97       	sbiw	r24, 0x32	; 50
    3220:	d4 f4       	brge	.+52     	; 0x3256 <main+0x382>
			{
				// Clear throttle high error
				General_error &= ~(1 << THROTTLE_HIGH);
    3222:	80 91 15 05 	lds	r24, 0x0515
    3226:	8d 7f       	andi	r24, 0xFD	; 253
    3228:	80 93 15 05 	sts	0x0515, r24

				// Reset I-terms at throttle cut. Using memset saves code space
				memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    322c:	8c e0       	ldi	r24, 0x0C	; 12
    322e:	a0 e9       	ldi	r26, 0x90	; 144
    3230:	b7 e0       	ldi	r27, 0x07	; 7
    3232:	1d 92       	st	X+, r1
    3234:	8a 95       	dec	r24
    3236:	e9 f7       	brne	.-6      	; 0x3232 <main+0x35e>
    3238:	0e c0       	rjmp	.+28     	; 0x3256 <main+0x382>

			// Update zeroed RC channel data
			RxGetChannels();

			// Zero RC when in Failsafe
			if (Flight_flags & (1 << Failsafe))
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
			{
				for (i = 0; i < MAX_RC_CHANNELS; i++)
				{
					RCinputs[i] = 0;
    323e:	fc 01       	movw	r30, r24
    3240:	ee 0f       	add	r30, r30
    3242:	ff 1f       	adc	r31, r31
    3244:	ea 54       	subi	r30, 0x4A	; 74
    3246:	f8 4f       	sbci	r31, 0xF8	; 248
    3248:	11 82       	std	Z+1, r1	; 0x01
    324a:	10 82       	st	Z, r1
    324c:	01 96       	adiw	r24, 0x01	; 1
			RxGetChannels();

			// Zero RC when in Failsafe
			if (Flight_flags & (1 << Failsafe))
			{
				for (i = 0; i < MAX_RC_CHANNELS; i++)
    324e:	88 30       	cpi	r24, 0x08	; 8
    3250:	91 05       	cpc	r25, r1
    3252:	a9 f7       	brne	.-22     	; 0x323e <main+0x36a>
    3254:	e0 cf       	rjmp	.-64     	; 0x3216 <main+0x342>
			//* Flight mode selection. Now hard-coded to the following.
			//* 0 to -50 = 1, -50 to +50 = 2 and  >50 = 3
			//************************************************************

			// If CamStab ON, automatically select Profile 2
			if ((RCinputs[Config.FlightChan] > 500) || (Config.CamStab == ON))
    3256:	e0 91 05 06 	lds	r30, 0x0605
    325a:	ee 0f       	add	r30, r30
    325c:	ff 0b       	sbc	r31, r31
    325e:	ea 54       	subi	r30, 0x4A	; 74
    3260:	f8 4f       	sbci	r31, 0xF8	; 248
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	85 3f       	cpi	r24, 0xF5	; 245
    3268:	91 40       	sbci	r25, 0x01	; 1
    326a:	24 f4       	brge	.+8      	; 0x3274 <main+0x3a0>
    326c:	80 91 79 06 	lds	r24, 0x0679
    3270:	81 30       	cpi	r24, 0x01	; 1
    3272:	11 f4       	brne	.+4      	; 0x3278 <main+0x3a4>
			{
				Config.Flight = 2;			// Flight mode 2
    3274:	82 e0       	ldi	r24, 0x02	; 2
    3276:	06 c0       	rjmp	.+12     	; 0x3284 <main+0x3b0>
			}	
			else if (RCinputs[Config.FlightChan] > -500)
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	8d 30       	cpi	r24, 0x0D	; 13
    327e:	9e 4f       	sbci	r25, 0xFE	; 254
    3280:	24 f0       	brlt	.+8      	; 0x328a <main+0x3b6>
			{
				Config.Flight = 1;			// Flight mode 1
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	80 93 4a 07 	sts	0x074A, r24
    3288:	02 c0       	rjmp	.+4      	; 0x328e <main+0x3ba>
			}
			else
			{
				Config.Flight = 0;			// Flight mode 0
    328a:	10 92 4a 07 	sts	0x074A, r1
			}

			// When changing flight modes or on first startup
			if ((Config.Flight != old_flight) || (Main_flags & (1 << FirstTimeFlightMode)))
    328e:	20 91 4a 07 	lds	r18, 0x074A
    3292:	33 27       	eor	r19, r19
    3294:	27 fd       	sbrc	r18, 7
    3296:	30 95       	com	r19
    3298:	48 a1       	ldd	r20, Y+32	; 0x20
    329a:	84 2f       	mov	r24, r20
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	28 17       	cp	r18, r24
    32a0:	39 07       	cpc	r19, r25
    32a2:	21 f4       	brne	.+8      	; 0x32ac <main+0x3d8>
    32a4:	80 91 13 05 	lds	r24, 0x0513
    32a8:	83 ff       	sbrs	r24, 3
    32aa:	10 c0       	rjmp	.+32     	; 0x32cc <main+0x3f8>
			{
				// Clear first time flag
				Main_flags &= ~(1 << FirstTimeFlightMode);
    32ac:	80 91 13 05 	lds	r24, 0x0513
    32b0:	87 7f       	andi	r24, 0xF7	; 247
    32b2:	80 93 13 05 	sts	0x0513, r24

				// Update travel limits
				UpdateLimits();
    32b6:	0e 94 f6 33 	call	0x67ec	; 0x67ec <UpdateLimits>
	
				// Reset I-terms so that neutral is reset
				// Using memset saves code space
				memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    32ba:	8c e0       	ldi	r24, 0x0C	; 12
    32bc:	a0 e9       	ldi	r26, 0x90	; 144
    32be:	b7 e0       	ldi	r27, 0x07	; 7
    32c0:	1d 92       	st	X+, r1
    32c2:	8a 95       	dec	r24
    32c4:	e9 f7       	brne	.-6      	; 0x32c0 <main+0x3ec>

				old_flight = Config.Flight;
    32c6:	20 91 4a 07 	lds	r18, 0x074A
    32ca:	28 a3       	std	Y+32, r18	; 0x20
			}
			
			// Detect when sticks centered (hands free)
			RC_Deadband();
    32cc:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <RC_Deadband>
		//*		Autolevel always OFF if Config.AutoMode = OFF (default)
		//*		Autolevel disabled if Launch_Block = true
		//*		Autolevel always ON if in Advanced failsafe condition
		//************************************************************

		switch(Config.FlightMode[Config.Flight].AutoMode)
    32d0:	e0 91 4a 07 	lds	r30, 0x074A
    32d4:	8e 2f       	mov	r24, r30
    32d6:	99 27       	eor	r25, r25
    32d8:	87 fd       	sbrc	r24, 7
    32da:	90 95       	com	r25
    32dc:	36 e1       	ldi	r19, 0x16	; 22
    32de:	e3 02       	muls	r30, r19
    32e0:	f0 01       	movw	r30, r0
    32e2:	11 24       	eor	r1, r1
    32e4:	ed 5e       	subi	r30, 0xED	; 237
    32e6:	f9 4f       	sbci	r31, 0xF9	; 249
    32e8:	20 81       	ld	r18, Z
    32ea:	21 30       	cpi	r18, 0x01	; 1
    32ec:	69 f0       	breq	.+26     	; 0x3308 <main+0x434>
    32ee:	22 30       	cpi	r18, 0x02	; 2
    32f0:	19 f0       	breq	.+6      	; 0x32f8 <main+0x424>
    32f2:	21 11       	cpse	r18, r1
    32f4:	0e c0       	rjmp	.+28     	; 0x3312 <main+0x43e>
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <main+0x42c>
		{
			case DISABLED:
				Flight_flags &= ~(1 << AutoLevel);	// De-activate autolevel mode
				break;
			case HANDSFREE:
				if (Flight_flags & (1 << HandsFree))// If hands free
    32f8:	20 91 14 05 	lds	r18, 0x0514
    32fc:	24 fd       	sbrc	r18, 4
    32fe:	04 c0       	rjmp	.+8      	; 0x3308 <main+0x434>
				{
					Flight_flags |= (1 << AutoLevel);// Activate autolevel mode
				}	
				else
				{
					Flight_flags &= ~(1 << AutoLevel); // De-activate autolevel mode
    3300:	20 91 14 05 	lds	r18, 0x0514
    3304:	2e 7f       	andi	r18, 0xFE	; 254
    3306:	03 c0       	rjmp	.+6      	; 0x330e <main+0x43a>
				}
				break;
			case ALWAYSON:
				Flight_flags |= (1 << AutoLevel);	// Activate autolevel mode
    3308:	20 91 14 05 	lds	r18, 0x0514
    330c:	21 60       	ori	r18, 0x01	; 1
    330e:	20 93 14 05 	sts	0x0514, r18
			default:								// Disable by default
				break;
		}

		// Check for advanced Failsafe
		if ((Config.FailsafeType == ADVANCED) && (Flight_flags & (1 << Failsafe)) && (Config.CamStab == OFF))
    3312:	20 91 0d 06 	lds	r18, 0x060D
    3316:	21 30       	cpi	r18, 0x01	; 1
    3318:	69 f4       	brne	.+26     	; 0x3334 <main+0x460>
    331a:	20 91 14 05 	lds	r18, 0x0514
    331e:	22 ff       	sbrs	r18, 2
    3320:	09 c0       	rjmp	.+18     	; 0x3334 <main+0x460>
    3322:	20 91 79 06 	lds	r18, 0x0679
    3326:	21 11       	cpse	r18, r1
    3328:	05 c0       	rjmp	.+10     	; 0x3334 <main+0x460>
		{
			Flight_flags |= (1 << AutoLevel);
    332a:	20 91 14 05 	lds	r18, 0x0514
    332e:	21 60       	ori	r18, 0x01	; 1
    3330:	20 93 14 05 	sts	0x0514, r18
		//* Primary override:
		//*		Stability enabled if Config.StabMode = ON
		//*		Stability always OFF if Config.StabMode = OFF (default)
		//************************************************************

		switch(Config.FlightMode[Config.Flight].StabMode)
    3334:	26 e1       	ldi	r18, 0x16	; 22
    3336:	28 9f       	mul	r18, r24
    3338:	f0 01       	movw	r30, r0
    333a:	29 9f       	mul	r18, r25
    333c:	f0 0d       	add	r31, r0
    333e:	11 24       	eor	r1, r1
    3340:	ee 5e       	subi	r30, 0xEE	; 238
    3342:	f9 4f       	sbci	r31, 0xF9	; 249
    3344:	80 81       	ld	r24, Z
    3346:	88 23       	and	r24, r24
    3348:	31 f0       	breq	.+12     	; 0x3356 <main+0x482>
    334a:	81 30       	cpi	r24, 0x01	; 1
    334c:	49 f4       	brne	.+18     	; 0x3360 <main+0x48c>
		{
			case DISABLED:
				Flight_flags &= ~(1 << Stability);// De-activate autolevel mode
				break;
			case ALWAYSON:
				Flight_flags |= (1 << Stability);// Activate autolevel mode
    334e:	80 91 14 05 	lds	r24, 0x0514
    3352:	82 60       	ori	r24, 0x02	; 2
    3354:	03 c0       	rjmp	.+6      	; 0x335c <main+0x488>
		//************************************************************

		switch(Config.FlightMode[Config.Flight].StabMode)
		{
			case DISABLED:
				Flight_flags &= ~(1 << Stability);// De-activate autolevel mode
    3356:	80 91 14 05 	lds	r24, 0x0514
    335a:	8d 7f       	andi	r24, 0xFD	; 253
				break;
			case ALWAYSON:
				Flight_flags |= (1 << Stability);// Activate autolevel mode
    335c:	80 93 14 05 	sts	0x0514, r24
				break;
		}

		// Reset I-terms when stabilise is off
		// This is probably superfluous...
		if (!(Flight_flags & (1 << Stability)))
    3360:	80 91 14 05 	lds	r24, 0x0514
    3364:	81 fd       	sbrc	r24, 1
    3366:	06 c0       	rjmp	.+12     	; 0x3374 <main+0x4a0>
		{
			memset(&IntegralGyro[ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3368:	8c e0       	ldi	r24, 0x0C	; 12
    336a:	a0 e9       	ldi	r26, 0x90	; 144
    336c:	b7 e0       	ldi	r27, 0x07	; 7
    336e:	1d 92       	st	X+, r1
    3370:	8a 95       	dec	r24
    3372:	e9 f7       	brne	.-6      	; 0x336e <main+0x49a>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3374:	0e 94 0f 28 	call	0x501e	; 0x501e <TIM16_ReadTCNT1>
    3378:	98 8b       	std	Y+16, r25	; 0x10
    337a:	8f 87       	std	Y+15, r24	; 0x0f

		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)
		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    337c:	88 15       	cp	r24, r8
    337e:	99 05       	cpc	r25, r9
    3380:	98 f4       	brcc	.+38     	; 0x33a8 <main+0x4d4>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	a1 e0       	ldi	r26, 0x01	; 1
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	88 19       	sub	r24, r8
    338c:	99 09       	sbc	r25, r9
    338e:	a1 09       	sbc	r26, r1
    3390:	b1 09       	sbc	r27, r1
    3392:	2f 85       	ldd	r18, Y+15	; 0x0f
    3394:	38 89       	ldd	r19, Y+16	; 0x10
    3396:	82 0f       	add	r24, r18
    3398:	93 1f       	adc	r25, r19
    339a:	a1 1d       	adc	r26, r1
    339c:	b1 1d       	adc	r27, r1
    339e:	28 0e       	add	r2, r24
    33a0:	39 1e       	adc	r3, r25
    33a2:	4a 1e       	adc	r4, r26
    33a4:	5b 1e       	adc	r5, r27
    33a6:	08 c0       	rjmp	.+16     	; 0x33b8 <main+0x4e4>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    33a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33aa:	98 89       	ldd	r25, Y+16	; 0x10
    33ac:	88 19       	sub	r24, r8
    33ae:	99 09       	sbc	r25, r9
    33b0:	28 0e       	add	r2, r24
    33b2:	39 1e       	adc	r3, r25
    33b4:	41 1c       	adc	r4, r1
    33b6:	51 1c       	adc	r5, r1
		
		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz		

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    33b8:	80 91 b2 00 	lds	r24, 0x00B2
    33bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    33be:	83 1b       	sub	r24, r19
    33c0:	4d 85       	ldd	r20, Y+13	; 0x0d
    33c2:	5e 85       	ldd	r21, Y+14	; 0x0e
    33c4:	48 0f       	add	r20, r24
    33c6:	51 1d       	adc	r21, r1
    33c8:	5e 87       	std	Y+14, r21	; 0x0e
    33ca:	4d 87       	std	Y+13, r20	; 0x0d
		ServoRate_TCNT2 = TCNT2;
    33cc:	50 91 b2 00 	lds	r21, 0x00B2
    33d0:	5e 8f       	std	Y+30, r21	; 0x1e

		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    33d2:	80 91 b2 00 	lds	r24, 0x00B2
    33d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    33d8:	82 1b       	sub	r24, r18
    33da:	49 81       	ldd	r20, Y+1	; 0x01
    33dc:	5a 81       	ldd	r21, Y+2	; 0x02
    33de:	48 0f       	add	r20, r24
    33e0:	51 1d       	adc	r21, r1
    33e2:	5a 83       	std	Y+2, r21	; 0x02
    33e4:	49 83       	std	Y+1, r20	; 0x01
		Servo_TCNT2 = TCNT2;
    33e6:	50 91 b2 00 	lds	r21, 0x00B2
    33ea:	5d 8f       	std	Y+29, r21	; 0x1d

		// Update status timeout
		Status_timeout += (uint8_t) (TCNT2 - Status_TCNT2);
    33ec:	80 91 b2 00 	lds	r24, 0x00B2
    33f0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    33f2:	82 1b       	sub	r24, r18
    33f4:	4b 85       	ldd	r20, Y+11	; 0x0b
    33f6:	5c 85       	ldd	r21, Y+12	; 0x0c
    33f8:	48 0f       	add	r20, r24
    33fa:	51 1d       	adc	r21, r1
    33fc:	5c 87       	std	Y+12, r21	; 0x0c
    33fe:	4b 87       	std	Y+11, r20	; 0x0b
		Status_TCNT2 = TCNT2;
    3400:	50 91 b2 00 	lds	r21, 0x00B2
    3404:	5a 8f       	std	Y+26, r21	; 0x1a

		// Status refresh timer
		UpdateStatus_timer += (uint8_t) (TCNT2 - Refresh_TCNT2);
    3406:	80 91 b2 00 	lds	r24, 0x00B2
    340a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    340c:	82 1b       	sub	r24, r18
    340e:	4c 89       	ldd	r20, Y+20	; 0x14
    3410:	5d 89       	ldd	r21, Y+21	; 0x15
    3412:	48 0f       	add	r20, r24
    3414:	51 1d       	adc	r21, r1
    3416:	5d 8b       	std	Y+21, r21	; 0x15
    3418:	4c 8b       	std	Y+20, r20	; 0x14
		Refresh_TCNT2 = TCNT2;
    341a:	50 91 b2 00 	lds	r21, 0x00B2
    341e:	5b 8f       	std	Y+27, r21	; 0x1b

		// Timer for audible alarms
		Ticker_Count += (uint8_t) (TCNT2 - Ticker_TCNT2);
    3420:	80 91 b2 00 	lds	r24, 0x00B2
    3424:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3426:	82 1b       	sub	r24, r18
    3428:	48 8d       	ldd	r20, Y+24	; 0x18
    342a:	59 8d       	ldd	r21, Y+25	; 0x19
    342c:	48 0f       	add	r20, r24
    342e:	51 1d       	adc	r21, r1
    3430:	59 8f       	std	Y+25, r21	; 0x19
    3432:	48 8f       	std	Y+24, r20	; 0x18
		Ticker_TCNT2 = TCNT2;
    3434:	50 91 b2 00 	lds	r21, 0x00B2
    3438:	5c 8f       	std	Y+28, r21	; 0x1c
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    343a:	28 8d       	ldd	r18, Y+24	; 0x18
    343c:	39 8d       	ldd	r19, Y+25	; 0x19
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    343e:	80 91 12 05 	lds	r24, 0x0512
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3442:	33 ff       	sbrs	r19, 3
    3444:	02 c0       	rjmp	.+4      	; 0x344a <main+0x576>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3446:	80 62       	ori	r24, 0x20	; 32
    3448:	01 c0       	rjmp	.+2      	; 0x344c <main+0x578>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    344a:	8f 7d       	andi	r24, 0xDF	; 223
    344c:	80 93 12 05 	sts	0x0512, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    3450:	4d 85       	ldd	r20, Y+13	; 0x0d
    3452:	5e 85       	ldd	r21, Y+14	; 0x0e
    3454:	4d 32       	cpi	r20, 0x2D	; 45
    3456:	51 40       	sbci	r21, 0x01	; 1
    3458:	20 f0       	brcs	.+8      	; 0x3462 <main+0x58e>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    345a:	1e 86       	std	Y+14, r1	; 0x0e
    345c:	1d 86       	std	Y+13, r1	; 0x0d
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    345e:	21 e0       	ldi	r18, 0x01	; 1
    3460:	2b 83       	std	Y+3, r18	; 0x03
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3462:	49 81       	ldd	r20, Y+1	; 0x01
    3464:	5a 81       	ldd	r21, Y+2	; 0x02
    3466:	46 32       	cpi	r20, 0x26	; 38
    3468:	86 e2       	ldi	r24, 0x26	; 38
    346a:	58 07       	cpc	r21, r24
    346c:	58 f0       	brcs	.+22     	; 0x3484 <main+0x5b0>
		{
			Overdue = true;	// This results in a "No Signal" error
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	80 93 0d 05 	sts	0x050D, r24
    3474:	4c 34       	cpi	r20, 0x4C	; 76
    3476:	5c 44       	sbci	r21, 0x4C	; 76
    3478:	38 f0       	brcs	.+14     	; 0x3488 <main+0x5b4>
    347a:	2b e4       	ldi	r18, 0x4B	; 75
    347c:	3c e4       	ldi	r19, 0x4C	; 76
    347e:	3a 83       	std	Y+2, r19	; 0x02
    3480:	29 83       	std	Y+1, r18	; 0x01
    3482:	02 c0       	rjmp	.+4      	; 0x3488 <main+0x5b4>
				RC_Timeout = SECOND_TIMER;
			}
		}
		else
		{
			Overdue = false; // debug
    3484:	10 92 0d 05 	sts	0x050D, r1
		
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3488:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <ReadGyros>
		ReadAcc();
    348c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3490:	0e 94 0f 28 	call	0x501e	; 0x501e <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    3494:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3496:	20 91 0e 05 	lds	r18, 0x050E
    349a:	30 91 0f 05 	lds	r19, 0x050F
    349e:	82 17       	cp	r24, r18
    34a0:	93 07       	cpc	r25, r19
    34a2:	48 f4       	brcc	.+18     	; 0x34b6 <main+0x5e2>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    34a4:	20 91 0e 05 	lds	r18, 0x050E
    34a8:	30 91 0f 05 	lds	r19, 0x050F
    34ac:	ac 01       	movw	r20, r24
    34ae:	42 1b       	sub	r20, r18
    34b0:	53 0b       	sbc	r21, r19
    34b2:	9a 01       	movw	r18, r20
    34b4:	08 c0       	rjmp	.+16     	; 0x34c6 <main+0x5f2>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    34b6:	20 91 0e 05 	lds	r18, 0x050E
    34ba:	30 91 0f 05 	lds	r19, 0x050F
    34be:	dc 01       	movw	r26, r24
    34c0:	a2 1b       	sub	r26, r18
    34c2:	b3 0b       	sbc	r27, r19
    34c4:	9d 01       	movw	r18, r26
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    34c6:	90 93 0f 05 	sts	0x050F, r25
    34ca:	80 93 0e 05 	sts	0x050E, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    34ce:	80 91 70 07 	lds	r24, 0x0770
    34d2:	90 91 71 07 	lds	r25, 0x0771
    34d6:	a9 01       	movw	r20, r18
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	02 97       	sbiw	r24, 0x02	; 2
    34de:	18 f4       	brcc	.+6      	; 0x34e6 <main+0x612>
		{
			interval = ticker_16; // uint16_t
    34e0:	4a 01       	movw	r8, r20
    34e2:	5b 01       	movw	r10, r22
    34e4:	11 c0       	rjmp	.+34     	; 0x3508 <main+0x634>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    34e6:	80 90 70 07 	lds	r8, 0x0770
    34ea:	90 90 71 07 	lds	r9, 0x0771
    34ee:	a1 2c       	mov	r10, r1
    34f0:	b1 2c       	mov	r11, r1
    34f2:	ef e0       	ldi	r30, 0x0F	; 15
    34f4:	88 0c       	add	r8, r8
    34f6:	99 1c       	adc	r9, r9
    34f8:	aa 1c       	adc	r10, r10
    34fa:	bb 1c       	adc	r11, r11
    34fc:	ea 95       	dec	r30
    34fe:	d1 f7       	brne	.-12     	; 0x34f4 <main+0x620>
    3500:	84 0e       	add	r8, r20
    3502:	95 1e       	adc	r9, r21
    3504:	a6 1e       	adc	r10, r22
    3506:	b7 1e       	adc	r11, r23
		}

		TMR0_counter = 0;
    3508:	10 92 71 07 	sts	0x0771, r1
    350c:	10 92 70 07 	sts	0x0770, r1

		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    3510:	c5 01       	movw	r24, r10
    3512:	b4 01       	movw	r22, r8
    3514:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    3518:	c5 01       	movw	r24, r10
    351a:	b4 01       	movw	r22, r8
    351c:	0e 94 a3 39 	call	0x7346	; 0x7346 <Sensor_PID>
		//* FrameRate = Serial frame gap as measured by the ISR.
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//************************************************************

		if (Interrupted)
    3520:	80 91 6d 07 	lds	r24, 0x076D
    3524:	88 23       	and	r24, r24
    3526:	09 f4       	brne	.+2      	; 0x352a <main+0x656>
    3528:	83 c0       	rjmp	.+262    	; 0x3630 <main+0x75c>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer if not in FAST mode.
			if (Config.Servo_rate < FAST)
    352a:	80 91 78 06 	lds	r24, 0x0678
    352e:	82 30       	cpi	r24, 0x02	; 2
    3530:	74 f4       	brge	.+28     	; 0x354e <main+0x67a>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3532:	21 e0       	ldi	r18, 0x01	; 1
    3534:	2c 83       	std	Y+4, r18	; 0x04
    3536:	34 ec       	ldi	r19, 0xC4	; 196
    3538:	23 16       	cp	r2, r19
    353a:	32 ea       	ldi	r19, 0xA2	; 162
    353c:	33 06       	cpc	r3, r19
    353e:	41 04       	cpc	r4, r1
    3540:	51 04       	cpc	r5, r1
    3542:	08 f4       	brcc	.+2      	; 0x3546 <main+0x672>
    3544:	1c 82       	std	Y+4, r1	; 0x04
				
				// Reset RC timeout now that Interrupt has been received.
				RC_Timeout = 0;

				// No longer overdue. This will cancel the "No signal" alarm.
				Overdue = false;
    3546:	10 92 0d 05 	sts	0x050D, r1
						
				// Reset rate timer once data received. Reset to current time.
				RC_Rate_Timer = 0;
				Save_TCNT1 = TIM16_ReadTCNT1();
    354a:	0e 94 0f 28 	call	0x501e	; 0x501e <TIM16_ReadTCNT1>
				RC_Rate_TCNT1 = Save_TCNT1;	
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    354e:	4d a1       	ldd	r20, Y+37	; 0x25
    3550:	41 11       	cpse	r20, r1
    3552:	0f c0       	rjmp	.+30     	; 0x3572 <main+0x69e>
    3554:	80 91 78 06 	lds	r24, 0x0678
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	09 f0       	breq	.+2      	; 0x355e <main+0x68a>
    355c:	b9 c1       	rjmp	.+882    	; 0x38d0 <main+0x9fc>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    355e:	80 91 8b 07 	lds	r24, 0x078B
    3562:	90 91 8c 07 	lds	r25, 0x078C
    3566:	51 e0       	ldi	r21, 0x01	; 1
    3568:	5c 83       	std	Y+4, r21	; 0x04
    356a:	84 3c       	cpi	r24, 0xC4	; 196
    356c:	92 4a       	sbci	r25, 0xA2	; 162
    356e:	08 f4       	brcc	.+2      	; 0x3572 <main+0x69e>
    3570:	1c 82       	std	Y+4, r1	; 0x04
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the serial data gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    3572:	80 91 78 06 	lds	r24, 0x0678
    3576:	82 30       	cpi	r24, 0x02	; 2
    3578:	09 f0       	breq	.+2      	; 0x357c <main+0x6a8>
    357a:	a8 c1       	rjmp	.+848    	; 0x38cc <main+0x9f8>
				// Slow packets (19.7ms gap). Pulse spans just two input packets.
				// 38.8s available space for S.Bus, 40ms for Satellite and 39.92ms for Xtreme.
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
    357c:	2c 81       	ldd	r18, Y+4	; 0x04
    357e:	22 23       	and	r18, r18
    3580:	09 f4       	brne	.+2      	; 0x3584 <main+0x6b0>
    3582:	5b c1       	rjmp	.+694    	; 0x383a <main+0x966>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
    3584:	38 ec       	ldi	r19, 0xC8	; 200
    3586:	c3 16       	cp	r12, r19
    3588:	3b e4       	ldi	r19, 0x4B	; 75
    358a:	d3 06       	cpc	r13, r19
    358c:	e1 04       	cpc	r14, r1
    358e:	f1 04       	cpc	r15, r1
    3590:	08 f0       	brcs	.+2      	; 0x3594 <main+0x6c0>
    3592:	a2 c1       	rjmp	.+836    	; 0x38d8 <main+0xa04>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
    3594:	46 e2       	ldi	r20, 0x26	; 38
    3596:	c4 16       	cp	r12, r20
    3598:	4f e3       	ldi	r20, 0x3F	; 63
    359a:	d4 06       	cpc	r13, r20
    359c:	e1 04       	cpc	r14, r1
    359e:	f1 04       	cpc	r15, r1
    35a0:	08 f0       	brcs	.+2      	; 0x35a4 <main+0x6d0>
    35a2:	9e c1       	rjmp	.+828    	; 0x38e0 <main+0xa0c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
    35a4:	51 e2       	ldi	r21, 0x21	; 33
    35a6:	c5 16       	cp	r12, r21
    35a8:	56 e3       	ldi	r21, 0x36	; 54
    35aa:	d5 06       	cpc	r13, r21
    35ac:	e1 04       	cpc	r14, r1
    35ae:	f1 04       	cpc	r15, r1
    35b0:	08 f0       	brcs	.+2      	; 0x35b4 <main+0x6e0>
    35b2:	9a c1       	rjmp	.+820    	; 0x38e8 <main+0xa14>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
    35b4:	8d e5       	ldi	r24, 0x5D	; 93
    35b6:	c8 16       	cp	r12, r24
    35b8:	8f e2       	ldi	r24, 0x2F	; 47
    35ba:	d8 06       	cpc	r13, r24
    35bc:	e1 04       	cpc	r14, r1
    35be:	f1 04       	cpc	r15, r1
    35c0:	08 f0       	brcs	.+2      	; 0x35c4 <main+0x6f0>
    35c2:	96 c1       	rjmp	.+812    	; 0x38f0 <main+0xa1c>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
    35c4:	9c ec       	ldi	r25, 0xCC	; 204
    35c6:	c9 16       	cp	r12, r25
    35c8:	99 e2       	ldi	r25, 0x29	; 41
    35ca:	d9 06       	cpc	r13, r25
    35cc:	e1 04       	cpc	r14, r1
    35ce:	f1 04       	cpc	r15, r1
    35d0:	08 f0       	brcs	.+2      	; 0x35d4 <main+0x700>
    35d2:	92 c1       	rjmp	.+804    	; 0x38f8 <main+0xa24>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
    35d4:	a4 ee       	ldi	r26, 0xE4	; 228
    35d6:	ca 16       	cp	r12, r26
    35d8:	a5 e2       	ldi	r26, 0x25	; 37
    35da:	da 06       	cpc	r13, r26
    35dc:	e1 04       	cpc	r14, r1
    35de:	f1 04       	cpc	r15, r1
    35e0:	08 f0       	brcs	.+2      	; 0x35e4 <main+0x710>
    35e2:	58 c1       	rjmp	.+688    	; 0x3894 <main+0x9c0>
    35e4:	21 e0       	ldi	r18, 0x01	; 1
    35e6:	2d a3       	std	Y+37, r18	; 0x25
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    35e8:	7a e0       	ldi	r23, 0x0A	; 10
    35ea:	67 2e       	mov	r6, r23
    35ec:	71 2c       	mov	r7, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm.
			Overdue = false;
    35ee:	10 92 0d 05 	sts	0x050D, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    35f2:	0e 94 0f 28 	call	0x501e	; 0x501e <TIM16_ReadTCNT1>
    35f6:	98 8b       	std	Y+16, r25	; 0x10
    35f8:	8f 87       	std	Y+15, r24	; 0x0f
			//* output when serial RC formats are used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    35fa:	80 91 78 06 	lds	r24, 0x0678
    35fe:	82 30       	cpi	r24, 0x02	; 2
    3600:	09 f0       	breq	.+2      	; 0x3604 <main+0x730>
    3602:	54 c1       	rjmp	.+680    	; 0x38ac <main+0x9d8>
    3604:	5d a1       	ldd	r21, Y+37	; 0x25
    3606:	55 23       	and	r21, r21
    3608:	09 f4       	brne	.+2      	; 0x360c <main+0x738>
    360a:	50 c1       	rjmp	.+672    	; 0x38ac <main+0x9d8>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    360c:	2f 89       	ldd	r18, Y+23	; 0x17
    360e:	21 11       	cpse	r18, r1
    3610:	53 c1       	rjmp	.+678    	; 0x38b8 <main+0x9e4>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    3612:	80 91 6d 07 	lds	r24, 0x076D
    3616:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3618:	11 e0       	ldi	r17, 0x01	; 1
					}
					
					Interrupted = false;		// Cancel pending interrupts
    361a:	10 92 6d 07 	sts	0x076D, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    361e:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3622:	1a 82       	std	Y+2, r1	; 0x02
    3624:	19 82       	std	Y+1, r1	; 0x01

			// No longer overdue. This will cancel the "No signal" alarm.
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3626:	21 2c       	mov	r2, r1
    3628:	31 2c       	mov	r3, r1
    362a:	21 01       	movw	r4, r2
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    362c:	1e 82       	std	Y+6, r1	; 0x06
					PWMBlocked = false;			// Enable PWM generation	
    362e:	1d 82       	std	Y+5, r1	; 0x05
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||									// Running at RC rate or
    3630:	80 91 6d 07 	lds	r24, 0x076D
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3634:	81 11       	cpse	r24, r1
    3636:	10 c0       	rjmp	.+32     	; 0x3658 <main+0x784>
				(Interrupted) ||									// Running at RC rate or
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||	// Run at full loop rate if allowed or
    3638:	80 91 78 06 	lds	r24, 0x0678
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||									// Running at RC rate or
    363c:	82 30       	cpi	r24, 0x02	; 2
    363e:	19 f4       	brne	.+6      	; 0x3646 <main+0x772>
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||	// Run at full loop rate if allowed or
    3640:	4d 81       	ldd	r20, Y+5	; 0x05
    3642:	44 23       	and	r20, r20
    3644:	49 f0       	breq	.+18     	; 0x3658 <main+0x784>
				(Flight_flags & (1 << Failsafe)) ||					// In failsafe or
    3646:	90 91 14 05 	lds	r25, 0x0514
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||									// Running at RC rate or
				((Config.Servo_rate == FAST) && (!PWMBlocked)) ||	// Run at full loop rate if allowed or
    364a:	92 fd       	sbrc	r25, 2
    364c:	05 c0       	rjmp	.+10     	; 0x3658 <main+0x784>
				(Flight_flags & (1 << Failsafe)) ||					// In failsafe or
    364e:	90 91 79 06 	lds	r25, 0x0679
    3652:	91 30       	cpi	r25, 0x01	; 1
    3654:	09 f0       	breq	.+2      	; 0x3658 <main+0x784>
    3656:	a9 c0       	rjmp	.+338    	; 0x37aa <main+0x8d6>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    3658:	80 91 6d 07 	lds	r24, 0x076D
    365c:	88 23       	and	r24, r24
    365e:	19 f0       	breq	.+6      	; 0x3666 <main+0x792>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    3660:	10 92 6d 07 	sts	0x076D, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3664:	11 e0       	ldi	r17, 0x01	; 1
				// In SYNC mode, with NO SIGNAL, need to keep the outputs at the correct rate (47Hz or RC rate)
				
				
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||				// At ServoTick for A.Servo in FAST mode
    3666:	90 91 78 06 	lds	r25, 0x0678
    366a:	e2 e8       	ldi	r30, 0x82	; 130
    366c:	f6 e0       	ldi	r31, 0x06	; 6
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    3672:	80 e0       	ldi	r24, 0x00	; 0
				//Overdue
				// In SYNC mode, with NO SIGNAL, need to keep the outputs at the correct rate (47Hz or RC rate)
				
				
				// Mark bits depending on the selected output type
				if	(
    3674:	92 30       	cpi	r25, 0x02	; 2
    3676:	29 f4       	brne	.+10     	; 0x3682 <main+0x7ae>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||				// At ServoTick for A.Servo in FAST mode
    3678:	40 81       	ld	r20, Z
    367a:	44 23       	and	r20, r20
    367c:	09 f4       	brne	.+2      	; 0x3680 <main+0x7ac>
    367e:	58 c1       	rjmp	.+688    	; 0x3930 <main+0xa5c>
    3680:	0b c0       	rjmp	.+22     	; 0x3698 <main+0x7c4>
    3682:	91 30       	cpi	r25, 0x01	; 1
    3684:	39 f4       	brne	.+14     	; 0x3694 <main+0x7c0>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||// At ServoTick for A.Servo in SYNC with Fast RC
    3686:	40 81       	ld	r20, Z
    3688:	41 11       	cpse	r20, r1
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <main+0x7c4>
    368c:	5c 81       	ldd	r21, Y+4	; 0x04
    368e:	51 11       	cpse	r21, r1
    3690:	17 c0       	rjmp	.+46     	; 0x36c0 <main+0x7ec>
    3692:	4a c1       	rjmp	.+660    	; 0x3928 <main+0xa54>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||				// At RC rate for A.Servo with slow RC
    3694:	19 16       	cp	r1, r25
    3696:	64 f4       	brge	.+24     	; 0x36b0 <main+0x7dc>

						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (!Overdue)) ||				// Always for D.Servo and Motor in SYNC or FAST modes unless Overdue
    3698:	40 81       	ld	r20, Z
    369a:	14 16       	cp	r1, r20
    369c:	cc f4       	brge	.+50     	; 0x36d0 <main+0x7fc>
    369e:	40 91 0d 05 	lds	r20, 0x050D
    36a2:	44 23       	and	r20, r20
    36a4:	69 f0       	breq	.+26     	; 0x36c0 <main+0x7ec>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO) && (Overdue) && ServoTick) ||	// At ServoTick SYNC or FAST modes when Overdue
    36a6:	40 91 0d 05 	lds	r20, 0x050D
    36aa:	44 23       	and	r20, r20
    36ac:	89 f0       	breq	.+34     	; 0x36d0 <main+0x7fc>
    36ae:	05 c0       	rjmp	.+10     	; 0x36ba <main+0x7e6>
    36b0:	91 11       	cpse	r25, r1
    36b2:	0e c0       	rjmp	.+28     	; 0x36d0 <main+0x7fc>
						
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||												// All outputs at ServoTick in LOW mode with fast RC
    36b4:	5c 81       	ldd	r21, Y+4	; 0x04
    36b6:	51 11       	cpse	r21, r1
    36b8:	03 c0       	rjmp	.+6      	; 0x36c0 <main+0x7ec>
    36ba:	4b 81       	ldd	r20, Y+3	; 0x03
    36bc:	44 23       	and	r20, r20
    36be:	41 f0       	breq	.+16     	; 0x36d0 <main+0x7fc>
						((Config.Servo_rate == LOW) && (SlowRC))																// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	02 2e       	mov	r0, r18
    36c6:	01 c0       	rjmp	.+2      	; 0x36ca <main+0x7f6>
    36c8:	44 0f       	add	r20, r20
    36ca:	0a 94       	dec	r0
    36cc:	ea f7       	brpl	.-6      	; 0x36c8 <main+0x7f4>
    36ce:	84 2b       	or	r24, r20
    36d0:	2f 5f       	subi	r18, 0xFF	; 255
    36d2:	3f 4f       	sbci	r19, 0xFF	; 255
    36d4:	70 96       	adiw	r30, 0x10	; 16
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    36d6:	28 30       	cpi	r18, 0x08	; 8
    36d8:	31 05       	cpc	r19, r1
    36da:	61 f6       	brne	.-104    	; 0x3674 <main+0x7a0>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    36dc:	5b 81       	ldd	r21, Y+3	; 0x03
    36de:	55 23       	and	r21, r21
    36e0:	11 f0       	breq	.+4      	; 0x36e6 <main+0x812>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    36e2:	1e 86       	std	Y+14, r1	; 0x0e
    36e4:	1d 86       	std	Y+13, r1	; 0x0d
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    36e6:	a1 e0       	ldi	r26, 0x01	; 1
    36e8:	6a 16       	cp	r6, r26
    36ea:	71 04       	cpc	r7, r1
    36ec:	19 f5       	brne	.+70     	; 0x3734 <main+0x860>
    36ee:	92 30       	cpi	r25, 0x02	; 2
    36f0:	09 f5       	brne	.+66     	; 0x3734 <main+0x860>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
    36f2:	bd e8       	ldi	r27, 0x8D	; 141
    36f4:	8b 16       	cp	r8, r27
    36f6:	b0 e2       	ldi	r27, 0x20	; 32
    36f8:	9b 06       	cpc	r9, r27
    36fa:	a1 04       	cpc	r10, r1
    36fc:	b1 04       	cpc	r11, r1
    36fe:	90 f0       	brcs	.+36     	; 0x3724 <main+0x850>
    3700:	75 01       	movw	r14, r10
    3702:	64 01       	movw	r12, r8
    3704:	e2 e6       	ldi	r30, 0x62	; 98
    3706:	8e 16       	cp	r8, r30
    3708:	e1 e5       	ldi	r30, 0x51	; 81
    370a:	9e 06       	cpc	r9, r30
    370c:	a1 04       	cpc	r10, r1
    370e:	b1 04       	cpc	r11, r1
    3710:	30 f0       	brcs	.+12     	; 0x371e <main+0x84a>
    3712:	31 e6       	ldi	r19, 0x61	; 97
    3714:	c3 2e       	mov	r12, r19
    3716:	31 e5       	ldi	r19, 0x51	; 81
    3718:	d3 2e       	mov	r13, r19
    371a:	e1 2c       	mov	r14, r1
    371c:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    371e:	21 e0       	ldi	r18, 0x01	; 1
    3720:	2d 83       	std	Y+5, r18	; 0x05
    3722:	08 c0       	rjmp	.+16     	; 0x3734 <main+0x860>
				// if it lies within believable ranges of 120Hz to 300Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if (interval < PWM_PERIOD_BEST)		// Faster than 300Hz
				{
					PWM_interval = PWM_PERIOD_BEST;
    3724:	2d e8       	ldi	r18, 0x8D	; 141
    3726:	c2 2e       	mov	r12, r18
    3728:	20 e2       	ldi	r18, 0x20	; 32
    372a:	d2 2e       	mov	r13, r18
    372c:	e1 2c       	mov	r14, r1
    372e:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    3730:	31 e0       	ldi	r19, 0x01	; 1
    3732:	3d 83       	std	Y+5, r19	; 0x05
				{
					PWM_interval = interval;		// Actual interval
				}
			}
			
			Calculate_PID();						// Calculate PID values
    3734:	8b a3       	std	Y+35, r24	; 0x23
    3736:	0e 94 ce 3a 	call	0x759c	; 0x759c <Calculate_PID>
			ProcessMixer();							// Do all the mixer tasks - can be very slow
    373a:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <ProcessMixer>

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    373e:	90 91 0d 05 	lds	r25, 0x050D
    3742:	8b a1       	ldd	r24, Y+35	; 0x23
    3744:	91 11       	cpse	r25, r1
    3746:	09 c0       	rjmp	.+18     	; 0x375a <main+0x886>
			}
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    3748:	00 23       	and	r16, r16
    374a:	f9 f0       	breq	.+62     	; 0x378a <main+0x8b6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    374c:	8b ee       	ldi	r24, 0xEB	; 235
    374e:	9c e2       	ldi	r25, 0x2C	; 44
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <main+0x87c>
    3754:	00 c0       	rjmp	.+0      	; 0x3756 <main+0x882>
    3756:	00 00       	nop
    3758:	1a c0       	rjmp	.+52     	; 0x378e <main+0x8ba>
			Calculate_PID();						// Calculate PID values
			ProcessMixer();							// Do all the mixer tasks - can be very slow

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
    375a:	e2 e8       	ldi	r30, 0x82	; 130
    375c:	f6 e0       	ldi	r31, 0x06	; 6
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
				{
					// Check for motor marker
					if (Config.Channel[i].Motor_marker == MOTOR)
    3762:	90 81       	ld	r25, Z
    3764:	92 30       	cpi	r25, 0x02	; 2
    3766:	51 f4       	brne	.+20     	; 0x377c <main+0x8a8>
					{
						// Set output to maximum pulse width
						ServoOut[i] = MOTOR_0;
    3768:	d9 01       	movw	r26, r18
    376a:	aa 0f       	add	r26, r26
    376c:	bb 1f       	adc	r27, r27
    376e:	a8 53       	subi	r26, 0x38	; 56
    3770:	b8 4f       	sbci	r27, 0xF8	; 248
    3772:	4c e4       	ldi	r20, 0x4C	; 76
    3774:	54 e0       	ldi	r21, 0x04	; 4
    3776:	11 96       	adiw	r26, 0x01	; 1
    3778:	5c 93       	st	X, r21
    377a:	4e 93       	st	-X, r20
    377c:	2f 5f       	subi	r18, 0xFF	; 255
    377e:	3f 4f       	sbci	r19, 0xFF	; 255
    3780:	70 96       	adiw	r30, 0x10	; 16

			// Set motors to idle on loss of signal.
			// Output LOW pulse (1.1ms) for each output that is set to MOTOR
			if (Overdue)
			{
				for (i = 0; i < MAX_OUTPUTS; i++)
    3782:	28 30       	cpi	r18, 0x08	; 8
    3784:	31 05       	cpc	r19, r1
    3786:	69 f7       	brne	.-38     	; 0x3762 <main+0x88e>
    3788:	df cf       	rjmp	.-66     	; 0x3748 <main+0x874>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    378a:	0e 94 44 3e 	call	0x7c88	; 0x7c88 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    378e:	80 91 78 06 	lds	r24, 0x0678
    3792:	82 30       	cpi	r24, 0x02	; 2
    3794:	31 f4       	brne	.+12     	; 0x37a2 <main+0x8ce>
    3796:	16 14       	cp	r1, r6
    3798:	17 04       	cpc	r1, r7
    379a:	1c f4       	brge	.+6      	; 0x37a2 <main+0x8ce>
			{
				PWM_pulses--;
    379c:	91 e0       	ldi	r25, 0x01	; 1
    379e:	69 1a       	sub	r6, r25
    37a0:	71 08       	sbc	r7, r1
			}
			
			LoopCount = 0;						// Reset loop counter
    37a2:	10 92 0c 05 	sts	0x050C, r1
    37a6:	1b 82       	std	Y+3, r1	; 0x03
    37a8:	24 c0       	rjmp	.+72     	; 0x37f2 <main+0x91e>
		}
		
		// In FAST mode and in-between bursts, sync up with the RC so that the time from Interrupt to PWM is constant.
		// This helps tighten up the number of pulses allowable
		else if ((Config.Servo_rate == FAST) && (PWMBlocked == true) && (RCrateMeasured == true) && (RCInterruptsON == true) && (Overdue == false))
    37aa:	82 30       	cpi	r24, 0x02	; 2
    37ac:	11 f5       	brne	.+68     	; 0x37f2 <main+0x91e>
    37ae:	2d 81       	ldd	r18, Y+5	; 0x05
    37b0:	22 23       	and	r18, r18
    37b2:	f9 f0       	breq	.+62     	; 0x37f2 <main+0x91e>
    37b4:	3d a1       	ldd	r19, Y+37	; 0x25
    37b6:	33 23       	and	r19, r19
    37b8:	79 f1       	breq	.+94     	; 0x3818 <main+0x944>
    37ba:	4e 81       	ldd	r20, Y+6	; 0x06
    37bc:	44 23       	and	r20, r20
    37be:	09 f4       	brne	.+2      	; 0x37c2 <main+0x8ee>
    37c0:	bb c0       	rjmp	.+374    	; 0x3938 <main+0xa64>
    37c2:	80 91 0d 05 	lds	r24, 0x050D
    37c6:	81 11       	cpse	r24, r1
    37c8:	14 c0       	rjmp	.+40     	; 0x37f2 <main+0x91e>
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
		{
			fast_sync_timer = 0;
			
			// Wait here until interrupted or timed out (15ms)
			while ((Interrupted == false) && (fast_sync_timer < FASTSYNCLIMIT))
    37ce:	20 91 6d 07 	lds	r18, 0x076D
    37d2:	21 11       	cpse	r18, r1
    37d4:	0e c0       	rjmp	.+28     	; 0x37f2 <main+0x91e>
    37d6:	85 32       	cpi	r24, 0x25	; 37
    37d8:	31 e0       	ldi	r19, 0x01	; 1
    37da:	93 07       	cpc	r25, r19
    37dc:	50 f4       	brcc	.+20     	; 0x37f2 <main+0x91e>
			{
				fast_sync_timer += (uint8_t)(TCNT2 - fast_sync_TCNT2);
    37de:	20 91 b2 00 	lds	r18, 0x00B2
    37e2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    37e4:	25 1b       	sub	r18, r21
    37e6:	82 0f       	add	r24, r18
    37e8:	91 1d       	adc	r25, r1
				fast_sync_TCNT2 = TCNT2;
    37ea:	20 91 b2 00 	lds	r18, 0x00B2
    37ee:	2f 8f       	std	Y+31, r18	; 0x1f
    37f0:	ee cf       	rjmp	.-36     	; 0x37ce <main+0x8fa>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    37f2:	16 14       	cp	r1, r6
    37f4:	17 04       	cpc	r1, r7
    37f6:	84 f0       	brlt	.+32     	; 0x3818 <main+0x944>
    37f8:	4d a1       	ldd	r20, Y+37	; 0x25
    37fa:	44 23       	and	r20, r20
    37fc:	69 f0       	breq	.+26     	; 0x3818 <main+0x944>
    37fe:	5e 81       	ldd	r21, Y+6	; 0x06
    3800:	51 11       	cpse	r21, r1
    3802:	0a c0       	rjmp	.+20     	; 0x3818 <main+0x944>
    3804:	80 91 78 06 	lds	r24, 0x0678
    3808:	82 30       	cpi	r24, 0x02	; 2
    380a:	29 f4       	brne	.+10     	; 0x3816 <main+0x942>
		{
			init_int();					// Re-enable interrupts
    380c:	0e 94 0a 2b 	call	0x5614	; 0x5614 <init_int>
			RCInterruptsON = true;
    3810:	21 e0       	ldi	r18, 0x01	; 1
    3812:	2e 83       	std	Y+6, r18	; 0x06
    3814:	01 c0       	rjmp	.+2      	; 0x3818 <main+0x944>
    3816:	1e 82       	std	Y+6, r1	; 0x06
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    3818:	80 91 15 05 	lds	r24, 0x0515
    381c:	39 a1       	ldd	r19, Y+33	; 0x21
    381e:	38 17       	cp	r19, r24
    3820:	29 f0       	breq	.+10     	; 0x382c <main+0x958>
    3822:	4c a1       	ldd	r20, Y+36	; 0x24
    3824:	41 11       	cpse	r20, r1
    3826:	02 c0       	rjmp	.+4      	; 0x382c <main+0x958>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    3828:	57 e0       	ldi	r21, 0x07	; 7
    382a:	5c a3       	std	Y+36, r21	; 0x24
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    382c:	20 91 15 05 	lds	r18, 0x0515
    3830:	29 a3       	std	Y+33, r18	; 0x21
			Flight_flags &= ~(1 << Failsafe);
		}

		// Lost model alarm
		LostModel_timer += (uint8_t) (TCNT2 - Lost_TCNT2);
		Lost_TCNT2 = TCNT2;
    3832:	ba a0       	ldd	r11, Y+34	; 0x22
			Menu_mode = PRESTATUS_TIMEOUT;
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
	} // main loop
    3834:	8f 84       	ldd	r8, Y+15	; 0x0f
    3836:	98 88       	ldd	r9, Y+16	; 0x10
    3838:	8c cb       	rjmp	.-2280   	; 0x2f52 <main+0x7e>

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
    383a:	3d ec       	ldi	r19, 0xCD	; 205
    383c:	c3 16       	cp	r12, r19
    383e:	36 e4       	ldi	r19, 0x46	; 70
    3840:	d3 06       	cpc	r13, r19
    3842:	e1 04       	cpc	r14, r1
    3844:	f1 04       	cpc	r15, r1
    3846:	08 f0       	brcs	.+2      	; 0x384a <main+0x976>
    3848:	5d c0       	rjmp	.+186    	; 0x3904 <main+0xa30>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
    384a:	44 ea       	ldi	r20, 0xA4	; 164
    384c:	c4 16       	cp	r12, r20
    384e:	48 e3       	ldi	r20, 0x38	; 56
    3850:	d4 06       	cpc	r13, r20
    3852:	e1 04       	cpc	r14, r1
    3854:	f1 04       	cpc	r15, r1
    3856:	08 f0       	brcs	.+2      	; 0x385a <main+0x986>
    3858:	59 c0       	rjmp	.+178    	; 0x390c <main+0xa38>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
    385a:	53 e3       	ldi	r21, 0x33	; 51
    385c:	c5 16       	cp	r12, r21
    385e:	5f e2       	ldi	r21, 0x2F	; 47
    3860:	d5 06       	cpc	r13, r21
    3862:	e1 04       	cpc	r14, r1
    3864:	f1 04       	cpc	r15, r1
    3866:	08 f0       	brcs	.+2      	; 0x386a <main+0x996>
    3868:	55 c0       	rjmp	.+170    	; 0x3914 <main+0xa40>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
    386a:	85 e7       	ldi	r24, 0x75	; 117
    386c:	c8 16       	cp	r12, r24
    386e:	88 e2       	ldi	r24, 0x28	; 40
    3870:	d8 06       	cpc	r13, r24
    3872:	e1 04       	cpc	r14, r1
    3874:	f1 04       	cpc	r15, r1
    3876:	08 f0       	brcs	.+2      	; 0x387a <main+0x9a6>
    3878:	51 c0       	rjmp	.+162    	; 0x391c <main+0xa48>
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
					}
				
					if (PWM_interval < 9062)	// 9062 = 3.62ms
    387a:	96 e6       	ldi	r25, 0x66	; 102
    387c:	c9 16       	cp	r12, r25
    387e:	93 e2       	ldi	r25, 0x23	; 35
    3880:	d9 06       	cpc	r13, r25
    3882:	e1 04       	cpc	r14, r1
    3884:	f1 04       	cpc	r15, r1
    3886:	60 f4       	brcc	.+24     	; 0x38a0 <main+0x9cc>
    3888:	21 e0       	ldi	r18, 0x01	; 1
    388a:	2d a3       	std	Y+37, r18	; 0x25
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 275Hz
    388c:	68 e0       	ldi	r22, 0x08	; 8
    388e:	66 2e       	mov	r6, r22
    3890:	71 2c       	mov	r7, r1
    3892:	ad ce       	rjmp	.-678    	; 0x35ee <main+0x71a>
    3894:	31 e0       	ldi	r19, 0x01	; 1
    3896:	3d a3       	std	Y+37, r19	; 0x25
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10700)	// 10888 = 4.3ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
    3898:	59 e0       	ldi	r21, 0x09	; 9
    389a:	65 2e       	mov	r6, r21
    389c:	71 2c       	mov	r7, r1
    389e:	a7 ce       	rjmp	.-690    	; 0x35ee <main+0x71a>
    38a0:	41 e0       	ldi	r20, 0x01	; 1
    38a2:	4d a3       	std	Y+37, r20	; 0x25
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
					}
				
					if (PWM_interval < 10357)	// 10357 = 4.14ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 241Hz
    38a4:	47 e0       	ldi	r20, 0x07	; 7
    38a6:	64 2e       	mov	r6, r20
    38a8:	71 2c       	mov	r7, r1
    38aa:	a1 ce       	rjmp	.-702    	; 0x35ee <main+0x71a>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    38ac:	1a 82       	std	Y+2, r1	; 0x02
    38ae:	19 82       	std	Y+1, r1	; 0x01

			// No longer overdue. This will cancel the "No signal" alarm.
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    38b0:	21 2c       	mov	r2, r1
    38b2:	31 2c       	mov	r3, r1
    38b4:	21 01       	movw	r4, r2
    38b6:	bc ce       	rjmp	.-648    	; 0x3630 <main+0x75c>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    38b8:	1a 82       	std	Y+2, r1	; 0x02
    38ba:	19 82       	std	Y+1, r1	; 0x01

			// No longer overdue. This will cancel the "No signal" alarm.
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    38bc:	21 2c       	mov	r2, r1
    38be:	31 2c       	mov	r3, r1
    38c0:	21 01       	movw	r4, r2
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    38c2:	1f 8a       	std	Y+23, r1	; 0x17
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    38c4:	31 e0       	ldi	r19, 0x01	; 1
    38c6:	3d 83       	std	Y+5, r19	; 0x05
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    38c8:	1d a2       	std	Y+37, r1	; 0x25
    38ca:	b2 ce       	rjmp	.-668    	; 0x3630 <main+0x75c>
    38cc:	31 e0       	ldi	r19, 0x01	; 1
    38ce:	3d a3       	std	Y+37, r19	; 0x25
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    38d0:	66 24       	eor	r6, r6
    38d2:	63 94       	inc	r6
    38d4:	71 2c       	mov	r7, r1
    38d6:	8b ce       	rjmp	.-746    	; 0x35ee <main+0x71a>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 38ms is safe for all formats.

				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 103Hz
    38d8:	e4 e0       	ldi	r30, 0x04	; 4
    38da:	6e 2e       	mov	r6, r30
    38dc:	71 2c       	mov	r7, r1
    38de:	0f c0       	rjmp	.+30     	; 0x38fe <main+0xa2a>
				
					if (PWM_interval < 19400)	// 19600 = 7.76ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 129Hz
    38e0:	75 e0       	ldi	r23, 0x05	; 5
    38e2:	67 2e       	mov	r6, r23
    38e4:	71 2c       	mov	r7, r1
    38e6:	0b c0       	rjmp	.+22     	; 0x38fe <main+0xa2a>
					}
				
					if (PWM_interval < 16166)	// 16333 = 6.46ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 154Hz
    38e8:	66 e0       	ldi	r22, 0x06	; 6
    38ea:	66 2e       	mov	r6, r22
    38ec:	71 2c       	mov	r7, r1
    38ee:	07 c0       	rjmp	.+14     	; 0x38fe <main+0xa2a>
					}
				
					if (PWM_interval < 13857)	// 14000 = 5.5ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 180Hz
    38f0:	57 e0       	ldi	r21, 0x07	; 7
    38f2:	65 2e       	mov	r6, r21
    38f4:	71 2c       	mov	r7, r1
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <main+0xa2a>
					}
				
					if (PWM_interval < 12125)	// 12250 = 4.85ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    38f8:	48 e0       	ldi	r20, 0x08	; 8
    38fa:	64 2e       	mov	r6, r20
    38fc:	71 2c       	mov	r7, r1
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 232Hz
					}
				
					if (PWM_interval < 9700)	// 9800 = 3.88ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 257Hz
    38fe:	41 e0       	ldi	r20, 0x01	; 1
    3900:	4d a3       	std	Y+37, r20	; 0x25
    3902:	75 ce       	rjmp	.-790    	; 0x35ee <main+0x71a>
				// Each PWM period is about 2.6ms so we need to see how many will fit before the next packet.
				// It is easiest to assume that say 29ms is safe for all formats.

				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 103Hz
    3904:	33 e0       	ldi	r19, 0x03	; 3
    3906:	63 2e       	mov	r6, r19
    3908:	71 2c       	mov	r7, r1
    390a:	0b c0       	rjmp	.+22     	; 0x3922 <main+0xa4e>
				
					if (PWM_interval < 18125)	// 18125 = 7.25ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 138Hz
    390c:	24 e0       	ldi	r18, 0x04	; 4
    390e:	62 2e       	mov	r6, r18
    3910:	71 2c       	mov	r7, r1
    3912:	07 c0       	rjmp	.+14     	; 0x3922 <main+0xa4e>
					}
				
					if (PWM_interval < 14500)	// 14500 = 5.8ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 172Hz
    3914:	95 e0       	ldi	r25, 0x05	; 5
    3916:	69 2e       	mov	r6, r25
    3918:	71 2c       	mov	r7, r1
    391a:	03 c0       	rjmp	.+6      	; 0x3922 <main+0xa4e>
					}
				
					if (PWM_interval < 12083)	// 12083 = 4.83ms
					{
						PWM_pulses += 1;		// One more pulse will fit if interval faster than 206Hz
    391c:	86 e0       	ldi	r24, 0x06	; 6
    391e:	68 2e       	mov	r6, r24
    3920:	71 2c       	mov	r7, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3922:	51 e0       	ldi	r21, 0x01	; 1
    3924:	5d a3       	std	Y+37, r21	; 0x25
    3926:	63 ce       	rjmp	.-826    	; 0x35ee <main+0x71a>
				// In SYNC mode, with NO SIGNAL, need to keep the outputs at the correct rate (47Hz or RC rate)
				
				
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||				// At ServoTick for A.Servo in FAST mode
    3928:	4b 81       	ldd	r20, Y+3	; 0x03
    392a:	41 11       	cpse	r20, r1
    392c:	c9 ce       	rjmp	.-622    	; 0x36c0 <main+0x7ec>
    392e:	b4 ce       	rjmp	.-664    	; 0x3698 <main+0x7c4>
    3930:	5b 81       	ldd	r21, Y+3	; 0x03
    3932:	51 11       	cpse	r21, r1
    3934:	c5 ce       	rjmp	.-630    	; 0x36c0 <main+0x7ec>
    3936:	b0 ce       	rjmp	.-672    	; 0x3698 <main+0x7c4>
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    3938:	16 14       	cp	r1, r6
    393a:	17 04       	cpc	r1, r7
    393c:	0c f4       	brge	.+2      	; 0x3940 <main+0xa6c>
    393e:	6c cf       	rjmp	.-296    	; 0x3818 <main+0x944>
    3940:	61 cf       	rjmp	.-318    	; 0x3804 <main+0x930>

00003942 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	c7 e0       	ldi	r28, 0x07	; 7
    394c:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    394e:	08 2f       	mov	r16, r24
    3950:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    3952:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    3954:	c8 01       	movw	r24, r16
    3956:	0c 2e       	mov	r0, r28
    3958:	02 c0       	rjmp	.+4      	; 0x395e <spiwrite+0x1c>
    395a:	95 95       	asr	r25
    395c:	87 95       	ror	r24
    395e:	0a 94       	dec	r0
    3960:	e2 f7       	brpl	.-8      	; 0x395a <spiwrite+0x18>
    3962:	80 ff       	sbrs	r24, 0
    3964:	02 c0       	rjmp	.+4      	; 0x396a <spiwrite+0x28>
		{
			LCD_SI = 1;
    3966:	59 9a       	sbi	0x0b, 1	; 11
    3968:	01 c0       	rjmp	.+2      	; 0x396c <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    396a:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    396c:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    396e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <glcd_delay>
    3972:	21 97       	sbiw	r28, 0x01	; 1
    3974:	70 f7       	brcc	.-36     	; 0x3952 <spiwrite+0x10>
	}
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	08 95       	ret

00003980 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    3980:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3982:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <spiwrite>

00003986 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3986:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3988:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <spiwrite>

0000398c <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    398c:	cf 93       	push	r28
    398e:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    3990:	81 e8       	ldi	r24, 0x81	; 129
    3992:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
	st7565_command(val);
    3996:	8c 2f       	mov	r24, r28
}
    3998:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    399a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <st7565_command>

0000399e <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    39a2:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    39a4:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39a6:	87 e8       	ldi	r24, 0x87	; 135
    39a8:	93 e1       	ldi	r25, 0x13	; 19
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <st7565_init+0xc>
    39ae:	00 c0       	rjmp	.+0      	; 0x39b0 <st7565_init+0x12>
    39b0:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    39b2:	5e 9a       	sbi	0x0b, 6	; 11
    39b4:	cf ee       	ldi	r28, 0xEF	; 239
    39b6:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    39b8:	fe 01       	movw	r30, r28
    39ba:	84 91       	lpm	r24, Z
    39bc:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
    39c0:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    39c2:	fd e0       	ldi	r31, 0x0D	; 13
    39c4:	cd 3f       	cpi	r28, 0xFD	; 253
    39c6:	df 07       	cpc	r29, r31
    39c8:	b9 f7       	brne	.-18     	; 0x39b8 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    39ca:	80 91 77 06 	lds	r24, 0x0677
    39ce:	0e 94 c6 1c 	call	0x398c	; 0x398c <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    39d2:	88 ec       	ldi	r24, 0xC8	; 200
}
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    39d8:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <st7565_command>

000039dc <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	cd ef       	ldi	r28, 0xFD	; 253
    39ec:	dd e0       	ldi	r29, 0x0D	; 13
    39ee:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    39f0:	fe 01       	movw	r30, r28
    39f2:	84 91       	lpm	r24, Z
    39f4:	80 6b       	ori	r24, 0xB0	; 176
    39f6:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    3a00:	80 e1       	ldi	r24, 0x10	; 16
    3a02:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    3a06:	80 ee       	ldi	r24, 0xE0	; 224
    3a08:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
    3a0c:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    3a0e:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    3a10:	f7 01       	movw	r30, r14
    3a12:	81 91       	ld	r24, Z+
    3a14:	7f 01       	movw	r14, r30
    3a16:	0e 94 c3 1c 	call	0x3986	; 0x3986 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    3a1a:	d3 94       	inc	r13
    3a1c:	f0 e8       	ldi	r31, 0x80	; 128
    3a1e:	df 12       	cpse	r13, r31
    3a20:	f7 cf       	rjmp	.-18     	; 0x3a10 <write_buffer+0x34>
    3a22:	21 96       	adiw	r28, 0x01	; 1
    3a24:	00 58       	subi	r16, 0x80	; 128
    3a26:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    3a28:	8e e0       	ldi	r24, 0x0E	; 14
    3a2a:	c5 30       	cpi	r28, 0x05	; 5
    3a2c:	d8 07       	cpc	r29, r24
    3a2e:	01 f7       	brne	.-64     	; 0x39f0 <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	1f 91       	pop	r17
    3a36:	0f 91       	pop	r16
    3a38:	ff 90       	pop	r15
    3a3a:	ef 90       	pop	r14
    3a3c:	df 90       	pop	r13
    3a3e:	08 95       	ret

00003a40 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	34 e0       	ldi	r19, 0x04	; 4
    3a44:	fc 01       	movw	r30, r24
    3a46:	a9 01       	movw	r20, r18
    3a48:	11 92       	st	Z+, r1
    3a4a:	41 50       	subi	r20, 0x01	; 1
    3a4c:	50 40       	sbci	r21, 0x00	; 0
    3a4e:	e1 f7       	brne	.-8      	; 0x3a48 <clear_buffer+0x8>
    3a50:	08 95       	ret

00003a52 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3a56:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    3a58:	8d 2f       	mov	r24, r29
    3a5a:	80 6b       	ori	r24, 0xB0	; 176
    3a5c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3a60:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    3a62:	8c 2f       	mov	r24, r28
    3a64:	8f 70       	andi	r24, 0x0F	; 15
    3a66:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    3a6a:	8c 2f       	mov	r24, r28
    3a6c:	82 95       	swap	r24
    3a6e:	8f 70       	andi	r24, 0x0F	; 15
    3a70:	80 61       	ori	r24, 0x10	; 16
    3a72:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
			st7565_data(0x00);											// Clear data
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	0e 94 c3 1c 	call	0x3986	; 0x3986 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3a7c:	cf 5f       	subi	r28, 0xFF	; 255
    3a7e:	c0 38       	cpi	r28, 0x80	; 128
    3a80:	81 f7       	brne	.-32     	; 0x3a62 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3a82:	df 5f       	subi	r29, 0xFF	; 255
    3a84:	d8 30       	cpi	r29, 0x08	; 8
    3a86:	41 f7       	brne	.-48     	; 0x3a58 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	08 95       	ret

00003a8e <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    3a8e:	67 fd       	sbrc	r22, 7
    3a90:	36 c0       	rjmp	.+108    	; 0x3afe <setpixel+0x70>
    3a92:	40 34       	cpi	r20, 0x40	; 64
    3a94:	a0 f5       	brcc	.+104    	; 0x3afe <setpixel+0x70>
    3a96:	34 2f       	mov	r19, r20
    3a98:	36 95       	lsr	r19
    3a9a:	36 95       	lsr	r19
    3a9c:	36 95       	lsr	r19
    3a9e:	e6 2f       	mov	r30, r22
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    3aa4:	22 23       	and	r18, r18
    3aa6:	a9 f0       	breq	.+42     	; 0x3ad2 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    3aa8:	20 e8       	ldi	r18, 0x80	; 128
    3aaa:	32 9f       	mul	r19, r18
    3aac:	e0 0d       	add	r30, r0
    3aae:	f1 1d       	adc	r31, r1
    3ab0:	11 24       	eor	r1, r1
    3ab2:	e8 0f       	add	r30, r24
    3ab4:	f9 1f       	adc	r31, r25
    3ab6:	40 95       	com	r20
    3ab8:	50 95       	com	r21
    3aba:	47 70       	andi	r20, 0x07	; 7
    3abc:	55 27       	eor	r21, r21
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	04 2e       	mov	r0, r20
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <setpixel+0x3a>
    3ac6:	88 0f       	add	r24, r24
    3ac8:	0a 94       	dec	r0
    3aca:	ea f7       	brpl	.-6      	; 0x3ac6 <setpixel+0x38>
    3acc:	90 81       	ld	r25, Z
    3ace:	98 2b       	or	r25, r24
    3ad0:	15 c0       	rjmp	.+42     	; 0x3afc <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    3ad2:	20 e8       	ldi	r18, 0x80	; 128
    3ad4:	32 9f       	mul	r19, r18
    3ad6:	e0 0d       	add	r30, r0
    3ad8:	f1 1d       	adc	r31, r1
    3ada:	11 24       	eor	r1, r1
    3adc:	e8 0f       	add	r30, r24
    3ade:	f9 1f       	adc	r31, r25
    3ae0:	40 95       	com	r20
    3ae2:	50 95       	com	r21
    3ae4:	47 70       	andi	r20, 0x07	; 7
    3ae6:	55 27       	eor	r21, r21
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	04 2e       	mov	r0, r20
    3aee:	01 c0       	rjmp	.+2      	; 0x3af2 <setpixel+0x64>
    3af0:	88 0f       	add	r24, r24
    3af2:	0a 94       	dec	r0
    3af4:	ea f7       	brpl	.-6      	; 0x3af0 <setpixel+0x62>
    3af6:	80 95       	com	r24
    3af8:	90 81       	ld	r25, Z
    3afa:	98 23       	and	r25, r24
    3afc:	90 83       	st	Z, r25
    3afe:	08 95       	ret

00003b00 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    3b00:	9f 92       	push	r9
    3b02:	af 92       	push	r10
    3b04:	bf 92       	push	r11
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	ec 01       	movw	r28, r24
    3b18:	16 2f       	mov	r17, r22
    3b1a:	f4 2e       	mov	r15, r20
    3b1c:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    3b1e:	a0 2f       	mov	r26, r16
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	a4 1b       	sub	r26, r20
    3b24:	b1 09       	sbc	r27, r1
    3b26:	b7 ff       	sbrs	r27, 7
    3b28:	03 c0       	rjmp	.+6      	; 0x3b30 <drawline+0x30>
    3b2a:	b1 95       	neg	r27
    3b2c:	a1 95       	neg	r26
    3b2e:	b1 09       	sbc	r27, r1
    3b30:	ed 2d       	mov	r30, r13
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	e1 1b       	sub	r30, r17
    3b36:	f1 09       	sbc	r31, r1
    3b38:	f7 ff       	sbrs	r31, 7
    3b3a:	03 c0       	rjmp	.+6      	; 0x3b42 <drawline+0x42>
    3b3c:	f1 95       	neg	r31
    3b3e:	e1 95       	neg	r30
    3b40:	f1 09       	sbc	r31, r1
    3b42:	bb 24       	eor	r11, r11
    3b44:	b3 94       	inc	r11
    3b46:	ea 17       	cp	r30, r26
    3b48:	fb 07       	cpc	r31, r27
    3b4a:	14 f0       	brlt	.+4      	; 0x3b50 <drawline+0x50>
    3b4c:	b1 2c       	mov	r11, r1
    3b4e:	06 c0       	rjmp	.+12     	; 0x3b5c <drawline+0x5c>
    3b50:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    3b52:	d0 2e       	mov	r13, r16
    3b54:	08 2f       	mov	r16, r24
    3b56:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    3b58:	1f 2d       	mov	r17, r15
    3b5a:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    3b5c:	d1 16       	cp	r13, r17
    3b5e:	30 f4       	brcc	.+12     	; 0x3b6c <drawline+0x6c>
    3b60:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    3b62:	f0 2e       	mov	r15, r16
    3b64:	08 2f       	mov	r16, r24
    3b66:	81 2f       	mov	r24, r17
    3b68:	1d 2d       	mov	r17, r13
    3b6a:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    3b6c:	ad 2c       	mov	r10, r13
    3b6e:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    3b70:	e0 2f       	mov	r30, r16
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	ef 19       	sub	r30, r15
    3b76:	f1 09       	sbc	r31, r1
    3b78:	f7 ff       	sbrs	r31, 7
    3b7a:	03 c0       	rjmp	.+6      	; 0x3b82 <drawline+0x82>
    3b7c:	f1 95       	neg	r31
    3b7e:	e1 95       	neg	r30
    3b80:	f1 09       	sbc	r31, r1
    3b82:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    3b84:	ca 2c       	mov	r12, r10
    3b86:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    3b88:	f0 16       	cp	r15, r16
    3b8a:	10 f4       	brcc	.+4      	; 0x3b90 <drawline+0x90>
	{
		ystep = 1;
    3b8c:	01 e0       	ldi	r16, 0x01	; 1
    3b8e:	10 c0       	rjmp	.+32     	; 0x3bb0 <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    3b90:	0f ef       	ldi	r16, 0xFF	; 255
    3b92:	0e c0       	rjmp	.+28     	; 0x3bb0 <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    3b94:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    3b96:	bb 20       	and	r11, r11
    3b98:	71 f0       	breq	.+28     	; 0x3bb6 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    3b9a:	41 2f       	mov	r20, r17
    3b9c:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
		}
		err -= dy;
    3ba4:	c9 18       	sub	r12, r9
		if (err < 0) 
    3ba6:	c7 fe       	sbrs	r12, 7
    3ba8:	02 c0       	rjmp	.+4      	; 0x3bae <drawline+0xae>
		{
			y0 += ystep;
    3baa:	f0 0e       	add	r15, r16
			err += dx;
    3bac:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    3bae:	1f 5f       	subi	r17, 0xFF	; 255
    3bb0:	1d 15       	cp	r17, r13
    3bb2:	80 f3       	brcs	.-32     	; 0x3b94 <drawline+0x94>
    3bb4:	03 c0       	rjmp	.+6      	; 0x3bbc <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3bb6:	4f 2d       	mov	r20, r15
    3bb8:	61 2f       	mov	r22, r17
    3bba:	f1 cf       	rjmp	.-30     	; 0x3b9e <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	df 90       	pop	r13
    3bca:	cf 90       	pop	r12
    3bcc:	bf 90       	pop	r11
    3bce:	af 90       	pop	r10
    3bd0:	9f 90       	pop	r9
    3bd2:	08 95       	ret

00003bd4 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3bd4:	af 92       	push	r10
    3bd6:	bf 92       	push	r11
    3bd8:	cf 92       	push	r12
    3bda:	df 92       	push	r13
    3bdc:	ef 92       	push	r14
    3bde:	ff 92       	push	r15
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	6c 01       	movw	r12, r24
    3bea:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3bec:	f6 2e       	mov	r15, r22
    3bee:	c2 2f       	mov	r28, r18
    3bf0:	d0 e0       	ldi	r29, 0x00	; 0
    3bf2:	c6 0f       	add	r28, r22
    3bf4:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    3bf6:	10 e0       	ldi	r17, 0x00	; 0
    3bf8:	04 0f       	add	r16, r20
    3bfa:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3bfc:	8f 2d       	mov	r24, r15
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	8c 17       	cp	r24, r28
    3c02:	9d 07       	cpc	r25, r29
    3c04:	84 f4       	brge	.+32     	; 0x3c26 <fillrect+0x52>
    3c06:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    3c08:	8b 2d       	mov	r24, r11
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	80 17       	cp	r24, r16
    3c0e:	91 07       	cpc	r25, r17
    3c10:	44 f4       	brge	.+16     	; 0x3c22 <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    3c12:	2e 2d       	mov	r18, r14
    3c14:	4b 2d       	mov	r20, r11
    3c16:	6f 2d       	mov	r22, r15
    3c18:	c6 01       	movw	r24, r12
    3c1a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    3c1e:	b3 94       	inc	r11
    3c20:	f3 cf       	rjmp	.-26     	; 0x3c08 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3c22:	f3 94       	inc	r15
    3c24:	eb cf       	rjmp	.-42     	; 0x3bfc <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	1f 91       	pop	r17
    3c2c:	0f 91       	pop	r16
    3c2e:	ff 90       	pop	r15
    3c30:	ef 90       	pop	r14
    3c32:	df 90       	pop	r13
    3c34:	cf 90       	pop	r12
    3c36:	bf 90       	pop	r11
    3c38:	af 90       	pop	r10
    3c3a:	08 95       	ret

00003c3c <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3c3c:	9f 92       	push	r9
    3c3e:	af 92       	push	r10
    3c40:	bf 92       	push	r11
    3c42:	cf 92       	push	r12
    3c44:	df 92       	push	r13
    3c46:	ef 92       	push	r14
    3c48:	ff 92       	push	r15
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	ec 01       	movw	r28, r24
    3c54:	f6 2e       	mov	r15, r22
    3c56:	b4 2e       	mov	r11, r20
    3c58:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3c5a:	16 2f       	mov	r17, r22
    3c5c:	c2 2e       	mov	r12, r18
    3c5e:	d1 2c       	mov	r13, r1
    3c60:	c6 0e       	add	r12, r22
    3c62:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    3c64:	aa 24       	eor	r10, r10
    3c66:	aa 94       	dec	r10
    3c68:	a0 0e       	add	r10, r16
    3c6a:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3c6c:	81 2f       	mov	r24, r17
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	8c 15       	cp	r24, r12
    3c72:	9d 05       	cpc	r25, r13
    3c74:	74 f4       	brge	.+28     	; 0x3c92 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    3c76:	2e 2d       	mov	r18, r14
    3c78:	4b 2d       	mov	r20, r11
    3c7a:	61 2f       	mov	r22, r17
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
		setpixel(buff, i, y+h-1, color);
    3c82:	2e 2d       	mov	r18, r14
    3c84:	4a 2d       	mov	r20, r10
    3c86:	61 2f       	mov	r22, r17
    3c88:	ce 01       	movw	r24, r28
    3c8a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3c8e:	1f 5f       	subi	r17, 0xFF	; 255
    3c90:	ed cf       	rjmp	.-38     	; 0x3c6c <drawrect+0x30>
    3c92:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3c94:	10 e0       	ldi	r17, 0x00	; 0
    3c96:	0b 0d       	add	r16, r11
    3c98:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    3c9a:	cc 24       	eor	r12, r12
    3c9c:	ca 94       	dec	r12
    3c9e:	c9 0c       	add	r12, r9
    3ca0:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3ca2:	8d 2d       	mov	r24, r13
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	80 17       	cp	r24, r16
    3ca8:	91 07       	cpc	r25, r17
    3caa:	74 f4       	brge	.+28     	; 0x3cc8 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    3cac:	2e 2d       	mov	r18, r14
    3cae:	4d 2d       	mov	r20, r13
    3cb0:	6f 2d       	mov	r22, r15
    3cb2:	ce 01       	movw	r24, r28
    3cb4:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
		setpixel(buff, x+w-1, i, color);
    3cb8:	2e 2d       	mov	r18, r14
    3cba:	4d 2d       	mov	r20, r13
    3cbc:	6c 2d       	mov	r22, r12
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3cc4:	d3 94       	inc	r13
    3cc6:	ed cf       	rjmp	.-38     	; 0x3ca2 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    3cc8:	df 91       	pop	r29
    3cca:	cf 91       	pop	r28
    3ccc:	1f 91       	pop	r17
    3cce:	0f 91       	pop	r16
    3cd0:	ff 90       	pop	r15
    3cd2:	ef 90       	pop	r14
    3cd4:	df 90       	pop	r13
    3cd6:	cf 90       	pop	r12
    3cd8:	bf 90       	pop	r11
    3cda:	af 90       	pop	r10
    3cdc:	9f 90       	pop	r9
    3cde:	08 95       	ret

00003ce0 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    3ce0:	4f 92       	push	r4
    3ce2:	5f 92       	push	r5
    3ce4:	6f 92       	push	r6
    3ce6:	7f 92       	push	r7
    3ce8:	8f 92       	push	r8
    3cea:	9f 92       	push	r9
    3cec:	af 92       	push	r10
    3cee:	bf 92       	push	r11
    3cf0:	cf 92       	push	r12
    3cf2:	df 92       	push	r13
    3cf4:	ef 92       	push	r14
    3cf6:	ff 92       	push	r15
    3cf8:	0f 93       	push	r16
    3cfa:	1f 93       	push	r17
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	ec 01       	movw	r28, r24
    3d02:	96 2e       	mov	r9, r22
    3d04:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    3d06:	bb 24       	eor	r11, r11
    3d08:	b3 94       	inc	r11
    3d0a:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    3d0c:	82 2e       	mov	r8, r18
    3d0e:	81 94       	neg	r8
    3d10:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    3d12:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    3d14:	74 2e       	mov	r7, r20
    3d16:	72 1a       	sub	r7, r18
    3d18:	e4 2e       	mov	r14, r20
    3d1a:	f1 2c       	mov	r15, r1
    3d1c:	67 01       	movw	r12, r14
    3d1e:	c2 0e       	add	r12, r18
    3d20:	d1 1c       	adc	r13, r1
    3d22:	87 2d       	mov	r24, r7
    3d24:	99 27       	eor	r25, r25
    3d26:	87 fd       	sbrc	r24, 7
    3d28:	90 95       	com	r25
    3d2a:	c8 16       	cp	r12, r24
    3d2c:	d9 06       	cpc	r13, r25
    3d2e:	44 f0       	brlt	.+16     	; 0x3d40 <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    3d30:	20 2f       	mov	r18, r16
    3d32:	47 2d       	mov	r20, r7
    3d34:	69 2d       	mov	r22, r9
    3d36:	ce 01       	movw	r24, r28
    3d38:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
    3d3c:	73 94       	inc	r7
    3d3e:	f1 cf       	rjmp	.-30     	; 0x3d22 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    3d40:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    3d42:	71 16       	cp	r7, r17
    3d44:	0c f0       	brlt	.+2      	; 0x3d48 <fillcircle+0x68>
    3d46:	4c c0       	rjmp	.+152    	; 0x3de0 <fillcircle+0x100>
	{
		if (f >= 0) 
    3d48:	b7 fc       	sbrc	r11, 7
    3d4a:	04 c0       	rjmp	.+8      	; 0x3d54 <fillcircle+0x74>
		{
			y--;
    3d4c:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    3d4e:	83 94       	inc	r8
    3d50:	83 94       	inc	r8
			f += ddF_y;
    3d52:	b8 0c       	add	r11, r8
    3d54:	73 94       	inc	r7
    3d56:	87 2d       	mov	r24, r7
    3d58:	88 0f       	add	r24, r24
    3d5a:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    3d5c:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    3d5e:	6a 2c       	mov	r6, r10
    3d60:	61 1a       	sub	r6, r17
    3d62:	67 01       	movw	r12, r14
    3d64:	c1 0e       	add	r12, r17
    3d66:	d1 1c       	adc	r13, r1
    3d68:	17 fd       	sbrc	r17, 7
    3d6a:	da 94       	dec	r13
    3d6c:	47 2c       	mov	r4, r7
    3d6e:	49 0c       	add	r4, r9
    3d70:	59 2c       	mov	r5, r9
    3d72:	57 18       	sub	r5, r7
    3d74:	86 2d       	mov	r24, r6
    3d76:	99 27       	eor	r25, r25
    3d78:	87 fd       	sbrc	r24, 7
    3d7a:	90 95       	com	r25
    3d7c:	c8 16       	cp	r12, r24
    3d7e:	d9 06       	cpc	r13, r25
    3d80:	74 f0       	brlt	.+28     	; 0x3d9e <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    3d82:	20 2f       	mov	r18, r16
    3d84:	46 2d       	mov	r20, r6
    3d86:	64 2d       	mov	r22, r4
    3d88:	ce 01       	movw	r24, r28
    3d8a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
			setpixel(buff, x0-x, i, color);
    3d8e:	20 2f       	mov	r18, r16
    3d90:	46 2d       	mov	r20, r6
    3d92:	65 2d       	mov	r22, r5
    3d94:	ce 01       	movw	r24, r28
    3d96:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
    3d9a:	63 94       	inc	r6
    3d9c:	eb cf       	rjmp	.-42     	; 0x3d74 <fillcircle+0x94>
    3d9e:	6a 2c       	mov	r6, r10
    3da0:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    3da2:	67 01       	movw	r12, r14
    3da4:	c7 0c       	add	r12, r7
    3da6:	d1 1c       	adc	r13, r1
    3da8:	77 fc       	sbrc	r7, 7
    3daa:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    3dac:	41 2e       	mov	r4, r17
    3dae:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    3db0:	59 2c       	mov	r5, r9
    3db2:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    3db4:	86 2d       	mov	r24, r6
    3db6:	99 27       	eor	r25, r25
    3db8:	87 fd       	sbrc	r24, 7
    3dba:	90 95       	com	r25
    3dbc:	c8 16       	cp	r12, r24
    3dbe:	d9 06       	cpc	r13, r25
    3dc0:	0c f4       	brge	.+2      	; 0x3dc4 <fillcircle+0xe4>
    3dc2:	bf cf       	rjmp	.-130    	; 0x3d42 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    3dc4:	20 2f       	mov	r18, r16
    3dc6:	46 2d       	mov	r20, r6
    3dc8:	64 2d       	mov	r22, r4
    3dca:	ce 01       	movw	r24, r28
    3dcc:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
			setpixel(buff, x0-y, i, color);
    3dd0:	20 2f       	mov	r18, r16
    3dd2:	46 2d       	mov	r20, r6
    3dd4:	65 2d       	mov	r22, r5
    3dd6:	ce 01       	movw	r24, r28
    3dd8:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
    3ddc:	63 94       	inc	r6
    3dde:	ea cf       	rjmp	.-44     	; 0x3db4 <fillcircle+0xd4>
		}    
	}
}
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	0f 91       	pop	r16
    3de8:	ff 90       	pop	r15
    3dea:	ef 90       	pop	r14
    3dec:	df 90       	pop	r13
    3dee:	cf 90       	pop	r12
    3df0:	bf 90       	pop	r11
    3df2:	af 90       	pop	r10
    3df4:	9f 90       	pop	r9
    3df6:	8f 90       	pop	r8
    3df8:	7f 90       	pop	r7
    3dfa:	6f 90       	pop	r6
    3dfc:	5f 90       	pop	r5
    3dfe:	4f 90       	pop	r4
    3e00:	08 95       	ret

00003e02 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint8_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    3e02:	e8 2f       	mov	r30, r24
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	ee 0f       	add	r30, r30
    3e08:	ff 1f       	adc	r31, r31
    3e0a:	eb 5f       	subi	r30, 0xFB	; 251
    3e0c:	f1 4f       	sbci	r31, 0xF1	; 241
    3e0e:	85 91       	lpm	r24, Z+
    3e10:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    3e12:	0c 94 40 39 	jmp	0x7280	; 0x7280 <pgm_mugui_lcd_puts>

00003e16 <gLCDprint_Menu_P>:
    3e16:	0c 94 40 39 	jmp	0x7280	; 0x7280 <pgm_mugui_lcd_puts>

00003e1a <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	91 e0       	ldi	r25, 0x01	; 1
    3e1e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(122,(const unsigned char*)Verdana14,40,3);			// "Press"
    3e22:	23 e0       	ldi	r18, 0x03	; 3
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	48 e2       	ldi	r20, 0x28	; 40
    3e28:	50 e0       	ldi	r21, 0x00	; 0
    3e2a:	60 e7       	ldi	r22, 0x70	; 112
    3e2c:	71 e0       	ldi	r23, 0x01	; 1
    3e2e:	8a e7       	ldi	r24, 0x7A	; 122
    3e30:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	LCD_Display_Text(123,(const unsigned char*)Verdana14,24,23);		 // "for status"
    3e34:	27 e1       	ldi	r18, 0x17	; 23
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	48 e1       	ldi	r20, 0x18	; 24
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	60 e7       	ldi	r22, 0x70	; 112
    3e3e:	71 e0       	ldi	r23, 0x01	; 1
    3e40:	8b e7       	ldi	r24, 0x7B	; 123
    3e42:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	
	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)						// Low voltage
    3e46:	80 91 15 05 	lds	r24, 0x0515
    3e4a:	84 ff       	sbrs	r24, 4
    3e4c:	11 c0       	rjmp	.+34     	; 0x3e70 <idle_screen+0x56>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);	// "Battery"
    3e4e:	2b e2       	ldi	r18, 0x2B	; 43
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	4c e0       	ldi	r20, 0x0C	; 12
    3e54:	50 e0       	ldi	r21, 0x00	; 0
    3e56:	60 e7       	ldi	r22, 0x70	; 112
    3e58:	71 e0       	ldi	r23, 0x01	; 1
    3e5a:	86 e8       	ldi	r24, 0x86	; 134
    3e5c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(119,(const unsigned char*)Verdana14,80,43);	// "Low"
    3e60:	2b e2       	ldi	r18, 0x2B	; 43
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e5       	ldi	r20, 0x50	; 80
    3e66:	50 e0       	ldi	r21, 0x00	; 0
    3e68:	60 e7       	ldi	r22, 0x70	; 112
    3e6a:	71 e0       	ldi	r23, 0x01	; 1
    3e6c:	87 e7       	ldi	r24, 0x77	; 119
    3e6e:	3e c0       	rjmp	.+124    	; 0x3eec <idle_screen+0xd2>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)					// No signal
    3e70:	80 91 15 05 	lds	r24, 0x0515
    3e74:	82 ff       	sbrs	r24, 2
    3e76:	11 c0       	rjmp	.+34     	; 0x3e9a <idle_screen+0x80>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43);		// "No"
    3e78:	2b e2       	ldi	r18, 0x2B	; 43
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	4c e1       	ldi	r20, 0x1C	; 28
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	60 e7       	ldi	r22, 0x70	; 112
    3e82:	71 e0       	ldi	r23, 0x01	; 1
    3e84:	8b e4       	ldi	r24, 0x4B	; 75
    3e86:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43);		// "Signal"
    3e8a:	2b e2       	ldi	r18, 0x2B	; 43
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	46 e3       	ldi	r20, 0x36	; 54
    3e90:	50 e0       	ldi	r21, 0x00	; 0
    3e92:	60 e7       	ldi	r22, 0x70	; 112
    3e94:	71 e0       	ldi	r23, 0x01	; 1
    3e96:	8c e4       	ldi	r24, 0x4C	; 76
    3e98:	29 c0       	rjmp	.+82     	; 0x3eec <idle_screen+0xd2>
	}

	else if ((General_error & (1 << LOST_MODEL)) != 0)					// Lost model
    3e9a:	80 91 15 05 	lds	r24, 0x0515
    3e9e:	83 ff       	sbrs	r24, 3
    3ea0:	11 c0       	rjmp	.+34     	; 0x3ec4 <idle_screen+0xaa>
	{
		LCD_Display_Text(131,(const unsigned char*)Verdana14,10,43);	// "Lost"
    3ea2:	2b e2       	ldi	r18, 0x2B	; 43
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	4a e0       	ldi	r20, 0x0A	; 10
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	60 e7       	ldi	r22, 0x70	; 112
    3eac:	71 e0       	ldi	r23, 0x01	; 1
    3eae:	83 e8       	ldi	r24, 0x83	; 131
    3eb0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(132,(const unsigned char*)Verdana14,81,43);	// "model"
    3eb4:	2b e2       	ldi	r18, 0x2B	; 43
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	41 e5       	ldi	r20, 0x51	; 81
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	60 e7       	ldi	r22, 0x70	; 112
    3ebe:	71 e0       	ldi	r23, 0x01	; 1
    3ec0:	84 e8       	ldi	r24, 0x84	; 132
    3ec2:	14 c0       	rjmp	.+40     	; 0x3eec <idle_screen+0xd2>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)				// Throttle high
    3ec4:	80 91 15 05 	lds	r24, 0x0515
    3ec8:	81 ff       	sbrs	r24, 1
    3eca:	12 c0       	rjmp	.+36     	; 0x3ef0 <idle_screen+0xd6>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);	// "Throttle"
    3ecc:	2b e2       	ldi	r18, 0x2B	; 43
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4a e0       	ldi	r20, 0x0A	; 10
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	60 e7       	ldi	r22, 0x70	; 112
    3ed6:	71 e0       	ldi	r23, 0x01	; 1
    3ed8:	89 e6       	ldi	r24, 0x69	; 105
    3eda:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(121,(const unsigned char*)Verdana14,81,43);	// "High"
    3ede:	2b e2       	ldi	r18, 0x2B	; 43
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	41 e5       	ldi	r20, 0x51	; 81
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	60 e7       	ldi	r22, 0x70	; 112
    3ee8:	71 e0       	ldi	r23, 0x01	; 1
    3eea:	89 e7       	ldi	r24, 0x79	; 121
    3eec:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	}
	
	write_buffer(buffer);
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	91 e0       	ldi	r25, 0x01	; 1
    3ef4:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <write_buffer>

00003ef8 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	2c 97       	sbiw	r28, 0x0c	; 12
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
#ifdef KK21
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    3f0c:	26 e0       	ldi	r18, 0x06	; 6
    3f0e:	ae 01       	movw	r20, r28
    3f10:	4f 5f       	subi	r20, 0xFF	; 255
    3f12:	5f 4f       	sbci	r21, 0xFF	; 255
    3f14:	63 e4       	ldi	r22, 0x43	; 67
    3f16:	80 ed       	ldi	r24, 0xD0	; 208
    3f18:	0e 94 70 21 	call	0x42e0	; 0x42e0 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	98 2f       	mov	r25, r24
    3f22:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    3f24:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    3f26:	82 0f       	add	r24, r18
    3f28:	91 1d       	adc	r25, r1
    3f2a:	34 e0       	ldi	r19, 0x04	; 4
    3f2c:	95 95       	asr	r25
    3f2e:	87 95       	ror	r24
    3f30:	3a 95       	dec	r19
    3f32:	e1 f7       	brne	.-8      	; 0x3f2c <get_raw_gyros+0x34>
    3f34:	9a 87       	std	Y+10, r25	; 0x0a
    3f36:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    3f38:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	98 2f       	mov	r25, r24
    3f3e:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    3f40:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    3f42:	82 0f       	add	r24, r18
    3f44:	91 1d       	adc	r25, r1
    3f46:	54 e0       	ldi	r21, 0x04	; 4
    3f48:	95 95       	asr	r25
    3f4a:	87 95       	ror	r24
    3f4c:	5a 95       	dec	r21
    3f4e:	e1 f7       	brne	.-8      	; 0x3f48 <get_raw_gyros+0x50>
    3f50:	98 87       	std	Y+8, r25	; 0x08
    3f52:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    3f54:	8d 81       	ldd	r24, Y+5	; 0x05
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	98 2f       	mov	r25, r24
    3f5a:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    3f5c:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    3f5e:	82 0f       	add	r24, r18
    3f60:	91 1d       	adc	r25, r1
    3f62:	74 e0       	ldi	r23, 0x04	; 4
    3f64:	95 95       	asr	r25
    3f66:	87 95       	ror	r24
    3f68:	7a 95       	dec	r23
    3f6a:	e1 f7       	brne	.-8      	; 0x3f64 <get_raw_gyros+0x6c>
    3f6c:	9c 87       	std	Y+12, r25	; 0x0c
    3f6e:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    3f70:	20 91 76 06 	lds	r18, 0x0676
    3f74:	ab e7       	ldi	r26, 0x7B	; 123
    3f76:	b5 e0       	ldi	r27, 0x05	; 5
    3f78:	43 e0       	ldi	r20, 0x03	; 3
    3f7a:	24 02       	muls	r18, r20
    3f7c:	90 01       	movw	r18, r0
    3f7e:	11 24       	eor	r1, r1
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	2a 51       	subi	r18, 0x1A	; 26
    3f86:	39 4e       	sbci	r19, 0xE9	; 233
    3f88:	f9 01       	movw	r30, r18
    3f8a:	e8 0f       	add	r30, r24
    3f8c:	f9 1f       	adc	r31, r25
    3f8e:	e4 91       	lpm	r30, Z
    3f90:	ee 0f       	add	r30, r30
    3f92:	ff 0b       	sbc	r31, r31
    3f94:	41 e0       	ldi	r20, 0x01	; 1
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	4c 0f       	add	r20, r28
    3f9a:	5d 1f       	adc	r21, r29
    3f9c:	e4 0f       	add	r30, r20
    3f9e:	f5 1f       	adc	r31, r21
    3fa0:	46 81       	ldd	r20, Z+6	; 0x06
    3fa2:	57 81       	ldd	r21, Z+7	; 0x07
    3fa4:	4d 93       	st	X+, r20
    3fa6:	5d 93       	st	X+, r21
    3fa8:	01 96       	adiw	r24, 0x01	; 1
	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
	RawADC[YAW] = ADCW;
#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    3faa:	83 30       	cpi	r24, 0x03	; 3
    3fac:	91 05       	cpc	r25, r1
    3fae:	61 f7       	brne	.-40     	; 0x3f88 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    3fb0:	2c 96       	adiw	r28, 0x0c	; 12
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	df 91       	pop	r29
    3fbe:	cf 91       	pop	r28
    3fc0:	08 95       	ret

00003fc2 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    3fc2:	1f 93       	push	r17
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    3fc8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3fcc:	20 91 76 06 	lds	r18, 0x0676
    3fd0:	c4 e4       	ldi	r28, 0x44	; 68
    3fd2:	d7 e0       	ldi	r29, 0x07	; 7
    3fd4:	ab e7       	ldi	r26, 0x7B	; 123
    3fd6:	b5 e0       	ldi	r27, 0x05	; 5
    3fd8:	83 e0       	ldi	r24, 0x03	; 3
    3fda:	28 02       	muls	r18, r24
    3fdc:	90 01       	movw	r18, r0
    3fde:	11 24       	eor	r1, r1
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	2c 52       	subi	r18, 0x2C	; 44
    3fe6:	39 4e       	sbci	r19, 0xE9	; 233
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3fe8:	69 91       	ld	r22, Y+
    3fea:	79 91       	ld	r23, Y+
    3fec:	f9 01       	movw	r30, r18
    3fee:	e8 0f       	add	r30, r24
    3ff0:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3ff2:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3ff4:	4d 91       	ld	r20, X+
    3ff6:	5c 91       	ld	r21, X
    3ff8:	11 97       	sbiw	r26, 0x01	; 1
    3ffa:	46 1b       	sub	r20, r22
    3ffc:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3ffe:	14 03       	mulsu	r17, r20
    4000:	b0 01       	movw	r22, r0
    4002:	15 9f       	mul	r17, r21
    4004:	70 0d       	add	r23, r0
    4006:	11 24       	eor	r1, r1
    4008:	6d 93       	st	X+, r22
    400a:	7d 93       	st	X+, r23
    400c:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    400e:	83 30       	cpi	r24, 0x03	; 3
    4010:	91 05       	cpc	r25, r1
    4012:	51 f7       	brne	.-44     	; 0x3fe8 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	08 95       	ret

0000401c <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    401c:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    401e:	86 e0       	ldi	r24, 0x06	; 6
    4020:	e4 e4       	ldi	r30, 0x44	; 68
    4022:	f7 e0       	ldi	r31, 0x07	; 7
    4024:	df 01       	movw	r26, r30
    4026:	1d 92       	st	X+, r1
    4028:	8a 95       	dec	r24
    402a:	e9 f7       	brne	.-6      	; 0x4026 <CalibrateGyrosFast+0xa>
    402c:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    402e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];
    4032:	40 91 44 07 	lds	r20, 0x0744
    4036:	50 91 45 07 	lds	r21, 0x0745
    403a:	80 91 7b 05 	lds	r24, 0x057B
    403e:	90 91 7c 05 	lds	r25, 0x057C
    4042:	48 0f       	add	r20, r24
    4044:	59 1f       	adc	r21, r25
    4046:	50 93 45 07 	sts	0x0745, r21
    404a:	40 93 44 07 	sts	0x0744, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];
    404e:	20 91 46 07 	lds	r18, 0x0746
    4052:	30 91 47 07 	lds	r19, 0x0747
    4056:	80 91 7d 05 	lds	r24, 0x057D
    405a:	90 91 7e 05 	lds	r25, 0x057E
    405e:	28 0f       	add	r18, r24
    4060:	39 1f       	adc	r19, r25
    4062:	30 93 47 07 	sts	0x0747, r19
    4066:	20 93 46 07 	sts	0x0746, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    406a:	80 91 48 07 	lds	r24, 0x0748
    406e:	90 91 49 07 	lds	r25, 0x0749
    4072:	60 91 7f 05 	lds	r22, 0x057F
    4076:	70 91 80 05 	lds	r23, 0x0580
    407a:	86 0f       	add	r24, r22
    407c:	97 1f       	adc	r25, r23
    407e:	90 93 49 07 	sts	0x0749, r25
    4082:	80 93 48 07 	sts	0x0748, r24
    4086:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4088:	91 f6       	brne	.-92     	; 0x402e <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32
    408a:	e5 e0       	ldi	r30, 0x05	; 5
    408c:	55 95       	asr	r21
    408e:	47 95       	ror	r20
    4090:	ea 95       	dec	r30
    4092:	e1 f7       	brne	.-8      	; 0x408c <CalibrateGyrosFast+0x70>
    4094:	50 93 45 07 	sts	0x0745, r21
    4098:	40 93 44 07 	sts	0x0744, r20
    409c:	f5 e0       	ldi	r31, 0x05	; 5
    409e:	35 95       	asr	r19
    40a0:	27 95       	ror	r18
    40a2:	fa 95       	dec	r31
    40a4:	e1 f7       	brne	.-8      	; 0x409e <CalibrateGyrosFast+0x82>
    40a6:	30 93 47 07 	sts	0x0747, r19
    40aa:	20 93 46 07 	sts	0x0746, r18
    40ae:	a5 e0       	ldi	r26, 0x05	; 5
    40b0:	95 95       	asr	r25
    40b2:	87 95       	ror	r24
    40b4:	aa 95       	dec	r26
    40b6:	e1 f7       	brne	.-8      	; 0x40b0 <CalibrateGyrosFast+0x94>
    40b8:	90 93 49 07 	sts	0x0749, r25
    40bc:	80 93 48 07 	sts	0x0748, r24
	}

	Save_Config_to_EEPROM();
}
    40c0:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32
	}

	Save_Config_to_EEPROM();
    40c2:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>

000040c6 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    40c6:	2f 92       	push	r2
    40c8:	3f 92       	push	r3
    40ca:	4f 92       	push	r4
    40cc:	5f 92       	push	r5
    40ce:	6f 92       	push	r6
    40d0:	7f 92       	push	r7
    40d2:	8f 92       	push	r8
    40d4:	9f 92       	push	r9
    40d6:	af 92       	push	r10
    40d8:	bf 92       	push	r11
    40da:	cf 92       	push	r12
    40dc:	df 92       	push	r13
    40de:	ef 92       	push	r14
    40e0:	ff 92       	push	r15
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	65 97       	sbiw	r28, 0x15	; 21
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    40fa:	1e 86       	std	Y+14, r1	; 0x0e
    40fc:	1d 86       	std	Y+13, r1	; 0x0d
    40fe:	18 8a       	std	Y+16, r1	; 0x10
    4100:	1f 86       	std	Y+15, r1	; 0x0f
    4102:	1a 8a       	std	Y+18, r1	; 0x12
    4104:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();
    4106:	0e 94 0e 20 	call	0x401c	; 0x401c <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];
    410a:	60 91 44 07 	lds	r22, 0x0744
    410e:	70 91 45 07 	lds	r23, 0x0745
    4112:	88 27       	eor	r24, r24
    4114:	77 fd       	sbrc	r23, 7
    4116:	80 95       	com	r24
    4118:	98 2f       	mov	r25, r24
    411a:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    411e:	69 83       	std	Y+1, r22	; 0x01
    4120:	7a 83       	std	Y+2, r23	; 0x02
    4122:	8b 83       	std	Y+3, r24	; 0x03
    4124:	9c 83       	std	Y+4, r25	; 0x04
    4126:	60 91 46 07 	lds	r22, 0x0746
    412a:	70 91 47 07 	lds	r23, 0x0747
    412e:	88 27       	eor	r24, r24
    4130:	77 fd       	sbrc	r23, 7
    4132:	80 95       	com	r24
    4134:	98 2f       	mov	r25, r24
    4136:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    413a:	6d 83       	std	Y+5, r22	; 0x05
    413c:	7e 83       	std	Y+6, r23	; 0x06
    413e:	8f 83       	std	Y+7, r24	; 0x07
    4140:	98 87       	std	Y+8, r25	; 0x08
    4142:	60 91 48 07 	lds	r22, 0x0748
    4146:	70 91 49 07 	lds	r23, 0x0749
    414a:	88 27       	eor	r24, r24
    414c:	77 fd       	sbrc	r23, 7
    414e:	80 95       	com	r24
    4150:	98 2f       	mov	r25, r24
    4152:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    4156:	69 87       	std	Y+9, r22	; 0x09
    4158:	7a 87       	std	Y+10, r23	; 0x0a
    415a:	8b 87       	std	Y+11, r24	; 0x0b
    415c:	9c 87       	std	Y+12, r25	; 0x0c
    415e:	1d 8a       	std	Y+21, r1	; 0x15
    4160:	1b 8a       	std	Y+19, r1	; 0x13
    4162:	e1 2c       	mov	r14, r1
    4164:	f1 2c       	mov	r15, r1
    4166:	00 e0       	ldi	r16, 0x00	; 0
    4168:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    416a:	80 91 b2 00 	lds	r24, 0x00B2
    416e:	9d 89       	ldd	r25, Y+21	; 0x15
    4170:	89 1b       	sub	r24, r25
    4172:	e8 0e       	add	r14, r24
    4174:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4176:	e0 91 b2 00 	lds	r30, 0x00B2
    417a:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    417c:	fc e4       	ldi	r31, 0x4C	; 76
    417e:	ef 16       	cp	r14, r31
    4180:	ff 06       	cpc	r15, r31
    4182:	28 f0       	brcs	.+10     	; 0x418e <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    4184:	8b 89       	ldd	r24, Y+19	; 0x13
    4186:	8f 5f       	subi	r24, 0xFF	; 255
    4188:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    418a:	e1 2c       	mov	r14, r1
    418c:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    418e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <get_raw_gyros>
    4192:	fe 01       	movw	r30, r28
    4194:	31 96       	adiw	r30, 0x01	; 1
    4196:	6f 01       	movw	r12, r30
    4198:	bb e7       	ldi	r27, 0x7B	; 123
    419a:	2b 2e       	mov	r2, r27
    419c:	b5 e0       	ldi	r27, 0x05	; 5
    419e:	3b 2e       	mov	r3, r27
    41a0:	ce 01       	movw	r24, r28
    41a2:	0d 96       	adiw	r24, 0x0d	; 13
    41a4:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++)
    41a6:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    41a8:	f1 01       	movw	r30, r2
    41aa:	81 90       	ld	r8, Z+
    41ac:	91 90       	ld	r9, Z+
    41ae:	1f 01       	movw	r2, r30
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	30 ec       	ldi	r19, 0xC0	; 192
    41b4:	49 e7       	ldi	r20, 0x79	; 121
    41b6:	54 e4       	ldi	r21, 0x44	; 68
    41b8:	f6 01       	movw	r30, r12
    41ba:	60 81       	ld	r22, Z
    41bc:	71 81       	ldd	r23, Z+1	; 0x01
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	93 81       	ldd	r25, Z+3	; 0x03
    41c2:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    41c6:	2b 01       	movw	r4, r22
    41c8:	3c 01       	movw	r6, r24
    41ca:	b4 01       	movw	r22, r8
    41cc:	88 27       	eor	r24, r24
    41ce:	77 fd       	sbrc	r23, 7
    41d0:	80 95       	com	r24
    41d2:	98 2f       	mov	r25, r24
    41d4:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    41d8:	9b 01       	movw	r18, r22
    41da:	ac 01       	movw	r20, r24
    41dc:	c3 01       	movw	r24, r6
    41de:	b2 01       	movw	r22, r4
    41e0:	0e 94 32 40 	call	0x8064	; 0x8064 <__addsf3>
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	4a e7       	ldi	r20, 0x7A	; 122
    41ea:	54 e4       	ldi	r21, 0x44	; 68
    41ec:	0e 94 9a 40 	call	0x8134	; 0x8134 <__divsf3>
    41f0:	f6 01       	movw	r30, r12
    41f2:	60 83       	st	Z, r22
    41f4:	71 83       	std	Z+1, r23	; 0x01
    41f6:	82 83       	std	Z+2, r24	; 0x02
    41f8:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    41fa:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    41fe:	f5 01       	movw	r30, r10
    4200:	20 81       	ld	r18, Z
    4202:	31 81       	ldd	r19, Z+1	; 0x01
    4204:	26 17       	cp	r18, r22
    4206:	37 07       	cpc	r19, r23
    4208:	11 f0       	breq	.+4      	; 0x420e <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    420a:	00 e0       	ldi	r16, 0x00	; 0
    420c:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    420e:	f5 01       	movw	r30, r10
    4210:	61 93       	st	Z+, r22
    4212:	71 93       	st	Z+, r23
    4214:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++)
    4216:	fc 89       	ldd	r31, Y+20	; 0x14
    4218:	ff 5f       	subi	r31, 0xFF	; 255
    421a:	fc 8b       	std	Y+20, r31	; 0x14
    421c:	84 e0       	ldi	r24, 0x04	; 4
    421e:	c8 0e       	add	r12, r24
    4220:	d1 1c       	adc	r13, r1
    4222:	f3 30       	cpi	r31, 0x03	; 3
    4224:	09 f6       	brne	.-126    	; 0x41a8 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    4226:	0f 5f       	subi	r16, 0xFF	; 255
    4228:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    422a:	09 3c       	cpi	r16, 0xC9	; 201
    422c:	11 05       	cpc	r17, r1
    422e:	20 f0       	brcs	.+8      	; 0x4238 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;
			CalibrateGyrosFast();
    4230:	0e 94 0e 20 	call	0x401c	; 0x401c <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	01 c0       	rjmp	.+2      	; 0x423a <CalibrateGyrosSlow+0x174>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	e7 e8       	ldi	r30, 0x87	; 135
    423c:	f3 e1       	ldi	r31, 0x13	; 19
    423e:	31 97       	sbiw	r30, 0x01	; 1
    4240:	f1 f7       	brne	.-4      	; 0x423e <CalibrateGyrosSlow+0x178>
    4242:	00 c0       	rjmp	.+0      	; 0x4244 <CalibrateGyrosSlow+0x17e>
    4244:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4246:	81 11       	cpse	r24, r1
    4248:	04 c0       	rjmp	.+8      	; 0x4252 <CalibrateGyrosSlow+0x18c>
    424a:	fb 89       	ldd	r31, Y+19	; 0x13
    424c:	f6 30       	cpi	r31, 0x06	; 6
    424e:	08 f4       	brcc	.+2      	; 0x4252 <CalibrateGyrosSlow+0x18c>
    4250:	8c cf       	rjmp	.-232    	; 0x416a <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    4252:	65 96       	adiw	r28, 0x15	; 21
    4254:	0f b6       	in	r0, 0x3f	; 63
    4256:	f8 94       	cli
    4258:	de bf       	out	0x3e, r29	; 62
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	1f 91       	pop	r17
    4264:	0f 91       	pop	r16
    4266:	ff 90       	pop	r15
    4268:	ef 90       	pop	r14
    426a:	df 90       	pop	r13
    426c:	cf 90       	pop	r12
    426e:	bf 90       	pop	r11
    4270:	af 90       	pop	r10
    4272:	9f 90       	pop	r9
    4274:	8f 90       	pop	r8
    4276:	7f 90       	pop	r7
    4278:	6f 90       	pop	r6
    427a:	5f 90       	pop	r5
    427c:	4f 90       	pop	r4
    427e:	3f 90       	pop	r3
    4280:	2f 90       	pop	r2
    4282:	08 95       	ret

00004284 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    4284:	41 e0       	ldi	r20, 0x01	; 1
    4286:	6b e6       	ldi	r22, 0x6B	; 107
    4288:	80 ed       	ldi	r24, 0xD0	; 208
    428a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    428e:	40 e4       	ldi	r20, 0x40	; 64
    4290:	67 e3       	ldi	r22, 0x37	; 55
    4292:	80 ed       	ldi	r24, 0xD0	; 208
    4294:	0e 94 59 21 	call	0x42b2	; 0x42b2 <writeI2Cbyte>

	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    4298:	46 e0       	ldi	r20, 0x06	; 6
    429a:	80 91 7f 06 	lds	r24, 0x067F
    429e:	48 1b       	sub	r20, r24
    42a0:	6a e1       	ldi	r22, 0x1A	; 26
    42a2:	80 ed       	ldi	r24, 0xD0	; 208
    42a4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    42a8:	48 e1       	ldi	r20, 0x18	; 24
    42aa:	6b e1       	ldi	r22, 0x1B	; 27
    42ac:	80 ed       	ldi	r24, 0xD0	; 208
    42ae:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <writeI2Cbyte>

000042b2 <writeI2Cbyte>:
//************************************************************
// KK2.1 gyro-specifc code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
    42b6:	00 d0       	rcall	.+0      	; 0x42b8 <writeI2Cbyte+0x6>
    42b8:	cd b7       	in	r28, 0x3d	; 61
    42ba:	de b7       	in	r29, 0x3e	; 62
	i2c_start_wait(address+I2C_WRITE);				// Set up device address
    42bc:	4a 83       	std	Y+2, r20	; 0x02
    42be:	69 83       	std	Y+1, r22	; 0x01
    42c0:	0e 94 05 3f 	call	0x7e0a	; 0x7e0a <i2c_start_wait>
	i2c_write(location);							// Set up register address
    42c4:	69 81       	ldd	r22, Y+1	; 0x01
    42c6:	86 2f       	mov	r24, r22
    42c8:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <i2c_write>
	i2c_write(value); 								// Write byte
    42cc:	4a 81       	ldd	r20, Y+2	; 0x02
    42ce:	84 2f       	mov	r24, r20
    42d0:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <i2c_write>
	i2c_stop();
}
    42d4:	0f 90       	pop	r0
    42d6:	0f 90       	pop	r0
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
	i2c_start_wait(address+I2C_WRITE);				// Set up device address
	i2c_write(location);							// Set up register address
	i2c_write(value); 								// Write byte
	i2c_stop();
    42dc:	0c 94 46 3f 	jmp	0x7e8c	; 0x7e8c <i2c_stop>

000042e0 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    42e0:	cf 92       	push	r12
    42e2:	df 92       	push	r13
    42e4:	ef 92       	push	r14
    42e6:	ff 92       	push	r15
    42e8:	0f 93       	push	r16
    42ea:	1f 93       	push	r17
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <readI2CbyteArray+0x12>
    42f2:	1f 92       	push	r1
    42f4:	cd b7       	in	r28, 0x3d	; 61
    42f6:	de b7       	in	r29, 0x3e	; 62
    42f8:	18 2f       	mov	r17, r24
    42fa:	e2 2e       	mov	r14, r18
	int i=0;

	i2c_start_wait(address+I2C_WRITE);
    42fc:	4a 83       	std	Y+2, r20	; 0x02
    42fe:	5b 83       	std	Y+3, r21	; 0x03
    4300:	69 83       	std	Y+1, r22	; 0x01
    4302:	0e 94 05 3f 	call	0x7e0a	; 0x7e0a <i2c_start_wait>
	i2c_write(location);							// Set up register address
    4306:	69 81       	ldd	r22, Y+1	; 0x01
    4308:	86 2f       	mov	r24, r22
    430a:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <i2c_write>
	i2c_rep_start(address+I2C_READ);
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	81 0f       	add	r24, r17
    4312:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <i2c_rep_start>
    4316:	4a 81       	ldd	r20, Y+2	; 0x02
    4318:	c4 2e       	mov	r12, r20
    431a:	5b 81       	ldd	r21, Y+3	; 0x03
    431c:	d5 2e       	mov	r13, r21
	i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    431e:	00 e0       	ldi	r16, 0x00	; 0
    4320:	10 e0       	ldi	r17, 0x00	; 0

	i2c_start_wait(address+I2C_WRITE);
	i2c_write(location);							// Set up register address
	i2c_rep_start(address+I2C_READ);

	while (i < size)
    4322:	f1 2c       	mov	r15, r1
    4324:	0e 15       	cp	r16, r14
    4326:	1f 05       	cpc	r17, r15
    4328:	84 f4       	brge	.+32     	; 0x434a <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    432a:	0f 5f       	subi	r16, 0xFF	; 255
    432c:	1f 4f       	sbci	r17, 0xFF	; 255
    432e:	0e 15       	cp	r16, r14
    4330:	1f 05       	cpc	r17, r15
    4332:	19 f0       	breq	.+6      	; 0x433a <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    4334:	0e 94 75 3f 	call	0x7eea	; 0x7eea <i2c_readAck>
    4338:	02 c0       	rjmp	.+4      	; 0x433e <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    433a:	0e 94 8e 3f 	call	0x7f1c	; 0x7f1c <i2c_readNak>
    433e:	f6 01       	movw	r30, r12
    4340:	80 83       	st	Z, r24
    4342:	ff ef       	ldi	r31, 0xFF	; 255
    4344:	cf 1a       	sub	r12, r31
    4346:	df 0a       	sbc	r13, r31
    4348:	ed cf       	rjmp	.-38     	; 0x4324 <readI2CbyteArray+0x44>
		}
		i++;
	}

	i2c_stop();
}
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	ff 90       	pop	r15
    435a:	ef 90       	pop	r14
    435c:	df 90       	pop	r13
    435e:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

	i2c_stop();
    4360:	0c 94 46 3f 	jmp	0x7e8c	; 0x7e8c <i2c_stop>

00004364 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    4364:	4f 92       	push	r4
    4366:	5f 92       	push	r5
    4368:	6f 92       	push	r6
    436a:	7f 92       	push	r7
    436c:	8f 92       	push	r8
    436e:	9f 92       	push	r9
    4370:	af 92       	push	r10
    4372:	bf 92       	push	r11
    4374:	cf 92       	push	r12
    4376:	df 92       	push	r13
    4378:	ef 92       	push	r14
    437a:	ff 92       	push	r15
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
    4384:	28 97       	sbiw	r28, 0x08	; 8
    4386:	0f b6       	in	r0, 0x3f	; 63
    4388:	f8 94       	cli
    438a:	de bf       	out	0x3e, r29	; 62
    438c:	0f be       	out	0x3f, r0	; 63
    438e:	cd bf       	out	0x3d, r28	; 61
    4390:	6b 01       	movw	r12, r22
    4392:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4394:	80 90 b1 05 	lds	r8, 0x05B1
    4398:	90 90 b2 05 	lds	r9, 0x05B2
    439c:	a0 90 b3 05 	lds	r10, 0x05B3
    43a0:	b0 90 b4 05 	lds	r11, 0x05B4
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    43a4:	9b 01       	movw	r18, r22
    43a6:	ac 01       	movw	r20, r24
    43a8:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e0       	ldi	r20, 0x00	; 0
    43b2:	5f e3       	ldi	r21, 0x3F	; 63
    43b4:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    43b8:	9b 01       	movw	r18, r22
    43ba:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	80 e8       	ldi	r24, 0x80	; 128
    43c2:	9f e3       	ldi	r25, 0x3F	; 63
    43c4:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    43c8:	69 83       	std	Y+1, r22	; 0x01
    43ca:	7a 83       	std	Y+2, r23	; 0x02
    43cc:	8b 83       	std	Y+3, r24	; 0x03
    43ce:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    43d0:	40 90 b5 05 	lds	r4, 0x05B5
    43d4:	50 90 b6 05 	lds	r5, 0x05B6
    43d8:	60 90 b7 05 	lds	r6, 0x05B7
    43dc:	70 90 b8 05 	lds	r7, 0x05B8
    43e0:	9b 01       	movw	r18, r22
    43e2:	ac 01       	movw	r20, r24
    43e4:	c5 01       	movw	r24, r10
    43e6:	b4 01       	movw	r22, r8
    43e8:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    43ec:	6d 83       	std	Y+5, r22	; 0x05
    43ee:	7e 83       	std	Y+6, r23	; 0x06
    43f0:	8f 83       	std	Y+7, r24	; 0x07
    43f2:	98 87       	std	Y+8, r25	; 0x08
    43f4:	a7 01       	movw	r20, r14
    43f6:	96 01       	movw	r18, r12
    43f8:	c3 01       	movw	r24, r6
    43fa:	b2 01       	movw	r22, r4
    43fc:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    4400:	9b 01       	movw	r18, r22
    4402:	ac 01       	movw	r20, r24
    4404:	6d 81       	ldd	r22, Y+5	; 0x05
    4406:	7e 81       	ldd	r23, Y+6	; 0x06
    4408:	8f 81       	ldd	r24, Y+7	; 0x07
    440a:	98 85       	ldd	r25, Y+8	; 0x08
    440c:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    4410:	60 93 9d 05 	sts	0x059D, r22
    4414:	70 93 9e 05 	sts	0x059E, r23
    4418:	80 93 9f 05 	sts	0x059F, r24
    441c:	90 93 a0 05 	sts	0x05A0, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    4420:	a7 01       	movw	r20, r14
    4422:	96 01       	movw	r18, r12
    4424:	c5 01       	movw	r24, r10
    4426:	b4 01       	movw	r22, r8
    4428:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    442c:	6b 01       	movw	r12, r22
    442e:	7c 01       	movw	r14, r24
    4430:	29 81       	ldd	r18, Y+1	; 0x01
    4432:	3a 81       	ldd	r19, Y+2	; 0x02
    4434:	4b 81       	ldd	r20, Y+3	; 0x03
    4436:	5c 81       	ldd	r21, Y+4	; 0x04
    4438:	c3 01       	movw	r24, r6
    443a:	b2 01       	movw	r22, r4
    443c:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    4440:	9b 01       	movw	r18, r22
    4442:	ac 01       	movw	r20, r24
    4444:	c7 01       	movw	r24, r14
    4446:	b6 01       	movw	r22, r12
    4448:	0e 94 32 40 	call	0x8064	; 0x8064 <__addsf3>
    444c:	60 93 81 05 	sts	0x0581, r22
    4450:	70 93 82 05 	sts	0x0582, r23
    4454:	80 93 83 05 	sts	0x0583, r24
    4458:	90 93 84 05 	sts	0x0584, r25
}
    445c:	28 96       	adiw	r28, 0x08	; 8
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	f8 94       	cli
    4462:	de bf       	out	0x3e, r29	; 62
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	cd bf       	out	0x3d, r28	; 61
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	ff 90       	pop	r15
    446e:	ef 90       	pop	r14
    4470:	df 90       	pop	r13
    4472:	cf 90       	pop	r12
    4474:	bf 90       	pop	r11
    4476:	af 90       	pop	r10
    4478:	9f 90       	pop	r9
    447a:	8f 90       	pop	r8
    447c:	7f 90       	pop	r7
    447e:	6f 90       	pop	r6
    4480:	5f 90       	pop	r5
    4482:	4f 90       	pop	r4
    4484:	08 95       	ret

00004486 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    4486:	cf 92       	push	r12
    4488:	df 92       	push	r13
    448a:	ef 92       	push	r14
    448c:	ff 92       	push	r15
    448e:	69 01       	movw	r12, r18
    4490:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    4492:	25 ef       	ldi	r18, 0xF5	; 245
    4494:	31 ea       	ldi	r19, 0xA1	; 161
    4496:	4b e8       	ldi	r20, 0x8B	; 139
    4498:	5c e3       	ldi	r21, 0x3C	; 60
    449a:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    449e:	a7 01       	movw	r20, r14
    44a0:	96 01       	movw	r18, r12
    44a2:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    44a6:	6b 01       	movw	r12, r22
    44a8:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    44aa:	26 ea       	ldi	r18, 0xA6	; 166
    44ac:	3a e0       	ldi	r19, 0x0A	; 10
    44ae:	46 e8       	ldi	r20, 0x86	; 134
    44b0:	5e e3       	ldi	r21, 0x3E	; 62
    44b2:	0e 94 e5 41 	call	0x83ca	; 0x83ca <__gesf2>
    44b6:	18 16       	cp	r1, r24
    44b8:	9c f0       	brlt	.+38     	; 0x44e0 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    44ba:	26 ea       	ldi	r18, 0xA6	; 166
    44bc:	3a e0       	ldi	r19, 0x0A	; 10
    44be:	46 e8       	ldi	r20, 0x86	; 134
    44c0:	5e eb       	ldi	r21, 0xBE	; 190
    44c2:	c7 01       	movw	r24, r14
    44c4:	b6 01       	movw	r22, r12
    44c6:	0e 94 96 40 	call	0x812c	; 0x812c <__cmpsf2>
    44ca:	87 ff       	sbrs	r24, 7
    44cc:	11 c0       	rjmp	.+34     	; 0x44f0 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    44ce:	86 ea       	ldi	r24, 0xA6	; 166
    44d0:	c8 2e       	mov	r12, r24
    44d2:	8a e0       	ldi	r24, 0x0A	; 10
    44d4:	d8 2e       	mov	r13, r24
    44d6:	86 e8       	ldi	r24, 0x86	; 134
    44d8:	e8 2e       	mov	r14, r24
    44da:	8e eb       	ldi	r24, 0xBE	; 190
    44dc:	f8 2e       	mov	r15, r24
    44de:	08 c0       	rjmp	.+16     	; 0x44f0 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    44e0:	96 ea       	ldi	r25, 0xA6	; 166
    44e2:	c9 2e       	mov	r12, r25
    44e4:	9a e0       	ldi	r25, 0x0A	; 10
    44e6:	d9 2e       	mov	r13, r25
    44e8:	96 e8       	ldi	r25, 0x86	; 134
    44ea:	e9 2e       	mov	r14, r25
    44ec:	9e e3       	ldi	r25, 0x3E	; 62
    44ee:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    44f0:	c7 01       	movw	r24, r14
    44f2:	b6 01       	movw	r22, r12
    44f4:	ff 90       	pop	r15
    44f6:	ef 90       	pop	r14
    44f8:	df 90       	pop	r13
    44fa:	cf 90       	pop	r12
    44fc:	08 95       	ret

000044fe <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    44fe:	8f 92       	push	r8
    4500:	9f 92       	push	r9
    4502:	af 92       	push	r10
    4504:	bf 92       	push	r11
    4506:	cf 92       	push	r12
    4508:	df 92       	push	r13
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	0f 93       	push	r16
    4510:	1f 93       	push	r17
    4512:	6b 01       	movw	r12, r22
    4514:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    4516:	60 91 91 05 	lds	r22, 0x0591
    451a:	70 91 92 05 	lds	r23, 0x0592
    451e:	80 91 93 05 	lds	r24, 0x0593
    4522:	90 91 94 05 	lds	r25, 0x0594
    4526:	a7 01       	movw	r20, r14
    4528:	96 01       	movw	r18, r12
    452a:	0e 94 43 22 	call	0x4486	; 0x4486 <thetascale>
	VectorA = VectorY;
    452e:	00 91 16 05 	lds	r16, 0x0516
    4532:	10 91 17 05 	lds	r17, 0x0517
    4536:	20 91 18 05 	lds	r18, 0x0518
    453a:	30 91 19 05 	lds	r19, 0x0519
    453e:	00 93 b1 05 	sts	0x05B1, r16
    4542:	10 93 b2 05 	sts	0x05B2, r17
    4546:	20 93 b3 05 	sts	0x05B3, r18
    454a:	30 93 b4 05 	sts	0x05B4, r19
	VectorB = VectorZ;
    454e:	00 91 00 05 	lds	r16, 0x0500
    4552:	10 91 01 05 	lds	r17, 0x0501
    4556:	20 91 02 05 	lds	r18, 0x0502
    455a:	30 91 03 05 	lds	r19, 0x0503
    455e:	00 93 b5 05 	sts	0x05B5, r16
    4562:	10 93 b6 05 	sts	0x05B6, r17
    4566:	20 93 b7 05 	sts	0x05B7, r18
    456a:	30 93 b8 05 	sts	0x05B8, r19
	RotateVector(theta);
    456e:	0e 94 b2 21 	call	0x4364	; 0x4364 <RotateVector>
	VectorY = VectorNewA;
    4572:	80 91 9d 05 	lds	r24, 0x059D
    4576:	90 91 9e 05 	lds	r25, 0x059E
    457a:	a0 91 9f 05 	lds	r26, 0x059F
    457e:	b0 91 a0 05 	lds	r27, 0x05A0
    4582:	80 93 16 05 	sts	0x0516, r24
    4586:	90 93 17 05 	sts	0x0517, r25
    458a:	a0 93 18 05 	sts	0x0518, r26
    458e:	b0 93 19 05 	sts	0x0519, r27
	VectorZ = VectorNewB;
    4592:	80 90 81 05 	lds	r8, 0x0581
    4596:	90 90 82 05 	lds	r9, 0x0582
    459a:	a0 90 83 05 	lds	r10, 0x0583
    459e:	b0 90 84 05 	lds	r11, 0x0584
    45a2:	80 92 00 05 	sts	0x0500, r8
    45a6:	90 92 01 05 	sts	0x0501, r9
    45aa:	a0 92 02 05 	sts	0x0502, r10
    45ae:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    45b2:	60 91 95 05 	lds	r22, 0x0595
    45b6:	70 91 96 05 	lds	r23, 0x0596
    45ba:	80 91 97 05 	lds	r24, 0x0597
    45be:	90 91 98 05 	lds	r25, 0x0598
    45c2:	a7 01       	movw	r20, r14
    45c4:	96 01       	movw	r18, r12
    45c6:	0e 94 43 22 	call	0x4486	; 0x4486 <thetascale>
	VectorA = VectorX;
    45ca:	00 91 1a 05 	lds	r16, 0x051A
    45ce:	10 91 1b 05 	lds	r17, 0x051B
    45d2:	20 91 1c 05 	lds	r18, 0x051C
    45d6:	30 91 1d 05 	lds	r19, 0x051D
    45da:	00 93 b1 05 	sts	0x05B1, r16
    45de:	10 93 b2 05 	sts	0x05B2, r17
    45e2:	20 93 b3 05 	sts	0x05B3, r18
    45e6:	30 93 b4 05 	sts	0x05B4, r19
	VectorB = VectorZ;
    45ea:	80 92 b5 05 	sts	0x05B5, r8
    45ee:	90 92 b6 05 	sts	0x05B6, r9
    45f2:	a0 92 b7 05 	sts	0x05B7, r10
    45f6:	b0 92 b8 05 	sts	0x05B8, r11
	RotateVector(theta);
    45fa:	0e 94 b2 21 	call	0x4364	; 0x4364 <RotateVector>
	VectorX = VectorNewA;
    45fe:	80 90 9d 05 	lds	r8, 0x059D
    4602:	90 90 9e 05 	lds	r9, 0x059E
    4606:	a0 90 9f 05 	lds	r10, 0x059F
    460a:	b0 90 a0 05 	lds	r11, 0x05A0
    460e:	80 92 1a 05 	sts	0x051A, r8
    4612:	90 92 1b 05 	sts	0x051B, r9
    4616:	a0 92 1c 05 	sts	0x051C, r10
    461a:	b0 92 1d 05 	sts	0x051D, r11
	VectorZ = VectorNewB;
    461e:	80 91 81 05 	lds	r24, 0x0581
    4622:	90 91 82 05 	lds	r25, 0x0582
    4626:	a0 91 83 05 	lds	r26, 0x0583
    462a:	b0 91 84 05 	lds	r27, 0x0584
    462e:	80 93 00 05 	sts	0x0500, r24
    4632:	90 93 01 05 	sts	0x0501, r25
    4636:	a0 93 02 05 	sts	0x0502, r26
    463a:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    463e:	60 91 7f 05 	lds	r22, 0x057F
    4642:	70 91 80 05 	lds	r23, 0x0580
    4646:	88 27       	eor	r24, r24
    4648:	77 fd       	sbrc	r23, 7
    464a:	80 95       	com	r24
    464c:	98 2f       	mov	r25, r24
    464e:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    4652:	a7 01       	movw	r20, r14
    4654:	96 01       	movw	r18, r12
    4656:	0e 94 43 22 	call	0x4486	; 0x4486 <thetascale>
	VectorA = VectorX;
    465a:	80 92 b1 05 	sts	0x05B1, r8
    465e:	90 92 b2 05 	sts	0x05B2, r9
    4662:	a0 92 b3 05 	sts	0x05B3, r10
    4666:	b0 92 b4 05 	sts	0x05B4, r11
	VectorB = VectorY;
    466a:	c0 90 16 05 	lds	r12, 0x0516
    466e:	d0 90 17 05 	lds	r13, 0x0517
    4672:	e0 90 18 05 	lds	r14, 0x0518
    4676:	f0 90 19 05 	lds	r15, 0x0519
    467a:	c0 92 b5 05 	sts	0x05B5, r12
    467e:	d0 92 b6 05 	sts	0x05B6, r13
    4682:	e0 92 b7 05 	sts	0x05B7, r14
    4686:	f0 92 b8 05 	sts	0x05B8, r15
	RotateVector(theta);
    468a:	0e 94 b2 21 	call	0x4364	; 0x4364 <RotateVector>
	VectorX = VectorNewA;
    468e:	80 91 9d 05 	lds	r24, 0x059D
    4692:	90 91 9e 05 	lds	r25, 0x059E
    4696:	a0 91 9f 05 	lds	r26, 0x059F
    469a:	b0 91 a0 05 	lds	r27, 0x05A0
    469e:	80 93 1a 05 	sts	0x051A, r24
    46a2:	90 93 1b 05 	sts	0x051B, r25
    46a6:	a0 93 1c 05 	sts	0x051C, r26
    46aa:	b0 93 1d 05 	sts	0x051D, r27
	VectorY = VectorNewB;
    46ae:	80 91 81 05 	lds	r24, 0x0581
    46b2:	90 91 82 05 	lds	r25, 0x0582
    46b6:	a0 91 83 05 	lds	r26, 0x0583
    46ba:	b0 91 84 05 	lds	r27, 0x0584
    46be:	80 93 16 05 	sts	0x0516, r24
    46c2:	90 93 17 05 	sts	0x0517, r25
    46c6:	a0 93 18 05 	sts	0x0518, r26
    46ca:	b0 93 19 05 	sts	0x0519, r27
}
    46ce:	1f 91       	pop	r17
    46d0:	0f 91       	pop	r16
    46d2:	ff 90       	pop	r15
    46d4:	ef 90       	pop	r14
    46d6:	df 90       	pop	r13
    46d8:	cf 90       	pop	r12
    46da:	bf 90       	pop	r11
    46dc:	af 90       	pop	r10
    46de:	9f 90       	pop	r9
    46e0:	8f 90       	pop	r8
    46e2:	08 95       	ret

000046e4 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    46e4:	cf 92       	push	r12
    46e6:	df 92       	push	r13
    46e8:	ef 92       	push	r14
    46ea:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	44 eb       	ldi	r20, 0xB4	; 180
    46f2:	52 e4       	ldi	r21, 0x42	; 66
    46f4:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    46f8:	6b 01       	movw	r12, r22
    46fa:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	a9 01       	movw	r20, r18
    4702:	60 91 00 05 	lds	r22, 0x0500
    4706:	70 91 01 05 	lds	r23, 0x0501
    470a:	80 91 02 05 	lds	r24, 0x0502
    470e:	90 91 03 05 	lds	r25, 0x0503
    4712:	0e 94 96 40 	call	0x812c	; 0x812c <__cmpsf2>
    4716:	87 ff       	sbrs	r24, 7
    4718:	18 c0       	rjmp	.+48     	; 0x474a <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	a9 01       	movw	r20, r18
    4720:	c7 01       	movw	r24, r14
    4722:	b6 01       	movw	r22, r12
    4724:	0e 94 e5 41 	call	0x83ca	; 0x83ca <__gesf2>
		{
			temp = 180 - temp;
    4728:	a7 01       	movw	r20, r14
    472a:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    472c:	18 16       	cp	r1, r24
    472e:	2c f4       	brge	.+10     	; 0x473a <ext2+0x56>
		{
			temp = 180 - temp;
    4730:	60 e0       	ldi	r22, 0x00	; 0
    4732:	70 e0       	ldi	r23, 0x00	; 0
    4734:	84 e3       	ldi	r24, 0x34	; 52
    4736:	93 e4       	ldi	r25, 0x43	; 67
    4738:	04 c0       	rjmp	.+8      	; 0x4742 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    473a:	60 e0       	ldi	r22, 0x00	; 0
    473c:	70 e0       	ldi	r23, 0x00	; 0
    473e:	84 e3       	ldi	r24, 0x34	; 52
    4740:	93 ec       	ldi	r25, 0xC3	; 195
    4742:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    4746:	6b 01       	movw	r12, r22
    4748:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    474a:	c7 01       	movw	r24, r14
    474c:	b6 01       	movw	r22, r12
    474e:	ff 90       	pop	r15
    4750:	ef 90       	pop	r14
    4752:	df 90       	pop	r13
    4754:	cf 90       	pop	r12
    4756:	08 95       	ret

00004758 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4758:	60 91 1a 05 	lds	r22, 0x051A
    475c:	70 91 1b 05 	lds	r23, 0x051B
    4760:	80 91 1c 05 	lds	r24, 0x051C
    4764:	90 91 1d 05 	lds	r25, 0x051D
    4768:	0e 94 72 23 	call	0x46e4	; 0x46e4 <ext2>
    476c:	60 93 ad 05 	sts	0x05AD, r22
    4770:	70 93 ae 05 	sts	0x05AE, r23
    4774:	80 93 af 05 	sts	0x05AF, r24
    4778:	90 93 b0 05 	sts	0x05B0, r25
	EulerAnglePitch = ext2(VectorY);
    477c:	60 91 16 05 	lds	r22, 0x0516
    4780:	70 91 17 05 	lds	r23, 0x0517
    4784:	80 91 18 05 	lds	r24, 0x0518
    4788:	90 91 19 05 	lds	r25, 0x0519
    478c:	0e 94 72 23 	call	0x46e4	; 0x46e4 <ext2>
    4790:	60 93 85 05 	sts	0x0585, r22
    4794:	70 93 86 05 	sts	0x0586, r23
    4798:	80 93 87 05 	sts	0x0587, r24
    479c:	90 93 88 05 	sts	0x0588, r25
    47a0:	08 95       	ret

000047a2 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    47a2:	4f 92       	push	r4
    47a4:	5f 92       	push	r5
    47a6:	6f 92       	push	r6
    47a8:	7f 92       	push	r7
    47aa:	8f 92       	push	r8
    47ac:	9f 92       	push	r9
    47ae:	af 92       	push	r10
    47b0:	bf 92       	push	r11
    47b2:	cf 92       	push	r12
    47b4:	df 92       	push	r13
    47b6:	ef 92       	push	r14
    47b8:	ff 92       	push	r15
    47ba:	0f 93       	push	r16
    47bc:	1f 93       	push	r17
    47be:	cf 93       	push	r28
    47c0:	df 93       	push	r29
    47c2:	cd b7       	in	r28, 0x3d	; 61
    47c4:	de b7       	in	r29, 0x3e	; 62
    47c6:	60 97       	sbiw	r28, 0x10	; 16
    47c8:	0f b6       	in	r0, 0x3f	; 63
    47ca:	f8 94       	cli
    47cc:	de bf       	out	0x3e, r29	; 62
    47ce:	0f be       	out	0x3f, r0	; 63
    47d0:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    47d2:	0e 94 33 41 	call	0x8266	; 0x8266 <__floatunsisf>
    47d6:	69 83       	std	Y+1, r22	; 0x01
    47d8:	7a 83       	std	Y+2, r23	; 0x02
    47da:	8b 83       	std	Y+3, r24	; 0x03
    47dc:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    47de:	20 e8       	ldi	r18, 0x80	; 128
    47e0:	36 e9       	ldi	r19, 0x96	; 150
    47e2:	48 e1       	ldi	r20, 0x18	; 24
    47e4:	5a e4       	ldi	r21, 0x4A	; 74
    47e6:	0e 94 9a 40 	call	0x8134	; 0x8134 <__divsf3>
    47ea:	6d 87       	std	Y+13, r22	; 0x0d
    47ec:	7e 87       	std	Y+14, r23	; 0x0e
    47ee:	8f 87       	std	Y+15, r24	; 0x0f
    47f0:	98 8b       	std	Y+16, r25	; 0x10
	//************************************************************
	// Acc LPF
	//************************************************************	

	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    47f2:	80 91 78 06 	lds	r24, 0x0678
    47f6:	60 91 7e 06 	lds	r22, 0x067E
    47fa:	82 30       	cpi	r24, 0x02	; 2
    47fc:	39 f0       	breq	.+14     	; 0x480c <imu_update+0x6a>
	{
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float));
    47fe:	84 e0       	ldi	r24, 0x04	; 4
    4800:	68 02       	muls	r22, r24
    4802:	b0 01       	movw	r22, r0
    4804:	11 24       	eor	r1, r1
    4806:	68 5e       	subi	r22, 0xE8	; 232
    4808:	78 4e       	sbci	r23, 0xE8	; 232
    480a:	06 c0       	rjmp	.+12     	; 0x4818 <imu_update+0x76>
	}
	else
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
    480c:	94 e0       	ldi	r25, 0x04	; 4
    480e:	69 02       	muls	r22, r25
    4810:	b0 01       	movw	r22, r0
    4812:	11 24       	eor	r1, r1
    4814:	68 50       	subi	r22, 0x08	; 8
    4816:	79 4e       	sbci	r23, 0xE9	; 233
    4818:	44 e0       	ldi	r20, 0x04	; 4
    481a:	50 e0       	ldi	r21, 0x00	; 0
    481c:	ce 01       	movw	r24, r28
    481e:	01 96       	adiw	r24, 0x01	; 1
    4820:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    4824:	50 90 7e 06 	lds	r5, 0x067E
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    4828:	c9 80       	ldd	r12, Y+1	; 0x01
    482a:	da 80       	ldd	r13, Y+2	; 0x02
    482c:	eb 80       	ldd	r14, Y+3	; 0x03
    482e:	fc 80       	ldd	r15, Y+4	; 0x04
    4830:	26 e3       	ldi	r18, 0x36	; 54
    4832:	62 2e       	mov	r6, r18
    4834:	25 e0       	ldi	r18, 0x05	; 5
    4836:	72 2e       	mov	r7, r18
    4838:	01 ea       	ldi	r16, 0xA1	; 161
    483a:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    483c:	d3 01       	movw	r26, r6
    483e:	6d 91       	ld	r22, X+
    4840:	7d 91       	ld	r23, X+
    4842:	3d 01       	movw	r6, r26
    4844:	88 27       	eor	r24, r24
    4846:	77 fd       	sbrc	r23, 7
    4848:	80 95       	com	r24
    484a:	98 2f       	mov	r25, r24
    484c:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    4850:	4b 01       	movw	r8, r22
    4852:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    4854:	b7 e0       	ldi	r27, 0x07	; 7
    4856:	5b 16       	cp	r5, r27
    4858:	f1 f0       	breq	.+60     	; 0x4896 <imu_update+0xf4>
		{
			accSmooth[axis] = ((accSmooth[axis] * (tempf - 1.0f)) - accADCf) / tempf;
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	40 e8       	ldi	r20, 0x80	; 128
    4860:	5f e3       	ldi	r21, 0x3F	; 63
    4862:	c7 01       	movw	r24, r14
    4864:	b6 01       	movw	r22, r12
    4866:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    486a:	f8 01       	movw	r30, r16
    486c:	20 81       	ld	r18, Z
    486e:	31 81       	ldd	r19, Z+1	; 0x01
    4870:	42 81       	ldd	r20, Z+2	; 0x02
    4872:	53 81       	ldd	r21, Z+3	; 0x03
    4874:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    4878:	a5 01       	movw	r20, r10
    487a:	94 01       	movw	r18, r8
    487c:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    4880:	a7 01       	movw	r20, r14
    4882:	96 01       	movw	r18, r12
    4884:	0e 94 9a 40 	call	0x8134	; 0x8134 <__divsf3>
    4888:	d8 01       	movw	r26, r16
    488a:	6d 93       	st	X+, r22
    488c:	7d 93       	st	X+, r23
    488e:	8d 93       	st	X+, r24
    4890:	9c 93       	st	X, r25
    4892:	13 97       	sbiw	r26, 0x03	; 3
    4894:	09 c0       	rjmp	.+18     	; 0x48a8 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values when filter off
			accSmooth[axis] =  -accADCf;
    4896:	b7 fa       	bst	r11, 7
    4898:	b0 94       	com	r11
    489a:	b7 f8       	bld	r11, 7
    489c:	b0 94       	com	r11
    489e:	f8 01       	movw	r30, r16
    48a0:	80 82       	st	Z, r8
    48a2:	91 82       	std	Z+1, r9	; 0x01
    48a4:	a2 82       	std	Z+2, r10	; 0x02
    48a6:	b3 82       	std	Z+3, r11	; 0x03
    48a8:	0c 5f       	subi	r16, 0xFC	; 252
    48aa:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float));
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    48ac:	fc e3       	ldi	r31, 0x3C	; 60
    48ae:	6f 16       	cp	r6, r31
    48b0:	f5 e0       	ldi	r31, 0x05	; 5
    48b2:	7f 06       	cpc	r7, r31
    48b4:	19 f6       	brne	.-122    	; 0x483c <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    48b6:	23 ec       	ldi	r18, 0xC3	; 195
    48b8:	35 ef       	ldi	r19, 0xF5	; 245
    48ba:	48 e2       	ldi	r20, 0x28	; 40
    48bc:	5f e3       	ldi	r21, 0x3F	; 63
    48be:	60 91 a1 05 	lds	r22, 0x05A1
    48c2:	70 91 a2 05 	lds	r23, 0x05A2
    48c6:	80 91 a3 05 	lds	r24, 0x05A3
    48ca:	90 91 a4 05 	lds	r25, 0x05A4
    48ce:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    48d2:	6d 83       	std	Y+5, r22	; 0x05
    48d4:	7e 83       	std	Y+6, r23	; 0x06
    48d6:	8f 83       	std	Y+7, r24	; 0x07
    48d8:	98 87       	std	Y+8, r25	; 0x08
    48da:	60 93 89 05 	sts	0x0589, r22
    48de:	70 93 8a 05 	sts	0x058A, r23
    48e2:	80 93 8b 05 	sts	0x058B, r24
    48e6:	90 93 8c 05 	sts	0x058C, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    48ea:	23 ec       	ldi	r18, 0xC3	; 195
    48ec:	35 ef       	ldi	r19, 0xF5	; 245
    48ee:	48 e2       	ldi	r20, 0x28	; 40
    48f0:	5f e3       	ldi	r21, 0x3F	; 63
    48f2:	60 91 a5 05 	lds	r22, 0x05A5
    48f6:	70 91 a6 05 	lds	r23, 0x05A6
    48fa:	80 91 a7 05 	lds	r24, 0x05A7
    48fe:	90 91 a8 05 	lds	r25, 0x05A8
    4902:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    4906:	69 87       	std	Y+9, r22	; 0x09
    4908:	7a 87       	std	Y+10, r23	; 0x0a
    490a:	8b 87       	std	Y+11, r24	; 0x0b
    490c:	9c 87       	std	Y+12, r25	; 0x0c
    490e:	60 93 8d 05 	sts	0x058D, r22
    4912:	70 93 8e 05 	sts	0x058E, r23
    4916:	80 93 8f 05 	sts	0x058F, r24
    491a:	90 93 90 05 	sts	0x0590, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    491e:	60 91 7b 05 	lds	r22, 0x057B
    4922:	70 91 7c 05 	lds	r23, 0x057C
    4926:	88 27       	eor	r24, r24
    4928:	77 fd       	sbrc	r23, 7
    492a:	80 95       	com	r24
    492c:	98 2f       	mov	r25, r24
    492e:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    4932:	2b 01       	movw	r4, r22
    4934:	3c 01       	movw	r6, r24
    4936:	60 93 95 05 	sts	0x0595, r22
    493a:	70 93 96 05 	sts	0x0596, r23
    493e:	80 93 97 05 	sts	0x0597, r24
    4942:	90 93 98 05 	sts	0x0598, r25
	GyroPitchVC = gyroADC[PITCH];
    4946:	60 91 7d 05 	lds	r22, 0x057D
    494a:	70 91 7e 05 	lds	r23, 0x057E
    494e:	88 27       	eor	r24, r24
    4950:	77 fd       	sbrc	r23, 7
    4952:	80 95       	com	r24
    4954:	98 2f       	mov	r25, r24
    4956:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    495a:	6b 01       	movw	r12, r22
    495c:	7c 01       	movw	r14, r24
    495e:	60 93 91 05 	sts	0x0591, r22
    4962:	70 93 92 05 	sts	0x0592, r23
    4966:	80 93 93 05 	sts	0x0593, r24
    496a:	90 93 94 05 	sts	0x0594, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    496e:	20 91 36 05 	lds	r18, 0x0536
    4972:	30 91 37 05 	lds	r19, 0x0537
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4976:	40 91 38 05 	lds	r20, 0x0538
    497a:	50 91 39 05 	lds	r21, 0x0539
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    497e:	e0 91 3a 05 	lds	r30, 0x053A
    4982:	f0 91 3b 05 	lds	r31, 0x053B
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4986:	44 9f       	mul	r20, r20
    4988:	40 01       	movw	r8, r0
    498a:	45 9f       	mul	r20, r21
    498c:	90 0c       	add	r9, r0
    498e:	90 0c       	add	r9, r0
    4990:	11 24       	eor	r1, r1
    4992:	b4 01       	movw	r22, r8
    4994:	88 27       	eor	r24, r24
    4996:	77 fd       	sbrc	r23, 7
    4998:	80 95       	com	r24
    499a:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    499c:	22 9f       	mul	r18, r18
    499e:	a0 01       	movw	r20, r0
    49a0:	23 9f       	mul	r18, r19
    49a2:	50 0d       	add	r21, r0
    49a4:	50 0d       	add	r21, r0
    49a6:	11 24       	eor	r1, r1
    49a8:	8a 01       	movw	r16, r20
    49aa:	22 27       	eor	r18, r18
    49ac:	17 fd       	sbrc	r17, 7
    49ae:	20 95       	com	r18
    49b0:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    49b2:	60 0f       	add	r22, r16
    49b4:	71 1f       	adc	r23, r17
    49b6:	82 1f       	adc	r24, r18
    49b8:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    49ba:	ee 9f       	mul	r30, r30
    49bc:	90 01       	movw	r18, r0
    49be:	ef 9f       	mul	r30, r31
    49c0:	30 0d       	add	r19, r0
    49c2:	30 0d       	add	r19, r0
    49c4:	11 24       	eor	r1, r1
    49c6:	89 01       	movw	r16, r18
    49c8:	22 27       	eor	r18, r18
    49ca:	17 fd       	sbrc	r17, 7
    49cc:	20 95       	com	r18
    49ce:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    49d0:	60 0f       	add	r22, r16
    49d2:	71 1f       	adc	r23, r17
    49d4:	82 1f       	adc	r24, r18
    49d6:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    49d8:	0e 94 33 41 	call	0x8266	; 0x8266 <__floatunsisf>
    49dc:	4b 01       	movw	r8, r22
    49de:	5c 01       	movw	r10, r24
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	34 ef       	ldi	r19, 0xF4	; 244
    49e4:	48 e3       	ldi	r20, 0x38	; 56
    49e6:	56 e4       	ldi	r21, 0x46	; 70
    49e8:	0e 94 e5 41 	call	0x83ca	; 0x83ca <__gesf2>
    49ec:	18 16       	cp	r1, r24
    49ee:	0c f0       	brlt	.+2      	; 0x49f2 <imu_update+0x250>
    49f0:	6f c0       	rjmp	.+222    	; 0x4ad0 <imu_update+0x32e>
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	38 e4       	ldi	r19, 0x48	; 72
    49f6:	49 ea       	ldi	r20, 0xA9	; 169
    49f8:	56 e4       	ldi	r21, 0x46	; 70
    49fa:	c5 01       	movw	r24, r10
    49fc:	b4 01       	movw	r22, r8
    49fe:	0e 94 96 40 	call	0x812c	; 0x812c <__cmpsf2>
    4a02:	87 ff       	sbrs	r24, 7
    4a04:	65 c0       	rjmp	.+202    	; 0x4ad0 <imu_update+0x32e>
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	40 e0       	ldi	r20, 0x00	; 0
    4a0c:	5f e3       	ldi	r21, 0x3F	; 63
    4a0e:	60 91 00 05 	lds	r22, 0x0500
    4a12:	70 91 01 05 	lds	r23, 0x0501
    4a16:	80 91 02 05 	lds	r24, 0x0502
    4a1a:	90 91 03 05 	lds	r25, 0x0503
    4a1e:	0e 94 e5 41 	call	0x83ca	; 0x83ca <__gesf2>
    4a22:	18 16       	cp	r1, r24
    4a24:	0c f0       	brlt	.+2      	; 0x4a28 <imu_update+0x286>
    4a26:	54 c0       	rjmp	.+168    	; 0x4ad0 <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    4a28:	80 91 7d 06 	lds	r24, 0x067D
    4a2c:	6b e0       	ldi	r22, 0x0B	; 11
    4a2e:	70 e0       	ldi	r23, 0x00	; 0
    4a30:	68 1b       	sub	r22, r24
    4a32:	71 09       	sbc	r23, r1
    4a34:	87 fd       	sbrc	r24, 7
    4a36:	73 95       	inc	r23
    4a38:	88 27       	eor	r24, r24
    4a3a:	77 fd       	sbrc	r23, 7
    4a3c:	80 95       	com	r24
    4a3e:	98 2f       	mov	r25, r24
    4a40:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
    4a44:	4b 01       	movw	r8, r22
    4a46:	5c 01       	movw	r10, r24
    4a48:	2d 81       	ldd	r18, Y+5	; 0x05
    4a4a:	3e 81       	ldd	r19, Y+6	; 0x06
    4a4c:	4f 81       	ldd	r20, Y+7	; 0x07
    4a4e:	58 85       	ldd	r21, Y+8	; 0x08
    4a50:	60 91 ad 05 	lds	r22, 0x05AD
    4a54:	70 91 ae 05 	lds	r23, 0x05AE
    4a58:	80 91 af 05 	lds	r24, 0x05AF
    4a5c:	90 91 b0 05 	lds	r25, 0x05B0
    4a60:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    4a64:	a5 01       	movw	r20, r10
    4a66:	94 01       	movw	r18, r8
    4a68:	0e 94 9a 40 	call	0x8134	; 0x8134 <__divsf3>
    4a6c:	9b 01       	movw	r18, r22
    4a6e:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    4a70:	c3 01       	movw	r24, r6
    4a72:	b2 01       	movw	r22, r4
    4a74:	0e 94 32 40 	call	0x8064	; 0x8064 <__addsf3>
    4a78:	60 93 95 05 	sts	0x0595, r22
    4a7c:	70 93 96 05 	sts	0x0596, r23
    4a80:	80 93 97 05 	sts	0x0597, r24
    4a84:	90 93 98 05 	sts	0x0598, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    4a88:	29 85       	ldd	r18, Y+9	; 0x09
    4a8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a90:	60 91 85 05 	lds	r22, 0x0585
    4a94:	70 91 86 05 	lds	r23, 0x0586
    4a98:	80 91 87 05 	lds	r24, 0x0587
    4a9c:	90 91 88 05 	lds	r25, 0x0588
    4aa0:	0e 94 31 40 	call	0x8062	; 0x8062 <__subsf3>
    4aa4:	a5 01       	movw	r20, r10
    4aa6:	94 01       	movw	r18, r8
    4aa8:	0e 94 9a 40 	call	0x8134	; 0x8134 <__divsf3>
    4aac:	9b 01       	movw	r18, r22
    4aae:	ac 01       	movw	r20, r24
    4ab0:	69 83       	std	Y+1, r22	; 0x01
    4ab2:	7a 83       	std	Y+2, r23	; 0x02
    4ab4:	8b 83       	std	Y+3, r24	; 0x03
    4ab6:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    4ab8:	c7 01       	movw	r24, r14
    4aba:	b6 01       	movw	r22, r12
    4abc:	0e 94 32 40 	call	0x8064	; 0x8064 <__addsf3>
    4ac0:	60 93 91 05 	sts	0x0591, r22
    4ac4:	70 93 92 05 	sts	0x0592, r23
    4ac8:	80 93 93 05 	sts	0x0593, r24
    4acc:	90 93 94 05 	sts	0x0594, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    4ad0:	6d 85       	ldd	r22, Y+13	; 0x0d
    4ad2:	7e 85       	ldd	r23, Y+14	; 0x0e
    4ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ad6:	98 89       	ldd	r25, Y+16	; 0x10
    4ad8:	0e 94 7f 22 	call	0x44fe	; 0x44fe <Rotate3dVector>
	ExtractEulerAngles();
    4adc:	0e 94 ac 23 	call	0x4758	; 0x4758 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	48 ec       	ldi	r20, 0xC8	; 200
    4ae6:	52 ec       	ldi	r21, 0xC2	; 194
    4ae8:	60 91 ad 05 	lds	r22, 0x05AD
    4aec:	70 91 ae 05 	lds	r23, 0x05AE
    4af0:	80 91 af 05 	lds	r24, 0x05AF
    4af4:	90 91 b0 05 	lds	r25, 0x05B0
    4af8:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    4afc:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    4b00:	70 93 9a 05 	sts	0x059A, r23
    4b04:	60 93 99 05 	sts	0x0599, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	48 ec       	ldi	r20, 0xC8	; 200
    4b0e:	52 ec       	ldi	r21, 0xC2	; 194
    4b10:	60 91 85 05 	lds	r22, 0x0585
    4b14:	70 91 86 05 	lds	r23, 0x0586
    4b18:	80 91 87 05 	lds	r24, 0x0587
    4b1c:	90 91 88 05 	lds	r25, 0x0588
    4b20:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
    4b24:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    4b28:	70 93 9c 05 	sts	0x059C, r23
    4b2c:	60 93 9b 05 	sts	0x059B, r22
}
    4b30:	60 96       	adiw	r28, 0x10	; 16
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	f8 94       	cli
    4b36:	de bf       	out	0x3e, r29	; 62
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	cd bf       	out	0x3d, r28	; 61
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	1f 91       	pop	r17
    4b42:	0f 91       	pop	r16
    4b44:	ff 90       	pop	r15
    4b46:	ef 90       	pop	r14
    4b48:	df 90       	pop	r13
    4b4a:	cf 90       	pop	r12
    4b4c:	bf 90       	pop	r11
    4b4e:	af 90       	pop	r10
    4b50:	9f 90       	pop	r9
    4b52:	8f 90       	pop	r8
    4b54:	7f 90       	pop	r7
    4b56:	6f 90       	pop	r6
    4b58:	5f 90       	pop	r5
    4b5a:	4f 90       	pop	r4
    4b5c:	08 95       	ret

00004b5e <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    4b5e:	10 92 1a 05 	sts	0x051A, r1
    4b62:	10 92 1b 05 	sts	0x051B, r1
    4b66:	10 92 1c 05 	sts	0x051C, r1
    4b6a:	10 92 1d 05 	sts	0x051D, r1
	VectorY = 0;
    4b6e:	10 92 16 05 	sts	0x0516, r1
    4b72:	10 92 17 05 	sts	0x0517, r1
    4b76:	10 92 18 05 	sts	0x0518, r1
    4b7a:	10 92 19 05 	sts	0x0519, r1
	VectorZ = 1;
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	a0 e8       	ldi	r26, 0x80	; 128
    4b84:	bf e3       	ldi	r27, 0x3F	; 63
    4b86:	80 93 00 05 	sts	0x0500, r24
    4b8a:	90 93 01 05 	sts	0x0501, r25
    4b8e:	a0 93 02 05 	sts	0x0502, r26
    4b92:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    4b96:	10 92 b1 05 	sts	0x05B1, r1
    4b9a:	10 92 b2 05 	sts	0x05B2, r1
    4b9e:	10 92 b3 05 	sts	0x05B3, r1
    4ba2:	10 92 b4 05 	sts	0x05B4, r1
	VectorB = 0;
    4ba6:	10 92 b5 05 	sts	0x05B5, r1
    4baa:	10 92 b6 05 	sts	0x05B6, r1
    4bae:	10 92 b7 05 	sts	0x05B7, r1
    4bb2:	10 92 b8 05 	sts	0x05B8, r1
	EulerAngleRoll = 0;
    4bb6:	10 92 ad 05 	sts	0x05AD, r1
    4bba:	10 92 ae 05 	sts	0x05AE, r1
    4bbe:	10 92 af 05 	sts	0x05AF, r1
    4bc2:	10 92 b0 05 	sts	0x05B0, r1
	EulerAnglePitch = 0;
    4bc6:	10 92 85 05 	sts	0x0585, r1
    4bca:	10 92 86 05 	sts	0x0586, r1
    4bce:	10 92 87 05 	sts	0x0587, r1
    4bd2:	10 92 88 05 	sts	0x0588, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    4bd6:	10 92 71 07 	sts	0x0771, r1
    4bda:	10 92 70 07 	sts	0x0770, r1
	TCNT1 = 0;			// TCNT1 current time
    4bde:	10 92 85 00 	sts	0x0085, r1
    4be2:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    4be6:	10 92 0f 05 	sts	0x050F, r1
    4bea:	10 92 0e 05 	sts	0x050E, r1
    4bee:	08 95       	ret

00004bf0 <init>:
	// I/O setup
	//***********************************************************
	// Set port directions
	// KK2.0 and KK2.1 are different
#ifdef KK21
	DDRA		= 0x30;		// Port A
    4bf0:	80 e3       	ldi	r24, 0x30	; 48
    4bf2:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    4bf4:	8c ef       	ldi	r24, 0xFC	; 252
    4bf6:	87 b9       	out	0x07, r24	; 7
#else
	DDRA		= 0x00;		// Port A
	DDRC		= 0xFF;		// Port C
#endif
	DDRB		= 0x0A;		// Port B
    4bf8:	8a e0       	ldi	r24, 0x0A	; 10
    4bfa:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    4bfc:	82 ef       	ldi	r24, 0xF2	; 242
    4bfe:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    4c00:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    4c02:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;		
    4c04:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    4c06:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    4c08:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    4c0a:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    4c0c:	85 ef       	ldi	r24, 0xF5	; 245
    4c0e:	83 b9       	out	0x03, r24	; 3

	//***********************************************************
	// Spektrum receiver binding. Must be done immediately on power-up
	//***********************************************************
	// Bind as master if ONLY button 4 pressed
	if (BUTTON4 == 0)
    4c10:	1c 99       	sbic	0x03, 4	; 3
    4c12:	11 c0       	rjmp	.+34     	; 0x4c36 <init+0x46>
	{
		PIND	= 0x0C;		// Release RX pull up
    4c14:	8c e0       	ldi	r24, 0x0C	; 12
    4c16:	89 b9       	out	0x09, r24	; 9
    4c18:	2f e5       	ldi	r18, 0x5F	; 95
    4c1a:	88 ed       	ldi	r24, 0xD8	; 216
    4c1c:	93 e0       	ldi	r25, 0x03	; 3
    4c1e:	21 50       	subi	r18, 0x01	; 1
    4c20:	80 40       	sbci	r24, 0x00	; 0
    4c22:	90 40       	sbci	r25, 0x00	; 0
    4c24:	e1 f7       	brne	.-8      	; 0x4c1e <init+0x2e>
    4c26:	00 c0       	rjmp	.+0      	; 0x4c28 <init+0x38>
    4c28:	00 00       	nop
		_delay_ms(63);		// Pause while satellite wakes up
							// and pull-ups have time to rise.
							// Tweak until bind pulses about 68ms after power-up		
		DDRD	= 0xF3;		// Switch PD0 to output
    4c2a:	83 ef       	ldi	r24, 0xF3	; 243
    4c2c:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    4c2e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <bind_master>
		DDRD	= 0xF2;		// Reset Port D directions		
    4c32:	82 ef       	ldi	r24, 0xF2	; 242
    4c34:	8a b9       	out	0x0a, r24	; 10
	}

	PIND	= 0x0D;			// Set PD pull-ups (now pull up RX as well)	
    4c36:	8d e0       	ldi	r24, 0x0D	; 13
    4c38:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    4c3a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    4c3c:	85 e0       	ldi	r24, 0x05	; 5
    4c3e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    4c40:	80 91 6e 00 	lds	r24, 0x006E
    4c44:	81 60       	ori	r24, 0x01	; 1
    4c46:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    4c4a:	16 bc       	out	0x26, r1	; 38

	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    4c4c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    4c50:	80 91 81 00 	lds	r24, 0x0081
    4c54:	82 60       	ori	r24, 0x02	; 2
    4c56:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    4c5a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    4c5e:	87 e0       	ldi	r24, 0x07	; 7
    4c60:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    4c64:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    4c68:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    4c6a:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    4c6e:	9a e0       	ldi	r25, 0x0A	; 10
    4c70:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    4c74:	9f e0       	ldi	r25, 0x0F	; 15
    4c76:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    4c78:	95 e1       	ldi	r25, 0x15	; 21
    4c7a:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    4c7e:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted  = false;						
    4c80:	10 92 6d 07 	sts	0x076D, r1
	Main_flags |= (1 << FirstTimeFlightMode);
    4c84:	80 91 13 05 	lds	r24, 0x0513
    4c88:	88 60       	ori	r24, 0x08	; 8
    4c8a:	80 93 13 05 	sts	0x0513, r24
	//***********************************************************
	// GLCD initialisation
	//***********************************************************
	
	// Initialise the GLCD
	st7565_init();
    4c8e:	0e 94 cf 1c 	call	0x399e	; 0x399e <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    4c92:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <clear_screen>
    4c96:	2f e7       	ldi	r18, 0x7F	; 127
    4c98:	8f e4       	ldi	r24, 0x4F	; 79
    4c9a:	92 e1       	ldi	r25, 0x12	; 18
    4c9c:	21 50       	subi	r18, 0x01	; 1
    4c9e:	80 40       	sbci	r24, 0x00	; 0
    4ca0:	90 40       	sbci	r25, 0x00	; 0
    4ca2:	e1 f7       	brne	.-8      	; 0x4c9c <init+0xac>
    4ca4:	00 c0       	rjmp	.+0      	; 0x4ca6 <init+0xb6>
    4ca6:	00 00       	nop
	
	//***********************************************************
	// Load or reset EEPROM settings
	//***********************************************************
	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    4ca8:	83 b1       	in	r24, 0x03	; 3
    4caa:	80 7f       	andi	r24, 0xF0	; 240
    4cac:	80 39       	cpi	r24, 0x90	; 144
    4cae:	51 f5       	brne	.+84     	; 0x4d04 <init+0x114>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4cb0:	80 ec       	ldi	r24, 0xC0	; 192
    4cb2:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
		clear_buffer(buffer);
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	91 e0       	ldi	r25, 0x01	; 1
    4cba:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25);
    4cbe:	29 e1       	ldi	r18, 0x19	; 25
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	48 e2       	ldi	r20, 0x28	; 40
    4cc4:	50 e0       	ldi	r21, 0x00	; 0
    4cc6:	60 e7       	ldi	r22, 0x70	; 112
    4cc8:	71 e0       	ldi	r23, 0x01	; 1
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		write_buffer(buffer);
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
    4cd2:	91 e0       	ldi	r25, 0x01	; 1
    4cd4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
		clear_buffer(buffer);
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	91 e0       	ldi	r25, 0x01	; 1
    4cdc:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>

		Set_EEPROM_Default_Config();
    4ce0:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    4ce4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
		
		// Now set contrast to the previously saved value
		st7565_set_brightness((uint8_t)Config.Contrast);
    4ce8:	80 91 77 06 	lds	r24, 0x0677
    4cec:	0e 94 c6 1c 	call	0x398c	; 0x398c <st7565_set_brightness>
    4cf0:	2f e7       	ldi	r18, 0x7F	; 127
    4cf2:	84 e8       	ldi	r24, 0x84	; 132
    4cf4:	9e e1       	ldi	r25, 0x1E	; 30
    4cf6:	21 50       	subi	r18, 0x01	; 1
    4cf8:	80 40       	sbci	r24, 0x00	; 0
    4cfa:	90 40       	sbci	r25, 0x00	; 0
    4cfc:	e1 f7       	brne	.-8      	; 0x4cf6 <init+0x106>
    4cfe:	00 c0       	rjmp	.+0      	; 0x4d00 <init+0x110>
    4d00:	00 00       	nop
    4d02:	02 c0       	rjmp	.+4      	; 0x4d08 <init+0x118>
		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}
	// Load "Config" global data structure
	else
	{
		Initial_EEPROM_Config_Load();
    4d04:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <Initial_EEPROM_Config_Load>
	}		

	// Now set contrast to the previously saved value
	st7565_set_brightness((uint8_t)Config.Contrast);
    4d08:	80 91 77 06 	lds	r24, 0x0677
    4d0c:	0e 94 c6 1c 	call	0x398c	; 0x398c <st7565_set_brightness>

#ifdef KK21
	// Write logo from buffer
	write_buffer(buffer);
    4d10:	80 e0       	ldi	r24, 0x00	; 0
    4d12:	91 e0       	ldi	r25, 0x01	; 1
    4d14:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
    4d18:	2f e7       	ldi	r18, 0x7F	; 127
    4d1a:	84 e8       	ldi	r24, 0x84	; 132
    4d1c:	9e e1       	ldi	r25, 0x1E	; 30
    4d1e:	21 50       	subi	r18, 0x01	; 1
    4d20:	80 40       	sbci	r24, 0x00	; 0
    4d22:	90 40       	sbci	r25, 0x00	; 0
    4d24:	e1 f7       	brne	.-8      	; 0x4d1e <init+0x12e>
    4d26:	00 c0       	rjmp	.+0      	; 0x4d28 <init+0x138>
    4d28:	00 00       	nop
	_delay_ms(500);
#endif

	clear_buffer(buffer);
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	91 e0       	ldi	r25, 0x01	; 1
    4d2e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
	write_buffer(buffer);
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	91 e0       	ldi	r25, 0x01	; 1
    4d36:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    4d3a:	0e 94 cf 1c 	call	0x399e	; 0x399e <st7565_init>
	//***********************************************************
	// i2c init for KK2.1
	//***********************************************************	

#ifdef KK21
	i2c_init();
    4d3e:	0e 94 c2 3e 	call	0x7d84	; 0x7d84 <i2c_init>
	init_i2c_gyros();
    4d42:	0e 94 42 21 	call	0x4284	; 0x4284 <init_i2c_gyros>
	init_i2c_accs();
    4d46:	0e 94 cb 10 	call	0x2196	; 0x2196 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	91 e0       	ldi	r25, 0x01	; 1
    4d4e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4d52:	80 ec       	ldi	r24, 0xC0	; 192
    4d54:	0e 94 c0 1c 	call	0x3980	; 0x3980 <st7565_command>
	LCD_Display_Text(2,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    4d58:	29 e1       	ldi	r18, 0x19	; 25
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	42 e1       	ldi	r20, 0x12	; 18
    4d5e:	50 e0       	ldi	r21, 0x00	; 0
    4d60:	60 e7       	ldi	r22, 0x70	; 112
    4d62:	71 e0       	ldi	r23, 0x01	; 1
    4d64:	82 e0       	ldi	r24, 0x02	; 2
    4d66:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	write_buffer(buffer);
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	91 e0       	ldi	r25, 0x01	; 1
    4d6e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
	clear_buffer(buffer);
    4d72:	80 e0       	ldi	r24, 0x00	; 0
    4d74:	91 e0       	ldi	r25, 0x01	; 1
    4d76:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    4d7a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    4d7e:	0e 94 0a 2b 	call	0x5614	; 0x5614 <init_int>
	init_uart();							// Initialise UART	
    4d82:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    4d86:	0e 94 63 20 	call	0x40c6	; 0x40c6 <CalibrateGyrosSlow>
    4d8a:	81 11       	cpse	r24, r1
    4d8c:	27 c0       	rjmp	.+78     	; 0x4ddc <init+0x1ec>
	{
		clear_buffer(buffer);
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	91 e0       	ldi	r25, 0x01	; 1
    4d92:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    4d96:	29 e1       	ldi	r18, 0x19	; 25
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	49 e1       	ldi	r20, 0x19	; 25
    4d9c:	50 e0       	ldi	r21, 0x00	; 0
    4d9e:	60 e7       	ldi	r22, 0x70	; 112
    4da0:	71 e0       	ldi	r23, 0x01	; 1
    4da2:	8d e3       	ldi	r24, 0x3D	; 61
    4da4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		write_buffer(buffer);
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	91 e0       	ldi	r25, 0x01	; 1
    4dac:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
    4db0:	2f ef       	ldi	r18, 0xFF	; 255
    4db2:	88 e0       	ldi	r24, 0x08	; 8
    4db4:	9d e3       	ldi	r25, 0x3D	; 61
    4db6:	21 50       	subi	r18, 0x01	; 1
    4db8:	80 40       	sbci	r24, 0x00	; 0
    4dba:	90 40       	sbci	r25, 0x00	; 0
    4dbc:	e1 f7       	brne	.-8      	; 0x4db6 <init+0x1c6>
    4dbe:	00 c0       	rjmp	.+0      	; 0x4dc0 <init+0x1d0>
    4dc0:	00 00       	nop
		_delay_ms(1000);
	
		// Reset
		cli();
    4dc2:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    4dc4:	28 e0       	ldi	r18, 0x08	; 8
    4dc6:	88 e1       	ldi	r24, 0x18	; 24
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	0f b6       	in	r0, 0x3f	; 63
    4dcc:	f8 94       	cli
    4dce:	a8 95       	wdr
    4dd0:	80 93 60 00 	sts	0x0060, r24
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	20 93 60 00 	sts	0x0060, r18
    4dda:	ff cf       	rjmp	.-2      	; 0x4dda <init+0x1ea>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    4ddc:	0e 94 12 40 	call	0x8024	; 0x8024 <GetVbat>
    4de0:	90 93 1f 05 	sts	0x051F, r25
    4de4:	80 93 1e 05 	sts	0x051E, r24
	UpdateLimits();							// Update travel and trigger limits
    4de8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <UpdateLimits>

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    4dec:	80 91 6d 07 	lds	r24, 0x076D
    4df0:	88 23       	and	r24, r24
    4df2:	69 f0       	breq	.+26     	; 0x4e0e <init+0x21e>
	{
		RxGetChannels();
    4df4:	0e 94 cf 3c 	call	0x799e	; 0x799e <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    4df8:	80 91 b4 07 	lds	r24, 0x07B4
    4dfc:	90 91 b5 07 	lds	r25, 0x07B5
    4e00:	c3 97       	sbiw	r24, 0x33	; 51
    4e02:	2c f0       	brlt	.+10     	; 0x4e0e <init+0x21e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    4e04:	80 91 15 05 	lds	r24, 0x0515
    4e08:	82 60       	ori	r24, 0x02	; 2
    4e0a:	80 93 15 05 	sts	0x0515, r24
		}
	}
	
	// Reset IMU
	reset_IMU();
    4e0e:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    4e12:	29 9a       	sbi	0x05, 1	; 5
    4e14:	2f e9       	ldi	r18, 0x9F	; 159
    4e16:	86 e8       	ldi	r24, 0x86	; 134
    4e18:	91 e0       	ldi	r25, 0x01	; 1
    4e1a:	21 50       	subi	r18, 0x01	; 1
    4e1c:	80 40       	sbci	r24, 0x00	; 0
    4e1e:	90 40       	sbci	r25, 0x00	; 0
    4e20:	e1 f7       	brne	.-8      	; 0x4e1a <init+0x22a>
    4e22:	00 c0       	rjmp	.+0      	; 0x4e24 <init+0x234>
    4e24:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    4e26:	29 98       	cbi	0x05, 1	; 5
    4e28:	08 95       	ret

00004e2a <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    4e2a:	1f 92       	push	r1
    4e2c:	0f 92       	push	r0
    4e2e:	0f b6       	in	r0, 0x3f	; 63
    4e30:	0f 92       	push	r0
    4e32:	11 24       	eor	r1, r1
    4e34:	8f 93       	push	r24
    4e36:	9f 93       	push	r25
	TMR0_counter++;
    4e38:	80 91 70 07 	lds	r24, 0x0770
    4e3c:	90 91 71 07 	lds	r25, 0x0771
    4e40:	01 96       	adiw	r24, 0x01	; 1
    4e42:	90 93 71 07 	sts	0x0771, r25
    4e46:	80 93 70 07 	sts	0x0770, r24
}
    4e4a:	9f 91       	pop	r25
    4e4c:	8f 91       	pop	r24
    4e4e:	0f 90       	pop	r0
    4e50:	0f be       	out	0x3f, r0	; 63
    4e52:	0f 90       	pop	r0
    4e54:	1f 90       	pop	r1
    4e56:	18 95       	reti

00004e58 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    4e58:	1f 92       	push	r1
    4e5a:	0f 92       	push	r0
    4e5c:	0f b6       	in	r0, 0x3f	; 63
    4e5e:	0f 92       	push	r0
    4e60:	11 24       	eor	r1, r1
    4e62:	2f 93       	push	r18
    4e64:	3f 93       	push	r19
    4e66:	8f 93       	push	r24
    4e68:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    4e6a:	80 91 87 07 	lds	r24, 0x0787
    4e6e:	88 23       	and	r24, r24
    4e70:	19 f0       	breq	.+6      	; 0x4e78 <__vector_2+0x20>
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	80 93 88 07 	sts	0x0788, r24

	if (RX_ROLL)	// Rising
    4e78:	4b 9b       	sbis	0x09, 3	; 9
    4e7a:	09 c0       	rjmp	.+18     	; 0x4e8e <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    4e7c:	80 91 84 00 	lds	r24, 0x0084
    4e80:	90 91 85 00 	lds	r25, 0x0085
    4e84:	90 93 75 07 	sts	0x0775, r25
    4e88:	80 93 74 07 	sts	0x0774, r24
    4e8c:	14 c0       	rjmp	.+40     	; 0x4eb6 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    4e8e:	80 91 84 00 	lds	r24, 0x0084
    4e92:	90 91 85 00 	lds	r25, 0x0085
    4e96:	20 91 74 07 	lds	r18, 0x0774
    4e9a:	30 91 75 07 	lds	r19, 0x0775
    4e9e:	82 1b       	sub	r24, r18
    4ea0:	93 0b       	sbc	r25, r19
    4ea2:	90 93 60 07 	sts	0x0760, r25
    4ea6:	80 93 5f 07 	sts	0x075F, r24
		if (Config.PWM_Sync == AILERON) 
    4eaa:	80 91 03 06 	lds	r24, 0x0603
    4eae:	81 30       	cpi	r24, 0x01	; 1
    4eb0:	11 f4       	brne	.+4      	; 0x4eb6 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4eb2:	80 93 6d 07 	sts	0x076D, r24
		}
	}
}
    4eb6:	9f 91       	pop	r25
    4eb8:	8f 91       	pop	r24
    4eba:	3f 91       	pop	r19
    4ebc:	2f 91       	pop	r18
    4ebe:	0f 90       	pop	r0
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	0f 90       	pop	r0
    4ec4:	1f 90       	pop	r1
    4ec6:	18 95       	reti

00004ec8 <__vector_1>:

ISR(INT0_vect)
{
    4ec8:	1f 92       	push	r1
    4eca:	0f 92       	push	r0
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	0f 92       	push	r0
    4ed0:	11 24       	eor	r1, r1
    4ed2:	2f 93       	push	r18
    4ed4:	3f 93       	push	r19
    4ed6:	8f 93       	push	r24
    4ed8:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4eda:	80 91 87 07 	lds	r24, 0x0787
    4ede:	88 23       	and	r24, r24
    4ee0:	19 f0       	breq	.+6      	; 0x4ee8 <__vector_1+0x20>
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	80 93 88 07 	sts	0x0788, r24

	if (RX_PITCH)	// Rising 
    4ee8:	4a 9b       	sbis	0x09, 2	; 9
    4eea:	09 c0       	rjmp	.+18     	; 0x4efe <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    4eec:	80 91 84 00 	lds	r24, 0x0084
    4ef0:	90 91 85 00 	lds	r25, 0x0085
    4ef4:	90 93 77 07 	sts	0x0777, r25
    4ef8:	80 93 76 07 	sts	0x0776, r24
    4efc:	15 c0       	rjmp	.+42     	; 0x4f28 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    4efe:	80 91 84 00 	lds	r24, 0x0084
    4f02:	90 91 85 00 	lds	r25, 0x0085
    4f06:	20 91 76 07 	lds	r18, 0x0776
    4f0a:	30 91 77 07 	lds	r19, 0x0777
    4f0e:	82 1b       	sub	r24, r18
    4f10:	93 0b       	sbc	r25, r19
    4f12:	90 93 62 07 	sts	0x0762, r25
    4f16:	80 93 61 07 	sts	0x0761, r24
		if (Config.PWM_Sync == ELEVATOR) 
    4f1a:	80 91 03 06 	lds	r24, 0x0603
    4f1e:	82 30       	cpi	r24, 0x02	; 2
    4f20:	19 f4       	brne	.+6      	; 0x4f28 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	80 93 6d 07 	sts	0x076D, r24
		}
	}
}
    4f28:	9f 91       	pop	r25
    4f2a:	8f 91       	pop	r24
    4f2c:	3f 91       	pop	r19
    4f2e:	2f 91       	pop	r18
    4f30:	0f 90       	pop	r0
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	0f 90       	pop	r0
    4f36:	1f 90       	pop	r1
    4f38:	18 95       	reti

00004f3a <__vector_7>:

ISR(PCINT3_vect)
{
    4f3a:	1f 92       	push	r1
    4f3c:	0f 92       	push	r0
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	0f 92       	push	r0
    4f42:	11 24       	eor	r1, r1
    4f44:	2f 93       	push	r18
    4f46:	3f 93       	push	r19
    4f48:	8f 93       	push	r24
    4f4a:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4f4c:	80 91 87 07 	lds	r24, 0x0787
    4f50:	88 23       	and	r24, r24
    4f52:	19 f0       	breq	.+6      	; 0x4f5a <__vector_7+0x20>
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	80 93 88 07 	sts	0x0788, r24
		
	if (RX_COLL)	// Rising
    4f5a:	48 9b       	sbis	0x09, 0	; 9
    4f5c:	09 c0       	rjmp	.+18     	; 0x4f70 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    4f5e:	80 91 84 00 	lds	r24, 0x0084
    4f62:	90 91 85 00 	lds	r25, 0x0085
    4f66:	90 93 73 07 	sts	0x0773, r25
    4f6a:	80 93 72 07 	sts	0x0772, r24
    4f6e:	15 c0       	rjmp	.+42     	; 0x4f9a <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    4f70:	80 91 84 00 	lds	r24, 0x0084
    4f74:	90 91 85 00 	lds	r25, 0x0085
    4f78:	20 91 72 07 	lds	r18, 0x0772
    4f7c:	30 91 73 07 	lds	r19, 0x0773
    4f80:	82 1b       	sub	r24, r18
    4f82:	93 0b       	sbc	r25, r19
    4f84:	90 93 5e 07 	sts	0x075E, r25
    4f88:	80 93 5d 07 	sts	0x075D, r24
		if (Config.PWM_Sync == THROTTLE) 
    4f8c:	80 91 03 06 	lds	r24, 0x0603
    4f90:	81 11       	cpse	r24, r1
    4f92:	03 c0       	rjmp	.+6      	; 0x4f9a <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	80 93 6d 07 	sts	0x076D, r24
		}
	}
}
    4f9a:	9f 91       	pop	r25
    4f9c:	8f 91       	pop	r24
    4f9e:	3f 91       	pop	r19
    4fa0:	2f 91       	pop	r18
    4fa2:	0f 90       	pop	r0
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	0f 90       	pop	r0
    4fa8:	1f 90       	pop	r1
    4faa:	18 95       	reti

00004fac <__vector_5>:


ISR(PCINT1_vect)
{
    4fac:	1f 92       	push	r1
    4fae:	0f 92       	push	r0
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	0f 92       	push	r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	2f 93       	push	r18
    4fb8:	3f 93       	push	r19
    4fba:	8f 93       	push	r24
    4fbc:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    4fbe:	80 91 87 07 	lds	r24, 0x0787
    4fc2:	88 23       	and	r24, r24
    4fc4:	19 f0       	breq	.+6      	; 0x4fcc <__vector_5+0x20>
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	80 93 88 07 	sts	0x0788, r24

	if (RX_AUX)	// Rising
    4fcc:	18 9b       	sbis	0x03, 0	; 3
    4fce:	09 c0       	rjmp	.+18     	; 0x4fe2 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    4fd0:	80 91 84 00 	lds	r24, 0x0084
    4fd4:	90 91 85 00 	lds	r25, 0x0085
    4fd8:	90 93 7b 07 	sts	0x077B, r25
    4fdc:	80 93 7a 07 	sts	0x077A, r24
    4fe0:	15 c0       	rjmp	.+42     	; 0x500c <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    4fe2:	80 91 84 00 	lds	r24, 0x0084
    4fe6:	90 91 85 00 	lds	r25, 0x0085
    4fea:	20 91 7a 07 	lds	r18, 0x077A
    4fee:	30 91 7b 07 	lds	r19, 0x077B
    4ff2:	82 1b       	sub	r24, r18
    4ff4:	93 0b       	sbc	r25, r19
    4ff6:	90 93 66 07 	sts	0x0766, r25
    4ffa:	80 93 65 07 	sts	0x0765, r24
		if (Config.PWM_Sync == GEAR) 
    4ffe:	80 91 03 06 	lds	r24, 0x0603
    5002:	84 30       	cpi	r24, 0x04	; 4
    5004:	19 f4       	brne	.+6      	; 0x500c <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	80 93 6d 07 	sts	0x076D, r24
		}
	}
}
    500c:	9f 91       	pop	r25
    500e:	8f 91       	pop	r24
    5010:	3f 91       	pop	r19
    5012:	2f 91       	pop	r18
    5014:	0f 90       	pop	r0
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	0f 90       	pop	r0
    501a:	1f 90       	pop	r1
    501c:	18 95       	reti

0000501e <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    501e:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    5020:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    5022:	80 91 84 00 	lds	r24, 0x0084
    5026:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    502a:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    502c:	08 95       	ret

0000502e <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    502e:	1f 92       	push	r1
    5030:	0f 92       	push	r0
    5032:	0f b6       	in	r0, 0x3f	; 63
    5034:	0f 92       	push	r0
    5036:	11 24       	eor	r1, r1
    5038:	2f 93       	push	r18
    503a:	3f 93       	push	r19
    503c:	4f 93       	push	r20
    503e:	5f 93       	push	r21
    5040:	6f 93       	push	r22
    5042:	7f 93       	push	r23
    5044:	8f 93       	push	r24
    5046:	9f 93       	push	r25
    5048:	af 93       	push	r26
    504a:	bf 93       	push	r27
    504c:	ef 93       	push	r30
    504e:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    5050:	80 91 87 07 	lds	r24, 0x0787
    5054:	88 23       	and	r24, r24
    5056:	19 f0       	breq	.+6      	; 0x505e <__vector_3+0x30>
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	80 93 88 07 	sts	0x0788, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    505e:	0e 94 0f 28 	call	0x501e	; 0x501e <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    5062:	20 91 02 06 	lds	r18, 0x0602
    5066:	22 23       	and	r18, r18
    5068:	d1 f0       	breq	.+52     	; 0x509e <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    506a:	1a 9b       	sbis	0x03, 2	; 3
    506c:	05 c0       	rjmp	.+10     	; 0x5078 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    506e:	90 93 79 07 	sts	0x0779, r25
    5072:	80 93 78 07 	sts	0x0778, r24
    5076:	86 c0       	rjmp	.+268    	; 0x5184 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5078:	20 91 78 07 	lds	r18, 0x0778
    507c:	30 91 79 07 	lds	r19, 0x0779
    5080:	82 1b       	sub	r24, r18
    5082:	93 0b       	sbc	r25, r19
    5084:	90 93 64 07 	sts	0x0764, r25
    5088:	80 93 63 07 	sts	0x0763, r24
			if (Config.PWM_Sync == RUDDER) 
    508c:	80 91 03 06 	lds	r24, 0x0603
    5090:	83 30       	cpi	r24, 0x03	; 3
    5092:	09 f0       	breq	.+2      	; 0x5096 <__vector_3+0x68>
    5094:	77 c0       	rjmp	.+238    	; 0x5184 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	80 93 6d 07 	sts	0x076D, r24
    509c:	73 c0       	rjmp	.+230    	; 0x5184 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    509e:	1a 99       	sbic	0x03, 2	; 3
    50a0:	71 c0       	rjmp	.+226    	; 0x5184 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    50a2:	20 91 85 07 	lds	r18, 0x0785
    50a6:	30 91 86 07 	lds	r19, 0x0786
    50aa:	ac 01       	movw	r20, r24
    50ac:	42 1b       	sub	r20, r18
    50ae:	53 0b       	sbc	r21, r19
    50b0:	9a 01       	movw	r18, r20
    50b2:	2f 35       	cpi	r18, 0x5F	; 95
    50b4:	3a 41       	sbci	r19, 0x1A	; 26
    50b6:	58 f4       	brcc	.+22     	; 0x50ce <__vector_3+0xa0>
    50b8:	20 91 85 07 	lds	r18, 0x0785
    50bc:	30 91 86 07 	lds	r19, 0x0786
    50c0:	ac 01       	movw	r20, r24
    50c2:	42 1b       	sub	r20, r18
    50c4:	53 0b       	sbc	r21, r19
    50c6:	9a 01       	movw	r18, r20
    50c8:	2e 3e       	cpi	r18, 0xEE	; 238
    50ca:	32 40       	sbci	r19, 0x02	; 2
    50cc:	10 f4       	brcc	.+4      	; 0x50d2 <__vector_3+0xa4>
		{
			ch_num = 0;
    50ce:	10 92 84 07 	sts	0x0784, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    50d2:	90 93 86 07 	sts	0x0786, r25
    50d6:	80 93 85 07 	sts	0x0785, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    50da:	e0 91 84 07 	lds	r30, 0x0784
    50de:	f0 e0       	ldi	r31, 0x00	; 0
    50e0:	e7 54       	subi	r30, 0x47	; 71
    50e2:	fa 4f       	sbci	r31, 0xFA	; 250
    50e4:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    50e6:	20 91 84 07 	lds	r18, 0x0784
    50ea:	22 23       	and	r18, r18
    50ec:	39 f0       	breq	.+14     	; 0x50fc <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    50ee:	a0 91 84 07 	lds	r26, 0x0784
    50f2:	b0 e0       	ldi	r27, 0x00	; 0
    50f4:	a7 54       	subi	r26, 0x47	; 71
    50f6:	ba 4f       	sbci	r27, 0xFA	; 250
    50f8:	2c 91       	ld	r18, X
    50fa:	01 c0       	rjmp	.+2      	; 0x50fe <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    50fc:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    50fe:	30 91 84 07 	lds	r19, 0x0784
    5102:	38 30       	cpi	r19, 0x08	; 8
    5104:	38 f4       	brcc	.+14     	; 0x5114 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    5106:	f0 e0       	ldi	r31, 0x00	; 0
    5108:	ee 0f       	add	r30, r30
    510a:	ff 1f       	adc	r31, r31
    510c:	ee 58       	subi	r30, 0x8E	; 142
    510e:	f8 4f       	sbci	r31, 0xF8	; 248
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    5114:	30 91 84 07 	lds	r19, 0x0784
    5118:	33 23       	and	r19, r19
    511a:	99 f0       	breq	.+38     	; 0x5142 <__vector_3+0x114>
    511c:	30 91 84 07 	lds	r19, 0x0784
    5120:	39 30       	cpi	r19, 0x09	; 9
    5122:	78 f4       	brcc	.+30     	; 0x5142 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	22 0f       	add	r18, r18
    5128:	33 1f       	adc	r19, r19
    512a:	f9 01       	movw	r30, r18
    512c:	ee 58       	subi	r30, 0x8E	; 142
    512e:	f8 4f       	sbci	r31, 0xF8	; 248
    5130:	40 81       	ld	r20, Z
    5132:	51 81       	ldd	r21, Z+1	; 0x01
    5134:	84 1b       	sub	r24, r20
    5136:	95 0b       	sbc	r25, r21
    5138:	f9 01       	movw	r30, r18
    513a:	e3 5a       	subi	r30, 0xA3	; 163
    513c:	f8 4f       	sbci	r31, 0xF8	; 248
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5142:	80 91 84 07 	lds	r24, 0x0784
    5146:	8f 5f       	subi	r24, 0xFF	; 255
    5148:	80 93 84 07 	sts	0x0784, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    514c:	90 91 84 07 	lds	r25, 0x0784
    5150:	80 91 6e 07 	lds	r24, 0x076E
    5154:	89 17       	cp	r24, r25
    5156:	28 f4       	brcc	.+10     	; 0x5162 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5158:	80 91 84 07 	lds	r24, 0x0784
    515c:	80 93 6e 07 	sts	0x076E, r24
    5160:	09 c0       	rjmp	.+18     	; 0x5174 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    5162:	90 91 84 07 	lds	r25, 0x0784
    5166:	80 91 6e 07 	lds	r24, 0x076E
    516a:	98 13       	cpse	r25, r24
    516c:	03 c0       	rjmp	.+6      	; 0x5174 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	80 93 6d 07 	sts	0x076D, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    5174:	80 91 0d 05 	lds	r24, 0x050D
    5178:	88 23       	and	r24, r24
    517a:	21 f0       	breq	.+8      	; 0x5184 <__vector_3+0x156>
		{
			max_chan = 0;
    517c:	10 92 6e 07 	sts	0x076E, r1
			Overdue = false;
    5180:	10 92 0d 05 	sts	0x050D, r1
		}
	}
} // ISR(INT2_vect)
    5184:	ff 91       	pop	r31
    5186:	ef 91       	pop	r30
    5188:	bf 91       	pop	r27
    518a:	af 91       	pop	r26
    518c:	9f 91       	pop	r25
    518e:	8f 91       	pop	r24
    5190:	7f 91       	pop	r23
    5192:	6f 91       	pop	r22
    5194:	5f 91       	pop	r21
    5196:	4f 91       	pop	r20
    5198:	3f 91       	pop	r19
    519a:	2f 91       	pop	r18
    519c:	0f 90       	pop	r0
    519e:	0f be       	out	0x3f, r0	; 63
    51a0:	0f 90       	pop	r0
    51a2:	1f 90       	pop	r1
    51a4:	18 95       	reti

000051a6 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    51a6:	1f 92       	push	r1
    51a8:	0f 92       	push	r0
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	0f 92       	push	r0
    51ae:	11 24       	eor	r1, r1
    51b0:	2f 93       	push	r18
    51b2:	3f 93       	push	r19
    51b4:	4f 93       	push	r20
    51b6:	5f 93       	push	r21
    51b8:	6f 93       	push	r22
    51ba:	7f 93       	push	r23
    51bc:	8f 93       	push	r24
    51be:	9f 93       	push	r25
    51c0:	af 93       	push	r26
    51c2:	bf 93       	push	r27
    51c4:	cf 93       	push	r28
    51c6:	ef 93       	push	r30
    51c8:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    51ca:	80 91 87 07 	lds	r24, 0x0787
    51ce:	88 23       	and	r24, r24
    51d0:	19 f0       	breq	.+6      	; 0x51d8 <__vector_20+0x32>
    51d2:	81 e0       	ldi	r24, 0x01	; 1
    51d4:	80 93 88 07 	sts	0x0788, r24

	// Read byte first
	temp = UDR0;
    51d8:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    51dc:	0e 94 0f 28 	call	0x501e	; 0x501e <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    51e0:	40 91 85 07 	lds	r20, 0x0785
    51e4:	50 91 86 07 	lds	r21, 0x0786
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    51e8:	40 91 85 07 	lds	r20, 0x0785
    51ec:	50 91 86 07 	lds	r21, 0x0786
    51f0:	9c 01       	movw	r18, r24
    51f2:	24 1b       	sub	r18, r20
    51f4:	35 0b       	sbc	r19, r21
    51f6:	a9 01       	movw	r20, r18
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    51f8:	4d 34       	cpi	r20, 0x4D	; 77
    51fa:	3d e1       	ldi	r19, 0x1D	; 29
    51fc:	53 07       	cpc	r21, r19
    51fe:	90 f0       	brcs	.+36     	; 0x5224 <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    5200:	10 92 5c 07 	sts	0x075C, r1
		bytecount = 0;
    5204:	10 92 6f 07 	sts	0x076F, r1
		ch_num = 0;
    5208:	10 92 84 07 	sts	0x0784, r1
		checksum = 0;
    520c:	10 92 8a 07 	sts	0x078A, r1
    5210:	10 92 89 07 	sts	0x0789, r1
		chanmask16 = 0;
    5214:	10 92 83 07 	sts	0x0783, r1
    5218:	10 92 82 07 	sts	0x0782, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    521c:	50 93 8c 07 	sts	0x078C, r21
    5220:	40 93 8b 07 	sts	0x078B, r20
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5224:	90 93 86 07 	sts	0x0786, r25
    5228:	80 93 85 07 	sts	0x0785, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    522c:	80 91 5c 07 	lds	r24, 0x075C
    5230:	86 32       	cpi	r24, 0x26	; 38
    5232:	50 f4       	brcc	.+20     	; 0x5248 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;		
    5234:	e0 91 5c 07 	lds	r30, 0x075C
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	8e 0f       	add	r24, r30
    523c:	80 93 5c 07 	sts	0x075C, r24
    5240:	f0 e0       	ldi	r31, 0x00	; 0
    5242:	e4 5c       	subi	r30, 0xC4	; 196
    5244:	fa 4f       	sbci	r31, 0xFA	; 250
    5246:	c0 83       	st	Z, r28
	//*  ^^^^   ^^^^   ^^^^^^   ^^^^^   ^^^^^   ^^^^
	//*  Flags  dBm     Mask    CH 2    CH 4    ChkSum
	//*
	//************************************************************

	if (Config.RxMode == XTREME)
    5248:	80 91 02 06 	lds	r24, 0x0602
    524c:	84 30       	cpi	r24, 0x04	; 4
    524e:	09 f0       	breq	.+2      	; 0x5252 <__vector_20+0xac>
    5250:	b3 c0       	rjmp	.+358    	; 0x53b8 <__vector_20+0x212>
	{
		// Look at flag byte to see if the data is meant for us
		if (bytecount == 0)
    5252:	80 91 6f 07 	lds	r24, 0x076F
    5256:	81 11       	cpse	r24, r1
    5258:	0d c0       	rjmp	.+26     	; 0x5274 <__vector_20+0xce>
		{
			// Check top 3 bits for channel bank
			// Trash checksum if not clear
			if (temp & 0xE0)
    525a:	8c 2f       	mov	r24, r28
    525c:	80 7e       	andi	r24, 0xE0	; 224
    525e:	51 f0       	breq	.+20     	; 0x5274 <__vector_20+0xce>
			{
				checksum +=	0x55;
    5260:	80 91 89 07 	lds	r24, 0x0789
    5264:	90 91 8a 07 	lds	r25, 0x078A
    5268:	8b 5a       	subi	r24, 0xAB	; 171
    526a:	9f 4f       	sbci	r25, 0xFF	; 255
    526c:	90 93 8a 07 	sts	0x078A, r25
    5270:	80 93 89 07 	sts	0x0789, r24
			}
		}

		// Get MSB of mask byte
		if (bytecount == 2)
    5274:	80 91 6f 07 	lds	r24, 0x076F
    5278:	2c 2f       	mov	r18, r28
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	82 30       	cpi	r24, 0x02	; 2
    527e:	51 f4       	brne	.+20     	; 0x5294 <__vector_20+0xee>
		{
			chanmask16 = 0;
    5280:	10 92 83 07 	sts	0x0783, r1
    5284:	10 92 82 07 	sts	0x0782, r1
			chanmask16 = temp << 8;		// High byte of Mask
    5288:	92 2f       	mov	r25, r18
    528a:	88 27       	eor	r24, r24
    528c:	90 93 83 07 	sts	0x0783, r25
    5290:	80 93 82 07 	sts	0x0782, r24
		}

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
    5294:	80 91 6f 07 	lds	r24, 0x076F
    5298:	83 30       	cpi	r24, 0x03	; 3
    529a:	b9 f0       	breq	.+46     	; 0x52ca <__vector_20+0x124>
				temp16 &= temp16 - 1;
			}
		}

		// Add up checksum up until final packet
		if (bytecount < ((ch_num << 1) + 4))
    529c:	80 91 84 07 	lds	r24, 0x0784
    52a0:	40 91 6f 07 	lds	r20, 0x076F
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	88 0f       	add	r24, r24
    52a8:	99 1f       	adc	r25, r25
    52aa:	03 96       	adiw	r24, 0x03	; 3
    52ac:	50 e0       	ldi	r21, 0x00	; 0
    52ae:	84 17       	cp	r24, r20
    52b0:	95 07       	cpc	r25, r21
    52b2:	44 f1       	brlt	.+80     	; 0x5304 <__vector_20+0x15e>
		{
			checksum +=	temp;
    52b4:	80 91 89 07 	lds	r24, 0x0789
    52b8:	90 91 8a 07 	lds	r25, 0x078A
    52bc:	82 0f       	add	r24, r18
    52be:	93 1f       	adc	r25, r19
    52c0:	90 93 8a 07 	sts	0x078A, r25
    52c4:	80 93 89 07 	sts	0x0789, r24
    52c8:	7b c1       	rjmp	.+758    	; 0x55c0 <__vector_20+0x41a>

		// Combine with LSB of mask byte
		// Work out how many channels there are supposed to be
		if (bytecount == 3)
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
    52ca:	80 91 82 07 	lds	r24, 0x0782
    52ce:	90 91 83 07 	lds	r25, 0x0783
    52d2:	82 0f       	add	r24, r18
    52d4:	93 1f       	adc	r25, r19
    52d6:	90 93 83 07 	sts	0x0783, r25
    52da:	80 93 82 07 	sts	0x0782, r24
			temp16 = chanmask16;			// Need to keep a copy od chanmask16
    52de:	80 91 82 07 	lds	r24, 0x0782
    52e2:	90 91 83 07 	lds	r25, 0x0783

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    52e6:	10 92 84 07 	sts	0x0784, r1
    52ea:	00 97       	sbiw	r24, 0x00	; 0
    52ec:	b9 f2       	breq	.-82     	; 0x529c <__vector_20+0xf6>
			{
				temp16 &= temp16 - 1;
    52ee:	ac 01       	movw	r20, r24
    52f0:	41 50       	subi	r20, 0x01	; 1
    52f2:	51 09       	sbc	r21, r1
    52f4:	84 23       	and	r24, r20
    52f6:	95 23       	and	r25, r21
		{
			chanmask16 += (uint16_t)temp;	// Low byte of Mask
			temp16 = chanmask16;			// Need to keep a copy od chanmask16

			// Count bits set (number of active channels)				 
			for (ch_num = 0; temp16; ch_num++)
    52f8:	40 91 84 07 	lds	r20, 0x0784
    52fc:	4f 5f       	subi	r20, 0xFF	; 255
    52fe:	40 93 84 07 	sts	0x0784, r20
    5302:	f3 cf       	rjmp	.-26     	; 0x52ea <__vector_20+0x144>
	
		// Process data when all packets received
		else
		{
			// Check checksum 
			checksum &= 0xff;
    5304:	80 91 89 07 	lds	r24, 0x0789
    5308:	90 91 8a 07 	lds	r25, 0x078A
    530c:	99 27       	eor	r25, r25
    530e:	90 93 8a 07 	sts	0x078A, r25
    5312:	80 93 89 07 	sts	0x0789, r24

			// Ignore packet if checksum wrong
			if (checksum != temp) // temp holds the transmitted checksum byte
    5316:	80 91 89 07 	lds	r24, 0x0789
    531a:	90 91 8a 07 	lds	r25, 0x078A
    531e:	82 17       	cp	r24, r18
    5320:	93 07       	cpc	r25, r19
    5322:	49 f0       	breq	.+18     	; 0x5336 <__vector_20+0x190>
			{
				Interrupted = false;
    5324:	10 92 6d 07 	sts	0x076D, r1
				ch_num = 0;
    5328:	10 92 84 07 	sts	0x0784, r1
				checksum = 0;
    532c:	10 92 8a 07 	sts	0x078A, r1
    5330:	10 92 89 07 	sts	0x0789, r1
    5334:	45 c1       	rjmp	.+650    	; 0x55c0 <__vector_20+0x41a>
			}
			else
			{
				// RC sync established
				Interrupted = true;	
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	80 93 6d 07 	sts	0x076D, r24
    533c:	80 e0       	ldi	r24, 0x00	; 0
    533e:	90 e0       	ldi	r25, 0x00	; 0

				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5
    5340:	a4 e0       	ldi	r26, 0x04	; 4
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    5342:	61 e0       	ldi	r22, 0x01	; 1
    5344:	70 e0       	ldi	r23, 0x00	; 0
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    5346:	ba e0       	ldi	r27, 0x0A	; 10
				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
    5348:	40 91 82 07 	lds	r20, 0x0782
    534c:	50 91 83 07 	lds	r21, 0x0783
    5350:	9b 01       	movw	r18, r22
    5352:	08 2e       	mov	r0, r24
    5354:	02 c0       	rjmp	.+4      	; 0x535a <__vector_20+0x1b4>
    5356:	22 0f       	add	r18, r18
    5358:	33 1f       	adc	r19, r19
    535a:	0a 94       	dec	r0
    535c:	e2 f7       	brpl	.-8      	; 0x5356 <__vector_20+0x1b0>
    535e:	24 23       	and	r18, r20
    5360:	35 23       	and	r19, r21
    5362:	23 2b       	or	r18, r19
    5364:	21 f1       	breq	.+72     	; 0x53ae <__vector_20+0x208>
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    5366:	ea 2f       	mov	r30, r26
    5368:	f0 e0       	ldi	r31, 0x00	; 0
    536a:	e4 5c       	subi	r30, 0xC4	; 196
    536c:	fa 4f       	sbci	r31, 0xFA	; 250
    536e:	40 81       	ld	r20, Z
    5370:	21 81       	ldd	r18, Z+1	; 0x01

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
    5372:	88 30       	cpi	r24, 0x08	; 8
    5374:	c8 f4       	brcc	.+50     	; 0x53a8 <__vector_20+0x202>
    5376:	fc 01       	movw	r30, r24
    5378:	e7 54       	subi	r30, 0x47	; 71
    537a:	fa 4f       	sbci	r31, 0xFA	; 250
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    537c:	e1 81       	ldd	r30, Z+1	; 0x01
    537e:	f0 e0       	ldi	r31, 0x00	; 0
				{
					// If there is a bit set, allocate channel data for it
					if (chanmask16 & (1 << j))
					{
						// Reconstruct word
						temp16 = (sBuffer[sindex] << 8) + sBuffer[sindex + 1];
    5380:	50 e0       	ldi	r21, 0x00	; 0
    5382:	54 2f       	mov	r21, r20
    5384:	44 27       	eor	r20, r20
    5386:	42 0f       	add	r20, r18
    5388:	51 1d       	adc	r21, r1

						// Expand to OpenAero2 units if a valid channel
						if (j < MAX_RC_CHANNELS)
						{
							RxChannel[Config.ChannelOrder[j]] = ((temp16 * 10) >> 2);
    538a:	b4 9f       	mul	r27, r20
    538c:	90 01       	movw	r18, r0
    538e:	b5 9f       	mul	r27, r21
    5390:	30 0d       	add	r19, r0
    5392:	11 24       	eor	r1, r1
    5394:	36 95       	lsr	r19
    5396:	27 95       	ror	r18
    5398:	36 95       	lsr	r19
    539a:	27 95       	ror	r18
    539c:	ee 0f       	add	r30, r30
    539e:	ff 1f       	adc	r31, r31
    53a0:	e3 5a       	subi	r30, 0xA3	; 163
    53a2:	f8 4f       	sbci	r31, 0xF8	; 248
    53a4:	31 83       	std	Z+1, r19	; 0x01
    53a6:	20 83       	st	Z, r18
						} 		

						// Within the bounds of the buffer
						if (sindex < SBUFFER_SIZE)
    53a8:	a6 32       	cpi	r26, 0x26	; 38
    53aa:	08 f4       	brcc	.+2      	; 0x53ae <__vector_20+0x208>
						{
							sindex += 2;
    53ac:	ae 5f       	subi	r26, 0xFE	; 254
    53ae:	01 96       	adiw	r24, 0x01	; 1
				// Set start of channel data per format
				sindex = 4; // Channel data from byte 5

				// Work out which channel the data is intended for from the mask bit position
				// Channels can be anywhere in the lower 16 channels of the Xtreme format
				for (j = 0; j < 16; j++)
    53b0:	80 31       	cpi	r24, 0x10	; 16
    53b2:	91 05       	cpc	r25, r1
    53b4:	49 f6       	brne	.-110    	; 0x5348 <__vector_20+0x1a2>
    53b6:	04 c1       	rjmp	.+520    	; 0x55c0 <__vector_20+0x41a>
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    53b8:	82 30       	cpi	r24, 0x02	; 2
    53ba:	09 f0       	breq	.+2      	; 0x53be <__vector_20+0x218>
    53bc:	90 c0       	rjmp	.+288    	; 0x54de <__vector_20+0x338>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    53be:	80 91 6f 07 	lds	r24, 0x076F
    53c2:	88 31       	cpi	r24, 0x18	; 24
    53c4:	09 f0       	breq	.+2      	; 0x53c8 <__vector_20+0x222>
    53c6:	fc c0       	rjmp	.+504    	; 0x55c0 <__vector_20+0x41a>
    53c8:	cc 23       	and	r28, r28
    53ca:	59 f0       	breq	.+22     	; 0x53e2 <__vector_20+0x23c>
    53cc:	81 e0       	ldi	r24, 0x01	; 1
    53ce:	cf 3c       	cpi	r28, 0xCF	; 207
    53d0:	08 f4       	brcc	.+2      	; 0x53d4 <__vector_20+0x22e>
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	91 e3       	ldi	r25, 0x31	; 49
    53d6:	89 9f       	mul	r24, r25
    53d8:	c0 0d       	add	r28, r0
    53da:	11 24       	eor	r1, r1
    53dc:	c4 30       	cpi	r28, 0x04	; 4
    53de:	09 f0       	breq	.+2      	; 0x53e2 <__vector_20+0x23c>
    53e0:	ef c0       	rjmp	.+478    	; 0x55c0 <__vector_20+0x41a>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    53e2:	80 91 53 05 	lds	r24, 0x0553
    53e6:	85 fd       	sbrc	r24, 5
    53e8:	eb c0       	rjmp	.+470    	; 0x55c0 <__vector_20+0x41a>
			{
				// RC sync established
				Interrupted = true;
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	80 93 6d 07 	sts	0x076D, r24
    53f0:	80 e0       	ldi	r24, 0x00	; 0
    53f2:	90 e0       	ldi	r25, 0x00	; 0
				//LED1 = ~LED1; //debug

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    53f4:	fc 01       	movw	r30, r24
    53f6:	ee 0f       	add	r30, r30
    53f8:	ff 1f       	adc	r31, r31
    53fa:	e3 5a       	subi	r30, 0xA3	; 163
    53fc:	f8 4f       	sbci	r31, 0xF8	; 248
    53fe:	11 82       	std	Z+1, r1	; 0x01
    5400:	10 82       	st	Z, r1
    5402:	01 96       	adiw	r24, 0x01	; 1
				Interrupted = true;
				
				//LED1 = ~LED1; //debug

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5404:	88 30       	cpi	r24, 0x08	; 8
    5406:	91 05       	cpc	r25, r1
    5408:	a9 f7       	brne	.-22     	; 0x53f4 <__vector_20+0x24e>
    540a:	a8 e5       	ldi	r26, 0x58	; 88
    540c:	70 e0       	ldi	r23, 0x00	; 0
    540e:	c0 e0       	ldi	r28, 0x00	; 0
    5410:	60 e0       	ldi	r22, 0x00	; 0
    5412:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5414:	21 e0       	ldi	r18, 0x01	; 1
    5416:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    5418:	eb 2f       	mov	r30, r27
    541a:	f0 e0       	ldi	r31, 0x00	; 0
    541c:	e4 5c       	subi	r30, 0xC4	; 196
    541e:	fa 4f       	sbci	r31, 0xFA	; 250
    5420:	80 81       	ld	r24, Z
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	06 2e       	mov	r0, r22
    5426:	02 c0       	rjmp	.+4      	; 0x542c <__vector_20+0x286>
    5428:	95 95       	asr	r25
    542a:	87 95       	ror	r24
    542c:	0a 94       	dec	r0
    542e:	e2 f7       	brpl	.-8      	; 0x5428 <__vector_20+0x282>
    5430:	80 ff       	sbrs	r24, 0
    5432:	17 c0       	rjmp	.+46     	; 0x5462 <__vector_20+0x2bc>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5434:	ec 2f       	mov	r30, r28
    5436:	f0 e0       	ldi	r31, 0x00	; 0
    5438:	e7 54       	subi	r30, 0x47	; 71
    543a:	fa 4f       	sbci	r31, 0xFA	; 250
    543c:	e1 81       	ldd	r30, Z+1	; 0x01
    543e:	f0 e0       	ldi	r31, 0x00	; 0
    5440:	ee 0f       	add	r30, r30
    5442:	ff 1f       	adc	r31, r31
    5444:	e3 5a       	subi	r30, 0xA3	; 163
    5446:	f8 4f       	sbci	r31, 0xF8	; 248
    5448:	80 81       	ld	r24, Z
    544a:	91 81       	ldd	r25, Z+1	; 0x01
    544c:	a9 01       	movw	r20, r18
    544e:	07 2e       	mov	r0, r23
    5450:	02 c0       	rjmp	.+4      	; 0x5456 <__vector_20+0x2b0>
    5452:	44 0f       	add	r20, r20
    5454:	55 1f       	adc	r21, r21
    5456:	0a 94       	dec	r0
    5458:	e2 f7       	brpl	.-8      	; 0x5452 <__vector_20+0x2ac>
    545a:	84 2b       	or	r24, r20
    545c:	95 2b       	or	r25, r21
    545e:	91 83       	std	Z+1, r25	; 0x01
    5460:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    5462:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    5464:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    5466:	68 30       	cpi	r22, 0x08	; 8
    5468:	11 f4       	brne	.+4      	; 0x546e <__vector_20+0x2c8>
                    {
                        chan_mask =0;
                        sindex++;
    546a:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    546c:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    546e:	7b 30       	cpi	r23, 0x0B	; 11
    5470:	11 f4       	brne	.+4      	; 0x5476 <__vector_20+0x2d0>
                    {
                        data_mask =0;
                        chan_shift++;
    5472:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5474:	70 e0       	ldi	r23, 0x00	; 0
    5476:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    5478:	79 f6       	brne	.-98     	; 0x5418 <__vector_20+0x272>
    547a:	40 e0       	ldi	r20, 0x00	; 0
    547c:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    547e:	fa 01       	movw	r30, r20
    5480:	ee 0f       	add	r30, r30
    5482:	ff 1f       	adc	r31, r31
    5484:	e3 5a       	subi	r30, 0xA3	; 163
    5486:	f8 4f       	sbci	r31, 0xF8	; 248
    5488:	20 81       	ld	r18, Z
    548a:	31 81       	ldd	r19, Z+1	; 0x01
    548c:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    548e:	c9 01       	movw	r24, r18
    5490:	95 95       	asr	r25
    5492:	87 95       	ror	r24
    5494:	95 95       	asr	r25
    5496:	87 95       	ror	r24
    5498:	82 0f       	add	r24, r18
    549a:	93 1f       	adc	r25, r19
    549c:	b9 01       	movw	r22, r18
    549e:	a3 e0       	ldi	r26, 0x03	; 3
    54a0:	75 95       	asr	r23
    54a2:	67 95       	ror	r22
    54a4:	aa 95       	dec	r26
    54a6:	e1 f7       	brne	.-8      	; 0x54a0 <__vector_20+0x2fa>
    54a8:	86 0f       	add	r24, r22
    54aa:	97 1f       	adc	r25, r23
    54ac:	b9 01       	movw	r22, r18
    54ae:	b4 e0       	ldi	r27, 0x04	; 4
    54b0:	75 95       	asr	r23
    54b2:	67 95       	ror	r22
    54b4:	ba 95       	dec	r27
    54b6:	e1 f7       	brne	.-8      	; 0x54b0 <__vector_20+0x30a>
    54b8:	86 0f       	add	r24, r22
    54ba:	97 1f       	adc	r25, r23
    54bc:	c5 e0       	ldi	r28, 0x05	; 5
    54be:	35 95       	asr	r19
    54c0:	27 95       	ror	r18
    54c2:	ca 95       	dec	r28
    54c4:	e1 f7       	brne	.-8      	; 0x54be <__vector_20+0x318>
    54c6:	82 0f       	add	r24, r18
    54c8:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    54ca:	8a 55       	subi	r24, 0x5A	; 90
    54cc:	91 4f       	sbci	r25, 0xF1	; 241
    54ce:	91 83       	std	Z+1, r25	; 0x01
    54d0:	80 83       	st	Z, r24
    54d2:	4f 5f       	subi	r20, 0xFF	; 255
    54d4:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    54d6:	48 30       	cpi	r20, 0x08	; 8
    54d8:	51 05       	cpc	r21, r1
    54da:	89 f6       	brne	.-94     	; 0x547e <__vector_20+0x2d8>
    54dc:	71 c0       	rjmp	.+226    	; 0x55c0 <__vector_20+0x41a>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    54de:	83 30       	cpi	r24, 0x03	; 3
    54e0:	09 f0       	breq	.+2      	; 0x54e4 <__vector_20+0x33e>
    54e2:	6e c0       	rjmp	.+220    	; 0x55c0 <__vector_20+0x41a>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    54e4:	80 91 6f 07 	lds	r24, 0x076F
    54e8:	8f 30       	cpi	r24, 0x0F	; 15
    54ea:	08 f4       	brcc	.+2      	; 0x54ee <__vector_20+0x348>
    54ec:	69 c0       	rjmp	.+210    	; 0x55c0 <__vector_20+0x41a>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    54ee:	c0 93 4b 05 	sts	0x054B, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    54f2:	80 91 3d 05 	lds	r24, 0x053D
    54f6:	84 ff       	sbrs	r24, 4
    54f8:	04 c0       	rjmp	.+8      	; 0x5502 <__vector_20+0x35c>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    54fa:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    54fc:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    54fe:	78 e7       	ldi	r23, 0x78	; 120
    5500:	03 c0       	rjmp	.+6      	; 0x5508 <__vector_20+0x362>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    5502:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    5504:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    5506:	7c e3       	ldi	r23, 0x3C	; 60
    5508:	ef e3       	ldi	r30, 0x3F	; 63
    550a:	f5 e0       	ldi	r31, 0x05	; 5
    550c:	df 01       	movw	r26, r30
    550e:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    5510:	2c 91       	ld	r18, X
    5512:	82 2f       	mov	r24, r18
    5514:	87 23       	and	r24, r23
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	06 2e       	mov	r0, r22
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <__vector_20+0x37a>
    551c:	95 95       	asr	r25
    551e:	87 95       	ror	r24
    5520:	0a 94       	dec	r0
    5522:	e2 f7       	brpl	.-8      	; 0x551c <__vector_20+0x376>
    5524:	80 93 84 07 	sts	0x0784, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5528:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    552a:	90 91 84 07 	lds	r25, 0x0784
    552e:	98 30       	cpi	r25, 0x08	; 8
    5530:	f0 f5       	brcc	.+124    	; 0x55ae <__vector_20+0x408>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5532:	2c 23       	and	r18, r28
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	32 2f       	mov	r19, r18
    5538:	22 27       	eor	r18, r18
    553a:	28 0f       	add	r18, r24
    553c:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    553e:	63 30       	cpi	r22, 0x03	; 3
    5540:	11 f4       	brne	.+4      	; 0x5546 <__vector_20+0x3a0>
					{
						itemp16 = temp16 - 1024;
    5542:	34 50       	subi	r19, 0x04	; 4
    5544:	01 c0       	rjmp	.+2      	; 0x5548 <__vector_20+0x3a2>
					}
					else
					{
						itemp16 = temp16 - 512;	
    5546:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    5548:	c9 01       	movw	r24, r18
    554a:	88 0f       	add	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	a9 01       	movw	r20, r18
    5550:	55 95       	asr	r21
    5552:	47 95       	ror	r20
    5554:	84 0f       	add	r24, r20
    5556:	95 1f       	adc	r25, r21
    5558:	a9 01       	movw	r20, r18
    555a:	55 95       	asr	r21
    555c:	47 95       	ror	r20
    555e:	55 95       	asr	r21
    5560:	47 95       	ror	r20
    5562:	84 0f       	add	r24, r20
    5564:	95 1f       	adc	r25, r21
    5566:	a9 01       	movw	r20, r18
    5568:	a3 e0       	ldi	r26, 0x03	; 3
    556a:	55 95       	asr	r21
    556c:	47 95       	ror	r20
    556e:	aa 95       	dec	r26
    5570:	e1 f7       	brne	.-8      	; 0x556a <__vector_20+0x3c4>
    5572:	84 0f       	add	r24, r20
    5574:	95 1f       	adc	r25, r21
    5576:	b4 e0       	ldi	r27, 0x04	; 4
    5578:	35 95       	asr	r19
    557a:	27 95       	ror	r18
    557c:	ba 95       	dec	r27
    557e:	e1 f7       	brne	.-8      	; 0x5578 <__vector_20+0x3d2>
    5580:	82 0f       	add	r24, r18
    5582:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    5584:	63 30       	cpi	r22, 0x03	; 3
    5586:	11 f4       	brne	.+4      	; 0x558c <__vector_20+0x3e6>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5588:	95 95       	asr	r25
    558a:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    558c:	a0 91 84 07 	lds	r26, 0x0784
    5590:	b0 e0       	ldi	r27, 0x00	; 0
    5592:	a7 54       	subi	r26, 0x47	; 71
    5594:	ba 4f       	sbci	r27, 0xFA	; 250
    5596:	11 96       	adiw	r26, 0x01	; 1
    5598:	ac 91       	ld	r26, X
    559a:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    559c:	8a 55       	subi	r24, 0x5A	; 90
    559e:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    55a0:	aa 0f       	add	r26, r26
    55a2:	bb 1f       	adc	r27, r27
    55a4:	a3 5a       	subi	r26, 0xA3	; 163
    55a6:	b8 4f       	sbci	r27, 0xF8	; 248
    55a8:	11 96       	adiw	r26, 0x01	; 1
    55aa:	9c 93       	st	X, r25
    55ac:	8e 93       	st	-X, r24
    55ae:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    55b0:	25 e0       	ldi	r18, 0x05	; 5
    55b2:	ed 34       	cpi	r30, 0x4D	; 77
    55b4:	f2 07       	cpc	r31, r18
    55b6:	09 f0       	breq	.+2      	; 0x55ba <__vector_20+0x414>
    55b8:	a9 cf       	rjmp	.-174    	; 0x550c <__vector_20+0x366>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	80 93 6d 07 	sts	0x076D, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    55c0:	80 91 6f 07 	lds	r24, 0x076F
    55c4:	8f 5f       	subi	r24, 0xFF	; 255
    55c6:	80 93 6f 07 	sts	0x076F, r24
}
    55ca:	ff 91       	pop	r31
    55cc:	ef 91       	pop	r30
    55ce:	cf 91       	pop	r28
    55d0:	bf 91       	pop	r27
    55d2:	af 91       	pop	r26
    55d4:	9f 91       	pop	r25
    55d6:	8f 91       	pop	r24
    55d8:	7f 91       	pop	r23
    55da:	6f 91       	pop	r22
    55dc:	5f 91       	pop	r21
    55de:	4f 91       	pop	r20
    55e0:	3f 91       	pop	r19
    55e2:	2f 91       	pop	r18
    55e4:	0f 90       	pop	r0
    55e6:	0f be       	out	0x3f, r0	; 63
    55e8:	0f 90       	pop	r0
    55ea:	1f 90       	pop	r1
    55ec:	18 95       	reti

000055ee <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    55ee:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    55f0:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    55f4:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    55f8:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    55fa:	e1 ec       	ldi	r30, 0xC1	; 193
    55fc:	f0 e0       	ldi	r31, 0x00	; 0
    55fe:	80 81       	ld	r24, Z
    5600:	8f 7e       	andi	r24, 0xEF	; 239
    5602:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5604:	80 81       	ld	r24, Z
    5606:	8f 77       	andi	r24, 0x7F	; 127
    5608:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    560a:	8f e0       	ldi	r24, 0x0F	; 15
    560c:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    560e:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5610:	78 94       	sei
    5612:	08 95       	ret

00005614 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5614:	f8 94       	cli
	
	switch (Config.RxMode)
    5616:	80 91 02 06 	lds	r24, 0x0602
    561a:	81 30       	cpi	r24, 0x01	; 1
    561c:	c9 f0       	breq	.+50     	; 0x5650 <init_int+0x3c>
    561e:	44 f4       	brge	.+16     	; 0x5630 <init_int+0x1c>
    5620:	81 11       	cpse	r24, r1
    5622:	2c c0       	rjmp	.+88     	; 0x567c <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5624:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5628:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    562c:	84 e0       	ldi	r24, 0x04	; 4
    562e:	1b c0       	rjmp	.+54     	; 0x5666 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5630:	85 30       	cpi	r24, 0x05	; 5
    5632:	24 f5       	brge	.+72     	; 0x567c <init_int+0x68>

		case XTREME:
		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5634:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5638:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    563c:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    563e:	80 91 c1 00 	lds	r24, 0x00C1
    5642:	80 68       	ori	r24, 0x80	; 128
    5644:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5648:	80 91 c1 00 	lds	r24, 0x00C1
    564c:	80 61       	ori	r24, 0x10	; 16
    564e:	14 c0       	rjmp	.+40     	; 0x5678 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5650:	80 91 6c 00 	lds	r24, 0x006C
    5654:	81 60       	ori	r24, 0x01	; 1
    5656:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    565a:	80 91 73 00 	lds	r24, 0x0073
    565e:	81 60       	ori	r24, 0x01	; 1
    5660:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5664:	87 e0       	ldi	r24, 0x07	; 7
    5666:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5668:	80 91 c1 00 	lds	r24, 0x00C1
    566c:	8f 77       	andi	r24, 0x7F	; 127
    566e:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5672:	80 91 c1 00 	lds	r24, 0x00C1
    5676:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5678:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    567c:	8f e0       	ldi	r24, 0x0F	; 15
    567e:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5680:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5682:	78 94       	sei
    5684:	08 95       	ret

00005686 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5686:	81 11       	cpse	r24, r1
    5688:	23 c0       	rjmp	.+70     	; 0x56d0 <print_menu_frame+0x4a>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    568a:	29 e3       	ldi	r18, 0x39	; 57
    568c:	30 e0       	ldi	r19, 0x00	; 0
    568e:	40 e0       	ldi	r20, 0x00	; 0
    5690:	50 e0       	ldi	r21, 0x00	; 0
    5692:	66 e0       	ldi	r22, 0x06	; 6
    5694:	71 e0       	ldi	r23, 0x01	; 1
    5696:	8c e0       	ldi	r24, 0x0C	; 12
    5698:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    569c:	2b e3       	ldi	r18, 0x3B	; 59
    569e:	30 e0       	ldi	r19, 0x00	; 0
    56a0:	46 e2       	ldi	r20, 0x26	; 38
    56a2:	50 e0       	ldi	r21, 0x00	; 0
    56a4:	66 e0       	ldi	r22, 0x06	; 6
    56a6:	71 e0       	ldi	r23, 0x01	; 1
    56a8:	8a e0       	ldi	r24, 0x0A	; 10
    56aa:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    56ae:	2b e3       	ldi	r18, 0x3B	; 59
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	40 e5       	ldi	r20, 0x50	; 80
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	66 e0       	ldi	r22, 0x06	; 6
    56b8:	71 e0       	ldi	r23, 0x01	; 1
    56ba:	89 e0       	ldi	r24, 0x09	; 9
    56bc:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); 	// Right
    56c0:	29 e3       	ldi	r18, 0x39	; 57
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	48 e7       	ldi	r20, 0x78	; 120
    56c6:	50 e0       	ldi	r21, 0x00	; 0
    56c8:	66 e0       	ldi	r22, 0x06	; 6
    56ca:	71 e0       	ldi	r23, 0x01	; 1
    56cc:	8b e0       	ldi	r24, 0x0B	; 11
    56ce:	22 c0       	rjmp	.+68     	; 0x5714 <print_menu_frame+0x8e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    56d0:	26 e3       	ldi	r18, 0x36	; 54
    56d2:	30 e0       	ldi	r19, 0x00	; 0
    56d4:	40 e0       	ldi	r20, 0x00	; 0
    56d6:	50 e0       	ldi	r21, 0x00	; 0
    56d8:	6e e1       	ldi	r22, 0x1E	; 30
    56da:	7a e0       	ldi	r23, 0x0A	; 10
    56dc:	80 e1       	ldi	r24, 0x10	; 16
    56de:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    56e2:	2b e3       	ldi	r18, 0x3B	; 59
    56e4:	30 e0       	ldi	r19, 0x00	; 0
    56e6:	46 e2       	ldi	r20, 0x26	; 38
    56e8:	50 e0       	ldi	r21, 0x00	; 0
    56ea:	66 e0       	ldi	r22, 0x06	; 6
    56ec:	71 e0       	ldi	r23, 0x01	; 1
    56ee:	8a e0       	ldi	r24, 0x0A	; 10
    56f0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    56f4:	2b e3       	ldi	r18, 0x3B	; 59
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	40 e5       	ldi	r20, 0x50	; 80
    56fa:	50 e0       	ldi	r21, 0x00	; 0
    56fc:	66 e0       	ldi	r22, 0x06	; 6
    56fe:	71 e0       	ldi	r23, 0x01	; 1
    5700:	89 e0       	ldi	r24, 0x09	; 9
    5702:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5706:	26 e3       	ldi	r18, 0x36	; 54
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	47 e6       	ldi	r20, 0x67	; 103
    570c:	50 e0       	ldi	r21, 0x00	; 0
    570e:	6e e1       	ldi	r22, 0x1E	; 30
    5710:	7a e0       	ldi	r23, 0x0A	; 10
    5712:	81 e1       	ldi	r24, 0x11	; 17
    5714:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5718:	80 e0       	ldi	r24, 0x00	; 0
    571a:	91 e0       	ldi	r25, 0x01	; 1
    571c:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <write_buffer>

00005720 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	2a 97       	sbiw	r28, 0x0a	; 10
    572a:	0f b6       	in	r0, 0x3f	; 63
    572c:	f8 94       	cli
    572e:	de bf       	out	0x3e, r29	; 62
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5734:	25 e0       	ldi	r18, 0x05	; 5
    5736:	62 9f       	mul	r22, r18
    5738:	80 0d       	add	r24, r0
    573a:	91 1d       	adc	r25, r1
    573c:	11 24       	eor	r1, r1
    573e:	bc 01       	movw	r22, r24
    5740:	45 e0       	ldi	r20, 0x05	; 5
    5742:	50 e0       	ldi	r21, 0x00	; 0
    5744:	ce 01       	movw	r24, r28
    5746:	06 96       	adiw	r24, 0x06	; 6
    5748:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <memcpy_P>
	return (range);
    574c:	85 e0       	ldi	r24, 0x05	; 5
    574e:	fe 01       	movw	r30, r28
    5750:	36 96       	adiw	r30, 0x06	; 6
    5752:	de 01       	movw	r26, r28
    5754:	11 96       	adiw	r26, 0x01	; 1
    5756:	01 90       	ld	r0, Z+
    5758:	0d 92       	st	X+, r0
    575a:	8a 95       	dec	r24
    575c:	e1 f7       	brne	.-8      	; 0x5756 <get_menu_range+0x36>
    575e:	29 81       	ldd	r18, Y+1	; 0x01
    5760:	3a 81       	ldd	r19, Y+2	; 0x02
    5762:	4b 81       	ldd	r20, Y+3	; 0x03
    5764:	5c 81       	ldd	r21, Y+4	; 0x04
    5766:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5768:	70 e0       	ldi	r23, 0x00	; 0
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	2a 96       	adiw	r28, 0x0a	; 10
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
    577a:	df 91       	pop	r29
    577c:	cf 91       	pop	r28
    577e:	08 95       	ret

00005780 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
    5780:	0f 93       	push	r16
    5782:	1f 93       	push	r17
    5784:	cf 93       	push	r28
    5786:	df 93       	push	r29
    5788:	e4 2f       	mov	r30, r20
    578a:	10 e0       	ldi	r17, 0x00	; 0
    578c:	c2 2f       	mov	r28, r18
    578e:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    5790:	66 23       	and	r22, r22
    5792:	19 f0       	breq	.+6      	; 0x579a <print_menu_text+0x1a>
    5794:	62 50       	subi	r22, 0x02	; 2
    5796:	62 30       	cpi	r22, 0x02	; 2
    5798:	78 f4       	brcc	.+30     	; 0x57b8 <print_menu_text+0x38>
    579a:	4a e0       	ldi	r20, 0x0A	; 10
    579c:	62 e6       	ldi	r22, 0x62	; 98
    579e:	75 e0       	ldi	r23, 0x05	; 5
    57a0:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    57a4:	98 01       	movw	r18, r16
    57a6:	ae 01       	movw	r20, r28
    57a8:	6e e1       	ldi	r22, 0x1E	; 30
    57aa:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	1f 91       	pop	r17
    57b2:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    57b4:	0c 94 6e 39 	jmp	0x72dc	; 0x72dc <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    57b8:	98 01       	movw	r18, r16
    57ba:	ae 01       	movw	r20, r28
    57bc:	6e e1       	ldi	r22, 0x1E	; 30
    57be:	7a e0       	ldi	r23, 0x0A	; 10
    57c0:	8e 2f       	mov	r24, r30
	}
}
    57c2:	df 91       	pop	r29
    57c4:	cf 91       	pop	r28
    57c6:	1f 91       	pop	r17
    57c8:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    57ca:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <LCD_Display_Text>

000057ce <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    57ce:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    57d0:	93 b1       	in	r25, 0x03	; 3
    57d2:	90 7f       	andi	r25, 0xF0	; 240
    57d4:	90 93 8d 07 	sts	0x078D, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    57d8:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    57da:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    57dc:	90 91 8d 07 	lds	r25, 0x078D
    57e0:	90 3f       	cpi	r25, 0xF0	; 240
    57e2:	c9 f4       	brne	.+50     	; 0x5816 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    57e4:	83 b1       	in	r24, 0x03	; 3
    57e6:	80 7f       	andi	r24, 0xF0	; 240
    57e8:	e7 ea       	ldi	r30, 0xA7	; 167
    57ea:	f1 e6       	ldi	r31, 0x61	; 97
    57ec:	31 97       	sbiw	r30, 0x01	; 1
    57ee:	f1 f7       	brne	.-4      	; 0x57ec <poll_buttons+0x1e>
    57f0:	00 c0       	rjmp	.+0      	; 0x57f2 <poll_buttons+0x24>
    57f2:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    57f4:	23 b1       	in	r18, 0x03	; 3
    57f6:	48 2f       	mov	r20, r24
    57f8:	50 e0       	ldi	r21, 0x00	; 0
    57fa:	20 7f       	andi	r18, 0xF0	; 240
    57fc:	30 e0       	ldi	r19, 0x00	; 0
    57fe:	42 17       	cp	r20, r18
    5800:	53 07       	cpc	r21, r19
    5802:	19 f4       	brne	.+6      	; 0x580a <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    5804:	80 93 8d 07 	sts	0x078D, r24
    5808:	01 c0       	rjmp	.+2      	; 0x580c <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    580a:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    580c:	10 92 20 05 	sts	0x0520, r1
		button_multiplier = 1;
    5810:	70 93 8e 07 	sts	0x078E, r23
    5814:	e3 cf       	rjmp	.-58     	; 0x57dc <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5816:	66 23       	and	r22, r22
    5818:	71 f0       	breq	.+28     	; 0x5836 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    581a:	90 91 20 05 	lds	r25, 0x0520
    581e:	9f 5f       	subi	r25, 0xFF	; 255
    5820:	90 93 20 05 	sts	0x0520, r25
		if (button_count >= 10)
    5824:	9a 30       	cpi	r25, 0x0A	; 10
    5826:	38 f0       	brcs	.+14     	; 0x5836 <poll_buttons+0x68>
		{
			button_count = 0;
    5828:	10 92 20 05 	sts	0x0520, r1
			button_multiplier ++;
    582c:	90 91 8e 07 	lds	r25, 0x078E
    5830:	9f 5f       	subi	r25, 0xFF	; 255
    5832:	90 93 8e 07 	sts	0x078E, r25
		}
	}

	return buttons;
}
    5836:	08 95       	ret

00005838 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
    5838:	2f 92       	push	r2
    583a:	3f 92       	push	r3
    583c:	4f 92       	push	r4
    583e:	5f 92       	push	r5
    5840:	6f 92       	push	r6
    5842:	7f 92       	push	r7
    5844:	8f 92       	push	r8
    5846:	9f 92       	push	r9
    5848:	af 92       	push	r10
    584a:	bf 92       	push	r11
    584c:	cf 92       	push	r12
    584e:	df 92       	push	r13
    5850:	ef 92       	push	r14
    5852:	ff 92       	push	r15
    5854:	0f 93       	push	r16
    5856:	1f 93       	push	r17
    5858:	cf 93       	push	r28
    585a:	df 93       	push	r29
    585c:	cd b7       	in	r28, 0x3d	; 61
    585e:	de b7       	in	r29, 0x3e	; 62
    5860:	66 97       	sbiw	r28, 0x16	; 22
    5862:	0f b6       	in	r0, 0x3f	; 63
    5864:	f8 94       	cli
    5866:	de bf       	out	0x3e, r29	; 62
    5868:	0f be       	out	0x3f, r0	; 63
    586a:	cd bf       	out	0x3d, r28	; 61
    586c:	98 2e       	mov	r9, r24
    586e:	78 8b       	std	Y+16, r23	; 0x10
    5870:	6f 87       	std	Y+15, r22	; 0x0f
    5872:	b4 2e       	mov	r11, r20
    5874:	ed 82       	std	Y+5, r14	; 0x05
    5876:	fe 82       	std	Y+6, r15	; 0x06
    5878:	0f 83       	std	Y+7, r16	; 0x07
    587a:	d1 2e       	mov	r13, r17
    587c:	18 87       	std	Y+8, r17	; 0x08
    587e:	29 87       	std	Y+9, r18	; 0x09
    5880:	4e 2d       	mov	r20, r14
    5882:	3f 2d       	mov	r19, r15
    5884:	0c 87       	std	Y+12, r16	; 0x0c
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5886:	fb 01       	movw	r30, r22
    5888:	20 81       	ld	r18, Z
    588a:	62 2e       	mov	r6, r18
    588c:	77 24       	eor	r7, r7
    588e:	67 fc       	sbrc	r6, 7
    5890:	70 94       	com	r7
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5892:	f2 e0       	ldi	r31, 0x02	; 2
    5894:	1f 13       	cpse	r17, r31
    5896:	05 c0       	rjmp	.+10     	; 0x58a2 <do_menu_item+0x6a>
	{
		value = value * mult;
    5898:	5b 2d       	mov	r21, r11
    589a:	25 03       	mulsu	r18, r21
    589c:	30 01       	movw	r6, r0
    589e:	11 24       	eor	r1, r1
    58a0:	02 c0       	rjmp	.+4      	; 0x58a6 <do_menu_item+0x6e>
	}
	else mult = 1;
    58a2:	bb 24       	eor	r11, r11
    58a4:	b3 94       	inc	r11

	button = NONE;
    58a6:	20 ef       	ldi	r18, 0xF0	; 240
    58a8:	20 93 8d 07 	sts	0x078D, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    58ac:	8b 2d       	mov	r24, r11
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	9a 8b       	std	Y+18, r25	; 0x12
    58b2:	89 8b       	std	Y+17, r24	; 0x11
    58b4:	2b 2d       	mov	r18, r11
    58b6:	42 03       	mulsu	r20, r18
    58b8:	10 01       	movw	r2, r0
    58ba:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    58bc:	32 03       	mulsu	r19, r18
    58be:	c0 01       	movw	r24, r0
    58c0:	11 24       	eor	r1, r1
    58c2:	9e 87       	std	Y+14, r25	; 0x0e
    58c4:	8d 87       	std	Y+13, r24	; 0x0d
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    58c6:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    58c8:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    58ca:	41 2c       	mov	r4, r1
void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    58cc:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    58ce:	09 2d       	mov	r16, r9
    58d0:	10 e0       	ldi	r17, 0x00	; 0
    58d2:	00 0f       	add	r16, r16
    58d4:	11 1f       	adc	r17, r17
    58d6:	0b 5f       	subi	r16, 0xFB	; 251
    58d8:	11 4f       	sbci	r17, 0xF1	; 241
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    58da:	ec 2d       	mov	r30, r12
    58dc:	ff 27       	eor	r31, r31
    58de:	e7 fd       	sbrc	r30, 7
    58e0:	f0 95       	com	r31
    58e2:	fc 8b       	std	Y+20, r31	; 0x14
    58e4:	eb 8b       	std	Y+19, r30	; 0x13

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    58e6:	ae ef       	ldi	r26, 0xFE	; 254
    58e8:	ca 2e       	mov	r12, r26
    58ea:	cd 0c       	add	r12, r13
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    58ec:	2a 2d       	mov	r18, r10
    58ee:	30 e0       	ldi	r19, 0x00	; 0
    58f0:	3e 8b       	std	Y+22, r19	; 0x16
    58f2:	2d 8b       	std	Y+21, r18	; 0x15

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    58f4:	eb a5       	ldd	r30, Y+43	; 0x2b
    58f6:	fc a5       	ldd	r31, Y+44	; 0x2c
    58f8:	b4 e0       	ldi	r27, 0x04	; 4
    58fa:	ee 0f       	add	r30, r30
    58fc:	ff 1f       	adc	r31, r31
    58fe:	ba 95       	dec	r27
    5900:	e1 f7       	brne	.-8      	; 0x58fa <do_menu_item+0xc2>
    5902:	ee 57       	subi	r30, 0x7E	; 126
    5904:	f9 4f       	sbci	r31, 0xF9	; 249
    5906:	fb 87       	std	Y+11, r31	; 0x0b
    5908:	ea 87       	std	Y+10, r30	; 0x0a
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    590a:	80 91 8d 07 	lds	r24, 0x078D
    590e:	80 3e       	cpi	r24, 0xE0	; 224
    5910:	09 f4       	brne	.+2      	; 0x5914 <do_menu_item+0xdc>
    5912:	1a c1       	rjmp	.+564    	; 0x5b48 <do_menu_item+0x310>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5914:	88 20       	and	r8, r8
    5916:	11 f0       	breq	.+4      	; 0x591c <do_menu_item+0xe4>
		{
			button_inc = 5; // For servos
    5918:	25 e0       	ldi	r18, 0x05	; 5
    591a:	01 c0       	rjmp	.+2      	; 0x591e <do_menu_item+0xe6>

		}
		else
		{
			button_inc = 1;	// For everything else
    591c:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    591e:	80 3f       	cpi	r24, 0xF0	; 240
    5920:	19 f0       	breq	.+6      	; 0x5928 <do_menu_item+0xf0>
		{
			button_update++;
    5922:	43 94       	inc	r4

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5924:	24 15       	cp	r18, r4
    5926:	10 f4       	brcc	.+4      	; 0x592c <do_menu_item+0xf4>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    5928:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    592a:	41 2c       	mov	r4, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    592c:	88 20       	and	r8, r8
    592e:	49 f0       	breq	.+18     	; 0x5942 <do_menu_item+0x10a>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5930:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5932:	f7 e0       	ldi	r31, 0x07	; 7
    5934:	ff 15       	cp	r31, r15
    5936:	10 f4       	brcc	.+4      	; 0x593c <do_menu_item+0x104>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    5938:	80 3f       	cpi	r24, 0xF0	; 240
    593a:	19 f4       	brne	.+6      	; 0x5942 <do_menu_item+0x10a>
    593c:	99 23       	and	r25, r25
    593e:	09 f4       	brne	.+2      	; 0x5942 <do_menu_item+0x10a>
    5940:	69 c0       	rjmp	.+210    	; 0x5a14 <do_menu_item+0x1dc>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5942:	80 e0       	ldi	r24, 0x00	; 0
    5944:	91 e0       	ldi	r25, 0x01	; 1
    5946:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    594a:	f8 01       	movw	r30, r16
    594c:	85 91       	lpm	r24, Z+
    594e:	94 91       	lpm	r25, Z
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	40 e0       	ldi	r20, 0x00	; 0
    5956:	50 e0       	ldi	r21, 0x00	; 0
    5958:	60 e7       	ldi	r22, 0x70	; 112
    595a:	71 e0       	ldi	r23, 0x01	; 1
    595c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5960:	dd 20       	and	r13, r13
    5962:	19 f0       	breq	.+6      	; 0x596a <do_menu_item+0x132>
    5964:	21 e0       	ldi	r18, 0x01	; 1
    5966:	2c 15       	cp	r18, r12
    5968:	40 f1       	brcs	.+80     	; 0x59ba <do_menu_item+0x182>
    596a:	4a e0       	ldi	r20, 0x0A	; 10
    596c:	62 e6       	ldi	r22, 0x62	; 98
    596e:	75 e0       	ldi	r23, 0x05	; 5
    5970:	c3 01       	movw	r24, r6
    5972:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5976:	ae 01       	movw	r20, r28
    5978:	4f 5f       	subi	r20, 0xFF	; 255
    597a:	5f 4f       	sbci	r21, 0xFF	; 255
    597c:	60 e7       	ldi	r22, 0x70	; 112
    597e:	71 e0       	ldi	r23, 0x01	; 1
    5980:	0e 94 1f 38 	call	0x703e	; 0x703e <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5984:	89 81       	ldd	r24, Y+1	; 0x01
    5986:	9a 81       	ldd	r25, Y+2	; 0x02
    5988:	70 e8       	ldi	r23, 0x80	; 128
    598a:	e7 2e       	mov	r14, r23
    598c:	f1 2c       	mov	r15, r1
    598e:	e8 1a       	sub	r14, r24
    5990:	f9 0a       	sbc	r15, r25
    5992:	f6 94       	lsr	r15
    5994:	e7 94       	ror	r14
    5996:	8b 89       	ldd	r24, Y+19	; 0x13
    5998:	9c 89       	ldd	r25, Y+20	; 0x14
    599a:	e8 0e       	add	r14, r24
    599c:	f9 1e       	adc	r15, r25
    599e:	4a e0       	ldi	r20, 0x0A	; 10
    59a0:	62 e6       	ldi	r22, 0x62	; 98
    59a2:	75 e0       	ldi	r23, 0x05	; 5
    59a4:	c3 01       	movw	r24, r6
    59a6:	0e 94 f5 42 	call	0x85ea	; 0x85ea <__itoa_ncheck>
    59aa:	29 e1       	ldi	r18, 0x19	; 25
    59ac:	30 e0       	ldi	r19, 0x00	; 0
    59ae:	a7 01       	movw	r20, r14
    59b0:	60 e7       	ldi	r22, 0x70	; 112
    59b2:	71 e0       	ldi	r23, 0x01	; 1
    59b4:	0e 94 6e 39 	call	0x72dc	; 0x72dc <mugui_lcd_puts>
    59b8:	25 c0       	rjmp	.+74     	; 0x5a04 <do_menu_item+0x1cc>
			}
			else // text (style 1 or 4)
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    59ba:	ed 89       	ldd	r30, Y+21	; 0x15
    59bc:	fe 89       	ldd	r31, Y+22	; 0x16
    59be:	e6 0d       	add	r30, r6
    59c0:	f7 1d       	adc	r31, r7
    59c2:	ee 0f       	add	r30, r30
    59c4:	ff 1f       	adc	r31, r31
    59c6:	eb 5f       	subi	r30, 0xFB	; 251
    59c8:	f1 4f       	sbci	r31, 0xF1	; 241
    59ca:	85 91       	lpm	r24, Z+
    59cc:	94 91       	lpm	r25, Z
    59ce:	0e 94 6d 38 	call	0x70da	; 0x70da <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    59d2:	ae 01       	movw	r20, r28
    59d4:	4f 5f       	subi	r20, 0xFF	; 255
    59d6:	5f 4f       	sbci	r21, 0xFF	; 255
    59d8:	60 e7       	ldi	r22, 0x70	; 112
    59da:	71 e0       	ldi	r23, 0x01	; 1
    59dc:	82 e6       	ldi	r24, 0x62	; 98
    59de:	95 e0       	ldi	r25, 0x05	; 5
    59e0:	0e 94 1f 38 	call	0x703e	; 0x703e <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    59e4:	89 81       	ldd	r24, Y+1	; 0x01
    59e6:	9a 81       	ldd	r25, Y+2	; 0x02
    59e8:	40 e8       	ldi	r20, 0x80	; 128
    59ea:	50 e0       	ldi	r21, 0x00	; 0
    59ec:	48 1b       	sub	r20, r24
    59ee:	59 0b       	sbc	r21, r25
    59f0:	56 95       	lsr	r21
    59f2:	47 95       	ror	r20
    59f4:	29 e1       	ldi	r18, 0x19	; 25
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	60 e7       	ldi	r22, 0x70	; 112
    59fa:	71 e0       	ldi	r23, 0x01	; 1
    59fc:	8a 2d       	mov	r24, r10
    59fe:	86 0d       	add	r24, r6
    5a00:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	0e 94 43 2b 	call	0x5686	; 0x5686 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	91 e0       	ldi	r25, 0x01	; 1
    5a0e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5a12:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate more for text items (1 and 4) less for servos (3)
		switch (range.style)
    5a14:	92 e0       	ldi	r25, 0x02	; 2
    5a16:	d9 16       	cp	r13, r25
    5a18:	29 f1       	breq	.+74     	; 0x5a64 <do_menu_item+0x22c>
    5a1a:	9d 15       	cp	r25, r13
    5a1c:	68 f0       	brcs	.+26     	; 0x5a38 <do_menu_item+0x200>
    5a1e:	dd 20       	and	r13, r13
    5a20:	c9 f0       	breq	.+50     	; 0x5a54 <do_menu_item+0x21c>
    5a22:	e1 e0       	ldi	r30, 0x01	; 1
    5a24:	de 12       	cpse	r13, r30
    5a26:	2f c0       	rjmp	.+94     	; 0x5a86 <do_menu_item+0x24e>
    5a28:	9f e3       	ldi	r25, 0x3F	; 63
    5a2a:	e2 e4       	ldi	r30, 0x42	; 66
    5a2c:	ff e0       	ldi	r31, 0x0F	; 15
    5a2e:	91 50       	subi	r25, 0x01	; 1
    5a30:	e0 40       	sbci	r30, 0x00	; 0
    5a32:	f0 40       	sbci	r31, 0x00	; 0
    5a34:	e1 f7       	brne	.-8      	; 0x5a2e <do_menu_item+0x1f6>
    5a36:	25 c0       	rjmp	.+74     	; 0x5a82 <do_menu_item+0x24a>
    5a38:	f3 e0       	ldi	r31, 0x03	; 3
    5a3a:	df 16       	cp	r13, r31
    5a3c:	d9 f0       	breq	.+54     	; 0x5a74 <do_menu_item+0x23c>
    5a3e:	24 e0       	ldi	r18, 0x04	; 4
    5a40:	d2 12       	cpse	r13, r18
    5a42:	21 c0       	rjmp	.+66     	; 0x5a86 <do_menu_item+0x24e>
    5a44:	ff e3       	ldi	r31, 0x3F	; 63
    5a46:	22 e4       	ldi	r18, 0x42	; 66
    5a48:	3f e0       	ldi	r19, 0x0F	; 15
    5a4a:	f1 50       	subi	r31, 0x01	; 1
    5a4c:	20 40       	sbci	r18, 0x00	; 0
    5a4e:	30 40       	sbci	r19, 0x00	; 0
    5a50:	e1 f7       	brne	.-8      	; 0x5a4a <do_menu_item+0x212>
    5a52:	17 c0       	rjmp	.+46     	; 0x5a82 <do_menu_item+0x24a>
    5a54:	3f e7       	ldi	r19, 0x7F	; 127
    5a56:	5a e1       	ldi	r21, 0x1A	; 26
    5a58:	86 e0       	ldi	r24, 0x06	; 6
    5a5a:	31 50       	subi	r19, 0x01	; 1
    5a5c:	50 40       	sbci	r21, 0x00	; 0
    5a5e:	80 40       	sbci	r24, 0x00	; 0
    5a60:	e1 f7       	brne	.-8      	; 0x5a5a <do_menu_item+0x222>
    5a62:	0f c0       	rjmp	.+30     	; 0x5a82 <do_menu_item+0x24a>
    5a64:	2f e7       	ldi	r18, 0x7F	; 127
    5a66:	3a e1       	ldi	r19, 0x1A	; 26
    5a68:	56 e0       	ldi	r21, 0x06	; 6
    5a6a:	21 50       	subi	r18, 0x01	; 1
    5a6c:	30 40       	sbci	r19, 0x00	; 0
    5a6e:	50 40       	sbci	r21, 0x00	; 0
    5a70:	e1 f7       	brne	.-8      	; 0x5a6a <do_menu_item+0x232>
    5a72:	07 c0       	rjmp	.+14     	; 0x5a82 <do_menu_item+0x24a>
    5a74:	8f e7       	ldi	r24, 0x7F	; 127
    5a76:	98 e3       	ldi	r25, 0x38	; 56
    5a78:	e1 e0       	ldi	r30, 0x01	; 1
    5a7a:	81 50       	subi	r24, 0x01	; 1
    5a7c:	90 40       	sbci	r25, 0x00	; 0
    5a7e:	e0 40       	sbci	r30, 0x00	; 0
    5a80:	e1 f7       	brne	.-8      	; 0x5a7a <do_menu_item+0x242>
    5a82:	00 c0       	rjmp	.+0      	; 0x5a84 <do_menu_item+0x24c>
    5a84:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    5a86:	88 20       	and	r8, r8
    5a88:	41 f0       	breq	.+16     	; 0x5a9a <do_menu_item+0x262>
		{
			button = (PINB & 0xf0);	
    5a8a:	83 b1       	in	r24, 0x03	; 3
    5a8c:	80 7f       	andi	r24, 0xF0	; 240
    5a8e:	80 93 8d 07 	sts	0x078D, r24
			button_multiplier = 1;
    5a92:	81 e0       	ldi	r24, 0x01	; 1
    5a94:	80 93 8e 07 	sts	0x078E, r24
    5a98:	03 c0       	rjmp	.+6      	; 0x5aa0 <do_menu_item+0x268>
		}
		else
		{
			poll_buttons(true);
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    5aa0:	80 91 8d 07 	lds	r24, 0x078D
    5aa4:	80 3f       	cpi	r24, 0xF0	; 240
    5aa6:	39 f1       	breq	.+78     	; 0x5af6 <do_menu_item+0x2be>
    5aa8:	88 20       	and	r8, r8
    5aaa:	c9 f0       	breq	.+50     	; 0x5ade <do_menu_item+0x2a6>
		{
			button_lock = false;
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5aac:	80 3d       	cpi	r24, 0xD0	; 208
    5aae:	51 f4       	brne	.+20     	; 0x5ac4 <do_menu_item+0x28c>
		{
			if (button_lock == false)
    5ab0:	51 10       	cpse	r5, r1
    5ab2:	6f c0       	rjmp	.+222    	; 0x5b92 <do_menu_item+0x35a>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    5ab4:	80 91 8e 07 	lds	r24, 0x078E
    5ab8:	5c 85       	ldd	r21, Y+12	; 0x0c
    5aba:	58 9f       	mul	r21, r24
    5abc:	60 18       	sub	r6, r0
    5abe:	71 08       	sbc	r7, r1
    5ac0:	11 24       	eor	r1, r1
    5ac2:	0b c0       	rjmp	.+22     	; 0x5ada <do_menu_item+0x2a2>
				button_update = 0;
			}
		}

		if (button == UP)
    5ac4:	80 3b       	cpi	r24, 0xB0	; 176
    5ac6:	81 f4       	brne	.+32     	; 0x5ae8 <do_menu_item+0x2b0>
		{
			if (button_lock == false)
    5ac8:	51 10       	cpse	r5, r1
    5aca:	63 c0       	rjmp	.+198    	; 0x5b92 <do_menu_item+0x35a>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    5acc:	80 91 8e 07 	lds	r24, 0x078E
    5ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ad2:	98 9f       	mul	r25, r24
    5ad4:	60 0c       	add	r6, r0
    5ad6:	71 1c       	adc	r7, r1
    5ad8:	11 24       	eor	r1, r1
				button_update = 0;
    5ada:	41 2c       	mov	r4, r1
    5adc:	5a c0       	rjmp	.+180    	; 0x5b92 <do_menu_item+0x35a>
		{
			button_lock = false;
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5ade:	80 3d       	cpi	r24, 0xD0	; 208
    5ae0:	49 f3       	breq	.-46     	; 0x5ab4 <do_menu_item+0x27c>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    5ae2:	80 3b       	cpi	r24, 0xB0	; 176
    5ae4:	99 f3       	breq	.-26     	; 0x5acc <do_menu_item+0x294>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    5ae6:	51 2c       	mov	r5, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    5ae8:	80 37       	cpi	r24, 0x70	; 112
    5aea:	29 f4       	brne	.+10     	; 0x5af6 <do_menu_item+0x2be>
		{
			value = (range.default_value * mult);
    5aec:	29 85       	ldd	r18, Y+9	; 0x09
    5aee:	3b 2d       	mov	r19, r11
    5af0:	23 03       	mulsu	r18, r19
    5af2:	30 01       	movw	r6, r0
    5af4:	11 24       	eor	r1, r1
    5af6:	62 14       	cp	r6, r2
    5af8:	73 04       	cpc	r7, r3
    5afa:	0c f4       	brge	.+2      	; 0x5afe <do_menu_item+0x2c6>
    5afc:	31 01       	movw	r6, r2
    5afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b02:	86 15       	cp	r24, r6
    5b04:	97 05       	cpc	r25, r7
    5b06:	0c f4       	brge	.+2      	; 0x5b0a <do_menu_item+0x2d2>
    5b08:	3c 01       	movw	r6, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    5b0a:	97 ea       	ldi	r25, 0xA7	; 167
    5b0c:	99 12       	cpse	r9, r25
    5b0e:	03 c0       	rjmp	.+6      	; 0x5b16 <do_menu_item+0x2de>
		{
			st7565_set_brightness(value);
    5b10:	86 2d       	mov	r24, r6
    5b12:	0e 94 c6 1c 	call	0x398c	; 0x398c <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    5b16:	88 20       	and	r8, r8
    5b18:	a9 f0       	breq	.+42     	; 0x5b44 <do_menu_item+0x30c>
			(servo_enable) &&
    5b1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5b1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5b1e:	80 81       	ld	r24, Z
    5b20:	82 30       	cpi	r24, 0x02	; 2
    5b22:	81 f0       	breq	.+32     	; 0x5b44 <do_menu_item+0x30c>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    5b24:	86 2d       	mov	r24, r6
    5b26:	0e 94 18 38 	call	0x7030	; 0x7030 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500;
    5b2a:	86 5a       	subi	r24, 0xA6	; 166
    5b2c:	9e 40       	sbci	r25, 0x0E	; 14
    5b2e:	95 95       	asr	r25
    5b30:	87 95       	ror	r24

			cli();
    5b32:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500;
    5b34:	bc 01       	movw	r22, r24
    5b36:	64 52       	subi	r22, 0x24	; 36
    5b38:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    5b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b3e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <output_servo_ppm_asm3>
			sei();
    5b42:	78 94       	sei
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	e1 ce       	rjmp	.-574    	; 0x590a <do_menu_item+0xd2>
		}
	} // while ((button != ENTER) && (button != ABORT))

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    5b48:	f2 e0       	ldi	r31, 0x02	; 2
    5b4a:	df 12       	cpse	r13, r31
    5b4c:	06 c0       	rjmp	.+12     	; 0x5b5a <do_menu_item+0x322>
	{
		value = value / mult;
    5b4e:	c3 01       	movw	r24, r6
    5b50:	69 89       	ldd	r22, Y+17	; 0x11
    5b52:	7a 89       	ldd	r23, Y+18	; 0x12
    5b54:	0e 94 60 42 	call	0x84c0	; 0x84c0 <__divmodhi4>
    5b58:	3b 01       	movw	r6, r22
	}

	*values = (int8_t)value;
    5b5a:	ef 85       	ldd	r30, Y+15	; 0x0f
    5b5c:	f8 89       	ldd	r31, Y+16	; 0x10
    5b5e:	60 82       	st	Z, r6
}
    5b60:	66 96       	adiw	r28, 0x16	; 22
    5b62:	0f b6       	in	r0, 0x3f	; 63
    5b64:	f8 94       	cli
    5b66:	de bf       	out	0x3e, r29	; 62
    5b68:	0f be       	out	0x3f, r0	; 63
    5b6a:	cd bf       	out	0x3d, r28	; 61
    5b6c:	df 91       	pop	r29
    5b6e:	cf 91       	pop	r28
    5b70:	1f 91       	pop	r17
    5b72:	0f 91       	pop	r16
    5b74:	ff 90       	pop	r15
    5b76:	ef 90       	pop	r14
    5b78:	df 90       	pop	r13
    5b7a:	cf 90       	pop	r12
    5b7c:	bf 90       	pop	r11
    5b7e:	af 90       	pop	r10
    5b80:	9f 90       	pop	r9
    5b82:	8f 90       	pop	r8
    5b84:	7f 90       	pop	r7
    5b86:	6f 90       	pop	r6
    5b88:	5f 90       	pop	r5
    5b8a:	4f 90       	pop	r4
    5b8c:	3f 90       	pop	r3
    5b8e:	2f 90       	pop	r2
    5b90:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
			button_lock = false;
    5b92:	55 24       	eor	r5, r5
    5b94:	53 94       	inc	r5
    5b96:	af cf       	rjmp	.-162    	; 0x5af6 <do_menu_item+0x2be>

00005b98 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	98 17       	cp	r25, r24
    5b9c:	81 f0       	breq	.+32     	; 0x5bbe <menu_beep+0x26>
	{ 
		LVA = 1;
    5b9e:	29 9a       	sbi	0x05, 1	; 5
    5ba0:	ef e0       	ldi	r30, 0x0F	; 15
    5ba2:	f7 e2       	ldi	r31, 0x27	; 39
    5ba4:	31 97       	sbiw	r30, 0x01	; 1
    5ba6:	f1 f7       	brne	.-4      	; 0x5ba4 <menu_beep+0xc>
    5ba8:	00 c0       	rjmp	.+0      	; 0x5baa <menu_beep+0x12>
    5baa:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    5bac:	29 98       	cbi	0x05, 1	; 5
    5bae:	ef e0       	ldi	r30, 0x0F	; 15
    5bb0:	f7 e2       	ldi	r31, 0x27	; 39
    5bb2:	31 97       	sbiw	r30, 0x01	; 1
    5bb4:	f1 f7       	brne	.-4      	; 0x5bb2 <menu_beep+0x1a>
    5bb6:	00 c0       	rjmp	.+0      	; 0x5bb8 <menu_beep+0x20>
    5bb8:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    5bba:	9f 5f       	subi	r25, 0xFF	; 255
    5bbc:	ee cf       	rjmp	.-36     	; 0x5b9a <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    5bbe:	08 95       	ret

00005bc0 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint8_t* top, uint8_t* temp)
{
    5bc0:	cf 92       	push	r12
    5bc2:	df 92       	push	r13
    5bc4:	ef 92       	push	r14
    5bc6:	ff 92       	push	r15
    5bc8:	0f 93       	push	r16
    5bca:	1f 93       	push	r17
    5bcc:	cf 93       	push	r28
    5bce:	df 93       	push	r29
    5bd0:	00 d0       	rcall	.+0      	; 0x5bd2 <update_menu+0x12>
    5bd2:	1f 92       	push	r1
    5bd4:	cd b7       	in	r28, 0x3d	; 61
    5bd6:	de b7       	in	r29, 0x3e	; 62
    5bd8:	58 2f       	mov	r21, r24
    5bda:	f6 01       	movw	r30, r12
	// Temporarily add in offset :(
	*top = *top + offset;
    5bdc:	d7 01       	movw	r26, r14
    5bde:	9c 91       	ld	r25, X
    5be0:	94 0f       	add	r25, r20
    5be2:	9c 93       	st	X, r25
	start = start + offset;
    5be4:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    5be6:	20 3e       	cpi	r18, 0xE0	; 224
    5be8:	a1 f4       	brne	.+40     	; 0x5c12 <update_menu+0x52>
	{
		switch(*cursor) 
    5bea:	d8 01       	movw	r26, r16
    5bec:	8c 91       	ld	r24, X
    5bee:	8f 30       	cpi	r24, 0x0F	; 15
    5bf0:	59 f0       	breq	.+22     	; 0x5c08 <update_menu+0x48>
    5bf2:	18 f4       	brcc	.+6      	; 0x5bfa <update_menu+0x3a>
    5bf4:	83 30       	cpi	r24, 0x03	; 3
    5bf6:	49 f0       	breq	.+18     	; 0x5c0a <update_menu+0x4a>
    5bf8:	4b c0       	rjmp	.+150    	; 0x5c90 <update_menu+0xd0>
    5bfa:	8b 31       	cpi	r24, 0x1B	; 27
    5bfc:	41 f0       	breq	.+16     	; 0x5c0e <update_menu+0x4e>
    5bfe:	87 32       	cpi	r24, 0x27	; 39
    5c00:	09 f0       	breq	.+2      	; 0x5c04 <update_menu+0x44>
    5c02:	46 c0       	rjmp	.+140    	; 0x5c90 <update_menu+0xd0>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    5c04:	9d 5f       	subi	r25, 0xFD	; 253
    5c06:	01 c0       	rjmp	.+2      	; 0x5c0a <update_menu+0x4a>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    5c08:	9f 5f       	subi	r25, 0xFF	; 255
    5c0a:	90 83       	st	Z, r25
				break;	
    5c0c:	41 c0       	rjmp	.+130    	; 0x5c90 <update_menu+0xd0>
			case LINE2:
				*temp = *top + 2;
    5c0e:	9e 5f       	subi	r25, 0xFE	; 254
    5c10:	fc cf       	rjmp	.-8      	; 0x5c0a <update_menu+0x4a>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    5c12:	20 3d       	cpi	r18, 0xD0	; 208
    5c14:	f9 f4       	brne	.+62     	; 0x5c54 <update_menu+0x94>
	{
		switch(*cursor) 
    5c16:	f8 01       	movw	r30, r16
    5c18:	80 81       	ld	r24, Z
    5c1a:	8f 30       	cpi	r24, 0x0F	; 15
    5c1c:	69 f0       	breq	.+26     	; 0x5c38 <update_menu+0x78>
    5c1e:	18 f4       	brcc	.+6      	; 0x5c26 <update_menu+0x66>
    5c20:	83 30       	cpi	r24, 0x03	; 3
    5c22:	31 f0       	breq	.+12     	; 0x5c30 <update_menu+0x70>
    5c24:	15 c0       	rjmp	.+42     	; 0x5c50 <update_menu+0x90>
    5c26:	8b 31       	cpi	r24, 0x1B	; 27
    5c28:	59 f0       	breq	.+22     	; 0x5c40 <update_menu+0x80>
    5c2a:	87 32       	cpi	r24, 0x27	; 39
    5c2c:	69 f0       	breq	.+26     	; 0x5c48 <update_menu+0x88>
    5c2e:	10 c0       	rjmp	.+32     	; 0x5c50 <update_menu+0x90>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    5c30:	52 30       	cpi	r21, 0x02	; 2
    5c32:	70 f1       	brcs	.+92     	; 0x5c90 <update_menu+0xd0>
    5c34:	8f e0       	ldi	r24, 0x0F	; 15
    5c36:	27 c0       	rjmp	.+78     	; 0x5c86 <update_menu+0xc6>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    5c38:	53 30       	cpi	r21, 0x03	; 3
    5c3a:	50 f1       	brcs	.+84     	; 0x5c90 <update_menu+0xd0>
    5c3c:	8b e1       	ldi	r24, 0x1B	; 27
    5c3e:	1f c0       	rjmp	.+62     	; 0x5c7e <update_menu+0xbe>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    5c40:	54 30       	cpi	r21, 0x04	; 4
    5c42:	30 f1       	brcs	.+76     	; 0x5c90 <update_menu+0xd0>
    5c44:	87 e2       	ldi	r24, 0x27	; 39
    5c46:	1f c0       	rjmp	.+62     	; 0x5c86 <update_menu+0xc6>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    5c48:	55 30       	cpi	r21, 0x05	; 5
    5c4a:	10 f1       	brcs	.+68     	; 0x5c90 <update_menu+0xd0>
    5c4c:	88 e2       	ldi	r24, 0x28	; 40
    5c4e:	17 c0       	rjmp	.+46     	; 0x5c7e <update_menu+0xbe>
				break;
			default:
				*cursor = NEXTLINE;
    5c50:	88 e2       	ldi	r24, 0x28	; 40
    5c52:	19 c0       	rjmp	.+50     	; 0x5c86 <update_menu+0xc6>
				break;
		}
	}

	if (button == UP)	
    5c54:	20 3b       	cpi	r18, 0xB0	; 176
    5c56:	d1 f4       	brne	.+52     	; 0x5c8c <update_menu+0xcc>
	{
		switch(*cursor) 
    5c58:	f8 01       	movw	r30, r16
    5c5a:	80 81       	ld	r24, Z
    5c5c:	8f 30       	cpi	r24, 0x0F	; 15
    5c5e:	69 f0       	breq	.+26     	; 0x5c7a <update_menu+0xba>
    5c60:	20 f4       	brcc	.+8      	; 0x5c6a <update_menu+0xaa>
    5c62:	83 30       	cpi	r24, 0x03	; 3
    5c64:	79 f4       	brne	.+30     	; 0x5c84 <update_menu+0xc4>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    5c66:	82 e0       	ldi	r24, 0x02	; 2
    5c68:	0a c0       	rjmp	.+20     	; 0x5c7e <update_menu+0xbe>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    5c6a:	8b 31       	cpi	r24, 0x1B	; 27
    5c6c:	21 f0       	breq	.+8      	; 0x5c76 <update_menu+0xb6>
    5c6e:	87 32       	cpi	r24, 0x27	; 39
    5c70:	49 f4       	brne	.+18     	; 0x5c84 <update_menu+0xc4>
		{
			case LINE3:
				*cursor = LINE2;
    5c72:	8b e1       	ldi	r24, 0x1B	; 27
    5c74:	08 c0       	rjmp	.+16     	; 0x5c86 <update_menu+0xc6>
				break;	
			case LINE2:
				*cursor = LINE1;
    5c76:	8f e0       	ldi	r24, 0x0F	; 15
    5c78:	02 c0       	rjmp	.+4      	; 0x5c7e <update_menu+0xbe>
				break;
			case LINE1:
				*cursor = LINE0;
    5c7a:	83 e0       	ldi	r24, 0x03	; 3
    5c7c:	04 c0       	rjmp	.+8      	; 0x5c86 <update_menu+0xc6>
				break;
			case LINE0:
				*cursor = PREVLINE;
    5c7e:	f8 01       	movw	r30, r16
    5c80:	80 83       	st	Z, r24
				break;
    5c82:	06 c0       	rjmp	.+12     	; 0x5c90 <update_menu+0xd0>
			default:
				*cursor = PREVLINE;
    5c84:	82 e0       	ldi	r24, 0x02	; 2
    5c86:	d8 01       	movw	r26, r16
    5c88:	8c 93       	st	X, r24
				break;
    5c8a:	02 c0       	rjmp	.+4      	; 0x5c90 <update_menu+0xd0>
		}
	}
	
	if (button != NONE)
    5c8c:	20 3f       	cpi	r18, 0xF0	; 240
    5c8e:	91 f0       	breq	.+36     	; 0x5cb4 <update_menu+0xf4>
	{
		menu_beep(1);
    5c90:	81 e0       	ldi	r24, 0x01	; 1
    5c92:	4b 83       	std	Y+3, r20	; 0x03
    5c94:	5a 83       	std	Y+2, r21	; 0x02
    5c96:	69 83       	std	Y+1, r22	; 0x01
    5c98:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <menu_beep>
    5c9c:	bf ef       	ldi	r27, 0xFF	; 255
    5c9e:	e4 e3       	ldi	r30, 0x34	; 52
    5ca0:	fc e0       	ldi	r31, 0x0C	; 12
    5ca2:	b1 50       	subi	r27, 0x01	; 1
    5ca4:	e0 40       	sbci	r30, 0x00	; 0
    5ca6:	f0 40       	sbci	r31, 0x00	; 0
    5ca8:	e1 f7       	brne	.-8      	; 0x5ca2 <update_menu+0xe2>
    5caa:	00 c0       	rjmp	.+0      	; 0x5cac <update_menu+0xec>
    5cac:	00 00       	nop
    5cae:	69 81       	ldd	r22, Y+1	; 0x01
    5cb0:	5a 81       	ldd	r21, Y+2	; 0x02
    5cb2:	4b 81       	ldd	r20, Y+3	; 0x03
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up
    5cb4:	d8 01       	movw	r26, r16
    5cb6:	8c 91       	ld	r24, X
    5cb8:	82 30       	cpi	r24, 0x02	; 2
    5cba:	41 f4       	brne	.+16     	; 0x5ccc <update_menu+0x10c>
	{
		*cursor  = LINE0;
    5cbc:	83 e0       	ldi	r24, 0x03	; 3
    5cbe:	8c 93       	st	X, r24
		if (*top > start)
    5cc0:	f7 01       	movw	r30, r14
    5cc2:	80 81       	ld	r24, Z
    5cc4:	68 17       	cp	r22, r24
    5cc6:	10 f4       	brcc	.+4      	; 0x5ccc <update_menu+0x10c>
		{
			*top = *top - 1;								// Shuffle list up
    5cc8:	81 50       	subi	r24, 0x01	; 1
    5cca:	80 83       	st	Z, r24
		}
	}

	if (*cursor == NEXTLINE)								// Down
    5ccc:	d8 01       	movw	r26, r16
    5cce:	8c 91       	ld	r24, X
    5cd0:	88 32       	cpi	r24, 0x28	; 40
    5cd2:	91 f4       	brne	.+36     	; 0x5cf8 <update_menu+0x138>
	{
		*cursor  = LINE3;
    5cd4:	87 e2       	ldi	r24, 0x27	; 39
    5cd6:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    5cd8:	f7 01       	movw	r30, r14
    5cda:	70 81       	ld	r23, Z
    5cdc:	27 2f       	mov	r18, r23
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	2d 5f       	subi	r18, 0xFD	; 253
    5ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ce4:	85 2f       	mov	r24, r21
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	86 0f       	add	r24, r22
    5cea:	91 1d       	adc	r25, r1
    5cec:	01 97       	sbiw	r24, 0x01	; 1
    5cee:	28 17       	cp	r18, r24
    5cf0:	39 07       	cpc	r19, r25
    5cf2:	10 f4       	brcc	.+4      	; 0x5cf8 <update_menu+0x138>
		{
			*top = *top + 1;								// Shuffle list down
    5cf4:	7f 5f       	subi	r23, 0xFF	; 255
    5cf6:	70 83       	st	Z, r23
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    5cf8:	d7 01       	movw	r26, r14
    5cfa:	8c 91       	ld	r24, X
    5cfc:	84 1b       	sub	r24, r20
    5cfe:	8c 93       	st	X, r24
}
    5d00:	0f 90       	pop	r0
    5d02:	0f 90       	pop	r0
    5d04:	0f 90       	pop	r0
    5d06:	df 91       	pop	r29
    5d08:	cf 91       	pop	r28
    5d0a:	1f 91       	pop	r17
    5d0c:	0f 91       	pop	r16
    5d0e:	ff 90       	pop	r15
    5d10:	ef 90       	pop	r14
    5d12:	df 90       	pop	r13
    5d14:	cf 90       	pop	r12
    5d16:	08 95       	ret

00005d18 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    5d18:	28 2f       	mov	r18, r24
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	43 e0       	ldi	r20, 0x03	; 3
    5d1e:	50 e0       	ldi	r21, 0x00	; 0
    5d20:	66 e0       	ldi	r22, 0x06	; 6
    5d22:	71 e0       	ldi	r23, 0x01	; 1
    5d24:	8d e0       	ldi	r24, 0x0D	; 13
    5d26:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <LCD_Display_Text>

00005d2a <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint8_t top, uint8_t start, int8_t values[], uint8_t mult, const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    5d2a:	2f 92       	push	r2
    5d2c:	3f 92       	push	r3
    5d2e:	4f 92       	push	r4
    5d30:	5f 92       	push	r5
    5d32:	6f 92       	push	r6
    5d34:	7f 92       	push	r7
    5d36:	8f 92       	push	r8
    5d38:	9f 92       	push	r9
    5d3a:	af 92       	push	r10
    5d3c:	bf 92       	push	r11
    5d3e:	cf 92       	push	r12
    5d40:	df 92       	push	r13
    5d42:	ef 92       	push	r14
    5d44:	ff 92       	push	r15
    5d46:	0f 93       	push	r16
    5d48:	1f 93       	push	r17
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	cd b7       	in	r28, 0x3d	; 61
    5d50:	de b7       	in	r29, 0x3e	; 62
    5d52:	29 97       	sbiw	r28, 0x09	; 9
    5d54:	0f b6       	in	r0, 0x3f	; 63
    5d56:	f8 94       	cli
    5d58:	de bf       	out	0x3e, r29	; 62
    5d5a:	0f be       	out	0x3f, r0	; 63
    5d5c:	cd bf       	out	0x3d, r28	; 61
    5d5e:	38 2e       	mov	r3, r24
    5d60:	3a 01       	movw	r6, r20
    5d62:	22 2e       	mov	r2, r18
    5d64:	28 01       	movw	r4, r16
    5d66:	ee 82       	std	Y+6, r14	; 0x06
    5d68:	cf 82       	std	Y+7, r12	; 0x07
    5d6a:	88 86       	std	Y+8, r8	; 0x08
	menu_range_t	range1;
	uint8_t multiplier;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    5d6c:	80 e0       	ldi	r24, 0x00	; 0
    5d6e:	91 e0       	ldi	r25, 0x01	; 1
    5d70:	69 87       	std	Y+9, r22	; 0x09
    5d72:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>
	print_menu_frame(0);
    5d76:	80 e0       	ldi	r24, 0x00	; 0
    5d78:	0e 94 43 2b 	call	0x5686	; 0x5686 <print_menu_frame>
    5d7c:	23 2d       	mov	r18, r3
    5d7e:	30 e0       	ldi	r19, 0x00	; 0
    5d80:	69 85       	ldd	r22, Y+9	; 0x09
    5d82:	86 2f       	mov	r24, r22
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	68 01       	movw	r12, r16
    5d88:	45 e0       	ldi	r20, 0x05	; 5
    5d8a:	64 9f       	mul	r22, r20
    5d8c:	c0 18       	sub	r12, r0
    5d8e:	d1 08       	sbc	r13, r1
    5d90:	11 24       	eor	r1, r1
    5d92:	e5 e0       	ldi	r30, 0x05	; 5
    5d94:	3e 9e       	mul	r3, r30
    5d96:	c0 0c       	add	r12, r0
    5d98:	d1 1c       	adc	r13, r1
    5d9a:	11 24       	eor	r1, r1
    5d9c:	81 2c       	mov	r8, r1
    5d9e:	91 2c       	mov	r9, r1
    5da0:	e1 2c       	mov	r14, r1
    5da2:	f1 2c       	mov	r15, r1
    5da4:	a8 1a       	sub	r10, r24
    5da6:	b9 0a       	sbc	r11, r25
    5da8:	a2 0e       	add	r10, r18
    5daa:	b3 1e       	adc	r11, r19
    5dac:	28 1b       	sub	r18, r24
    5dae:	39 0b       	sbc	r19, r25
    5db0:	62 0e       	add	r6, r18
    5db2:	73 1e       	adc	r7, r19
    5db4:	87 01       	movw	r16, r14
    5db6:	08 5c       	subi	r16, 0xC8	; 200
    5db8:	18 4e       	sbci	r17, 0xE8	; 232
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    5dba:	f8 01       	movw	r30, r16
    5dbc:	24 91       	lpm	r18, Z
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	4a e0       	ldi	r20, 0x0A	; 10
    5dc2:	50 e0       	ldi	r21, 0x00	; 0
    5dc4:	6e e1       	ldi	r22, 0x1E	; 30
    5dc6:	7a e0       	ldi	r23, 0x0A	; 10
    5dc8:	83 2d       	mov	r24, r3
    5dca:	8e 0d       	add	r24, r14
    5dcc:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5dd0:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    5dd2:	45 e0       	ldi	r20, 0x05	; 5
    5dd4:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5dd6:	f1 11       	cpse	r31, r1
    5dd8:	04 c0       	rjmp	.+8      	; 0x5de2 <print_menu_items+0xb8>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    5dda:	b4 01       	movw	r22, r8
    5ddc:	6c 0d       	add	r22, r12
    5dde:	7d 1d       	adc	r23, r13
    5de0:	01 c0       	rjmp	.+2      	; 0x5de4 <print_menu_items+0xba>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    5de2:	b2 01       	movw	r22, r4
    5de4:	ce 01       	movw	r24, r28
    5de6:	01 96       	adiw	r24, 0x01	; 1
    5de8:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <memcpy_P>
		}
	
		if (range1.style == 2)
    5dec:	6c 81       	ldd	r22, Y+4	; 0x04
    5dee:	62 30       	cpi	r22, 0x02	; 2
    5df0:	11 f0       	breq	.+4      	; 0x5df6 <print_menu_items+0xcc>
		{
			multiplier = mult;
		}
		else
		{
			multiplier = 1;
    5df2:	31 e0       	ldi	r19, 0x01	; 1
    5df4:	01 c0       	rjmp	.+2      	; 0x5df8 <print_menu_items+0xce>
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}
	
		if (range1.style == 2)
		{
			multiplier = mult;
    5df6:	32 2d       	mov	r19, r2
		else
		{
			multiplier = 1;
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    5df8:	f8 01       	movw	r30, r16
    5dfa:	04 91       	lpm	r16, Z
    5dfc:	f5 01       	movw	r30, r10
    5dfe:	ee 0d       	add	r30, r14
    5e00:	ff 1d       	adc	r31, r15
    5e02:	44 91       	lpm	r20, Z
    5e04:	d3 01       	movw	r26, r6
    5e06:	ae 0d       	add	r26, r14
    5e08:	bf 1d       	adc	r27, r15
    5e0a:	5c 91       	ld	r21, X
    5e0c:	45 0f       	add	r20, r21
    5e0e:	2f 81       	ldd	r18, Y+7	; 0x07
    5e10:	53 03       	mulsu	r21, r19
    5e12:	c0 01       	movw	r24, r0
    5e14:	11 24       	eor	r1, r1
    5e16:	0e 94 c0 2b 	call	0x5780	; 0x5780 <print_menu_text>
    5e1a:	ff ef       	ldi	r31, 0xFF	; 255
    5e1c:	ef 1a       	sub	r14, r31
    5e1e:	ff 0a       	sbc	r15, r31
    5e20:	45 e0       	ldi	r20, 0x05	; 5
    5e22:	84 0e       	add	r8, r20
    5e24:	91 1c       	adc	r9, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    5e26:	84 e0       	ldi	r24, 0x04	; 4
    5e28:	e8 16       	cp	r14, r24
    5e2a:	f1 04       	cpc	r15, r1
    5e2c:	09 f0       	breq	.+2      	; 0x5e30 <print_menu_items+0x106>
    5e2e:	c2 cf       	rjmp	.-124    	; 0x5db4 <print_menu_items+0x8a>
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    5e30:	88 85       	ldd	r24, Y+8	; 0x08
    5e32:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <print_cursor>
	write_buffer(buffer);
    5e36:	80 e0       	ldi	r24, 0x00	; 0
    5e38:	91 e0       	ldi	r25, 0x01	; 1
    5e3a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>
	poll_buttons(true);
    5e3e:	81 e0       	ldi	r24, 0x01	; 1
    5e40:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <poll_buttons>
}
    5e44:	29 96       	adiw	r28, 0x09	; 9
    5e46:	0f b6       	in	r0, 0x3f	; 63
    5e48:	f8 94       	cli
    5e4a:	de bf       	out	0x3e, r29	; 62
    5e4c:	0f be       	out	0x3f, r0	; 63
    5e4e:	cd bf       	out	0x3d, r28	; 61
    5e50:	df 91       	pop	r29
    5e52:	cf 91       	pop	r28
    5e54:	1f 91       	pop	r17
    5e56:	0f 91       	pop	r16
    5e58:	ff 90       	pop	r15
    5e5a:	ef 90       	pop	r14
    5e5c:	df 90       	pop	r13
    5e5e:	cf 90       	pop	r12
    5e60:	bf 90       	pop	r11
    5e62:	af 90       	pop	r10
    5e64:	9f 90       	pop	r9
    5e66:	8f 90       	pop	r8
    5e68:	7f 90       	pop	r7
    5e6a:	6f 90       	pop	r6
    5e6c:	5f 90       	pop	r5
    5e6e:	4f 90       	pop	r4
    5e70:	3f 90       	pop	r3
    5e72:	2f 90       	pop	r2
    5e74:	08 95       	ret

00005e76 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    5e76:	2f 92       	push	r2
    5e78:	3f 92       	push	r3
    5e7a:	4f 92       	push	r4
    5e7c:	5f 92       	push	r5
    5e7e:	6f 92       	push	r6
    5e80:	7f 92       	push	r7
    5e82:	8f 92       	push	r8
    5e84:	9f 92       	push	r9
    5e86:	af 92       	push	r10
    5e88:	bf 92       	push	r11
    5e8a:	cf 92       	push	r12
    5e8c:	df 92       	push	r13
    5e8e:	ef 92       	push	r14
    5e90:	ff 92       	push	r15
    5e92:	0f 93       	push	r16
    5e94:	1f 93       	push	r17
    5e96:	cf 93       	push	r28
    5e98:	df 93       	push	r29
    5e9a:	cd b7       	in	r28, 0x3d	; 61
    5e9c:	de b7       	in	r29, 0x3e	; 62
    5e9e:	2f 97       	sbiw	r28, 0x0f	; 15
    5ea0:	0f b6       	in	r0, 0x3f	; 63
    5ea2:	f8 94       	cli
    5ea4:	de bf       	out	0x3e, r29	; 62
    5ea6:	0f be       	out	0x3f, r0	; 63
    5ea8:	cd bf       	out	0x3d, r28	; 61
	int8_t temp_gyro_roll = 0;
	int8_t temp_gyro_pitch = 0;
	int8_t temp_gyro_yaw = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5eaa:	90 91 8f 07 	lds	r25, 0x078F
    5eae:	99 23       	and	r25, r25
    5eb0:	29 f0       	breq	.+10     	; 0x5ebc <menu_flight+0x46>
	{
		sub_top = FLIGHTSTART;
    5eb2:	90 ec       	ldi	r25, 0xC0	; 192
    5eb4:	90 93 24 05 	sts	0x0524, r25
		menu_flag = 0;
    5eb8:	10 92 8f 07 	sts	0x078F, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	01 97       	sbiw	r24, 0x01	; 1
    5ec0:	46 e1       	ldi	r20, 0x16	; 22
    5ec2:	48 9f       	mul	r20, r24
    5ec4:	90 01       	movw	r18, r0
    5ec6:	49 9f       	mul	r20, r25
    5ec8:	30 0d       	add	r19, r0
    5eca:	11 24       	eor	r1, r1
    5ecc:	c9 01       	movw	r24, r18
    5ece:	8e 5e       	subi	r24, 0xEE	; 238
    5ed0:	99 4f       	sbci	r25, 0xF9	; 249
    5ed2:	9f 83       	std	Y+7, r25	; 0x07
    5ed4:	8e 83       	std	Y+6, r24	; 0x06

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
    5ed6:	f9 01       	movw	r30, r18
    5ed8:	e7 54       	subi	r30, 0x47	; 71
    5eda:	fa 4f       	sbci	r31, 0xFA	; 250
    5edc:	2f 01       	movw	r4, r30
    5ede:	1f 01       	movw	r2, r30
    5ee0:	fb e5       	ldi	r31, 0x5B	; 91
    5ee2:	2f 0e       	add	r2, r31
    5ee4:	31 1c       	adc	r3, r1

		// Preset I-limits when gyro mode changes
		if (button == ENTER)
		{
			// If roll gyro type has changed, reset to an appropriate start point
			if (temp_gyro_roll != Config.FlightMode[mode-1].Roll_type)
    5ee6:	32 01       	movw	r6, r4
    5ee8:	3f 86       	std	Y+15, r3	; 0x0f
    5eea:	2e 86       	std	Y+14, r2	; 0x0e
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
		temp_gyro_pitch = Config.FlightMode[mode - 1].Pitch_type;
    5eec:	c2 01       	movw	r24, r4
    5eee:	8e 59       	subi	r24, 0x9E	; 158
    5ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef2:	9b 87       	std	Y+11, r25	; 0x0b
    5ef4:	8a 87       	std	Y+10, r24	; 0x0a
		temp_gyro_yaw = Config.FlightMode[mode - 1].Yaw_type;
    5ef6:	f2 01       	movw	r30, r4
    5ef8:	e7 59       	subi	r30, 0x97	; 151
    5efa:	ff 4f       	sbci	r31, 0xFF	; 255
    5efc:	fd 87       	std	Y+13, r31	; 0x0d
    5efe:	ec 87       	std	Y+12, r30	; 0x0c
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5f00:	80 91 8d 07 	lds	r24, 0x078D
    5f04:	80 37       	cpi	r24, 0x70	; 112
    5f06:	09 f4       	brne	.+2      	; 0x5f0a <menu_flight+0x94>
    5f08:	93 c0       	rjmp	.+294    	; 0x6030 <menu_flight+0x1ba>
	{
		value_ptr = &Config.FlightMode[mode-1].StabMode;

		// Save pre-edited value for gyro types
		temp_gyro_roll = Config.FlightMode[mode - 1].Roll_type;
    5f0a:	f1 01       	movw	r30, r2
    5f0c:	90 80       	ld	r9, Z
		temp_gyro_pitch = Config.FlightMode[mode - 1].Pitch_type;
    5f0e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5f10:	fb 85       	ldd	r31, Y+11	; 0x0b
    5f12:	f0 81       	ld	r31, Z
    5f14:	f9 87       	std	Y+9, r31	; 0x09
		temp_gyro_yaw = Config.FlightMode[mode - 1].Yaw_type;
    5f16:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f18:	fd 85       	ldd	r31, Y+13	; 0x0d
    5f1a:	f0 81       	ld	r31, Z
    5f1c:	f8 87       	std	Y+8, r31	; 0x08

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, 1, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    5f1e:	80 90 04 05 	lds	r8, 0x0504
    5f22:	8a ea       	ldi	r24, 0xAA	; 170
    5f24:	a8 2e       	mov	r10, r24
    5f26:	87 e1       	ldi	r24, 0x17	; 23
    5f28:	b8 2e       	mov	r11, r24
    5f2a:	9f e4       	ldi	r25, 0x4F	; 79
    5f2c:	c9 2e       	mov	r12, r25
    5f2e:	e1 2c       	mov	r14, r1
    5f30:	0c e3       	ldi	r16, 0x3C	; 60
    5f32:	17 e1       	ldi	r17, 0x17	; 23
    5f34:	21 e0       	ldi	r18, 0x01	; 1
    5f36:	4e 81       	ldd	r20, Y+6	; 0x06
    5f38:	5f 81       	ldd	r21, Y+7	; 0x07
    5f3a:	60 ec       	ldi	r22, 0xC0	; 192
    5f3c:	80 91 24 05 	lds	r24, 0x0524
    5f40:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5f44:	21 e2       	ldi	r18, 0x21	; 33
    5f46:	c2 2e       	mov	r12, r18
    5f48:	25 e0       	ldi	r18, 0x05	; 5
    5f4a:	d2 2e       	mov	r13, r18
    5f4c:	34 e2       	ldi	r19, 0x24	; 36
    5f4e:	e3 2e       	mov	r14, r19
    5f50:	35 e0       	ldi	r19, 0x05	; 5
    5f52:	f3 2e       	mov	r15, r19
    5f54:	04 e0       	ldi	r16, 0x04	; 4
    5f56:	15 e0       	ldi	r17, 0x05	; 5
    5f58:	20 91 8d 07 	lds	r18, 0x078D
    5f5c:	40 e0       	ldi	r20, 0x00	; 0
    5f5e:	60 ec       	ldi	r22, 0xC0	; 192
    5f60:	86 e1       	ldi	r24, 0x16	; 22
    5f62:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    5f66:	60 91 21 05 	lds	r22, 0x0521
    5f6a:	60 5c       	subi	r22, 0xC0	; 192
    5f6c:	8c e3       	ldi	r24, 0x3C	; 60
    5f6e:	97 e1       	ldi	r25, 0x17	; 23
    5f70:	0e 94 90 2b 	call	0x5720	; 0x5720 <get_menu_range>
    5f74:	29 83       	std	Y+1, r18	; 0x01
    5f76:	3a 83       	std	Y+2, r19	; 0x02
    5f78:	4b 83       	std	Y+3, r20	; 0x03
    5f7a:	5c 83       	std	Y+4, r21	; 0x04
    5f7c:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5f7e:	80 91 8d 07 	lds	r24, 0x078D
    5f82:	80 3e       	cpi	r24, 0xE0	; 224
    5f84:	e9 f4       	brne	.+58     	; 0x5fc0 <menu_flight+0x14a>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    5f86:	80 91 21 05 	lds	r24, 0x0521
    5f8a:	e8 2f       	mov	r30, r24
    5f8c:	f0 e0       	ldi	r31, 0x00	; 0
    5f8e:	e6 51       	subi	r30, 0x16	; 22
    5f90:	f9 4e       	sbci	r31, 0xE9	; 233
    5f92:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    5f94:	68 2f       	mov	r22, r24
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	60 5c       	subi	r22, 0xC0	; 192
    5f9a:	71 09       	sbc	r23, r1
    5f9c:	2e 81       	ldd	r18, Y+6	; 0x06
    5f9e:	3f 81       	ldd	r19, Y+7	; 0x07
    5fa0:	62 0f       	add	r22, r18
    5fa2:	73 1f       	adc	r23, r19
    5fa4:	1f 92       	push	r1
    5fa6:	1f 92       	push	r1
    5fa8:	81 2c       	mov	r8, r1
    5faa:	c1 2c       	mov	r12, r1
    5fac:	e9 80       	ldd	r14, Y+1	; 0x01
    5fae:	fa 80       	ldd	r15, Y+2	; 0x02
    5fb0:	0b 81       	ldd	r16, Y+3	; 0x03
    5fb2:	1c 81       	ldd	r17, Y+4	; 0x04
    5fb4:	2d 81       	ldd	r18, Y+5	; 0x05
    5fb6:	41 e0       	ldi	r20, 0x01	; 1
    5fb8:	0e 94 1c 2c 	call	0x5838	; 0x5838 <do_menu_item>
    5fbc:	0f 90       	pop	r0
    5fbe:	0f 90       	pop	r0
		}

		// Preset I-limits when gyro mode changes
		if (button == ENTER)
    5fc0:	80 91 8d 07 	lds	r24, 0x078D
    5fc4:	80 3e       	cpi	r24, 0xE0	; 224
    5fc6:	09 f0       	breq	.+2      	; 0x5fca <menu_flight+0x154>
    5fc8:	9b cf       	rjmp	.-202    	; 0x5f00 <menu_flight+0x8a>
		{
			// If roll gyro type has changed, reset to an appropriate start point
			if (temp_gyro_roll != Config.FlightMode[mode-1].Roll_type)
    5fca:	ee 85       	ldd	r30, Y+14	; 0x0e
    5fcc:	ff 85       	ldd	r31, Y+15	; 0x0f
    5fce:	80 81       	ld	r24, Z
    5fd0:	98 16       	cp	r9, r24
    5fd2:	49 f0       	breq	.+18     	; 0x5fe6 <menu_flight+0x170>
    5fd4:	f3 01       	movw	r30, r6
    5fd6:	e1 5a       	subi	r30, 0xA1	; 161
    5fd8:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				// Use Gyro type value to preset limits
				if(Config.FlightMode[mode-1].Roll_type == LOCK)
    5fda:	81 30       	cpi	r24, 0x01	; 1
    5fdc:	19 f4       	brne	.+6      	; 0x5fe4 <menu_flight+0x16e>
				{
					Config.FlightMode[mode - 1].Roll_limit = 125;
    5fde:	8d e7       	ldi	r24, 0x7D	; 125
    5fe0:	80 83       	st	Z, r24
    5fe2:	01 c0       	rjmp	.+2      	; 0x5fe6 <menu_flight+0x170>
				}
				else
				{
					Config.FlightMode[mode - 1].Roll_limit = 0;
    5fe4:	10 82       	st	Z, r1
				}
			}

			if (temp_gyro_pitch != Config.FlightMode[mode-1].Pitch_type)
    5fe6:	f3 01       	movw	r30, r6
    5fe8:	ee 59       	subi	r30, 0x9E	; 158
    5fea:	ff 4f       	sbci	r31, 0xFF	; 255
    5fec:	80 81       	ld	r24, Z
    5fee:	f9 85       	ldd	r31, Y+9	; 0x09
    5ff0:	f8 17       	cp	r31, r24
    5ff2:	49 f0       	breq	.+18     	; 0x6006 <menu_flight+0x190>
    5ff4:	f3 01       	movw	r30, r6
    5ff6:	ea 59       	subi	r30, 0x9A	; 154
    5ff8:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if(Config.FlightMode[mode-1].Pitch_type == LOCK)
    5ffa:	81 30       	cpi	r24, 0x01	; 1
    5ffc:	19 f4       	brne	.+6      	; 0x6004 <menu_flight+0x18e>
				{
					Config.FlightMode[mode - 1].Pitch_limit = 125;
    5ffe:	8d e7       	ldi	r24, 0x7D	; 125
    6000:	80 83       	st	Z, r24
    6002:	01 c0       	rjmp	.+2      	; 0x6006 <menu_flight+0x190>
				}
				else
				{
					Config.FlightMode[mode - 1].Pitch_limit = 0;
    6004:	10 82       	st	Z, r1
				}
			}

			if (temp_gyro_yaw != Config.FlightMode[mode-1].Yaw_type)
    6006:	f3 01       	movw	r30, r6
    6008:	e7 59       	subi	r30, 0x97	; 151
    600a:	ff 4f       	sbci	r31, 0xFF	; 255
    600c:	80 81       	ld	r24, Z
    600e:	28 85       	ldd	r18, Y+8	; 0x08
    6010:	28 17       	cp	r18, r24
    6012:	39 f0       	breq	.+14     	; 0x6022 <menu_flight+0x1ac>
    6014:	34 96       	adiw	r30, 0x04	; 4
			{
				if(Config.FlightMode[mode-1].Yaw_type == LOCK)
    6016:	81 30       	cpi	r24, 0x01	; 1
    6018:	19 f4       	brne	.+6      	; 0x6020 <menu_flight+0x1aa>
				{
					Config.FlightMode[mode - 1].Yaw_limit = 125;
    601a:	8d e7       	ldi	r24, 0x7D	; 125
    601c:	80 83       	st	Z, r24
    601e:	01 c0       	rjmp	.+2      	; 0x6022 <menu_flight+0x1ac>
				}
				else
				{
					Config.FlightMode[mode - 1].Yaw_limit = 0;
    6020:	10 82       	st	Z, r1
				}
			}

			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    6022:	0e 94 f6 33 	call	0x67ec	; 0x67ec <UpdateLimits>

			Save_Config_to_EEPROM(); // Save value and return
    6026:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    602a:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <Wait_BUTTON4>
    602e:	5e cf       	rjmp	.-324    	; 0x5eec <menu_flight+0x76>
		}
	}
}
    6030:	2f 96       	adiw	r28, 0x0f	; 15
    6032:	0f b6       	in	r0, 0x3f	; 63
    6034:	f8 94       	cli
    6036:	de bf       	out	0x3e, r29	; 62
    6038:	0f be       	out	0x3f, r0	; 63
    603a:	cd bf       	out	0x3d, r28	; 61
    603c:	df 91       	pop	r29
    603e:	cf 91       	pop	r28
    6040:	1f 91       	pop	r17
    6042:	0f 91       	pop	r16
    6044:	ff 90       	pop	r15
    6046:	ef 90       	pop	r14
    6048:	df 90       	pop	r13
    604a:	cf 90       	pop	r12
    604c:	bf 90       	pop	r11
    604e:	af 90       	pop	r10
    6050:	9f 90       	pop	r9
    6052:	8f 90       	pop	r8
    6054:	7f 90       	pop	r7
    6056:	6f 90       	pop	r6
    6058:	5f 90       	pop	r5
    605a:	4f 90       	pop	r4
    605c:	3f 90       	pop	r3
    605e:	2f 90       	pop	r2
    6060:	08 95       	ret

00006062 <do_main_menu_item>:
}


void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	fc 01       	movw	r30, r24
    6066:	ed 54       	subi	r30, 0x4D	; 77
    6068:	f1 09       	sbc	r31, r1
    606a:	e7 31       	cpi	r30, 0x17	; 23
    606c:	f1 05       	cpc	r31, r1
    606e:	b0 f5       	brcc	.+108    	; 0x60dc <do_main_menu_item+0x7a>
    6070:	e7 5b       	subi	r30, 0xB7	; 183
    6072:	ff 4f       	sbci	r31, 0xFF	; 255
    6074:	0c 94 93 42 	jmp	0x8526	; 0x8526 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(3); 		// 1.General
    6078:	83 e0       	ldi	r24, 0x03	; 3
    607a:	01 c0       	rjmp	.+2      	; 0x607e <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	0c 94 a7 32 	jmp	0x654e	; 0x654e <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_sticks(); 		// 3.Stick polarity	
    6082:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <Display_sticks>
			break;
		case MAINSTART+3:
			Display_rcinput();		// 4.RX inputs
    6086:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <Display_rcinput>
			break;
		case MAINSTART+4:
			menu_flight(1);			// 5.Flight profile 1
    608a:	81 e0       	ldi	r24, 0x01	; 1
    608c:	01 c0       	rjmp	.+2      	; 0x6090 <do_main_menu_item+0x2e>
			break;
		case MAINSTART+5:
			menu_flight(2); 		// 6.Flight profile 2
    608e:	82 e0       	ldi	r24, 0x02	; 2
    6090:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <menu_flight>
			break;
		case MAINSTART+6:
			menu_flight(3); 		// 7.Flight profile 3
    6094:	83 e0       	ldi	r24, 0x03	; 3
    6096:	fc cf       	rjmp	.-8      	; 0x6090 <do_main_menu_item+0x2e>
			break;
		case MAINSTART+7:
			Display_sensors();		// 8.Sensor calibration
    6098:	0c 94 87 12 	jmp	0x250e	; 0x250e <Display_sensors>
			break;
		case MAINSTART+8:
			Display_balance();		// 9.Level meter
    609c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <Display_balance>
			break;
		case MAINSTART+9:
			menu_mixer(0);			// 9.OUT1 Mixer
    60a0:	80 e0       	ldi	r24, 0x00	; 0
    60a2:	0d c0       	rjmp	.+26     	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+10:
			menu_mixer(1);			// 10.OUT2 Mixer
    60a4:	81 e0       	ldi	r24, 0x01	; 1
    60a6:	0b c0       	rjmp	.+22     	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+11:
			menu_mixer(2);			// 11.OUT3 Mixer
    60a8:	82 e0       	ldi	r24, 0x02	; 2
    60aa:	09 c0       	rjmp	.+18     	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+12:
			menu_mixer(3);			// 12.OUT4 Mixer
    60ac:	83 e0       	ldi	r24, 0x03	; 3
    60ae:	07 c0       	rjmp	.+14     	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+13:
			menu_mixer(4);			// 13.OUT5 Mixer
    60b0:	84 e0       	ldi	r24, 0x04	; 4
    60b2:	05 c0       	rjmp	.+10     	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+14:
			menu_mixer(5);			// 14.OUT6 Mixer
    60b4:	85 e0       	ldi	r24, 0x05	; 5
    60b6:	03 c0       	rjmp	.+6      	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+15:
			menu_mixer(6);			// 15.OUT7 Mixer
    60b8:	86 e0       	ldi	r24, 0x06	; 6
    60ba:	01 c0       	rjmp	.+2      	; 0x60be <do_main_menu_item+0x5c>
			break;
		case MAINSTART+16:
			menu_mixer(7);			// 16.OUT8 Mixer
    60bc:	87 e0       	ldi	r24, 0x07	; 7
    60be:	0c 94 08 31 	jmp	0x6210	; 0x6210 <menu_mixer>
			break;
		case MAINSTART+17:
			menu_servo_setup(1);	// 12.Servo direction
    60c2:	81 e0       	ldi	r24, 0x01	; 1
    60c4:	09 c0       	rjmp	.+18     	; 0x60d8 <do_main_menu_item+0x76>
			break;
		case MAINSTART+18: 
			menu_servo_setup(2); 	// 13.Servo trim (%)
    60c6:	82 e0       	ldi	r24, 0x02	; 2
    60c8:	07 c0       	rjmp	.+14     	; 0x60d8 <do_main_menu_item+0x76>
			break;
		case MAINSTART+19:
			menu_servo_setup(3); 	// 14.Neg. Servo trvl. (%)
    60ca:	83 e0       	ldi	r24, 0x03	; 3
    60cc:	05 c0       	rjmp	.+10     	; 0x60d8 <do_main_menu_item+0x76>
			break;
		case MAINSTART+20:
			menu_servo_setup(4); 	// 15.Pos. Servo trvl. (%)
    60ce:	84 e0       	ldi	r24, 0x04	; 4
    60d0:	03 c0       	rjmp	.+6      	; 0x60d8 <do_main_menu_item+0x76>
			break;
		case MAINSTART+21:
			menu_rc_setup(2); 		// 16.Failsafe settings
    60d2:	82 e0       	ldi	r24, 0x02	; 2
    60d4:	d4 cf       	rjmp	.-88     	; 0x607e <do_main_menu_item+0x1c>
			break;
		case MAINSTART+22:
			menu_servo_setup(5); 	// 17.Failsafe positions
    60d6:	85 e0       	ldi	r24, 0x05	; 5
    60d8:	0c 94 9d 31 	jmp	0x633a	; 0x633a <menu_servo_setup>
    60dc:	08 95       	ret

000060de <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    60de:	1f 99       	sbic	0x03, 7	; 3
    60e0:	0a c0       	rjmp	.+20     	; 0x60f6 <Wait_BUTTON1+0x18>
    60e2:	2f e3       	ldi	r18, 0x3F	; 63
    60e4:	8d e0       	ldi	r24, 0x0D	; 13
    60e6:	93 e0       	ldi	r25, 0x03	; 3
    60e8:	21 50       	subi	r18, 0x01	; 1
    60ea:	80 40       	sbci	r24, 0x00	; 0
    60ec:	90 40       	sbci	r25, 0x00	; 0
    60ee:	e1 f7       	brne	.-8      	; 0x60e8 <Wait_BUTTON1+0xa>
    60f0:	00 c0       	rjmp	.+0      	; 0x60f2 <Wait_BUTTON1+0x14>
    60f2:	00 00       	nop
    60f4:	f4 cf       	rjmp	.-24     	; 0x60de <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    60f6:	08 95       	ret

000060f8 <menu_main>:
uint8_t main_top = MAINSTART;
uint8_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    60f8:	af 92       	push	r10
    60fa:	bf 92       	push	r11
    60fc:	cf 92       	push	r12
    60fe:	df 92       	push	r13
    6100:	ef 92       	push	r14
    6102:	ff 92       	push	r15
    6104:	0f 93       	push	r16
    6106:	1f 93       	push	r17
    6108:	cf 93       	push	r28
    610a:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint8_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    610c:	80 ef       	ldi	r24, 0xF0	; 240
    610e:	80 93 8d 07 	sts	0x078D, r24

	// Wait until user's finger is off button 1
	while(BUTTON1 == 0)
    6112:	1f 99       	sbic	0x03, 7	; 3
    6114:	0a c0       	rjmp	.+20     	; 0x612a <menu_main+0x32>
    6116:	2f e3       	ldi	r18, 0x3F	; 63
    6118:	8d e0       	ldi	r24, 0x0D	; 13
    611a:	93 e0       	ldi	r25, 0x03	; 3
    611c:	21 50       	subi	r18, 0x01	; 1
    611e:	80 40       	sbci	r24, 0x00	; 0
    6120:	90 40       	sbci	r25, 0x00	; 0
    6122:	e1 f7       	brne	.-8      	; 0x611c <menu_main+0x24>
    6124:	00 c0       	rjmp	.+0      	; 0x6126 <menu_main+0x2e>
    6126:	00 00       	nop
    6128:	f4 cf       	rjmp	.-24     	; 0x6112 <menu_main+0x1a>
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);

		// If main menu item has changed, reset submenu positions
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    612a:	23 e0       	ldi	r18, 0x03	; 3
    612c:	b2 2e       	mov	r11, r18
		
		// If ENTER pressed, jump to menu
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    612e:	30 ef       	ldi	r19, 0xF0	; 240
    6130:	a3 2e       	mov	r10, r19
	while(BUTTON1 == 0)
	{
		_delay_ms(50);
	}

	while(button != BACK)
    6132:	80 91 8d 07 	lds	r24, 0x078D
    6136:	80 37       	cpi	r24, 0x70	; 112
    6138:	09 f4       	brne	.+2      	; 0x613c <menu_main+0x44>
    613a:	52 c0       	rjmp	.+164    	; 0x61e0 <menu_main+0xe8>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    613c:	80 e0       	ldi	r24, 0x00	; 0
    613e:	91 e0       	ldi	r25, 0x01	; 1
    6140:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    6144:	80 e0       	ldi	r24, 0x00	; 0
    6146:	0e 94 43 2b 	call	0x5686	; 0x5686 <print_menu_frame>
    614a:	c0 e0       	ldi	r28, 0x00	; 0
    614c:	d0 e0       	ldi	r29, 0x00	; 0
    614e:	fe 01       	movw	r30, r28
    6150:	e8 5c       	subi	r30, 0xC8	; 200
    6152:	f8 4e       	sbci	r31, 0xE8	; 232
		
		for (uint8_t i = 0; i < 4; i++)
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    6154:	24 91       	lpm	r18, Z
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	80 91 06 05 	lds	r24, 0x0506
    615c:	4a e0       	ldi	r20, 0x0A	; 10
    615e:	50 e0       	ldi	r21, 0x00	; 0
    6160:	6e e1       	ldi	r22, 0x1E	; 30
    6162:	7a e0       	ldi	r23, 0x0A	; 10
    6164:	8c 0f       	add	r24, r28
    6166:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <LCD_Display_Text>
    616a:	21 96       	adiw	r28, 0x01	; 1
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint8_t i = 0; i < 4; i++)
    616c:	c4 30       	cpi	r28, 0x04	; 4
    616e:	d1 05       	cpc	r29, r1
    6170:	71 f7       	brne	.-36     	; 0x614e <menu_main+0x56>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    6172:	80 91 05 05 	lds	r24, 0x0505
    6176:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <print_cursor>
		write_buffer(buffer);
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	91 e0       	ldi	r25, 0x01	; 1
    617e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6182:	81 e0       	ldi	r24, 0x01	; 1
    6184:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    6188:	83 e2       	ldi	r24, 0x23	; 35
    618a:	c8 2e       	mov	r12, r24
    618c:	85 e0       	ldi	r24, 0x05	; 5
    618e:	d8 2e       	mov	r13, r24
    6190:	96 e0       	ldi	r25, 0x06	; 6
    6192:	e9 2e       	mov	r14, r25
    6194:	95 e0       	ldi	r25, 0x05	; 5
    6196:	f9 2e       	mov	r15, r25
    6198:	05 e0       	ldi	r16, 0x05	; 5
    619a:	15 e0       	ldi	r17, 0x05	; 5
    619c:	20 91 8d 07 	lds	r18, 0x078D
    61a0:	40 e0       	ldi	r20, 0x00	; 0
    61a2:	6d e4       	ldi	r22, 0x4D	; 77
    61a4:	87 e1       	ldi	r24, 0x17	; 23
    61a6:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <update_menu>

		// If main menu item has changed, reset submenu positions
		if (main_temp != old_menu)
    61aa:	80 91 23 05 	lds	r24, 0x0523
    61ae:	90 91 22 05 	lds	r25, 0x0522
    61b2:	89 17       	cp	r24, r25
    61b4:	49 f0       	breq	.+18     	; 0x61c8 <menu_main+0xd0>
		{
			cursor = LINE0;
    61b6:	b0 92 04 05 	sts	0x0504, r11
			menu_temp = 0;
    61ba:	10 92 21 05 	sts	0x0521, r1
			old_menu = main_temp;
    61be:	80 93 22 05 	sts	0x0522, r24
			menu_flag = 1;
    61c2:	91 e0       	ldi	r25, 0x01	; 1
    61c4:	90 93 8f 07 	sts	0x078F, r25
		}
		
		// If ENTER pressed, jump to menu
		if (button == ENTER)
    61c8:	90 91 8d 07 	lds	r25, 0x078D
    61cc:	90 3e       	cpi	r25, 0xE0	; 224
    61ce:	09 f0       	breq	.+2      	; 0x61d2 <menu_main+0xda>
    61d0:	b0 cf       	rjmp	.-160    	; 0x6132 <menu_main+0x3a>
		{
			do_main_menu_item(main_temp);
    61d2:	0e 94 31 30 	call	0x6062	; 0x6062 <do_main_menu_item>
			button = NONE;
    61d6:	a0 92 8d 07 	sts	0x078D, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    61da:	0e 94 6f 30 	call	0x60de	; 0x60de <Wait_BUTTON1>
    61de:	a9 cf       	rjmp	.-174    	; 0x6132 <menu_main+0x3a>
		}
	}
}
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	1f 91       	pop	r17
    61e6:	0f 91       	pop	r16
    61e8:	ff 90       	pop	r15
    61ea:	ef 90       	pop	r14
    61ec:	df 90       	pop	r13
    61ee:	cf 90       	pop	r12
    61f0:	bf 90       	pop	r11
    61f2:	af 90       	pop	r10
    61f4:	08 95       	ret

000061f6 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    61f6:	1c 99       	sbic	0x03, 4	; 3
    61f8:	0a c0       	rjmp	.+20     	; 0x620e <Wait_BUTTON4+0x18>
    61fa:	2f e3       	ldi	r18, 0x3F	; 63
    61fc:	8d e0       	ldi	r24, 0x0D	; 13
    61fe:	93 e0       	ldi	r25, 0x03	; 3
    6200:	21 50       	subi	r18, 0x01	; 1
    6202:	80 40       	sbci	r24, 0x00	; 0
    6204:	90 40       	sbci	r25, 0x00	; 0
    6206:	e1 f7       	brne	.-8      	; 0x6200 <Wait_BUTTON4+0xa>
    6208:	00 c0       	rjmp	.+0      	; 0x620a <Wait_BUTTON4+0x14>
    620a:	00 00       	nop
    620c:	f4 cf       	rjmp	.-24     	; 0x61f6 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    620e:	08 95       	ret

00006210 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    6210:	6f 92       	push	r6
    6212:	7f 92       	push	r7
    6214:	8f 92       	push	r8
    6216:	af 92       	push	r10
    6218:	bf 92       	push	r11
    621a:	cf 92       	push	r12
    621c:	df 92       	push	r13
    621e:	ef 92       	push	r14
    6220:	ff 92       	push	r15
    6222:	0f 93       	push	r16
    6224:	1f 93       	push	r17
    6226:	cf 93       	push	r28
    6228:	df 93       	push	r29
    622a:	00 d0       	rcall	.+0      	; 0x622c <menu_mixer+0x1c>
    622c:	00 d0       	rcall	.+0      	; 0x622e <menu_mixer+0x1e>
    622e:	1f 92       	push	r1
    6230:	cd b7       	in	r28, 0x3d	; 61
    6232:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6234:	90 91 8f 07 	lds	r25, 0x078F
    6238:	99 23       	and	r25, r25
    623a:	29 f0       	breq	.+10     	; 0x6246 <menu_mixer+0x36>
	{
		sub_top = MIXERSTART;
    623c:	96 ed       	ldi	r25, 0xD6	; 214
    623e:	90 93 24 05 	sts	0x0524, r25
		menu_flag = 0;
    6242:	10 92 8f 07 	sts	0x078F, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    6246:	90 e1       	ldi	r25, 0x10	; 16
    6248:	89 9f       	mul	r24, r25
    624a:	30 01       	movw	r6, r0
    624c:	11 24       	eor	r1, r1
    624e:	c3 01       	movw	r24, r6
    6250:	8e 57       	subi	r24, 0x7E	; 126
    6252:	99 4f       	sbci	r25, 0xF9	; 249
    6254:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6256:	80 91 8d 07 	lds	r24, 0x078D
    625a:	80 37       	cpi	r24, 0x70	; 112
    625c:	09 f4       	brne	.+2      	; 0x6260 <menu_mixer+0x50>
    625e:	5a c0       	rjmp	.+180    	; 0x6314 <menu_mixer+0x104>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, 1, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    6260:	80 90 04 05 	lds	r8, 0x0504
    6264:	86 e0       	ldi	r24, 0x06	; 6
    6266:	a8 2e       	mov	r10, r24
    6268:	88 e1       	ldi	r24, 0x18	; 24
    626a:	b8 2e       	mov	r11, r24
    626c:	90 e5       	ldi	r25, 0x50	; 80
    626e:	c9 2e       	mov	r12, r25
    6270:	e1 2c       	mov	r14, r1
    6272:	00 ec       	ldi	r16, 0xC0	; 192
    6274:	17 e1       	ldi	r17, 0x17	; 23
    6276:	21 e0       	ldi	r18, 0x01	; 1
    6278:	a3 01       	movw	r20, r6
    627a:	66 ed       	ldi	r22, 0xD6	; 214
    627c:	80 91 24 05 	lds	r24, 0x0524
    6280:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6284:	21 e2       	ldi	r18, 0x21	; 33
    6286:	c2 2e       	mov	r12, r18
    6288:	25 e0       	ldi	r18, 0x05	; 5
    628a:	d2 2e       	mov	r13, r18
    628c:	34 e2       	ldi	r19, 0x24	; 36
    628e:	e3 2e       	mov	r14, r19
    6290:	35 e0       	ldi	r19, 0x05	; 5
    6292:	f3 2e       	mov	r15, r19
    6294:	04 e0       	ldi	r16, 0x04	; 4
    6296:	15 e0       	ldi	r17, 0x05	; 5
    6298:	20 91 8d 07 	lds	r18, 0x078D
    629c:	40 e0       	ldi	r20, 0x00	; 0
    629e:	66 ed       	ldi	r22, 0xD6	; 214
    62a0:	8e e0       	ldi	r24, 0x0E	; 14
    62a2:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    62a6:	60 91 21 05 	lds	r22, 0x0521
    62aa:	66 5d       	subi	r22, 0xD6	; 214
    62ac:	80 ec       	ldi	r24, 0xC0	; 192
    62ae:	97 e1       	ldi	r25, 0x17	; 23
    62b0:	0e 94 90 2b 	call	0x5720	; 0x5720 <get_menu_range>
    62b4:	29 83       	std	Y+1, r18	; 0x01
    62b6:	3a 83       	std	Y+2, r19	; 0x02
    62b8:	4b 83       	std	Y+3, r20	; 0x03
    62ba:	5c 83       	std	Y+4, r21	; 0x04
    62bc:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    62be:	80 91 8d 07 	lds	r24, 0x078D
    62c2:	80 3e       	cpi	r24, 0xE0	; 224
    62c4:	d9 f4       	brne	.+54     	; 0x62fc <menu_mixer+0xec>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    62c6:	80 91 21 05 	lds	r24, 0x0521
    62ca:	e8 2f       	mov	r30, r24
    62cc:	f0 e0       	ldi	r31, 0x00	; 0
    62ce:	e0 5d       	subi	r30, 0xD0	; 208
    62d0:	f8 4e       	sbci	r31, 0xE8	; 232
    62d2:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    62d4:	68 2f       	mov	r22, r24
    62d6:	70 e0       	ldi	r23, 0x00	; 0
    62d8:	66 5d       	subi	r22, 0xD6	; 214
    62da:	71 09       	sbc	r23, r1
    62dc:	66 0d       	add	r22, r6
    62de:	77 1d       	adc	r23, r7
    62e0:	1f 92       	push	r1
    62e2:	1f 92       	push	r1
    62e4:	81 2c       	mov	r8, r1
    62e6:	c1 2c       	mov	r12, r1
    62e8:	e9 80       	ldd	r14, Y+1	; 0x01
    62ea:	fa 80       	ldd	r15, Y+2	; 0x02
    62ec:	0b 81       	ldd	r16, Y+3	; 0x03
    62ee:	1c 81       	ldd	r17, Y+4	; 0x04
    62f0:	2d 81       	ldd	r18, Y+5	; 0x05
    62f2:	41 e0       	ldi	r20, 0x01	; 1
    62f4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <do_menu_item>
    62f8:	0f 90       	pop	r0
    62fa:	0f 90       	pop	r0
		}

		// Save and exit
		if (button == ENTER)
    62fc:	80 91 8d 07 	lds	r24, 0x078D
    6300:	80 3e       	cpi	r24, 0xE0	; 224
    6302:	09 f0       	breq	.+2      	; 0x6306 <menu_mixer+0xf6>
    6304:	a8 cf       	rjmp	.-176    	; 0x6256 <menu_mixer+0x46>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    6306:	0e 94 f6 33 	call	0x67ec	; 0x67ec <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    630a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    630e:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <Wait_BUTTON4>
    6312:	a1 cf       	rjmp	.-190    	; 0x6256 <menu_mixer+0x46>
		}
	} // while(button != BACK)
}
    6314:	0f 90       	pop	r0
    6316:	0f 90       	pop	r0
    6318:	0f 90       	pop	r0
    631a:	0f 90       	pop	r0
    631c:	0f 90       	pop	r0
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	1f 91       	pop	r17
    6324:	0f 91       	pop	r16
    6326:	ff 90       	pop	r15
    6328:	ef 90       	pop	r14
    632a:	df 90       	pop	r13
    632c:	cf 90       	pop	r12
    632e:	bf 90       	pop	r11
    6330:	af 90       	pop	r10
    6332:	8f 90       	pop	r8
    6334:	7f 90       	pop	r7
    6336:	6f 90       	pop	r6
    6338:	08 95       	ret

0000633a <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    633a:	2f 92       	push	r2
    633c:	3f 92       	push	r3
    633e:	4f 92       	push	r4
    6340:	5f 92       	push	r5
    6342:	6f 92       	push	r6
    6344:	7f 92       	push	r7
    6346:	8f 92       	push	r8
    6348:	9f 92       	push	r9
    634a:	af 92       	push	r10
    634c:	bf 92       	push	r11
    634e:	cf 92       	push	r12
    6350:	df 92       	push	r13
    6352:	ef 92       	push	r14
    6354:	ff 92       	push	r15
    6356:	0f 93       	push	r16
    6358:	1f 93       	push	r17
    635a:	cf 93       	push	r28
    635c:	df 93       	push	r29
    635e:	cd b7       	in	r28, 0x3d	; 61
    6360:	de b7       	in	r29, 0x3e	; 62
    6362:	29 97       	sbiw	r28, 0x09	; 9
    6364:	0f b6       	in	r0, 0x3f	; 63
    6366:	f8 94       	cli
    6368:	de bf       	out	0x3e, r29	; 62
    636a:	0f be       	out	0x3f, r0	; 63
    636c:	cd bf       	out	0x3d, r28	; 61
    636e:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6370:	80 91 8f 07 	lds	r24, 0x078F
    6374:	88 23       	and	r24, r24
    6376:	29 f0       	breq	.+10     	; 0x6382 <menu_servo_setup+0x48>
	{
		sub_top = SERVOSTART;
    6378:	88 ee       	ldi	r24, 0xE8	; 232
    637a:	80 93 24 05 	sts	0x0524, r24
		menu_flag = 0;
    637e:	10 92 8f 07 	sts	0x078F, r1
			}

			// Do not allow servo enable for throttles to prevent accidents
			if ((Config.Channel[menu_temp - SERVOSTART].source_a == THROTTLE) || (Config.Channel[menu_temp - SERVOSTART].source_b == THROTTLE))
			{
				servo_enable = false;
    6382:	1f 82       	std	Y+7, r1	; 0x07
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6384:	2e 81       	ldd	r18, Y+6	; 0x06
    6386:	82 2f       	mov	r24, r18
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	01 97       	sbiw	r24, 0x01	; 1
    638c:	25 e0       	ldi	r18, 0x05	; 5
    638e:	28 9f       	mul	r18, r24
    6390:	20 01       	movw	r4, r0
    6392:	29 9f       	mul	r18, r25
    6394:	50 0c       	add	r5, r0
    6396:	11 24       	eor	r1, r1
    6398:	92 01       	movw	r18, r4
    639a:	2c 5e       	subi	r18, 0xEC	; 236
    639c:	37 4e       	sbci	r19, 0xE7	; 231
    639e:	29 01       	movw	r4, r18
    63a0:	1c 01       	movw	r2, r24
    63a2:	a3 e0       	ldi	r26, 0x03	; 3
    63a4:	22 0c       	add	r2, r2
    63a6:	33 1c       	adc	r3, r3
    63a8:	aa 95       	dec	r26
    63aa:	e1 f7       	brne	.-8      	; 0x63a4 <menu_servo_setup+0x6a>
    63ac:	c1 01       	movw	r24, r2
    63ae:	83 5d       	subi	r24, 0xD3	; 211
    63b0:	97 4e       	sbci	r25, 0xE7	; 231
    63b2:	99 87       	std	Y+9, r25	; 0x09
    63b4:	88 87       	std	Y+8, r24	; 0x08
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Offset, 3 = Min, 4 = Max, 5 = Failsafe
	while(button != BACK)
    63b6:	80 91 8d 07 	lds	r24, 0x078D
    63ba:	80 37       	cpi	r24, 0x70	; 112
    63bc:	09 f4       	brne	.+2      	; 0x63c0 <menu_servo_setup+0x86>
    63be:	ae c0       	rjmp	.+348    	; 0x651c <menu_servo_setup+0x1e2>
    63c0:	88 e0       	ldi	r24, 0x08	; 8
    63c2:	91 2c       	mov	r9, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    63c4:	9e 81       	ldd	r25, Y+6	; 0x06
    63c6:	93 30       	cpi	r25, 0x03	; 3
    63c8:	c1 f0       	breq	.+48     	; 0x63fa <menu_servo_setup+0xc0>
    63ca:	48 f4       	brcc	.+18     	; 0x63de <menu_servo_setup+0xa4>
    63cc:	92 30       	cpi	r25, 0x02	; 2
    63ce:	39 f5       	brne	.+78     	; 0x641e <menu_servo_setup+0xe4>
				case 1:
					value_ptr = &Config.Servo_reverse[0];
					break;
				case 2:
					value_ptr = &Config.Offset[0];
					servo_enable = true;
    63d0:	99 24       	eor	r9, r9
    63d2:	93 94       	inc	r9
			{
				case 1:
					value_ptr = &Config.Servo_reverse[0];
					break;
				case 2:
					value_ptr = &Config.Offset[0];
    63d4:	f8 e0       	ldi	r31, 0x08	; 8
    63d6:	6f 2e       	mov	r6, r31
    63d8:	f7 e0       	ldi	r31, 0x07	; 7
    63da:	7f 2e       	mov	r7, r31
    63dc:	24 c0       	rjmp	.+72     	; 0x6426 <menu_servo_setup+0xec>
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    63de:	2e 81       	ldd	r18, Y+6	; 0x06
    63e0:	24 30       	cpi	r18, 0x04	; 4
    63e2:	a1 f0       	breq	.+40     	; 0x640c <menu_servo_setup+0xd2>
    63e4:	25 30       	cpi	r18, 0x05	; 5
    63e6:	d9 f4       	brne	.+54     	; 0x641e <menu_servo_setup+0xe4>
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
					servo_enable = true;
					zero_setting = true;
    63e8:	21 e0       	ldi	r18, 0x01	; 1
    63ea:	2f 83       	std	Y+7, r18	; 0x07
					servo_enable = true;
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
					servo_enable = true;
    63ec:	99 24       	eor	r9, r9
    63ee:	93 94       	inc	r9
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 5:
					value_ptr = &Config.Failsafe[0];
    63f0:	60 e2       	ldi	r22, 0x20	; 32
    63f2:	66 2e       	mov	r6, r22
    63f4:	67 e0       	ldi	r22, 0x07	; 7
    63f6:	76 2e       	mov	r7, r22
					servo_enable = true;
					zero_setting = true;
					break;
    63f8:	16 c0       	rjmp	.+44     	; 0x6426 <menu_servo_setup+0xec>
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    63fa:	31 e0       	ldi	r19, 0x01	; 1
    63fc:	3f 83       	std	Y+7, r19	; 0x07
					value_ptr = &Config.Offset[0];
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    63fe:	99 24       	eor	r9, r9
    6400:	93 94       	inc	r9
				case 2:
					value_ptr = &Config.Offset[0];
					servo_enable = true;
					break;
				case 3:
					value_ptr = &Config.min_travel[0];
    6402:	e0 e1       	ldi	r30, 0x10	; 16
    6404:	6e 2e       	mov	r6, r30
    6406:	e7 e0       	ldi	r30, 0x07	; 7
    6408:	7e 2e       	mov	r7, r30
					servo_enable = true;
					zero_setting = true;
					break;
    640a:	0d c0       	rjmp	.+26     	; 0x6426 <menu_servo_setup+0xec>
				case 4:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    640c:	91 e0       	ldi	r25, 0x01	; 1
    640e:	9f 83       	std	Y+7, r25	; 0x07
					servo_enable = true;
					zero_setting = true;
					break;
				case 4:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    6410:	99 24       	eor	r9, r9
    6412:	93 94       	inc	r9
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 4:
					value_ptr = &Config.max_travel[0];
    6414:	78 e1       	ldi	r23, 0x18	; 24
    6416:	67 2e       	mov	r6, r23
    6418:	77 e0       	ldi	r23, 0x07	; 7
    641a:	77 2e       	mov	r7, r23
					servo_enable = true;
					zero_setting = true;
					break;
    641c:	04 c0       	rjmp	.+8      	; 0x6426 <menu_servo_setup+0xec>
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
			{
				case 1:
					value_ptr = &Config.Servo_reverse[0];
    641e:	50 e0       	ldi	r21, 0x00	; 0
    6420:	65 2e       	mov	r6, r21
    6422:	57 e0       	ldi	r21, 0x07	; 7
    6424:	75 2e       	mov	r7, r21
    6426:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Offset, 3 = Min, 4 = Max, 5 = Failsafe
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    6428:	69 f6       	brne	.-102    	; 0x63c4 <menu_servo_setup+0x8a>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    642a:	80 90 04 05 	lds	r8, 0x0504
    642e:	a8 84       	ldd	r10, Y+8	; 0x08
    6430:	b9 84       	ldd	r11, Y+9	; 0x09
    6432:	20 e5       	ldi	r18, 0x50	; 80
    6434:	c2 2e       	mov	r12, r18
    6436:	ee 24       	eor	r14, r14
    6438:	e3 94       	inc	r14
    643a:	82 01       	movw	r16, r4
    643c:	21 e0       	ldi	r18, 0x01	; 1
    643e:	a3 01       	movw	r20, r6
    6440:	68 ee       	ldi	r22, 0xE8	; 232
    6442:	80 91 24 05 	lds	r24, 0x0524
    6446:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    644a:	31 e2       	ldi	r19, 0x21	; 33
    644c:	c3 2e       	mov	r12, r19
    644e:	35 e0       	ldi	r19, 0x05	; 5
    6450:	d3 2e       	mov	r13, r19
    6452:	44 e2       	ldi	r20, 0x24	; 36
    6454:	e4 2e       	mov	r14, r20
    6456:	45 e0       	ldi	r20, 0x05	; 5
    6458:	f4 2e       	mov	r15, r20
    645a:	04 e0       	ldi	r16, 0x04	; 4
    645c:	15 e0       	ldi	r17, 0x05	; 5
    645e:	20 91 8d 07 	lds	r18, 0x078D
    6462:	40 e0       	ldi	r20, 0x00	; 0
    6464:	68 ee       	ldi	r22, 0xE8	; 232
    6466:	88 e0       	ldi	r24, 0x08	; 8
    6468:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    646c:	60 e0       	ldi	r22, 0x00	; 0
    646e:	c2 01       	movw	r24, r4
    6470:	0e 94 90 2b 	call	0x5720	; 0x5720 <get_menu_range>
    6474:	29 83       	std	Y+1, r18	; 0x01
    6476:	3a 83       	std	Y+2, r19	; 0x02
    6478:	4b 83       	std	Y+3, r20	; 0x03
    647a:	5c 83       	std	Y+4, r21	; 0x04
    647c:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    647e:	80 91 8d 07 	lds	r24, 0x078D
    6482:	80 3e       	cpi	r24, 0xE0	; 224
    6484:	09 f0       	breq	.+2      	; 0x6488 <menu_servo_setup+0x14e>
    6486:	3e c0       	rjmp	.+124    	; 0x6504 <menu_servo_setup+0x1ca>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    6488:	80 91 21 05 	lds	r24, 0x0521
    648c:	28 2f       	mov	r18, r24
    648e:	30 e0       	ldi	r19, 0x00	; 0
    6490:	28 5e       	subi	r18, 0xE8	; 232
    6492:	31 09       	sbc	r19, r1
    6494:	f9 01       	movw	r30, r18
    6496:	e2 0d       	add	r30, r2
    6498:	f3 1d       	adc	r31, r3
    649a:	e3 5d       	subi	r30, 0xD3	; 211
    649c:	f7 4e       	sbci	r31, 0xE7	; 231
    649e:	a4 90       	lpm	r10, Z
    64a0:	68 2f       	mov	r22, r24
    64a2:	70 e0       	ldi	r23, 0x00	; 0
			// Zero limits if adjusting
			if (zero_setting)
    64a4:	9f 81       	ldd	r25, Y+7	; 0x07
    64a6:	99 23       	and	r25, r25
    64a8:	31 f0       	breq	.+12     	; 0x64b6 <menu_servo_setup+0x17c>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    64aa:	d3 01       	movw	r26, r6
    64ac:	a6 0f       	add	r26, r22
    64ae:	b7 1f       	adc	r27, r23
    64b0:	a8 5e       	subi	r26, 0xE8	; 232
    64b2:	b1 09       	sbc	r27, r1
    64b4:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttles to prevent accidents
			if ((Config.Channel[menu_temp - SERVOSTART].source_a == THROTTLE) || (Config.Channel[menu_temp - SERVOSTART].source_b == THROTTLE))
    64b6:	a9 01       	movw	r20, r18
    64b8:	94 e0       	ldi	r25, 0x04	; 4
    64ba:	44 0f       	add	r20, r20
    64bc:	55 1f       	adc	r21, r21
    64be:	9a 95       	dec	r25
    64c0:	e1 f7       	brne	.-8      	; 0x64ba <menu_servo_setup+0x180>
    64c2:	47 54       	subi	r20, 0x47	; 71
    64c4:	5a 4f       	sbci	r21, 0xFA	; 250
    64c6:	da 01       	movw	r26, r20
    64c8:	a6 53       	subi	r26, 0x36	; 54
    64ca:	bf 4f       	sbci	r27, 0xFF	; 255
    64cc:	9c 91       	ld	r25, X
    64ce:	99 23       	and	r25, r25
    64d0:	31 f0       	breq	.+12     	; 0x64de <menu_servo_setup+0x1a4>
    64d2:	fa 01       	movw	r30, r20
    64d4:	e4 53       	subi	r30, 0x34	; 52
    64d6:	ff 4f       	sbci	r31, 0xFF	; 255
    64d8:	90 81       	ld	r25, Z
    64da:	91 11       	cpse	r25, r1
    64dc:	01 c0       	rjmp	.+2      	; 0x64e0 <menu_servo_setup+0x1a6>
			{
				servo_enable = false;
    64de:	91 2c       	mov	r9, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    64e0:	68 5e       	subi	r22, 0xE8	; 232
    64e2:	71 09       	sbc	r23, r1
    64e4:	66 0d       	add	r22, r6
    64e6:	77 1d       	adc	r23, r7
    64e8:	3f 93       	push	r19
    64ea:	2f 93       	push	r18
    64ec:	89 2c       	mov	r8, r9
    64ee:	c1 2c       	mov	r12, r1
    64f0:	e9 80       	ldd	r14, Y+1	; 0x01
    64f2:	fa 80       	ldd	r15, Y+2	; 0x02
    64f4:	0b 81       	ldd	r16, Y+3	; 0x03
    64f6:	1c 81       	ldd	r17, Y+4	; 0x04
    64f8:	2d 81       	ldd	r18, Y+5	; 0x05
    64fa:	41 e0       	ldi	r20, 0x01	; 1
    64fc:	0e 94 1c 2c 	call	0x5838	; 0x5838 <do_menu_item>
    6500:	0f 90       	pop	r0
    6502:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    6504:	80 91 8d 07 	lds	r24, 0x078D
    6508:	80 3e       	cpi	r24, 0xE0	; 224
    650a:	09 f0       	breq	.+2      	; 0x650e <menu_servo_setup+0x1d4>
    650c:	54 cf       	rjmp	.-344    	; 0x63b6 <menu_servo_setup+0x7c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    650e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <UpdateLimits>
						
			Save_Config_to_EEPROM(); // Save value and return
    6512:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6516:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <Wait_BUTTON4>
    651a:	4d cf       	rjmp	.-358    	; 0x63b6 <menu_servo_setup+0x7c>
		}
	}
}
    651c:	29 96       	adiw	r28, 0x09	; 9
    651e:	0f b6       	in	r0, 0x3f	; 63
    6520:	f8 94       	cli
    6522:	de bf       	out	0x3e, r29	; 62
    6524:	0f be       	out	0x3f, r0	; 63
    6526:	cd bf       	out	0x3d, r28	; 61
    6528:	df 91       	pop	r29
    652a:	cf 91       	pop	r28
    652c:	1f 91       	pop	r17
    652e:	0f 91       	pop	r16
    6530:	ff 90       	pop	r15
    6532:	ef 90       	pop	r14
    6534:	df 90       	pop	r13
    6536:	cf 90       	pop	r12
    6538:	bf 90       	pop	r11
    653a:	af 90       	pop	r10
    653c:	9f 90       	pop	r9
    653e:	8f 90       	pop	r8
    6540:	7f 90       	pop	r7
    6542:	6f 90       	pop	r6
    6544:	5f 90       	pop	r5
    6546:	4f 90       	pop	r4
    6548:	3f 90       	pop	r3
    654a:	2f 90       	pop	r2
    654c:	08 95       	ret

0000654e <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    654e:	2f 92       	push	r2
    6550:	3f 92       	push	r3
    6552:	4f 92       	push	r4
    6554:	5f 92       	push	r5
    6556:	6f 92       	push	r6
    6558:	7f 92       	push	r7
    655a:	8f 92       	push	r8
    655c:	9f 92       	push	r9
    655e:	af 92       	push	r10
    6560:	bf 92       	push	r11
    6562:	cf 92       	push	r12
    6564:	df 92       	push	r13
    6566:	ef 92       	push	r14
    6568:	ff 92       	push	r15
    656a:	0f 93       	push	r16
    656c:	1f 93       	push	r17
    656e:	cf 93       	push	r28
    6570:	df 93       	push	r29
    6572:	cd b7       	in	r28, 0x3d	; 61
    6574:	de b7       	in	r29, 0x3e	; 62
    6576:	2b 97       	sbiw	r28, 0x0b	; 11
    6578:	0f b6       	in	r0, 0x3f	; 63
    657a:	f8 94       	cli
    657c:	de bf       	out	0x3e, r29	; 62
    657e:	0f be       	out	0x3f, r0	; 63
    6580:	cd bf       	out	0x3d, r28	; 61
    6582:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t mult = 1;		// Multiplier
	uint8_t offset;			// Index into channel structure
	uint8_t	items;			// Items in group

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6584:	80 91 8f 07 	lds	r24, 0x078F
    6588:	88 23       	and	r24, r24
    658a:	29 f0       	breq	.+10     	; 0x6596 <menu_rc_setup+0x48>
	{
		sub_top = RCSTART;
    658c:	85 e9       	ldi	r24, 0x95	; 149
    658e:	80 93 24 05 	sts	0x0524, r24
		menu_flag = 0;
    6592:	10 92 8f 07 	sts	0x078F, r1
		// Save pre-edited values
		int8_t temp_type = Config.MixMode;
		int8_t temp_flapchan = Config.FlapChan;

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, mult, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6596:	2e 81       	ldd	r18, Y+6	; 0x06
    6598:	82 2f       	mov	r24, r18
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	01 97       	sbiw	r24, 0x01	; 1
    659e:	27 e3       	ldi	r18, 0x37	; 55
    65a0:	28 9f       	mul	r18, r24
    65a2:	30 01       	movw	r6, r0
    65a4:	29 9f       	mul	r18, r25
    65a6:	70 0c       	add	r7, r0
    65a8:	11 24       	eor	r1, r1
    65aa:	d3 01       	movw	r26, r6
    65ac:	ab 5a       	subi	r26, 0xAB	; 171
    65ae:	b7 4e       	sbci	r27, 0xE7	; 231
    65b0:	3d 01       	movw	r6, r26
    65b2:	2b e0       	ldi	r18, 0x0B	; 11
    65b4:	28 9f       	mul	r18, r24
    65b6:	10 01       	movw	r2, r0
    65b8:	29 9f       	mul	r18, r25
    65ba:	30 0c       	add	r3, r0
    65bc:	11 24       	eor	r1, r1
    65be:	91 01       	movw	r18, r2
    65c0:	26 50       	subi	r18, 0x06	; 6
    65c2:	37 4e       	sbci	r19, 0xE7	; 231
    65c4:	3a 87       	std	Y+10, r19	; 0x0a
    65c6:	29 87       	std	Y+9, r18	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    65c8:	80 91 8d 07 	lds	r24, 0x078D
    65cc:	80 37       	cpi	r24, 0x70	; 112
    65ce:	09 f4       	brne	.+2      	; 0x65d2 <menu_rc_setup+0x84>
    65d0:	e7 c0       	rjmp	.+462    	; 0x67a0 <menu_rc_setup+0x252>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
    65d2:	3e 81       	ldd	r19, Y+6	; 0x06
    65d4:	32 30       	cpi	r19, 0x02	; 2
    65d6:	51 f0       	breq	.+20     	; 0x65ec <menu_rc_setup+0x9e>
    65d8:	33 30       	cpi	r19, 0x03	; 3
    65da:	81 f4       	brne	.+32     	; 0x65fc <menu_rc_setup+0xae>
				value_ptr = &Config.FailsafeType;
				mult = 1;
				break;
			case 3:				// General menu
				offset = RCITEMS + FSITEMS;
				items = GENERALITEMS;
    65dc:	9b e0       	ldi	r25, 0x0B	; 11
				items = FSITEMS;
				value_ptr = &Config.FailsafeType;
				mult = 1;
				break;
			case 3:				// General menu
				offset = RCITEMS + FSITEMS;
    65de:	60 e1       	ldi	r22, 0x10	; 16
    65e0:	96 2e       	mov	r9, r22
				items = GENERALITEMS;
				value_ptr = &Config.MixMode;
    65e2:	75 e7       	ldi	r23, 0x75	; 117
    65e4:	47 2e       	mov	r4, r23
    65e6:	76 e0       	ldi	r23, 0x06	; 6
    65e8:	57 2e       	mov	r5, r23
				mult = 1;
				break;
    65ea:	0e c0       	rjmp	.+28     	; 0x6608 <menu_rc_setup+0xba>
				value_ptr = &Config.RxMode;
				mult = 1;
				break;
			case 2:				// Failsafe menu
				offset = RCITEMS;
				items = FSITEMS;
    65ec:	95 e0       	ldi	r25, 0x05	; 5
				items = RCITEMS;
				value_ptr = &Config.RxMode;
				mult = 1;
				break;
			case 2:				// Failsafe menu
				offset = RCITEMS;
    65ee:	eb e0       	ldi	r30, 0x0B	; 11
    65f0:	9e 2e       	mov	r9, r30
				items = FSITEMS;
				value_ptr = &Config.FailsafeType;
    65f2:	fd e0       	ldi	r31, 0x0D	; 13
    65f4:	4f 2e       	mov	r4, r31
    65f6:	f6 e0       	ldi	r31, 0x06	; 6
    65f8:	5f 2e       	mov	r5, r31
    65fa:	06 c0       	rjmp	.+12     	; 0x6608 <menu_rc_setup+0xba>
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
		{
			case 1:				// RC setup menu
				offset = 0;
				items = RCITEMS;
    65fc:	9b e0       	ldi	r25, 0x0B	; 11
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = Failsafe, 3 = General
		switch(section)
		{
			case 1:				// RC setup menu
				offset = 0;
    65fe:	91 2c       	mov	r9, r1
				items = RCITEMS;
				value_ptr = &Config.RxMode;
    6600:	52 e0       	ldi	r21, 0x02	; 2
    6602:	45 2e       	mov	r4, r21
    6604:	56 e0       	ldi	r21, 0x06	; 6
    6606:	55 2e       	mov	r5, r21
				value_ptr = &Config.RxMode;
				mult = 1;
				break;
		}
		// Save pre-edited values
		int8_t temp_type = Config.MixMode;
    6608:	80 91 75 06 	lds	r24, 0x0675
    660c:	88 87       	std	Y+8, r24	; 0x08
		int8_t temp_flapchan = Config.FlapChan;
    660e:	a0 91 06 06 	lds	r26, 0x0606
    6612:	af 83       	std	Y+7, r26	; 0x07

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, mult, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6614:	80 91 24 05 	lds	r24, 0x0524
    6618:	80 90 04 05 	lds	r8, 0x0504
    661c:	a9 84       	ldd	r10, Y+9	; 0x09
    661e:	ba 84       	ldd	r11, Y+10	; 0x0a
    6620:	22 e5       	ldi	r18, 0x52	; 82
    6622:	c2 2e       	mov	r12, r18
    6624:	e1 2c       	mov	r14, r1
    6626:	83 01       	movw	r16, r6
    6628:	21 e0       	ldi	r18, 0x01	; 1
    662a:	a2 01       	movw	r20, r4
    662c:	65 e9       	ldi	r22, 0x95	; 149
    662e:	69 0d       	add	r22, r9
    6630:	89 0d       	add	r24, r9
    6632:	9b 87       	std	Y+11, r25	; 0x0b
    6634:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    6638:	31 e2       	ldi	r19, 0x21	; 33
    663a:	c3 2e       	mov	r12, r19
    663c:	35 e0       	ldi	r19, 0x05	; 5
    663e:	d3 2e       	mov	r13, r19
    6640:	44 e2       	ldi	r20, 0x24	; 36
    6642:	e4 2e       	mov	r14, r20
    6644:	45 e0       	ldi	r20, 0x05	; 5
    6646:	f4 2e       	mov	r15, r20
    6648:	04 e0       	ldi	r16, 0x04	; 4
    664a:	15 e0       	ldi	r17, 0x05	; 5
    664c:	20 91 8d 07 	lds	r18, 0x078D
    6650:	49 2d       	mov	r20, r9
    6652:	65 e9       	ldi	r22, 0x95	; 149
    6654:	9b 85       	ldd	r25, Y+11	; 0x0b
    6656:	89 2f       	mov	r24, r25
    6658:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    665c:	60 91 21 05 	lds	r22, 0x0521
    6660:	65 59       	subi	r22, 0x95	; 149
    6662:	69 19       	sub	r22, r9
    6664:	c3 01       	movw	r24, r6
    6666:	0e 94 90 2b 	call	0x5720	; 0x5720 <get_menu_range>
    666a:	29 83       	std	Y+1, r18	; 0x01
    666c:	3a 83       	std	Y+2, r19	; 0x02
    666e:	4b 83       	std	Y+3, r20	; 0x03
    6670:	5c 83       	std	Y+4, r21	; 0x04
    6672:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6674:	80 91 8d 07 	lds	r24, 0x078D
    6678:	80 3e       	cpi	r24, 0xE0	; 224
    667a:	f1 f4       	brne	.+60     	; 0x66b8 <menu_rc_setup+0x16a>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    667c:	80 91 21 05 	lds	r24, 0x0521
    6680:	68 2f       	mov	r22, r24
    6682:	70 e0       	ldi	r23, 0x00	; 0
    6684:	65 59       	subi	r22, 0x95	; 149
    6686:	71 09       	sbc	r23, r1
    6688:	69 19       	sub	r22, r9
    668a:	71 09       	sbc	r23, r1
    668c:	fb 01       	movw	r30, r22
    668e:	e2 0d       	add	r30, r2
    6690:	f3 1d       	adc	r31, r3
    6692:	e6 50       	subi	r30, 0x06	; 6
    6694:	f7 4e       	sbci	r31, 0xE7	; 231
    6696:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), mult, range, 0, text_link, false, 0);
    6698:	64 0d       	add	r22, r4
    669a:	75 1d       	adc	r23, r5
    669c:	1f 92       	push	r1
    669e:	1f 92       	push	r1
    66a0:	81 2c       	mov	r8, r1
    66a2:	c1 2c       	mov	r12, r1
    66a4:	e9 80       	ldd	r14, Y+1	; 0x01
    66a6:	fa 80       	ldd	r15, Y+2	; 0x02
    66a8:	0b 81       	ldd	r16, Y+3	; 0x03
    66aa:	1c 81       	ldd	r17, Y+4	; 0x04
    66ac:	2d 81       	ldd	r18, Y+5	; 0x05
    66ae:	41 e0       	ldi	r20, 0x01	; 1
    66b0:	0e 94 1c 2c 	call	0x5838	; 0x5838 <do_menu_item>
    66b4:	0f 90       	pop	r0
    66b6:	0f 90       	pop	r0
		}

		if (button == ENTER)
    66b8:	80 91 8d 07 	lds	r24, 0x078D
    66bc:	80 3e       	cpi	r24, 0xE0	; 224
    66be:	09 f0       	breq	.+2      	; 0x66c2 <menu_rc_setup+0x174>
    66c0:	83 cf       	rjmp	.-250    	; 0x65c8 <menu_rc_setup+0x7a>
		{
			// Update Ch5. mixer with source from Config.FlapChan if in Aeroplane mode and source changed
			if ((Config.MixMode == AEROPLANE) && (Config.FlapChan != temp_flapchan))
    66c2:	80 91 75 06 	lds	r24, 0x0675
    66c6:	81 11       	cpse	r24, r1
    66c8:	06 c0       	rjmp	.+12     	; 0x66d6 <menu_rc_setup+0x188>
    66ca:	90 91 06 06 	lds	r25, 0x0606
    66ce:	bf 81       	ldd	r27, Y+7	; 0x07
    66d0:	9b 13       	cpse	r25, r27
			{
				Config.Channel[CH5].source_a = Config.FlapChan;
    66d2:	90 93 c3 06 	sts	0x06C3, r25
			}

			// If model type has changed, reload preset
			if ((section == 3) && (temp_type != Config.MixMode)) 
    66d6:	2e 81       	ldd	r18, Y+6	; 0x06
    66d8:	23 30       	cpi	r18, 0x03	; 3
    66da:	79 f5       	brne	.+94     	; 0x673a <menu_rc_setup+0x1ec>
    66dc:	38 85       	ldd	r19, Y+8	; 0x08
    66de:	38 17       	cp	r19, r24
    66e0:	61 f1       	breq	.+88     	; 0x673a <menu_rc_setup+0x1ec>
			{
				switch(Config.MixMode)  // Load selected mix
    66e2:	81 30       	cpi	r24, 0x01	; 1
    66e4:	a9 f0       	breq	.+42     	; 0x6710 <menu_rc_setup+0x1c2>
    66e6:	2c f4       	brge	.+10     	; 0x66f2 <menu_rc_setup+0x1a4>
    66e8:	81 11       	cpse	r24, r1
    66ea:	27 c0       	rjmp	.+78     	; 0x673a <menu_rc_setup+0x1ec>
				{
					case AEROPLANE:
						get_preset_mix(AEROPLANE_MIX);
    66ec:	8b e1       	ldi	r24, 0x1B	; 27
    66ee:	9a e1       	ldi	r25, 0x1A	; 26
    66f0:	11 c0       	rjmp	.+34     	; 0x6714 <menu_rc_setup+0x1c6>
			}

			// If model type has changed, reload preset
			if ((section == 3) && (temp_type != Config.MixMode)) 
			{
				switch(Config.MixMode)  // Load selected mix
    66f2:	82 30       	cpi	r24, 0x02	; 2
    66f4:	91 f0       	breq	.+36     	; 0x671a <menu_rc_setup+0x1cc>
    66f6:	83 30       	cpi	r24, 0x03	; 3
    66f8:	01 f5       	brne	.+64     	; 0x673a <menu_rc_setup+0x1ec>
					case CAMSTAB:
						get_preset_mix(CAM_STAB);
						break;
					case MANUAL:
						// Clear all channel info
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));
    66fa:	80 e8       	ldi	r24, 0x80	; 128
    66fc:	e0 e8       	ldi	r30, 0x80	; 128
    66fe:	f6 e0       	ldi	r31, 0x06	; 6
    6700:	df 01       	movw	r26, r30
    6702:	1d 92       	st	X+, r1
    6704:	8a 95       	dec	r24
    6706:	e9 f7       	brne	.-6      	; 0x6702 <menu_rc_setup+0x1b4>
    6708:	ee e8       	ldi	r30, 0x8E	; 142
    670a:	f6 e0       	ldi	r31, 0x06	; 6

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
						{
							Config.Channel[i].source_a = NOCHAN;
    670c:	88 e0       	ldi	r24, 0x08	; 8
    670e:	08 c0       	rjmp	.+16     	; 0x6720 <menu_rc_setup+0x1d2>
				{
					case AEROPLANE:
						get_preset_mix(AEROPLANE_MIX);
						break;	
					case FWING:
						get_preset_mix(FLYING_WING_MIX);
    6710:	8b e9       	ldi	r24, 0x9B	; 155
    6712:	99 e1       	ldi	r25, 0x19	; 25
    6714:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <get_preset_mix>
						break;
    6718:	10 c0       	rjmp	.+32     	; 0x673a <menu_rc_setup+0x1ec>
					case CAMSTAB:
						get_preset_mix(CAM_STAB);
    671a:	8b e1       	ldi	r24, 0x1B	; 27
    671c:	99 e1       	ldi	r25, 0x19	; 25
    671e:	fa cf       	rjmp	.-12     	; 0x6714 <menu_rc_setup+0x1c6>
    6720:	df 01       	movw	r26, r30
    6722:	1b 97       	sbiw	r26, 0x0b	; 11
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
						{
							Config.Channel[i].source_a = NOCHAN;
    6724:	8c 93       	st	X, r24
    6726:	12 96       	adiw	r26, 0x02	; 2
							Config.Channel[i].source_b = NOCHAN;
    6728:	8c 93       	st	X, r24
    672a:	17 96       	adiw	r26, 0x07	; 7
							Config.Channel[i].output_b = UNUSED;
    672c:	8c 93       	st	X, r24
							Config.Channel[i].output_c = UNUSED;
    672e:	80 83       	st	Z, r24
    6730:	70 96       	adiw	r30, 0x10	; 16
					case MANUAL:
						// Clear all channel info
						memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));

						// Preset important settings
						for (i = 0; i < MAX_OUTPUTS; i++)
    6732:	b7 e0       	ldi	r27, 0x07	; 7
    6734:	ee 30       	cpi	r30, 0x0E	; 14
    6736:	fb 07       	cpc	r31, r27
    6738:	99 f7       	brne	.-26     	; 0x6720 <menu_rc_setup+0x1d2>
					default:
						break;
				}
			}

			init_int();				// In case RC type has changed, reinitialise interrupts
    673a:	0e 94 0a 2b 	call	0x5614	; 0x5614 <init_int>
			init_uart();			// and UART
    673e:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6742:	0e 94 f6 33 	call	0x67ec	; 0x67ec <UpdateLimits>

#ifdef KK21
			// Update MPU6050 LPF
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6746:	46 e0       	ldi	r20, 0x06	; 6
    6748:	80 91 7f 06 	lds	r24, 0x067F
    674c:	48 1b       	sub	r20, r24
    674e:	6a e1       	ldi	r22, 0x1A	; 26
    6750:	80 ed       	ldi	r24, 0xD0	; 208
    6752:	0e 94 59 21 	call	0x42b2	; 0x42b2 <writeI2Cbyte>
#endif
			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6756:	20 91 04 06 	lds	r18, 0x0604
    675a:	aa eb       	ldi	r26, 0xBA	; 186
    675c:	b5 e0       	ldi	r27, 0x05	; 5
    675e:	80 e0       	ldi	r24, 0x00	; 0
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	fc 01       	movw	r30, r24
    6764:	21 30       	cpi	r18, 0x01	; 1
    6766:	19 f4       	brne	.+6      	; 0x676e <menu_rc_setup+0x220>
    6768:	ea 50       	subi	r30, 0x0A	; 10
    676a:	ff 4f       	sbci	r31, 0xFF	; 255
    676c:	02 c0       	rjmp	.+4      	; 0x6772 <menu_rc_setup+0x224>
    676e:	e2 50       	subi	r30, 0x02	; 2
    6770:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6772:	e4 91       	lpm	r30, Z
    6774:	ec 93       	st	X, r30
    6776:	01 96       	adiw	r24, 0x01	; 1
    6778:	11 96       	adiw	r26, 0x01	; 1
#ifdef KK21
			// Update MPU6050 LPF
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
#endif
			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    677a:	88 30       	cpi	r24, 0x08	; 8
    677c:	91 05       	cpc	r25, r1
    677e:	89 f7       	brne	.-30     	; 0x6762 <menu_rc_setup+0x214>
				}
			}
			
			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode < SBUS) && (Config.Servo_rate == FAST))
    6780:	80 91 02 06 	lds	r24, 0x0602
    6784:	82 30       	cpi	r24, 0x02	; 2
    6786:	3c f4       	brge	.+14     	; 0x6796 <menu_rc_setup+0x248>
    6788:	80 91 78 06 	lds	r24, 0x0678
    678c:	82 30       	cpi	r24, 0x02	; 2
    678e:	19 f4       	brne	.+6      	; 0x6796 <menu_rc_setup+0x248>
			{
				Config.Servo_rate = SYNC;
    6790:	81 e0       	ldi	r24, 0x01	; 1
    6792:	80 93 78 06 	sts	0x0678, r24
			}

			Save_Config_to_EEPROM(); // Save value and return
    6796:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>
			
			Wait_BUTTON4();			 // Wait for user's finger off the button
    679a:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <Wait_BUTTON4>
    679e:	14 cf       	rjmp	.-472    	; 0x65c8 <menu_rc_setup+0x7a>
		}
	}
}
    67a0:	2b 96       	adiw	r28, 0x0b	; 11
    67a2:	0f b6       	in	r0, 0x3f	; 63
    67a4:	f8 94       	cli
    67a6:	de bf       	out	0x3e, r29	; 62
    67a8:	0f be       	out	0x3f, r0	; 63
    67aa:	cd bf       	out	0x3d, r28	; 61
    67ac:	df 91       	pop	r29
    67ae:	cf 91       	pop	r28
    67b0:	1f 91       	pop	r17
    67b2:	0f 91       	pop	r16
    67b4:	ff 90       	pop	r15
    67b6:	ef 90       	pop	r14
    67b8:	df 90       	pop	r13
    67ba:	cf 90       	pop	r12
    67bc:	bf 90       	pop	r11
    67be:	af 90       	pop	r10
    67c0:	9f 90       	pop	r9
    67c2:	8f 90       	pop	r8
    67c4:	7f 90       	pop	r7
    67c6:	6f 90       	pop	r6
    67c8:	5f 90       	pop	r5
    67ca:	4f 90       	pop	r4
    67cc:	3f 90       	pop	r3
    67ce:	2f 90       	pop	r2
    67d0:	08 95       	ret

000067d2 <get_preset_mix>:

// Get preset mix from Program memory
void get_preset_mix(const channel_t* preset)
{
	// Clear all channels first
	memset(&Config.Channel[0].value,0,(sizeof(channel_t) * MAX_OUTPUTS));
    67d2:	20 e8       	ldi	r18, 0x80	; 128
    67d4:	e0 e8       	ldi	r30, 0x80	; 128
    67d6:	f6 e0       	ldi	r31, 0x06	; 6
    67d8:	df 01       	movw	r26, r30
    67da:	1d 92       	st	X+, r1
    67dc:	2a 95       	dec	r18
    67de:	e9 f7       	brne	.-6      	; 0x67da <get_preset_mix+0x8>
	memcpy_P(&Config.Channel[0].value,&preset[0].value,(sizeof(channel_t) * MAX_OUTPUTS));
    67e0:	40 e8       	ldi	r20, 0x80	; 128
    67e2:	50 e0       	ldi	r21, 0x00	; 0
    67e4:	bc 01       	movw	r22, r24
    67e6:	cf 01       	movw	r24, r30
    67e8:	0c 94 ec 42 	jmp	0x85d8	; 0x85d8 <memcpy_P>

000067ec <UpdateLimits>:
}

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
void UpdateLimits(void)
{
    67ec:	af 92       	push	r10
    67ee:	bf 92       	push	r11
    67f0:	cf 92       	push	r12
    67f2:	df 92       	push	r13
    67f4:	ef 92       	push	r14
    67f6:	ff 92       	push	r15
    67f8:	0f 93       	push	r16
    67fa:	1f 93       	push	r17
    67fc:	cf 93       	push	r28
    67fe:	df 93       	push	r29
    6800:	00 d0       	rcall	.+0      	; 0x6802 <UpdateLimits+0x16>
    6802:	00 d0       	rcall	.+0      	; 0x6804 <UpdateLimits+0x18>
    6804:	00 d0       	rcall	.+0      	; 0x6806 <UpdateLimits+0x1a>
    6806:	cd b7       	in	r28, 0x3d	; 61
    6808:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int8_t limits[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll_limit, Config.FlightMode[Config.Flight].Pitch_limit, Config.FlightMode[Config.Flight].Yaw_limit};
    680a:	80 91 4a 07 	lds	r24, 0x074A
    680e:	26 e1       	ldi	r18, 0x16	; 22
    6810:	82 02       	muls	r24, r18
    6812:	c0 01       	movw	r24, r0
    6814:	11 24       	eor	r1, r1
    6816:	87 54       	subi	r24, 0x47	; 71
    6818:	9a 4f       	sbci	r25, 0xFA	; 250
    681a:	fc 01       	movw	r30, r24
    681c:	e1 5a       	subi	r30, 0xA1	; 161
    681e:	ff 4f       	sbci	r31, 0xFF	; 255
    6820:	20 81       	ld	r18, Z
    6822:	2c 83       	std	Y+4, r18	; 0x04
    6824:	37 96       	adiw	r30, 0x07	; 7
    6826:	20 81       	ld	r18, Z
    6828:	2d 83       	std	Y+5, r18	; 0x05
    682a:	37 96       	adiw	r30, 0x07	; 7
    682c:	20 81       	ld	r18, Z
    682e:	2e 83       	std	Y+6, r18	; 0x06
	int32_t temp32, gain32;
	int8_t gains[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.I_mult, Config.FlightMode[Config.Flight].Pitch.I_mult, Config.FlightMode[Config.Flight].Yaw.I_mult};
    6830:	70 97       	sbiw	r30, 0x10	; 16
    6832:	20 81       	ld	r18, Z
    6834:	29 83       	std	Y+1, r18	; 0x01
    6836:	37 96       	adiw	r30, 0x07	; 7
    6838:	20 81       	ld	r18, Z
    683a:	2a 83       	std	Y+2, r18	; 0x02
    683c:	37 96       	adiw	r30, 0x07	; 7
    683e:	80 81       	ld	r24, Z
    6840:	8b 83       	std	Y+3, r24	; 0x03

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6842:	80 91 7b 06 	lds	r24, 0x067B
    6846:	99 27       	eor	r25, r25
    6848:	87 fd       	sbrc	r24, 7
    684a:	90 95       	com	r25
    684c:	a9 2f       	mov	r26, r25
    684e:	b9 2f       	mov	r27, r25
    6850:	89 30       	cpi	r24, 0x09	; 9
    6852:	91 05       	cpc	r25, r1
    6854:	08 f5       	brcc	.+66     	; 0x6898 <UpdateLimits+0xac>
    6856:	fc 01       	movw	r30, r24
    6858:	e0 5a       	subi	r30, 0xA0	; 160
    685a:	ff 4f       	sbci	r31, 0xFF	; 255
    685c:	0c 94 93 42 	jmp	0x8526	; 0x8526 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    6860:	80 e4       	ldi	r24, 0x40	; 64
    6862:	91 e0       	ldi	r25, 0x01	; 1
    6864:	14 c0       	rjmp	.+40     	; 0x688e <UpdateLimits+0xa2>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    6866:	8a e4       	ldi	r24, 0x4A	; 74
    6868:	91 e0       	ldi	r25, 0x01	; 1
    686a:	11 c0       	rjmp	.+34     	; 0x688e <UpdateLimits+0xa2>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    686c:	84 e5       	ldi	r24, 0x54	; 84
    686e:	91 e0       	ldi	r25, 0x01	; 1
    6870:	0e c0       	rjmp	.+28     	; 0x688e <UpdateLimits+0xa2>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    6872:	8e e5       	ldi	r24, 0x5E	; 94
    6874:	91 e0       	ldi	r25, 0x01	; 1
    6876:	0b c0       	rjmp	.+22     	; 0x688e <UpdateLimits+0xa2>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    6878:	88 e6       	ldi	r24, 0x68	; 104
    687a:	91 e0       	ldi	r25, 0x01	; 1
    687c:	08 c0       	rjmp	.+16     	; 0x688e <UpdateLimits+0xa2>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    687e:	82 e7       	ldi	r24, 0x72	; 114
    6880:	91 e0       	ldi	r25, 0x01	; 1
    6882:	05 c0       	rjmp	.+10     	; 0x688e <UpdateLimits+0xa2>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    6884:	8c e7       	ldi	r24, 0x7C	; 124
    6886:	91 e0       	ldi	r25, 0x01	; 1
    6888:	02 c0       	rjmp	.+4      	; 0x688e <UpdateLimits+0xa2>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    688a:	86 e8       	ldi	r24, 0x86	; 134
    688c:	91 e0       	ldi	r25, 0x01	; 1
    688e:	90 93 70 06 	sts	0x0670, r25
    6892:	80 93 6f 06 	sts	0x066F, r24
			break;
    6896:	04 c0       	rjmp	.+8      	; 0x68a0 <UpdateLimits+0xb4>
		default:
			Config.PowerTriggerActual = 0;			// Off
    6898:	10 92 70 06 	sts	0x0670, r1
    689c:	10 92 6f 06 	sts	0x066F, r1
			break;
	}
	
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    68a0:	20 91 1e 05 	lds	r18, 0x051E
    68a4:	30 91 1f 05 	lds	r19, 0x051F
    68a8:	80 91 6f 06 	lds	r24, 0x066F
    68ac:	90 91 70 06 	lds	r25, 0x0670
    68b0:	26 36       	cpi	r18, 0x66	; 102
    68b2:	48 e0       	ldi	r20, 0x08	; 8
    68b4:	34 07       	cpc	r19, r20
    68b6:	c0 f0       	brcs	.+48     	; 0x68e8 <UpdateLimits+0xfc>
	{
		Config.PowerTriggerActual *= 6;
    68b8:	46 e0       	ldi	r20, 0x06	; 6
    68ba:	48 9f       	mul	r20, r24
    68bc:	90 01       	movw	r18, r0
    68be:	49 9f       	mul	r20, r25
    68c0:	30 0d       	add	r19, r0
    68c2:	11 24       	eor	r1, r1
    68c4:	30 93 70 06 	sts	0x0670, r19
    68c8:	20 93 6f 06 	sts	0x066F, r18
    68cc:	7e 01       	movw	r14, r28
    68ce:	64 e0       	ldi	r22, 0x04	; 4
    68d0:	e6 0e       	add	r14, r22
    68d2:	f1 1c       	adc	r15, r1
    68d4:	04 e5       	ldi	r16, 0x54	; 84
    68d6:	16 e0       	ldi	r17, 0x06	; 6
    68d8:	ce 01       	movw	r24, r28
    68da:	01 96       	adiw	r24, 0x01	; 1
    68dc:	6c 01       	movw	r12, r24
    68de:	5e 01       	movw	r10, r28
    68e0:	97 e0       	ldi	r25, 0x07	; 7
    68e2:	a9 0e       	add	r10, r25
    68e4:	b1 1c       	adc	r11, r1
    68e6:	25 c0       	rjmp	.+74     	; 0x6932 <UpdateLimits+0x146>
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    68e8:	a9 01       	movw	r20, r18
    68ea:	42 5c       	subi	r20, 0xC2	; 194
    68ec:	56 40       	sbci	r21, 0x06	; 6
    68ee:	44 3a       	cpi	r20, 0xA4	; 164
    68f0:	51 40       	sbci	r21, 0x01	; 1
    68f2:	10 f4       	brcc	.+4      	; 0x68f8 <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 5;
    68f4:	45 e0       	ldi	r20, 0x05	; 5
    68f6:	e1 cf       	rjmp	.-62     	; 0x68ba <UpdateLimits+0xce>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    68f8:	a9 01       	movw	r20, r18
    68fa:	44 51       	subi	r20, 0x14	; 20
    68fc:	55 40       	sbci	r21, 0x05	; 5
    68fe:	4e 3a       	cpi	r20, 0xAE	; 174
    6900:	51 40       	sbci	r21, 0x01	; 1
    6902:	28 f4       	brcc	.+10     	; 0x690e <UpdateLimits+0x122>
	{
		Config.PowerTriggerActual *= 4;
    6904:	88 0f       	add	r24, r24
    6906:	99 1f       	adc	r25, r25
    6908:	88 0f       	add	r24, r24
    690a:	99 1f       	adc	r25, r25
    690c:	0d c0       	rjmp	.+26     	; 0x6928 <UpdateLimits+0x13c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    690e:	24 58       	subi	r18, 0x84	; 132
    6910:	33 40       	sbci	r19, 0x03	; 3
    6912:	20 39       	cpi	r18, 0x90	; 144
    6914:	31 40       	sbci	r19, 0x01	; 1
    6916:	30 f4       	brcc	.+12     	; 0x6924 <UpdateLimits+0x138>
	{
		Config.PowerTriggerActual *= 3;
    6918:	9c 01       	movw	r18, r24
    691a:	22 0f       	add	r18, r18
    691c:	33 1f       	adc	r19, r19
    691e:	28 0f       	add	r18, r24
    6920:	39 1f       	adc	r19, r25
    6922:	d0 cf       	rjmp	.-96     	; 0x68c4 <UpdateLimits+0xd8>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    6924:	88 0f       	add	r24, r24
    6926:	99 1f       	adc	r25, r25
    6928:	90 93 70 06 	sts	0x0670, r25
    692c:	80 93 6f 06 	sts	0x066F, r24
    6930:	cd cf       	rjmp	.-102    	; 0x68cc <UpdateLimits+0xe0>
	}

	// Update I_term limits
	for (i = 0; i < NUMBEROFAXIS; i++)
	{
		temp32 	= limits[i]; 						// Promote
    6932:	f7 01       	movw	r30, r14
    6934:	a1 91       	ld	r26, Z+
    6936:	7f 01       	movw	r14, r30

		// I-term output (throw). Convert from % to actual count
		// A value of 80,000 results in +/- 1250 or full throw at the output stage
		// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
		Config.Raw_I_Limits[i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6938:	bb 27       	eor	r27, r27
    693a:	a7 fd       	sbrc	r26, 7
    693c:	b0 95       	com	r27
    693e:	20 e8       	ldi	r18, 0x80	; 128
    6940:	32 e0       	ldi	r19, 0x02	; 2
    6942:	0e 94 b0 42 	call	0x8560	; 0x8560 <__usmulhisi3>
    6946:	d8 01       	movw	r26, r16
    6948:	6d 93       	st	X+, r22
    694a:	7d 93       	st	X+, r23
    694c:	8d 93       	st	X+, r24
    694e:	9d 93       	st	X+, r25
    6950:	8d 01       	movw	r16, r26

		// I-term source limits. These have to be different due to the I-term gain setting
		// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 32) / gain :)

		if (gains[i] != 0)
    6952:	f6 01       	movw	r30, r12
    6954:	21 91       	ld	r18, Z+
    6956:	6f 01       	movw	r12, r30
    6958:	22 23       	and	r18, r18
    695a:	b1 f0       	breq	.+44     	; 0x6988 <UpdateLimits+0x19c>
		{
			gain32 = gains[i];						// Promote gain value
			Config.Raw_I_Constrain[i] = (Config.Raw_I_Limits[i] << 5) / gain32;
    695c:	e5 e0       	ldi	r30, 0x05	; 5
    695e:	66 0f       	add	r22, r22
    6960:	77 1f       	adc	r23, r23
    6962:	88 1f       	adc	r24, r24
    6964:	99 1f       	adc	r25, r25
    6966:	ea 95       	dec	r30
    6968:	d1 f7       	brne	.-12     	; 0x695e <UpdateLimits+0x172>
		// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
		// Gyro = (I-term * 32) / gain :)

		if (gains[i] != 0)
		{
			gain32 = gains[i];						// Promote gain value
    696a:	33 27       	eor	r19, r19
    696c:	27 fd       	sbrc	r18, 7
    696e:	30 95       	com	r19
    6970:	43 2f       	mov	r20, r19
    6972:	53 2f       	mov	r21, r19
			Config.Raw_I_Constrain[i] = (Config.Raw_I_Limits[i] << 5) / gain32;
    6974:	0e 94 74 42 	call	0x84e8	; 0x84e8 <__divmodsi4>
    6978:	d8 01       	movw	r26, r16
    697a:	18 96       	adiw	r26, 0x08	; 8
    697c:	2d 93       	st	X+, r18
    697e:	3d 93       	st	X+, r19
    6980:	4d 93       	st	X+, r20
    6982:	5c 93       	st	X, r21
    6984:	1b 97       	sbiw	r26, 0x0b	; 11
    6986:	05 c0       	rjmp	.+10     	; 0x6992 <UpdateLimits+0x1a6>
		}
		else
		{
			Config.Raw_I_Constrain[i] = 0;
    6988:	fd 01       	movw	r30, r26
    698a:	10 86       	std	Z+8, r1	; 0x08
    698c:	11 86       	std	Z+9, r1	; 0x09
    698e:	12 86       	std	Z+10, r1	; 0x0a
    6990:	13 86       	std	Z+11, r1	; 0x0b
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term limits
	for (i = 0; i < NUMBEROFAXIS; i++)
    6992:	ea 14       	cp	r14, r10
    6994:	fb 04       	cpc	r15, r11
    6996:	69 f6       	brne	.-102    	; 0x6932 <UpdateLimits+0x146>
    6998:	40 e1       	ldi	r20, 0x10	; 16
    699a:	57 e0       	ldi	r21, 0x07	; 7
    699c:	28 e1       	ldi	r18, 0x18	; 24
    699e:	37 e0       	ldi	r19, 0x07	; 7
    69a0:	80 e2       	ldi	r24, 0x20	; 32
    69a2:	97 e0       	ldi	r25, 0x07	; 7
    69a4:	68 e0       	ldi	r22, 0x08	; 8
    69a6:	e6 2e       	mov	r14, r22
    69a8:	67 e0       	ldi	r22, 0x07	; 7
    69aa:	f6 2e       	mov	r15, r22
    69ac:	e9 eb       	ldi	r30, 0xB9	; 185
    69ae:	f5 e0       	ldi	r31, 0x05	; 5
    69b0:	10 e0       	ldi	r17, 0x00	; 0
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    69b2:	da 01       	movw	r26, r20
    69b4:	6d 91       	ld	r22, X+
    69b6:	ad 01       	movw	r20, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    69b8:	ba e0       	ldi	r27, 0x0A	; 10
    69ba:	6b 02       	muls	r22, r27
    69bc:	b0 01       	movw	r22, r0
    69be:	11 24       	eor	r1, r1
    69c0:	6a 55       	subi	r22, 0x5A	; 90
    69c2:	71 4f       	sbci	r23, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    69c4:	72 87       	std	Z+10, r23	; 0x0a
    69c6:	61 87       	std	Z+9, r22	; 0x09
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    69c8:	d9 01       	movw	r26, r18
    69ca:	6d 91       	ld	r22, X+
    69cc:	9d 01       	movw	r18, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    69ce:	ba e0       	ldi	r27, 0x0A	; 10
    69d0:	6b 02       	muls	r22, r27
    69d2:	b0 01       	movw	r22, r0
    69d4:	11 24       	eor	r1, r1
    69d6:	6a 55       	subi	r22, 0x5A	; 90
    69d8:	71 4f       	sbci	r23, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    69da:	74 87       	std	Z+12, r23	; 0x0c
    69dc:	63 87       	std	Z+11, r22	; 0x0b
		Config.Limits[i].failsafe = scale_percent(Config.Failsafe[i]);	// Config.Failsafe are percentages, Limits[i].failsafe are 2500 to 5000 numbers
    69de:	dc 01       	movw	r26, r24
    69e0:	6d 91       	ld	r22, X+
    69e2:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    69e4:	ba e0       	ldi	r27, 0x0A	; 10
    69e6:	6b 02       	muls	r22, r27
    69e8:	b0 01       	movw	r22, r0
    69ea:	11 24       	eor	r1, r1
    69ec:	6a 55       	subi	r22, 0x5A	; 90
    69ee:	71 4f       	sbci	r23, 0xF1	; 241
	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
		Config.Limits[i].failsafe = scale_percent(Config.Failsafe[i]);	// Config.Failsafe are percentages, Limits[i].failsafe are 2500 to 5000 numbers
    69f0:	76 87       	std	Z+14, r23	; 0x0e
    69f2:	65 87       	std	Z+13, r22	; 0x0d
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
    69f4:	d7 01       	movw	r26, r14
    69f6:	6d 91       	ld	r22, X+
    69f8:	7d 01       	movw	r14, r26
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    69fa:	ba e0       	ldi	r27, 0x0A	; 10
    69fc:	6b 02       	muls	r22, r27
    69fe:	b0 01       	movw	r22, r0
    6a00:	11 24       	eor	r1, r1
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
		Config.Limits[i].failsafe = scale_percent(Config.Failsafe[i]);	// Config.Failsafe are percentages, Limits[i].failsafe are 2500 to 5000 numbers
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
    6a02:	70 8b       	std	Z+16, r23	; 0x10
    6a04:	67 87       	std	Z+15, r22	; 0x0f
			Config.Raw_I_Constrain[i] = 0;
		}
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    6a06:	1f 5f       	subi	r17, 0xFF	; 255
    6a08:	38 96       	adiw	r30, 0x08	; 8
    6a0a:	18 30       	cpi	r17, 0x08	; 8
    6a0c:	91 f6       	brne	.-92     	; 0x69b2 <UpdateLimits+0x1c6>
		Config.Limits[i].failsafe = scale_percent(Config.Failsafe[i]);	// Config.Failsafe are percentages, Limits[i].failsafe are 2500 to 5000 numbers
		Config.Limits[i].trim = scale_percent_nooffset(Config.Offset[i]);
	}

	// Update dynamic gain divisor
	if (Config.DynGain > 0)
    6a0e:	60 91 08 06 	lds	r22, 0x0608
    6a12:	16 16       	cp	r1, r22
    6a14:	64 f4       	brge	.+24     	; 0x6a2e <UpdateLimits+0x242>
	{
		Config.DynGainDiv = 2500 / Config.DynGain;
    6a16:	77 27       	eor	r23, r23
    6a18:	67 fd       	sbrc	r22, 7
    6a1a:	70 95       	com	r23
    6a1c:	84 ec       	ldi	r24, 0xC4	; 196
    6a1e:	99 e0       	ldi	r25, 0x09	; 9
    6a20:	0e 94 60 42 	call	0x84c0	; 0x84c0 <__divmodhi4>
    6a24:	70 93 74 06 	sts	0x0674, r23
    6a28:	60 93 73 06 	sts	0x0673, r22
    6a2c:	06 c0       	rjmp	.+12     	; 0x6a3a <UpdateLimits+0x24e>
	}
	else
	{
		Config.DynGainDiv = 2500;
    6a2e:	84 ec       	ldi	r24, 0xC4	; 196
    6a30:	99 e0       	ldi	r25, 0x09	; 9
    6a32:	90 93 74 06 	sts	0x0674, r25
    6a36:	80 93 73 06 	sts	0x0673, r24
	}

	// Update RC deadband amount
	 Config.DeadbandLimit = (Config.Deadband * 12); // 0 to 5% scaled to 0 to 60
    6a3a:	80 91 0c 06 	lds	r24, 0x060C
    6a3e:	ec e0       	ldi	r30, 0x0C	; 12
    6a40:	8e 02       	muls	r24, r30
    6a42:	c0 01       	movw	r24, r0
    6a44:	11 24       	eor	r1, r1
    6a46:	90 93 72 06 	sts	0x0672, r25
    6a4a:	80 93 71 06 	sts	0x0671, r24

	// Update Hands-free trigger based on deadband setting
	Config.HandsFreetrigger = Config.DeadbandLimit;
    6a4e:	80 93 6e 06 	sts	0x066E, r24
    6a52:	4b e4       	ldi	r20, 0x4B	; 75
    6a54:	57 e0       	ldi	r21, 0x07	; 7
    6a56:	a1 e2       	ldi	r26, 0x21	; 33
    6a58:	b6 e0       	ldi	r27, 0x06	; 6
    6a5a:	cd 01       	movw	r24, r26
    6a5c:	07 97       	sbiw	r24, 0x07	; 7
	
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = 0; i <= FLIGHT_MODES; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6a5e:	fc 01       	movw	r30, r24
    6a60:	80 81       	ld	r24, Z
    6a62:	fa e0       	ldi	r31, 0x0A	; 10
    6a64:	8f 02       	muls	r24, r31
    6a66:	c0 01       	movw	r24, r0
    6a68:	11 24       	eor	r1, r1
    6a6a:	fa 01       	movw	r30, r20
    6a6c:	81 93       	st	Z+, r24
    6a6e:	91 93       	st	Z+, r25
    6a70:	af 01       	movw	r20, r30
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6a72:	8c 91       	ld	r24, X
    6a74:	fa e0       	ldi	r31, 0x0A	; 10
    6a76:	8f 02       	muls	r24, r31
    6a78:	c0 01       	movw	r24, r0
    6a7a:	11 24       	eor	r1, r1
    6a7c:	fa 01       	movw	r30, r20
    6a7e:	95 83       	std	Z+5, r25	; 0x05
    6a80:	84 83       	std	Z+4, r24	; 0x04
    6a82:	56 96       	adiw	r26, 0x16	; 22
	// Update Hands-free trigger based on deadband setting
	Config.HandsFreetrigger = Config.DeadbandLimit;
	
	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = 0; i <= FLIGHT_MODES; i++)
    6a84:	f7 e0       	ldi	r31, 0x07	; 7
    6a86:	43 35       	cpi	r20, 0x53	; 83
    6a88:	5f 07       	cpc	r21, r31
    6a8a:	39 f7       	brne	.-50     	; 0x6a5a <UpdateLimits+0x26e>
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
	}
}
    6a8c:	26 96       	adiw	r28, 0x06	; 6
    6a8e:	0f b6       	in	r0, 0x3f	; 63
    6a90:	f8 94       	cli
    6a92:	de bf       	out	0x3e, r29	; 62
    6a94:	0f be       	out	0x3f, r0	; 63
    6a96:	cd bf       	out	0x3d, r28	; 61
    6a98:	df 91       	pop	r29
    6a9a:	cf 91       	pop	r28
    6a9c:	1f 91       	pop	r17
    6a9e:	0f 91       	pop	r16
    6aa0:	ff 90       	pop	r15
    6aa2:	ef 90       	pop	r14
    6aa4:	df 90       	pop	r13
    6aa6:	cf 90       	pop	r12
    6aa8:	bf 90       	pop	r11
    6aaa:	af 90       	pop	r10
    6aac:	08 95       	ret

00006aae <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6aae:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6ab0:	64 36       	cpi	r22, 0x64	; 100
    6ab2:	71 05       	cpc	r23, r1
    6ab4:	e9 f0       	breq	.+58     	; 0x6af0 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    6ab6:	6c 39       	cpi	r22, 0x9C	; 156
    6ab8:	8f ef       	ldi	r24, 0xFF	; 255
    6aba:	78 07       	cpc	r23, r24
    6abc:	29 f4       	brne	.+10     	; 0x6ac8 <scale32+0x1a>
	{
		return -value16;
    6abe:	88 27       	eor	r24, r24
    6ac0:	99 27       	eor	r25, r25
    6ac2:	82 1b       	sub	r24, r18
    6ac4:	93 0b       	sbc	r25, r19
    6ac6:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    6ac8:	61 15       	cp	r22, r1
    6aca:	71 05       	cpc	r23, r1
    6acc:	71 f0       	breq	.+28     	; 0x6aea <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    6ace:	db 01       	movw	r26, r22
    6ad0:	0e 94 99 42 	call	0x8532	; 0x8532 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    6ad4:	6e 5c       	subi	r22, 0xCE	; 206
    6ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    6ada:	9f 4f       	sbci	r25, 0xFF	; 255
    6adc:	24 e6       	ldi	r18, 0x64	; 100
    6ade:	30 e0       	ldi	r19, 0x00	; 0
    6ae0:	40 e0       	ldi	r20, 0x00	; 0
    6ae2:	50 e0       	ldi	r21, 0x00	; 0
    6ae4:	0e 94 74 42 	call	0x84e8	; 0x84e8 <__divmodsi4>
    6ae8:	03 c0       	rjmp	.+6      	; 0x6af0 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;
    6aea:	80 e0       	ldi	r24, 0x00	; 0
    6aec:	90 e0       	ldi	r25, 0x00	; 0
    6aee:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    6af0:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    6af2:	08 95       	ret

00006af4 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    6af4:	3f 92       	push	r3
    6af6:	4f 92       	push	r4
    6af8:	5f 92       	push	r5
    6afa:	6f 92       	push	r6
    6afc:	7f 92       	push	r7
    6afe:	8f 92       	push	r8
    6b00:	9f 92       	push	r9
    6b02:	af 92       	push	r10
    6b04:	bf 92       	push	r11
    6b06:	cf 92       	push	r12
    6b08:	df 92       	push	r13
    6b0a:	ef 92       	push	r14
    6b0c:	ff 92       	push	r15
    6b0e:	0f 93       	push	r16
    6b10:	1f 93       	push	r17
    6b12:	cf 93       	push	r28
    6b14:	df 93       	push	r29
    6b16:	cd b7       	in	r28, 0x3d	; 61
    6b18:	de b7       	in	r29, 0x3e	; 62
    6b1a:	61 97       	sbiw	r28, 0x11	; 17
    6b1c:	0f b6       	in	r0, 0x3f	; 63
    6b1e:	f8 94       	cli
    6b20:	de bf       	out	0x3e, r29	; 62
    6b22:	0f be       	out	0x3f, r0	; 63
    6b24:	cd bf       	out	0x3d, r28	; 61
	int16_t temp2 = 0;
	int16_t solution = 0;
	bool	TwoAilerons = false;
	
	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    6b26:	60 91 a1 05 	lds	r22, 0x05A1
    6b2a:	70 91 a2 05 	lds	r23, 0x05A2
    6b2e:	80 91 a3 05 	lds	r24, 0x05A3
    6b32:	90 91 a4 05 	lds	r25, 0x05A4
    6b36:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    6b3a:	5b 01       	movw	r10, r22
    6b3c:	43 e0       	ldi	r20, 0x03	; 3
    6b3e:	aa 0c       	add	r10, r10
    6b40:	bb 1c       	adc	r11, r11
    6b42:	4a 95       	dec	r20
    6b44:	e1 f7       	brne	.-8      	; 0x6b3e <ProcessMixer+0x4a>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    6b46:	60 91 a5 05 	lds	r22, 0x05A5
    6b4a:	70 91 a6 05 	lds	r23, 0x05A6
    6b4e:	80 91 a7 05 	lds	r24, 0x05A7
    6b52:	90 91 a8 05 	lds	r25, 0x05A8
    6b56:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
    6b5a:	53 e0       	ldi	r21, 0x03	; 3
    6b5c:	66 0f       	add	r22, r22
    6b5e:	77 1f       	adc	r23, r23
    6b60:	5a 95       	dec	r21
    6b62:	e1 f7       	brne	.-8      	; 0x6b5c <ProcessMixer+0x68>
	int16_t	SensorData[7] = {PID_Gyros[ROLL], PID_Gyros[PITCH], PID_Gyros[YAW], temp1, temp2, PID_ACCs[ROLL], PID_ACCs[PITCH]};
    6b64:	00 91 9c 07 	lds	r16, 0x079C
    6b68:	10 91 9d 07 	lds	r17, 0x079D
    6b6c:	1a 83       	std	Y+2, r17	; 0x02
    6b6e:	09 83       	std	Y+1, r16	; 0x01
    6b70:	e0 90 9e 07 	lds	r14, 0x079E
    6b74:	f0 90 9f 07 	lds	r15, 0x079F
    6b78:	fc 82       	std	Y+4, r15	; 0x04
    6b7a:	eb 82       	std	Y+3, r14	; 0x03
    6b7c:	c0 90 a0 07 	lds	r12, 0x07A0
    6b80:	d0 90 a1 07 	lds	r13, 0x07A1
    6b84:	de 82       	std	Y+6, r13	; 0x06
    6b86:	cd 82       	std	Y+5, r12	; 0x05
    6b88:	b8 86       	std	Y+8, r11	; 0x08
    6b8a:	af 82       	std	Y+7, r10	; 0x07
    6b8c:	7a 87       	std	Y+10, r23	; 0x0a
    6b8e:	69 87       	std	Y+9, r22	; 0x09
    6b90:	a0 90 a2 07 	lds	r10, 0x07A2
    6b94:	b0 90 a3 07 	lds	r11, 0x07A3
    6b98:	bc 86       	std	Y+12, r11	; 0x0c
    6b9a:	ab 86       	std	Y+11, r10	; 0x0b
    6b9c:	80 90 a4 07 	lds	r8, 0x07A4
    6ba0:	90 90 a5 07 	lds	r9, 0x07A5
    6ba4:	9e 86       	std	Y+14, r9	; 0x0e
    6ba6:	8d 86       	std	Y+13, r8	; 0x0d

	//************************************************************
	// Un-mix flaps from flaperons as required
	//************************************************************ 

	if (Config.FlapChan != NOCHAN)
    6ba8:	30 90 06 06 	lds	r3, 0x0606
    6bac:	28 e0       	ldi	r18, 0x08	; 8
    6bae:	32 16       	cp	r3, r18
    6bb0:	61 f1       	breq	.+88     	; 0x6c0a <ProcessMixer+0x116>
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
    6bb2:	80 91 b8 07 	lds	r24, 0x07B8
    6bb6:	90 91 b9 07 	lds	r25, 0x07B9
    6bba:	81 35       	cpi	r24, 0x51	; 81
    6bbc:	9b 4f       	sbci	r25, 0xFB	; 251
    6bbe:	54 f1       	brlt	.+84     	; 0x6c14 <ProcessMixer+0x120>
			(RCinputs[AILERON] < 1200) &&
    6bc0:	80 91 b8 07 	lds	r24, 0x07B8
    6bc4:	90 91 b9 07 	lds	r25, 0x07B9
	//************************************************************ 

	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
    6bc8:	80 3b       	cpi	r24, 0xB0	; 176
    6bca:	94 40       	sbci	r25, 0x04	; 4
    6bcc:	1c f5       	brge	.+70     	; 0x6c14 <ProcessMixer+0x120>
			(RCinputs[AILERON] < 1200) &&
			(RCinputs[Config.FlapChan] > -1200) && 
    6bce:	e3 2d       	mov	r30, r3
    6bd0:	ee 0f       	add	r30, r30
    6bd2:	ff 0b       	sbc	r31, r31
    6bd4:	ea 54       	subi	r30, 0x4A	; 74
    6bd6:	f8 4f       	sbci	r31, 0xF8	; 248
    6bd8:	80 81       	ld	r24, Z
    6bda:	91 81       	ldd	r25, Z+1	; 0x01

	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
			(RCinputs[AILERON] < 1200) &&
    6bdc:	81 35       	cpi	r24, 0x51	; 81
    6bde:	9b 4f       	sbci	r25, 0xFB	; 251
    6be0:	cc f0       	brlt	.+50     	; 0x6c14 <ProcessMixer+0x120>
			(RCinputs[Config.FlapChan] > -1200) && 
			(RCinputs[Config.FlapChan] < 1200))
    6be2:	80 81       	ld	r24, Z
    6be4:	91 81       	ldd	r25, Z+1	; 0x01
	if (Config.FlapChan != NOCHAN)
	{
		// Update flap only if ailerons are within measurable positions
		if ((RCinputs[AILERON] > -1200) && 
			(RCinputs[AILERON] < 1200) &&
			(RCinputs[Config.FlapChan] > -1200) && 
    6be6:	80 3b       	cpi	r24, 0xB0	; 176
    6be8:	94 40       	sbci	r25, 0x04	; 4
    6bea:	a4 f4       	brge	.+40     	; 0x6c14 <ProcessMixer+0x120>
			(RCinputs[Config.FlapChan] < 1200))
		{
			flap = RCinputs[AILERON] - RCinputs[Config.FlapChan]; 	
    6bec:	80 91 b8 07 	lds	r24, 0x07B8
    6bf0:	90 91 b9 07 	lds	r25, 0x07B9
    6bf4:	20 81       	ld	r18, Z
    6bf6:	31 81       	ldd	r19, Z+1	; 0x01
    6bf8:	82 1b       	sub	r24, r18
    6bfa:	93 0b       	sbc	r25, r19
			flap = flap >> 1; 	
    6bfc:	95 95       	asr	r25
    6bfe:	87 95       	ror	r24
    6c00:	90 93 2b 05 	sts	0x052B, r25
    6c04:	80 93 2a 05 	sts	0x052A, r24
    6c08:	05 c0       	rjmp	.+10     	; 0x6c14 <ProcessMixer+0x120>
		}
	}
	else
	{
		flap = 0;
    6c0a:	10 92 2b 05 	sts	0x052B, r1
    6c0e:	10 92 2a 05 	sts	0x052A, r1
    6c12:	21 c0       	rjmp	.+66     	; 0x6c56 <ProcessMixer+0x162>
	//************************************************************
	// Un-mix ailerons from flaperons as required in all modes
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    6c14:	80 91 75 06 	lds	r24, 0x0675
    6c18:	81 11       	cpse	r24, r1
    6c1a:	1d c0       	rjmp	.+58     	; 0x6c56 <ProcessMixer+0x162>
	{
		// Remove flap signal from flaperons, leaving ailerons only
		roll = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    6c1c:	80 91 b8 07 	lds	r24, 0x07B8
    6c20:	90 91 b9 07 	lds	r25, 0x07B9
    6c24:	e3 2d       	mov	r30, r3
    6c26:	ee 0f       	add	r30, r30
    6c28:	ff 0b       	sbc	r31, r31
    6c2a:	ea 54       	subi	r30, 0x4A	; 74
    6c2c:	f8 4f       	sbci	r31, 0xF8	; 248
    6c2e:	20 81       	ld	r18, Z
    6c30:	31 81       	ldd	r19, Z+1	; 0x01
    6c32:	82 0f       	add	r24, r18
    6c34:	93 1f       	adc	r25, r19
    6c36:	90 93 29 05 	sts	0x0529, r25
    6c3a:	80 93 28 05 	sts	0x0528, r24

		// Otherwise throw is 50% of both signals
		RCinputs[AILERON] = roll >> 1;
    6c3e:	95 95       	asr	r25
    6c40:	87 95       	ror	r24
    6c42:	90 93 b9 07 	sts	0x07B9, r25
    6c46:	80 93 b8 07 	sts	0x07B8, r24
		
		// Copy to second aileron channel
		RCinputs[Config.FlapChan] = RCinputs[AILERON];
    6c4a:	80 91 b8 07 	lds	r24, 0x07B8
    6c4e:	90 91 b9 07 	lds	r25, 0x07B9
    6c52:	91 83       	std	Z+1, r25	; 0x01
    6c54:	80 83       	st	Z, r24
    6c56:	bf e8       	ldi	r27, 0x8F	; 143
    6c58:	4b 2e       	mov	r4, r27
    6c5a:	b6 e0       	ldi	r27, 0x06	; 6
    6c5c:	5b 2e       	mov	r5, r27
		if (Flight_flags & (1 << Stability))
		{
			switch (Config.Channel[i].roll_gyro)
			{
				case ON:
					solution = solution - PID_Gyros[ROLL];
    6c5e:	88 27       	eor	r24, r24
    6c60:	99 27       	eor	r25, r25
    6c62:	80 1b       	sub	r24, r16
    6c64:	91 0b       	sbc	r25, r17
    6c66:	98 8b       	std	Y+16, r25	; 0x10
    6c68:	8f 87       	std	Y+15, r24	; 0x0f
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// Use PID gyro values
		if (Flight_flags & (1 << Stability))
    6c6a:	80 91 14 05 	lds	r24, 0x0514
    6c6e:	81 ff       	sbrs	r24, 1
    6c70:	27 c0       	rjmp	.+78     	; 0x6cc0 <ProcessMixer+0x1cc>
    6c72:	f2 01       	movw	r30, r4
    6c74:	38 97       	sbiw	r30, 0x08	; 8
		{
			switch (Config.Channel[i].roll_gyro)
    6c76:	80 81       	ld	r24, Z
    6c78:	81 30       	cpi	r24, 0x01	; 1
    6c7a:	29 f0       	breq	.+10     	; 0x6c86 <ProcessMixer+0x192>
    6c7c:	82 30       	cpi	r24, 0x02	; 2
    6c7e:	31 f0       	breq	.+12     	; 0x6c8c <ProcessMixer+0x198>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		solution = 0;
    6c80:	61 2c       	mov	r6, r1
    6c82:	71 2c       	mov	r7, r1
    6c84:	04 c0       	rjmp	.+8      	; 0x6c8e <ProcessMixer+0x19a>
		if (Flight_flags & (1 << Stability))
		{
			switch (Config.Channel[i].roll_gyro)
			{
				case ON:
					solution = solution - PID_Gyros[ROLL];
    6c86:	6f 84       	ldd	r6, Y+15	; 0x0f
    6c88:	78 88       	ldd	r7, Y+16	; 0x10
					break;
    6c8a:	01 c0       	rjmp	.+2      	; 0x6c8e <ProcessMixer+0x19a>
				case REV:
					solution = solution + PID_Gyros[ROLL];
    6c8c:	38 01       	movw	r6, r16
    6c8e:	f2 01       	movw	r30, r4
    6c90:	37 97       	sbiw	r30, 0x07	; 7
					break;	
				default:
					break;
			}
			switch (Config.Channel[i].pitch_gyro)
    6c92:	80 81       	ld	r24, Z
    6c94:	81 30       	cpi	r24, 0x01	; 1
    6c96:	29 f0       	breq	.+10     	; 0x6ca2 <ProcessMixer+0x1ae>
    6c98:	82 30       	cpi	r24, 0x02	; 2
    6c9a:	29 f4       	brne	.+10     	; 0x6ca6 <ProcessMixer+0x1b2>
			{
				case ON:
					solution = solution + PID_Gyros[PITCH];
					break;
				case REV:
					solution = solution - PID_Gyros[PITCH];
    6c9c:	6e 18       	sub	r6, r14
    6c9e:	7f 08       	sbc	r7, r15
					break;	
    6ca0:	02 c0       	rjmp	.+4      	; 0x6ca6 <ProcessMixer+0x1b2>
					break;
			}
			switch (Config.Channel[i].pitch_gyro)
			{
				case ON:
					solution = solution + PID_Gyros[PITCH];
    6ca2:	6e 0c       	add	r6, r14
    6ca4:	7f 1c       	adc	r7, r15
    6ca6:	f2 01       	movw	r30, r4
    6ca8:	36 97       	sbiw	r30, 0x06	; 6
					solution = solution - PID_Gyros[PITCH];
					break;	
				default:
					break;
			}
			switch (Config.Channel[i].yaw_gyro)
    6caa:	80 81       	ld	r24, Z
    6cac:	81 30       	cpi	r24, 0x01	; 1
    6cae:	29 f0       	breq	.+10     	; 0x6cba <ProcessMixer+0x1c6>
    6cb0:	82 30       	cpi	r24, 0x02	; 2
    6cb2:	41 f4       	brne	.+16     	; 0x6cc4 <ProcessMixer+0x1d0>
			{
				case ON:
					solution = solution + PID_Gyros[YAW];
					break;
				case REV:
					solution = solution - PID_Gyros[YAW];
    6cb4:	6c 18       	sub	r6, r12
    6cb6:	7d 08       	sbc	r7, r13
					break;	
    6cb8:	05 c0       	rjmp	.+10     	; 0x6cc4 <ProcessMixer+0x1d0>
					break;
			}
			switch (Config.Channel[i].yaw_gyro)
			{
				case ON:
					solution = solution + PID_Gyros[YAW];
    6cba:	6c 0c       	add	r6, r12
    6cbc:	7d 1c       	adc	r7, r13
					break;
    6cbe:	02 c0       	rjmp	.+4      	; 0x6cc4 <ProcessMixer+0x1d0>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		solution = 0;
    6cc0:	61 2c       	mov	r6, r1
    6cc2:	71 2c       	mov	r7, r1
		//************************************************************
		// Mix in accelerometers
		//************************************************************ 

		// Add PID acc values including trim
		if (Flight_flags & (1 << AutoLevel))
    6cc4:	80 91 14 05 	lds	r24, 0x0514
    6cc8:	80 ff       	sbrs	r24, 0
    6cca:	18 c0       	rjmp	.+48     	; 0x6cfc <ProcessMixer+0x208>
    6ccc:	f2 01       	movw	r30, r4
    6cce:	35 97       	sbiw	r30, 0x05	; 5
		{
			switch (Config.Channel[i].roll_acc)
    6cd0:	80 81       	ld	r24, Z
    6cd2:	81 30       	cpi	r24, 0x01	; 1
    6cd4:	29 f0       	breq	.+10     	; 0x6ce0 <ProcessMixer+0x1ec>
    6cd6:	82 30       	cpi	r24, 0x02	; 2
    6cd8:	29 f4       	brne	.+10     	; 0x6ce4 <ProcessMixer+0x1f0>
			{
				case ON:
					solution = solution - PID_ACCs[ROLL];
					break;
				case REV:
					solution = solution + PID_ACCs[ROLL];
    6cda:	6a 0c       	add	r6, r10
    6cdc:	7b 1c       	adc	r7, r11
					break;	
    6cde:	02 c0       	rjmp	.+4      	; 0x6ce4 <ProcessMixer+0x1f0>
		if (Flight_flags & (1 << AutoLevel))
		{
			switch (Config.Channel[i].roll_acc)
			{
				case ON:
					solution = solution - PID_ACCs[ROLL];
    6ce0:	6a 18       	sub	r6, r10
    6ce2:	7b 08       	sbc	r7, r11
    6ce4:	f2 01       	movw	r30, r4
    6ce6:	34 97       	sbiw	r30, 0x04	; 4
					break;	
				default:
					break;
			}

			switch (Config.Channel[i].pitch_acc)
    6ce8:	80 81       	ld	r24, Z
    6cea:	81 30       	cpi	r24, 0x01	; 1
    6cec:	29 f0       	breq	.+10     	; 0x6cf8 <ProcessMixer+0x204>
    6cee:	82 30       	cpi	r24, 0x02	; 2
    6cf0:	29 f4       	brne	.+10     	; 0x6cfc <ProcessMixer+0x208>
			{
				case ON:
					solution = solution + PID_ACCs[PITCH];
					break;
				case REV:
					solution = solution - PID_ACCs[PITCH];
    6cf2:	68 18       	sub	r6, r8
    6cf4:	79 08       	sbc	r7, r9
					break;	
    6cf6:	02 c0       	rjmp	.+4      	; 0x6cfc <ProcessMixer+0x208>
			}

			switch (Config.Channel[i].pitch_acc)
			{
				case ON:
					solution = solution + PID_ACCs[PITCH];
    6cf8:	68 0c       	add	r6, r8
    6cfa:	79 1c       	adc	r7, r9
    6cfc:	f2 01       	movw	r30, r4
    6cfe:	3b 97       	sbiw	r30, 0x0b	; 11
		//************************************************************
		// Process RC mixing and source volume calculation
		//************************************************************		
		
		// Skip Source A if no RC mixing required for this channel
		if (Config.Channel[i].source_a_volume != 0)
    6d00:	60 81       	ld	r22, Z
    6d02:	66 23       	and	r22, r22
    6d04:	79 f0       	breq	.+30     	; 0x6d24 <ProcessMixer+0x230>
    6d06:	31 97       	sbiw	r30, 0x01	; 1
		{		
			temp = scale32(RCinputs[Config.Channel[i].source_a], Config.Channel[i].source_a_volume);
    6d08:	e0 81       	ld	r30, Z
    6d0a:	ee 0f       	add	r30, r30
    6d0c:	ff 0b       	sbc	r31, r31
    6d0e:	ea 54       	subi	r30, 0x4A	; 74
    6d10:	f8 4f       	sbci	r31, 0xF8	; 248
    6d12:	80 81       	ld	r24, Z
    6d14:	91 81       	ldd	r25, Z+1	; 0x01
    6d16:	77 27       	eor	r23, r23
    6d18:	67 fd       	sbrc	r22, 7
    6d1a:	70 95       	com	r23
    6d1c:	0e 94 57 35 	call	0x6aae	; 0x6aae <scale32>
			solution += temp;
    6d20:	68 0e       	add	r6, r24
    6d22:	79 1e       	adc	r7, r25
    6d24:	f2 01       	movw	r30, r4
    6d26:	39 97       	sbiw	r30, 0x09	; 9
		}

		// Skip Source B if no RC mixing required for this channel
		if (Config.Channel[i].source_b_volume != 0)
    6d28:	60 81       	ld	r22, Z
    6d2a:	66 23       	and	r22, r22
    6d2c:	79 f0       	breq	.+30     	; 0x6d4c <ProcessMixer+0x258>
    6d2e:	31 97       	sbiw	r30, 0x01	; 1
		{
			temp = scale32(RCinputs[Config.Channel[i].source_b], Config.Channel[i].source_b_volume);
    6d30:	e0 81       	ld	r30, Z
    6d32:	ee 0f       	add	r30, r30
    6d34:	ff 0b       	sbc	r31, r31
    6d36:	ea 54       	subi	r30, 0x4A	; 74
    6d38:	f8 4f       	sbci	r31, 0xF8	; 248
    6d3a:	80 81       	ld	r24, Z
    6d3c:	91 81       	ldd	r25, Z+1	; 0x01
    6d3e:	77 27       	eor	r23, r23
    6d40:	67 fd       	sbrc	r22, 7
    6d42:	70 95       	com	r23
    6d44:	0e 94 57 35 	call	0x6aae	; 0x6aae <scale32>
			solution += temp;
    6d48:	68 0e       	add	r6, r24
    6d4a:	79 1e       	adc	r7, r25
    6d4c:	f2 01       	movw	r30, r4
    6d4e:	32 97       	sbiw	r30, 0x02	; 2

		//************************************************************
		// Process universal mixers
		//************************************************************ 

		if ((Config.Channel[i].output_b_volume != 0) && (Config.Channel[i].output_b != NOMIX)) // Mix in first extra source
    6d50:	60 81       	ld	r22, Z
    6d52:	66 23       	and	r22, r22
    6d54:	09 f1       	breq	.+66     	; 0x6d98 <ProcessMixer+0x2a4>
    6d56:	31 97       	sbiw	r30, 0x01	; 1
    6d58:	80 81       	ld	r24, Z
    6d5a:	8f 30       	cpi	r24, 0x0F	; 15
    6d5c:	e9 f0       	breq	.+58     	; 0x6d98 <ProcessMixer+0x2a4>
    6d5e:	e8 2f       	mov	r30, r24
    6d60:	ff 27       	eor	r31, r31
    6d62:	e7 fd       	sbrc	r30, 7
    6d64:	f0 95       	com	r31
		{
			// Is the source a sensor?
			if (Config.Channel[i].output_b > (MAX_RC_CHANNELS - 1))
    6d66:	88 30       	cpi	r24, 0x08	; 8
    6d68:	54 f0       	brlt	.+20     	; 0x6d7e <ProcessMixer+0x28a>
			{
				temp2 = SensorData[Config.Channel[i].output_b - EXT_SOURCE];
    6d6a:	38 97       	sbiw	r30, 0x08	; 8
    6d6c:	ee 0f       	add	r30, r30
    6d6e:	ff 1f       	adc	r31, r31
    6d70:	81 e0       	ldi	r24, 0x01	; 1
    6d72:	90 e0       	ldi	r25, 0x00	; 0
    6d74:	8c 0f       	add	r24, r28
    6d76:	9d 1f       	adc	r25, r29
    6d78:	e8 0f       	add	r30, r24
    6d7a:	f9 1f       	adc	r31, r25
    6d7c:	04 c0       	rjmp	.+8      	; 0x6d86 <ProcessMixer+0x292>
			}
			// Is the source an RC input?
			else
			{
				temp2 = RCinputs[Config.Channel[i].output_b];
    6d7e:	ee 0f       	add	r30, r30
    6d80:	ff 1f       	adc	r31, r31
    6d82:	ea 54       	subi	r30, 0x4A	; 74
    6d84:	f8 4f       	sbci	r31, 0xF8	; 248
    6d86:	80 81       	ld	r24, Z
    6d88:	91 81       	ldd	r25, Z+1	; 0x01
			}

			temp2 = scale32(temp2, Config.Channel[i].output_b_volume);
    6d8a:	77 27       	eor	r23, r23
    6d8c:	67 fd       	sbrc	r22, 7
    6d8e:	70 95       	com	r23
    6d90:	0e 94 57 35 	call	0x6aae	; 0x6aae <scale32>
			solution = solution + temp2;
    6d94:	68 0e       	add	r6, r24
    6d96:	79 1e       	adc	r7, r25
		}
		
		if ((Config.Channel[i].output_c_volume != 0) && (Config.Channel[i].output_c != NOMIX)) // Mix in second extra source
    6d98:	f2 01       	movw	r30, r4
    6d9a:	60 81       	ld	r22, Z
    6d9c:	66 23       	and	r22, r22
    6d9e:	09 f1       	breq	.+66     	; 0x6de2 <ProcessMixer+0x2ee>
    6da0:	31 97       	sbiw	r30, 0x01	; 1
    6da2:	80 81       	ld	r24, Z
    6da4:	8f 30       	cpi	r24, 0x0F	; 15
    6da6:	e9 f0       	breq	.+58     	; 0x6de2 <ProcessMixer+0x2ee>
    6da8:	e8 2f       	mov	r30, r24
    6daa:	ff 27       	eor	r31, r31
    6dac:	e7 fd       	sbrc	r30, 7
    6dae:	f0 95       	com	r31
		{
			// Is the source a sensor?
			if (Config.Channel[i].output_c > (MAX_RC_CHANNELS - 1))
    6db0:	88 30       	cpi	r24, 0x08	; 8
    6db2:	54 f0       	brlt	.+20     	; 0x6dc8 <ProcessMixer+0x2d4>
			{
				temp2 = SensorData[Config.Channel[i].output_c - EXT_SOURCE];
    6db4:	38 97       	sbiw	r30, 0x08	; 8
    6db6:	ee 0f       	add	r30, r30
    6db8:	ff 1f       	adc	r31, r31
    6dba:	81 e0       	ldi	r24, 0x01	; 1
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	8c 0f       	add	r24, r28
    6dc0:	9d 1f       	adc	r25, r29
    6dc2:	e8 0f       	add	r30, r24
    6dc4:	f9 1f       	adc	r31, r25
    6dc6:	04 c0       	rjmp	.+8      	; 0x6dd0 <ProcessMixer+0x2dc>
			}
			// Is the source an RC input?
			else
			{
				temp2 = RCinputs[Config.Channel[i].output_c];
    6dc8:	ee 0f       	add	r30, r30
    6dca:	ff 1f       	adc	r31, r31
    6dcc:	ea 54       	subi	r30, 0x4A	; 74
    6dce:	f8 4f       	sbci	r31, 0xF8	; 248
    6dd0:	80 81       	ld	r24, Z
    6dd2:	91 81       	ldd	r25, Z+1	; 0x01
			}

			temp2 = scale32(temp2, Config.Channel[i].output_c_volume);
    6dd4:	77 27       	eor	r23, r23
    6dd6:	67 fd       	sbrc	r22, 7
    6dd8:	70 95       	com	r23
    6dda:	0e 94 57 35 	call	0x6aae	; 0x6aae <scale32>
			solution = solution + temp2;
    6dde:	68 0e       	add	r6, r24
    6de0:	79 1e       	adc	r7, r25
    6de2:	f2 01       	movw	r30, r4
    6de4:	3f 97       	sbiw	r30, 0x0f	; 15
		}

		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].value = solution;
    6de6:	71 82       	std	Z+1, r7	; 0x01
    6de8:	60 82       	st	Z, r6
    6dea:	90 e1       	ldi	r25, 0x10	; 16
    6dec:	49 0e       	add	r4, r25
    6dee:	51 1c       	adc	r5, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MAX_OUTPUTS; i++)
    6df0:	ef e0       	ldi	r30, 0x0F	; 15
    6df2:	4e 16       	cp	r4, r30
    6df4:	e7 e0       	ldi	r30, 0x07	; 7
    6df6:	5e 06       	cpc	r5, r30
    6df8:	09 f0       	breq	.+2      	; 0x6dfc <ProcessMixer+0x308>
    6dfa:	37 cf       	rjmp	.-402    	; 0x6c6a <ProcessMixer+0x176>

	//************************************************************
	// Process differential if set up and two ailerons used
	//************************************************************

	if ((Config.FlapChan != NOCHAN) && (Config.Differential != 0))
    6dfc:	f8 e0       	ldi	r31, 0x08	; 8
    6dfe:	3f 12       	cpse	r3, r31
    6e00:	05 c0       	rjmp	.+10     	; 0x6e0c <ProcessMixer+0x318>
    6e02:	a8 ec       	ldi	r26, 0xC8	; 200
    6e04:	b5 e0       	ldi	r27, 0x05	; 5
    6e06:	e0 e8       	ldi	r30, 0x80	; 128
    6e08:	f6 e0       	ldi	r31, 0x06	; 6
    6e0a:	3d c0       	rjmp	.+122    	; 0x6e86 <ProcessMixer+0x392>
    6e0c:	80 91 09 06 	lds	r24, 0x0609
    6e10:	88 23       	and	r24, r24
    6e12:	09 f4       	brne	.+2      	; 0x6e16 <ProcessMixer+0x322>
    6e14:	99 c0       	rjmp	.+306    	; 0x6f48 <ProcessMixer+0x454>
    6e16:	00 e8       	ldi	r16, 0x80	; 128
    6e18:	16 e0       	ldi	r17, 0x06	; 6
    6e1a:	93 e8       	ldi	r25, 0x83	; 131
    6e1c:	c9 2e       	mov	r12, r25
    6e1e:	96 e0       	ldi	r25, 0x06	; 6
    6e20:	d9 2e       	mov	r13, r25
    6e22:	20 e0       	ldi	r18, 0x00	; 0

				// For the first aileron (LHS) 
				// Limit positive-going values
				else if (temp > 0)			
				{
					temp = scale32(temp, (100 - Config.Differential));
    6e24:	34 e6       	ldi	r19, 0x64	; 100
    6e26:	e3 2e       	mov	r14, r19
    6e28:	f1 2c       	mov	r15, r1
    6e2a:	e8 1a       	sub	r14, r24
    6e2c:	f1 08       	sbc	r15, r1
    6e2e:	87 fd       	sbrc	r24, 7
    6e30:	f3 94       	inc	r15
	{
		// Search through outputs for aileron channels
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Get current channel value
			temp = Config.Channel[i].value;
    6e32:	f8 01       	movw	r30, r16
    6e34:	80 81       	ld	r24, Z
    6e36:	91 81       	ldd	r25, Z+1	; 0x01

			// If some kind of aileron channel
			if ((Config.Channel[i].source_a == AILERON) || (Config.Channel[i].source_a == Config.FlapChan))
    6e38:	f6 01       	movw	r30, r12
    6e3a:	30 81       	ld	r19, Z
    6e3c:	31 30       	cpi	r19, 0x01	; 1
    6e3e:	11 f0       	breq	.+4      	; 0x6e44 <ProcessMixer+0x350>
    6e40:	33 11       	cpse	r19, r3
    6e42:	17 c0       	rjmp	.+46     	; 0x6e72 <ProcessMixer+0x37e>
			{
				// For the second aileron (RHS)
				if (TwoAilerons)			
    6e44:	22 23       	and	r18, r18
    6e46:	59 f0       	breq	.+22     	; 0x6e5e <ProcessMixer+0x36a>
				{
					// Limit negative-going values
					if (temp < 0)
    6e48:	97 ff       	sbrs	r25, 7
    6e4a:	13 c0       	rjmp	.+38     	; 0x6e72 <ProcessMixer+0x37e>
					{
						temp = scale32(temp, (100 - Config.Differential));
    6e4c:	b7 01       	movw	r22, r14
    6e4e:	29 8b       	std	Y+17, r18	; 0x11
    6e50:	0e 94 57 35 	call	0x6aae	; 0x6aae <scale32>
						Config.Channel[i].value = temp;
    6e54:	f8 01       	movw	r30, r16
    6e56:	91 83       	std	Z+1, r25	; 0x01
    6e58:	80 83       	st	Z, r24
    6e5a:	29 89       	ldd	r18, Y+17	; 0x11
    6e5c:	0a c0       	rjmp	.+20     	; 0x6e72 <ProcessMixer+0x37e>
					}
				}

				// For the first aileron (LHS) 
				// Limit positive-going values
				else if (temp > 0)			
    6e5e:	18 16       	cp	r1, r24
    6e60:	19 06       	cpc	r1, r25
    6e62:	34 f4       	brge	.+12     	; 0x6e70 <ProcessMixer+0x37c>
				{
					temp = scale32(temp, (100 - Config.Differential));
    6e64:	b7 01       	movw	r22, r14
    6e66:	0e 94 57 35 	call	0x6aae	; 0x6aae <scale32>
					Config.Channel[i].value = temp;
    6e6a:	f8 01       	movw	r30, r16
    6e6c:	91 83       	std	Z+1, r25	; 0x01
    6e6e:	80 83       	st	Z, r24
    6e70:	21 e0       	ldi	r18, 0x01	; 1
    6e72:	00 5f       	subi	r16, 0xF0	; 240
    6e74:	1f 4f       	sbci	r17, 0xFF	; 255
    6e76:	f0 e1       	ldi	r31, 0x10	; 16
    6e78:	cf 0e       	add	r12, r31
    6e7a:	d1 1c       	adc	r13, r1
	//************************************************************

	if ((Config.FlapChan != NOCHAN) && (Config.Differential != 0))
	{
		// Search through outputs for aileron channels
		for (i = 0; i < MAX_OUTPUTS; i++)
    6e7c:	87 e0       	ldi	r24, 0x07	; 7
    6e7e:	00 30       	cpi	r16, 0x00	; 0
    6e80:	18 07       	cpc	r17, r24
    6e82:	b9 f6       	brne	.-82     	; 0x6e32 <ProcessMixer+0x33e>
    6e84:	61 c0       	rjmp	.+194    	; 0x6f48 <ProcessMixer+0x454>
	// Add offset value
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].value += Config.Limits[i].trim;
    6e86:	80 81       	ld	r24, Z
    6e88:	91 81       	ldd	r25, Z+1	; 0x01
    6e8a:	2d 91       	ld	r18, X+
    6e8c:	3c 91       	ld	r19, X
    6e8e:	11 97       	sbiw	r26, 0x01	; 1
    6e90:	82 0f       	add	r24, r18
    6e92:	93 1f       	adc	r25, r19
    6e94:	91 83       	std	Z+1, r25	; 0x01
    6e96:	80 83       	st	Z, r24
    6e98:	70 96       	adiw	r30, 0x10	; 16
    6e9a:	18 96       	adiw	r26, 0x08	; 8

	//************************************************************
	// Add offset value
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    6e9c:	27 e0       	ldi	r18, 0x07	; 7
    6e9e:	e0 30       	cpi	r30, 0x00	; 0
    6ea0:	f2 07       	cpc	r31, r18
    6ea2:	89 f7       	brne	.-30     	; 0x6e86 <ProcessMixer+0x392>

	//************************************************************
	// Handle Failsafe condition
	//************************************************************ 

	if ((Flight_flags & (1 << Failsafe)) && (Config.CamStab == OFF))
    6ea4:	80 91 14 05 	lds	r24, 0x0514
    6ea8:	82 ff       	sbrs	r24, 2
    6eaa:	aa c0       	rjmp	.+340    	; 0x7000 <ProcessMixer+0x50c>
    6eac:	80 91 79 06 	lds	r24, 0x0679
    6eb0:	81 11       	cpse	r24, r1
    6eb2:	a6 c0       	rjmp	.+332    	; 0x7000 <ProcessMixer+0x50c>
	{
		// Simple failsafe. Replace outputs with user-set values
		if (Config.FailsafeType == SIMPLE) 
    6eb4:	80 91 0d 06 	lds	r24, 0x060D
    6eb8:	81 11       	cpse	r24, r1
    6eba:	12 c0       	rjmp	.+36     	; 0x6ee0 <ProcessMixer+0x3ec>
    6ebc:	e6 ec       	ldi	r30, 0xC6	; 198
    6ebe:	f5 e0       	ldi	r31, 0x05	; 5
    6ec0:	a0 e8       	ldi	r26, 0x80	; 128
    6ec2:	b6 e0       	ldi	r27, 0x06	; 6
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Note that "value" is still centered on zero.
				// 
				//Config.Channel[i].value = -1250; // This works..
				Config.Channel[i].value = Config.Limits[i].failsafe - 3750; // This doesn't
    6ec4:	80 81       	ld	r24, Z
    6ec6:	91 81       	ldd	r25, Z+1	; 0x01
    6ec8:	86 5a       	subi	r24, 0xA6	; 166
    6eca:	9e 40       	sbci	r25, 0x0E	; 14
    6ecc:	11 96       	adiw	r26, 0x01	; 1
    6ece:	9c 93       	st	X, r25
    6ed0:	8e 93       	st	-X, r24
    6ed2:	38 96       	adiw	r30, 0x08	; 8
    6ed4:	50 96       	adiw	r26, 0x10	; 16
		// Simple failsafe. Replace outputs with user-set values
		if (Config.FailsafeType == SIMPLE) 
		{
			//LED1 = 1; // debug
	
			for (i = 0; i < MAX_OUTPUTS; i++)
    6ed6:	86 e0       	ldi	r24, 0x06	; 6
    6ed8:	e6 30       	cpi	r30, 0x06	; 6
    6eda:	f8 07       	cpc	r31, r24
    6edc:	99 f7       	brne	.-26     	; 0x6ec4 <ProcessMixer+0x3d0>
    6ede:	90 c0       	rjmp	.+288    	; 0x7000 <ProcessMixer+0x50c>
			{
				// Over-ride throttle
				if ((Config.Channel[i].source_a == THROTTLE) || (Config.Channel[i].source_b == THROTTLE))
				{
					// Convert throttle setting to servo value
					Config.Channel[i].value = scale_percent(Config.FailsafeThrottle);				
    6ee0:	60 91 0e 06 	lds	r22, 0x060E
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6ee4:	9a e0       	ldi	r25, 0x0A	; 10
    6ee6:	69 02       	muls	r22, r25
    6ee8:	b0 01       	movw	r22, r0
    6eea:	11 24       	eor	r1, r1
    6eec:	6a 55       	subi	r22, 0x5A	; 90
    6eee:	71 4f       	sbci	r23, 0xF1	; 241
				}

				// Tweak rudder channel						
				if (Config.Channel[i].source_a == RUDDER)
				{
					temp = Config.FailsafeRudder;
    6ef0:	40 91 11 06 	lds	r20, 0x0611
					temp = temp << 4;
    6ef4:	e0 e1       	ldi	r30, 0x10	; 16
    6ef6:	4e 02       	muls	r20, r30
    6ef8:	a0 01       	movw	r20, r0
    6efa:	11 24       	eor	r1, r1
    6efc:	03 e8       	ldi	r16, 0x83	; 131
    6efe:	16 e0       	ldi	r17, 0x06	; 6
    6f00:	85 e8       	ldi	r24, 0x85	; 133
    6f02:	96 e0       	ldi	r25, 0x06	; 6
    6f04:	a0 e8       	ldi	r26, 0x80	; 128
    6f06:	b6 e0       	ldi	r27, 0x06	; 6
			//LED1 = 0; // debug
			
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Over-ride throttle
				if ((Config.Channel[i].source_a == THROTTLE) || (Config.Channel[i].source_b == THROTTLE))
    6f08:	f8 01       	movw	r30, r16
    6f0a:	20 81       	ld	r18, Z
    6f0c:	22 23       	and	r18, r18
    6f0e:	21 f0       	breq	.+8      	; 0x6f18 <ProcessMixer+0x424>
    6f10:	fc 01       	movw	r30, r24
    6f12:	20 81       	ld	r18, Z
    6f14:	21 11       	cpse	r18, r1
    6f16:	03 c0       	rjmp	.+6      	; 0x6f1e <ProcessMixer+0x42a>
				{
					// Convert throttle setting to servo value
					Config.Channel[i].value = scale_percent(Config.FailsafeThrottle);				
    6f18:	11 96       	adiw	r26, 0x01	; 1
    6f1a:	7c 93       	st	X, r23
    6f1c:	6e 93       	st	-X, r22
				}

				// Tweak rudder channel						
				if (Config.Channel[i].source_a == RUDDER)
    6f1e:	f8 01       	movw	r30, r16
    6f20:	20 81       	ld	r18, Z
    6f22:	23 30       	cpi	r18, 0x03	; 3
    6f24:	41 f4       	brne	.+16     	; 0x6f36 <ProcessMixer+0x442>
				{
					temp = Config.FailsafeRudder;
					temp = temp << 4;
					Config.Channel[i].value += temp;
    6f26:	2d 91       	ld	r18, X+
    6f28:	3c 91       	ld	r19, X
    6f2a:	11 97       	sbiw	r26, 0x01	; 1
    6f2c:	24 0f       	add	r18, r20
    6f2e:	35 1f       	adc	r19, r21
    6f30:	11 96       	adiw	r26, 0x01	; 1
    6f32:	3c 93       	st	X, r19
    6f34:	2e 93       	st	-X, r18
    6f36:	00 5f       	subi	r16, 0xF0	; 240
    6f38:	1f 4f       	sbci	r17, 0xFF	; 255
    6f3a:	50 96       	adiw	r26, 0x10	; 16
    6f3c:	40 96       	adiw	r24, 0x10	; 16
		// Set any throttle channels to preset values
		else
		{
			//LED1 = 0; // debug
			
			for (i = 0; i < MAX_OUTPUTS; i++)
    6f3e:	f7 e0       	ldi	r31, 0x07	; 7
    6f40:	03 30       	cpi	r16, 0x03	; 3
    6f42:	1f 07       	cpc	r17, r31
    6f44:	09 f7       	brne	.-62     	; 0x6f08 <ProcessMixer+0x414>
    6f46:	5c c0       	rjmp	.+184    	; 0x7000 <ProcessMixer+0x50c>
	//************************************************************
	// Re-mix flaps from flaperons as required
	//************************************************************ 

	// The flap part of the signal has been removed so we have to reinsert it here.
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    6f48:	80 91 75 06 	lds	r24, 0x0675
    6f4c:	81 11       	cpse	r24, r1
    6f4e:	59 cf       	rjmp	.-334    	; 0x6e02 <ProcessMixer+0x30e>
	{
		// If flapspeed is set to anything other than zero (normal)
		if (Config.flapspeed) 
    6f50:	80 91 0a 06 	lds	r24, 0x060A
    6f54:	20 91 2a 05 	lds	r18, 0x052A
    6f58:	30 91 2b 05 	lds	r19, 0x052B
    6f5c:	60 91 25 05 	lds	r22, 0x0525
    6f60:	48 2f       	mov	r20, r24
    6f62:	55 27       	eor	r21, r21
    6f64:	47 fd       	sbrc	r20, 7
    6f66:	50 95       	com	r21
    6f68:	88 23       	and	r24, r24
    6f6a:	f9 f0       	breq	.+62     	; 0x6faa <ProcessMixer+0x4b6>
		{
			// Do flap speed control
			if (((slowFlaps - flap) >= 1) || ((slowFlaps - flap) <= -1))	// Difference larger than one step, so ok
    6f6c:	80 91 26 05 	lds	r24, 0x0526
    6f70:	90 91 27 05 	lds	r25, 0x0527
    6f74:	82 17       	cp	r24, r18
    6f76:	93 07       	cpc	r25, r19
    6f78:	e1 f0       	breq	.+56     	; 0x6fb2 <ProcessMixer+0x4be>
			else
			{
				speed = 1;					// Otherwise this will oscillate
			}

			if ((slowFlaps < flap) && (flapskip == Config.flapspeed))
    6f7a:	82 17       	cp	r24, r18
    6f7c:	93 07       	cpc	r25, r19
    6f7e:	3c f4       	brge	.+14     	; 0x6f8e <ProcessMixer+0x49a>
    6f80:	26 2f       	mov	r18, r22
    6f82:	30 e0       	ldi	r19, 0x00	; 0
    6f84:	24 17       	cp	r18, r20
    6f86:	35 07       	cpc	r19, r21
    6f88:	a1 f4       	brne	.+40     	; 0x6fb2 <ProcessMixer+0x4be>
			{
				slowFlaps += speed;
    6f8a:	0f 96       	adiw	r24, 0x0f	; 15
    6f8c:	09 c0       	rjmp	.+18     	; 0x6fa0 <ProcessMixer+0x4ac>
			} 
			else if ((slowFlaps > flap) && (flapskip == Config.flapspeed)) 
    6f8e:	28 17       	cp	r18, r24
    6f90:	39 07       	cpc	r19, r25
    6f92:	7c f4       	brge	.+30     	; 0x6fb2 <ProcessMixer+0x4be>
    6f94:	26 2f       	mov	r18, r22
    6f96:	30 e0       	ldi	r19, 0x00	; 0
    6f98:	24 17       	cp	r18, r20
    6f9a:	35 07       	cpc	r19, r21
    6f9c:	51 f4       	brne	.+20     	; 0x6fb2 <ProcessMixer+0x4be>
			{
				slowFlaps -= speed;
    6f9e:	0f 97       	sbiw	r24, 0x0f	; 15
    6fa0:	90 93 27 05 	sts	0x0527, r25
    6fa4:	80 93 26 05 	sts	0x0526, r24
    6fa8:	04 c0       	rjmp	.+8      	; 0x6fb2 <ProcessMixer+0x4be>
			
		} 
		// No speed control requested so copy flaps
		else
		{
		 	slowFlaps = flap;
    6faa:	30 93 27 05 	sts	0x0527, r19
    6fae:	20 93 26 05 	sts	0x0526, r18
		}

		flapskip++;
    6fb2:	6f 5f       	subi	r22, 0xFF	; 255
		if (flapskip > Config.flapspeed) flapskip = 0;
    6fb4:	86 2f       	mov	r24, r22
    6fb6:	90 e0       	ldi	r25, 0x00	; 0
    6fb8:	48 17       	cp	r20, r24
    6fba:	59 07       	cpc	r21, r25
    6fbc:	1c f0       	brlt	.+6      	; 0x6fc4 <ProcessMixer+0x4d0>
		else
		{
		 	slowFlaps = flap;
		}

		flapskip++;
    6fbe:	60 93 25 05 	sts	0x0525, r22
    6fc2:	02 c0       	rjmp	.+4      	; 0x6fc8 <ProcessMixer+0x4d4>
		if (flapskip > Config.flapspeed) flapskip = 0;
    6fc4:	10 92 25 05 	sts	0x0525, r1
			temp = Config.Channel[i].value;

			// Restore flaps
			if (Config.Channel[i].source_a == AILERON)
			{
				temp += slowFlaps;
    6fc8:	20 91 26 05 	lds	r18, 0x0526
    6fcc:	30 91 27 05 	lds	r19, 0x0527
    6fd0:	e0 e8       	ldi	r30, 0x80	; 128
    6fd2:	f6 e0       	ldi	r31, 0x06	; 6
    6fd4:	a3 e8       	ldi	r26, 0x83	; 131
    6fd6:	b6 e0       	ldi	r27, 0x06	; 6
		if (flapskip > Config.flapspeed) flapskip = 0;

		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Get solution
			temp = Config.Channel[i].value;
    6fd8:	80 81       	ld	r24, Z
    6fda:	91 81       	ldd	r25, Z+1	; 0x01

			// Restore flaps
			if (Config.Channel[i].source_a == AILERON)
    6fdc:	4c 91       	ld	r20, X
    6fde:	41 30       	cpi	r20, 0x01	; 1
    6fe0:	11 f4       	brne	.+4      	; 0x6fe6 <ProcessMixer+0x4f2>
			{
				temp += slowFlaps;
    6fe2:	82 0f       	add	r24, r18
    6fe4:	93 1f       	adc	r25, r19
			}
			if (Config.Channel[i].source_a == Config.FlapChan)
    6fe6:	43 11       	cpse	r20, r3
    6fe8:	02 c0       	rjmp	.+4      	; 0x6fee <ProcessMixer+0x4fa>
			{
				temp -= slowFlaps;
    6fea:	82 1b       	sub	r24, r18
    6fec:	93 0b       	sbc	r25, r19
			}

			// Update channel data solution
			Config.Channel[i].value = temp;
    6fee:	91 83       	std	Z+1, r25	; 0x01
    6ff0:	80 83       	st	Z, r24
    6ff2:	70 96       	adiw	r30, 0x10	; 16
    6ff4:	50 96       	adiw	r26, 0x10	; 16
		}

		flapskip++;
		if (flapskip > Config.flapspeed) flapskip = 0;

		for (i = 0; i < MAX_OUTPUTS; i++)
    6ff6:	97 e0       	ldi	r25, 0x07	; 7
    6ff8:	e0 30       	cpi	r30, 0x00	; 0
    6ffa:	f9 07       	cpc	r31, r25
    6ffc:	69 f7       	brne	.-38     	; 0x6fd8 <ProcessMixer+0x4e4>
    6ffe:	01 cf       	rjmp	.-510    	; 0x6e02 <ProcessMixer+0x30e>
					Config.Channel[i].value += temp;
				}
			}
		}
	} // Failsafe
}
    7000:	61 96       	adiw	r28, 0x11	; 17
    7002:	0f b6       	in	r0, 0x3f	; 63
    7004:	f8 94       	cli
    7006:	de bf       	out	0x3e, r29	; 62
    7008:	0f be       	out	0x3f, r0	; 63
    700a:	cd bf       	out	0x3d, r28	; 61
    700c:	df 91       	pop	r29
    700e:	cf 91       	pop	r28
    7010:	1f 91       	pop	r17
    7012:	0f 91       	pop	r16
    7014:	ff 90       	pop	r15
    7016:	ef 90       	pop	r14
    7018:	df 90       	pop	r13
    701a:	cf 90       	pop	r12
    701c:	bf 90       	pop	r11
    701e:	af 90       	pop	r10
    7020:	9f 90       	pop	r9
    7022:	8f 90       	pop	r8
    7024:	7f 90       	pop	r7
    7026:	6f 90       	pop	r6
    7028:	5f 90       	pop	r5
    702a:	4f 90       	pop	r4
    702c:	3f 90       	pop	r3
    702e:	08 95       	ret

00007030 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7030:	2a e0       	ldi	r18, 0x0A	; 10
    7032:	82 02       	muls	r24, r18
    7034:	c0 01       	movw	r24, r0
    7036:	11 24       	eor	r1, r1

	return temp16_2;
}
    7038:	8a 55       	subi	r24, 0x5A	; 90
    703a:	91 4f       	sbci	r25, 0xF1	; 241
    703c:	08 95       	ret

0000703e <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    703e:	df 92       	push	r13
    7040:	ef 92       	push	r14
    7042:	ff 92       	push	r15
    7044:	0f 93       	push	r16
    7046:	1f 93       	push	r17
    7048:	cf 93       	push	r28
    704a:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    704c:	dc 01       	movw	r26, r24
    704e:	0d 90       	ld	r0, X+
    7050:	00 20       	and	r0, r0
    7052:	e9 f7       	brne	.-6      	; 0x704e <mugui_text_sizestring+0x10>
    7054:	11 97       	sbiw	r26, 0x01	; 1
    7056:	a8 1b       	sub	r26, r24
    7058:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    705a:	fb 01       	movw	r30, r22
    705c:	34 96       	adiw	r30, 0x04	; 4
    705e:	e4 90       	lpm	r14, Z
    7060:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7062:	32 97       	sbiw	r30, 0x02	; 2
    7064:	d4 90       	lpm	r13, Z
    7066:	ec 01       	movw	r28, r24
    7068:	a8 0f       	add	r26, r24
    706a:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    706c:	80 e0       	ldi	r24, 0x00	; 0
    706e:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7070:	ca 17       	cp	r28, r26
    7072:	db 07       	cpc	r29, r27
    7074:	29 f1       	breq	.+74     	; 0x70c0 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    7076:	29 91       	ld	r18, Y+
    7078:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    707a:	30 e0       	ldi	r19, 0x00	; 0
    707c:	22 0f       	add	r18, r18
    707e:	33 1f       	adc	r19, r19
    7080:	f9 01       	movw	r30, r18
    7082:	35 96       	adiw	r30, 0x05	; 5
    7084:	e6 0f       	add	r30, r22
    7086:	f7 1f       	adc	r31, r23
    7088:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    708a:	f9 01       	movw	r30, r18
    708c:	36 96       	adiw	r30, 0x06	; 6
    708e:	e6 0f       	add	r30, r22
    7090:	f7 1f       	adc	r31, r23
    7092:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    7094:	10 e0       	ldi	r17, 0x00	; 0
    7096:	20 e0       	ldi	r18, 0x00	; 0
    7098:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    709a:	32 2f       	mov	r19, r18
    709c:	21 2f       	mov	r18, r17
    709e:	10 2f       	mov	r17, r16
    70a0:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    70a2:	0e 0f       	add	r16, r30
    70a4:	11 1d       	adc	r17, r1
    70a6:	21 1d       	adc	r18, r1
    70a8:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    70aa:	fb 01       	movw	r30, r22
    70ac:	e0 0f       	add	r30, r16
    70ae:	f1 1f       	adc	r31, r17
    70b0:	04 91       	lpm	r16, Z
    70b2:	20 2f       	mov	r18, r16
    70b4:	30 e0       	ldi	r19, 0x00	; 0
    70b6:	2f 5f       	subi	r18, 0xFF	; 255
    70b8:	3f 4f       	sbci	r19, 0xFF	; 255
    70ba:	82 0f       	add	r24, r18
    70bc:	93 1f       	adc	r25, r19
    70be:	d8 cf       	rjmp	.-80     	; 0x7070 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    70c0:	fa 01       	movw	r30, r20
    70c2:	91 83       	std	Z+1, r25	; 0x01
    70c4:	80 83       	st	Z, r24
	size->y = height;
    70c6:	f3 82       	std	Z+3, r15	; 0x03
    70c8:	e2 82       	std	Z+2, r14	; 0x02
}
    70ca:	df 91       	pop	r29
    70cc:	cf 91       	pop	r28
    70ce:	1f 91       	pop	r17
    70d0:	0f 91       	pop	r16
    70d2:	ff 90       	pop	r15
    70d4:	ef 90       	pop	r14
    70d6:	df 90       	pop	r13
    70d8:	08 95       	ret

000070da <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    70da:	a2 e6       	ldi	r26, 0x62	; 98
    70dc:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    70de:	20 e0       	ldi	r18, 0x00	; 0
    70e0:	30 e0       	ldi	r19, 0x00	; 0
    70e2:	fc 01       	movw	r30, r24
    70e4:	e2 0f       	add	r30, r18
    70e6:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    70e8:	44 91       	lpm	r20, Z
    70ea:	44 23       	and	r20, r20
    70ec:	41 f0       	breq	.+16     	; 0x70fe <pgm_mugui_scopy+0x24>
    70ee:	28 31       	cpi	r18, 0x18	; 24
    70f0:	31 05       	cpc	r19, r1
    70f2:	29 f0       	breq	.+10     	; 0x70fe <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    70f4:	e4 91       	lpm	r30, Z
    70f6:	ed 93       	st	X+, r30
		i++;
    70f8:	2f 5f       	subi	r18, 0xFF	; 255
    70fa:	3f 4f       	sbci	r19, 0xFF	; 255
    70fc:	f2 cf       	rjmp	.-28     	; 0x70e2 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    70fe:	f9 01       	movw	r30, r18
    7100:	ee 59       	subi	r30, 0x9E	; 158
    7102:	fa 4f       	sbci	r31, 0xFA	; 250
    7104:	10 82       	st	Z, r1
    7106:	08 95       	ret

00007108 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7108:	2f 92       	push	r2
    710a:	3f 92       	push	r3
    710c:	4f 92       	push	r4
    710e:	5f 92       	push	r5
    7110:	6f 92       	push	r6
    7112:	7f 92       	push	r7
    7114:	8f 92       	push	r8
    7116:	9f 92       	push	r9
    7118:	af 92       	push	r10
    711a:	bf 92       	push	r11
    711c:	cf 92       	push	r12
    711e:	df 92       	push	r13
    7120:	ef 92       	push	r14
    7122:	ff 92       	push	r15
    7124:	0f 93       	push	r16
    7126:	1f 93       	push	r17
    7128:	cf 93       	push	r28
    712a:	df 93       	push	r29
    712c:	cd b7       	in	r28, 0x3d	; 61
    712e:	de b7       	in	r29, 0x3e	; 62
    7130:	29 97       	sbiw	r28, 0x09	; 9
    7132:	0f b6       	in	r0, 0x3f	; 63
    7134:	f8 94       	cli
    7136:	de bf       	out	0x3e, r29	; 62
    7138:	0f be       	out	0x3f, r0	; 63
    713a:	cd bf       	out	0x3d, r28	; 61
    713c:	4c 83       	std	Y+4, r20	; 0x04
    713e:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    7140:	fb 01       	movw	r30, r22
    7142:	32 96       	adiw	r30, 0x02	; 2
    7144:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    7146:	32 96       	adiw	r30, 0x02	; 2
    7148:	e4 91       	lpm	r30, Z
    714a:	2e 2e       	mov	r2, r30
    714c:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    714e:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	88 0f       	add	r24, r24
    7154:	99 1f       	adc	r25, r25
    7156:	fc 01       	movw	r30, r24
    7158:	35 96       	adiw	r30, 0x05	; 5
    715a:	e6 0f       	add	r30, r22
    715c:	f7 1f       	adc	r31, r23
    715e:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7160:	fc 01       	movw	r30, r24
    7162:	36 96       	adiw	r30, 0x06	; 6
    7164:	e6 0f       	add	r30, r22
    7166:	f7 1f       	adc	r31, r23
    7168:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    716a:	06 2d       	mov	r16, r6
    716c:	10 e0       	ldi	r17, 0x00	; 0
    716e:	20 e0       	ldi	r18, 0x00	; 0
    7170:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7172:	32 2f       	mov	r19, r18
    7174:	21 2f       	mov	r18, r17
    7176:	10 2f       	mov	r17, r16
    7178:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    717a:	08 0f       	add	r16, r24
    717c:	11 1d       	adc	r17, r1
    717e:	21 1d       	adc	r18, r1
    7180:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7182:	c8 01       	movw	r24, r16
    7184:	fb 01       	movw	r30, r22
    7186:	e0 0f       	add	r30, r16
    7188:	f1 1f       	adc	r31, r17
    718a:	64 90       	lpm	r6, Z
    718c:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    718e:	21 01       	movw	r4, r2
    7190:	21 e0       	ldi	r18, 0x01	; 1
    7192:	42 1a       	sub	r4, r18
    7194:	51 08       	sbc	r5, r1
    7196:	13 e0       	ldi	r17, 0x03	; 3
    7198:	56 94       	lsr	r5
    719a:	47 94       	ror	r4
    719c:	1a 95       	dec	r17
    719e:	e1 f7       	brne	.-8      	; 0x7198 <mugui_lcd_putc+0x90>
    71a0:	43 94       	inc	r4
    71a2:	a4 2d       	mov	r26, r4
    71a4:	b0 e0       	ldi	r27, 0x00	; 0
    71a6:	ba 83       	std	Y+2, r27	; 0x02
    71a8:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    71aa:	a1 2c       	mov	r10, r1
    71ac:	b1 2c       	mov	r11, r1
    71ae:	00 e0       	ldi	r16, 0x00	; 0
    71b0:	10 e0       	ldi	r17, 0x00	; 0
    71b2:	4b 01       	movw	r8, r22
    71b4:	bf ef       	ldi	r27, 0xFF	; 255
    71b6:	8b 1a       	sub	r8, r27
    71b8:	9b 0a       	sbc	r9, r27
    71ba:	88 0e       	add	r8, r24
    71bc:	99 1e       	adc	r9, r25
    71be:	06 15       	cp	r16, r6
    71c0:	17 05       	cpc	r17, r7
    71c2:	08 f0       	brcs	.+2      	; 0x71c6 <mugui_lcd_putc+0xbe>
    71c4:	43 c0       	rjmp	.+134    	; 0x724c <mugui_lcd_putc+0x144>
    71c6:	c1 2c       	mov	r12, r1
    71c8:	d1 2c       	mov	r13, r1
    71ca:	e1 2c       	mov	r14, r1
    71cc:	f1 2c       	mov	r15, r1
    71ce:	94 01       	movw	r18, r8
    71d0:	2a 0d       	add	r18, r10
    71d2:	3b 1d       	adc	r19, r11
    71d4:	3f 83       	std	Y+7, r19	; 0x07
    71d6:	2e 83       	std	Y+6, r18	; 0x06
    71d8:	5c 80       	ldd	r5, Y+4	; 0x04
    71da:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    71dc:	c4 14       	cp	r12, r4
    71de:	78 f5       	brcc	.+94     	; 0x723e <mugui_lcd_putc+0x136>
    71e0:	ee 81       	ldd	r30, Y+6	; 0x06
    71e2:	ff 81       	ldd	r31, Y+7	; 0x07
    71e4:	ec 0d       	add	r30, r12
    71e6:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    71e8:	34 91       	lpm	r19, Z
    71ea:	3b 83       	std	Y+3, r19	; 0x03
    71ec:	19 86       	std	Y+9, r1	; 0x09
    71ee:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    71f0:	e2 14       	cp	r14, r2
    71f2:	f3 04       	cpc	r15, r3
    71f4:	00 f5       	brcc	.+64     	; 0x7236 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    71f6:	81 e0       	ldi	r24, 0x01	; 1
    71f8:	90 e0       	ldi	r25, 0x00	; 0
    71fa:	08 84       	ldd	r0, Y+8	; 0x08
    71fc:	02 c0       	rjmp	.+4      	; 0x7202 <mugui_lcd_putc+0xfa>
    71fe:	88 0f       	add	r24, r24
    7200:	99 1f       	adc	r25, r25
    7202:	0a 94       	dec	r0
    7204:	e2 f7       	brpl	.-8      	; 0x71fe <mugui_lcd_putc+0xf6>
					bit = data & mask;
    7206:	3b 81       	ldd	r19, Y+3	; 0x03
    7208:	83 23       	and	r24, r19
    720a:	4d 81       	ldd	r20, Y+5	; 0x05
    720c:	4e 0d       	add	r20, r14
					if(bit)
    720e:	88 23       	and	r24, r24
    7210:	11 f0       	breq	.+4      	; 0x7216 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    7212:	21 e0       	ldi	r18, 0x01	; 1
    7214:	01 c0       	rjmp	.+2      	; 0x7218 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    7216:	20 e0       	ldi	r18, 0x00	; 0
    7218:	65 2d       	mov	r22, r5
    721a:	80 e0       	ldi	r24, 0x00	; 0
    721c:	91 e0       	ldi	r25, 0x01	; 1
    721e:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <setpixel>
					}
					ty++;
    7222:	8f ef       	ldi	r24, 0xFF	; 255
    7224:	e8 1a       	sub	r14, r24
    7226:	f8 0a       	sbc	r15, r24
    7228:	a8 85       	ldd	r26, Y+8	; 0x08
    722a:	b9 85       	ldd	r27, Y+9	; 0x09
    722c:	11 96       	adiw	r26, 0x01	; 1
    722e:	b9 87       	std	Y+9, r27	; 0x09
    7230:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7232:	18 97       	sbiw	r26, 0x08	; 8
    7234:	e9 f6       	brne	.-70     	; 0x71f0 <mugui_lcd_putc+0xe8>
    7236:	bf ef       	ldi	r27, 0xFF	; 255
    7238:	cb 1a       	sub	r12, r27
    723a:	db 0a       	sbc	r13, r27
    723c:	cf cf       	rjmp	.-98     	; 0x71dc <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    723e:	0f 5f       	subi	r16, 0xFF	; 255
    7240:	1f 4f       	sbci	r17, 0xFF	; 255
    7242:	e9 81       	ldd	r30, Y+1	; 0x01
    7244:	fa 81       	ldd	r31, Y+2	; 0x02
    7246:	ae 0e       	add	r10, r30
    7248:	bf 1e       	adc	r11, r31
    724a:	b9 cf       	rjmp	.-142    	; 0x71be <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    724c:	c3 01       	movw	r24, r6
    724e:	29 96       	adiw	r28, 0x09	; 9
    7250:	0f b6       	in	r0, 0x3f	; 63
    7252:	f8 94       	cli
    7254:	de bf       	out	0x3e, r29	; 62
    7256:	0f be       	out	0x3f, r0	; 63
    7258:	cd bf       	out	0x3d, r28	; 61
    725a:	df 91       	pop	r29
    725c:	cf 91       	pop	r28
    725e:	1f 91       	pop	r17
    7260:	0f 91       	pop	r16
    7262:	ff 90       	pop	r15
    7264:	ef 90       	pop	r14
    7266:	df 90       	pop	r13
    7268:	cf 90       	pop	r12
    726a:	bf 90       	pop	r11
    726c:	af 90       	pop	r10
    726e:	9f 90       	pop	r9
    7270:	8f 90       	pop	r8
    7272:	7f 90       	pop	r7
    7274:	6f 90       	pop	r6
    7276:	5f 90       	pop	r5
    7278:	4f 90       	pop	r4
    727a:	3f 90       	pop	r3
    727c:	2f 90       	pop	r2
    727e:	08 95       	ret

00007280 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7280:	af 92       	push	r10
    7282:	bf 92       	push	r11
    7284:	cf 92       	push	r12
    7286:	df 92       	push	r13
    7288:	ef 92       	push	r14
    728a:	ff 92       	push	r15
    728c:	0f 93       	push	r16
    728e:	1f 93       	push	r17
    7290:	cf 93       	push	r28
    7292:	df 93       	push	r29
    7294:	ec 01       	movw	r28, r24
    7296:	7b 01       	movw	r14, r22
    7298:	6a 01       	movw	r12, r20
    729a:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    729c:	00 e0       	ldi	r16, 0x00	; 0
    729e:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    72a0:	ce 01       	movw	r24, r28
    72a2:	fe 01       	movw	r30, r28
    72a4:	24 91       	lpm	r18, Z
    72a6:	22 23       	and	r18, r18
    72a8:	71 f0       	breq	.+28     	; 0x72c6 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    72aa:	21 96       	adiw	r28, 0x01	; 1
    72ac:	fc 01       	movw	r30, r24
    72ae:	84 91       	lpm	r24, Z
    72b0:	a8 01       	movw	r20, r16
    72b2:	4c 0d       	add	r20, r12
    72b4:	5d 1d       	adc	r21, r13
    72b6:	95 01       	movw	r18, r10
    72b8:	b7 01       	movw	r22, r14
    72ba:	0e 94 84 38 	call	0x7108	; 0x7108 <mugui_lcd_putc>
    72be:	01 96       	adiw	r24, 0x01	; 1
    72c0:	08 0f       	add	r16, r24
    72c2:	19 1f       	adc	r17, r25
    72c4:	ed cf       	rjmp	.-38     	; 0x72a0 <pgm_mugui_lcd_puts+0x20>
	}
}
    72c6:	df 91       	pop	r29
    72c8:	cf 91       	pop	r28
    72ca:	1f 91       	pop	r17
    72cc:	0f 91       	pop	r16
    72ce:	ff 90       	pop	r15
    72d0:	ef 90       	pop	r14
    72d2:	df 90       	pop	r13
    72d4:	cf 90       	pop	r12
    72d6:	bf 90       	pop	r11
    72d8:	af 90       	pop	r10
    72da:	08 95       	ret

000072dc <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    72dc:	8f 92       	push	r8
    72de:	9f 92       	push	r9
    72e0:	af 92       	push	r10
    72e2:	bf 92       	push	r11
    72e4:	cf 92       	push	r12
    72e6:	df 92       	push	r13
    72e8:	ef 92       	push	r14
    72ea:	ff 92       	push	r15
    72ec:	0f 93       	push	r16
    72ee:	1f 93       	push	r17
    72f0:	cf 93       	push	r28
    72f2:	df 93       	push	r29
    72f4:	6b 01       	movw	r12, r22
    72f6:	5a 01       	movw	r10, r20
    72f8:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    72fa:	ec 01       	movw	r28, r24
    72fc:	09 90       	ld	r0, Y+
    72fe:	00 20       	and	r0, r0
    7300:	e9 f7       	brne	.-6      	; 0x72fc <mugui_lcd_puts+0x20>
    7302:	8c 01       	movw	r16, r24
    7304:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7306:	e1 2c       	mov	r14, r1
    7308:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    730a:	0c 17       	cp	r16, r28
    730c:	1d 07       	cpc	r17, r29
    730e:	71 f0       	breq	.+28     	; 0x732c <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7310:	a7 01       	movw	r20, r14
    7312:	4a 0d       	add	r20, r10
    7314:	5b 1d       	adc	r21, r11
    7316:	94 01       	movw	r18, r8
    7318:	b6 01       	movw	r22, r12
    731a:	f8 01       	movw	r30, r16
    731c:	81 91       	ld	r24, Z+
    731e:	8f 01       	movw	r16, r30
    7320:	0e 94 84 38 	call	0x7108	; 0x7108 <mugui_lcd_putc>
    7324:	01 96       	adiw	r24, 0x01	; 1
    7326:	e8 0e       	add	r14, r24
    7328:	f9 1e       	adc	r15, r25
    732a:	ef cf       	rjmp	.-34     	; 0x730a <mugui_lcd_puts+0x2e>
	}
}
    732c:	df 91       	pop	r29
    732e:	cf 91       	pop	r28
    7330:	1f 91       	pop	r17
    7332:	0f 91       	pop	r16
    7334:	ff 90       	pop	r15
    7336:	ef 90       	pop	r14
    7338:	df 90       	pop	r13
    733a:	cf 90       	pop	r12
    733c:	bf 90       	pop	r11
    733e:	af 90       	pop	r10
    7340:	9f 90       	pop	r9
    7342:	8f 90       	pop	r8
    7344:	08 95       	ret

00007346 <Sensor_PID>:

int16_t DynGain = 0;

// Run each loop to average gyro data
void Sensor_PID(uint32_t period)
{
    7346:	2f 92       	push	r2
    7348:	3f 92       	push	r3
    734a:	4f 92       	push	r4
    734c:	5f 92       	push	r5
    734e:	6f 92       	push	r6
    7350:	7f 92       	push	r7
    7352:	8f 92       	push	r8
    7354:	9f 92       	push	r9
    7356:	af 92       	push	r10
    7358:	bf 92       	push	r11
    735a:	cf 92       	push	r12
    735c:	df 92       	push	r13
    735e:	ef 92       	push	r14
    7360:	ff 92       	push	r15
    7362:	0f 93       	push	r16
    7364:	1f 93       	push	r17
    7366:	cf 93       	push	r28
    7368:	df 93       	push	r29
    736a:	cd b7       	in	r28, 0x3d	; 61
    736c:	de b7       	in	r29, 0x3e	; 62
    736e:	2a 97       	sbiw	r28, 0x0a	; 10
    7370:	0f b6       	in	r0, 0x3f	; 63
    7372:	f8 94       	cli
    7374:	de bf       	out	0x3e, r29	; 62
    7376:	0f be       	out	0x3f, r0	; 63
    7378:	cd bf       	out	0x3d, r28	; 61
    737a:	8b 01       	movw	r16, r22
    737c:	9c 01       	movw	r18, r24
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    737e:	80 91 b8 07 	lds	r24, 0x07B8
    7382:	90 91 b9 07 	lds	r25, 0x07B9
    7386:	91 95       	neg	r25
    7388:	81 95       	neg	r24
    738a:	91 09       	sbc	r25, r1
    738c:	9a 83       	std	Y+2, r25	; 0x02
    738e:	89 83       	std	Y+1, r24	; 0x01
    7390:	80 91 ba 07 	lds	r24, 0x07BA
    7394:	90 91 bb 07 	lds	r25, 0x07BB
    7398:	9c 83       	std	Y+4, r25	; 0x04
    739a:	8b 83       	std	Y+3, r24	; 0x03
    739c:	80 91 bc 07 	lds	r24, 0x07BC
    73a0:	90 91 bd 07 	lds	r25, 0x07BD
    73a4:	9e 83       	std	Y+6, r25	; 0x06
    73a6:	8d 83       	std	Y+5, r24	; 0x05
	// Set up dynamic gain variable once per loop
	// N.B. Config.DynGainDiv = 2500 / Config.DynGain;
	//************************************************************

	// Channel controlling the dynamic gain
	DynGain = RxChannel[Config.DynGainSrc] - 2500; // 0-1250-2500 range
    73a8:	e0 91 07 06 	lds	r30, 0x0607
    73ac:	ee 0f       	add	r30, r30
    73ae:	ff 0b       	sbc	r31, r31
    73b0:	e3 5a       	subi	r30, 0xA3	; 163
    73b2:	f8 4f       	sbci	r31, 0xF8	; 248
    73b4:	80 81       	ld	r24, Z
    73b6:	91 81       	ldd	r25, Z+1	; 0x01
    73b8:	84 5c       	subi	r24, 0xC4	; 196
    73ba:	99 40       	sbci	r25, 0x09	; 9

	// Scale 0 - 2500 down to 0 - Config.DynGain (%)
	DynGain = DynGain / Config.DynGainDiv;
    73bc:	60 91 73 06 	lds	r22, 0x0673
    73c0:	70 91 74 06 	lds	r23, 0x0674
    73c4:	0e 94 60 42 	call	0x84c0	; 0x84c0 <__divmodhi4>
    73c8:	70 93 33 05 	sts	0x0533, r23
    73cc:	60 93 32 05 	sts	0x0532, r22
	//************************************************************
	// Un-mix ailerons from flaperons as required
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    73d0:	e0 91 06 06 	lds	r30, 0x0606
    73d4:	40 91 75 06 	lds	r20, 0x0675
	{
		// Recreate actual roll signal from flaperons
		roll_actual = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    73d8:	80 91 b8 07 	lds	r24, 0x07B8
    73dc:	90 91 b9 07 	lds	r25, 0x07B9
	//************************************************************
	// Un-mix ailerons from flaperons as required
	//************************************************************

	// If in AEROPLANE mixer mode and flaperons set up
	if ((Config.FlapChan != NOCHAN) && (Config.MixMode == AEROPLANE))
    73e0:	e8 30       	cpi	r30, 0x08	; 8
    73e2:	79 f0       	breq	.+30     	; 0x7402 <Sensor_PID+0xbc>
    73e4:	41 11       	cpse	r20, r1
    73e6:	0d c0       	rjmp	.+26     	; 0x7402 <Sensor_PID+0xbc>
	{
		// Recreate actual roll signal from flaperons
		roll_actual = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    73e8:	ee 0f       	add	r30, r30
    73ea:	ff 0b       	sbc	r31, r31
    73ec:	ea 54       	subi	r30, 0x4A	; 74
    73ee:	f8 4f       	sbci	r31, 0xF8	; 248
    73f0:	40 81       	ld	r20, Z
    73f2:	51 81       	ldd	r21, Z+1	; 0x01
    73f4:	84 0f       	add	r24, r20
    73f6:	95 1f       	adc	r25, r21
		RCinputsAxis[ROLL] = roll_actual >> 1;
    73f8:	95 95       	asr	r25
    73fa:	87 95       	ror	r24
    73fc:	9a 83       	std	Y+2, r25	; 0x02
    73fe:	89 83       	std	Y+1, r24	; 0x01
    7400:	1a c0       	rjmp	.+52     	; 0x7436 <Sensor_PID+0xf0>

	// In in Flying Wing mode RCinputsAxis comes directly from RCinputs
	// Pitch has to be reversed
	else if (Config.MixMode == FWING)
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
    7402:	9a 83       	std	Y+2, r25	; 0x02
    7404:	89 83       	std	Y+1, r24	; 0x01
		RCinputsAxis[ROLL] = roll_actual >> 1;
	}

	// In in Flying Wing mode RCinputsAxis comes directly from RCinputs
	// Pitch has to be reversed
	else if (Config.MixMode == FWING)
    7406:	41 30       	cpi	r20, 0x01	; 1
    7408:	51 f4       	brne	.+20     	; 0x741e <Sensor_PID+0xd8>
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
		RCinputsAxis[PITCH] = -RCinputs[ELEVATOR];
    740a:	80 91 ba 07 	lds	r24, 0x07BA
    740e:	90 91 bb 07 	lds	r25, 0x07BB
    7412:	91 95       	neg	r25
    7414:	81 95       	neg	r24
    7416:	91 09       	sbc	r25, r1
    7418:	9c 83       	std	Y+4, r25	; 0x04
    741a:	8b 83       	std	Y+3, r24	; 0x03
    741c:	0c c0       	rjmp	.+24     	; 0x7436 <Sensor_PID+0xf0>
	{
		RCinputsAxis[ROLL] = RCinputs[AILERON];
	}

	// Zero RC inputs in pure camstab mode
	if ((Config.MixMode == CAMSTAB) && (Config.CamStab == ON))
    741e:	42 30       	cpi	r20, 0x02	; 2
    7420:	51 f4       	brne	.+20     	; 0x7436 <Sensor_PID+0xf0>
    7422:	80 91 79 06 	lds	r24, 0x0679
    7426:	81 30       	cpi	r24, 0x01	; 1
    7428:	31 f4       	brne	.+12     	; 0x7436 <Sensor_PID+0xf0>
	{
		RCinputsAxis[ROLL] = 0;
    742a:	1a 82       	std	Y+2, r1	; 0x02
    742c:	19 82       	std	Y+1, r1	; 0x01
		RCinputsAxis[PITCH] = 0;
    742e:	1c 82       	std	Y+4, r1	; 0x04
    7430:	1b 82       	std	Y+3, r1	; 0x03
		RCinputsAxis[YAW] = 0;
    7432:	1e 82       	std	Y+6, r1	; 0x06
    7434:	1d 82       	std	Y+5, r1	; 0x05
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    7436:	80 91 0b 06 	lds	r24, 0x060B
    743a:	92 e0       	ldi	r25, 0x02	; 2
    743c:	c9 2e       	mov	r12, r25
    743e:	d1 2c       	mov	r13, r1
    7440:	c8 1a       	sub	r12, r24
    7442:	d1 08       	sbc	r13, r1
    7444:	87 fd       	sbrc	r24, 7
    7446:	d3 94       	inc	r13
		
		P1_temp = gyroADC[axis] + stick;
		
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
    7448:	c9 01       	movw	r24, r18
    744a:	b8 01       	movw	r22, r16
    744c:	0e 94 33 41 	call	0x8266	; 0x8266 <__floatunsisf>
    7450:	20 e0       	ldi	r18, 0x00	; 0
    7452:	30 e3       	ldi	r19, 0x30	; 48
    7454:	4f e5       	ldi	r20, 0x5F	; 95
    7456:	55 e4       	ldi	r21, 0x45	; 69
    7458:	0e 94 9a 40 	call	0x8134	; 0x8134 <__divsf3>
    745c:	2b 01       	movw	r4, r22
    745e:	3c 01       	movw	r6, r24
    7460:	ce 01       	movw	r24, r28
    7462:	01 96       	adiw	r24, 0x01	; 1
    7464:	9a 87       	std	Y+10, r25	; 0x0a
    7466:	89 87       	std	Y+9, r24	; 0x09
    7468:	ab e7       	ldi	r26, 0x7B	; 123
    746a:	b5 e0       	ldi	r27, 0x05	; 5
    746c:	b8 87       	std	Y+8, r27	; 0x08
    746e:	af 83       	std	Y+7, r26	; 0x07
    7470:	00 e9       	ldi	r16, 0x90	; 144
    7472:	17 e0       	ldi	r17, 0x07	; 7
    7474:	28 ea       	ldi	r18, 0xA8	; 168
    7476:	22 2e       	mov	r2, r18
    7478:	27 e0       	ldi	r18, 0x07	; 7
    747a:	32 2e       	mov	r3, r18
    747c:	e1 2c       	mov	r14, r1
    747e:	f1 2c       	mov	r15, r1
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    7480:	e9 85       	ldd	r30, Y+9	; 0x09
    7482:	fa 85       	ldd	r31, Y+10	; 0x0a
    7484:	81 90       	ld	r8, Z+
    7486:	91 90       	ld	r9, Z+
    7488:	fa 87       	std	Y+10, r31	; 0x0a
    748a:	e9 87       	std	Y+9, r30	; 0x09
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		
		P1_temp = gyroADC[axis] + stick;
    748c:	af 81       	ldd	r26, Y+7	; 0x07
    748e:	b8 85       	ldd	r27, Y+8	; 0x08
    7490:	ad 90       	ld	r10, X+
    7492:	bd 90       	ld	r11, X+
    7494:	b8 87       	std	Y+8, r27	; 0x08
    7496:	af 83       	std	Y+7, r26	; 0x07
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick = RCinputsAxis[axis] >> (4 - Config.Stick_Lock_rate - 2);
    7498:	b4 01       	movw	r22, r8
    749a:	0c 2c       	mov	r0, r12
    749c:	02 c0       	rjmp	.+4      	; 0x74a2 <Sensor_PID+0x15c>
    749e:	75 95       	asr	r23
    74a0:	67 95       	ror	r22
    74a2:	0a 94       	dec	r0
    74a4:	e2 f7       	brpl	.-8      	; 0x749e <Sensor_PID+0x158>
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		
		P1_temp = gyroADC[axis] + stick;
    74a6:	6a 0d       	add	r22, r10
    74a8:	7b 1d       	adc	r23, r11
		// Work out multiplication factor compared to standard loop time
		tempf2 = period;							// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf2 = P1_temp;							// Promote int32_t to float
    74aa:	88 27       	eor	r24, r24
    74ac:	77 fd       	sbrc	r23, 7
    74ae:	80 95       	com	r24
    74b0:	98 2f       	mov	r25, r24
    74b2:	0e 94 35 41 	call	0x826a	; 0x826a <__floatsisf>
		tempf2 = tempf2 * factor;
    74b6:	a3 01       	movw	r20, r6
    74b8:	92 01       	movw	r18, r4
    74ba:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <__mulsf3>
		P1_temp = (int32_t)tempf2;					// Demote to int32_t
    74be:	0e 94 02 41 	call	0x8204	; 0x8204 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[axis] += P1_temp;
    74c2:	f8 01       	movw	r30, r16
    74c4:	20 81       	ld	r18, Z
    74c6:	31 81       	ldd	r19, Z+1	; 0x01
    74c8:	42 81       	ldd	r20, Z+2	; 0x02
    74ca:	53 81       	ldd	r21, Z+3	; 0x03
    74cc:	62 0f       	add	r22, r18
    74ce:	73 1f       	adc	r23, r19
    74d0:	84 1f       	adc	r24, r20
    74d2:	95 1f       	adc	r25, r21
    74d4:	60 83       	st	Z, r22
    74d6:	71 83       	std	Z+1, r23	; 0x01
    74d8:	82 83       	std	Z+2, r24	; 0x02
    74da:	93 83       	std	Z+3, r25	; 0x03

		// Reset the I-terms when you need to adjust the I-term with RC
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
    74dc:	89 28       	or	r8, r9
    74de:	41 f1       	breq	.+80     	; 0x7530 <Sensor_PID+0x1ea>
    74e0:	f7 01       	movw	r30, r14
    74e2:	e0 5a       	subi	r30, 0xA0	; 160
    74e4:	f9 4f       	sbci	r31, 0xF9	; 249
		{
			if (IntegralGyro[axis] > Config.Raw_I_Constrain[axis])
    74e6:	20 81       	ld	r18, Z
    74e8:	31 81       	ldd	r19, Z+1	; 0x01
    74ea:	42 81       	ldd	r20, Z+2	; 0x02
    74ec:	53 81       	ldd	r21, Z+3	; 0x03
    74ee:	26 17       	cp	r18, r22
    74f0:	37 07       	cpc	r19, r23
    74f2:	48 07       	cpc	r20, r24
    74f4:	59 07       	cpc	r21, r25
    74f6:	2c f4       	brge	.+10     	; 0x7502 <Sensor_PID+0x1bc>
			{
				IntegralGyro[axis] = Config.Raw_I_Constrain[axis];
    74f8:	f8 01       	movw	r30, r16
    74fa:	20 83       	st	Z, r18
    74fc:	31 83       	std	Z+1, r19	; 0x01
    74fe:	42 83       	std	Z+2, r20	; 0x02
    7500:	53 83       	std	Z+3, r21	; 0x03
			}
			if (IntegralGyro[axis] < -Config.Raw_I_Constrain[axis])
    7502:	da 01       	movw	r26, r20
    7504:	c9 01       	movw	r24, r18
    7506:	44 27       	eor	r20, r20
    7508:	55 27       	eor	r21, r21
    750a:	ba 01       	movw	r22, r20
    750c:	48 1b       	sub	r20, r24
    750e:	59 0b       	sbc	r21, r25
    7510:	6a 0b       	sbc	r22, r26
    7512:	7b 0b       	sbc	r23, r27
    7514:	f8 01       	movw	r30, r16
    7516:	80 81       	ld	r24, Z
    7518:	91 81       	ldd	r25, Z+1	; 0x01
    751a:	a2 81       	ldd	r26, Z+2	; 0x02
    751c:	b3 81       	ldd	r27, Z+3	; 0x03
    751e:	84 17       	cp	r24, r20
    7520:	95 07       	cpc	r25, r21
    7522:	a6 07       	cpc	r26, r22
    7524:	b7 07       	cpc	r27, r23
    7526:	24 f4       	brge	.+8      	; 0x7530 <Sensor_PID+0x1ea>
			{
				IntegralGyro[axis] = -Config.Raw_I_Constrain[axis];
    7528:	40 83       	st	Z, r20
    752a:	51 83       	std	Z+1, r21	; 0x01
    752c:	62 83       	std	Z+2, r22	; 0x02
    752e:	73 83       	std	Z+3, r23	; 0x03

		//************************************************************
		// Sum gyro readings for P-terms for later averaging
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
    7530:	a5 01       	movw	r20, r10
    7532:	66 27       	eor	r22, r22
    7534:	57 fd       	sbrc	r21, 7
    7536:	60 95       	com	r22
    7538:	76 2f       	mov	r23, r22
    753a:	f1 01       	movw	r30, r2
    753c:	80 81       	ld	r24, Z
    753e:	91 81       	ldd	r25, Z+1	; 0x01
    7540:	a2 81       	ldd	r26, Z+2	; 0x02
    7542:	b3 81       	ldd	r27, Z+3	; 0x03
    7544:	84 0f       	add	r24, r20
    7546:	95 1f       	adc	r25, r21
    7548:	a6 1f       	adc	r26, r22
    754a:	b7 1f       	adc	r27, r23
    754c:	81 93       	st	Z+, r24
    754e:	91 93       	st	Z+, r25
    7550:	a1 93       	st	Z+, r26
    7552:	b1 93       	st	Z+, r27
    7554:	1f 01       	movw	r2, r30
    7556:	0c 5f       	subi	r16, 0xFC	; 252
    7558:	1f 4f       	sbci	r17, 0xFF	; 255
    755a:	f4 e0       	ldi	r31, 0x04	; 4
    755c:	ef 0e       	add	r14, r31
    755e:	f1 1c       	adc	r15, r1

	//************************************************************
	// Per-cycle PID handling
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    7560:	8c e0       	ldi	r24, 0x0C	; 12
    7562:	e8 16       	cp	r14, r24
    7564:	f1 04       	cpc	r15, r1
    7566:	09 f0       	breq	.+2      	; 0x756a <Sensor_PID+0x224>
    7568:	8b cf       	rjmp	.-234    	; 0x7480 <Sensor_PID+0x13a>
		//************************************************************

		PID_AvgGyro[axis] += gyroADC[axis];
		
	} // for (axis = 0; axis <= YAW; axis ++)
}
    756a:	2a 96       	adiw	r28, 0x0a	; 10
    756c:	0f b6       	in	r0, 0x3f	; 63
    756e:	f8 94       	cli
    7570:	de bf       	out	0x3e, r29	; 62
    7572:	0f be       	out	0x3f, r0	; 63
    7574:	cd bf       	out	0x3d, r28	; 61
    7576:	df 91       	pop	r29
    7578:	cf 91       	pop	r28
    757a:	1f 91       	pop	r17
    757c:	0f 91       	pop	r16
    757e:	ff 90       	pop	r15
    7580:	ef 90       	pop	r14
    7582:	df 90       	pop	r13
    7584:	cf 90       	pop	r12
    7586:	bf 90       	pop	r11
    7588:	af 90       	pop	r10
    758a:	9f 90       	pop	r9
    758c:	8f 90       	pop	r8
    758e:	7f 90       	pop	r7
    7590:	6f 90       	pop	r6
    7592:	5f 90       	pop	r5
    7594:	4f 90       	pop	r4
    7596:	3f 90       	pop	r3
    7598:	2f 90       	pop	r2
    759a:	08 95       	ret

0000759c <Calculate_PID>:

void Calculate_PID(void)
{
    759c:	2f 92       	push	r2
    759e:	3f 92       	push	r3
    75a0:	4f 92       	push	r4
    75a2:	5f 92       	push	r5
    75a4:	6f 92       	push	r6
    75a6:	7f 92       	push	r7
    75a8:	8f 92       	push	r8
    75aa:	9f 92       	push	r9
    75ac:	af 92       	push	r10
    75ae:	bf 92       	push	r11
    75b0:	cf 92       	push	r12
    75b2:	df 92       	push	r13
    75b4:	ef 92       	push	r14
    75b6:	ff 92       	push	r15
    75b8:	0f 93       	push	r16
    75ba:	1f 93       	push	r17
    75bc:	cf 93       	push	r28
    75be:	df 93       	push	r29
    75c0:	cd b7       	in	r28, 0x3d	; 61
    75c2:	de b7       	in	r29, 0x3e	; 62
    75c4:	a9 97       	sbiw	r28, 0x29	; 41
    75c6:	0f b6       	in	r0, 0x3f	; 63
    75c8:	f8 94       	cli
    75ca:	de bf       	out	0x3e, r29	; 62
    75cc:	0f be       	out	0x3f, r0	; 63
    75ce:	cd bf       	out	0x3d, r28	; 61
	int32_t temp32 = 0;						// Needed for 32-bit dynamic gain calculations
	int32_t mult32 = 0;
	int32_t PID_Gyros_32;

	// Initialise arrays with gain values. Cludgy fix to reduce code space
	int8_t 	P_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.P_mult, Config.FlightMode[Config.Flight].Pitch.P_mult, Config.FlightMode[Config.Flight].Yaw.P_mult};
    75d0:	80 91 4a 07 	lds	r24, 0x074A
    75d4:	e8 2f       	mov	r30, r24
    75d6:	ff 27       	eor	r31, r31
    75d8:	e7 fd       	sbrc	r30, 7
    75da:	f0 95       	com	r31
    75dc:	26 e1       	ldi	r18, 0x16	; 22
    75de:	82 02       	muls	r24, r18
    75e0:	c0 01       	movw	r24, r0
    75e2:	11 24       	eor	r1, r1
    75e4:	87 54       	subi	r24, 0x47	; 71
    75e6:	9a 4f       	sbci	r25, 0xFA	; 250
    75e8:	dc 01       	movw	r26, r24
    75ea:	a4 5a       	subi	r26, 0xA4	; 164
    75ec:	bf 4f       	sbci	r27, 0xFF	; 255
    75ee:	2c 91       	ld	r18, X
    75f0:	2b 87       	std	Y+11, r18	; 0x0b
    75f2:	17 96       	adiw	r26, 0x07	; 7
    75f4:	2c 91       	ld	r18, X
    75f6:	2c 87       	std	Y+12, r18	; 0x0c
    75f8:	17 96       	adiw	r26, 0x07	; 7
    75fa:	2c 91       	ld	r18, X
    75fc:	2d 87       	std	Y+13, r18	; 0x0d
	int8_t 	I_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.I_mult, Config.FlightMode[Config.Flight].Pitch.I_mult, Config.FlightMode[Config.Flight].Yaw.I_mult};
    75fe:	1d 97       	sbiw	r26, 0x0d	; 13
    7600:	2c 91       	ld	r18, X
    7602:	28 87       	std	Y+8, r18	; 0x08
    7604:	17 96       	adiw	r26, 0x07	; 7
    7606:	2c 91       	ld	r18, X
    7608:	29 87       	std	Y+9, r18	; 0x09
    760a:	17 96       	adiw	r26, 0x07	; 7
    760c:	2c 91       	ld	r18, X
    760e:	2a 87       	std	Y+10, r18	; 0x0a
	int8_t 	D_gain[NUMBEROFAXIS] = {Config.FlightMode[Config.Flight].Roll.D_mult, Config.FlightMode[Config.Flight].Pitch.D_mult, Config.FlightMode[Config.Flight].Yaw.D_mult};
    7610:	1d 97       	sbiw	r26, 0x0d	; 13
    7612:	2c 91       	ld	r18, X
    7614:	2d 83       	std	Y+5, r18	; 0x05
    7616:	17 96       	adiw	r26, 0x07	; 7
    7618:	2c 91       	ld	r18, X
    761a:	2e 83       	std	Y+6, r18	; 0x06
    761c:	17 96       	adiw	r26, 0x07	; 7
    761e:	2c 91       	ld	r18, X
    7620:	2f 83       	std	Y+7, r18	; 0x07
	int8_t 	L_gain[NUMBEROFAXIS - 1] = {Config.FlightMode[Config.Flight].A_Roll_P_mult, Config.FlightMode[Config.Flight].A_Pitch_P_mult};
    7622:	1c 97       	sbiw	r26, 0x0c	; 12
    7624:	2c 91       	ld	r18, X
    7626:	2e 87       	std	Y+14, r18	; 0x0e
    7628:	17 96       	adiw	r26, 0x07	; 7
    762a:	2c 91       	ld	r18, X
    762c:	2f 87       	std	Y+15, r18	; 0x0f

	// Only for roll and pitch acc trim
	int16_t	L_trim[2] =	{Config.Rolltrim[Config.Flight], Config.Pitchtrim[Config.Flight]};
    762e:	df 01       	movw	r26, r30
    7630:	aa 0f       	add	r26, r26
    7632:	bb 1f       	adc	r27, r27
    7634:	a5 5b       	subi	r26, 0xB5	; 181
    7636:	b8 4f       	sbci	r27, 0xF8	; 248
    7638:	2d 91       	ld	r18, X+
    763a:	3c 91       	ld	r19, X
    763c:	3a 83       	std	Y+2, r19	; 0x02
    763e:	29 83       	std	Y+1, r18	; 0x01
    7640:	ee 0f       	add	r30, r30
    7642:	ff 1f       	adc	r31, r31
    7644:	ef 5a       	subi	r30, 0xAF	; 175
    7646:	f8 4f       	sbci	r31, 0xF8	; 248
    7648:	20 81       	ld	r18, Z
    764a:	31 81       	ldd	r19, Z+1	; 0x01
    764c:	3c 83       	std	Y+4, r19	; 0x04
    764e:	2b 83       	std	Y+3, r18	; 0x03
		// Handle auto-centering of I-terms in Camstab autocenter mode
		// If no significant gyro input and IntegralGyro[axis] is non-zero, 
		// pull it back slowly.
		//************************************************************

		if ((Config.AutoCenter == ON) && (Config.CamStab == ON))
    7650:	30 91 7a 06 	lds	r19, 0x067A
    7654:	3c a3       	std	Y+36, r19	; 0x24
    7656:	a0 91 79 06 	lds	r26, 0x0679
    765a:	ad a3       	std	Y+37, r26	; 0x25
		// Do this by mixing between (no PID) and PID
		// PID gains are not changed but the effect is the same
		//************************************************************

		// If dynamic gain set up 
		if (Config.DynGainSrc != NOCHAN)
    765c:	b0 91 07 06 	lds	r27, 0x0607
    7660:	be a3       	std	Y+38, r27	; 0x26
    7662:	28 ea       	ldi	r18, 0xA8	; 168
    7664:	82 2e       	mov	r8, r18
    7666:	27 e0       	ldi	r18, 0x07	; 7
    7668:	92 2e       	mov	r9, r18
    766a:	eb e7       	ldi	r30, 0x7B	; 123
    766c:	f5 e0       	ldi	r31, 0x05	; 5
    766e:	fd 8f       	std	Y+29, r31	; 0x1d
    7670:	ec 8f       	std	Y+28, r30	; 0x1c
    7672:	22 ea       	ldi	r18, 0xA2	; 162
    7674:	37 e0       	ldi	r19, 0x07	; 7
    7676:	3b 8b       	std	Y+19, r19	; 0x13
    7678:	2a 8b       	std	Y+18, r18	; 0x12
    767a:	ac e9       	ldi	r26, 0x9C	; 156
    767c:	b7 e0       	ldi	r27, 0x07	; 7
    767e:	b9 8b       	std	Y+17, r27	; 0x11
    7680:	a8 8b       	std	Y+16, r26	; 0x10
    7682:	fe 01       	movw	r30, r28
    7684:	3b 96       	adiw	r30, 0x0b	; 11
    7686:	fb 8f       	std	Y+27, r31	; 0x1b
    7688:	ea 8f       	std	Y+26, r30	; 0x1a
    768a:	00 e9       	ldi	r16, 0x90	; 144
    768c:	17 e0       	ldi	r17, 0x07	; 7
    768e:	9e 01       	movw	r18, r28
    7690:	28 5f       	subi	r18, 0xF8	; 248
    7692:	3f 4f       	sbci	r19, 0xFF	; 255
    7694:	3f 8f       	std	Y+31, r19	; 0x1f
    7696:	2e 8f       	std	Y+30, r18	; 0x1e
    7698:	ac e2       	ldi	r26, 0x2C	; 44
    769a:	b5 e0       	ldi	r27, 0x05	; 5
    769c:	bd 8b       	std	Y+21, r27	; 0x15
    769e:	ac 8b       	std	Y+20, r26	; 0x14
    76a0:	36 97       	sbiw	r30, 0x06	; 6
    76a2:	f9 a3       	std	Y+33, r31	; 0x21
    76a4:	e8 a3       	std	Y+32, r30	; 0x20
    76a6:	24 e5       	ldi	r18, 0x54	; 84
    76a8:	36 e0       	ldi	r19, 0x06	; 6
    76aa:	3b a3       	std	Y+35, r19	; 0x23
    76ac:	2a a3       	std	Y+34, r18	; 0x22
    76ae:	21 2c       	mov	r2, r1
    76b0:	31 2c       	mov	r3, r1
    76b2:	a1 2c       	mov	r10, r1
    76b4:	b1 2c       	mov	r11, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp = (int32_t)(Config.FlightMode[Config.Flight].Yaw_trim << PID_SCALE);
    76b6:	dc 01       	movw	r26, r24
    76b8:	a2 59       	subi	r26, 0x92	; 146
    76ba:	bf 4f       	sbci	r27, 0xFF	; 255
    76bc:	b8 a7       	std	Y+40, r27	; 0x28
    76be:	af a3       	std	Y+39, r26	; 0x27
	{
		//************************************************************
		// Get average gyro readings for P-terms
		//************************************************************

		gyroADC[axis] = (int16_t)(PID_AvgGyro[axis] / LoopCount);
    76c0:	20 91 0c 05 	lds	r18, 0x050C
    76c4:	30 e0       	ldi	r19, 0x00	; 0
    76c6:	40 e0       	ldi	r20, 0x00	; 0
    76c8:	50 e0       	ldi	r21, 0x00	; 0
    76ca:	f4 01       	movw	r30, r8
    76cc:	60 81       	ld	r22, Z
    76ce:	71 81       	ldd	r23, Z+1	; 0x01
    76d0:	82 81       	ldd	r24, Z+2	; 0x02
    76d2:	93 81       	ldd	r25, Z+3	; 0x03
    76d4:	0e 94 74 42 	call	0x84e8	; 0x84e8 <__divmodsi4>
    76d8:	69 01       	movw	r12, r18
    76da:	7a 01       	movw	r14, r20
    76dc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    76de:	bd 8d       	ldd	r27, Y+29	; 0x1d
    76e0:	2d 93       	st	X+, r18
    76e2:	3d 93       	st	X+, r19
    76e4:	bd 8f       	std	Y+29, r27	; 0x1d
    76e6:	ac 8f       	std	Y+28, r26	; 0x1c
		PID_AvgGyro[axis] = 0;					// Reset average		
    76e8:	f4 01       	movw	r30, r8
    76ea:	10 82       	st	Z, r1
    76ec:	11 82       	std	Z+1, r1	; 0x01
    76ee:	12 82       	std	Z+2, r1	; 0x02
    76f0:	13 82       	std	Z+3, r1	; 0x03
    76f2:	a9 a6       	std	Y+41, r10	; 0x29
		
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    76f4:	fa 2d       	mov	r31, r10
    76f6:	f2 30       	cpi	r31, 0x02	; 2
    76f8:	69 f4       	brne	.+26     	; 0x7714 <Calculate_PID+0x178>
		{
			PID_gyro_temp = (int32_t)(Config.FlightMode[Config.Flight].Yaw_trim << PID_SCALE);
    76fa:	af a1       	ldd	r26, Y+39	; 0x27
    76fc:	b8 a5       	ldd	r27, Y+40	; 0x28
    76fe:	4c 91       	ld	r20, X
    7700:	b0 e4       	ldi	r27, 0x40	; 64
    7702:	4b 02       	muls	r20, r27
    7704:	a0 01       	movw	r20, r0
    7706:	11 24       	eor	r1, r1
    7708:	2a 01       	movw	r4, r20
    770a:	66 24       	eor	r6, r6
    770c:	57 fc       	sbrc	r5, 7
    770e:	60 94       	com	r6
    7710:	76 2c       	mov	r7, r6
    7712:	03 c0       	rjmp	.+6      	; 0x771a <Calculate_PID+0x17e>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp = 0;
    7714:	41 2c       	mov	r4, r1
    7716:	51 2c       	mov	r5, r1
    7718:	32 01       	movw	r6, r4
		// Handle auto-centering of I-terms in Camstab autocenter mode
		// If no significant gyro input and IntegralGyro[axis] is non-zero, 
		// pull it back slowly.
		//************************************************************

		if ((Config.AutoCenter == ON) && (Config.CamStab == ON))
    771a:	ec a1       	ldd	r30, Y+36	; 0x24
    771c:	e1 30       	cpi	r30, 0x01	; 1
    771e:	e9 f4       	brne	.+58     	; 0x775a <Calculate_PID+0x1be>
    7720:	fd a1       	ldd	r31, Y+37	; 0x25
    7722:	f1 30       	cpi	r31, 0x01	; 1
    7724:	d1 f4       	brne	.+52     	; 0x775a <Calculate_PID+0x1be>
		{
			if (IntegralGyro[axis] > 0)
    7726:	f8 01       	movw	r30, r16
    7728:	80 81       	ld	r24, Z
    772a:	91 81       	ldd	r25, Z+1	; 0x01
    772c:	a2 81       	ldd	r26, Z+2	; 0x02
    772e:	b3 81       	ldd	r27, Z+3	; 0x03
    7730:	18 16       	cp	r1, r24
    7732:	19 06       	cpc	r1, r25
    7734:	1a 06       	cpc	r1, r26
    7736:	1b 06       	cpc	r1, r27
    7738:	24 f4       	brge	.+8      	; 0x7742 <Calculate_PID+0x1a6>
			{
				IntegralGyro[axis] --;
    773a:	01 97       	sbiw	r24, 0x01	; 1
    773c:	a1 09       	sbc	r26, r1
    773e:	b1 09       	sbc	r27, r1
    7740:	08 c0       	rjmp	.+16     	; 0x7752 <Calculate_PID+0x1b6>
			}
			else if (IntegralGyro[axis] < 0)
    7742:	00 97       	sbiw	r24, 0x00	; 0
    7744:	a1 05       	cpc	r26, r1
    7746:	b1 05       	cpc	r27, r1
    7748:	41 f0       	breq	.+16     	; 0x775a <Calculate_PID+0x1be>
			{	
				IntegralGyro[axis] ++;
    774a:	01 96       	adiw	r24, 0x01	; 1
    774c:	a1 1d       	adc	r26, r1
    774e:	b1 1d       	adc	r27, r1
    7750:	f8 01       	movw	r30, r16
    7752:	80 83       	st	Z, r24
    7754:	91 83       	std	Z+1, r25	; 0x01
    7756:	a2 83       	std	Z+2, r26	; 0x02
    7758:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term
		PID_gyro_temp += gyroADC[axis] * P_gain[axis];				// Multiply P-term (Max gain of 127)
    775a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    775c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    775e:	2d 91       	ld	r18, X+
    7760:	bb 8f       	std	Y+27, r27	; 0x1b
    7762:	aa 8f       	std	Y+26, r26	; 0x1a
    7764:	33 27       	eor	r19, r19
    7766:	27 fd       	sbrc	r18, 7
    7768:	30 95       	com	r19
    776a:	2c 9d       	mul	r18, r12
    776c:	c0 01       	movw	r24, r0
    776e:	2d 9d       	mul	r18, r13
    7770:	90 0d       	add	r25, r0
    7772:	3c 9d       	mul	r19, r12
    7774:	90 0d       	add	r25, r0
    7776:	11 24       	eor	r1, r1
    7778:	9c 01       	movw	r18, r24
    777a:	44 27       	eor	r20, r20
    777c:	37 fd       	sbrc	r19, 7
    777e:	40 95       	com	r20
    7780:	54 2f       	mov	r21, r20
    7782:	24 0d       	add	r18, r4
    7784:	35 1d       	adc	r19, r5
    7786:	46 1d       	adc	r20, r6
    7788:	57 1d       	adc	r21, r7
		PID_gyro_temp = PID_gyro_temp * (int32_t)3;					// Multiply by 3
    778a:	a3 e0       	ldi	r26, 0x03	; 3
    778c:	b0 e0       	ldi	r27, 0x00	; 0
    778e:	0e 94 b7 42 	call	0x856e	; 0x856e <__muluhisi3>
    7792:	6e 8b       	std	Y+22, r22	; 0x16
    7794:	7f 8b       	std	Y+23, r23	; 0x17
    7796:	88 8f       	std	Y+24, r24	; 0x18
    7798:	99 8f       	std	Y+25, r25	; 0x19

		// Gyro I-term
		PID_Gyro_I_actual = IntegralGyro[axis] * I_gain[axis];		// Multiply I-term (Max gain of 127)
    779a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    779c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    779e:	a1 91       	ld	r26, Z+
    77a0:	ff 8f       	std	Y+31, r31	; 0x1f
    77a2:	ee 8f       	std	Y+30, r30	; 0x1e
    77a4:	f8 01       	movw	r30, r16
    77a6:	20 81       	ld	r18, Z
    77a8:	31 81       	ldd	r19, Z+1	; 0x01
    77aa:	42 81       	ldd	r20, Z+2	; 0x02
    77ac:	53 81       	ldd	r21, Z+3	; 0x03
    77ae:	bb 27       	eor	r27, r27
    77b0:	a7 fd       	sbrc	r26, 7
    77b2:	b0 95       	com	r27
    77b4:	0e 94 c2 42 	call	0x8584	; 0x8584 <__mulshisi3>
    77b8:	2b 01       	movw	r4, r22
    77ba:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual = PID_Gyro_I_actual >> 5;					// Divide by 32
    77bc:	75 e0       	ldi	r23, 0x05	; 5
    77be:	75 94       	asr	r7
    77c0:	67 94       	ror	r6
    77c2:	57 94       	ror	r5
    77c4:	47 94       	ror	r4
    77c6:	7a 95       	dec	r23
    77c8:	d1 f7       	brne	.-12     	; 0x77be <Calculate_PID+0x222>

		// Gyro D-term
		DifferentialGyro = (int16_t)(gyroADC[axis] - lastError[axis]);
    77ca:	ac 89       	ldd	r26, Y+20	; 0x14
    77cc:	bd 89       	ldd	r27, Y+21	; 0x15
    77ce:	8d 91       	ld	r24, X+
    77d0:	9c 91       	ld	r25, X
    77d2:	11 97       	sbiw	r26, 0x01	; 1
    77d4:	96 01       	movw	r18, r12
    77d6:	28 1b       	sub	r18, r24
    77d8:	39 0b       	sbc	r19, r25
		lastError[axis] = gyroADC[axis];
    77da:	cd 92       	st	X+, r12
    77dc:	dc 92       	st	X, r13
		DifferentialGyro *= D_gain[axis];							// Multiply D-term by up to 127
    77de:	e8 a1       	ldd	r30, Y+32	; 0x20
    77e0:	f9 a1       	ldd	r31, Y+33	; 0x21
    77e2:	a1 91       	ld	r26, Z+
    77e4:	f9 a3       	std	Y+33, r31	; 0x21
    77e6:	e8 a3       	std	Y+32, r30	; 0x20
    77e8:	bb 27       	eor	r27, r27
    77ea:	a7 fd       	sbrc	r26, 7
    77ec:	b0 95       	com	r27
    77ee:	0e 94 99 42 	call	0x8532	; 0x8532 <__mulhisi3>
		DifferentialGyro = DifferentialGyro << 4;					// Multiply by 16
    77f2:	e4 e0       	ldi	r30, 0x04	; 4
    77f4:	66 0f       	add	r22, r22
    77f6:	77 1f       	adc	r23, r23
    77f8:	88 1f       	adc	r24, r24
    77fa:	99 1f       	adc	r25, r25
    77fc:	ea 95       	dec	r30
    77fe:	d1 f7       	brne	.-12     	; 0x77f4 <Calculate_PID+0x258>
		//************************************************************
		// I-term output limits
		//************************************************************

		// Maximum 125% limit is full servo throw 
		if (PID_Gyro_I_actual > Config.Raw_I_Limits[axis]) 
    7800:	aa a1       	ldd	r26, Y+34	; 0x22
    7802:	bb a1       	ldd	r27, Y+35	; 0x23
    7804:	2d 91       	ld	r18, X+
    7806:	3d 91       	ld	r19, X+
    7808:	4d 91       	ld	r20, X+
    780a:	5d 91       	ld	r21, X+
    780c:	bb a3       	std	Y+35, r27	; 0x23
    780e:	aa a3       	std	Y+34, r26	; 0x22
    7810:	24 15       	cp	r18, r4
    7812:	35 05       	cpc	r19, r5
    7814:	46 05       	cpc	r20, r6
    7816:	57 05       	cpc	r21, r7
    7818:	84 f0       	brlt	.+32     	; 0x783a <Calculate_PID+0x29e>
		{
			PID_Gyro_I_temp = Config.Raw_I_Limits[axis];
		}
		else if (PID_Gyro_I_actual < -Config.Raw_I_Limits[axis]) 
    781a:	cc 24       	eor	r12, r12
    781c:	dd 24       	eor	r13, r13
    781e:	76 01       	movw	r14, r12
    7820:	c2 1a       	sub	r12, r18
    7822:	d3 0a       	sbc	r13, r19
    7824:	e4 0a       	sbc	r14, r20
    7826:	f5 0a       	sbc	r15, r21
    7828:	a3 01       	movw	r20, r6
    782a:	92 01       	movw	r18, r4
    782c:	4c 14       	cp	r4, r12
    782e:	5d 04       	cpc	r5, r13
    7830:	6e 04       	cpc	r6, r14
    7832:	7f 04       	cpc	r7, r15
    7834:	14 f4       	brge	.+4      	; 0x783a <Calculate_PID+0x29e>
    7836:	a7 01       	movw	r20, r14
    7838:	96 01       	movw	r18, r12

		//************************************************************
		// Sum Gyro P and D terms and rescale
		//************************************************************
	
		PID_Gyros[axis] = (int16_t)((PID_gyro_temp + PID_Gyro_I_temp + DifferentialGyro) >> PID_SCALE);
    783a:	4e 88       	ldd	r4, Y+22	; 0x16
    783c:	5f 88       	ldd	r5, Y+23	; 0x17
    783e:	68 8c       	ldd	r6, Y+24	; 0x18
    7840:	79 8c       	ldd	r7, Y+25	; 0x19
    7842:	42 0e       	add	r4, r18
    7844:	53 1e       	adc	r5, r19
    7846:	64 1e       	adc	r6, r20
    7848:	75 1e       	adc	r7, r21
    784a:	46 0e       	add	r4, r22
    784c:	57 1e       	adc	r5, r23
    784e:	68 1e       	adc	r6, r24
    7850:	79 1e       	adc	r7, r25
    7852:	66 e0       	ldi	r22, 0x06	; 6
    7854:	75 94       	asr	r7
    7856:	67 94       	ror	r6
    7858:	57 94       	ror	r5
    785a:	47 94       	ror	r4
    785c:	6a 95       	dec	r22
    785e:	d1 f7       	brne	.-12     	; 0x7854 <Calculate_PID+0x2b8>
    7860:	e8 89       	ldd	r30, Y+16	; 0x10
    7862:	f9 89       	ldd	r31, Y+17	; 0x11
    7864:	51 82       	std	Z+1, r5	; 0x01
    7866:	40 82       	st	Z, r4
		// Do this by mixing between (no PID) and PID
		// PID gains are not changed but the effect is the same
		//************************************************************

		// If dynamic gain set up 
		if (Config.DynGainSrc != NOCHAN)
    7868:	fe a1       	ldd	r31, Y+38	; 0x26
    786a:	f8 30       	cpi	r31, 0x08	; 8
    786c:	21 f0       	breq	.+8      	; 0x7876 <Calculate_PID+0x2da>

			// Normalise the PID
			temp32 = (PID_Gyros_32 / (int32_t)Config.DynGain);

			// Cast back to native size
			PID_Gyros[axis] = (int16_t)temp32;
    786e:	a8 89       	ldd	r26, Y+16	; 0x10
    7870:	b9 89       	ldd	r27, Y+17	; 0x11
    7872:	1d 92       	st	X+, r1
    7874:	1c 92       	st	X, r1
		//************************************************************
		// Calculate acc error from angle data (roll and pitch only)
		//************************************************************

		// Autolevel mode (Use IMU to calculate attitude) for roll and pitch only
		if ((Flight_flags & (1 << AutoLevel)) && (axis < YAW)) 
    7876:	80 91 14 05 	lds	r24, 0x0514
    787a:	80 ff       	sbrs	r24, 0
    787c:	29 c0       	rjmp	.+82     	; 0x78d0 <Calculate_PID+0x334>
    787e:	e9 a5       	ldd	r30, Y+41	; 0x29
    7880:	e2 30       	cpi	r30, 0x02	; 2
    7882:	31 f1       	breq	.+76     	; 0x78d0 <Calculate_PID+0x334>
		{
			PID_acc_temp = angle[axis] - L_trim[axis];				// Offset angle with trim
    7884:	f1 01       	movw	r30, r2
    7886:	e7 56       	subi	r30, 0x67	; 103
    7888:	fa 4f       	sbci	r31, 0xFA	; 250
    788a:	20 81       	ld	r18, Z
    788c:	31 81       	ldd	r19, Z+1	; 0x01
    788e:	e1 e0       	ldi	r30, 0x01	; 1
    7890:	f0 e0       	ldi	r31, 0x00	; 0
    7892:	ec 0f       	add	r30, r28
    7894:	fd 1f       	adc	r31, r29
    7896:	e2 0d       	add	r30, r2
    7898:	f3 1d       	adc	r31, r3
    789a:	80 81       	ld	r24, Z
    789c:	91 81       	ldd	r25, Z+1	; 0x01
    789e:	28 1b       	sub	r18, r24
    78a0:	39 0b       	sbc	r19, r25
    78a2:	ee e0       	ldi	r30, 0x0E	; 14
    78a4:	f0 e0       	ldi	r31, 0x00	; 0
    78a6:	ec 0f       	add	r30, r28
    78a8:	fd 1f       	adc	r31, r29
    78aa:	ea 0d       	add	r30, r10
    78ac:	fb 1d       	adc	r31, r11
			PID_acc_temp *= L_gain[axis];							// P-term of accelerometer (Max gain of 127)
    78ae:	a0 81       	ld	r26, Z
    78b0:	bb 27       	eor	r27, r27
    78b2:	a7 fd       	sbrc	r26, 7
    78b4:	b0 95       	com	r27
    78b6:	0e 94 99 42 	call	0x8532	; 0x8532 <__mulhisi3>
			PID_ACCs[axis] = (int16_t)(PID_acc_temp >> 8);			// Accs need much less scaling
    78ba:	bb 27       	eor	r27, r27
    78bc:	97 fd       	sbrc	r25, 7
    78be:	ba 95       	dec	r27
    78c0:	a9 2f       	mov	r26, r25
    78c2:	98 2f       	mov	r25, r24
    78c4:	87 2f       	mov	r24, r23
    78c6:	ea 89       	ldd	r30, Y+18	; 0x12
    78c8:	fb 89       	ldd	r31, Y+19	; 0x13
    78ca:	91 83       	std	Z+1, r25	; 0x01
    78cc:	80 83       	st	Z, r24
    78ce:	04 c0       	rjmp	.+8      	; 0x78d8 <Calculate_PID+0x33c>
		}
		else
		{
			PID_ACCs[axis] = 0;										// Ensure these are zeroed when autolevel OFF
    78d0:	aa 89       	ldd	r26, Y+18	; 0x12
    78d2:	bb 89       	ldd	r27, Y+19	; 0x13
    78d4:	1d 92       	st	X+, r1
    78d6:	1c 92       	st	X, r1
    78d8:	bf ef       	ldi	r27, 0xFF	; 255
    78da:	ab 1a       	sub	r10, r27
    78dc:	bb 0a       	sbc	r11, r27
    78de:	e4 e0       	ldi	r30, 0x04	; 4
    78e0:	8e 0e       	add	r8, r30
    78e2:	91 1c       	adc	r9, r1
    78e4:	f2 e0       	ldi	r31, 0x02	; 2
    78e6:	2f 0e       	add	r2, r31
    78e8:	31 1c       	adc	r3, r1
    78ea:	2a 89       	ldd	r18, Y+18	; 0x12
    78ec:	3b 89       	ldd	r19, Y+19	; 0x13
    78ee:	2e 5f       	subi	r18, 0xFE	; 254
    78f0:	3f 4f       	sbci	r19, 0xFF	; 255
    78f2:	3b 8b       	std	Y+19, r19	; 0x13
    78f4:	2a 8b       	std	Y+18, r18	; 0x12
    78f6:	88 89       	ldd	r24, Y+16	; 0x10
    78f8:	99 89       	ldd	r25, Y+17	; 0x11
    78fa:	02 96       	adiw	r24, 0x02	; 2
    78fc:	99 8b       	std	Y+17, r25	; 0x11
    78fe:	88 8b       	std	Y+16, r24	; 0x10
    7900:	0c 5f       	subi	r16, 0xFC	; 252
    7902:	1f 4f       	sbci	r17, 0xFF	; 255
    7904:	ac 89       	ldd	r26, Y+20	; 0x14
    7906:	bd 89       	ldd	r27, Y+21	; 0x15
    7908:	12 96       	adiw	r26, 0x02	; 2
    790a:	bd 8b       	std	Y+21, r27	; 0x15
    790c:	ac 8b       	std	Y+20, r26	; 0x14

	//************************************************************
	// PID loop
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    790e:	b3 e0       	ldi	r27, 0x03	; 3
    7910:	ab 16       	cp	r10, r27
    7912:	b1 04       	cpc	r11, r1
    7914:	09 f0       	breq	.+2      	; 0x7918 <Calculate_PID+0x37c>
    7916:	d4 ce       	rjmp	.-600    	; 0x76c0 <Calculate_PID+0x124>
			PID_ACCs[axis] = 0;										// Ensure these are zeroed when autolevel OFF
		}
	} // PID loop

	// Offset Autolevel trims in failsafe mode
	if ((Config.FailsafeType == ADVANCED) && (Flight_flags & (1 << Failsafe)) && (Config.CamStab == OFF))
    7918:	80 91 0d 06 	lds	r24, 0x060D
    791c:	81 30       	cpi	r24, 0x01	; 1
    791e:	31 f5       	brne	.+76     	; 0x796c <Calculate_PID+0x3d0>
    7920:	80 91 14 05 	lds	r24, 0x0514
    7924:	82 ff       	sbrs	r24, 2
    7926:	22 c0       	rjmp	.+68     	; 0x796c <Calculate_PID+0x3d0>
    7928:	80 91 79 06 	lds	r24, 0x0679
    792c:	81 11       	cpse	r24, r1
    792e:	1e c0       	rjmp	.+60     	; 0x796c <Calculate_PID+0x3d0>
	{
		PID_ACCs[ROLL] += (Config.FailsafeAileron * 10);
    7930:	20 91 10 06 	lds	r18, 0x0610
    7934:	80 91 a2 07 	lds	r24, 0x07A2
    7938:	90 91 a3 07 	lds	r25, 0x07A3
    793c:	ea e0       	ldi	r30, 0x0A	; 10
    793e:	2e 02       	muls	r18, r30
    7940:	80 0d       	add	r24, r0
    7942:	91 1d       	adc	r25, r1
    7944:	11 24       	eor	r1, r1
    7946:	90 93 a3 07 	sts	0x07A3, r25
    794a:	80 93 a2 07 	sts	0x07A2, r24
		PID_ACCs[PITCH] += (Config.FailsafeElevator * 10);
    794e:	20 91 0f 06 	lds	r18, 0x060F
    7952:	80 91 a4 07 	lds	r24, 0x07A4
    7956:	90 91 a5 07 	lds	r25, 0x07A5
    795a:	fa e0       	ldi	r31, 0x0A	; 10
    795c:	2f 02       	muls	r18, r31
    795e:	80 0d       	add	r24, r0
    7960:	91 1d       	adc	r25, r1
    7962:	11 24       	eor	r1, r1
    7964:	90 93 a5 07 	sts	0x07A5, r25
    7968:	80 93 a4 07 	sts	0x07A4, r24
	}

}
    796c:	a9 96       	adiw	r28, 0x29	; 41
    796e:	0f b6       	in	r0, 0x3f	; 63
    7970:	f8 94       	cli
    7972:	de bf       	out	0x3e, r29	; 62
    7974:	0f be       	out	0x3f, r0	; 63
    7976:	cd bf       	out	0x3d, r28	; 61
    7978:	df 91       	pop	r29
    797a:	cf 91       	pop	r28
    797c:	1f 91       	pop	r17
    797e:	0f 91       	pop	r16
    7980:	ff 90       	pop	r15
    7982:	ef 90       	pop	r14
    7984:	df 90       	pop	r13
    7986:	cf 90       	pop	r12
    7988:	bf 90       	pop	r11
    798a:	af 90       	pop	r10
    798c:	9f 90       	pop	r9
    798e:	8f 90       	pop	r8
    7990:	7f 90       	pop	r7
    7992:	6f 90       	pop	r6
    7994:	5f 90       	pop	r5
    7996:	4f 90       	pop	r4
    7998:	3f 90       	pop	r3
    799a:	2f 90       	pop	r2
    799c:	08 95       	ret

0000799e <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    799e:	e8 e2       	ldi	r30, 0x28	; 40
    79a0:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    79a2:	80 e0       	ldi	r24, 0x00	; 0
    79a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    79a6:	ac 01       	movw	r20, r24
    79a8:	44 0f       	add	r20, r20
    79aa:	55 1f       	adc	r21, r21
    79ac:	da 01       	movw	r26, r20
    79ae:	a3 5a       	subi	r26, 0xA3	; 163
    79b0:	b8 4f       	sbci	r27, 0xF8	; 248
    79b2:	2d 91       	ld	r18, X+
    79b4:	3c 91       	ld	r19, X
    79b6:	61 91       	ld	r22, Z+
    79b8:	71 91       	ld	r23, Z+
    79ba:	26 1b       	sub	r18, r22
    79bc:	37 0b       	sbc	r19, r23
    79be:	da 01       	movw	r26, r20
    79c0:	aa 54       	subi	r26, 0x4A	; 74
    79c2:	b8 4f       	sbci	r27, 0xF8	; 248
    79c4:	11 96       	adiw	r26, 0x01	; 1
    79c6:	3c 93       	st	X, r19
    79c8:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    79ca:	01 96       	adiw	r24, 0x01	; 1
    79cc:	88 30       	cpi	r24, 0x08	; 8
    79ce:	91 05       	cpc	r25, r1
    79d0:	51 f7       	brne	.-44     	; 0x79a6 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    79d2:	80 91 5d 07 	lds	r24, 0x075D
    79d6:	90 91 5e 07 	lds	r25, 0x075E
    79da:	20 91 28 07 	lds	r18, 0x0728
    79de:	30 91 29 07 	lds	r19, 0x0729
    79e2:	82 1b       	sub	r24, r18
    79e4:	93 0b       	sbc	r25, r19
    79e6:	90 93 b5 07 	sts	0x07B5, r25
    79ea:	80 93 b4 07 	sts	0x07B4, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750;
    79ee:	80 91 5d 07 	lds	r24, 0x075D
    79f2:	90 91 5e 07 	lds	r25, 0x075E
    79f6:	86 5a       	subi	r24, 0xA6	; 166
    79f8:	9e 40       	sbci	r25, 0x0E	; 14
    79fa:	90 93 b7 07 	sts	0x07B7, r25
    79fe:	80 93 b6 07 	sts	0x07B6, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    7a02:	80 91 58 07 	lds	r24, 0x0758
    7a06:	81 30       	cpi	r24, 0x01	; 1
    7a08:	71 f4       	brne	.+28     	; 0x7a26 <RxGetChannels+0x88>
	{
		// Note we have to reverse the source otherwise we get a double reverse if someone sets up
		// the second aileron as AILERON
		RCinputs[AILERON] = -(RxChannel[AILERON] - Config.RxChannelZeroOffset[AILERON]);
    7a0a:	20 91 5f 07 	lds	r18, 0x075F
    7a0e:	30 91 60 07 	lds	r19, 0x0760
    7a12:	80 91 2a 07 	lds	r24, 0x072A
    7a16:	90 91 2b 07 	lds	r25, 0x072B
    7a1a:	82 1b       	sub	r24, r18
    7a1c:	93 0b       	sbc	r25, r19
    7a1e:	90 93 b9 07 	sts	0x07B9, r25
    7a22:	80 93 b8 07 	sts	0x07B8, r24
	}

	// Only reverse second aileron if set up
	if ((Config.SecAileronPol == REVERSED) && (Config.FlapChan != NOCHAN))
    7a26:	80 91 59 07 	lds	r24, 0x0759
    7a2a:	81 30       	cpi	r24, 0x01	; 1
    7a2c:	b9 f4       	brne	.+46     	; 0x7a5c <RxGetChannels+0xbe>
    7a2e:	20 91 06 06 	lds	r18, 0x0606
    7a32:	28 30       	cpi	r18, 0x08	; 8
    7a34:	99 f0       	breq	.+38     	; 0x7a5c <RxGetChannels+0xbe>
	{
		// Note we have to reverse the source otherwise we get a double reverse if someone sets up
		// the second aileron as AILERON
		RCinputs[Config.FlapChan] = -(RxChannel[Config.FlapChan] - Config.RxChannelZeroOffset[Config.FlapChan]);
    7a36:	22 0f       	add	r18, r18
    7a38:	33 0b       	sbc	r19, r19
    7a3a:	f9 01       	movw	r30, r18
    7a3c:	e3 5a       	subi	r30, 0xA3	; 163
    7a3e:	f8 4f       	sbci	r31, 0xF8	; 248
    7a40:	40 81       	ld	r20, Z
    7a42:	51 81       	ldd	r21, Z+1	; 0x01
    7a44:	f9 01       	movw	r30, r18
    7a46:	e8 5d       	subi	r30, 0xD8	; 216
    7a48:	f8 4f       	sbci	r31, 0xF8	; 248
    7a4a:	80 81       	ld	r24, Z
    7a4c:	91 81       	ldd	r25, Z+1	; 0x01
    7a4e:	84 1b       	sub	r24, r20
    7a50:	95 0b       	sbc	r25, r21
    7a52:	f9 01       	movw	r30, r18
    7a54:	ea 54       	subi	r30, 0x4A	; 74
    7a56:	f8 4f       	sbci	r31, 0xF8	; 248
    7a58:	91 83       	std	Z+1, r25	; 0x01
    7a5a:	80 83       	st	Z, r24
	}

	if (Config.ElevatorPol == REVERSED)
    7a5c:	80 91 5a 07 	lds	r24, 0x075A
    7a60:	81 30       	cpi	r24, 0x01	; 1
    7a62:	59 f4       	brne	.+22     	; 0x7a7a <RxGetChannels+0xdc>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    7a64:	80 91 ba 07 	lds	r24, 0x07BA
    7a68:	90 91 bb 07 	lds	r25, 0x07BB
    7a6c:	91 95       	neg	r25
    7a6e:	81 95       	neg	r24
    7a70:	91 09       	sbc	r25, r1
    7a72:	90 93 bb 07 	sts	0x07BB, r25
    7a76:	80 93 ba 07 	sts	0x07BA, r24
	}

	if (Config.RudderPol == REVERSED)
    7a7a:	80 91 5b 07 	lds	r24, 0x075B
    7a7e:	81 30       	cpi	r24, 0x01	; 1
    7a80:	59 f4       	brne	.+22     	; 0x7a98 <RxGetChannels+0xfa>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    7a82:	80 91 bc 07 	lds	r24, 0x07BC
    7a86:	90 91 bd 07 	lds	r25, 0x07BD
    7a8a:	91 95       	neg	r25
    7a8c:	81 95       	neg	r24
    7a8e:	91 09       	sbc	r25, r1
    7a90:	90 93 bd 07 	sts	0x07BD, r25
    7a94:	80 93 bc 07 	sts	0x07BC, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[GEAR] + RCinputs[RUDDER] + RCinputs[AUX1];
    7a98:	80 91 b8 07 	lds	r24, 0x07B8
    7a9c:	90 91 b9 07 	lds	r25, 0x07B9
    7aa0:	e0 91 ba 07 	lds	r30, 0x07BA
    7aa4:	f0 91 bb 07 	lds	r31, 0x07BB
    7aa8:	60 91 be 07 	lds	r22, 0x07BE
    7aac:	70 91 bf 07 	lds	r23, 0x07BF
    7ab0:	40 91 bc 07 	lds	r20, 0x07BC
    7ab4:	50 91 bd 07 	lds	r21, 0x07BD
    7ab8:	20 91 c0 07 	lds	r18, 0x07C0
    7abc:	30 91 c1 07 	lds	r19, 0x07C1
    7ac0:	8e 0f       	add	r24, r30
    7ac2:	9f 1f       	adc	r25, r31
    7ac4:	86 0f       	add	r24, r22
    7ac6:	97 1f       	adc	r25, r23
    7ac8:	84 0f       	add	r24, r20
    7aca:	95 1f       	adc	r25, r21
    7acc:	82 0f       	add	r24, r18
    7ace:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    7ad0:	20 91 34 05 	lds	r18, 0x0534
    7ad4:	30 91 35 05 	lds	r19, 0x0535
    7ad8:	ac 01       	movw	r20, r24
    7ada:	42 1b       	sub	r20, r18
    7adc:	53 0b       	sbc	r21, r19
    7ade:	9a 01       	movw	r18, r20

	// Set RX activity flag
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH)) 
    7ae0:	2b 5f       	subi	r18, 0xFB	; 251
    7ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ae4:	2b 30       	cpi	r18, 0x0B	; 11
    7ae6:	31 05       	cpc	r19, r1
    7ae8:	20 f0       	brcs	.+8      	; 0x7af2 <RxGetChannels+0x154>
	{
		Flight_flags |= (1 << RxActivity);
    7aea:	20 91 14 05 	lds	r18, 0x0514
    7aee:	28 60       	ori	r18, 0x08	; 8
    7af0:	03 c0       	rjmp	.+6      	; 0x7af8 <RxGetChannels+0x15a>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    7af2:	20 91 14 05 	lds	r18, 0x0514
    7af6:	27 7f       	andi	r18, 0xF7	; 247
    7af8:	20 93 14 05 	sts	0x0514, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    7afc:	10 92 c7 07 	sts	0x07C7, r1
    7b00:	10 92 c6 07 	sts	0x07C6, r1

	OldRxSum = RxSum;
    7b04:	90 93 35 05 	sts	0x0535, r25
    7b08:	80 93 34 05 	sts	0x0534, r24
    7b0c:	08 95       	ret

00007b0e <RC_Deadband>:
void RC_Deadband(void)
{
	int16_t	aileron_actual = 0;

	// If flaperons set up 
	if (Config.FlapChan != NOCHAN)
    7b0e:	e0 91 06 06 	lds	r30, 0x0606
	{
		// Recreate actual roll signal from flaperons
		aileron_actual  = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    7b12:	80 91 b8 07 	lds	r24, 0x07B8
    7b16:	90 91 b9 07 	lds	r25, 0x07B9
void RC_Deadband(void)
{
	int16_t	aileron_actual = 0;

	// If flaperons set up 
	if (Config.FlapChan != NOCHAN)
    7b1a:	e8 30       	cpi	r30, 0x08	; 8
    7b1c:	51 f0       	breq	.+20     	; 0x7b32 <RC_Deadband+0x24>
	{
		// Recreate actual roll signal from flaperons
		aileron_actual  = RCinputs[AILERON] + RCinputs[Config.FlapChan];
    7b1e:	ee 0f       	add	r30, r30
    7b20:	ff 0b       	sbc	r31, r31
    7b22:	ea 54       	subi	r30, 0x4A	; 74
    7b24:	f8 4f       	sbci	r31, 0xF8	; 248
    7b26:	20 81       	ld	r18, Z
    7b28:	31 81       	ldd	r19, Z+1	; 0x01
    7b2a:	82 0f       	add	r24, r18
    7b2c:	93 1f       	adc	r25, r19
		aileron_actual  = aileron_actual >> 1;
    7b2e:	95 95       	asr	r25
    7b30:	87 95       	ror	r24
	{
		aileron_actual  = RCinputs[AILERON];
	}

	// Hands-free detection
	if (((aileron_actual < Config.HandsFreetrigger) && (aileron_actual > -Config.HandsFreetrigger))
    7b32:	20 91 6e 06 	lds	r18, 0x066E
    7b36:	30 e0       	ldi	r19, 0x00	; 0
    7b38:	82 17       	cp	r24, r18
    7b3a:	93 07       	cpc	r25, r19
    7b3c:	cc f4       	brge	.+50     	; 0x7b70 <RC_Deadband+0x62>
    7b3e:	44 27       	eor	r20, r20
    7b40:	55 27       	eor	r21, r21
    7b42:	42 1b       	sub	r20, r18
    7b44:	53 0b       	sbc	r21, r19
    7b46:	48 17       	cp	r20, r24
    7b48:	59 07       	cpc	r21, r25
    7b4a:	94 f4       	brge	.+36     	; 0x7b70 <RC_Deadband+0x62>
	 && ((RCinputs[ELEVATOR]  < Config.HandsFreetrigger) && (RCinputs[ELEVATOR]  > -Config.HandsFreetrigger)))
    7b4c:	80 91 ba 07 	lds	r24, 0x07BA
    7b50:	90 91 bb 07 	lds	r25, 0x07BB
    7b54:	82 17       	cp	r24, r18
    7b56:	93 07       	cpc	r25, r19
    7b58:	5c f4       	brge	.+22     	; 0x7b70 <RC_Deadband+0x62>
    7b5a:	80 91 ba 07 	lds	r24, 0x07BA
    7b5e:	90 91 bb 07 	lds	r25, 0x07BB
    7b62:	48 17       	cp	r20, r24
    7b64:	59 07       	cpc	r21, r25
    7b66:	24 f4       	brge	.+8      	; 0x7b70 <RC_Deadband+0x62>
	{
		Flight_flags |= (1 << HandsFree);
    7b68:	80 91 14 05 	lds	r24, 0x0514
    7b6c:	80 61       	ori	r24, 0x10	; 16
    7b6e:	03 c0       	rjmp	.+6      	; 0x7b76 <RC_Deadband+0x68>
	}
	else
	{
		Flight_flags &= ~(1 << HandsFree);
    7b70:	80 91 14 05 	lds	r24, 0x0514
    7b74:	8f 7e       	andi	r24, 0xEF	; 239
    7b76:	80 93 14 05 	sts	0x0514, r24
    7b7a:	08 95       	ret

00007b7c <CenterSticks>:
	}
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    7b7c:	0f 93       	push	r16
    7b7e:	1f 93       	push	r17
    7b80:	cf 93       	push	r28
    7b82:	df 93       	push	r29
    7b84:	cd b7       	in	r28, 0x3d	; 61
    7b86:	de b7       	in	r29, 0x3e	; 62
    7b88:	60 97       	sbiw	r28, 0x10	; 16
    7b8a:	0f b6       	in	r0, 0x3f	; 63
    7b8c:	f8 94       	cli
    7b8e:	de bf       	out	0x3e, r29	; 62
    7b90:	0f be       	out	0x3f, r0	; 63
    7b92:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    7b94:	8e 01       	movw	r16, r28
    7b96:	0f 5f       	subi	r16, 0xFF	; 255
    7b98:	1f 4f       	sbci	r17, 0xFF	; 255
    7b9a:	80 e1       	ldi	r24, 0x10	; 16
    7b9c:	d8 01       	movw	r26, r16
    7b9e:	1d 92       	st	X+, r1
    7ba0:	8a 95       	dec	r24
    7ba2:	e9 f7       	brne	.-6      	; 0x7b9e <CenterSticks+0x22>
    7ba4:	68 e0       	ldi	r22, 0x08	; 8
	}
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    7ba6:	d8 01       	movw	r26, r16
    7ba8:	80 e0       	ldi	r24, 0x00	; 0
    7baa:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
	{
		for (j=0;j<MAX_RC_CHANNELS;j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    7bac:	9c 01       	movw	r18, r24
    7bae:	22 0f       	add	r18, r18
    7bb0:	33 1f       	adc	r19, r19
    7bb2:	23 5a       	subi	r18, 0xA3	; 163
    7bb4:	38 4f       	sbci	r19, 0xF8	; 248
    7bb6:	f9 01       	movw	r30, r18
    7bb8:	40 81       	ld	r20, Z
    7bba:	51 81       	ldd	r21, Z+1	; 0x01
    7bbc:	2d 91       	ld	r18, X+
    7bbe:	3c 91       	ld	r19, X
    7bc0:	11 97       	sbiw	r26, 0x01	; 1
    7bc2:	24 0f       	add	r18, r20
    7bc4:	35 1f       	adc	r19, r21
    7bc6:	2d 93       	st	X+, r18
    7bc8:	3d 93       	st	X+, r19
    7bca:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
	{
		for (j=0;j<MAX_RC_CHANNELS;j++)
    7bcc:	88 30       	cpi	r24, 0x08	; 8
    7bce:	91 05       	cpc	r25, r1
    7bd0:	69 f7       	brne	.-38     	; 0x7bac <CenterSticks+0x30>
    7bd2:	ff e7       	ldi	r31, 0x7F	; 127
    7bd4:	2a e1       	ldi	r18, 0x1A	; 26
    7bd6:	86 e0       	ldi	r24, 0x06	; 6
    7bd8:	f1 50       	subi	r31, 0x01	; 1
    7bda:	20 40       	sbci	r18, 0x00	; 0
    7bdc:	80 40       	sbci	r24, 0x00	; 0
    7bde:	e1 f7       	brne	.-8      	; 0x7bd8 <CenterSticks+0x5c>
    7be0:	00 c0       	rjmp	.+0      	; 0x7be2 <CenterSticks+0x66>
    7be2:	00 00       	nop
    7be4:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i < 8; i++)
    7be6:	f9 f6       	brne	.-66     	; 0x7ba6 <CenterSticks+0x2a>
    7be8:	a8 e2       	ldi	r26, 0x28	; 40
    7bea:	b7 e0       	ldi	r27, 0x07	; 7
    7bec:	9e 01       	movw	r18, r28
    7bee:	2f 5e       	subi	r18, 0xEF	; 239
    7bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    7bf2:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    7bf4:	81 91       	ld	r24, Z+
    7bf6:	91 91       	ld	r25, Z+
    7bf8:	04 96       	adiw	r24, 0x04	; 4
    7bfa:	43 e0       	ldi	r20, 0x03	; 3
    7bfc:	96 95       	lsr	r25
    7bfe:	87 95       	ror	r24
    7c00:	4a 95       	dec	r20
    7c02:	e1 f7       	brne	.-8      	; 0x7bfc <CenterSticks+0x80>
    7c04:	8d 93       	st	X+, r24
    7c06:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    7c08:	e2 17       	cp	r30, r18
    7c0a:	f3 07       	cpc	r31, r19
    7c0c:	99 f7       	brne	.-26     	; 0x7bf4 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    7c0e:	60 96       	adiw	r28, 0x10	; 16
    7c10:	0f b6       	in	r0, 0x3f	; 63
    7c12:	f8 94       	cli
    7c14:	de bf       	out	0x3e, r29	; 62
    7c16:	0f be       	out	0x3f, r0	; 63
    7c18:	cd bf       	out	0x3d, r28	; 61
    7c1a:	df 91       	pop	r29
    7c1c:	cf 91       	pop	r28
    7c1e:	1f 91       	pop	r17
    7c20:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    7c22:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>

00007c26 <SetFailsafe>:
}

// Set failsafe position
void SetFailsafe(void)		
{
    7c26:	0f 93       	push	r16
    7c28:	1f 93       	push	r17
    7c2a:	cf 93       	push	r28
    7c2c:	df 93       	push	r29
	uint8_t i;
	int16_t failsafe;
	int16_t temp;

	// Update latest values of each channel
	ProcessMixer();
    7c2e:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <ProcessMixer>
    7c32:	e0 e8       	ldi	r30, 0x80	; 128
    7c34:	f6 e0       	ldi	r31, 0x06	; 6
    7c36:	c6 ec       	ldi	r28, 0xC6	; 198
    7c38:	d5 e0       	ldi	r29, 0x05	; 5
    7c3a:	20 e2       	ldi	r18, 0x20	; 32
    7c3c:	37 e0       	ldi	r19, 0x07	; 7
		// Set primary failsafe point
		temp = Config.Channel[i].value;		// Mixer values are +/-1250
		Config.Limits[i].failsafe = temp;

		// Round and rescale and set noob-friendly mixer failsafe percentages
		failsafe = (temp + (int16_t)5) / (int16_t)10;
    7c3e:	0a e0       	ldi	r16, 0x0A	; 10
    7c40:	10 e0       	ldi	r17, 0x00	; 0

	// Update Config settings based on servo position
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Set primary failsafe point
		temp = Config.Channel[i].value;		// Mixer values are +/-1250
    7c42:	80 81       	ld	r24, Z
    7c44:	91 81       	ldd	r25, Z+1	; 0x01
		Config.Limits[i].failsafe = temp;
    7c46:	99 83       	std	Y+1, r25	; 0x01
    7c48:	88 83       	st	Y, r24

		// Round and rescale and set noob-friendly mixer failsafe percentages
		failsafe = (temp + (int16_t)5) / (int16_t)10;
    7c4a:	05 96       	adiw	r24, 0x05	; 5
    7c4c:	b8 01       	movw	r22, r16
    7c4e:	0e 94 60 42 	call	0x84c0	; 0x84c0 <__divmodhi4>
		
		// Bounds check 
		if (failsafe > 125)
    7c52:	6e 37       	cpi	r22, 0x7E	; 126
    7c54:	71 05       	cpc	r23, r1
    7c56:	3c f4       	brge	.+14     	; 0x7c66 <SetFailsafe+0x40>
		{
			failsafe = 125;
		}
		if (failsafe < -125)
    7c58:	63 38       	cpi	r22, 0x83	; 131
    7c5a:	8f ef       	ldi	r24, 0xFF	; 255
    7c5c:	78 07       	cpc	r23, r24
    7c5e:	2c f4       	brge	.+10     	; 0x7c6a <SetFailsafe+0x44>
		{
			failsafe = -125;
    7c60:	63 e8       	ldi	r22, 0x83	; 131
    7c62:	7f ef       	ldi	r23, 0xFF	; 255
    7c64:	02 c0       	rjmp	.+4      	; 0x7c6a <SetFailsafe+0x44>
		failsafe = (temp + (int16_t)5) / (int16_t)10;
		
		// Bounds check 
		if (failsafe > 125)
		{
			failsafe = 125;
    7c66:	6d e7       	ldi	r22, 0x7D	; 125
    7c68:	70 e0       	ldi	r23, 0x00	; 0
		{
			failsafe = -125;
		}		
		
		// Save as percentage
		Config.Failsafe[i] = failsafe;
    7c6a:	d9 01       	movw	r26, r18
    7c6c:	6d 93       	st	X+, r22
    7c6e:	9d 01       	movw	r18, r26
    7c70:	70 96       	adiw	r30, 0x10	; 16
    7c72:	28 96       	adiw	r28, 0x08	; 8

	// Update latest values of each channel
	ProcessMixer();

	// Update Config settings based on servo position
	for (i = 0; i < MAX_OUTPUTS; i++)
    7c74:	b7 e0       	ldi	r27, 0x07	; 7
    7c76:	e0 30       	cpi	r30, 0x00	; 0
    7c78:	fb 07       	cpc	r31, r27
    7c7a:	19 f7       	brne	.-58     	; 0x7c42 <SetFailsafe+0x1c>
		// Save as percentage
		Config.Failsafe[i] = failsafe;
	}

	Save_Config_to_EEPROM();
}
    7c7c:	df 91       	pop	r29
    7c7e:	cf 91       	pop	r28
    7c80:	1f 91       	pop	r17
    7c82:	0f 91       	pop	r16
		
		// Save as percentage
		Config.Failsafe[i] = failsafe;
	}

	Save_Config_to_EEPROM();
    7c84:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <Save_Config_to_EEPROM>

00007c88 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    7c88:	cf 92       	push	r12
    7c8a:	df 92       	push	r13
    7c8c:	ef 92       	push	r14
    7c8e:	ff 92       	push	r15
    7c90:	0f 93       	push	r16
    7c92:	1f 93       	push	r17
    7c94:	cf 93       	push	r28
    7c96:	df 93       	push	r29
    7c98:	48 2f       	mov	r20, r24
    7c9a:	60 e0       	ldi	r22, 0x00	; 0
    7c9c:	e6 2e       	mov	r14, r22
    7c9e:	67 e0       	ldi	r22, 0x07	; 7
    7ca0:	f6 2e       	mov	r15, r22
    7ca2:	02 e8       	ldi	r16, 0x82	; 130
    7ca4:	16 e0       	ldi	r17, 0x06	; 6
    7ca6:	c2 ec       	ldi	r28, 0xC2	; 194
    7ca8:	d5 e0       	ldi	r29, 0x05	; 5
    7caa:	e0 e0       	ldi	r30, 0x00	; 0
    7cac:	f0 e0       	ldi	r31, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert
    7cae:	7a e0       	ldi	r23, 0x0A	; 10
    7cb0:	c7 2e       	mov	r12, r23
    7cb2:	d1 2c       	mov	r13, r1
    7cb4:	d8 01       	movw	r26, r16
    7cb6:	12 97       	sbiw	r26, 0x02	; 2
	// Formerly in UpdateServos()
	// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Servo reverse and trim
		temp = Config.Channel[i].value;
    7cb8:	2d 91       	ld	r18, X+
    7cba:	3c 91       	ld	r19, X

		// Reverse this channel
		if (Config.Servo_reverse[i] == ON)
    7cbc:	d7 01       	movw	r26, r14
    7cbe:	8d 91       	ld	r24, X+
    7cc0:	7d 01       	movw	r14, r26
    7cc2:	81 30       	cpi	r24, 0x01	; 1
    7cc4:	19 f4       	brne	.+6      	; 0x7ccc <output_servo_ppm+0x44>
		{
			temp = -temp;
    7cc6:	31 95       	neg	r19
    7cc8:	21 95       	neg	r18
    7cca:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp += 3750;
    7ccc:	b9 01       	movw	r22, r18
    7cce:	6a 55       	subi	r22, 0x5A	; 90
    7cd0:	71 4f       	sbci	r23, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp > Config.Limits[i].maximum)
    7cd2:	2a 81       	ldd	r18, Y+2	; 0x02
    7cd4:	3b 81       	ldd	r19, Y+3	; 0x03
    7cd6:	26 17       	cp	r18, r22
    7cd8:	37 07       	cpc	r19, r23
    7cda:	3c f0       	brlt	.+14     	; 0x7cea <output_servo_ppm+0x62>
		{
			temp = Config.Limits[i].maximum;
		}

		else if (temp < Config.Limits[i].minimum)
    7cdc:	88 81       	ld	r24, Y
    7cde:	99 81       	ldd	r25, Y+1	; 0x01
    7ce0:	9b 01       	movw	r18, r22
    7ce2:	68 17       	cp	r22, r24
    7ce4:	79 07       	cpc	r23, r25
    7ce6:	0c f4       	brge	.+2      	; 0x7cea <output_servo_ppm+0x62>
    7ce8:	9c 01       	movw	r18, r24
		{
			temp = Config.Limits[i].minimum;
		}

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    7cea:	d8 01       	movw	r26, r16
    7cec:	8c 91       	ld	r24, X
    7cee:	82 30       	cpi	r24, 0x02	; 2
    7cf0:	41 f0       	breq	.+16     	; 0x7d02 <output_servo_ppm+0x7a>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    7cf2:	26 5a       	subi	r18, 0xA6	; 166
    7cf4:	3e 40       	sbci	r19, 0x0E	; 14
    7cf6:	35 95       	asr	r19
    7cf8:	27 95       	ror	r18
    7cfa:	b9 01       	movw	r22, r18
    7cfc:	64 52       	subi	r22, 0x24	; 36
    7cfe:	7a 4f       	sbci	r23, 0xFA	; 250
    7d00:	09 c0       	rjmp	.+18     	; 0x7d14 <output_servo_ppm+0x8c>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert
    7d02:	c9 01       	movw	r24, r18
    7d04:	88 0f       	add	r24, r24
    7d06:	99 1f       	adc	r25, r25
    7d08:	88 0f       	add	r24, r24
    7d0a:	99 1f       	adc	r25, r25
    7d0c:	05 96       	adiw	r24, 0x05	; 5
    7d0e:	b6 01       	movw	r22, r12
    7d10:	0e 94 60 42 	call	0x84c0	; 0x84c0 <__divmodhi4>
		}
		
		// Save back to servo array
		ServoOut[i] = temp;
    7d14:	df 01       	movw	r26, r30
    7d16:	aa 0f       	add	r26, r26
    7d18:	bb 1f       	adc	r27, r27
    7d1a:	a8 53       	subi	r26, 0x38	; 56
    7d1c:	b8 4f       	sbci	r27, 0xF8	; 248
    7d1e:	11 96       	adiw	r26, 0x01	; 1
    7d20:	7c 93       	st	X, r23
    7d22:	6e 93       	st	-X, r22
    7d24:	31 96       	adiw	r30, 0x01	; 1
    7d26:	00 5f       	subi	r16, 0xF0	; 240
    7d28:	1f 4f       	sbci	r17, 0xFF	; 255
    7d2a:	28 96       	adiw	r28, 0x08	; 8
	int16_t temp = 0;
	uint8_t i = 0;
	
	// Formerly in UpdateServos()
	// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    7d2c:	e8 30       	cpi	r30, 0x08	; 8
    7d2e:	f1 05       	cpc	r31, r1
    7d30:	09 f6       	brne	.-126    	; 0x7cb4 <output_servo_ppm+0x2c>
		// Save back to servo array
		ServoOut[i] = temp;
	}

	// Suppress outputs during throttle high error -  debug (might disable outputs in failsafe)
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    7d32:	80 91 15 05 	lds	r24, 0x0515
    7d36:	81 fd       	sbrc	r24, 1
    7d38:	1c c0       	rjmp	.+56     	; 0x7d72 <output_servo_ppm+0xea>
	{
		// Create unsynchronised output pulses if needed for camstab or failsafe
		if ((Flight_flags & (1 << Failsafe)) || (Config.CamStab == ON))
    7d3a:	80 91 14 05 	lds	r24, 0x0514
    7d3e:	82 fd       	sbrc	r24, 2
    7d40:	04 c0       	rjmp	.+8      	; 0x7d4a <output_servo_ppm+0xc2>
    7d42:	80 91 79 06 	lds	r24, 0x0679
    7d46:	81 30       	cpi	r24, 0x01	; 1
    7d48:	41 f4       	brne	.+16     	; 0x7d5a <output_servo_ppm+0xd2>
		{
			cli();
    7d4a:	f8 94       	cli
			output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    7d4c:	64 2f       	mov	r22, r20
    7d4e:	88 ec       	ldi	r24, 0xC8	; 200
    7d50:	97 e0       	ldi	r25, 0x07	; 7
    7d52:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <output_servo_ppm_asm>
			sei();
    7d56:	78 94       	sei
    7d58:	0c c0       	rjmp	.+24     	; 0x7d72 <output_servo_ppm+0xea>
		
		// Create synchronised output pulses if in sync with RC inputs
		else
		{
			// Reset JitterFlag immediately before PWM generation
			JitterFlag = false;
    7d5a:	10 92 88 07 	sts	0x0788, r1

			// We now care about interrupts
			JitterGate = true;
    7d5e:	81 e0       	ldi	r24, 0x01	; 1
    7d60:	80 93 87 07 	sts	0x0787, r24

			// Pass address of ServoOut array
			output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    7d64:	64 2f       	mov	r22, r20
    7d66:	88 ec       	ldi	r24, 0xC8	; 200
    7d68:	97 e0       	ldi	r25, 0x07	; 7
    7d6a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <output_servo_ppm_asm>

			// We no longer care about interrupts
			JitterGate = false;
    7d6e:	10 92 87 07 	sts	0x0787, r1
		}
	}
}
    7d72:	df 91       	pop	r29
    7d74:	cf 91       	pop	r28
    7d76:	1f 91       	pop	r17
    7d78:	0f 91       	pop	r16
    7d7a:	ff 90       	pop	r15
    7d7c:	ef 90       	pop	r14
    7d7e:	df 90       	pop	r13
    7d80:	cf 90       	pop	r12
    7d82:	08 95       	ret

00007d84 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    7d84:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    7d88:	81 e1       	ldi	r24, 0x11	; 17
    7d8a:	80 93 b8 00 	sts	0x00B8, r24
    7d8e:	08 95       	ret

00007d90 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7d90:	94 ea       	ldi	r25, 0xA4	; 164
    7d92:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    7d96:	4f ef       	ldi	r20, 0xFF	; 255
    7d98:	50 e0       	ldi	r21, 0x00	; 0
    7d9a:	60 e0       	ldi	r22, 0x00	; 0
    7d9c:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7d9e:	90 91 bc 00 	lds	r25, 0x00BC
    7da2:	97 fd       	sbrc	r25, 7
    7da4:	06 c0       	rjmp	.+12     	; 0x7db2 <i2c_start+0x22>
    7da6:	41 50       	subi	r20, 0x01	; 1
    7da8:	51 09       	sbc	r21, r1
    7daa:	61 09       	sbc	r22, r1
    7dac:	71 09       	sbc	r23, r1
    7dae:	b8 f7       	brcc	.-18     	; 0x7d9e <i2c_start+0xe>
    7db0:	06 c0       	rjmp	.+12     	; 0x7dbe <i2c_start+0x2e>
	if(i2c_timer == 0)
    7db2:	45 2b       	or	r20, r21
    7db4:	46 2b       	or	r20, r22
    7db6:	47 2b       	or	r20, r23
    7db8:	11 f4       	brne	.+4      	; 0x7dbe <i2c_start+0x2e>
		return 1;
    7dba:	81 e0       	ldi	r24, 0x01	; 1
    7dbc:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    7dbe:	90 91 b9 00 	lds	r25, 0x00B9
    7dc2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    7dc4:	98 30       	cpi	r25, 0x08	; 8
    7dc6:	11 f0       	breq	.+4      	; 0x7dcc <i2c_start+0x3c>
    7dc8:	90 31       	cpi	r25, 0x10	; 16
    7dca:	b9 f7       	brne	.-18     	; 0x7dba <i2c_start+0x2a>

	// send device address
	TWDR = address;
    7dcc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    7dd0:	84 e8       	ldi	r24, 0x84	; 132
    7dd2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    7dd6:	8f ef       	ldi	r24, 0xFF	; 255
    7dd8:	90 e0       	ldi	r25, 0x00	; 0
    7dda:	a0 e0       	ldi	r26, 0x00	; 0
    7ddc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7dde:	20 91 bc 00 	lds	r18, 0x00BC
    7de2:	27 fd       	sbrc	r18, 7
    7de4:	05 c0       	rjmp	.+10     	; 0x7df0 <i2c_start+0x60>
    7de6:	01 97       	sbiw	r24, 0x01	; 1
    7de8:	a1 09       	sbc	r26, r1
    7dea:	b1 09       	sbc	r27, r1
    7dec:	c0 f7       	brcc	.-16     	; 0x7dde <i2c_start+0x4e>
    7dee:	04 c0       	rjmp	.+8      	; 0x7df8 <i2c_start+0x68>
	if(i2c_timer == 0)
    7df0:	89 2b       	or	r24, r25
    7df2:	8a 2b       	or	r24, r26
    7df4:	8b 2b       	or	r24, r27
    7df6:	09 f3       	breq	.-62     	; 0x7dba <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    7df8:	80 91 b9 00 	lds	r24, 0x00B9
    7dfc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    7dfe:	88 31       	cpi	r24, 0x18	; 24
    7e00:	11 f0       	breq	.+4      	; 0x7e06 <i2c_start+0x76>
    7e02:	80 34       	cpi	r24, 0x40	; 64
    7e04:	d1 f6       	brne	.-76     	; 0x7dba <i2c_start+0x2a>

	return 0;
    7e06:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    7e08:	08 95       	ret

00007e0a <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7e0a:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7e0c:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7e0e:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7e10:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7e14:	20 e0       	ldi	r18, 0x00	; 0
    7e16:	30 e0       	ldi	r19, 0x00	; 0
    7e18:	90 91 bc 00 	lds	r25, 0x00BC
    7e1c:	97 fd       	sbrc	r25, 7
    7e1e:	06 c0       	rjmp	.+12     	; 0x7e2c <i2c_start_wait+0x22>
    7e20:	2f 5f       	subi	r18, 0xFF	; 255
    7e22:	3f 4f       	sbci	r19, 0xFF	; 255
    7e24:	21 15       	cp	r18, r1
    7e26:	91 e0       	ldi	r25, 0x01	; 1
    7e28:	39 07       	cpc	r19, r25
    7e2a:	b1 f7       	brne	.-20     	; 0x7e18 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7e2c:	90 91 b9 00 	lds	r25, 0x00B9
    7e30:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    7e32:	98 30       	cpi	r25, 0x08	; 8
    7e34:	11 f0       	breq	.+4      	; 0x7e3a <i2c_start_wait+0x30>
    7e36:	90 31       	cpi	r25, 0x10	; 16
    7e38:	59 f7       	brne	.-42     	; 0x7e10 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    7e3a:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7e3e:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7e42:	20 e0       	ldi	r18, 0x00	; 0
    7e44:	30 e0       	ldi	r19, 0x00	; 0
    7e46:	90 91 bc 00 	lds	r25, 0x00BC
    7e4a:	97 fd       	sbrc	r25, 7
    7e4c:	06 c0       	rjmp	.+12     	; 0x7e5a <i2c_start_wait+0x50>
    7e4e:	2f 5f       	subi	r18, 0xFF	; 255
    7e50:	3f 4f       	sbci	r19, 0xFF	; 255
    7e52:	21 15       	cp	r18, r1
    7e54:	91 e0       	ldi	r25, 0x01	; 1
    7e56:	39 07       	cpc	r19, r25
    7e58:	b1 f7       	brne	.-20     	; 0x7e46 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7e5a:	90 91 b9 00 	lds	r25, 0x00B9
    7e5e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    7e60:	90 32       	cpi	r25, 0x20	; 32
    7e62:	11 f0       	breq	.+4      	; 0x7e68 <i2c_start_wait+0x5e>
    7e64:	98 35       	cpi	r25, 0x58	; 88
    7e66:	79 f4       	brne	.+30     	; 0x7e86 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7e68:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    7e6c:	20 e0       	ldi	r18, 0x00	; 0
    7e6e:	30 e0       	ldi	r19, 0x00	; 0
    7e70:	90 91 bc 00 	lds	r25, 0x00BC
    7e74:	94 ff       	sbrs	r25, 4
    7e76:	cc cf       	rjmp	.-104    	; 0x7e10 <i2c_start_wait+0x6>
    7e78:	2f 5f       	subi	r18, 0xFF	; 255
    7e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e7c:	21 15       	cp	r18, r1
    7e7e:	91 e0       	ldi	r25, 0x01	; 1
    7e80:	39 07       	cpc	r19, r25
    7e82:	b1 f7       	brne	.-20     	; 0x7e70 <i2c_start_wait+0x66>
    7e84:	c5 cf       	rjmp	.-118    	; 0x7e10 <i2c_start_wait+0x6>
    7e86:	08 95       	ret

00007e88 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    7e88:	0c 94 c8 3e 	jmp	0x7d90	; 0x7d90 <i2c_start>

00007e8c <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7e8c:	84 e9       	ldi	r24, 0x94	; 148
    7e8e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    7e92:	80 e0       	ldi	r24, 0x00	; 0
    7e94:	90 e0       	ldi	r25, 0x00	; 0
    7e96:	20 91 bc 00 	lds	r18, 0x00BC
    7e9a:	24 ff       	sbrs	r18, 4
    7e9c:	05 c0       	rjmp	.+10     	; 0x7ea8 <i2c_stop+0x1c>
    7e9e:	01 96       	adiw	r24, 0x01	; 1
    7ea0:	81 15       	cp	r24, r1
    7ea2:	21 e0       	ldi	r18, 0x01	; 1
    7ea4:	92 07       	cpc	r25, r18
    7ea6:	b9 f7       	brne	.-18     	; 0x7e96 <i2c_stop+0xa>
    7ea8:	08 95       	ret

00007eaa <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    7eaa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    7eae:	84 e8       	ldi	r24, 0x84	; 132
    7eb0:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    7eb4:	8f ef       	ldi	r24, 0xFF	; 255
    7eb6:	90 e0       	ldi	r25, 0x00	; 0
    7eb8:	a0 e0       	ldi	r26, 0x00	; 0
    7eba:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7ebc:	20 91 bc 00 	lds	r18, 0x00BC
    7ec0:	27 fd       	sbrc	r18, 7
    7ec2:	05 c0       	rjmp	.+10     	; 0x7ece <i2c_write+0x24>
    7ec4:	01 97       	sbiw	r24, 0x01	; 1
    7ec6:	a1 09       	sbc	r26, r1
    7ec8:	b1 09       	sbc	r27, r1
    7eca:	c0 f7       	brcc	.-16     	; 0x7ebc <i2c_write+0x12>
    7ecc:	04 c0       	rjmp	.+8      	; 0x7ed6 <i2c_write+0x2c>
	if(i2c_timer == 0)
    7ece:	89 2b       	or	r24, r25
    7ed0:	8a 2b       	or	r24, r26
    7ed2:	8b 2b       	or	r24, r27
    7ed4:	41 f0       	breq	.+16     	; 0x7ee6 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    7ed6:	90 91 b9 00 	lds	r25, 0x00B9
    7eda:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    7edc:	81 e0       	ldi	r24, 0x01	; 1
    7ede:	98 32       	cpi	r25, 0x28	; 40
    7ee0:	19 f4       	brne	.+6      	; 0x7ee8 <i2c_write+0x3e>
    7ee2:	80 e0       	ldi	r24, 0x00	; 0
    7ee4:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    7ee6:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    7ee8:	08 95       	ret

00007eea <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    7eea:	84 ec       	ldi	r24, 0xC4	; 196
    7eec:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    7ef0:	8f ef       	ldi	r24, 0xFF	; 255
    7ef2:	90 e0       	ldi	r25, 0x00	; 0
    7ef4:	a0 e0       	ldi	r26, 0x00	; 0
    7ef6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7ef8:	20 91 bc 00 	lds	r18, 0x00BC
    7efc:	27 fd       	sbrc	r18, 7
    7efe:	05 c0       	rjmp	.+10     	; 0x7f0a <i2c_readAck+0x20>
    7f00:	01 97       	sbiw	r24, 0x01	; 1
    7f02:	a1 09       	sbc	r26, r1
    7f04:	b1 09       	sbc	r27, r1
    7f06:	c0 f7       	brcc	.-16     	; 0x7ef8 <i2c_readAck+0xe>
    7f08:	04 c0       	rjmp	.+8      	; 0x7f12 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    7f0a:	89 2b       	or	r24, r25
    7f0c:	8a 2b       	or	r24, r26
    7f0e:	8b 2b       	or	r24, r27
    7f10:	19 f0       	breq	.+6      	; 0x7f18 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    7f12:	80 91 bb 00 	lds	r24, 0x00BB
    7f16:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7f18:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    7f1a:	08 95       	ret

00007f1c <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    7f1c:	84 e8       	ldi	r24, 0x84	; 132
    7f1e:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    7f22:	8f ef       	ldi	r24, 0xFF	; 255
    7f24:	90 e0       	ldi	r25, 0x00	; 0
    7f26:	a0 e0       	ldi	r26, 0x00	; 0
    7f28:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7f2a:	20 91 bc 00 	lds	r18, 0x00BC
    7f2e:	27 fd       	sbrc	r18, 7
    7f30:	05 c0       	rjmp	.+10     	; 0x7f3c <i2c_readNak+0x20>
    7f32:	01 97       	sbiw	r24, 0x01	; 1
    7f34:	a1 09       	sbc	r26, r1
    7f36:	b1 09       	sbc	r27, r1
    7f38:	c0 f7       	brcc	.-16     	; 0x7f2a <i2c_readNak+0xe>
    7f3a:	04 c0       	rjmp	.+8      	; 0x7f44 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    7f3c:	89 2b       	or	r24, r25
    7f3e:	8a 2b       	or	r24, r26
    7f40:	8b 2b       	or	r24, r27
    7f42:	19 f0       	breq	.+6      	; 0x7f4a <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    7f44:	80 91 bb 00 	lds	r24, 0x00BB
    7f48:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7f4a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    7f4c:	08 95       	ret

00007f4e <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    7f4e:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    7f50:	80 91 c1 00 	lds	r24, 0x00C1
    7f54:	8f 77       	andi	r24, 0x7F	; 127
    7f56:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    7f5a:	80 91 c0 00 	lds	r24, 0x00C0
    7f5e:	87 ff       	sbrs	r24, 7
    7f60:	05 c0       	rjmp	.+10     	; 0x7f6c <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    7f62:	80 91 c6 00 	lds	r24, 0x00C6
    7f66:	80 93 c2 00 	sts	0x00C2, r24
    7f6a:	f7 cf       	rjmp	.-18     	; 0x7f5a <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    7f6c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    7f70:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    7f74:	86 e0       	ldi	r24, 0x06	; 6
    7f76:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    7f7a:	80 91 02 06 	lds	r24, 0x0602
    7f7e:	82 30       	cpi	r24, 0x02	; 2
    7f80:	a1 f0       	breq	.+40     	; 0x7faa <init_uart+0x5c>
    7f82:	34 f4       	brge	.+12     	; 0x7f90 <init_uart+0x42>
    7f84:	87 fd       	sbrc	r24, 7
    7f86:	4c c0       	rjmp	.+152    	; 0x8020 <init_uart+0xd2>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    7f88:	80 91 c1 00 	lds	r24, 0x00C1
    7f8c:	8f 7e       	andi	r24, 0xEF	; 239
    7f8e:	46 c0       	rjmp	.+140    	; 0x801c <init_uart+0xce>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    7f90:	83 30       	cpi	r24, 0x03	; 3
    7f92:	41 f1       	breq	.+80     	; 0x7fe4 <init_uart+0x96>
    7f94:	84 30       	cpi	r24, 0x04	; 4
    7f96:	09 f0       	breq	.+2      	; 0x7f9a <init_uart+0x4c>
    7f98:	43 c0       	rjmp	.+134    	; 0x8020 <init_uart+0xd2>
	{
		// Xtreme 8N1 (8 data bits / No parity / 1 stop bit / 250Kbps)
		case XTREME:
			UCSR0A &= ~(1 << U2X0);						// Clear the 2x flag
    7f9a:	90 91 c0 00 	lds	r25, 0x00C0
    7f9e:	9d 7f       	andi	r25, 0xFD	; 253
    7fa0:	90 93 c0 00 	sts	0x00C0, r25
			UBRR0H  = (BAUD_PRESCALE_XTREME >> 8); 		// Actual = 250000, Error = 0%
    7fa4:	10 92 c5 00 	sts	0x00C5, r1
    7fa8:	25 c0       	rjmp	.+74     	; 0x7ff4 <init_uart+0xa6>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;
				
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    7faa:	80 91 c0 00 	lds	r24, 0x00C0
    7fae:	82 60       	ori	r24, 0x02	; 2
    7fb0:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    7fb4:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    7fb8:	88 e1       	ldi	r24, 0x18	; 24
    7fba:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    7fbe:	80 91 c1 00 	lds	r24, 0x00C1
    7fc2:	80 61       	ori	r24, 0x10	; 16
    7fc4:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    7fc8:	80 91 c2 00 	lds	r24, 0x00C2
    7fcc:	88 60       	ori	r24, 0x08	; 8
    7fce:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    7fd2:	80 91 c2 00 	lds	r24, 0x00C2
    7fd6:	8f 7e       	andi	r24, 0xEF	; 239
    7fd8:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    7fdc:	80 91 c2 00 	lds	r24, 0x00C2
    7fe0:	80 62       	ori	r24, 0x20	; 32
    7fe2:	17 c0       	rjmp	.+46     	; 0x8012 <init_uart+0xc4>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    7fe4:	80 91 c0 00 	lds	r24, 0x00C0
    7fe8:	8d 7f       	andi	r24, 0xFD	; 253
    7fea:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    7fee:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    7ff2:	8a e0       	ldi	r24, 0x0A	; 10
    7ff4:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    7ff8:	80 91 c1 00 	lds	r24, 0x00C1
    7ffc:	80 61       	ori	r24, 0x10	; 16
    7ffe:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8002:	80 91 c2 00 	lds	r24, 0x00C2
    8006:	87 7f       	andi	r24, 0xF7	; 247
    8008:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    800c:	80 91 c2 00 	lds	r24, 0x00C2
    8010:	8f 7e       	andi	r24, 0xEF	; 239
    8012:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8016:	80 91 c1 00 	lds	r24, 0x00C1
    801a:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    801c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    8020:	78 94       	sei
    8022:	08 95       	ret

00008024 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT0);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8024:	83 e0       	ldi	r24, 0x03	; 3
    8026:	0e 94 db 10 	call	0x21b6	; 0x21b6 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    802a:	80 91 78 00 	lds	r24, 0x0078
    802e:	90 91 79 00 	lds	r25, 0x0079

#ifdef KK21
	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    8032:	9c 01       	movw	r18, r24
    8034:	36 95       	lsr	r19
    8036:	27 95       	ror	r18
    8038:	ac 01       	movw	r20, r24
    803a:	44 0f       	add	r20, r20
    803c:	55 1f       	adc	r21, r21
    803e:	24 0f       	add	r18, r20
    8040:	35 1f       	adc	r19, r21
    8042:	ac 01       	movw	r20, r24
    8044:	74 e0       	ldi	r23, 0x04	; 4
    8046:	56 95       	lsr	r21
    8048:	47 95       	ror	r20
    804a:	7a 95       	dec	r23
    804c:	e1 f7       	brne	.-8      	; 0x8046 <GetVbat+0x22>
    804e:	24 0f       	add	r18, r20
    8050:	35 1f       	adc	r19, r21
    8052:	e6 e0       	ldi	r30, 0x06	; 6
    8054:	96 95       	lsr	r25
    8056:	87 95       	ror	r24
    8058:	ea 95       	dec	r30
    805a:	e1 f7       	brne	.-8      	; 0x8054 <GetVbat+0x30>
	// 2 + 1/2 + 1/8 + 1/128 :)
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 3) + (vBat >> 7); // Multiply by 2.633
#endif

	return vBat;
}
    805c:	82 0f       	add	r24, r18
    805e:	93 1f       	adc	r25, r19
    8060:	08 95       	ret

00008062 <__subsf3>:
    8062:	50 58       	subi	r21, 0x80	; 128

00008064 <__addsf3>:
    8064:	bb 27       	eor	r27, r27
    8066:	aa 27       	eor	r26, r26
    8068:	0e d0       	rcall	.+28     	; 0x8086 <__addsf3x>
    806a:	75 c1       	rjmp	.+746    	; 0x8356 <__fp_round>
    806c:	66 d1       	rcall	.+716    	; 0x833a <__fp_pscA>
    806e:	30 f0       	brcs	.+12     	; 0x807c <__addsf3+0x18>
    8070:	6b d1       	rcall	.+726    	; 0x8348 <__fp_pscB>
    8072:	20 f0       	brcs	.+8      	; 0x807c <__addsf3+0x18>
    8074:	31 f4       	brne	.+12     	; 0x8082 <__addsf3+0x1e>
    8076:	9f 3f       	cpi	r25, 0xFF	; 255
    8078:	11 f4       	brne	.+4      	; 0x807e <__addsf3+0x1a>
    807a:	1e f4       	brtc	.+6      	; 0x8082 <__addsf3+0x1e>
    807c:	5b c1       	rjmp	.+694    	; 0x8334 <__fp_nan>
    807e:	0e f4       	brtc	.+2      	; 0x8082 <__addsf3+0x1e>
    8080:	e0 95       	com	r30
    8082:	e7 fb       	bst	r30, 7
    8084:	51 c1       	rjmp	.+674    	; 0x8328 <__fp_inf>

00008086 <__addsf3x>:
    8086:	e9 2f       	mov	r30, r25
    8088:	77 d1       	rcall	.+750    	; 0x8378 <__fp_split3>
    808a:	80 f3       	brcs	.-32     	; 0x806c <__addsf3+0x8>
    808c:	ba 17       	cp	r27, r26
    808e:	62 07       	cpc	r22, r18
    8090:	73 07       	cpc	r23, r19
    8092:	84 07       	cpc	r24, r20
    8094:	95 07       	cpc	r25, r21
    8096:	18 f0       	brcs	.+6      	; 0x809e <__addsf3x+0x18>
    8098:	71 f4       	brne	.+28     	; 0x80b6 <__addsf3x+0x30>
    809a:	9e f5       	brtc	.+102    	; 0x8102 <__addsf3x+0x7c>
    809c:	8f c1       	rjmp	.+798    	; 0x83bc <__fp_zero>
    809e:	0e f4       	brtc	.+2      	; 0x80a2 <__addsf3x+0x1c>
    80a0:	e0 95       	com	r30
    80a2:	0b 2e       	mov	r0, r27
    80a4:	ba 2f       	mov	r27, r26
    80a6:	a0 2d       	mov	r26, r0
    80a8:	0b 01       	movw	r0, r22
    80aa:	b9 01       	movw	r22, r18
    80ac:	90 01       	movw	r18, r0
    80ae:	0c 01       	movw	r0, r24
    80b0:	ca 01       	movw	r24, r20
    80b2:	a0 01       	movw	r20, r0
    80b4:	11 24       	eor	r1, r1
    80b6:	ff 27       	eor	r31, r31
    80b8:	59 1b       	sub	r21, r25
    80ba:	99 f0       	breq	.+38     	; 0x80e2 <__addsf3x+0x5c>
    80bc:	59 3f       	cpi	r21, 0xF9	; 249
    80be:	50 f4       	brcc	.+20     	; 0x80d4 <__addsf3x+0x4e>
    80c0:	50 3e       	cpi	r21, 0xE0	; 224
    80c2:	68 f1       	brcs	.+90     	; 0x811e <__addsf3x+0x98>
    80c4:	1a 16       	cp	r1, r26
    80c6:	f0 40       	sbci	r31, 0x00	; 0
    80c8:	a2 2f       	mov	r26, r18
    80ca:	23 2f       	mov	r18, r19
    80cc:	34 2f       	mov	r19, r20
    80ce:	44 27       	eor	r20, r20
    80d0:	58 5f       	subi	r21, 0xF8	; 248
    80d2:	f3 cf       	rjmp	.-26     	; 0x80ba <__addsf3x+0x34>
    80d4:	46 95       	lsr	r20
    80d6:	37 95       	ror	r19
    80d8:	27 95       	ror	r18
    80da:	a7 95       	ror	r26
    80dc:	f0 40       	sbci	r31, 0x00	; 0
    80de:	53 95       	inc	r21
    80e0:	c9 f7       	brne	.-14     	; 0x80d4 <__addsf3x+0x4e>
    80e2:	7e f4       	brtc	.+30     	; 0x8102 <__addsf3x+0x7c>
    80e4:	1f 16       	cp	r1, r31
    80e6:	ba 0b       	sbc	r27, r26
    80e8:	62 0b       	sbc	r22, r18
    80ea:	73 0b       	sbc	r23, r19
    80ec:	84 0b       	sbc	r24, r20
    80ee:	ba f0       	brmi	.+46     	; 0x811e <__addsf3x+0x98>
    80f0:	91 50       	subi	r25, 0x01	; 1
    80f2:	a1 f0       	breq	.+40     	; 0x811c <__addsf3x+0x96>
    80f4:	ff 0f       	add	r31, r31
    80f6:	bb 1f       	adc	r27, r27
    80f8:	66 1f       	adc	r22, r22
    80fa:	77 1f       	adc	r23, r23
    80fc:	88 1f       	adc	r24, r24
    80fe:	c2 f7       	brpl	.-16     	; 0x80f0 <__addsf3x+0x6a>
    8100:	0e c0       	rjmp	.+28     	; 0x811e <__addsf3x+0x98>
    8102:	ba 0f       	add	r27, r26
    8104:	62 1f       	adc	r22, r18
    8106:	73 1f       	adc	r23, r19
    8108:	84 1f       	adc	r24, r20
    810a:	48 f4       	brcc	.+18     	; 0x811e <__addsf3x+0x98>
    810c:	87 95       	ror	r24
    810e:	77 95       	ror	r23
    8110:	67 95       	ror	r22
    8112:	b7 95       	ror	r27
    8114:	f7 95       	ror	r31
    8116:	9e 3f       	cpi	r25, 0xFE	; 254
    8118:	08 f0       	brcs	.+2      	; 0x811c <__addsf3x+0x96>
    811a:	b3 cf       	rjmp	.-154    	; 0x8082 <__addsf3+0x1e>
    811c:	93 95       	inc	r25
    811e:	88 0f       	add	r24, r24
    8120:	08 f0       	brcs	.+2      	; 0x8124 <__addsf3x+0x9e>
    8122:	99 27       	eor	r25, r25
    8124:	ee 0f       	add	r30, r30
    8126:	97 95       	ror	r25
    8128:	87 95       	ror	r24
    812a:	08 95       	ret

0000812c <__cmpsf2>:
    812c:	d9 d0       	rcall	.+434    	; 0x82e0 <__fp_cmp>
    812e:	08 f4       	brcc	.+2      	; 0x8132 <__cmpsf2+0x6>
    8130:	81 e0       	ldi	r24, 0x01	; 1
    8132:	08 95       	ret

00008134 <__divsf3>:
    8134:	0c d0       	rcall	.+24     	; 0x814e <__divsf3x>
    8136:	0f c1       	rjmp	.+542    	; 0x8356 <__fp_round>
    8138:	07 d1       	rcall	.+526    	; 0x8348 <__fp_pscB>
    813a:	40 f0       	brcs	.+16     	; 0x814c <__divsf3+0x18>
    813c:	fe d0       	rcall	.+508    	; 0x833a <__fp_pscA>
    813e:	30 f0       	brcs	.+12     	; 0x814c <__divsf3+0x18>
    8140:	21 f4       	brne	.+8      	; 0x814a <__divsf3+0x16>
    8142:	5f 3f       	cpi	r21, 0xFF	; 255
    8144:	19 f0       	breq	.+6      	; 0x814c <__divsf3+0x18>
    8146:	f0 c0       	rjmp	.+480    	; 0x8328 <__fp_inf>
    8148:	51 11       	cpse	r21, r1
    814a:	39 c1       	rjmp	.+626    	; 0x83be <__fp_szero>
    814c:	f3 c0       	rjmp	.+486    	; 0x8334 <__fp_nan>

0000814e <__divsf3x>:
    814e:	14 d1       	rcall	.+552    	; 0x8378 <__fp_split3>
    8150:	98 f3       	brcs	.-26     	; 0x8138 <__divsf3+0x4>

00008152 <__divsf3_pse>:
    8152:	99 23       	and	r25, r25
    8154:	c9 f3       	breq	.-14     	; 0x8148 <__divsf3+0x14>
    8156:	55 23       	and	r21, r21
    8158:	b1 f3       	breq	.-20     	; 0x8146 <__divsf3+0x12>
    815a:	95 1b       	sub	r25, r21
    815c:	55 0b       	sbc	r21, r21
    815e:	bb 27       	eor	r27, r27
    8160:	aa 27       	eor	r26, r26
    8162:	62 17       	cp	r22, r18
    8164:	73 07       	cpc	r23, r19
    8166:	84 07       	cpc	r24, r20
    8168:	38 f0       	brcs	.+14     	; 0x8178 <__divsf3_pse+0x26>
    816a:	9f 5f       	subi	r25, 0xFF	; 255
    816c:	5f 4f       	sbci	r21, 0xFF	; 255
    816e:	22 0f       	add	r18, r18
    8170:	33 1f       	adc	r19, r19
    8172:	44 1f       	adc	r20, r20
    8174:	aa 1f       	adc	r26, r26
    8176:	a9 f3       	breq	.-22     	; 0x8162 <__divsf3_pse+0x10>
    8178:	33 d0       	rcall	.+102    	; 0x81e0 <__divsf3_pse+0x8e>
    817a:	0e 2e       	mov	r0, r30
    817c:	3a f0       	brmi	.+14     	; 0x818c <__divsf3_pse+0x3a>
    817e:	e0 e8       	ldi	r30, 0x80	; 128
    8180:	30 d0       	rcall	.+96     	; 0x81e2 <__divsf3_pse+0x90>
    8182:	91 50       	subi	r25, 0x01	; 1
    8184:	50 40       	sbci	r21, 0x00	; 0
    8186:	e6 95       	lsr	r30
    8188:	00 1c       	adc	r0, r0
    818a:	ca f7       	brpl	.-14     	; 0x817e <__divsf3_pse+0x2c>
    818c:	29 d0       	rcall	.+82     	; 0x81e0 <__divsf3_pse+0x8e>
    818e:	fe 2f       	mov	r31, r30
    8190:	27 d0       	rcall	.+78     	; 0x81e0 <__divsf3_pse+0x8e>
    8192:	66 0f       	add	r22, r22
    8194:	77 1f       	adc	r23, r23
    8196:	88 1f       	adc	r24, r24
    8198:	bb 1f       	adc	r27, r27
    819a:	26 17       	cp	r18, r22
    819c:	37 07       	cpc	r19, r23
    819e:	48 07       	cpc	r20, r24
    81a0:	ab 07       	cpc	r26, r27
    81a2:	b0 e8       	ldi	r27, 0x80	; 128
    81a4:	09 f0       	breq	.+2      	; 0x81a8 <__divsf3_pse+0x56>
    81a6:	bb 0b       	sbc	r27, r27
    81a8:	80 2d       	mov	r24, r0
    81aa:	bf 01       	movw	r22, r30
    81ac:	ff 27       	eor	r31, r31
    81ae:	93 58       	subi	r25, 0x83	; 131
    81b0:	5f 4f       	sbci	r21, 0xFF	; 255
    81b2:	2a f0       	brmi	.+10     	; 0x81be <__divsf3_pse+0x6c>
    81b4:	9e 3f       	cpi	r25, 0xFE	; 254
    81b6:	51 05       	cpc	r21, r1
    81b8:	68 f0       	brcs	.+26     	; 0x81d4 <__divsf3_pse+0x82>
    81ba:	b6 c0       	rjmp	.+364    	; 0x8328 <__fp_inf>
    81bc:	00 c1       	rjmp	.+512    	; 0x83be <__fp_szero>
    81be:	5f 3f       	cpi	r21, 0xFF	; 255
    81c0:	ec f3       	brlt	.-6      	; 0x81bc <__divsf3_pse+0x6a>
    81c2:	98 3e       	cpi	r25, 0xE8	; 232
    81c4:	dc f3       	brlt	.-10     	; 0x81bc <__divsf3_pse+0x6a>
    81c6:	86 95       	lsr	r24
    81c8:	77 95       	ror	r23
    81ca:	67 95       	ror	r22
    81cc:	b7 95       	ror	r27
    81ce:	f7 95       	ror	r31
    81d0:	9f 5f       	subi	r25, 0xFF	; 255
    81d2:	c9 f7       	brne	.-14     	; 0x81c6 <__divsf3_pse+0x74>
    81d4:	88 0f       	add	r24, r24
    81d6:	91 1d       	adc	r25, r1
    81d8:	96 95       	lsr	r25
    81da:	87 95       	ror	r24
    81dc:	97 f9       	bld	r25, 7
    81de:	08 95       	ret
    81e0:	e1 e0       	ldi	r30, 0x01	; 1
    81e2:	66 0f       	add	r22, r22
    81e4:	77 1f       	adc	r23, r23
    81e6:	88 1f       	adc	r24, r24
    81e8:	bb 1f       	adc	r27, r27
    81ea:	62 17       	cp	r22, r18
    81ec:	73 07       	cpc	r23, r19
    81ee:	84 07       	cpc	r24, r20
    81f0:	ba 07       	cpc	r27, r26
    81f2:	20 f0       	brcs	.+8      	; 0x81fc <__divsf3_pse+0xaa>
    81f4:	62 1b       	sub	r22, r18
    81f6:	73 0b       	sbc	r23, r19
    81f8:	84 0b       	sbc	r24, r20
    81fa:	ba 0b       	sbc	r27, r26
    81fc:	ee 1f       	adc	r30, r30
    81fe:	88 f7       	brcc	.-30     	; 0x81e2 <__divsf3_pse+0x90>
    8200:	e0 95       	com	r30
    8202:	08 95       	ret

00008204 <__fixsfsi>:
    8204:	04 d0       	rcall	.+8      	; 0x820e <__fixunssfsi>
    8206:	68 94       	set
    8208:	b1 11       	cpse	r27, r1
    820a:	d9 c0       	rjmp	.+434    	; 0x83be <__fp_szero>
    820c:	08 95       	ret

0000820e <__fixunssfsi>:
    820e:	bc d0       	rcall	.+376    	; 0x8388 <__fp_splitA>
    8210:	88 f0       	brcs	.+34     	; 0x8234 <__fixunssfsi+0x26>
    8212:	9f 57       	subi	r25, 0x7F	; 127
    8214:	90 f0       	brcs	.+36     	; 0x823a <__fixunssfsi+0x2c>
    8216:	b9 2f       	mov	r27, r25
    8218:	99 27       	eor	r25, r25
    821a:	b7 51       	subi	r27, 0x17	; 23
    821c:	a0 f0       	brcs	.+40     	; 0x8246 <__fixunssfsi+0x38>
    821e:	d1 f0       	breq	.+52     	; 0x8254 <__fixunssfsi+0x46>
    8220:	66 0f       	add	r22, r22
    8222:	77 1f       	adc	r23, r23
    8224:	88 1f       	adc	r24, r24
    8226:	99 1f       	adc	r25, r25
    8228:	1a f0       	brmi	.+6      	; 0x8230 <__fixunssfsi+0x22>
    822a:	ba 95       	dec	r27
    822c:	c9 f7       	brne	.-14     	; 0x8220 <__fixunssfsi+0x12>
    822e:	12 c0       	rjmp	.+36     	; 0x8254 <__fixunssfsi+0x46>
    8230:	b1 30       	cpi	r27, 0x01	; 1
    8232:	81 f0       	breq	.+32     	; 0x8254 <__fixunssfsi+0x46>
    8234:	c3 d0       	rcall	.+390    	; 0x83bc <__fp_zero>
    8236:	b1 e0       	ldi	r27, 0x01	; 1
    8238:	08 95       	ret
    823a:	c0 c0       	rjmp	.+384    	; 0x83bc <__fp_zero>
    823c:	67 2f       	mov	r22, r23
    823e:	78 2f       	mov	r23, r24
    8240:	88 27       	eor	r24, r24
    8242:	b8 5f       	subi	r27, 0xF8	; 248
    8244:	39 f0       	breq	.+14     	; 0x8254 <__fixunssfsi+0x46>
    8246:	b9 3f       	cpi	r27, 0xF9	; 249
    8248:	cc f3       	brlt	.-14     	; 0x823c <__fixunssfsi+0x2e>
    824a:	86 95       	lsr	r24
    824c:	77 95       	ror	r23
    824e:	67 95       	ror	r22
    8250:	b3 95       	inc	r27
    8252:	d9 f7       	brne	.-10     	; 0x824a <__fixunssfsi+0x3c>
    8254:	3e f4       	brtc	.+14     	; 0x8264 <__fixunssfsi+0x56>
    8256:	90 95       	com	r25
    8258:	80 95       	com	r24
    825a:	70 95       	com	r23
    825c:	61 95       	neg	r22
    825e:	7f 4f       	sbci	r23, 0xFF	; 255
    8260:	8f 4f       	sbci	r24, 0xFF	; 255
    8262:	9f 4f       	sbci	r25, 0xFF	; 255
    8264:	08 95       	ret

00008266 <__floatunsisf>:
    8266:	e8 94       	clt
    8268:	09 c0       	rjmp	.+18     	; 0x827c <__floatsisf+0x12>

0000826a <__floatsisf>:
    826a:	97 fb       	bst	r25, 7
    826c:	3e f4       	brtc	.+14     	; 0x827c <__floatsisf+0x12>
    826e:	90 95       	com	r25
    8270:	80 95       	com	r24
    8272:	70 95       	com	r23
    8274:	61 95       	neg	r22
    8276:	7f 4f       	sbci	r23, 0xFF	; 255
    8278:	8f 4f       	sbci	r24, 0xFF	; 255
    827a:	9f 4f       	sbci	r25, 0xFF	; 255
    827c:	99 23       	and	r25, r25
    827e:	a9 f0       	breq	.+42     	; 0x82aa <__floatsisf+0x40>
    8280:	f9 2f       	mov	r31, r25
    8282:	96 e9       	ldi	r25, 0x96	; 150
    8284:	bb 27       	eor	r27, r27
    8286:	93 95       	inc	r25
    8288:	f6 95       	lsr	r31
    828a:	87 95       	ror	r24
    828c:	77 95       	ror	r23
    828e:	67 95       	ror	r22
    8290:	b7 95       	ror	r27
    8292:	f1 11       	cpse	r31, r1
    8294:	f8 cf       	rjmp	.-16     	; 0x8286 <__floatsisf+0x1c>
    8296:	fa f4       	brpl	.+62     	; 0x82d6 <__floatsisf+0x6c>
    8298:	bb 0f       	add	r27, r27
    829a:	11 f4       	brne	.+4      	; 0x82a0 <__floatsisf+0x36>
    829c:	60 ff       	sbrs	r22, 0
    829e:	1b c0       	rjmp	.+54     	; 0x82d6 <__floatsisf+0x6c>
    82a0:	6f 5f       	subi	r22, 0xFF	; 255
    82a2:	7f 4f       	sbci	r23, 0xFF	; 255
    82a4:	8f 4f       	sbci	r24, 0xFF	; 255
    82a6:	9f 4f       	sbci	r25, 0xFF	; 255
    82a8:	16 c0       	rjmp	.+44     	; 0x82d6 <__floatsisf+0x6c>
    82aa:	88 23       	and	r24, r24
    82ac:	11 f0       	breq	.+4      	; 0x82b2 <__floatsisf+0x48>
    82ae:	96 e9       	ldi	r25, 0x96	; 150
    82b0:	11 c0       	rjmp	.+34     	; 0x82d4 <__floatsisf+0x6a>
    82b2:	77 23       	and	r23, r23
    82b4:	21 f0       	breq	.+8      	; 0x82be <__floatsisf+0x54>
    82b6:	9e e8       	ldi	r25, 0x8E	; 142
    82b8:	87 2f       	mov	r24, r23
    82ba:	76 2f       	mov	r23, r22
    82bc:	05 c0       	rjmp	.+10     	; 0x82c8 <__floatsisf+0x5e>
    82be:	66 23       	and	r22, r22
    82c0:	71 f0       	breq	.+28     	; 0x82de <__floatsisf+0x74>
    82c2:	96 e8       	ldi	r25, 0x86	; 134
    82c4:	86 2f       	mov	r24, r22
    82c6:	70 e0       	ldi	r23, 0x00	; 0
    82c8:	60 e0       	ldi	r22, 0x00	; 0
    82ca:	2a f0       	brmi	.+10     	; 0x82d6 <__floatsisf+0x6c>
    82cc:	9a 95       	dec	r25
    82ce:	66 0f       	add	r22, r22
    82d0:	77 1f       	adc	r23, r23
    82d2:	88 1f       	adc	r24, r24
    82d4:	da f7       	brpl	.-10     	; 0x82cc <__floatsisf+0x62>
    82d6:	88 0f       	add	r24, r24
    82d8:	96 95       	lsr	r25
    82da:	87 95       	ror	r24
    82dc:	97 f9       	bld	r25, 7
    82de:	08 95       	ret

000082e0 <__fp_cmp>:
    82e0:	99 0f       	add	r25, r25
    82e2:	00 08       	sbc	r0, r0
    82e4:	55 0f       	add	r21, r21
    82e6:	aa 0b       	sbc	r26, r26
    82e8:	e0 e8       	ldi	r30, 0x80	; 128
    82ea:	fe ef       	ldi	r31, 0xFE	; 254
    82ec:	16 16       	cp	r1, r22
    82ee:	17 06       	cpc	r1, r23
    82f0:	e8 07       	cpc	r30, r24
    82f2:	f9 07       	cpc	r31, r25
    82f4:	c0 f0       	brcs	.+48     	; 0x8326 <__fp_cmp+0x46>
    82f6:	12 16       	cp	r1, r18
    82f8:	13 06       	cpc	r1, r19
    82fa:	e4 07       	cpc	r30, r20
    82fc:	f5 07       	cpc	r31, r21
    82fe:	98 f0       	brcs	.+38     	; 0x8326 <__fp_cmp+0x46>
    8300:	62 1b       	sub	r22, r18
    8302:	73 0b       	sbc	r23, r19
    8304:	84 0b       	sbc	r24, r20
    8306:	95 0b       	sbc	r25, r21
    8308:	39 f4       	brne	.+14     	; 0x8318 <__fp_cmp+0x38>
    830a:	0a 26       	eor	r0, r26
    830c:	61 f0       	breq	.+24     	; 0x8326 <__fp_cmp+0x46>
    830e:	23 2b       	or	r18, r19
    8310:	24 2b       	or	r18, r20
    8312:	25 2b       	or	r18, r21
    8314:	21 f4       	brne	.+8      	; 0x831e <__fp_cmp+0x3e>
    8316:	08 95       	ret
    8318:	0a 26       	eor	r0, r26
    831a:	09 f4       	brne	.+2      	; 0x831e <__fp_cmp+0x3e>
    831c:	a1 40       	sbci	r26, 0x01	; 1
    831e:	a6 95       	lsr	r26
    8320:	8f ef       	ldi	r24, 0xFF	; 255
    8322:	81 1d       	adc	r24, r1
    8324:	81 1d       	adc	r24, r1
    8326:	08 95       	ret

00008328 <__fp_inf>:
    8328:	97 f9       	bld	r25, 7
    832a:	9f 67       	ori	r25, 0x7F	; 127
    832c:	80 e8       	ldi	r24, 0x80	; 128
    832e:	70 e0       	ldi	r23, 0x00	; 0
    8330:	60 e0       	ldi	r22, 0x00	; 0
    8332:	08 95       	ret

00008334 <__fp_nan>:
    8334:	9f ef       	ldi	r25, 0xFF	; 255
    8336:	80 ec       	ldi	r24, 0xC0	; 192
    8338:	08 95       	ret

0000833a <__fp_pscA>:
    833a:	00 24       	eor	r0, r0
    833c:	0a 94       	dec	r0
    833e:	16 16       	cp	r1, r22
    8340:	17 06       	cpc	r1, r23
    8342:	18 06       	cpc	r1, r24
    8344:	09 06       	cpc	r0, r25
    8346:	08 95       	ret

00008348 <__fp_pscB>:
    8348:	00 24       	eor	r0, r0
    834a:	0a 94       	dec	r0
    834c:	12 16       	cp	r1, r18
    834e:	13 06       	cpc	r1, r19
    8350:	14 06       	cpc	r1, r20
    8352:	05 06       	cpc	r0, r21
    8354:	08 95       	ret

00008356 <__fp_round>:
    8356:	09 2e       	mov	r0, r25
    8358:	03 94       	inc	r0
    835a:	00 0c       	add	r0, r0
    835c:	11 f4       	brne	.+4      	; 0x8362 <__fp_round+0xc>
    835e:	88 23       	and	r24, r24
    8360:	52 f0       	brmi	.+20     	; 0x8376 <__fp_round+0x20>
    8362:	bb 0f       	add	r27, r27
    8364:	40 f4       	brcc	.+16     	; 0x8376 <__fp_round+0x20>
    8366:	bf 2b       	or	r27, r31
    8368:	11 f4       	brne	.+4      	; 0x836e <__fp_round+0x18>
    836a:	60 ff       	sbrs	r22, 0
    836c:	04 c0       	rjmp	.+8      	; 0x8376 <__fp_round+0x20>
    836e:	6f 5f       	subi	r22, 0xFF	; 255
    8370:	7f 4f       	sbci	r23, 0xFF	; 255
    8372:	8f 4f       	sbci	r24, 0xFF	; 255
    8374:	9f 4f       	sbci	r25, 0xFF	; 255
    8376:	08 95       	ret

00008378 <__fp_split3>:
    8378:	57 fd       	sbrc	r21, 7
    837a:	90 58       	subi	r25, 0x80	; 128
    837c:	44 0f       	add	r20, r20
    837e:	55 1f       	adc	r21, r21
    8380:	59 f0       	breq	.+22     	; 0x8398 <__fp_splitA+0x10>
    8382:	5f 3f       	cpi	r21, 0xFF	; 255
    8384:	71 f0       	breq	.+28     	; 0x83a2 <__fp_splitA+0x1a>
    8386:	47 95       	ror	r20

00008388 <__fp_splitA>:
    8388:	88 0f       	add	r24, r24
    838a:	97 fb       	bst	r25, 7
    838c:	99 1f       	adc	r25, r25
    838e:	61 f0       	breq	.+24     	; 0x83a8 <__fp_splitA+0x20>
    8390:	9f 3f       	cpi	r25, 0xFF	; 255
    8392:	79 f0       	breq	.+30     	; 0x83b2 <__fp_splitA+0x2a>
    8394:	87 95       	ror	r24
    8396:	08 95       	ret
    8398:	12 16       	cp	r1, r18
    839a:	13 06       	cpc	r1, r19
    839c:	14 06       	cpc	r1, r20
    839e:	55 1f       	adc	r21, r21
    83a0:	f2 cf       	rjmp	.-28     	; 0x8386 <__fp_split3+0xe>
    83a2:	46 95       	lsr	r20
    83a4:	f1 df       	rcall	.-30     	; 0x8388 <__fp_splitA>
    83a6:	08 c0       	rjmp	.+16     	; 0x83b8 <__fp_splitA+0x30>
    83a8:	16 16       	cp	r1, r22
    83aa:	17 06       	cpc	r1, r23
    83ac:	18 06       	cpc	r1, r24
    83ae:	99 1f       	adc	r25, r25
    83b0:	f1 cf       	rjmp	.-30     	; 0x8394 <__fp_splitA+0xc>
    83b2:	86 95       	lsr	r24
    83b4:	71 05       	cpc	r23, r1
    83b6:	61 05       	cpc	r22, r1
    83b8:	08 94       	sec
    83ba:	08 95       	ret

000083bc <__fp_zero>:
    83bc:	e8 94       	clt

000083be <__fp_szero>:
    83be:	bb 27       	eor	r27, r27
    83c0:	66 27       	eor	r22, r22
    83c2:	77 27       	eor	r23, r23
    83c4:	cb 01       	movw	r24, r22
    83c6:	97 f9       	bld	r25, 7
    83c8:	08 95       	ret

000083ca <__gesf2>:
    83ca:	8a df       	rcall	.-236    	; 0x82e0 <__fp_cmp>
    83cc:	08 f4       	brcc	.+2      	; 0x83d0 <__gesf2+0x6>
    83ce:	8f ef       	ldi	r24, 0xFF	; 255
    83d0:	08 95       	ret

000083d2 <__mulsf3>:
    83d2:	0b d0       	rcall	.+22     	; 0x83ea <__mulsf3x>
    83d4:	c0 cf       	rjmp	.-128    	; 0x8356 <__fp_round>
    83d6:	b1 df       	rcall	.-158    	; 0x833a <__fp_pscA>
    83d8:	28 f0       	brcs	.+10     	; 0x83e4 <__mulsf3+0x12>
    83da:	b6 df       	rcall	.-148    	; 0x8348 <__fp_pscB>
    83dc:	18 f0       	brcs	.+6      	; 0x83e4 <__mulsf3+0x12>
    83de:	95 23       	and	r25, r21
    83e0:	09 f0       	breq	.+2      	; 0x83e4 <__mulsf3+0x12>
    83e2:	a2 cf       	rjmp	.-188    	; 0x8328 <__fp_inf>
    83e4:	a7 cf       	rjmp	.-178    	; 0x8334 <__fp_nan>
    83e6:	11 24       	eor	r1, r1
    83e8:	ea cf       	rjmp	.-44     	; 0x83be <__fp_szero>

000083ea <__mulsf3x>:
    83ea:	c6 df       	rcall	.-116    	; 0x8378 <__fp_split3>
    83ec:	a0 f3       	brcs	.-24     	; 0x83d6 <__mulsf3+0x4>

000083ee <__mulsf3_pse>:
    83ee:	95 9f       	mul	r25, r21
    83f0:	d1 f3       	breq	.-12     	; 0x83e6 <__mulsf3+0x14>
    83f2:	95 0f       	add	r25, r21
    83f4:	50 e0       	ldi	r21, 0x00	; 0
    83f6:	55 1f       	adc	r21, r21
    83f8:	62 9f       	mul	r22, r18
    83fa:	f0 01       	movw	r30, r0
    83fc:	72 9f       	mul	r23, r18
    83fe:	bb 27       	eor	r27, r27
    8400:	f0 0d       	add	r31, r0
    8402:	b1 1d       	adc	r27, r1
    8404:	63 9f       	mul	r22, r19
    8406:	aa 27       	eor	r26, r26
    8408:	f0 0d       	add	r31, r0
    840a:	b1 1d       	adc	r27, r1
    840c:	aa 1f       	adc	r26, r26
    840e:	64 9f       	mul	r22, r20
    8410:	66 27       	eor	r22, r22
    8412:	b0 0d       	add	r27, r0
    8414:	a1 1d       	adc	r26, r1
    8416:	66 1f       	adc	r22, r22
    8418:	82 9f       	mul	r24, r18
    841a:	22 27       	eor	r18, r18
    841c:	b0 0d       	add	r27, r0
    841e:	a1 1d       	adc	r26, r1
    8420:	62 1f       	adc	r22, r18
    8422:	73 9f       	mul	r23, r19
    8424:	b0 0d       	add	r27, r0
    8426:	a1 1d       	adc	r26, r1
    8428:	62 1f       	adc	r22, r18
    842a:	83 9f       	mul	r24, r19
    842c:	a0 0d       	add	r26, r0
    842e:	61 1d       	adc	r22, r1
    8430:	22 1f       	adc	r18, r18
    8432:	74 9f       	mul	r23, r20
    8434:	33 27       	eor	r19, r19
    8436:	a0 0d       	add	r26, r0
    8438:	61 1d       	adc	r22, r1
    843a:	23 1f       	adc	r18, r19
    843c:	84 9f       	mul	r24, r20
    843e:	60 0d       	add	r22, r0
    8440:	21 1d       	adc	r18, r1
    8442:	82 2f       	mov	r24, r18
    8444:	76 2f       	mov	r23, r22
    8446:	6a 2f       	mov	r22, r26
    8448:	11 24       	eor	r1, r1
    844a:	9f 57       	subi	r25, 0x7F	; 127
    844c:	50 40       	sbci	r21, 0x00	; 0
    844e:	8a f0       	brmi	.+34     	; 0x8472 <__mulsf3_pse+0x84>
    8450:	e1 f0       	breq	.+56     	; 0x848a <__mulsf3_pse+0x9c>
    8452:	88 23       	and	r24, r24
    8454:	4a f0       	brmi	.+18     	; 0x8468 <__mulsf3_pse+0x7a>
    8456:	ee 0f       	add	r30, r30
    8458:	ff 1f       	adc	r31, r31
    845a:	bb 1f       	adc	r27, r27
    845c:	66 1f       	adc	r22, r22
    845e:	77 1f       	adc	r23, r23
    8460:	88 1f       	adc	r24, r24
    8462:	91 50       	subi	r25, 0x01	; 1
    8464:	50 40       	sbci	r21, 0x00	; 0
    8466:	a9 f7       	brne	.-22     	; 0x8452 <__mulsf3_pse+0x64>
    8468:	9e 3f       	cpi	r25, 0xFE	; 254
    846a:	51 05       	cpc	r21, r1
    846c:	70 f0       	brcs	.+28     	; 0x848a <__mulsf3_pse+0x9c>
    846e:	5c cf       	rjmp	.-328    	; 0x8328 <__fp_inf>
    8470:	a6 cf       	rjmp	.-180    	; 0x83be <__fp_szero>
    8472:	5f 3f       	cpi	r21, 0xFF	; 255
    8474:	ec f3       	brlt	.-6      	; 0x8470 <__mulsf3_pse+0x82>
    8476:	98 3e       	cpi	r25, 0xE8	; 232
    8478:	dc f3       	brlt	.-10     	; 0x8470 <__mulsf3_pse+0x82>
    847a:	86 95       	lsr	r24
    847c:	77 95       	ror	r23
    847e:	67 95       	ror	r22
    8480:	b7 95       	ror	r27
    8482:	f7 95       	ror	r31
    8484:	e7 95       	ror	r30
    8486:	9f 5f       	subi	r25, 0xFF	; 255
    8488:	c1 f7       	brne	.-16     	; 0x847a <__mulsf3_pse+0x8c>
    848a:	fe 2b       	or	r31, r30
    848c:	88 0f       	add	r24, r24
    848e:	91 1d       	adc	r25, r1
    8490:	96 95       	lsr	r25
    8492:	87 95       	ror	r24
    8494:	97 f9       	bld	r25, 7
    8496:	08 95       	ret

00008498 <__udivmodhi4>:
    8498:	aa 1b       	sub	r26, r26
    849a:	bb 1b       	sub	r27, r27
    849c:	51 e1       	ldi	r21, 0x11	; 17
    849e:	07 c0       	rjmp	.+14     	; 0x84ae <__udivmodhi4_ep>

000084a0 <__udivmodhi4_loop>:
    84a0:	aa 1f       	adc	r26, r26
    84a2:	bb 1f       	adc	r27, r27
    84a4:	a6 17       	cp	r26, r22
    84a6:	b7 07       	cpc	r27, r23
    84a8:	10 f0       	brcs	.+4      	; 0x84ae <__udivmodhi4_ep>
    84aa:	a6 1b       	sub	r26, r22
    84ac:	b7 0b       	sbc	r27, r23

000084ae <__udivmodhi4_ep>:
    84ae:	88 1f       	adc	r24, r24
    84b0:	99 1f       	adc	r25, r25
    84b2:	5a 95       	dec	r21
    84b4:	a9 f7       	brne	.-22     	; 0x84a0 <__udivmodhi4_loop>
    84b6:	80 95       	com	r24
    84b8:	90 95       	com	r25
    84ba:	bc 01       	movw	r22, r24
    84bc:	cd 01       	movw	r24, r26
    84be:	08 95       	ret

000084c0 <__divmodhi4>:
    84c0:	97 fb       	bst	r25, 7
    84c2:	07 2e       	mov	r0, r23
    84c4:	16 f4       	brtc	.+4      	; 0x84ca <__divmodhi4+0xa>
    84c6:	00 94       	com	r0
    84c8:	07 d0       	rcall	.+14     	; 0x84d8 <__divmodhi4_neg1>
    84ca:	77 fd       	sbrc	r23, 7
    84cc:	09 d0       	rcall	.+18     	; 0x84e0 <__divmodhi4_neg2>
    84ce:	0e 94 4c 42 	call	0x8498	; 0x8498 <__udivmodhi4>
    84d2:	07 fc       	sbrc	r0, 7
    84d4:	05 d0       	rcall	.+10     	; 0x84e0 <__divmodhi4_neg2>
    84d6:	3e f4       	brtc	.+14     	; 0x84e6 <__divmodhi4_exit>

000084d8 <__divmodhi4_neg1>:
    84d8:	90 95       	com	r25
    84da:	81 95       	neg	r24
    84dc:	9f 4f       	sbci	r25, 0xFF	; 255
    84de:	08 95       	ret

000084e0 <__divmodhi4_neg2>:
    84e0:	70 95       	com	r23
    84e2:	61 95       	neg	r22
    84e4:	7f 4f       	sbci	r23, 0xFF	; 255

000084e6 <__divmodhi4_exit>:
    84e6:	08 95       	ret

000084e8 <__divmodsi4>:
    84e8:	05 2e       	mov	r0, r21
    84ea:	97 fb       	bst	r25, 7
    84ec:	1e f4       	brtc	.+6      	; 0x84f4 <__divmodsi4+0xc>
    84ee:	00 94       	com	r0
    84f0:	0e 94 8b 42 	call	0x8516	; 0x8516 <__negsi2>
    84f4:	57 fd       	sbrc	r21, 7
    84f6:	07 d0       	rcall	.+14     	; 0x8506 <__divmodsi4_neg2>
    84f8:	0e 94 ca 42 	call	0x8594	; 0x8594 <__udivmodsi4>
    84fc:	07 fc       	sbrc	r0, 7
    84fe:	03 d0       	rcall	.+6      	; 0x8506 <__divmodsi4_neg2>
    8500:	4e f4       	brtc	.+18     	; 0x8514 <__divmodsi4_exit>
    8502:	0c 94 8b 42 	jmp	0x8516	; 0x8516 <__negsi2>

00008506 <__divmodsi4_neg2>:
    8506:	50 95       	com	r21
    8508:	40 95       	com	r20
    850a:	30 95       	com	r19
    850c:	21 95       	neg	r18
    850e:	3f 4f       	sbci	r19, 0xFF	; 255
    8510:	4f 4f       	sbci	r20, 0xFF	; 255
    8512:	5f 4f       	sbci	r21, 0xFF	; 255

00008514 <__divmodsi4_exit>:
    8514:	08 95       	ret

00008516 <__negsi2>:
    8516:	90 95       	com	r25
    8518:	80 95       	com	r24
    851a:	70 95       	com	r23
    851c:	61 95       	neg	r22
    851e:	7f 4f       	sbci	r23, 0xFF	; 255
    8520:	8f 4f       	sbci	r24, 0xFF	; 255
    8522:	9f 4f       	sbci	r25, 0xFF	; 255
    8524:	08 95       	ret

00008526 <__tablejump2__>:
    8526:	ee 0f       	add	r30, r30
    8528:	ff 1f       	adc	r31, r31

0000852a <__tablejump__>:
    852a:	05 90       	lpm	r0, Z+
    852c:	f4 91       	lpm	r31, Z
    852e:	e0 2d       	mov	r30, r0
    8530:	09 94       	ijmp

00008532 <__mulhisi3>:
    8532:	0e 94 a1 42 	call	0x8542	; 0x8542 <__umulhisi3>
    8536:	33 23       	and	r19, r19
    8538:	12 f4       	brpl	.+4      	; 0x853e <__mulhisi3+0xc>
    853a:	8a 1b       	sub	r24, r26
    853c:	9b 0b       	sbc	r25, r27
    853e:	0c 94 b2 42 	jmp	0x8564	; 0x8564 <__usmulhisi3_tail>

00008542 <__umulhisi3>:
    8542:	a2 9f       	mul	r26, r18
    8544:	b0 01       	movw	r22, r0
    8546:	b3 9f       	mul	r27, r19
    8548:	c0 01       	movw	r24, r0
    854a:	a3 9f       	mul	r26, r19
    854c:	70 0d       	add	r23, r0
    854e:	81 1d       	adc	r24, r1
    8550:	11 24       	eor	r1, r1
    8552:	91 1d       	adc	r25, r1
    8554:	b2 9f       	mul	r27, r18
    8556:	70 0d       	add	r23, r0
    8558:	81 1d       	adc	r24, r1
    855a:	11 24       	eor	r1, r1
    855c:	91 1d       	adc	r25, r1
    855e:	08 95       	ret

00008560 <__usmulhisi3>:
    8560:	0e 94 a1 42 	call	0x8542	; 0x8542 <__umulhisi3>

00008564 <__usmulhisi3_tail>:
    8564:	b7 ff       	sbrs	r27, 7
    8566:	08 95       	ret
    8568:	82 1b       	sub	r24, r18
    856a:	93 0b       	sbc	r25, r19
    856c:	08 95       	ret

0000856e <__muluhisi3>:
    856e:	0e 94 a1 42 	call	0x8542	; 0x8542 <__umulhisi3>
    8572:	a5 9f       	mul	r26, r21
    8574:	90 0d       	add	r25, r0
    8576:	b4 9f       	mul	r27, r20
    8578:	90 0d       	add	r25, r0
    857a:	a4 9f       	mul	r26, r20
    857c:	80 0d       	add	r24, r0
    857e:	91 1d       	adc	r25, r1
    8580:	11 24       	eor	r1, r1
    8582:	08 95       	ret

00008584 <__mulshisi3>:
    8584:	b7 ff       	sbrs	r27, 7
    8586:	0c 94 b7 42 	jmp	0x856e	; 0x856e <__muluhisi3>

0000858a <__mulohisi3>:
    858a:	0e 94 b7 42 	call	0x856e	; 0x856e <__muluhisi3>
    858e:	82 1b       	sub	r24, r18
    8590:	93 0b       	sbc	r25, r19
    8592:	08 95       	ret

00008594 <__udivmodsi4>:
    8594:	a1 e2       	ldi	r26, 0x21	; 33
    8596:	1a 2e       	mov	r1, r26
    8598:	aa 1b       	sub	r26, r26
    859a:	bb 1b       	sub	r27, r27
    859c:	fd 01       	movw	r30, r26
    859e:	0d c0       	rjmp	.+26     	; 0x85ba <__udivmodsi4_ep>

000085a0 <__udivmodsi4_loop>:
    85a0:	aa 1f       	adc	r26, r26
    85a2:	bb 1f       	adc	r27, r27
    85a4:	ee 1f       	adc	r30, r30
    85a6:	ff 1f       	adc	r31, r31
    85a8:	a2 17       	cp	r26, r18
    85aa:	b3 07       	cpc	r27, r19
    85ac:	e4 07       	cpc	r30, r20
    85ae:	f5 07       	cpc	r31, r21
    85b0:	20 f0       	brcs	.+8      	; 0x85ba <__udivmodsi4_ep>
    85b2:	a2 1b       	sub	r26, r18
    85b4:	b3 0b       	sbc	r27, r19
    85b6:	e4 0b       	sbc	r30, r20
    85b8:	f5 0b       	sbc	r31, r21

000085ba <__udivmodsi4_ep>:
    85ba:	66 1f       	adc	r22, r22
    85bc:	77 1f       	adc	r23, r23
    85be:	88 1f       	adc	r24, r24
    85c0:	99 1f       	adc	r25, r25
    85c2:	1a 94       	dec	r1
    85c4:	69 f7       	brne	.-38     	; 0x85a0 <__udivmodsi4_loop>
    85c6:	60 95       	com	r22
    85c8:	70 95       	com	r23
    85ca:	80 95       	com	r24
    85cc:	90 95       	com	r25
    85ce:	9b 01       	movw	r18, r22
    85d0:	ac 01       	movw	r20, r24
    85d2:	bd 01       	movw	r22, r26
    85d4:	cf 01       	movw	r24, r30
    85d6:	08 95       	ret

000085d8 <memcpy_P>:
    85d8:	fb 01       	movw	r30, r22
    85da:	dc 01       	movw	r26, r24
    85dc:	02 c0       	rjmp	.+4      	; 0x85e2 <memcpy_P+0xa>
    85de:	05 90       	lpm	r0, Z+
    85e0:	0d 92       	st	X+, r0
    85e2:	41 50       	subi	r20, 0x01	; 1
    85e4:	50 40       	sbci	r21, 0x00	; 0
    85e6:	d8 f7       	brcc	.-10     	; 0x85de <memcpy_P+0x6>
    85e8:	08 95       	ret

000085ea <__itoa_ncheck>:
    85ea:	bb 27       	eor	r27, r27
    85ec:	4a 30       	cpi	r20, 0x0A	; 10
    85ee:	31 f4       	brne	.+12     	; 0x85fc <__itoa_ncheck+0x12>
    85f0:	99 23       	and	r25, r25
    85f2:	22 f4       	brpl	.+8      	; 0x85fc <__itoa_ncheck+0x12>
    85f4:	bd e2       	ldi	r27, 0x2D	; 45
    85f6:	90 95       	com	r25
    85f8:	81 95       	neg	r24
    85fa:	9f 4f       	sbci	r25, 0xFF	; 255
    85fc:	0c 94 01 43 	jmp	0x8602	; 0x8602 <__utoa_common>

00008600 <__utoa_ncheck>:
    8600:	bb 27       	eor	r27, r27

00008602 <__utoa_common>:
    8602:	fb 01       	movw	r30, r22
    8604:	55 27       	eor	r21, r21
    8606:	aa 27       	eor	r26, r26
    8608:	88 0f       	add	r24, r24
    860a:	99 1f       	adc	r25, r25
    860c:	aa 1f       	adc	r26, r26
    860e:	a4 17       	cp	r26, r20
    8610:	10 f0       	brcs	.+4      	; 0x8616 <__utoa_common+0x14>
    8612:	a4 1b       	sub	r26, r20
    8614:	83 95       	inc	r24
    8616:	50 51       	subi	r21, 0x10	; 16
    8618:	b9 f7       	brne	.-18     	; 0x8608 <__utoa_common+0x6>
    861a:	a0 5d       	subi	r26, 0xD0	; 208
    861c:	aa 33       	cpi	r26, 0x3A	; 58
    861e:	08 f0       	brcs	.+2      	; 0x8622 <__utoa_common+0x20>
    8620:	a9 5d       	subi	r26, 0xD9	; 217
    8622:	a1 93       	st	Z+, r26
    8624:	00 97       	sbiw	r24, 0x00	; 0
    8626:	79 f7       	brne	.-34     	; 0x8606 <__utoa_common+0x4>
    8628:	b1 11       	cpse	r27, r1
    862a:	b1 93       	st	Z+, r27
    862c:	11 92       	st	Z+, r1
    862e:	cb 01       	movw	r24, r22
    8630:	0c 94 40 43 	jmp	0x8680	; 0x8680 <strrev>

00008634 <__eerd_block_m644p>:
    8634:	dc 01       	movw	r26, r24
    8636:	cb 01       	movw	r24, r22

00008638 <__eerd_blraw_m644p>:
    8638:	fc 01       	movw	r30, r24
    863a:	f9 99       	sbic	0x1f, 1	; 31
    863c:	fe cf       	rjmp	.-4      	; 0x863a <__eerd_blraw_m644p+0x2>
    863e:	06 c0       	rjmp	.+12     	; 0x864c <__eerd_blraw_m644p+0x14>
    8640:	f2 bd       	out	0x22, r31	; 34
    8642:	e1 bd       	out	0x21, r30	; 33
    8644:	f8 9a       	sbi	0x1f, 0	; 31
    8646:	31 96       	adiw	r30, 0x01	; 1
    8648:	00 b4       	in	r0, 0x20	; 32
    864a:	0d 92       	st	X+, r0
    864c:	41 50       	subi	r20, 0x01	; 1
    864e:	50 40       	sbci	r21, 0x00	; 0
    8650:	b8 f7       	brcc	.-18     	; 0x8640 <__eerd_blraw_m644p+0x8>
    8652:	08 95       	ret

00008654 <__eerd_byte_m644p>:
    8654:	f9 99       	sbic	0x1f, 1	; 31
    8656:	fe cf       	rjmp	.-4      	; 0x8654 <__eerd_byte_m644p>
    8658:	92 bd       	out	0x22, r25	; 34
    865a:	81 bd       	out	0x21, r24	; 33
    865c:	f8 9a       	sbi	0x1f, 0	; 31
    865e:	99 27       	eor	r25, r25
    8660:	80 b5       	in	r24, 0x20	; 32
    8662:	08 95       	ret

00008664 <__eewr_byte_m644p>:
    8664:	26 2f       	mov	r18, r22

00008666 <__eewr_r18_m644p>:
    8666:	f9 99       	sbic	0x1f, 1	; 31
    8668:	fe cf       	rjmp	.-4      	; 0x8666 <__eewr_r18_m644p>
    866a:	1f ba       	out	0x1f, r1	; 31
    866c:	92 bd       	out	0x22, r25	; 34
    866e:	81 bd       	out	0x21, r24	; 33
    8670:	20 bd       	out	0x20, r18	; 32
    8672:	0f b6       	in	r0, 0x3f	; 63
    8674:	f8 94       	cli
    8676:	fa 9a       	sbi	0x1f, 2	; 31
    8678:	f9 9a       	sbi	0x1f, 1	; 31
    867a:	0f be       	out	0x3f, r0	; 63
    867c:	01 96       	adiw	r24, 0x01	; 1
    867e:	08 95       	ret

00008680 <strrev>:
    8680:	dc 01       	movw	r26, r24
    8682:	fc 01       	movw	r30, r24
    8684:	67 2f       	mov	r22, r23
    8686:	71 91       	ld	r23, Z+
    8688:	77 23       	and	r23, r23
    868a:	e1 f7       	brne	.-8      	; 0x8684 <strrev+0x4>
    868c:	32 97       	sbiw	r30, 0x02	; 2
    868e:	04 c0       	rjmp	.+8      	; 0x8698 <strrev+0x18>
    8690:	7c 91       	ld	r23, X
    8692:	6d 93       	st	X+, r22
    8694:	70 83       	st	Z, r23
    8696:	62 91       	ld	r22, -Z
    8698:	ae 17       	cp	r26, r30
    869a:	bf 07       	cpc	r27, r31
    869c:	c8 f3       	brcs	.-14     	; 0x8690 <strrev+0x10>
    869e:	08 95       	ret

000086a0 <_exit>:
    86a0:	f8 94       	cli

000086a2 <__stop_program>:
    86a2:	ff cf       	rjmp	.-2      	; 0x86a2 <__stop_program>
