
KK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000049a2  00004a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049a2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050d  0080010a  0080010a  00004a60  2**0
                  ALLOC
  3 .noinit       000000c0  00800617  00800617  00004a60  2**0
                  ALLOC
  4 .eeprom       0000007c  00810000  00810000  00004a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      00000030  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005f0  00000000  00000000  00004b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009bd9  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002676  00000000  00000000  0000ecd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004a79  00000000  00000000  0001134b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010bc  00000000  00000000  00015dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e187  00000000  00000000  00016e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003776  00000000  00000000  00025007  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c0  00000000  00000000  0002877d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00012bc0  00000000  00000000  00028d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__ctors_end>
       4:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_1>
       8:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_2>
       c:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__vector_3>
      10:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      14:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_5>
      18:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      1c:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_7>
      20:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      24:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      28:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      2c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      30:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      34:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__vector_13>
      38:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_14>
      3c:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__vector_15>
      40:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      44:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      48:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_18>
      4c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      50:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      54:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      58:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      5c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      60:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_24>
      64:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      68:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      6c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      70:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_28>
      74:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__vector_29>
      78:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	01 02       	muls	r16, r17
      7e:	04 08       	sbc	r0, r4
      80:	10 20       	and	r1, r0
      82:	40 80       	ld	r4, Z

00000084 <_initSeq>:
      84:	a2 a0 c8 40 a6 a4 2f 24 81 20 af 00                 ...@../$. ..

00000090 <masktable>:
      90:	40 10 04 08 02 01 20 80                             @..... .

00000098 <font12x16>:
      98:	0c 10 23 15                                         ..#.

0000009c <_font12x16map>:
	...
      bc:	7c 00 ff 33 ff 33 7c 00 00 00 00 00 00 00 00 00     |..3.3|.........
      cc:	00 00 00 00 00 00 3c 00 3c 00 00 00 00 00 3c 00     ......<.<.....<.
      dc:	3c 00 00 00 00 00 00 00 00 00 00 02 10 1e 90 1f     <...............
      ec:	f0 03 7e 02 1e 1e 90 1f f0 03 7e 02 1e 00 10 00     ..~.......~.....
      fc:	00 00 00 00 78 04 fc 0c cc 0c ff 3f ff 3f cc 0c     ....x......?.?..
     10c:	cc 0f 88 07 00 00 00 00 00 00 00 30 38 38 38 1c     ...........0888.
     11c:	38 0e 00 07 80 03 c0 01 e0 38 70 38 38 38 1c 00     8........8p888..
     12c:	00 00 00 00 00 1f b8 3f fc 31 c6 21 e2 37 3e 1e     .......?.1.!.7>.
     13c:	1c 1c 00 36 00 22 00 00 00 00 00 00 00 00 00 00     ...6."..........
     14c:	27 00 3f 00 1f 00 00 00 00 00 00 00 00 00 00 00     '.?.............
     15c:	00 00 00 00 00 00 f0 03 fc 0f fe 1f 07 38 01 20     .............8. 
     16c:	01 20 00 00 00 00 00 00 00 00 00 00 00 00 01 20     . ............. 
     17c:	01 20 07 38 fe 1f fc 0f f0 03 00 00 00 00 00 00     . .8............
     18c:	00 00 00 00 98 0c b8 0e e0 03 f8 0f f8 0f e0 03     ................
     19c:	b8 0e 98 0c 00 00 00 00 00 00 00 00 80 01 80 01     ................
     1ac:	80 01 f0 0f f0 0f 80 01 80 01 80 01 00 00 00 00     ................
	...
     1c4:	00 b8 00 f8 00 78 00 00 00 00 00 00 00 00 00 00     .....x..........
     1d4:	00 00 00 00 80 01 80 01 80 01 80 01 80 01 80 01     ................
     1e4:	80 01 80 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1f4:	00 38 00 38 00 38 00 00 00 00 00 00 00 00 00 00     .8.8.8..........
     204:	00 00 00 18 00 1c 00 0e 00 07 80 03 c0 01 e0 00     ................
     214:	70 00 38 00 1c 00 0e 00 00 00 f8 07 fe 1f 06 1e     p.8.............
     224:	03 33 83 31 c3 30 63 30 33 30 1e 18 fe 1f f8 07     .3.1.0c030......
     234:	00 00 00 00 00 00 0c 30 0c 30 0e 30 ff 3f ff 3f     .......0.0.0.?.?
     244:	00 30 00 30 00 30 00 00 00 00 1c 30 1e 38 07 3c     .0.0.0.....0.8.<
     254:	03 3e 03 37 83 33 c3 31 e3 30 77 30 3e 30 1c 30     .>.7.3.1.0w0>0.0
     264:	00 00 0c 0c 0e 1c 07 38 c3 30 c3 30 c3 30 c3 30     .......8.0.0.0.0
     274:	c3 30 e7 39 7e 1f 3c 0e 00 00 c0 03 e0 03 70 03     .0.9~.<.......p.
     284:	38 03 1c 03 0e 03 07 03 ff 3f ff 3f 00 03 00 03     8........?.?....
     294:	00 00 3f 0c 7f 1c 63 38 63 30 63 30 63 30 63 30     ..?...c8c0c0c0c0
     2a4:	63 30 e3 38 c3 1f 83 0f 00 00 c0 0f f0 1f f8 39     c0.8...........9
     2b4:	dc 30 ce 30 c7 30 c3 30 c3 30 c3 39 80 1f 00 0f     .0.0.0.0.0.9....
     2c4:	00 00 03 00 03 00 03 00 03 30 03 3c 03 0f c3 03     .........0.<....
     2d4:	f3 00 3f 00 0f 00 03 00 00 00 00 0f bc 1f fe 39     ..?............9
     2e4:	e7 30 c3 30 c3 30 c3 30 e7 30 fe 39 bc 1f 00 0f     .0.0.0.0.0.9....
     2f4:	00 00 3c 00 7e 00 e7 30 c3 30 c3 30 c3 38 c3 1c     ..<.~..0.0.0.8..
     304:	c3 0e e7 07 fe 03 fc 00 00 00 00 00 00 00 00 00     ................
     314:	70 1c 70 1c 70 1c 00 00 00 00 00 00 00 00 00 00     p.p.p...........
	...
     32c:	70 9c 70 fc 70 7c 00 00 00 00 00 00 00 00 00 00     p.p.p|..........
     33c:	00 00 00 00 c0 00 e0 01 f0 03 38 07 1c 0e 0e 1c     ..........8.....
     34c:	07 38 03 30 00 00 00 00 00 00 00 00 60 06 60 06     .8.0........`.`.
     35c:	60 06 60 06 60 06 60 06 60 06 60 06 60 06 00 00     `.`.`.`.`.`.`...
     36c:	00 00 00 00 03 30 07 38 0e 1c 1c 0e 38 07 f0 03     .....0.8....8...
     37c:	e0 01 c0 00 00 00 00 00 00 00 1c 00 1e 00 07 00     ................
     38c:	03 00 83 37 c3 37 e3 00 77 00 3e 00 1c 00 00 00     ...7.7..w.>.....
     39c:	00 00 f8 0f fe 1f 07 18 f3 33 fb 37 1b 36 fb 37     .........3.7.6.7
     3ac:	fb 37 07 36 fe 03 f8 01 00 00 00 38 00 3f e0 07     .7.6.......8.?..
     3bc:	fc 06 1f 06 1f 06 fc 06 e0 07 00 3f 00 38 00 00     ...........?.8..
     3cc:	00 00 ff 3f ff 3f c3 30 c3 30 c3 30 c3 30 e7 30     ...?.?.0.0.0.0.0
     3dc:	fe 39 bc 1f 00 0f 00 00 00 00 f0 03 fc 0f 0e 1c     .9..............
     3ec:	07 38 03 30 03 30 03 30 07 38 0e 1c 0c 0c 00 00     .8.0.0.0.8......
     3fc:	00 00 ff 3f ff 3f 03 30 03 30 03 30 03 30 07 38     ...?.?.0.0.0.0.8
     40c:	0e 1c fc 0f f0 03 00 00 00 00 ff 3f ff 3f c3 30     ...........?.?.0
     41c:	c3 30 c3 30 c3 30 c3 30 c3 30 03 30 03 30 00 00     .0.0.0.0.0.0.0..
     42c:	00 00 ff 3f ff 3f c3 00 c3 00 c3 00 c3 00 c3 00     ...?.?..........
     43c:	c3 00 03 00 03 00 00 00 00 00 f0 03 fc 0f 0e 1c     ................
     44c:	07 38 03 30 c3 30 c3 30 c3 30 c7 3f c6 3f 00 00     .8.0.0.0.0.?.?..
     45c:	00 00 ff 3f ff 3f c0 00 c0 00 c0 00 c0 00 c0 00     ...?.?..........
     46c:	c0 00 ff 3f ff 3f 00 00 00 00 00 00 00 00 03 30     ...?.?.........0
     47c:	03 30 ff 3f ff 3f 03 30 03 30 00 00 00 00 00 00     .0.?.?.0.0......
     48c:	00 00 00 0e 00 1e 00 38 00 30 00 30 00 30 00 30     .......8.0.0.0.0
     49c:	00 38 ff 1f ff 07 00 00 00 00 ff 3f ff 3f c0 00     .8.........?.?..
     4ac:	e0 01 f0 03 38 07 1c 0e 0e 1c 07 38 03 30 00 00     ....8......8.0..
     4bc:	00 00 ff 3f ff 3f 00 30 00 30 00 30 00 30 00 30     ...?.?.0.0.0.0.0
     4cc:	00 30 00 30 00 30 00 00 00 00 ff 3f ff 3f 1e 00     .0.0.0.....?.?..
     4dc:	78 00 e0 01 e0 01 78 00 1e 00 ff 3f ff 3f 00 00     x.....x....?.?..
     4ec:	00 00 ff 3f ff 3f 0e 00 38 00 f0 00 c0 03 00 07     ...?.?..8.......
     4fc:	00 1c ff 3f ff 3f 00 00 00 00 f0 03 fc 0f 0e 1c     ...?.?..........
     50c:	07 38 03 30 03 30 07 38 0e 1c fc 0f f0 03 00 00     .8.0.0.8........
     51c:	00 00 ff 3f ff 3f 83 01 83 01 83 01 83 01 83 01     ...?.?..........
     52c:	c7 01 fe 00 7c 00 00 00 00 00 f0 03 fc 0f 0e 1c     ....|...........
     53c:	07 38 03 30 03 36 07 3e 0e 1c fc 3f f0 33 00 00     .8.0.6.>...?.3..
     54c:	00 00 ff 3f ff 3f 83 01 83 01 83 03 83 07 83 0f     ...?.?..........
     55c:	c7 1d fe 38 7c 30 00 00 00 00 3c 0c 7e 1c e7 38     ...8|0....<.~..8
     56c:	c3 30 c3 30 c3 30 c3 30 c7 39 8e 1f 0c 0f 00 00     .0.0.0.0.9......
     57c:	00 00 00 00 03 00 03 00 03 00 ff 3f ff 3f 03 00     ...........?.?..
     58c:	03 00 03 00 00 00 00 00 00 00 ff 07 ff 1f 00 38     ...............8
     59c:	00 30 00 30 00 30 00 30 00 38 ff 1f ff 07 00 00     .0.0.0.0.8......
     5ac:	00 00 07 00 3f 00 f8 01 c0 0f 00 3e 00 3e c0 0f     ....?......>.>..
     5bc:	f8 01 3f 00 07 00 00 00 00 00 ff 3f ff 3f 00 1c     ..?........?.?..
     5cc:	00 06 80 03 80 03 00 06 00 1c ff 3f ff 3f 00 00     ...........?.?..
     5dc:	00 00 03 30 0f 3c 1c 0e 30 03 e0 01 e0 01 30 03     ...0.<..0.....0.
     5ec:	1c 0e 0f 3c 03 30 00 00 00 00 03 00 0f 00 3c 00     ...<.0........<.
     5fc:	f0 00 c0 3f c0 3f f0 00 3c 00 0f 00 03 00 00 00     ...?.?..<.......
     60c:	00 00 03 30 03 3c 03 3e 03 33 c3 31 e3 30 33 30     ...0.<.>.3.1.030
     61c:	1f 30 0f 30 03 30 00 00 00 00 00 00 00 00 ff 3f     .0.0.0.........?
     62c:	ff 3f 03 30 03 30 03 30 03 30 00 00 00 00 00 00     .?.0.0.0.0......
     63c:	00 00 0e 00 1c 00 38 00 70 00 e0 00 c0 01 80 03     ......8.p.......
     64c:	00 07 00 0e 00 1c 00 18 00 00 00 00 00 00 03 30     ...............0
     65c:	03 30 03 30 03 30 ff 3f ff 3f 00 00 00 00 00 00     .0.0.0.?.?......
     66c:	00 00 60 00 70 00 38 00 1c 00 0e 00 07 00 0e 00     ..`.p.8.........
     67c:	1c 00 38 00 70 00 60 00 00 00 00 c0 00 c0 00 c0     ..8.p.`.........
     68c:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0     ................

0000069c <font4x6>:
     69c:	04 06 35 15                                         ..5.

000006a0 <_font4x6map>:
     6a0:	00 00 00 00 00 00 17 00 00 03 00 03 00 1f 0a 1f     ................
     6b0:	00 14 3f 0a 00 09 04 12 00 1a 15 1e 00 03 01 00     ..?.............
     6c0:	00 0e 11 00 00 11 0e 00 00 15 0e 15 00 04 0e 04     ................
     6d0:	00 30 10 00 00 04 04 04 00 00 10 00 00 18 04 03     .0..............
     6e0:	00 1e 11 0f 00 12 1f 10 00 19 15 12 00 11 15 0a     ................
     6f0:	00 06 04 1f 00 17 15 09 00 0e 15 08 00 01 1d 07     ................
     700:	00 0a 15 0a 00 02 15 0e 00 00 14 00 00 30 14 00     .............0..
     710:	00 04 0a 11 00 14 14 14 00 11 0a 04 00 01 15 02     ................
     720:	00 1f 11 17 00 1e 05 1e 00 1f 15 0a 00 0e 11 11     ................
     730:	00 1f 11 0e 00 1f 15 11 00 1f 05 01 00 0e 11 1d     ................
     740:	00 1f 04 1f 00 11 1f 11 00 08 10 0f 00 1f 04 1b     ................
     750:	00 1f 10 10 00 1f 06 1f 00 1f 02 1f 00 0e 11 0e     ................
     760:	00 1f 05 02 00 0e 19 1e 00 1f 05 1a 00 16 15 0d     ................
     770:	00 01 1f 01 00 1f 10 1f 00 0f 10 0f 00 1f 0c 1f     ................
     780:	00 1b 04 1b 00 03 1c 03 00 19 15 13 00 1f 11 00     ................
     790:	00 03 04 18 00 11 1f 00 00 02 01 02 20 20 20 20     ............    

000007a0 <font6x8>:
     7a0:	06 08 3c 15                                         ..<.

000007a4 <_font6x8map>:
	...
     7ac:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     7bc:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     7cc:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     7dc:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     7ec:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     7fc:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     80c:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     81c:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     82c:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     83c:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     84c:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     85c:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     86c:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     87c:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     88c:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     89c:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     8ac:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     8bc:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     8cc:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     8dc:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     8ec:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     8fc:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     90c:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     91c:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     92c:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     93c:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     94c:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     95c:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     96c:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     97c:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     98c:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     99c:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     9ac:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     9bc:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     9cc:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     9dc:	01 00 00 3c 26 23 26 3c                             ...<&#&<

000009e4 <glyFC>:
     9e4:	05 05 1f 11 11 11 1f                                .......

000009eb <glyDirCCW>:
     9eb:	05 03 02 07 02 02 02                                .......

000009f2 <glyDirCW>:
     9f2:	09 03 00 00 00 00 02 02 02 07 02                    ...........

000009fd <glyBall>:
     9fd:	09 09 38 00 fe 00 fe 00 ff 01 ff 01 ff 01 fe 00     ..8.............
     a0d:	fe 00 38 00                                         ..8.

00000a11 <glyArrowDown>:
     a11:	08 08 06 0e 1e 3e 3e 1e 0e 06                       .....>>...

00000a1b <glyArrowUp>:
     a1b:	08 08 30 38 3c 3e 3e 3c 38 30                       ..08<>><80

00000a25 <defaultConfig>:
     a25:	60 f0 05 f0 05 f0 05 4c 04 f0 05 f0 05 f0 05 f0     `......L........
     a35:	05 01 02 04 03 05 06 07 08 18 02 24 02 35 02 63     ...........$.5.c
     a45:	02 6c 02 fe 02 00 32 64 19 14 32 64 19 14 32 14     .l....2d..2d..2.
     a55:	32 0a 02 00 01 01 01 00 1e 1e 32 5a 0a 20 00 1e     2.........2Z. ..
     a65:	00 32 64 14 00 00 00 00 00 00 00 00 00 00 00 00     .2d.............
	...
     a9d:	00 32 00 32                                         .2.2

00000aa1 <convtab>:
     aa1:	00 01 02 03 04 05 05 06 07 08 09 0a 0b 0c 0d 0e     ................
     ab1:	0f 10 11 12 13 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
     ac1:	1f 20 21 22 23 24 25 26 27 29 2a 2b 2c 2e 2f 30     . !"#$%&')*+,./0
     ad1:	32 33 35 36 38 39 3b 3d 3f 41 43 45 48 4c 50 5a     235689;=?ACEHLPZ

00000ae1 <__c.2197>:
     ae1:	43 61 6c 69 62 72 61 74 69 6e 67 20 45 53 43 73     Calibrating ESCs
	...

00000af2 <__c.2214>:
     af2:	4b 4b 32 2d 43 6f 70 74 65 72 00                    KK2-Copter.

00000afd <versionAuthor>:
     afd:	62 79 20 4f 6c 69 76 65 72 20 53 63 68 75 6c 7a     by Oliver Schulz
	...

00000b0e <versionNum>:
     b0e:	56 65 72 73 69 6f 6e 20 30 2e 32 62 00              Version 0.2b.

00000b1b <modelTable>:
     b1b:	50 0e 2f 0e 14 0e f9 0d d2 0d b7 0d 9c 0d 69 0d     P./...........i.
     b2b:	36 0d 0f 0d e8 0c b5 0c 82 0c 5b 0c 28 0c 01 0c     6.........[.(...
     b3b:	ce 0b b3 0b 92 0b 7d 0b 62 0b 47 0b                 ......}.b.G.

00000b47 <model22>:
     b47:	6b 0e 04 64 b9 47 00 00 01 64 47 47 00 00 01 78     k..d.G...dGG...x
     b57:	00 a6 64 00 01 78 00 a6 9c 00 01                    ..d..x.....

00000b62 <model21>:
     b62:	72 0e 04 64 b9 47 64 00 01 64 47 47 9c 00 01 64     r..d.Gd..dGG...d
     b72:	00 9c 64 00 01 64 00 9c 9c 00 01                    ..d..d.....

00000b7d <model20>:
     b7d:	75 0e 03 64 00 00 00 00 01 00 32 32 00 00 02 00     u..d......22....
     b8d:	32 ce 00 00 02                                      2....

00000b92 <model19>:
     b92:	81 0e 05 64 00 00 00 00 01 00 64 00 00 00 02 00     ...d......d.....
     ba2:	64 00 00 00 02 00 00 64 00 00 02 00 00 00 64 00     d......d......d.
     bb2:	02                                                  .

00000bb3 <model18>:
     bb3:	91 0e 04 64 00 00 00 00 01 00 64 00 00 00 02 00     ...d......d.....
     bc3:	00 64 00 00 02 00 00 00 64 00 02                    .d......d..

00000bce <model17>:
     bce:	a1 0e 08 64 64 47 64 00 01 64 51 18 9c 00 01 64     ...ddGd..dQ....d
     bde:	3d e8 64 00 01 64 2a b9 9c 00 01 64 d6 b9 64 00     =.d..d*....d..d.
     bee:	01 64 c3 e8 9c 00 01 64 af 18 64 00 01 64 9c 47     .d.....d..d..d.G
     bfe:	9c 00 01                                            ...

00000c01 <model16>:
     c01:	a4 0e 06 64 64 47 64 00 01 64 47 00 9c 00 01 64     ...ddGd..dG....d
     c11:	2a b9 64 00 01 64 d6 b9 9c 00 01 64 b9 00 64 00     *.d..d.....d..d.
     c21:	01 64 9c 47 9c 00 01                                .d.G...

00000c28 <model15>:
     c28:	a7 0e 08 64 47 47 64 00 01 64 47 18 9c 00 01 64     ...dGGd..dG....d
     c38:	47 e8 64 00 01 64 47 b9 9c 00 01 64 b9 b9 64 00     G.d..dG....d..d.
     c48:	01 64 b9 e8 9c 00 01 64 b9 18 64 00 01 64 b9 47     .d.....d..d..d.G
     c58:	9c 00 01                                            ...

00000c5b <model14>:
     c5b:	aa 0e 06 64 47 47 64 00 01 64 47 00 9c 00 01 64     ...dGGd..dG....d
     c6b:	47 b9 64 00 01 64 b9 b9 9c 00 01 64 b9 00 64 00     G.d..d.....d..d.
     c7b:	01 64 b9 47 9c 00 01                                .d.G...

00000c82 <model13>:
     c82:	ad 0e 08 64 26 5c 64 00 01 64 5c 26 9c 00 01 64     ...d&\d..d\&...d
     c92:	5c da 64 00 01 64 26 a4 9c 00 01 64 da a4 64 00     \.d..d&....d..d.
     ca2:	01 64 a4 da 9c 00 01 64 a4 26 64 00 01 64 da 5c     .d.....d.&d..d.\
     cb2:	9c 00 01                                            ...

00000cb5 <model12>:
     cb5:	ba 0e 08 64 00 64 64 00 01 64 47 47 9c 00 01 64     ...d.dd..dGG...d
     cc5:	64 00 64 00 01 64 47 b9 9c 00 01 64 00 9c 64 00     d.d..dG....d..d.
     cd5:	01 64 b9 b9 9c 00 01 64 9c 00 64 00 01 64 b9 47     .d.....d..d..d.G
     ce5:	9c 00 01                                            ...

00000ce8 <model11>:
     ce8:	c7 0e 06 64 32 57 64 00 01 64 64 00 9c 00 01 64     ...d2Wd..dd....d
     cf8:	32 a9 64 00 01 64 ce a9 9c 00 01 64 9c 00 64 00     2.d..d.....d..d.
     d08:	01 64 ce 57 9c 00 01                                .d.W...

00000d0f <model10>:
     d0f:	d4 0e 06 64 00 64 64 00 01 64 57 32 9c 00 01 64     ...d.dd..dW2...d
     d1f:	57 ce 64 00 01 64 00 9c 9c 00 01 64 a9 ce 64 00     W.d..d.....d..d.
     d2f:	01 64 a9 32 9c 00 01                                .d.2...

00000d36 <model09>:
     d36:	e1 0e 08 64 b9 47 64 00 01 64 b9 47 9c 00 01 64     ...d.Gd..d.G...d
     d46:	47 47 64 00 01 64 47 47 9c 00 01 64 47 b9 64 00     GGd..dGG...dG.d.
     d56:	01 64 47 b9 9c 00 01 64 b9 b9 64 00 01 64 b9 b9     .dG....d..d..d..
     d66:	9c 00 01                                            ...

00000d69 <model08>:
     d69:	e6 0e 08 64 00 64 64 00 01 64 00 64 9c 00 01 64     ...d.dd..d.d...d
     d79:	64 00 64 00 01 64 64 00 9c 00 01 64 00 9c 64 00     d.d..dd....d..d.
     d89:	01 64 00 9c 9c 00 01 64 9c 00 64 00 01 64 9c 00     .d.....d..d..d..
     d99:	9c 00 01                                            ...

00000d9c <model07>:
     d9c:	eb 0e 04 64 b9 47 64 00 01 64 47 47 9c 00 01 64     ...d.Gd..dGG...d
     dac:	47 b9 64 00 01 64 b9 b9 9c 00 01                    G.d..d.....

00000db7 <model06>:
     db7:	fa 0e 04 64 00 64 64 00 01 64 64 00 9c 00 01 64     ...d.dd..dd....d
     dc7:	00 9c 64 00 01 64 9c 00 9c 00 01                    ..d..d.....

00000dd2 <model05>:
     dd2:	09 0f 06 64 a9 32 64 00 01 64 a9 32 9c 00 01 64     ...d.2d..d.2...d
     de2:	57 32 64 00 01 64 57 32 9c 00 01 64 00 9c 64 00     W2d..dW2...d..d.
     df2:	01 64 00 9c 9c 00 01                                .d.....

00000df9 <model04>:
     df9:	0c 0f 04 64 a9 32 00 00 01 64 57 32 00 00 01 64     ...d.2...dW2...d
     e09:	00 9c 00 00 01 00 00 00 64 00 02                    ........d..

00000e14 <model03>:
     e14:	16 0f 04 64 64 00 00 00 01 64 9c 00 00 00 01 00     ...dd....d......
     e24:	00 64 64 00 02 00 00 9c 64 00 02                    .dd.....d..

00000e2f <model02>:
     e2f:	21 0f 05 64 00 00 00 00 01 00 64 00 64 00 02 00     !..d......d.d...
     e3f:	00 64 64 00 02 00 9c 00 64 00 02 00 00 9c 64 00     .dd.....d.....d.
     e4f:	02                                                  .

00000e50 <model01>:
     e50:	34 0f 04 64 00 00 64 00 01 64 00 00 9c 00 01 00     4..d..d..d......
     e60:	64 00 00 00 02 00 00 64 00 00 02                    d......d...

00000e6b <strModel22>:
     e6b:	56 2d 54 61 69 6c 00                                V-Tail.

00000e72 <strModel21>:
     e72:	59 34 00                                            Y4.

00000e75 <strModel20>:
     e75:	46 6c 79 69 6e 67 20 57 69 6e 67 00                 Flying Wing.

00000e81 <strModel19>:
     e81:	41 69 72 70 6c 61 6e 65 20 32 53 20 41 69 6c 00     Airplane 2S Ail.

00000e91 <strModel18>:
     e91:	41 69 72 70 6c 61 6e 65 20 31 53 20 41 69 6c 00     Airplane 1S Ail.

00000ea1 <strModel17>:
     ea1:	56 38 00                                            V8.

00000ea4 <strModel16>:
     ea4:	56 36 00                                            V6.

00000ea7 <strModel15>:
     ea7:	48 38 00                                            H8.

00000eaa <strModel14>:
     eaa:	48 36 00                                            H6.

00000ead <strModel13>:
     ead:	4f 63 74 6f 43 6f 70 74 65 72 20 78 00              OctoCopter x.

00000eba <strModel12>:
     eba:	4f 63 74 6f 43 6f 70 74 65 72 20 2b 00              OctoCopter +.

00000ec7 <strModel11>:
     ec7:	48 65 78 61 43 6f 70 74 65 72 20 78 00              HexaCopter x.

00000ed4 <strModel10>:
     ed4:	48 65 78 61 43 6f 70 74 65 72 20 2b 00              HexaCopter +.

00000ee1 <strModel09>:
     ee1:	58 38 20 78 00                                      X8 x.

00000ee6 <strModel08>:
     ee6:	58 38 20 2b 00                                      X8 +.

00000eeb <strModel07>:
     eeb:	51 75 61 64 72 6f 43 6f 70 74 65 72 20 78 00        QuadroCopter x.

00000efa <strModel06>:
     efa:	51 75 61 64 72 6f 43 6f 70 74 65 72 20 2b 00        QuadroCopter +.

00000f09 <strModel05>:
     f09:	59 36 00                                            Y6.

00000f0c <strModel04>:
     f0c:	54 72 69 43 6f 70 74 65 72 00                       TriCopter.

00000f16 <strModel03>:
     f16:	44 75 61 6c 43 6f 70 74 65 72 00                    DualCopter.

00000f21 <strModel02>:
     f21:	53 69 6e 67 6c 65 43 6f 70 74 65 72 20 31 4d 20     SingleCopter 1M 
     f31:	34 53 00                                            4S.

00000f34 <strModel01>:
     f34:	53 69 6e 67 6c 65 43 6f 70 74 65 72 20 32 4d 20     SingleCopter 2M 
     f44:	32 53 00                                            2S.

00000f47 <__c.2393>:
     f47:	52 65 61 64 79 20 66 6f 72 20 64 65 70 61 72 74     Ready for depart
     f57:	75 72 65 21 00                                      ure!.

00000f5c <__c.2391>:
     f5c:	20 69 6e 70 75 74 00                                 input.

00000f63 <__c.2389>:
     f63:	52 58 00                                            RX.

00000f66 <__c.2386>:
     f66:	6e 6f 20 00                                         no .

00000f6a <info.2403>:
     f6a:	ef 18 e9 18 de 18 e4 18 e9 18 ef 18 d9 18 d4 18     ................
     f7a:	cd 18 d1 18 cd 18 d1 18                             ........

00000f82 <elements.2459>:
     f82:	02 4e 93 06 00 00 c8 00 05 03 4e 94 06 00 00 c8     .N........N.....
     f92:	00 05 04 4e 95 06 00 00 c8 00 05 05 4e 96 06 00     ...N........N...
     fa2:	00 c8 00 05                                         ....

00000fa6 <elements.2462>:
     fa6:	00 66 97 06 00 00 14 00 04 01 66 99 06 00 00 fa     .f........f.....
     fb6:	00 04 02 66 9a 06 00 00 1e 00 04 03 66 9b 06 00     ...f........f...
     fc6:	00 fa 00 04 04 66 9c 06 00 00 64 00 04              .....f....d..

00000fd3 <elements.2465>:
     fd3:	00 36 9d 06 00 00 fa 00 05 01 36 9e 06 00 00 fa     .6........6.....
     fe3:	00 05 03 60 a1 06 d3 ff 2d 00 05 04 60 a2 06 d3     ...`....-...`...
     ff3:	ff 2d 00 05                                         .-..

00000ff7 <elements.2468>:
     ff7:	02 54 d3 06 80 ff 7f 00 05 03 54 d4 06 80 ff 7f     .T........T.....
    1007:	00 05 04 54 d5 06 80 ff 7f 00 05 05 54 d6 06 80     ...T........T...
    1017:	ff 7f 00 05                                         ....

0000101b <lstMenu>:
    101b:	40 1a 32 1a 24 1a 16 1a 07 1a f3 19 de 19 d2 19     @.2.$...........
    102b:	bf 19 a1 19 b1 19 91 19 84 19 72 19 60 19 4c 19     ..........r.`.L.
    103b:	5a 19                                               Z.

0000103d <pages>:
    103d:	34 11 bd 22 00 00 1e 11 4f 1d 00 00 d7 10 42 22     4.."....O.....B"
    104d:	e3 17 19 11 7b 1f b2 17 d7 10 3c 1e 3c 17 d7 10     ....{.....<.<...
    105d:	3d 22 ff 16 d7 10 38 22 aa 16 d7 10 33 22 79 16     ="....8"....3"y.
    106d:	d7 10 2e 22 33 16 19 11 4a 1f 7c 17 03 11 dc 1d     ..."3...J.|.....
    107d:	76 15 03 11 7a 1c 00 15 d7 10 62 21 00 00 03 11     v...z.....b!....
    108d:	9a 1d 00 00 d7 10 b5 20 7e 11 b6 10 5b 1d 00 00     ....... ~...[...
    109d:	1e 11 21 1d 00 00 ed 10 5a 1c 00 00 19 11 1a 1f     ..!.....Z.......
    10ad:	4a 11                                               J.

000010af <_skCANCEL>:
    10af:	43 41 4e 43 45 4c 00                                CANCEL.

000010b6 <_skBACKNEXT>:
    10b6:	42 41 43 4b 20 20 4e 45 58 54 00                    BACK  NEXT.

000010c1 <_skEDIT>:
    10c1:	43 4c 52 20 20 44 4f 57 4e 20 20 20 55 50 20 20     CLR  DOWN   UP  
    10d1:	20 44 4f 4e 45 00                                    DONE.

000010d7 <_skPAGE>:
    10d7:	42 41 43 4b 20 50 52 45 56 20 4e 45 58 54 20 43     BACK PREV NEXT C
    10e7:	48 41 4e 47 45 00                                   HANGE.

000010ed <_skCANCELYES>:
    10ed:	43 41 4e 43 45 4c 20 20 20 20 20 20 20 20 20 20     CANCEL          
    10fd:	20 20 59 45 53 00                                     YES.

00001103 <_skCONTINUE>:
    1103:	42 41 43 4b 20 20 20 20 20 20 20 20 20 43 4f 4e     BACK         CON
    1113:	54 49 4e 55 45 00                                   TINUE.

00001119 <_skBACK>:
    1119:	42 41 43 4b 00                                      BACK.

0000111e <_skMENU>:
    111e:	42 41 43 4b 20 20 55 50 20 20 20 44 4f 57 4e 20     BACK  UP   DOWN 
    112e:	45 4e 54 45 52 00                                   ENTER.

00001134 <_skSTART>:
    1134:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1144:	20 4d 45 4e 55 00                                    MENU.

0000114a <scrDebug>:
    114a:	4d 69 78 65 72 49 6e 64 65 78 3a 0a 43 68 61 6e     MixerIndex:.Chan
    115a:	6e 65 6c 30 3a 0a 43 68 61 6e 6e 65 6c 31 3a 0a     nel0:.Channel1:.
    116a:	43 68 61 6e 6e 65 6c 32 3a 0a 43 68 61 6e 6e 65     Channel2:.Channe
    117a:	6c 33 3a 00                                         l3:.

0000117e <scrMixerEditor>:
    117e:	54 68 72 6f 74 74 6c 65 3a 20 20 20 20 20 20 20     Throttle:       
    118e:	43 68 3a 0a 41 69 6c 65 72 6f 6e 3a 0a 45 6c 65     Ch:.Aileron:.Ele
    119e:	76 61 74 6f 72 3a 0a 52 75 64 64 65 72 3a 0a 4f     vator:.Rudder:.O
    11ae:	66 66 73 65 74 3a 0a 54 79 70 65 3a 20 20 20 20     ffset:.Type:    
    11be:	20 20 20 52 61 74 65 3a 00                             Rate:.

000011c7 <scrRadioCal2>:
    11c7:	43 61 6c 69 62 72 61 74 69 6f 6e 20 66 61 69 6c     Calibration fail
    11d7:	65 64 2e 0a 0a 4d 61 6b 65 20 73 75 72 65 20 74     ed...Make sure t
    11e7:	68 65 20 73 74 69 63 6b 73 0a 61 72 65 20 72 65     he sticks.are re
    11f7:	6c 65 61 73 65 64 20 61 6e 64 0a 74 68 72 6f 74     leased and.throt
    1207:	74 6c 65 20 69 73 20 69 64 6c 65 2e 00              tle is idle..

00001214 <scrRadioCal1>:
    1214:	0a 43 68 65 63 6b 20 74 68 65 20 63 6f 72 72 65     .Check the corre
    1224:	63 74 0a 73 69 67 6e 61 6c 73 20 66 72 6f 6d 0a     ct.signals from.
    1234:	72 65 63 65 69 76 65 72 2e 0a 4f 6e 65 20 6f 72     receiver..One or
    1244:	20 6d 6f 72 65 20 73 69 67 6e 61 6c 73 0a 61 72      more signals.ar
    1254:	65 20 6d 69 73 73 69 6e 67 2e 00                    e missing..

0000125f <scrRadioCal0>:
    125f:	52 65 6c 65 61 73 65 20 73 74 69 63 6b 73 20 6f     Release sticks o
    126f:	6e 20 74 68 65 0a 74 72 61 6e 73 6d 69 74 74 65     n the.transmitte
    127f:	72 20 61 6e 64 20 73 65 74 20 0a 74 68 72 6f 74     r and set .throt
    128f:	74 6c 65 20 74 6f 20 69 64 6c 65 2e 0a 0a 50 72     tle to idle...Pr
    129f:	65 73 73 20 43 4f 4e 54 49 4e 55 45 20 74 6f 0a     ess CONTINUE to.
    12af:	63 61 6c 69 62 72 61 74 65 2e 00                    calibrate..

000012ba <scrESCCal>:
    12ba:	00 15 75 14 fb 13 8c 13 13 13 c6 12                 ..u.........

000012c6 <scrESCCal5>:
    12c6:	20 20 27 4d 69 6e 69 6d 75 6d 20 74 68 72 6f 74       'Minimum throt
    12d6:	74 6c 65 27 0a 20 20 69 6e 20 74 68 65 20 27 4d     tle'.  in the 'M
    12e6:	69 73 63 2e 20 53 65 74 2d 0a 20 20 74 69 6e 67     isc. Set-.  ting
    12f6:	73 20 6d 65 6e 75 2e 0a 0a 20 20 59 6f 75 20 61     s menu...  You a
    1306:	72 65 20 6e 6f 77 20 64 6f 6e 65 21 00              re now done!.

00001313 <scrESCCal4>:
    1313:	20 20 63 61 6c 69 62 72 61 74 69 6f 6e 20 73 6f       calibration so
    1323:	75 6e 64 2e 0a 31 32 20 52 65 6c 65 61 73 65 20     und..12 Release 
    1333:	74 68 65 0a 20 20 62 75 74 74 6f 6e 73 2e 0a 31     the.  buttons..1
    1343:	33 20 43 68 65 63 6b 20 69 66 20 74 68 65 20 6d     3 Check if the m
    1353:	6f 74 2d 0a 20 20 6f 72 73 20 73 74 61 72 74 20     ot-.  ors start 
    1363:	61 74 20 74 68 65 0a 20 20 73 61 6d 65 20 74 69     at the.  same ti
    1373:	6d 65 2e 20 49 66 20 6e 6f 74 2c 0a 20 20 61 64     me. If not,.  ad
    1383:	6a 75 73 74 20 74 68 65 00                          just the.

0000138c <scrESCCal3>:
    138c:	39 20 57 61 69 74 20 66 6f 72 20 74 68 65 20 45     9 Wait for the E
    139c:	53 43 73 0a 20 20 66 75 6c 6c 2d 74 68 72 6f 74     SCs.  full-throt
    13ac:	74 6c 65 20 63 61 6c 69 2d 0a 20 20 62 72 61 74     tle cali-.  brat
    13bc:	69 6f 6e 20 73 6f 75 6e 64 2e 0a 31 30 20 53 65     ion sound..10 Se
    13cc:	74 20 74 68 65 20 74 68 72 6f 74 74 6c 65 0a 20     t the throttle. 
    13dc:	20 74 6f 20 69 64 6c 65 2e 0a 31 31 20 57 61 69      to idle..11 Wai
    13ec:	74 20 66 6f 72 20 74 68 65 20 69 64 6c 65 00        t for the idle.

000013fb <scrESCCal2>:
    13fb:	36 20 53 65 74 20 74 68 65 20 74 68 72 6f 74 74     6 Set the thrott
    140b:	6c 65 20 74 6f 0a 20 20 66 75 6c 6c 2e 0a 37 20     le to.  full..7 
    141b:	50 72 65 73 73 20 64 6f 77 6e 20 62 75 74 74 6f     Press down butto
    142b:	6e 73 0a 20 20 31 20 61 6e 64 20 34 20 61 6e 64     ns.  1 and 4 and
    143b:	20 6b 65 65 70 0a 20 20 74 68 65 6d 20 64 6f 77      keep.  them dow
    144b:	6e 20 75 6e 74 69 6c 20 74 68 65 0a 20 20 6c 61     n until the.  la
    145b:	73 74 20 73 74 65 70 2e 0a 38 20 54 75 72 6e 20     st step..8 Turn 
    146b:	6f 6e 20 70 6f 77 65 72 2e 00                       on power..

00001475 <scrESCCal1>:
    1475:	33 20 4d 65 6d 6f 72 69 7a 65 20 74 68 65 20 72     3 Memorize the r
    1485:	65 73 74 0a 20 20 6f 66 20 74 68 65 20 69 6e 73     est.  of the ins
    1495:	74 72 75 63 74 69 6f 6e 73 0a 20 20 62 65 63 61     tructions.  beca
    14a5:	75 73 65 20 74 68 65 20 6e 65 78 74 0a 20 20 73     use the next.  s
    14b5:	74 65 70 20 69 73 20 74 6f 20 74 75 72 6e 20 6f     tep is to turn o
    14c5:	66 66 0a 20 20 74 68 65 20 70 6f 77 65 72 2e 0a     ff.  the power..
    14d5:	34 20 54 75 72 6e 20 6f 66 66 20 74 68 65 20 70     4 Turn off the p
    14e5:	6f 77 65 72 2e 0a 35 20 54 75 72 6e 20 6f 6e 20     ower..5 Turn on 
    14f5:	74 68 65 20 72 61 64 69 6f 2e 00                    the radio..

00001500 <scrESCCal0>:
    1500:	31 20 54 41 4b 45 20 4f 46 46 20 54 48 45 0a 20     1 TAKE OFF THE. 
    1510:	20 50 52 4f 50 45 4c 4c 45 52 53 21 21 0a 32 20      PROPELLERS!!.2 
    1520:	43 68 65 63 6b 20 74 68 65 20 74 68 72 6f 74 74     Check the thrott
    1530:	6c 65 0a 20 20 64 69 72 65 63 74 69 6f 6e 20 69     le.  direction i
    1540:	6e 20 74 68 65 0a 20 20 72 65 63 65 69 76 65 72     n the.  receiver
    1550:	20 74 65 73 74 20 6d 65 6e 75 2e 0a 20 20 52 65      test menu..  Re
    1560:	76 65 72 73 65 20 69 66 0a 20 20 6e 65 63 65 73     verse if.  neces
    1570:	73 61 72 79 2e 00                                   sary..

00001576 <scrSensorCal0>:
    1576:	50 6c 61 63 65 20 74 68 65 20 61 69 72 63 72 61     Place the aircra
    1586:	66 74 20 6f 6e 0a 61 20 6c 65 76 65 6c 20 73 75     ft on.a level su
    1596:	72 66 61 63 65 20 61 6e 64 0a 70 72 65 73 73 20     rface and.press 
    15a6:	43 4f 4e 54 49 4e 55 45 2e 0a 54 68 65 20 46 43     CONTINUE..The FC
    15b6:	20 77 69 6c 6c 20 74 68 65 6e 20 77 61 69 74 0a      will then wait.
    15c6:	35 20 73 65 63 20 74 6f 20 6c 65 74 20 74 68 65     5 sec to let the
    15d6:	0a 61 69 72 63 72 61 66 74 20 73 65 74 74 6c 65     .aircraft settle
    15e6:	20 64 6f 77 6e 2e 00                                 down..

000015ed <scrCPPMSettings2>:
    15ed:	41 75 78 31 3a 0a 41 75 78 32 3a 0a 41 75 78 33     Aux1:.Aux2:.Aux3
    15fd:	3a 0a 41 75 78 34 3a 00                             :.Aux4:.

00001605 <scrCPPMSettings1>:
    1605:	52 6f 6c 6c 20 28 41 69 6c 29 3a 0a 50 69 74 63     Roll (Ail):.Pitc
    1615:	68 20 28 45 6c 65 29 3a 0a 59 61 77 20 28 52 75     h (Ele):.Yaw (Ru
    1625:	64 29 3a 0a 54 68 72 6f 74 74 6c 65 3a 00           d):.Throttle:.

00001633 <scrCameraStabSettings>:
    1633:	43 61 6d 65 72 61 20 53 74 61 62 20 53 65 74 75     Camera Stab Setu
    1643:	70 0a 0a 52 6f 6c 6c 20 67 61 69 6e 3a 0a 52 6f     p..Roll gain:.Ro
    1653:	6c 6c 20 6f 66 66 73 65 74 3a 0a 50 69 74 63 68     ll offset:.Pitch
    1663:	20 67 61 69 6e 3a 0a 50 69 74 63 68 20 6f 66 66      gain:.Pitch off
    1673:	73 65 74 3a 0a 00                                   set:..

00001679 <scrSelflevelSettings>:
    1679:	50 20 47 61 69 6e 3a 0a 50 20 4c 69 6d 69 74 3a     P Gain:.P Limit:
    1689:	0a 0a 41 63 63 20 54 72 69 6d 20 52 6f 6c 6c 3a     ..Acc Trim Roll:
    1699:	0a 41 63 63 20 54 72 69 6d 20 50 69 74 63 68 3a     .Acc Trim Pitch:
	...

000016aa <scrMiscSettings>:
    16aa:	4d 69 6e 69 6d 75 6d 20 74 68 72 6f 74 74 6c 65     Minimum throttle
    16ba:	3a 0a 48 65 69 67 68 74 20 44 61 6d 70 65 6e 69     :.Height Dampeni
    16ca:	6e 67 3a 0a 48 65 69 67 68 74 20 44 2e 20 4c 69     ng:.Height D. Li
    16da:	6d 69 74 3a 0a 41 6c 61 72 6d 20 31 2f 31 30 20     mit:.Alarm 1/10 
    16ea:	76 6f 6c 74 73 3a 0a 53 65 72 76 6f 20 66 69 6c     volts:.Servo fil
    16fa:	74 65 72 3a 00                                      ter:.

000016ff <scrStickScaling>:
    16ff:	53 74 69 63 6b 20 53 63 61 6c 69 6e 67 0a 0a 52     Stick Scaling..R
    170f:	6f 6c 6c 20 28 41 69 6c 29 3a 0a 50 69 74 63 68     oll (Ail):.Pitch
    171f:	20 28 45 6c 65 29 3a 0a 59 61 77 20 28 52 75 64      (Ele):.Yaw (Rud
    172f:	29 3a 0a 54 68 72 6f 74 74 6c 65 3a 00              ):.Throttle:.

0000173c <scrModeSettings>:
    173c:	53 65 6c 66 2d 4c 65 76 65 6c 3a 0a 41 72 6d 69     Self-Level:.Armi
    174c:	6e 67 3a 0a 4c 69 6e 6b 20 52 6f 6c 6c 20 50 69     ng:.Link Roll Pi
    175c:	74 63 68 3a 0a 41 75 74 6f 20 44 69 73 61 72 6d     tch:.Auto Disarm
    176c:	3a 0a 43 50 50 4d 20 45 6e 61 62 6c 65 64 3a 00     :.CPPM Enabled:.

0000177c <scrSensorTest>:
    177c:	47 79 72 6f 20 58 3a 0a 47 79 72 6f 20 59 3a 0a     Gyro X:.Gyro Y:.
    178c:	47 79 72 6f 20 5a 3a 0a 41 63 63 20 20 58 3a 0a     Gyro Z:.Acc  X:.
    179c:	41 63 63 20 20 59 3a 0a 41 63 63 20 20 5a 3a 0a     Acc  Y:.Acc  Z:.
    17ac:	42 61 74 74 3a 00                                   Batt:.

000017b2 <scrReceiverTest>:
    17b2:	41 69 6c 65 72 6f 6e 3a 0a 45 6c 65 76 61 74 6f     Aileron:.Elevato
    17c2:	72 3a 0a 52 75 64 64 65 72 3a 0a 54 68 72 6f 74     r:.Rudder:.Throt
    17d2:	74 6c 65 3a 0a 41 75 78 31 3a 0a 41 75 78 32 3a     tle:.Aux1:.Aux2:
	...

000017e3 <scrPIEditor>:
    17e3:	41 78 69 73 3a 0a 0a 50 20 47 61 69 6e 3a 0a 50     Axis:..P Gain:.P
    17f3:	20 4c 69 6d 69 74 3a 0a 49 20 47 61 69 6e 3a 0a      Limit:.I Gain:.
    1803:	49 20 4c 69 6d 69 74 3a 00                          I Limit:.

0000180c <scrStart>:
    180c:	53 65 6c 66 2d 6c 65 76 65 6c 20 69 73 0a 0a 42     Self-level is..B
    181c:	61 74 74 65 72 79 3a 0a 52 6f 6c 6c 20 61 6e 67     attery:.Roll ang
    182c:	6c 65 3a 0a 50 69 74 63 68 20 61 6e 67 6c 65 3a     le:.Pitch angle:
	...

0000183d <strSensorNotCal>:
    183d:	6e 6f 20 63 61 6c 69 62 72 61 74 69 6f 6e 00        no calibration.

0000184c <strUnused>:
    184c:	55 6e 75 73 65 64 2e 00                             Unused..

00001854 <strALL>:
    1854:	41 4c 4c 00                                         ALL.

00001858 <strCCW>:
    1858:	43 43 57 00                                         CCW.

0000185c <strCW>:
    185c:	43 57 00                                            CW.

0000185f <strDirSeen>:
    185f:	44 69 72 65 63 74 69 6f 6e 0a 73 65 65 6e 20 66     Direction.seen f
    186f:	72 6f 6d 0a 61 62 6f 76 65 3a 00                    rom.above:.

0000187a <strOutput>:
    187a:	4f 75 74 70 75 74 3a 00                             Output:.

00001882 <strAreYouSure>:
    1882:	41 72 65 20 79 6f 75 20 73 75 72 65 3f 00           Are you sure?.

00001890 <strCalSucc>:
    1890:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 75 63 63     Calibration succ
    18a0:	65 65 64 65 64 00                                   eeded.

000018a6 <strSec>:
    18a6:	73 65 63 00                                         sec.

000018aa <strWait>:
    18aa:	57 61 69 74 69 6e 67 00                             Waiting.

000018b2 <strThro>:
    18b2:	54 68 72 6f 00                                      Thro.

000018b7 <strYaw>:
    18b7:	59 61 77 00                                         Yaw.

000018bb <strPitch>:
    18bb:	50 69 74 63 68 00                                   Pitch.

000018c1 <strRoll>:
    18c1:	52 6f 6c 6c 00                                      Roll.

000018c6 <strError>:
    18c6:	45 72 72 6f 72 3a 00                                Error:.

000018cd <strOff>:
    18cd:	4f 66 66 00                                         Off.

000018d1 <strOn>:
    18d1:	4f 6e 00                                            On.

000018d4 <strFull>:
    18d4:	46 75 6c 6c 00                                      Full.

000018d9 <strIdle>:
    18d9:	49 64 6c 65 00                                      Idle.

000018de <strForward>:
    18de:	46 72 77 72 64 00                                   Frwrd.

000018e4 <strBack>:
    18e4:	42 61 63 6b 00                                      Back.

000018e9 <strRight>:
    18e9:	52 69 67 68 74 00                                   Right.

000018ef <strLeft>:
    18ef:	4c 65 66 74 00                                      Left.

000018f4 <strNoSignal>:
    18f4:	4e 6f 20 73 69 67 6e 61 6c 00                       No signal.

000018fe <strLow>:
    18fe:	4c 6f 00                                            Lo.

00001901 <strHigh>:
    1901:	48 69 00                                            Hi.

00001904 <strServo>:
    1904:	53 65 72 76 6f 00                                   Servo.

0000190a <strESC>:
    190a:	45 53 43 00                                         ESC.

0000190e <strNo>:
    190e:	4e 6f 00                                            No.

00001911 <strYes>:
    1911:	59 65 73 00                                         Yes.

00001915 <strAUX>:
    1915:	41 55 58 00                                         AUX.

00001919 <strStick>:
    1919:	53 74 69 63 6b 00                                   Stick.

0000191f <strYawRud>:
    191f:	59 61 77 20 28 52 75 64 64 65 72 29 00              Yaw (Rudder).

0000192c <strPitchEle>:
    192c:	50 69 74 63 68 20 28 45 6c 65 76 61 74 6f 72 29     Pitch (Elevator)
	...

0000193d <strRollAil>:
    193d:	52 6f 6c 6c 20 28 41 69 6c 65 72 6f 6e 29 00        Roll (Aileron).

0000194c <strFactoryReset>:
    194c:	46 61 63 74 6f 72 79 20 52 65 73 65 74 00           Factory Reset.

0000195a <strDebug>:
    195a:	44 65 62 75 67 00                                   Debug.

00001960 <strLoadMotorLayout>:
    1960:	4c 6f 61 64 20 4d 6f 64 65 6c 20 4c 61 79 6f 75     Load Model Layou
    1970:	74 00                                               t.

00001972 <strShowMotorLayout>:
    1972:	53 68 6f 77 20 4d 6f 64 65 6c 20 4c 61 79 6f 75     Show Model Layou
    1982:	74 00                                               t.

00001984 <strMixerEditor>:
    1984:	4d 69 78 65 72 20 45 64 69 74 6f 72 00              Mixer Editor.

00001991 <strRadioCalibration>:
    1991:	53 74 69 63 6b 20 43 65 6e 74 65 72 69 6e 67 00     Stick Centering.

000019a1 <strESCCalibration>:
    19a1:	45 53 43 20 43 61 6c 69 62 72 61 74 69 6f 6e 00     ESC Calibration.

000019b1 <strCPPMSettings>:
    19b1:	43 50 50 4d 20 53 65 74 74 69 6e 67 73 00           CPPM Settings.

000019bf <strSensorCalibration>:
    19bf:	53 65 6e 73 6f 72 20 43 61 6c 69 62 72 61 74 69     Sensor Calibrati
    19cf:	6f 6e 00                                            on.

000019d2 <strSensorTest>:
    19d2:	53 65 6e 73 6f 72 20 54 65 73 74 00                 Sensor Test.

000019de <strCameraStabSerrings>:
    19de:	43 61 6d 65 72 61 20 53 74 61 62 20 53 65 74 74     Camera Stab Sett
    19ee:	69 6e 67 73 00                                      ings.

000019f3 <strSelflevelSettings>:
    19f3:	53 65 6c 66 2d 6c 65 76 65 6c 20 53 65 74 74 69     Self-level Setti
    1a03:	6e 67 73 00                                         ngs.

00001a07 <strMiscSettings>:
    1a07:	4d 69 73 63 2e 20 53 65 74 74 69 6e 67 73 00        Misc. Settings.

00001a16 <strStickScaling>:
    1a16:	53 74 69 63 6b 20 53 63 61 6c 69 6e 67 00           Stick Scaling.

00001a24 <strModeSettings>:
    1a24:	4d 6f 64 65 20 53 65 74 74 69 6e 67 73 00           Mode Settings.

00001a32 <strReceiverTest>:
    1a32:	52 65 63 65 69 76 65 72 20 54 65 73 74 00           Receiver Test.

00001a40 <strPIEditor>:
    1a40:	50 49 20 45 64 69 74 6f 72 00                       PI Editor.

00001a4a <strON>:
    1a4a:	4f 4e 00                                            ON.

00001a4d <strOFF>:
    1a4d:	4f 46 46 00                                         OFF.

00001a51 <strARMED>:
    1a51:	41 52 4d 45 44 00                                   ARMED.

00001a57 <strSAFE>:
    1a57:	53 41 46 45 00                                      SAFE.

00001a5c <__vector_24>:

static uint16_t _adc[8];

__attribute__ ((section(".lowtext")))
ISR(ADC_vect, ISR_NOBLOCK)
{
    1a5c:	78 94       	sei
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
	static uint8_t _index;
	_adc[_index] = ADC;
    1a72:	20 91 0a 01 	lds	r18, 0x010A
    1a76:	80 91 78 00 	lds	r24, 0x0078
    1a7a:	90 91 79 00 	lds	r25, 0x0079
    1a7e:	e2 2f       	mov	r30, r18
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	e5 5f       	subi	r30, 0xF5	; 245
    1a88:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
	_index = (_index + 1) % 8U;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	82 0f       	add	r24, r18
    1a92:	87 70       	andi	r24, 0x07	; 7
    1a94:	80 93 0a 01 	sts	0x010A, r24
	ADMUX = _index;
    1a98:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);
    1a9c:	ea e7       	ldi	r30, 0x7A	; 122
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	80 83       	st	Z, r24
}
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_18>:
	sendCommand(CMD_SET_COLUMN_LOWER | (column & 0x0f));
}

__attribute__ ((section(".lowtext")))
ISR(TIMER0_OVF_vect, ISR_NOBLOCK)
{
    1aba:	78 94       	sei
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	0f 92       	push	r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
	static uint16_t offset;
	
	if (offset % LCDWIDTH == 0)
    1ae2:	c0 91 27 01 	lds	r28, 0x0127
    1ae6:	d0 91 28 01 	lds	r29, 0x0128
    1aea:	ce 01       	movw	r24, r28
    1aec:	8f 77       	andi	r24, 0x7F	; 127
    1aee:	99 27       	eor	r25, r25
    1af0:	89 2b       	or	r24, r25
    1af2:	81 f4       	brne	.+32     	; 0x1b14 <__vector_18+0x5a>
		setPos(offset / LCDWIDTH, 0);
    1af4:	ce 01       	movw	r24, r28
    1af6:	88 0f       	add	r24, r24
    1af8:	89 2f       	mov	r24, r25
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	91 95       	neg	r25
	LCD_CS = 1;
}

static void setPos(uint8_t line, uint8_t column)
{
	sendCommand(CMD_SET_PAGE | (line & 0x07));
    1b00:	87 70       	andi	r24, 0x07	; 7
    1b02:	80 6b       	ori	r24, 0xB0	; 176
    1b04:	0e 94 36 11 	call	0x226c	; 0x226c <sendCommand>
	sendCommand(CMD_SET_COLUMN_UPPER | (column / 16));
    1b08:	80 e1       	ldi	r24, 0x10	; 16
    1b0a:	0e 94 36 11 	call	0x226c	; 0x226c <sendCommand>
	sendCommand(CMD_SET_COLUMN_LOWER | (column & 0x0f));
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	0e 94 36 11 	call	0x226c	; 0x226c <sendCommand>
	static uint16_t offset;
	
	if (offset % LCDWIDTH == 0)
		setPos(offset / LCDWIDTH, 0);
		
	sendData(*(_screen + offset++));
    1b14:	fe 01       	movw	r30, r28
    1b16:	e1 5d       	subi	r30, 0xD1	; 209
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	80 81       	ld	r24, Z
	LCD_CS = 1;
}

static void sendData(uint8_t data)
{
	LCD_CS = 0;
    1b1c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_A0 = 1;
    1b1e:	5f 9a       	sbi	0x0b, 7	; 11
	sendByte(data);
    1b20:	0e 94 2a 11 	call	0x2254	; 0x2254 <sendByte>
	LCD_CS = 1;
    1b24:	5d 9a       	sbi	0x0b, 5	; 11
	static uint16_t offset;
	
	if (offset % LCDWIDTH == 0)
		setPos(offset / LCDWIDTH, 0);
		
	sendData(*(_screen + offset++));
    1b26:	21 96       	adiw	r28, 0x01	; 1
	offset %= sizeof(_screen);
    1b28:	d3 70       	andi	r29, 0x03	; 3
    1b2a:	d0 93 28 01 	sts	0x0128, r29
    1b2e:	c0 93 27 01 	sts	0x0127, r28
}
    1b32:	ff 91       	pop	r31
    1b34:	ef 91       	pop	r30
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <__vector_13>:
}

// for odd output numbers
__attribute__ ((section(".lowtext")))
ISR(TIMER1_COMPA_vect)
{
    1b58:	1f 92       	push	r1
    1b5a:	0f 92       	push	r0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	0f 92       	push	r0
    1b60:	11 24       	eor	r1, r1
    1b62:	2f 93       	push	r18
    1b64:	3f 93       	push	r19
    1b66:	4f 93       	push	r20
    1b68:	5f 93       	push	r21
    1b6a:	6f 93       	push	r22
    1b6c:	7f 93       	push	r23
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	af 93       	push	r26
    1b74:	bf 93       	push	r27
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31
	static uint8_t index;
	static uint8_t loActive;
	static uint16_t lastLoStart;
	
	OUT_PORT &= ~(_BV(OUT1_BIT) | _BV(OUT3_BIT) | _BV(OUT5_BIT) | _BV(OUT7_BIT));
    1b7a:	88 b1       	in	r24, 0x08	; 8
    1b7c:	89 79       	andi	r24, 0x99	; 153
    1b7e:	88 b9       	out	0x08, r24	; 8
	sei();
    1b80:	78 94       	sei
	
	if (index == 0)
    1b82:	80 91 37 05 	lds	r24, 0x0537
    1b86:	81 11       	cpse	r24, r1
    1b88:	15 c0       	rjmp	.+42     	; 0x1bb4 <__vector_13+0x5c>

#define USE_2_OC

static uint8_t checkLoRate(uint16_t* lastStart)
{
	uint16_t t = millis();
    1b8a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
	if (t - *lastStart >= LO_RATE_CYCLE)
    1b8e:	20 91 35 05 	lds	r18, 0x0535
    1b92:	30 91 36 05 	lds	r19, 0x0536
    1b96:	ac 01       	movw	r20, r24
    1b98:	42 1b       	sub	r20, r18
    1b9a:	53 0b       	sbc	r21, r19
    1b9c:	44 31       	cpi	r20, 0x14	; 20
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	30 f0       	brcs	.+12     	; 0x1bae <__vector_13+0x56>
	{
		*lastStart = t;
    1ba2:	90 93 36 05 	sts	0x0536, r25
    1ba6:	80 93 35 05 	sts	0x0535, r24
		return ON;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <__vector_13+0x58>
	}
	else
		return OFF;
    1bae:	80 e0       	ldi	r24, 0x00	; 0
	
	OUT_PORT &= ~(_BV(OUT1_BIT) | _BV(OUT3_BIT) | _BV(OUT5_BIT) | _BV(OUT7_BIT));
	sei();
	
	if (index == 0)
		loActive = checkLoRate(&lastLoStart);
    1bb0:	80 93 34 05 	sts	0x0534, r24

	OCR1A = doOutput(index * 2, loActive);
    1bb4:	80 91 37 05 	lds	r24, 0x0537
    1bb8:	60 91 34 05 	lds	r22, 0x0534
    1bbc:	88 0f       	add	r24, r24
    1bbe:	0e 94 48 13 	call	0x2690	; 0x2690 <doOutput>
    1bc2:	90 93 89 00 	sts	0x0089, r25
    1bc6:	80 93 88 00 	sts	0x0088, r24
	sei();
    1bca:	78 94       	sei
	index = (index + 1) % 4;
    1bcc:	80 91 37 05 	lds	r24, 0x0537
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	83 70       	andi	r24, 0x03	; 3
    1bd6:	99 27       	eor	r25, r25
    1bd8:	80 93 37 05 	sts	0x0537, r24
}
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <__vector_14>:

// for even output numbers
__attribute__ ((section(".lowtext")))
ISR(TIMER1_COMPB_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
	static uint8_t index;
	static uint8_t loActive;
	static uint16_t lastLoStart;
	
	OUT_PORT &= ~(_BV(OUT2_BIT) | _BV(OUT4_BIT) | _BV(OUT6_BIT) | _BV(OUT8_BIT));
    1c20:	88 b1       	in	r24, 0x08	; 8
    1c22:	86 76       	andi	r24, 0x66	; 102
    1c24:	88 b9       	out	0x08, r24	; 8
	sei();
    1c26:	78 94       	sei
	
	if (index == 0)
    1c28:	80 91 33 05 	lds	r24, 0x0533
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	15 c0       	rjmp	.+42     	; 0x1c5a <__vector_14+0x5c>

#define USE_2_OC

static uint8_t checkLoRate(uint16_t* lastStart)
{
	uint16_t t = millis();
    1c30:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
	if (t - *lastStart >= LO_RATE_CYCLE)
    1c34:	20 91 31 05 	lds	r18, 0x0531
    1c38:	30 91 32 05 	lds	r19, 0x0532
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	42 1b       	sub	r20, r18
    1c40:	53 0b       	sbc	r21, r19
    1c42:	44 31       	cpi	r20, 0x14	; 20
    1c44:	51 05       	cpc	r21, r1
    1c46:	30 f0       	brcs	.+12     	; 0x1c54 <__vector_14+0x56>
	{
		*lastStart = t;
    1c48:	90 93 32 05 	sts	0x0532, r25
    1c4c:	80 93 31 05 	sts	0x0531, r24
		return ON;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <__vector_14+0x58>
	}
	else
		return OFF;
    1c54:	80 e0       	ldi	r24, 0x00	; 0
	
	OUT_PORT &= ~(_BV(OUT2_BIT) | _BV(OUT4_BIT) | _BV(OUT6_BIT) | _BV(OUT8_BIT));
	sei();
	
	if (index == 0)
		loActive = checkLoRate(&lastLoStart);
    1c56:	80 93 30 05 	sts	0x0530, r24
	
	OCR1B = doOutput(index * 2 + 1, loActive);
    1c5a:	80 91 33 05 	lds	r24, 0x0533
    1c5e:	88 0f       	add	r24, r24
    1c60:	60 91 30 05 	lds	r22, 0x0530
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	0e 94 48 13 	call	0x2690	; 0x2690 <doOutput>
    1c6a:	90 93 8b 00 	sts	0x008B, r25
    1c6e:	80 93 8a 00 	sts	0x008A, r24
	sei();
    1c72:	78 94       	sei
	index = (index + 1) % 4;
    1c74:	80 91 33 05 	lds	r24, 0x0533
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	83 70       	andi	r24, 0x03	; 3
    1c7e:	99 27       	eor	r25, r25
    1c80:	80 93 33 05 	sts	0x0533, r24
}
    1c84:	ff 91       	pop	r31
    1c86:	ef 91       	pop	r30
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_2>:


// ISR for vector INT1. Handles PWM signal for AIL in PWM mode
__attribute__ ((section(".lowtext")))
ISR(INT1_vect)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
	static uint32_t _start;
	uint32_t t = ticks();
    1cc8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
	sei();
    1ccc:	78 94       	sei
	
	if (RX_AIL)
    1cce:	4b 9b       	sbis	0x09, 3	; 9
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <__vector_2+0x3e>
		_start = t;
    1cd2:	60 93 58 05 	sts	0x0558, r22
    1cd6:	70 93 59 05 	sts	0x0559, r23
    1cda:	80 93 5a 05 	sts	0x055A, r24
    1cde:	90 93 5b 05 	sts	0x055B, r25
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <__vector_2+0x5c>
	else
	{
		RX_isr[AIL] = t - _start;
    1ce4:	20 91 58 05 	lds	r18, 0x0558
    1ce8:	30 91 59 05 	lds	r19, 0x0559
    1cec:	62 1b       	sub	r22, r18
    1cee:	73 0b       	sbc	r23, r19
    1cf0:	70 93 5f 05 	sts	0x055F, r23
    1cf4:	60 93 5e 05 	sts	0x055E, r22
		_RX_good |= _BV(AIL);
    1cf8:	80 91 5c 05 	lds	r24, 0x055C
    1cfc:	81 60       	ori	r24, 0x01	; 1
    1cfe:	80 93 5c 05 	sts	0x055C, r24
	}			
}
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_1>:

// ISR for vector INT0. Handles PWM signal for ELE in PWM mode
__attribute__ ((section(".lowtext")))
ISR(INT0_vect)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
	static uint32_t _start;
	uint32_t t = ticks();
    1d46:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
	sei();
    1d4a:	78 94       	sei
	
	if (RX_ELE)
    1d4c:	4a 9b       	sbis	0x09, 2	; 9
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <__vector_1+0x3e>
	_start = t;
    1d50:	60 93 54 05 	sts	0x0554, r22
    1d54:	70 93 55 05 	sts	0x0555, r23
    1d58:	80 93 56 05 	sts	0x0556, r24
    1d5c:	90 93 57 05 	sts	0x0557, r25
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <__vector_1+0x5c>
	else
	{
		RX_isr[ELE] = t - _start;
    1d62:	20 91 54 05 	lds	r18, 0x0554
    1d66:	30 91 55 05 	lds	r19, 0x0555
    1d6a:	62 1b       	sub	r22, r18
    1d6c:	73 0b       	sbc	r23, r19
    1d6e:	70 93 61 05 	sts	0x0561, r23
    1d72:	60 93 60 05 	sts	0x0560, r22
		_RX_good |= _BV(ELE);
    1d76:	80 91 5c 05 	lds	r24, 0x055C
    1d7a:	82 60       	ori	r24, 0x02	; 2
    1d7c:	80 93 5c 05 	sts	0x055C, r24
	}
}
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0
    1d9e:	1f 90       	pop	r1
    1da0:	18 95       	reti

00001da2 <__vector_3>:

// ISR for vector INT2. Handles CPPM signal in CPPM mode, or PWM signal for RUD in PWM mode
__attribute__ ((section(".lowtext")))
ISR(INT2_vect)
{
    1da2:	1f 92       	push	r1
    1da4:	0f 92       	push	r0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	0f 92       	push	r0
    1daa:	11 24       	eor	r1, r1
    1dac:	cf 92       	push	r12
    1dae:	df 92       	push	r13
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
	static uint32_t _start;
	static uint8_t _index;
	static uint8_t _mask;

	uint32_t t = ticks();
    1dd0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
	sei();
    1dd4:	78 94       	sei
	
	if (_mode != RX_MODE_PWM)
    1dd6:	20 91 5d 05 	lds	r18, 0x055D
    1dda:	22 23       	and	r18, r18
    1ddc:	c1 f1       	breq	.+112    	; 0x1e4e <__vector_3+0xac>
	{
		if ((t - _start) > MICROTOTICKS(PPM_SYNC_LENGTH))
    1dde:	00 91 50 05 	lds	r16, 0x0550
    1de2:	10 91 51 05 	lds	r17, 0x0551
    1de6:	20 91 52 05 	lds	r18, 0x0552
    1dea:	30 91 53 05 	lds	r19, 0x0553
    1dee:	6b 01       	movw	r12, r22
    1df0:	7c 01       	movw	r14, r24
    1df2:	c0 1a       	sub	r12, r16
    1df4:	d1 0a       	sbc	r13, r17
    1df6:	e2 0a       	sbc	r14, r18
    1df8:	f3 0a       	sbc	r15, r19
    1dfa:	41 e6       	ldi	r20, 0x61	; 97
    1dfc:	c4 16       	cp	r12, r20
    1dfe:	4a ee       	ldi	r20, 0xEA	; 234
    1e00:	d4 06       	cpc	r13, r20
    1e02:	e1 04       	cpc	r14, r1
    1e04:	f1 04       	cpc	r15, r1
    1e06:	30 f0       	brcs	.+12     	; 0x1e14 <__vector_3+0x72>
		{
			_index = 0;
    1e08:	10 92 4f 05 	sts	0x054F, r1
			_mask = 1;
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	20 93 4e 05 	sts	0x054E, r18
    1e12:	1f c0       	rjmp	.+62     	; 0x1e52 <__vector_3+0xb0>
		}
		else if (_index >= 0 && _index < 8)
    1e14:	40 91 4f 05 	lds	r20, 0x054F
    1e18:	48 30       	cpi	r20, 0x08	; 8
    1e1a:	d8 f4       	brcc	.+54     	; 0x1e52 <__vector_3+0xb0>
		{
			RX_isr[_index] = t - _start;
    1e1c:	e4 2f       	mov	r30, r20
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e2 5a       	subi	r30, 0xA2	; 162
    1e26:	fa 4f       	sbci	r31, 0xFA	; 250
    1e28:	9b 01       	movw	r18, r22
    1e2a:	20 1b       	sub	r18, r16
    1e2c:	31 0b       	sbc	r19, r17
    1e2e:	31 83       	std	Z+1, r19	; 0x01
    1e30:	20 83       	st	Z, r18
			_index++;
    1e32:	4f 5f       	subi	r20, 0xFF	; 255
    1e34:	40 93 4f 05 	sts	0x054F, r20
			_RX_good |= _mask;
    1e38:	30 91 4e 05 	lds	r19, 0x054E
    1e3c:	20 91 5c 05 	lds	r18, 0x055C
    1e40:	23 2b       	or	r18, r19
    1e42:	20 93 5c 05 	sts	0x055C, r18
			_mask <<= 1;
    1e46:	33 0f       	add	r19, r19
    1e48:	30 93 4e 05 	sts	0x054E, r19
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <__vector_3+0xb0>
		}
		_start = t;
	}
	else
	{
		if (RX_RUD)
    1e4e:	1a 9b       	sbis	0x03, 2	; 3
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <__vector_3+0xc2>
			_start = t;
    1e52:	60 93 50 05 	sts	0x0550, r22
    1e56:	70 93 51 05 	sts	0x0551, r23
    1e5a:	80 93 52 05 	sts	0x0552, r24
    1e5e:	90 93 53 05 	sts	0x0553, r25
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <__vector_3+0xe0>
		else
		{
			RX_isr[RUD] = t - _start;
    1e64:	20 91 50 05 	lds	r18, 0x0550
    1e68:	30 91 51 05 	lds	r19, 0x0551
    1e6c:	62 1b       	sub	r22, r18
    1e6e:	73 0b       	sbc	r23, r19
    1e70:	70 93 63 05 	sts	0x0563, r23
    1e74:	60 93 62 05 	sts	0x0562, r22
			_RX_good |= _BV(RUD);
    1e78:	80 91 5c 05 	lds	r24, 0x055C
    1e7c:	84 60       	ori	r24, 0x04	; 4
    1e7e:	80 93 5c 05 	sts	0x055C, r24
		}
	}	
}
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti

00001eb0 <__vector_7>:

// ISR for vector PCI3. Handles PWM signal for THR in PWM mode
__attribute__ ((section(".lowtext")))
ISR(PCINT3_vect)
{
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	2f 93       	push	r18
    1ebc:	3f 93       	push	r19
    1ebe:	4f 93       	push	r20
    1ec0:	5f 93       	push	r21
    1ec2:	6f 93       	push	r22
    1ec4:	7f 93       	push	r23
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
	static uint16_t _start;
	uint16_t t = ticks();
    1ed2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
	sei();
    1ed6:	78 94       	sei
	
	if (RX_THR)
    1ed8:	48 9b       	sbis	0x09, 0	; 9
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <__vector_7+0x36>
		_start = t;
    1edc:	70 93 4d 05 	sts	0x054D, r23
    1ee0:	60 93 4c 05 	sts	0x054C, r22
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <__vector_7+0x54>
	else
	{
		RX_isr[THR] = t - _start;	
    1ee6:	20 91 4c 05 	lds	r18, 0x054C
    1eea:	30 91 4d 05 	lds	r19, 0x054D
    1eee:	62 1b       	sub	r22, r18
    1ef0:	73 0b       	sbc	r23, r19
    1ef2:	70 93 65 05 	sts	0x0565, r23
    1ef6:	60 93 64 05 	sts	0x0564, r22
		_RX_good |= _BV(THR);
    1efa:	80 91 5c 05 	lds	r24, 0x055C
    1efe:	88 60       	ori	r24, 0x08	; 8
    1f00:	80 93 5c 05 	sts	0x055C, r24
	}		
}
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <__vector_5>:

// ISR for vector PCI1. Handles PWM signal for AX1 in PWM mode
__attribute__ ((section(".lowtext")))
ISR(PCINT1_vect)
{
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
	static uint16_t _start;
	uint16_t t = ticks();
    1f48:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
	sei();
    1f4c:	78 94       	sei
	
	if (RX_AUX)
    1f4e:	18 9b       	sbis	0x03, 0	; 3
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <__vector_5+0x36>
		_start = t;
    1f52:	70 93 4b 05 	sts	0x054B, r23
    1f56:	60 93 4a 05 	sts	0x054A, r22
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <__vector_5+0x54>
	else
	{
		RX_isr[AX1] = t - _start;	
    1f5c:	20 91 4a 05 	lds	r18, 0x054A
    1f60:	30 91 4b 05 	lds	r19, 0x054B
    1f64:	62 1b       	sub	r22, r18
    1f66:	73 0b       	sbc	r23, r19
    1f68:	70 93 67 05 	sts	0x0567, r23
    1f6c:	60 93 66 05 	sts	0x0566, r22
		_RX_good |= _BV(AX1);
    1f70:	80 91 5c 05 	lds	r24, 0x055C
    1f74:	80 61       	ori	r24, 0x10	; 16
    1f76:	80 93 5c 05 	sts	0x055C, r24
	}		
}
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <__vector_29>:
	return -1;
}

__attribute__((section(".lowtext")))
ISR(USART1_UDRE_vect)
{
    1f9c:	1f 92       	push	r1
    1f9e:	0f 92       	push	r0
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	0f 92       	push	r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	8f 93       	push	r24
    1fa8:	9f 93       	push	r25
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
	}
}

static int16_t Dequeue(struct FifoBuffer* buf)
{
	if (buf->ReadPtr != buf->WritePtr)
    1fae:	90 91 59 06 	lds	r25, 0x0659
    1fb2:	80 91 5a 06 	lds	r24, 0x065A
    1fb6:	98 17       	cp	r25, r24
    1fb8:	79 f0       	breq	.+30     	; 0x1fd8 <__vector_29+0x3c>
	{
		uint8_t c = buf->Buffer[buf->ReadPtr];
    1fba:	e0 91 59 06 	lds	r30, 0x0659
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	e7 5c       	subi	r30, 0xC7	; 199
    1fc2:	f9 4f       	sbci	r31, 0xF9	; 249
    1fc4:	90 81       	ld	r25, Z
		buf->ReadPtr = (uint8_t)(buf->ReadPtr + 1) % BUFFER_SIZE;
    1fc6:	80 91 59 06 	lds	r24, 0x0659
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	8f 71       	andi	r24, 0x1F	; 31
    1fce:	80 93 59 06 	sts	0x0659, r24
__attribute__((section(".lowtext")))
ISR(USART1_UDRE_vect)
{
	int16_t c = Dequeue(&TX_Buf);
	if (c >= 0)
		UDR1 = c;
    1fd2:	90 93 ce 00 	sts	0x00CE, r25
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <__vector_29+0x46>
	else	// buffer empty -> switch off interrupt
		UCSR1B &= ~_BV(UDRIE1);
    1fd8:	80 91 c9 00 	lds	r24, 0x00C9
    1fdc:	8f 7d       	andi	r24, 0xDF	; 223
    1fde:	80 93 c9 00 	sts	0x00C9, r24
}
    1fe2:	ff 91       	pop	r31
    1fe4:	ef 91       	pop	r30
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <__vector_28>:

__attribute__((section(".lowtext")))
ISR(USART1_RX_vect)
{
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	2f 93       	push	r18
    2000:	3f 93       	push	r19
    2002:	4f 93       	push	r20
    2004:	5f 93       	push	r21
    2006:	6f 93       	push	r22
    2008:	7f 93       	push	r23
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	ef 93       	push	r30
    2014:	ff 93       	push	r31
	Enqueue(&RX_Buf, UDR1);
    2016:	60 91 ce 00 	lds	r22, 0x00CE
    201a:	87 e1       	ldi	r24, 0x17	; 23
    201c:	96 e0       	ldi	r25, 0x06	; 6
    201e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <Enqueue>
}
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <__ctors_end>:
    2044:	11 24       	eor	r1, r1
    2046:	1f be       	out	0x3f, r1	; 63
    2048:	cf ef       	ldi	r28, 0xFF	; 255
    204a:	d8 e0       	ldi	r29, 0x08	; 8
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	cd bf       	out	0x3d, r28	; 61

00002050 <stop_wdt>:
__attribute__((section(".init3")))
__attribute__((used))
static void stop_wdt()
{
	// clear watchdog reset flag!!
	MCUSR = 0;
    2050:	14 be       	out	0x34, r1	; 52
	// and stop watchdog
	wdt_disable();
    2052:	88 e1       	ldi	r24, 0x18	; 24
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	80 93 60 00 	sts	0x0060, r24
    205c:	10 92 60 00 	sts	0x0060, r1
    2060:	0f be       	out	0x3f, r0	; 63

00002062 <__do_copy_data>:
    2062:	11 e0       	ldi	r17, 0x01	; 1
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	b1 e0       	ldi	r27, 0x01	; 1
    2068:	e2 ea       	ldi	r30, 0xA2	; 162
    206a:	f9 e4       	ldi	r31, 0x49	; 73
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <__do_copy_data+0x10>
    206e:	05 90       	lpm	r0, Z+
    2070:	0d 92       	st	X+, r0
    2072:	aa 30       	cpi	r26, 0x0A	; 10
    2074:	b1 07       	cpc	r27, r17
    2076:	d9 f7       	brne	.-10     	; 0x206e <__do_copy_data+0xc>

00002078 <__do_clear_bss>:
    2078:	26 e0       	ldi	r18, 0x06	; 6
    207a:	aa e0       	ldi	r26, 0x0A	; 10
    207c:	b1 e0       	ldi	r27, 0x01	; 1
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <.do_clear_bss_start>

00002080 <.do_clear_bss_loop>:
    2080:	1d 92       	st	X+, r1

00002082 <.do_clear_bss_start>:
    2082:	a7 31       	cpi	r26, 0x17	; 23
    2084:	b2 07       	cpc	r27, r18
    2086:	e1 f7       	brne	.-8      	; 0x2080 <.do_clear_bss_loop>
    2088:	0e 94 56 17 	call	0x2eac	; 0x2eac <main>
    208c:	0c 94 cf 24 	jmp	0x499e	; 0x499e <_exit>

00002090 <__bad_interrupt>:
    2090:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002094 <adcInit>:
void adcInit()
{
	// enable hardware
	//PRR0 |= PRADC;
	
	DIDR0 = 0xFF;			// disable all digital inputs on Port A
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	80 93 7e 00 	sts	0x007E, r24
	ADMUX = 0;
    209a:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0b11011111;	// ADEN, ADSC, ADIE, 
    209e:	8f ed       	ldi	r24, 0xDF	; 223
    20a0:	80 93 7a 00 	sts	0x007A, r24
    20a4:	08 95       	ret

000020a6 <adcGet>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20a6:	f8 94       	cli

uint16_t adcGet(uint8_t channel)
{
	uint16_t r;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
		r = _adc[channel];
    20a8:	e8 2f       	mov	r30, r24
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	e5 5f       	subi	r30, 0xF5	; 245
    20b2:	fe 4f       	sbci	r31, 0xFE	; 254
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    20b8:	78 94       	sei
	return r;
    20ba:	08 95       	ret

000020bc <digitalsBuzzBlocking>:
	LED_DIR = OUTPUT;
}

void digitalsBuzzBlocking(uint16_t ms)
{
	BUZZER = ON;
    20bc:	29 9a       	sbi	0x05, 1	; 5
	WAITMS(ms);
	BUZZER = OFF;
    20be:	29 98       	cbi	0x05, 1	; 5
    20c0:	08 95       	ret

000020c2 <digitalsLoop>:
		if (m >= a.end)				\
			toggle;

void digitalsLoop()
{
	uint16_t m = millis();
    20c2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
	_digDev(digBUZZER, BUZZER, BUZZER_TOGGLE)
    20c6:	40 91 1d 01 	lds	r20, 0x011D
    20ca:	50 91 1e 01 	lds	r21, 0x011E
    20ce:	20 91 1b 01 	lds	r18, 0x011B
    20d2:	30 91 1c 01 	lds	r19, 0x011C
    20d6:	41 15       	cp	r20, r1
    20d8:	51 05       	cpc	r21, r1
    20da:	59 f0       	breq	.+22     	; 0x20f2 <digitalsLoop+0x30>
    20dc:	82 17       	cp	r24, r18
    20de:	93 07       	cpc	r25, r19
    20e0:	88 f0       	brcs	.+34     	; 0x2104 <digitalsLoop+0x42>
    20e2:	19 9a       	sbi	0x03, 1	; 3
    20e4:	48 0f       	add	r20, r24
    20e6:	59 1f       	adc	r21, r25
    20e8:	50 93 1c 01 	sts	0x011C, r21
    20ec:	40 93 1b 01 	sts	0x011B, r20
    20f0:	09 c0       	rjmp	.+18     	; 0x2104 <digitalsLoop+0x42>
    20f2:	21 15       	cp	r18, r1
    20f4:	31 05       	cpc	r19, r1
    20f6:	31 f0       	breq	.+12     	; 0x2104 <digitalsLoop+0x42>
    20f8:	29 9b       	sbis	0x05, 1	; 5
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <digitalsLoop+0x42>
    20fc:	82 17       	cp	r24, r18
    20fe:	93 07       	cpc	r25, r19
    2100:	08 f0       	brcs	.+2      	; 0x2104 <digitalsLoop+0x42>
    2102:	19 9a       	sbi	0x03, 1	; 3
	_digDev(digLED, LED, LED_TOGGLE);
    2104:	40 91 21 01 	lds	r20, 0x0121
    2108:	50 91 22 01 	lds	r21, 0x0122
    210c:	20 91 1f 01 	lds	r18, 0x011F
    2110:	30 91 20 01 	lds	r19, 0x0120
    2114:	41 15       	cp	r20, r1
    2116:	51 05       	cpc	r21, r1
    2118:	59 f0       	breq	.+22     	; 0x2130 <digitalsLoop+0x6e>
    211a:	82 17       	cp	r24, r18
    211c:	93 07       	cpc	r25, r19
    211e:	88 f0       	brcs	.+34     	; 0x2142 <digitalsLoop+0x80>
    2120:	1b 9a       	sbi	0x03, 3	; 3
    2122:	84 0f       	add	r24, r20
    2124:	95 1f       	adc	r25, r21
    2126:	90 93 20 01 	sts	0x0120, r25
    212a:	80 93 1f 01 	sts	0x011F, r24
    212e:	08 95       	ret
    2130:	21 15       	cp	r18, r1
    2132:	31 05       	cpc	r19, r1
    2134:	31 f0       	breq	.+12     	; 0x2142 <digitalsLoop+0x80>
    2136:	2b 9b       	sbis	0x05, 3	; 5
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <digitalsLoop+0x80>
    213a:	82 17       	cp	r24, r18
    213c:	93 07       	cpc	r25, r19
    213e:	08 f0       	brcs	.+2      	; 0x2142 <digitalsLoop+0x80>
    2140:	1b 9a       	sbi	0x03, 3	; 3
    2142:	08 95       	ret

00002144 <digitalsBuzz>:
}

void digitalsBuzz(uint16_t ms)
{
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	ec 01       	movw	r28, r24
	digBUZZER.end = millis() + ms;
    214a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    214e:	8c 0f       	add	r24, r28
    2150:	9d 1f       	adc	r25, r29
    2152:	90 93 1c 01 	sts	0x011C, r25
    2156:	80 93 1b 01 	sts	0x011B, r24
	BUZZER = ON;
    215a:	29 9a       	sbi	0x05, 1	; 5
}
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <digitalsBuzzInterval>:

void digitalsBuzzInterval(uint16_t ms)
{
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
	if (!digBUZZER.interval)
    2168:	80 91 1d 01 	lds	r24, 0x011D
    216c:	90 91 1e 01 	lds	r25, 0x011E
    2170:	89 2b       	or	r24, r25
    2172:	31 f4       	brne	.+12     	; 0x2180 <digitalsBuzzInterval+0x1e>
		digBUZZER.end = millis();
    2174:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    2178:	90 93 1c 01 	sts	0x011C, r25
    217c:	80 93 1b 01 	sts	0x011B, r24
	digBUZZER.interval = ms;
    2180:	d0 93 1e 01 	sts	0x011E, r29
    2184:	c0 93 1d 01 	sts	0x011D, r28
	if (!ms)
    2188:	cd 2b       	or	r28, r29
    218a:	09 f4       	brne	.+2      	; 0x218e <digitalsBuzzInterval+0x2c>
		BUZZER = OFF;
    218c:	29 98       	cbi	0x05, 1	; 5
}
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <keyboardState>:
static uint16_t keyDown;
static uint8_t repeat;

uint8_t keyboardState()
{
	return ~KEYBOARD_PIN & ALLKEYS;
    2194:	83 b1       	in	r24, 0x03	; 3
    2196:	80 95       	com	r24
}
    2198:	80 7f       	andi	r24, 0xF0	; 240
    219a:	08 95       	ret

0000219c <keyboardRead>:

uint8_t keyboardRead()
{
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
	uint16_t m = millis();
    21a4:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    21a8:	ec 01       	movw	r28, r24
	uint8_t keys = keyboardState();
    21aa:	0e 94 ca 10 	call	0x2194	; 0x2194 <keyboardState>
    21ae:	18 2f       	mov	r17, r24
	uint8_t newkeys = keys & ~lastKeys;
    21b0:	80 91 26 01 	lds	r24, 0x0126
    21b4:	08 2f       	mov	r16, r24
    21b6:	00 95       	com	r16
    21b8:	01 23       	and	r16, r17
	if (keys)
    21ba:	11 23       	and	r17, r17
    21bc:	e1 f1       	breq	.+120    	; 0x2236 <keyboardRead+0x9a>
	{
		if (lastKeys != keys)
    21be:	81 17       	cp	r24, r17
    21c0:	51 f0       	breq	.+20     	; 0x21d6 <keyboardRead+0x3a>
		{
			keyDown = m;
    21c2:	d0 93 25 01 	sts	0x0125, r29
    21c6:	c0 93 24 01 	sts	0x0124, r28
			repeat = 0;
    21ca:	10 92 23 01 	sts	0x0123, r1
			digitalsBuzz(5);
    21ce:	85 e0       	ldi	r24, 0x05	; 5
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 a2 10 	call	0x2144	; 0x2144 <digitalsBuzz>
		}			
		if (repeat > 15 && m - keyDown >= 20)
    21d6:	80 91 23 01 	lds	r24, 0x0123
    21da:	20 91 24 01 	lds	r18, 0x0124
    21de:	30 91 25 01 	lds	r19, 0x0125
    21e2:	80 31       	cpi	r24, 0x10	; 16
    21e4:	58 f0       	brcs	.+22     	; 0x21fc <keyboardRead+0x60>
    21e6:	ae 01       	movw	r20, r28
    21e8:	42 1b       	sub	r20, r18
    21ea:	53 0b       	sbc	r21, r19
    21ec:	44 31       	cpi	r20, 0x14	; 20
    21ee:	51 05       	cpc	r21, r1
    21f0:	38 f0       	brcs	.+14     	; 0x2200 <keyboardRead+0x64>
		{
			newkeys = keys;
			keyDown = m;
    21f2:	d0 93 25 01 	sts	0x0125, r29
    21f6:	c0 93 24 01 	sts	0x0124, r28
    21fa:	1c c0       	rjmp	.+56     	; 0x2234 <keyboardRead+0x98>
		}
		else if (repeat && m - keyDown >= 100)
    21fc:	88 23       	and	r24, r24
    21fe:	61 f0       	breq	.+24     	; 0x2218 <keyboardRead+0x7c>
    2200:	ae 01       	movw	r20, r28
    2202:	42 1b       	sub	r20, r18
    2204:	53 0b       	sbc	r21, r19
    2206:	44 36       	cpi	r20, 0x64	; 100
    2208:	51 05       	cpc	r21, r1
    220a:	a8 f0       	brcs	.+42     	; 0x2236 <keyboardRead+0x9a>
		{
			newkeys = keys;
			keyDown = m;
    220c:	d0 93 25 01 	sts	0x0125, r29
    2210:	c0 93 24 01 	sts	0x0124, r28
			repeat++;
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	0c c0       	rjmp	.+24     	; 0x2230 <keyboardRead+0x94>
		}
		else if (!repeat && m - keyDown >= 500)
    2218:	ce 01       	movw	r24, r28
    221a:	82 1b       	sub	r24, r18
    221c:	93 0b       	sbc	r25, r19
    221e:	9c 01       	movw	r18, r24
    2220:	24 3f       	cpi	r18, 0xF4	; 244
    2222:	31 40       	sbci	r19, 0x01	; 1
    2224:	40 f0       	brcs	.+16     	; 0x2236 <keyboardRead+0x9a>
		{
			newkeys = keys;
			keyDown = m;
    2226:	d0 93 25 01 	sts	0x0125, r29
    222a:	c0 93 24 01 	sts	0x0124, r28
			repeat = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	80 93 23 01 	sts	0x0123, r24
    2234:	01 2f       	mov	r16, r17
		}
	}		
	lastKeys = keys;
    2236:	10 93 26 01 	sts	0x0126, r17
	return newkeys;
}
    223a:	80 2f       	mov	r24, r16
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <keyboardInit>:

void keyboardInit()
{
	// key pins to input
	KEYBOARD_DDR |= ALLKEYS;
    2246:	84 b1       	in	r24, 0x04	; 4
    2248:	80 6f       	ori	r24, 0xF0	; 240
    224a:	84 b9       	out	0x04, r24	; 4
	// pull up resistors on
	KEYBOARD_PORT |= ALLKEYS;
    224c:	85 b1       	in	r24, 0x05	; 5
    224e:	80 6f       	ori	r24, 0xF0	; 240
    2250:	85 b9       	out	0x05, r24	; 5
    2252:	08 95       	ret

00002254 <sendByte>:
static uint8_t _screen[LCDWIDTH * LCDHEIGHT / 8];
static uint8_t _curx, _cury;
static fontdescriptor_t _font;

static void sendByte(uint8_t byte)
{
    2254:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 8; i; i--)
	{
		LCD_SCL = 0;
    2256:	5c 98       	cbi	0x0b, 4	; 11
		if (byte & 0x80)
    2258:	87 ff       	sbrs	r24, 7
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <sendByte+0xc>
			LCD_SDA = 1;
    225c:	59 9a       	sbi	0x0b, 1	; 11
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <sendByte+0xe>
		else
			LCD_SDA = 0;
    2260:	59 98       	cbi	0x0b, 1	; 11
		LCD_SCL = 1;
    2262:	5c 9a       	sbi	0x0b, 4	; 11
		byte <<= 1;
    2264:	88 0f       	add	r24, r24
    2266:	91 50       	subi	r25, 0x01	; 1
static uint8_t _curx, _cury;
static fontdescriptor_t _font;

static void sendByte(uint8_t byte)
{
	for (uint8_t i = 8; i; i--)
    2268:	b1 f7       	brne	.-20     	; 0x2256 <sendByte+0x2>
		else
			LCD_SDA = 0;
		LCD_SCL = 1;
		byte <<= 1;
	}
}
    226a:	08 95       	ret

0000226c <sendCommand>:

static void sendCommand(uint8_t command)
{
	LCD_CS = 0;
    226c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_A0 = 0;
    226e:	5f 98       	cbi	0x0b, 7	; 11
	sendByte(command);
    2270:	0e 94 2a 11 	call	0x2254	; 0x2254 <sendByte>
	LCD_CS = 1;
    2274:	5d 9a       	sbi	0x0b, 5	; 11
    2276:	08 95       	ret

00002278 <lcdSetPos>:
	offset %= sizeof(_screen);
}

void lcdSetPos(uint8_t line, uint8_t column)
{
	_curx = column % LCDWIDTH;
    2278:	6f 77       	andi	r22, 0x7F	; 127
    227a:	60 93 2e 01 	sts	0x012E, r22
	_cury = line * 8;
    227e:	88 0f       	add	r24, r24
    2280:	88 0f       	add	r24, r24
    2282:	88 0f       	add	r24, r24
    2284:	80 93 2d 01 	sts	0x012D, r24
    2288:	08 95       	ret

0000228a <lcdXY>:
}

void lcdXY(uint8_t x, uint8_t y)
{
	_curx = x;
    228a:	80 93 2e 01 	sts	0x012E, r24
	_cury = y;
    228e:	60 93 2d 01 	sts	0x012D, r22
    2292:	08 95       	ret

00002294 <lcdSetPixel>:
}

void lcdSetPixel(uint8_t x, uint8_t y, uint8_t color)
{
	static const char PROGMEM masks[8] = {0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80};
	uint8_t *scr = _screen + x + (y / 8 * LCDWIDTH); 
    2294:	96 2f       	mov	r25, r22
    2296:	96 95       	lsr	r25
    2298:	96 95       	lsr	r25
    229a:	96 95       	lsr	r25
    229c:	a8 2f       	mov	r26, r24
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	80 e8       	ldi	r24, 0x80	; 128
    22a2:	98 9f       	mul	r25, r24
    22a4:	a0 0d       	add	r26, r0
    22a6:	b1 1d       	adc	r27, r1
    22a8:	11 24       	eor	r1, r1
    22aa:	a1 5d       	subi	r26, 0xD1	; 209
    22ac:	be 4f       	sbci	r27, 0xFE	; 254
	uint8_t mask = pgm_read_byte(&masks[y % 8]);
    22ae:	67 70       	andi	r22, 0x07	; 7
    22b0:	e6 2f       	mov	r30, r22
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	e4 58       	subi	r30, 0x84	; 132
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	e4 91       	lpm	r30, Z
	if ((_flags & REVERSED) ^ !color)
    22ba:	21 e0       	ldi	r18, 0x01	; 1
    22bc:	41 11       	cpse	r20, r1
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	80 91 2f 05 	lds	r24, 0x052F
    22c4:	81 70       	andi	r24, 0x01	; 1
    22c6:	9c 91       	ld	r25, X
    22c8:	28 17       	cp	r18, r24
    22ca:	19 f0       	breq	.+6      	; 0x22d2 <lcdSetPixel+0x3e>
		*scr = *scr & ~mask;
    22cc:	e0 95       	com	r30
    22ce:	e9 23       	and	r30, r25
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <lcdSetPixel+0x40>
	else
		*scr = *scr | mask;
    22d2:	e9 2b       	or	r30, r25
    22d4:	ec 93       	st	X, r30
    22d6:	08 95       	ret

000022d8 <lcdLine>:
	}
	
}

void lcdLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <lcdLine+0x18>
    22f0:	1f 92       	push	r1
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	c8 2e       	mov	r12, r24
    22f8:	d6 2e       	mov	r13, r22
    22fa:	b4 2e       	mov	r11, r20
	// simple optimized bresenham algorithm
	int8_t dx =  abs(x1 - x0);
    22fc:	e4 2f       	mov	r30, r20
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	e8 1b       	sub	r30, r24
    2302:	f1 09       	sbc	r31, r1
    2304:	f7 ff       	sbrs	r31, 7
    2306:	03 c0       	rjmp	.+6      	; 0x230e <lcdLine+0x36>
    2308:	f1 95       	neg	r31
    230a:	e1 95       	neg	r30
    230c:	f1 09       	sbc	r31, r1
    230e:	0e 2f       	mov	r16, r30
	int8_t sx = x0 < x1 ? 1 : -1;
    2310:	cb 14       	cp	r12, r11
    2312:	10 f4       	brcc	.+4      	; 0x2318 <lcdLine+0x40>
    2314:	31 e0       	ldi	r19, 0x01	; 1
    2316:	01 c0       	rjmp	.+2      	; 0x231a <lcdLine+0x42>
    2318:	3f ef       	ldi	r19, 0xFF	; 255
	int8_t dy = -abs(y1 - y0);
    231a:	e2 2f       	mov	r30, r18
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	ed 19       	sub	r30, r13
    2320:	f1 09       	sbc	r31, r1
    2322:	f7 ff       	sbrs	r31, 7
    2324:	03 c0       	rjmp	.+6      	; 0x232c <lcdLine+0x54>
    2326:	f1 95       	neg	r31
    2328:	e1 95       	neg	r30
    232a:	f1 09       	sbc	r31, r1
    232c:	ee 2e       	mov	r14, r30
    232e:	e1 94       	neg	r14
	int8_t sy = y0 < y1 ? 1 : -1; 
    2330:	d2 16       	cp	r13, r18
    2332:	10 f4       	brcc	.+4      	; 0x2338 <lcdLine+0x60>
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	01 c0       	rjmp	.+2      	; 0x233a <lcdLine+0x62>
    2338:	9f ef       	ldi	r25, 0xFF	; 255
	int16_t err = dx + dy, e2; /* error value e_xy */
    233a:	11 27       	eor	r17, r17
    233c:	07 fd       	sbrc	r16, 7
    233e:	10 95       	com	r17
    2340:	ff 24       	eor	r15, r15
    2342:	e7 fc       	sbrc	r14, 7
    2344:	f0 94       	com	r15
    2346:	48 01       	movw	r8, r16
    2348:	8e 0c       	add	r8, r14
    234a:	9f 1c       	adc	r9, r15
 
	for(;;)
	{
		lcdSetPixel(x0, y0, 1);
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	6d 2d       	mov	r22, r13
    2350:	8c 2d       	mov	r24, r12
    2352:	2b 83       	std	Y+3, r18	; 0x03
    2354:	39 83       	std	Y+1, r19	; 0x01
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
		
		if (x0 == x1 && y0 == y1)
    235c:	2b 81       	ldd	r18, Y+3	; 0x03
    235e:	39 81       	ldd	r19, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	cb 10       	cpse	r12, r11
    2364:	02 c0       	rjmp	.+4      	; 0x236a <lcdLine+0x92>
    2366:	d2 16       	cp	r13, r18
    2368:	81 f0       	breq	.+32     	; 0x238a <lcdLine+0xb2>
			break;
			
		e2 = 2 * err;
    236a:	f4 01       	movw	r30, r8
    236c:	ee 0f       	add	r30, r30
    236e:	ff 1f       	adc	r31, r31
		if (e2 > dy) { err += dy; x0 += sx; } /* e_xy + e_x > 0 */
    2370:	ee 16       	cp	r14, r30
    2372:	ff 06       	cpc	r15, r31
    2374:	1c f4       	brge	.+6      	; 0x237c <lcdLine+0xa4>
    2376:	8e 0c       	add	r8, r14
    2378:	9f 1c       	adc	r9, r15
    237a:	c3 0e       	add	r12, r19
		if (e2 < dx) { err += dx; y0 += sy; } /* e_xy + e_y < 0 */
    237c:	e0 17       	cp	r30, r16
    237e:	f1 07       	cpc	r31, r17
    2380:	2c f7       	brge	.-54     	; 0x234c <lcdLine+0x74>
    2382:	80 0e       	add	r8, r16
    2384:	91 1e       	adc	r9, r17
    2386:	d9 0e       	add	r13, r25
    2388:	e1 cf       	rjmp	.-62     	; 0x234c <lcdLine+0x74>
	}
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	ff 90       	pop	r15
    239a:	ef 90       	pop	r14
    239c:	df 90       	pop	r13
    239e:	cf 90       	pop	r12
    23a0:	bf 90       	pop	r11
    23a2:	9f 90       	pop	r9
    23a4:	8f 90       	pop	r8
    23a6:	08 95       	ret

000023a8 <lcdRectangle>:

void lcdRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color)
{
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	d8 2f       	mov	r29, r24
    23b6:	c6 2f       	mov	r28, r22
    23b8:	14 2f       	mov	r17, r20
    23ba:	f2 2e       	mov	r15, r18
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
    23bc:	48 17       	cp	r20, r24
    23be:	10 f4       	brcc	.+4      	; 0x23c4 <lcdRectangle+0x1c>
    23c0:	d4 2f       	mov	r29, r20
    23c2:	18 2f       	mov	r17, r24
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
    23c4:	fc 16       	cp	r15, r28
    23c6:	18 f4       	brcc	.+6      	; 0x23ce <lcdRectangle+0x26>
    23c8:	8c 2f       	mov	r24, r28
    23ca:	cf 2d       	mov	r28, r15
    23cc:	f8 2e       	mov	r15, r24
	for (a = x0; a <= x1; a++)
    23ce:	ed 2e       	mov	r14, r29
    23d0:	1e 15       	cp	r17, r14
    23d2:	60 f0       	brcs	.+24     	; 0x23ec <lcdRectangle+0x44>
	{
		lcdSetPixel(a, y0, color);
    23d4:	40 2f       	mov	r20, r16
    23d6:	6c 2f       	mov	r22, r28
    23d8:	8e 2d       	mov	r24, r14
    23da:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
		lcdSetPixel(a, y1, color);
    23de:	40 2f       	mov	r20, r16
    23e0:	6f 2d       	mov	r22, r15
    23e2:	8e 2d       	mov	r24, r14
    23e4:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
void lcdRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color)
{
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
	for (a = x0; a <= x1; a++)
    23e8:	e3 94       	inc	r14
    23ea:	f2 cf       	rjmp	.-28     	; 0x23d0 <lcdRectangle+0x28>
	{
		lcdSetPixel(a, y0, color);
		lcdSetPixel(a, y1, color);
	}
	for (a = y0; a <= y1; a++)
    23ec:	fc 16       	cp	r15, r28
    23ee:	60 f0       	brcs	.+24     	; 0x2408 <lcdRectangle+0x60>
	{
		lcdSetPixel(x0, a, color);
    23f0:	40 2f       	mov	r20, r16
    23f2:	6c 2f       	mov	r22, r28
    23f4:	8d 2f       	mov	r24, r29
    23f6:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
		lcdSetPixel(x1, a, color);
    23fa:	40 2f       	mov	r20, r16
    23fc:	6c 2f       	mov	r22, r28
    23fe:	81 2f       	mov	r24, r17
    2400:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
	for (a = x0; a <= x1; a++)
	{
		lcdSetPixel(a, y0, color);
		lcdSetPixel(a, y1, color);
	}
	for (a = y0; a <= y1; a++)
    2404:	cf 5f       	subi	r28, 0xFF	; 255
    2406:	f2 cf       	rjmp	.-28     	; 0x23ec <lcdRectangle+0x44>
	{
		lcdSetPixel(x0, a, color);
		lcdSetPixel(x1, a, color);
	}
}
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	08 95       	ret

00002416 <lcdFillRectangle>:

void lcdFillRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color)
{
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	1f 92       	push	r1
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	d8 2e       	mov	r13, r24
    242c:	e6 2e       	mov	r14, r22
    242e:	14 2f       	mov	r17, r20
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
    2430:	48 17       	cp	r20, r24
    2432:	10 f4       	brcc	.+4      	; 0x2438 <lcdFillRectangle+0x22>
    2434:	d4 2e       	mov	r13, r20
    2436:	18 2f       	mov	r17, r24
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
    2438:	2e 15       	cp	r18, r14
    243a:	28 f4       	brcc	.+10     	; 0x2446 <lcdFillRectangle+0x30>
    243c:	8e 2d       	mov	r24, r14
    243e:	e2 2e       	mov	r14, r18
    2440:	28 2f       	mov	r18, r24
	for (a = y0; a <= y1; a++)
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <lcdFillRectangle+0x30>
    2444:	e3 94       	inc	r14
    2446:	2e 15       	cp	r18, r14
    2448:	60 f0       	brcs	.+24     	; 0x2462 <lcdFillRectangle+0x4c>
    244a:	fd 2c       	mov	r15, r13
		for(uint8_t i = x0; i <= x1; i++)
    244c:	1f 15       	cp	r17, r15
    244e:	d0 f3       	brcs	.-12     	; 0x2444 <lcdFillRectangle+0x2e>
			lcdSetPixel(i, a, color);
    2450:	40 2f       	mov	r20, r16
    2452:	6e 2d       	mov	r22, r14
    2454:	8f 2d       	mov	r24, r15
    2456:	29 83       	std	Y+1, r18	; 0x01
    2458:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
{
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
	for (a = y0; a <= y1; a++)
		for(uint8_t i = x0; i <= x1; i++)
    245c:	f3 94       	inc	r15
    245e:	29 81       	ldd	r18, Y+1	; 0x01
    2460:	f5 cf       	rjmp	.-22     	; 0x244c <lcdFillRectangle+0x36>
			lcdSetPixel(i, a, color);
}
    2462:	0f 90       	pop	r0
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	08 95       	ret

00002474 <lcdClear>:

void lcdClear()
{
	memset(_screen, 0, sizeof(_screen));
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	94 e0       	ldi	r25, 0x04	; 4
    2478:	ef e2       	ldi	r30, 0x2F	; 47
    247a:	f1 e0       	ldi	r31, 0x01	; 1
    247c:	df 01       	movw	r26, r30
    247e:	9c 01       	movw	r18, r24
    2480:	1d 92       	st	X+, r1
    2482:	21 50       	subi	r18, 0x01	; 1
    2484:	30 40       	sbci	r19, 0x00	; 0
    2486:	e1 f7       	brne	.-8      	; 0x2480 <lcdClear+0xc>
	offset %= sizeof(_screen);
}

void lcdSetPos(uint8_t line, uint8_t column)
{
	_curx = column % LCDWIDTH;
    2488:	10 92 2e 01 	sts	0x012E, r1
	_cury = line * 8;
    248c:	10 92 2d 01 	sts	0x012D, r1

void lcdClear()
{
	memset(_screen, 0, sizeof(_screen));
	lcdSetPos(0, 0);
	_flags = 0;
    2490:	10 92 2f 05 	sts	0x052F, r1
    2494:	08 95       	ret

00002496 <lcdWriteSprite_P>:
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
    24ac:	a6 2e       	mov	r10, r22
    24ae:	c4 2e       	mov	r12, r20
    24b0:	b2 2e       	mov	r11, r18
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
    24b2:	d1 2c       	mov	r13, r1
	_flags = 0;
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
    24b4:	e1 2c       	mov	r14, r1
			if (j % 8 == 0)
					b = pgm_read_byte(sprite++);
					
			if (mode == ROP_COPY)
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
    24b6:	04 2f       	mov	r16, r20
    24b8:	10 e0       	ldi	r17, 0x00	; 0
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
    24ba:	da 14       	cp	r13, r10
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <lcdWriteSprite_P+0x2a>
    24be:	4b c0       	rjmp	.+150    	; 0x2556 <lcdWriteSprite_P+0xc0>
    24c0:	f1 2c       	mov	r15, r1
	{
		for (uint8_t j = 0; j < sizeY; j++)
    24c2:	fc 14       	cp	r15, r12
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <lcdWriteSprite_P+0x32>
    24c6:	45 c0       	rjmp	.+138    	; 0x2552 <lcdWriteSprite_P+0xbc>
		{
			if (j % 8 == 0)
    24c8:	8f 2d       	mov	r24, r15
    24ca:	87 70       	andi	r24, 0x07	; 7
    24cc:	29 f4       	brne	.+10     	; 0x24d8 <lcdWriteSprite_P+0x42>
					b = pgm_read_byte(sprite++);
    24ce:	ce 01       	movw	r24, r28
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	fe 01       	movw	r30, r28
    24d4:	e4 90       	lpm	r14, Z
    24d6:	ec 01       	movw	r28, r24
					
			if (mode == ROP_COPY)
    24d8:	b1 10       	cpse	r11, r1
    24da:	2a c0       	rjmp	.+84     	; 0x2530 <lcdWriteSprite_P+0x9a>
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
    24dc:	60 91 2d 01 	lds	r22, 0x012D
    24e0:	96 2f       	mov	r25, r22
    24e2:	97 70       	andi	r25, 0x07	; 7
    24e4:	6f 0d       	add	r22, r15
    24e6:	80 91 2e 01 	lds	r24, 0x012E
    24ea:	91 11       	cpse	r25, r1
    24ec:	1e c0       	rjmp	.+60     	; 0x252a <lcdWriteSprite_P+0x94>
    24ee:	f8 01       	movw	r30, r16
    24f0:	ef 19       	sub	r30, r15
    24f2:	f1 09       	sbc	r31, r1
    24f4:	38 97       	sbiw	r30, 0x08	; 8
    24f6:	cc f0       	brlt	.+50     	; 0x252a <lcdWriteSprite_P+0x94>
		*scr = *scr | mask;
}

static void lcdSetByte(uint8_t x, uint8_t y, uint8_t b)
{
	uint8_t *scr = _screen + x + (y / 8 * LCDWIDTH); 
    24f8:	66 95       	lsr	r22
    24fa:	66 95       	lsr	r22
    24fc:	66 95       	lsr	r22
					
			if (mode == ROP_COPY)
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
				{
					lcdSetByte(_curx + i, _cury + j, b);
    24fe:	8d 0d       	add	r24, r13
		*scr = *scr | mask;
}

static void lcdSetByte(uint8_t x, uint8_t y, uint8_t b)
{
	uint8_t *scr = _screen + x + (y / 8 * LCDWIDTH); 
    2500:	a8 2f       	mov	r26, r24
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	f0 e8       	ldi	r31, 0x80	; 128
    2506:	6f 9f       	mul	r22, r31
    2508:	a0 0d       	add	r26, r0
    250a:	b1 1d       	adc	r27, r1
    250c:	11 24       	eor	r1, r1
    250e:	a1 5d       	subi	r26, 0xD1	; 209
    2510:	be 4f       	sbci	r27, 0xFE	; 254
	if (_flags & REVERSED)
    2512:	80 91 2f 05 	lds	r24, 0x052F
    2516:	80 ff       	sbrs	r24, 0
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <lcdWriteSprite_P+0x8c>
		*scr = ~b;
    251a:	8e 2d       	mov	r24, r14
    251c:	80 95       	com	r24
    251e:	8c 93       	st	X, r24
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <lcdWriteSprite_P+0x8e>
	else
		*scr = b;
    2522:	ec 92       	st	X, r14
			if (mode == ROP_COPY)
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
				{
					lcdSetByte(_curx + i, _cury + j, b);
					j += 7; // just +7 b/c the loop increments anyway
    2524:	87 e0       	ldi	r24, 0x07	; 7
    2526:	f8 0e       	add	r15, r24
    2528:	11 c0       	rjmp	.+34     	; 0x254c <lcdWriteSprite_P+0xb6>
				}
				else
					lcdSetPixel(_curx + i, _cury + j, b & 0x01);
    252a:	4e 2d       	mov	r20, r14
    252c:	41 70       	andi	r20, 0x01	; 1
    252e:	0b c0       	rjmp	.+22     	; 0x2546 <lcdWriteSprite_P+0xb0>
			}				
			else if (mode == ROP_PAINT)
    2530:	e1 e0       	ldi	r30, 0x01	; 1
    2532:	be 12       	cpse	r11, r30
    2534:	0b c0       	rjmp	.+22     	; 0x254c <lcdWriteSprite_P+0xb6>
			{
				if (b & 0x01)
    2536:	e0 fe       	sbrs	r14, 0
    2538:	09 c0       	rjmp	.+18     	; 0x254c <lcdWriteSprite_P+0xb6>
					lcdSetPixel(_curx + i, _cury + j, 1);
    253a:	60 91 2d 01 	lds	r22, 0x012D
    253e:	6f 0d       	add	r22, r15
    2540:	80 91 2e 01 	lds	r24, 0x012E
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	8d 0d       	add	r24, r13
    2548:	0e 94 4a 11 	call	0x2294	; 0x2294 <lcdSetPixel>
			}			
			b >>= 1;
    254c:	e6 94       	lsr	r14
void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
	{
		for (uint8_t j = 0; j < sizeY; j++)
    254e:	f3 94       	inc	r15
    2550:	b8 cf       	rjmp	.-144    	; 0x24c2 <lcdWriteSprite_P+0x2c>
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
    2552:	d3 94       	inc	r13
    2554:	b2 cf       	rjmp	.-156    	; 0x24ba <lcdWriteSprite_P+0x24>
					lcdSetPixel(_curx + i, _cury + j, 1);
			}			
			b >>= 1;
		}
	}	
}
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
    256a:	08 95       	ret

0000256c <lcdWriteGlyph_P>:

void lcdWriteGlyph_P(const glyph_t *glyph, uint8_t mode)
{
    256c:	26 2f       	mov	r18, r22
	uint8_t sizeX = pgm_read_byte(&glyph->sizeX);
    256e:	fc 01       	movw	r30, r24
    2570:	64 91       	lpm	r22, Z
	uint8_t sizeY = pgm_read_byte(&glyph->sizeY);
    2572:	31 96       	adiw	r30, 0x01	; 1
    2574:	44 91       	lpm	r20, Z
	lcdWriteSprite_P((PGM_P)&glyph->glyph, sizeX, sizeY, mode);
    2576:	02 96       	adiw	r24, 0x02	; 2
    2578:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <lcdWriteSprite_P>

0000257c <lcdWriteChar>:
}

void lcdWriteChar(char c)
{
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	00 d0       	rcall	.+0      	; 0x2582 <lcdWriteChar+0x6>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	40 91 2a 01 	lds	r20, 0x012A
	if (c == '\n')
    258a:	8a 30       	cpi	r24, 0x0A	; 10
    258c:	41 f4       	brne	.+16     	; 0x259e <lcdWriteChar+0x22>
	{
		_cury += _font.sizeY;
    258e:	80 91 2d 01 	lds	r24, 0x012D
    2592:	84 0f       	add	r24, r20
    2594:	80 93 2d 01 	sts	0x012D, r24
		_curx = 0;
    2598:	10 92 2e 01 	sts	0x012E, r1
    259c:	15 c0       	rjmp	.+42     	; 0x25c8 <lcdWriteChar+0x4c>
	}
	else
	{
		lcdWriteSprite_P(_font.selector(c), _font.sizeX, _font.sizeY, ROP_COPY);
    259e:	60 91 29 01 	lds	r22, 0x0129
    25a2:	e0 91 2b 01 	lds	r30, 0x012B
    25a6:	f0 91 2c 01 	lds	r31, 0x012C
    25aa:	4a 83       	std	Y+2, r20	; 0x02
    25ac:	69 83       	std	Y+1, r22	; 0x01
    25ae:	09 95       	icall
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	4a 81       	ldd	r20, Y+2	; 0x02
    25b4:	69 81       	ldd	r22, Y+1	; 0x01
    25b6:	0e 94 4b 12 	call	0x2496	; 0x2496 <lcdWriteSprite_P>
		_curx += _font.sizeX;
    25ba:	80 91 2e 01 	lds	r24, 0x012E
    25be:	90 91 29 01 	lds	r25, 0x0129
    25c2:	89 0f       	add	r24, r25
    25c4:	80 93 2e 01 	sts	0x012E, r24
	}
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	08 95       	ret

000025d2 <lcdWriteString>:

void lcdWriteString(char *s)
{
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	ec 01       	movw	r28, r24
	char c;
	while ((c = *s++))
    25d8:	89 91       	ld	r24, Y+
    25da:	88 23       	and	r24, r24
    25dc:	19 f0       	breq	.+6      	; 0x25e4 <lcdWriteString+0x12>
		lcdWriteChar(c);
    25de:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
    25e2:	fa cf       	rjmp	.-12     	; 0x25d8 <lcdWriteString+0x6>
}
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <lcdWriteString_P>:

void lcdWriteString_P(PGM_P s)
{
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
	char c;
	if (s == NULL) return;
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	51 f0       	breq	.+20     	; 0x2606 <lcdWriteString_P+0x1c>
    25f2:	fc 01       	movw	r30, r24
	while ((c = pgm_read_byte(s++)))
    25f4:	84 91       	lpm	r24, Z
    25f6:	ef 01       	movw	r28, r30
    25f8:	21 96       	adiw	r28, 0x01	; 1
    25fa:	88 23       	and	r24, r24
    25fc:	21 f0       	breq	.+8      	; 0x2606 <lcdWriteString_P+0x1c>
		lcdWriteChar(c);
    25fe:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
    2602:	fe 01       	movw	r30, r28
    2604:	f7 cf       	rjmp	.-18     	; 0x25f4 <lcdWriteString_P+0xa>
}
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <lcdReverse>:

void lcdReverse(uint8_t reversed)
{
    260c:	90 91 2f 05 	lds	r25, 0x052F
	if (reversed)
    2610:	88 23       	and	r24, r24
    2612:	11 f0       	breq	.+4      	; 0x2618 <lcdReverse+0xc>
		_flags |= REVERSED;
    2614:	91 60       	ori	r25, 0x01	; 1
    2616:	01 c0       	rjmp	.+2      	; 0x261a <lcdReverse+0xe>
	else
		_flags &= ~REVERSED;
    2618:	9e 7f       	andi	r25, 0xFE	; 254
    261a:	90 93 2f 05 	sts	0x052F, r25
    261e:	08 95       	ret

00002620 <lcdEnable>:
}

void lcdEnable()
{
	// reset timer0 to avoid re-entrant call of ISR b/c it is non blocking
	TCNT0 = 0;
    2620:	16 bc       	out	0x26, r1	; 38
	TIFR0 = _BV(TOV0);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	85 bb       	out	0x15, r24	; 21
	TIMSK0 |= _BV(TOIE0);	// enable interrupt on overflow
    2626:	ee e6       	ldi	r30, 0x6E	; 110
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	81 60       	ori	r24, 0x01	; 1
    262e:	80 83       	st	Z, r24
    2630:	08 95       	ret

00002632 <lcdDisable>:
}

void lcdDisable()
{
	WAITMS(110);
	TIMSK0 &= ~_BV(TOIE0);	// disable overflow interrupt
    2632:	ee e6       	ldi	r30, 0x6E	; 110
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	8e 7f       	andi	r24, 0xFE	; 254
    263a:	80 83       	st	Z, r24
    263c:	08 95       	ret

0000263e <lcdSelectFont>:
}

void lcdSelectFont(const fontdescriptor_t *font)
{
	if (font == NULL)
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	11 f4       	brne	.+4      	; 0x2646 <lcdSelectFont+0x8>
		font = &font6x8;
    2642:	80 ea       	ldi	r24, 0xA0	; 160
    2644:	97 e0       	ldi	r25, 0x07	; 7
	memcpy_P(&_font, font, sizeof(_font));
    2646:	44 e0       	ldi	r20, 0x04	; 4
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	bc 01       	movw	r22, r24
    264c:	89 e2       	ldi	r24, 0x29	; 41
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	0c 94 56 24 	jmp	0x48ac	; 0x48ac <memcpy_P>

00002654 <lcdInit>:
	CMD_DISPLAY_ON,				// Display on
	0x00,						// (terminator)
};

void lcdInit()
{
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
	// pins
	LCD_CS_DIR = OUTPUT;
    2658:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RST_DIR = OUTPUT;
    265a:	56 9a       	sbi	0x0a, 6	; 10
	LCD_A0_DIR = OUTPUT;
    265c:	57 9a       	sbi	0x0a, 7	; 10
	LCD_SCL_DIR = OUTPUT;
    265e:	54 9a       	sbi	0x0a, 4	; 10
	LCD_SDA_DIR = OUTPUT;
    2660:	51 9a       	sbi	0x0a, 1	; 10

	// init display
	LCD_RST = 0;
    2662:	5e 98       	cbi	0x0b, 6	; 11
	WAITUS(2000);
	LCD_RST = 1;
    2664:	5e 9a       	sbi	0x0b, 6	; 11
	WAITUS(2000);
	
	const unsigned char* ptr = _initSeq;
	uint8_t c;
	while ((c = pgm_read_byte(ptr++)))
    2666:	e4 e8       	ldi	r30, 0x84	; 132
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	84 91       	lpm	r24, Z
    266c:	ef 01       	movw	r28, r30
    266e:	21 96       	adiw	r28, 0x01	; 1
    2670:	88 23       	and	r24, r24
    2672:	21 f0       	breq	.+8      	; 0x267c <lcdInit+0x28>
		sendCommand(c);
    2674:	0e 94 36 11 	call	0x226c	; 0x226c <sendCommand>
    2678:	fe 01       	movw	r30, r28
    267a:	f7 cf       	rjmp	.-18     	; 0x266a <lcdInit+0x16>
	
	lcdSelectFont(NULL);		// select default font
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
	
	// use timer0 with clk/8 and overflow
	// at 256 as interrupt based output of data bytes
	// ie every 1024us one byte is send to display. whole screen takes about 105ms
	//PRR0 |= PRTIM0;			// enable hardware
	TCCR0B = _BV(CS01);		// clk/8
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	85 bd       	out	0x25, r24	; 37
	lcdEnable();
}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
	// use timer0 with clk/8 and overflow
	// at 256 as interrupt based output of data bytes
	// ie every 1024us one byte is send to display. whole screen takes about 105ms
	//PRR0 |= PRTIM0;			// enable hardware
	TCCR0B = _BV(CS01);		// clk/8
	lcdEnable();
    268c:	0c 94 10 13 	jmp	0x2620	; 0x2620 <lcdEnable>

00002690 <doOutput>:
	else
		return OFF;
}

static uint16_t doOutput(uint8_t index, uint8_t loActive)
{
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
	if (PWM[index] && Config.Mixer[index].Flags && (Config.Mixer[index].IsMotor || loActive || Config.Mixer[index].IsHiRate))
    2694:	e8 2f       	mov	r30, r24
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	9f 01       	movw	r18, r30
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	d9 01       	movw	r26, r18
    26a0:	a8 5c       	subi	r26, 0xC8	; 200
    26a2:	ba 4f       	sbci	r27, 0xFA	; 250
    26a4:	8d 91       	ld	r24, X+
    26a6:	9c 91       	ld	r25, X
    26a8:	89 2b       	or	r24, r25
    26aa:	29 f1       	breq	.+74     	; 0x26f6 <doOutput+0x66>
    26ac:	86 e0       	ldi	r24, 0x06	; 6
    26ae:	8e 9f       	mul	r24, r30
    26b0:	d0 01       	movw	r26, r0
    26b2:	8f 9f       	mul	r24, r31
    26b4:	b0 0d       	add	r27, r0
    26b6:	11 24       	eor	r1, r1
    26b8:	ed 01       	movw	r28, r26
    26ba:	c8 55       	subi	r28, 0x58	; 88
    26bc:	d9 4f       	sbci	r29, 0xF9	; 249
    26be:	88 81       	ld	r24, Y
    26c0:	88 23       	and	r24, r24
    26c2:	c9 f0       	breq	.+50     	; 0x26f6 <doOutput+0x66>
    26c4:	80 fd       	sbrc	r24, 0
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <doOutput+0x40>
    26c8:	61 11       	cpse	r22, r1
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <doOutput+0x40>
    26cc:	82 ff       	sbrs	r24, 2
    26ce:	13 c0       	rjmp	.+38     	; 0x26f6 <doOutput+0x66>
	{
		cli();
    26d0:	f8 94       	cli
		OUT_PORT |= pgm_read_byte(&masktable[index]);
    26d2:	88 b1       	in	r24, 0x08	; 8
    26d4:	e0 57       	subi	r30, 0x70	; 112
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	e4 91       	lpm	r30, Z
    26da:	e8 2b       	or	r30, r24
    26dc:	e8 b9       	out	0x08, r30	; 8
		return (uint16_t)(TCNT1 + (PWM[index]));
    26de:	80 91 84 00 	lds	r24, 0x0084
    26e2:	90 91 85 00 	lds	r25, 0x0085
    26e6:	f9 01       	movw	r30, r18
    26e8:	e8 5c       	subi	r30, 0xC8	; 200
    26ea:	fa 4f       	sbci	r31, 0xFA	; 250
    26ec:	20 81       	ld	r18, Z
    26ee:	31 81       	ldd	r19, Z+1	; 0x01
    26f0:	82 0f       	add	r24, r18
    26f2:	93 1f       	adc	r25, r19
    26f4:	06 c0       	rjmp	.+12     	; 0x2702 <doOutput+0x72>
	}
	else
		return (uint16_t)(TCNT1 + MICROTOTICKS(100));	
    26f6:	80 91 84 00 	lds	r24, 0x0084
    26fa:	90 91 85 00 	lds	r25, 0x0085
    26fe:	80 53       	subi	r24, 0x30	; 48
    2700:	98 4f       	sbci	r25, 0xF8	; 248
}
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <pwmInit>:
}


void pwmInit()
{
	OUT_DDR = 0xFF;			// all pins to output mode
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	87 b9       	out	0x07, r24	; 7
	OUT_PORT = 0x00;		// all OFF
    270c:	18 b8       	out	0x08, r1	; 8
    270e:	08 95       	ret

00002710 <pwmWrite>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2710:	f8 94       	cli
}

void pwmWrite(uint8_t channel, uint16_t value)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
		PWM[channel] = (uint16_t) MICROTOTICKS(value);
    2712:	e8 2f       	mov	r30, r24
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	e8 5c       	subi	r30, 0xC8	; 200
    271c:	fa 4f       	sbci	r31, 0xFA	; 250
    271e:	24 e1       	ldi	r18, 0x14	; 20
    2720:	26 9f       	mul	r18, r22
    2722:	c0 01       	movw	r24, r0
    2724:	27 9f       	mul	r18, r23
    2726:	90 0d       	add	r25, r0
    2728:	11 24       	eor	r1, r1
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	80 83       	st	Z, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    272e:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    2730:	08 95       	ret

00002732 <pwmEnable>:
}

void pwmEnable()
{
	OCR1A = TCNT1;
    2732:	e4 e8       	ldi	r30, 0x84	; 132
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	90 93 89 00 	sts	0x0089, r25
    273e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = TCNT1;
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	90 93 8b 00 	sts	0x008B, r25
    274a:	80 93 8a 00 	sts	0x008A, r24
	TIFR1 |= _BV(OCF1A) | _BV(OCF1B);		// clear OCA and OCB interrupt
    274e:	86 b3       	in	r24, 0x16	; 22
    2750:	86 60       	ori	r24, 0x06	; 6
    2752:	86 bb       	out	0x16, r24	; 22
	TIMSK1 |= _BV(OCIE1A) | _BV(OCIE1B);	// enable OCA and OCB interrupt on timer1
    2754:	ef e6       	ldi	r30, 0x6F	; 111
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	86 60       	ori	r24, 0x06	; 6
    275c:	80 83       	st	Z, r24
    275e:	08 95       	ret

00002760 <rxInit>:

void rxInit(uint8_t mode)
{
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2766:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2768:	f8 94       	cli
	{
		if (mode != RX_MODE_PWM)
    276a:	88 23       	and	r24, r24
    276c:	79 f0       	breq	.+30     	; 0x278c <rxInit+0x2c>
		{
			serialInit();
    276e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <serialInit>
			// set pin direction
			RX_AIL_DIR = INPUT;
    2772:	53 98       	cbi	0x0a, 3	; 10

			// enable interrupt INT2 for CPPM signal on PB2
			EICRA  = _BV(ISC21);				// falling edge on PB2 (INT2) 
    2774:	80 e2       	ldi	r24, 0x20	; 32
    2776:	80 93 69 00 	sts	0x0069, r24
			EIFR   = _BV(INTF0) | _BV(INTF1) | _BV(INTF2);	// clear interrupts
    277a:	87 e0       	ldi	r24, 0x07	; 7
    277c:	8c bb       	out	0x1c, r24	; 28
			EIMSK  = _BV(INT2);					// enable interrupt for INT2
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	8d bb       	out	0x1d, r24	; 29
			PCICR  = 0;							// disable all PCIs
    2782:	10 92 68 00 	sts	0x0068, r1
			PCIFR  = _BV(PCIF1) | _BV(PCIF3);	// clear interrupts
    2786:	8a e0       	ldi	r24, 0x0A	; 10
    2788:	8b bb       	out	0x1b, r24	; 27
    278a:	19 c0       	rjmp	.+50     	; 0x27be <rxInit+0x5e>
		}
		else
		{
			serialTerminate();
    278c:	0e 94 9f 14 	call	0x293e	; 0x293e <serialTerminate>
			// set pins direction
			RX_AIL_DIR = INPUT;
    2790:	53 98       	cbi	0x0a, 3	; 10
			RX_ELE_DIR = INPUT;
    2792:	52 98       	cbi	0x0a, 2	; 10
			RX_THR_DIR = INPUT;
    2794:	50 98       	cbi	0x0a, 0	; 10
			RX_RUD_DIR = INPUT;
    2796:	22 98       	cbi	0x04, 2	; 4
			RX_AUX_DIR = INPUT;
    2798:	20 98       	cbi	0x04, 0	; 4
			
			// enable interrupts
			EICRA  = _BV(ISC00) | _BV(ISC10) | _BV(ISC20);	// any edge on INT0, INT1 and INT2
    279a:	85 e1       	ldi	r24, 0x15	; 21
    279c:	80 93 69 00 	sts	0x0069, r24
			EIFR   = _BV(INTF0) | _BV(INTF1) | _BV(INTF2);	// clear interrupts
    27a0:	87 e0       	ldi	r24, 0x07	; 7
    27a2:	8c bb       	out	0x1c, r24	; 28
			EIMSK  = _BV(INT0)  | _BV(INT1)  | _BV(INT2);	// enable interrupt for INT0, INT1 and INT2
    27a4:	8d bb       	out	0x1d, r24	; 29
			PCMSK1 = _BV(PCINT8);							// enable PCINT8 (AUX) -> PCI1
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 = _BV(PCINT24);							// enable PCINT24 (THR) -> PCI3
    27ac:	80 93 73 00 	sts	0x0073, r24
			PCIFR  = _BV(PCIF1) | _BV(PCIF3);				// clear interrupts
    27b0:	8a e0       	ldi	r24, 0x0A	; 10
    27b2:	8b bb       	out	0x1b, r24	; 27
			PCICR |= _BV(PCIE1) | _BV(PCIE3);				// enable PCI1 and PCI3
    27b4:	90 91 68 00 	lds	r25, 0x0068
    27b8:	9a 60       	ori	r25, 0x0A	; 10
    27ba:	90 93 68 00 	sts	0x0068, r25
		}	
		_mode = mode;	
    27be:	c0 93 5d 05 	sts	0x055D, r28
		RX_good = 0;
    27c2:	10 92 a5 05 	sts	0x05A5, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27c6:	df bf       	out	0x3f, r29	; 63
	}
}
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <rxRead>:

void rxRead()
{
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
	uint16_t b;
	uint8_t index;
	
	EVERYMS(50)
    27d2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    27d6:	60 91 5c 05 	lds	r22, 0x055C
    27da:	70 91 a5 05 	lds	r23, 0x05A5
    27de:	20 91 48 05 	lds	r18, 0x0548
    27e2:	30 91 49 05 	lds	r19, 0x0549
    27e6:	ac 01       	movw	r20, r24
    27e8:	42 1b       	sub	r20, r18
    27ea:	53 0b       	sbc	r21, r19
    27ec:	42 33       	cpi	r20, 0x32	; 50
    27ee:	51 05       	cpc	r21, r1
    27f0:	20 f0       	brcs	.+8      	; 0x27fa <rxRead+0x2c>
	{
		RX_good = _RX_good;
    27f2:	76 2f       	mov	r23, r22
void rxRead()
{
	uint16_t b;
	uint8_t index;
	
	EVERYMS(50)
    27f4:	9c 01       	movw	r18, r24
	{
		RX_good = _RX_good;
		_RX_good = 0;
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	f6 cf       	rjmp	.-20     	; 0x27e6 <rxRead+0x18>
    27fa:	60 93 5c 05 	sts	0x055C, r22
    27fe:	70 93 a5 05 	sts	0x05A5, r23
    2802:	30 93 49 05 	sts	0x0549, r19
    2806:	20 93 48 05 	sts	0x0548, r18
    280a:	e6 eb       	ldi	r30, 0xB6	; 182
    280c:	f5 e0       	ldi	r31, 0x05	; 5
    280e:	cc e5       	ldi	r28, 0x5C	; 92
    2810:	d6 e0       	ldi	r29, 0x06	; 6
    2812:	a6 ea       	ldi	r26, 0xA6	; 166
    2814:	b5 e0       	ldi	r27, 0x05	; 5
		b = PWM_MID;
		#endif
		
		if (b >= PWM_MIN && b <= PWM_MAX)
		{
			RX_raw[i] = b; 
    2816:	20 ef       	ldi	r18, 0xF0	; 240
    2818:	35 e0       	ldi	r19, 0x05	; 5
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    281a:	f8 94       	cli
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    281c:	78 94       	sei
    281e:	21 93       	st	Z+, r18
    2820:	31 93       	st	Z+, r19
			RX[i] = (int16_t)(RX_raw[i] - Config.RX_zero[i]) >> 2;
    2822:	89 91       	ld	r24, Y+
    2824:	99 91       	ld	r25, Y+
    2826:	a9 01       	movw	r20, r18
    2828:	48 1b       	sub	r20, r24
    282a:	59 0b       	sbc	r21, r25
    282c:	ca 01       	movw	r24, r20
    282e:	95 95       	asr	r25
    2830:	87 95       	ror	r24
    2832:	95 95       	asr	r25
    2834:	87 95       	ror	r24
    2836:	8d 93       	st	X+, r24
    2838:	9d 93       	st	X+, r25
	{
		RX_good = _RX_good;
		_RX_good = 0;
	}	
	
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
    283a:	55 e0       	ldi	r21, 0x05	; 5
    283c:	e6 3c       	cpi	r30, 0xC6	; 198
    283e:	f5 07       	cpc	r31, r21
    2840:	61 f7       	brne	.-40     	; 0x281a <rxRead+0x4c>
			RX[i] = (int16_t)(RX_raw[i] - Config.RX_zero[i]) >> 2;
		}
	}
	
	// divide throttle by 2
	RX[THR]	>>= 1;
    2842:	80 91 ac 05 	lds	r24, 0x05AC
    2846:	90 91 ad 05 	lds	r25, 0x05AD
    284a:	95 95       	asr	r25
    284c:	87 95       	ror	r24
    284e:	90 93 ad 05 	sts	0x05AD, r25
    2852:	80 93 ac 05 	sts	0x05AC, r24
}
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <rxCalibrate>:

uint8_t rxCalibrate()
{
	rxRead();
    285c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <rxRead>
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
	{
		if (i == THR)
		{
			if (RX_raw[THR] < PWM_LOW - 50 || RX_raw[THR] > PWM_LOW + 50)
    2860:	20 91 bc 05 	lds	r18, 0x05BC
    2864:	30 91 bd 05 	lds	r19, 0x05BD
    2868:	2a 51       	subi	r18, 0x1A	; 26
    286a:	34 40       	sbci	r19, 0x04	; 4
    286c:	e6 eb       	ldi	r30, 0xB6	; 182
    286e:	f5 e0       	ldi	r31, 0x05	; 5
}

uint8_t rxCalibrate()
{
	rxRead();
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
    2870:	40 e0       	ldi	r20, 0x00	; 0
	{
		if (i == THR)
    2872:	43 30       	cpi	r20, 0x03	; 3
    2874:	21 f4       	brne	.+8      	; 0x287e <rxCalibrate+0x22>
		{
			if (RX_raw[THR] < PWM_LOW - 50 || RX_raw[THR] > PWM_LOW + 50)
    2876:	25 36       	cpi	r18, 0x65	; 101
    2878:	31 05       	cpc	r19, r1
    287a:	50 f0       	brcs	.+20     	; 0x2890 <rxCalibrate+0x34>
    287c:	18 c0       	rjmp	.+48     	; 0x28ae <rxCalibrate+0x52>
				return 0;
		}
		else if ((RX_raw[i] != 0) && (RX_raw[i] < PWM_MID - 50 || RX_raw[i] > PWM_MID + 50))
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	29 f0       	breq	.+10     	; 0x2890 <rxCalibrate+0x34>
    2886:	8e 5b       	subi	r24, 0xBE	; 190
    2888:	95 40       	sbci	r25, 0x05	; 5
    288a:	85 36       	cpi	r24, 0x65	; 101
    288c:	91 05       	cpc	r25, r1
    288e:	78 f4       	brcc	.+30     	; 0x28ae <rxCalibrate+0x52>
}

uint8_t rxCalibrate()
{
	rxRead();
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
    2890:	4f 5f       	subi	r20, 0xFF	; 255
    2892:	32 96       	adiw	r30, 0x02	; 2
    2894:	48 30       	cpi	r20, 0x08	; 8
    2896:	69 f7       	brne	.-38     	; 0x2872 <rxCalibrate+0x16>
				return 0;
		}
		else if ((RX_raw[i] != 0) && (RX_raw[i] < PWM_MID - 50 || RX_raw[i] > PWM_MID + 50))
			return 0;
	}
	memcpy(&Config.RX_zero, &RX_raw, sizeof(Config.RX_zero));
    2898:	80 e1       	ldi	r24, 0x10	; 16
    289a:	e6 eb       	ldi	r30, 0xB6	; 182
    289c:	f5 e0       	ldi	r31, 0x05	; 5
    289e:	ac e5       	ldi	r26, 0x5C	; 92
    28a0:	b6 e0       	ldi	r27, 0x06	; 6
    28a2:	01 90       	ld	r0, Z+
    28a4:	0d 92       	st	X+, r0
    28a6:	8a 95       	dec	r24
    28a8:	e1 f7       	brne	.-8      	; 0x28a2 <rxCalibrate+0x46>
	return 1;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	08 95       	ret
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
	{
		if (i == THR)
		{
			if (RX_raw[THR] < PWM_LOW - 50 || RX_raw[THR] > PWM_LOW + 50)
				return 0;
    28ae:	80 e0       	ldi	r24, 0x00	; 0
		else if ((RX_raw[i] != 0) && (RX_raw[i] < PWM_MID - 50 || RX_raw[i] > PWM_MID + 50))
			return 0;
	}
	memcpy(&Config.RX_zero, &RX_raw, sizeof(Config.RX_zero));
	return 1;
    28b0:	08 95       	ret

000028b2 <Enqueue>:
{
	return (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE == buf->ReadPtr;
}

static void Enqueue(struct FifoBuffer* buf, uint8_t c)
{
    28b2:	fc 01       	movw	r30, r24
static noinit struct FifoBuffer TX_Buf;
static noinit struct FifoBuffer RX_Buf;

static uint8_t IsFull(struct FifoBuffer* buf)
{
	return (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE == buf->ReadPtr;
    28b4:	81 a1       	ldd	r24, Z+33	; 0x21
    28b6:	90 a1       	ldd	r25, Z+32	; 0x20
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	8f 71       	andi	r24, 0x1F	; 31
}

static void Enqueue(struct FifoBuffer* buf, uint8_t c)
{
	if (!IsFull(buf))
    28bc:	89 17       	cp	r24, r25
    28be:	49 f0       	breq	.+18     	; 0x28d2 <Enqueue+0x20>
	{
		buf->Buffer[buf->WritePtr] = c;
    28c0:	81 a1       	ldd	r24, Z+33	; 0x21
    28c2:	df 01       	movw	r26, r30
    28c4:	a8 0f       	add	r26, r24
    28c6:	b1 1d       	adc	r27, r1
    28c8:	6c 93       	st	X, r22
		buf->WritePtr = (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE;
    28ca:	81 a1       	ldd	r24, Z+33	; 0x21
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	8f 71       	andi	r24, 0x1F	; 31
    28d0:	81 a3       	std	Z+33, r24	; 0x21
    28d2:	08 95       	ret

000028d4 <serialInit>:
{
	// enable hardware
	//PRR0 |= PRUSART1;
	
	// reset pointers
	TX_Buf.WritePtr = 0;
    28d4:	10 92 5a 06 	sts	0x065A, r1
	TX_Buf.ReadPtr = 0;
    28d8:	10 92 59 06 	sts	0x0659, r1
	RX_Buf.ReadPtr = 0;
    28dc:	10 92 37 06 	sts	0x0637, r1
	RX_Buf.WritePtr = 0;
    28e0:	10 92 38 06 	sts	0x0638, r1
		
	// using USART1 with TXD on PD3 and RXD on PD2. Running with 115.2 kbaud
	UBRR1 = 10;
    28e4:	8a e0       	ldi	r24, 0x0A	; 10
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	90 93 cd 00 	sts	0x00CD, r25
    28ec:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A = 0;
    28f0:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = _BV(TXEN1) | _BV(RXEN1) | _BV(RXCIE1);
    28f4:	88 e9       	ldi	r24, 0x98	; 152
    28f6:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
    28fa:	86 e0       	ldi	r24, 0x06	; 6
    28fc:	80 93 ca 00 	sts	0x00CA, r24
    2900:	08 95       	ret

00002902 <serialWriteChar>:
}

void serialWriteChar(char c)
{
	if (UCSR1B == 0)
    2902:	90 91 c9 00 	lds	r25, 0x00C9
    2906:	99 23       	and	r25, r25
    2908:	c9 f0       	breq	.+50     	; 0x293c <serialWriteChar+0x3a>
		return;
		
	// if data register empty put byte in that register
	if (UCSR1A & _BV(UDRE1))
    290a:	90 91 c8 00 	lds	r25, 0x00C8
    290e:	95 ff       	sbrs	r25, 5
    2910:	08 c0       	rjmp	.+16     	; 0x2922 <serialWriteChar+0x20>
	{
		UDR1 = c;
    2912:	80 93 ce 00 	sts	0x00CE, r24
		UCSR1B |= _BV(UDRIE1);
    2916:	80 91 c9 00 	lds	r24, 0x00C9
    291a:	80 62       	ori	r24, 0x20	; 32
    291c:	80 93 c9 00 	sts	0x00C9, r24
    2920:	08 95       	ret
static noinit struct FifoBuffer TX_Buf;
static noinit struct FifoBuffer RX_Buf;

static uint8_t IsFull(struct FifoBuffer* buf)
{
	return (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE == buf->ReadPtr;
    2922:	90 91 5a 06 	lds	r25, 0x065A
    2926:	20 91 59 06 	lds	r18, 0x0659
    292a:	9f 5f       	subi	r25, 0xFF	; 255
    292c:	9f 71       	andi	r25, 0x1F	; 31
		UCSR1B |= _BV(UDRIE1);
	}
	else
	{
		// wait for free space in buffer
		while (IsFull(&TX_Buf));
    292e:	92 17       	cp	r25, r18
    2930:	c1 f3       	breq	.-16     	; 0x2922 <serialWriteChar+0x20>
		Enqueue(&TX_Buf, c);
    2932:	68 2f       	mov	r22, r24
    2934:	89 e3       	ldi	r24, 0x39	; 57
    2936:	96 e0       	ldi	r25, 0x06	; 6
    2938:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <Enqueue>
    293c:	08 95       	ret

0000293e <serialTerminate>:
	return Dequeue(&RX_Buf);
}

void serialTerminate()
{
	UCSR1A = 0;
    293e:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = 0;	
    2942:	10 92 c9 00 	sts	0x00C9, r1
    2946:	08 95       	ret

00002948 <__vector_15>:
#include "global.h"

static uint16_t t1_millis, t1_millis_fract, t1_ovf;

ISR(TIMER1_OVF_vect)
{
    2948:	1f 92       	push	r1
    294a:	0f 92       	push	r0
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	0f 92       	push	r0
    2950:	11 24       	eor	r1, r1
    2952:	2f 93       	push	r18
    2954:	3f 93       	push	r19
    2956:	4f 93       	push	r20
    2958:	5f 93       	push	r21
    295a:	6f 93       	push	r22
    295c:	8f 93       	push	r24
    295e:	9f 93       	push	r25
	t1_ovf++;
    2960:	80 91 6e 05 	lds	r24, 0x056E
    2964:	90 91 6f 05 	lds	r25, 0x056F
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	90 93 6f 05 	sts	0x056F, r25
    296e:	80 93 6e 05 	sts	0x056E, r24

	t1_millis += 3;
    2972:	80 91 72 05 	lds	r24, 0x0572
    2976:	90 91 73 05 	lds	r25, 0x0573
    297a:	9c 01       	movw	r18, r24
    297c:	2d 5f       	subi	r18, 0xFD	; 253
    297e:	3f 4f       	sbci	r19, 0xFF	; 255
    2980:	30 93 73 05 	sts	0x0573, r19
    2984:	20 93 72 05 	sts	0x0572, r18
	t1_millis_fract += 2768;
    2988:	20 91 70 05 	lds	r18, 0x0570
    298c:	30 91 71 05 	lds	r19, 0x0571
    2990:	a9 01       	movw	r20, r18
    2992:	40 53       	subi	r20, 0x30	; 48
    2994:	55 4f       	sbci	r21, 0xF5	; 245
	if (t1_millis_fract >= 10000)
    2996:	40 31       	cpi	r20, 0x10	; 16
    2998:	67 e2       	ldi	r22, 0x27	; 39
    299a:	56 07       	cpc	r21, r22
    299c:	28 f4       	brcc	.+10     	; 0x29a8 <__vector_15+0x60>
ISR(TIMER1_OVF_vect)
{
	t1_ovf++;

	t1_millis += 3;
	t1_millis_fract += 2768;
    299e:	50 93 71 05 	sts	0x0571, r21
    29a2:	40 93 70 05 	sts	0x0570, r20
    29a6:	0b c0       	rjmp	.+22     	; 0x29be <__vector_15+0x76>
	if (t1_millis_fract >= 10000)
	{
		t1_millis_fract -= 10000;
    29a8:	20 54       	subi	r18, 0x40	; 64
    29aa:	3c 41       	sbci	r19, 0x1C	; 28
    29ac:	30 93 71 05 	sts	0x0571, r19
    29b0:	20 93 70 05 	sts	0x0570, r18
		t1_millis++;
    29b4:	04 96       	adiw	r24, 0x04	; 4
    29b6:	90 93 73 05 	sts	0x0573, r25
    29ba:	80 93 72 05 	sts	0x0572, r24
	}
}
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	6f 91       	pop	r22
    29c4:	5f 91       	pop	r21
    29c6:	4f 91       	pop	r20
    29c8:	3f 91       	pop	r19
    29ca:	2f 91       	pop	r18
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

000029d6 <ticks>:

uint32_t ticks()
{
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
	uint16_t t1, t2;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    29da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29dc:	f8 94       	cli
	{
		t1 = t1_ovf;
    29de:	60 91 6e 05 	lds	r22, 0x056E
    29e2:	70 91 6f 05 	lds	r23, 0x056F
		t2 = TCNT1;
    29e6:	00 91 84 00 	lds	r16, 0x0084
    29ea:	10 91 85 00 	lds	r17, 0x0085
		if ((TIFR1 & _BV(TOV1)) && (t2 < 65533))
    29ee:	b0 9b       	sbis	0x16, 0	; 22
    29f0:	06 c0       	rjmp	.+12     	; 0x29fe <ticks+0x28>
    29f2:	0d 3f       	cpi	r16, 0xFD	; 253
    29f4:	9f ef       	ldi	r25, 0xFF	; 255
    29f6:	19 07       	cpc	r17, r25
    29f8:	10 f4       	brcc	.+4      	; 0x29fe <ticks+0x28>
			t1++;
    29fa:	6f 5f       	subi	r22, 0xFF	; 255
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29fe:	8f bf       	out	0x3f, r24	; 63
	}
	return ((uint32_t)t1 << 16) | t2;
    2a00:	cb 01       	movw	r24, r22
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	77 27       	eor	r23, r23
    2a08:	66 27       	eor	r22, r22
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	60 2b       	or	r22, r16
    2a10:	71 2b       	or	r23, r17
    2a12:	82 2b       	or	r24, r18
    2a14:	93 2b       	or	r25, r19
}
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	08 95       	ret

00002a1c <millis>:

// accuracy is 3ms
uint16_t millis()
{
	uint16_t t;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2a1c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a1e:	f8 94       	cli
		t = t1_millis;
    2a20:	80 91 72 05 	lds	r24, 0x0572
    2a24:	90 91 73 05 	lds	r25, 0x0573
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a28:	2f bf       	out	0x3f, r18	; 63
	return t;
}
    2a2a:	08 95       	ret

00002a2c <setup>:

void setup()
{
	// disable JTAG port
	MCUCR |= _BV(JTD);
    2a2c:	85 b7       	in	r24, 0x35	; 53
    2a2e:	80 68       	ori	r24, 0x80	; 128
    2a30:	85 bf       	out	0x35, r24	; 53
	MCUCR |= _BV(JTD);
    2a32:	85 b7       	in	r24, 0x35	; 53
    2a34:	80 68       	ori	r24, 0x80	; 128
    2a36:	85 bf       	out	0x35, r24	; 53
	
	// disable all hardware but Timer1
	//PRR0 = 0xFF & ~PRTIM1;
	//PRR1 = 0xFF;
	
	LED_DIR = OUTPUT;
    2a38:	23 9a       	sbi	0x04, 3	; 4
	
	// Timer1 @20MHz with overflow interrupt
	TCCR1B = _BV(CS10);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = _BV(TOIE1);
    2a40:	80 93 6f 00 	sts	0x006F, r24
    2a44:	08 95       	ret

00002a46 <_font12x16selector>:
	*/
};

static PGM_P _font12x16selector(unsigned char c)
{
	if (c >= 'a' && c <= 'z')
    2a46:	9f e9       	ldi	r25, 0x9F	; 159
    2a48:	98 0f       	add	r25, r24
    2a4a:	9a 31       	cpi	r25, 0x1A	; 26
    2a4c:	08 f4       	brcc	.+2      	; 0x2a50 <_font12x16selector+0xa>
		c -= 'a' - 'A';
    2a4e:	80 52       	subi	r24, 0x20	; 32
		
	return (PGM_P) _font12x16map + (c - 0x20) * BYTESPERCHAR;
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	20 52       	subi	r18, 0x20	; 32
    2a56:	31 09       	sbc	r19, r1
    2a58:	48 e1       	ldi	r20, 0x18	; 24
    2a5a:	42 9f       	mul	r20, r18
    2a5c:	c0 01       	movw	r24, r0
    2a5e:	43 9f       	mul	r20, r19
    2a60:	90 0d       	add	r25, r0
    2a62:	11 24       	eor	r1, r1
}
    2a64:	84 56       	subi	r24, 0x64	; 100
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	08 95       	ret

00002a6a <_font4x6selector>:
};

static PGM_P _font4x6selector(unsigned char c)
{
	//return (PGM_P) _font4x6map + (c % 0x30) * BYTESPERCHAR;
	return (PGM_P) _font4x6map + (c - 0x20) * BYTESPERCHAR;
    2a6a:	24 e0       	ldi	r18, 0x04	; 4
    2a6c:	82 9f       	mul	r24, r18
    2a6e:	c0 01       	movw	r24, r0
    2a70:	11 24       	eor	r1, r1
}
    2a72:	80 5e       	subi	r24, 0xE0	; 224
    2a74:	99 4f       	sbci	r25, 0xF9	; 249
    2a76:	08 95       	ret

00002a78 <_font6x8selector>:
	*/
};

static PGM_P _font6x8selector(unsigned char c)
{
	return (PGM_P) _font6x8map + (c - 0x20) * BYTESPERCHAR;
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	20 52       	subi	r18, 0x20	; 32
    2a7e:	31 09       	sbc	r19, r1
    2a80:	46 e0       	ldi	r20, 0x06	; 6
    2a82:	42 9f       	mul	r20, r18
    2a84:	c0 01       	movw	r24, r0
    2a86:	43 9f       	mul	r20, r19
    2a88:	90 0d       	add	r25, r0
    2a8a:	11 24       	eor	r1, r1
}
    2a8c:	8c 55       	subi	r24, 0x5C	; 92
    2a8e:	98 4f       	sbci	r25, 0xF8	; 248
    2a90:	08 95       	ret

00002a92 <_initConfig>:
	
};

static void _initConfig()
{
	memcpy_P(&Config, &defaultConfig, sizeof(Config));
    2a92:	4c e7       	ldi	r20, 0x7C	; 124
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	65 e2       	ldi	r22, 0x25	; 37
    2a98:	7a e0       	ldi	r23, 0x0A	; 10
    2a9a:	8b e5       	ldi	r24, 0x5B	; 91
    2a9c:	96 e0       	ldi	r25, 0x06	; 6
    2a9e:	0e 94 56 24 	call	0x48ac	; 0x48ac <memcpy_P>
	mixerLoadModel(Config.MixerIndex);
    2aa2:	80 91 92 06 	lds	r24, 0x0692
    2aa6:	0c 94 24 19 	jmp	0x3248	; 0x3248 <mixerLoadModel>

00002aaa <configLoad>:
}

void configLoad()
{
	eeprom_read_block(&Config, &EEConfig, sizeof(Config));
    2aaa:	4c e7       	ldi	r20, 0x7C	; 124
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	8b e5       	ldi	r24, 0x5B	; 91
    2ab4:	96 e0       	ldi	r25, 0x06	; 6
    2ab6:	0e 94 8d 24 	call	0x491a	; 0x491a <__eerd_block_m324pa>
	if (Config.signature != SIGNATURE)
    2aba:	80 91 5b 06 	lds	r24, 0x065B
    2abe:	80 36       	cpi	r24, 0x60	; 96
    2ac0:	11 f0       	breq	.+4      	; 0x2ac6 <configLoad+0x1c>
		_initConfig();
    2ac2:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <_initConfig>
    2ac6:	08 95       	ret

00002ac8 <configInit>:
}

void configInit()
{
	configLoad();
    2ac8:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <configLoad>

00002acc <configSave>:
}

void configSave()
{
	eeprom_update_block(&Config, &EEConfig, sizeof(Config));
    2acc:	4c e7       	ldi	r20, 0x7C	; 124
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	8b e5       	ldi	r24, 0x5B	; 91
    2ad6:	96 e0       	ldi	r25, 0x06	; 6
    2ad8:	0c 94 9d 24 	jmp	0x493a	; 0x493a <__eeupd_block_m324pa>

00002adc <configReset>:
}

void configReset()
{
	_initConfig();
    2adc:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <_initConfig>

00002ae0 <limit>:

static pid_state_t PID[3];

int16_t limit(int16_t value, int16_t low, int16_t high)
{
	if (value < low) return low;
    2ae0:	86 17       	cp	r24, r22
    2ae2:	97 07       	cpc	r25, r23
    2ae4:	2c f0       	brlt	.+10     	; 0x2af0 <limit+0x10>
    2ae6:	48 17       	cp	r20, r24
    2ae8:	59 07       	cpc	r21, r25
    2aea:	1c f4       	brge	.+6      	; 0x2af2 <limit+0x12>
    2aec:	ca 01       	movw	r24, r20
    2aee:	08 95       	ret
    2af0:	cb 01       	movw	r24, r22
	else if (value > high) return high;
	else return value;
}
    2af2:	08 95       	ret

00002af4 <calcChannel>:
	int32_t r;
	
	// RX = -140..+140
	// StickScaling = 0..+200
	// ==> -28000..+28000 -> 16bit
	err = RX[index] * Config.StickScaling[index];
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	a9 01       	movw	r20, r18
    2afa:	44 0f       	add	r20, r20
    2afc:	55 1f       	adc	r21, r21
    2afe:	fa 01       	movw	r30, r20
    2b00:	ea 55       	subi	r30, 0x5A	; 90
    2b02:	fa 4f       	sbci	r31, 0xFA	; 250
    2b04:	d9 01       	movw	r26, r18
    2b06:	a5 5a       	subi	r26, 0xA5	; 165
    2b08:	b9 4f       	sbci	r27, 0xF9	; 249
    2b0a:	d8 96       	adiw	r26, 0x38	; 56
    2b0c:	9c 91       	ld	r25, X
    2b0e:	01 90       	ld	r0, Z+
    2b10:	f0 81       	ld	r31, Z
    2b12:	e0 2d       	mov	r30, r0
    2b14:	9e 9f       	mul	r25, r30
    2b16:	b0 01       	movw	r22, r0
    2b18:	9f 9f       	mul	r25, r31
    2b1a:	70 0d       	add	r23, r0
    2b1c:	11 24       	eor	r1, r1
	
	if (index == YAW)
    2b1e:	82 30       	cpi	r24, 0x02	; 2
    2b20:	29 f4       	brne	.+10     	; 0x2b2c <calcChannel+0x38>
		err += GYRO_RATE[YAW];
    2b22:	40 91 de 05 	lds	r20, 0x05DE
    2b26:	50 91 df 05 	lds	r21, 0x05DF
    2b2a:	05 c0       	rjmp	.+10     	; 0x2b36 <calcChannel+0x42>
	else
		err += ANGLE[index];
    2b2c:	fa 01       	movw	r30, r20
    2b2e:	ec 52       	subi	r30, 0x2C	; 44
    2b30:	fa 4f       	sbci	r31, 0xFA	; 250
    2b32:	40 81       	ld	r20, Z
    2b34:	51 81       	ldd	r21, Z+1	; 0x01
    2b36:	46 0f       	add	r20, r22
    2b38:	57 1f       	adc	r21, r23
		
	r = (int32_t)err * Config.PID[index].PGain;
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	ee 0f       	add	r30, r30
    2b3e:	ff 1f       	adc	r31, r31
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	df 01       	movw	r26, r30
    2b46:	a5 5a       	subi	r26, 0xA5	; 165
    2b48:	b9 4f       	sbci	r27, 0xF9	; 249
    2b4a:	96 96       	adiw	r26, 0x26	; 38
    2b4c:	2c 91       	ld	r18, X
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	da 01       	movw	r26, r20
    2b52:	0e 94 4f 24 	call	0x489e	; 0x489e <__usmulhisi3>
	
	PID[index].Integral += err >> 8;
    2b56:	ec 58       	subi	r30, 0x8C	; 140
    2b58:	fa 4f       	sbci	r31, 0xFA	; 250
    2b5a:	45 2f       	mov	r20, r21
    2b5c:	55 0f       	add	r21, r21
    2b5e:	55 0b       	sbc	r21, r21
    2b60:	20 81       	ld	r18, Z
    2b62:	31 81       	ldd	r19, Z+1	; 0x01
    2b64:	24 0f       	add	r18, r20
    2b66:	35 1f       	adc	r19, r21
    2b68:	31 83       	std	Z+1, r19	; 0x01
    2b6a:	20 83       	st	Z, r18
	//r += PID[index].Integral * Config.PID[index].IGain;
	
	//r += (PID[index].Error - err) * Config.PID[index].DGain;
	//PID[index].Error = err;
	
	r >>= 12;
    2b6c:	3c e0       	ldi	r19, 0x0C	; 12
    2b6e:	95 95       	asr	r25
    2b70:	87 95       	ror	r24
    2b72:	77 95       	ror	r23
    2b74:	67 95       	ror	r22
    2b76:	3a 95       	dec	r19
    2b78:	d1 f7       	brne	.-12     	; 0x2b6e <calcChannel+0x7a>
	if (r < 0) r++;
    2b7a:	97 ff       	sbrs	r25, 7
    2b7c:	04 c0       	rjmp	.+8      	; 0x2b86 <calcChannel+0x92>
    2b7e:	6f 5f       	subi	r22, 0xFF	; 255
    2b80:	7f 4f       	sbci	r23, 0xFF	; 255
    2b82:	8f 4f       	sbci	r24, 0xFF	; 255
    2b84:	9f 4f       	sbci	r25, 0xFF	; 255
	return r;
}
    2b86:	cb 01       	movw	r24, r22
    2b88:	08 95       	ret

00002b8a <calcThrottle>:

uint16_t calcThrottle()
{
	int32_t r;
	r = RX[THR] * Config.StickScaling[THR];
    2b8a:	40 91 96 06 	lds	r20, 0x0696
    2b8e:	20 91 ac 05 	lds	r18, 0x05AC
    2b92:	30 91 ad 05 	lds	r19, 0x05AD
    2b96:	42 9f       	mul	r20, r18
    2b98:	c0 01       	movw	r24, r0
    2b9a:	43 9f       	mul	r20, r19
    2b9c:	90 0d       	add	r25, r0
    2b9e:	11 24       	eor	r1, r1
    2ba0:	aa 27       	eor	r26, r26
    2ba2:	97 fd       	sbrc	r25, 7
    2ba4:	a0 95       	com	r26
    2ba6:	ba 2f       	mov	r27, r26
	return r >> 5;
    2ba8:	75 e0       	ldi	r23, 0x05	; 5
    2baa:	b5 95       	asr	r27
    2bac:	a7 95       	ror	r26
    2bae:	97 95       	ror	r25
    2bb0:	87 95       	ror	r24
    2bb2:	7a 95       	dec	r23
    2bb4:	d1 f7       	brne	.-12     	; 0x2baa <calcThrottle+0x20>
}
    2bb6:	08 95       	ret

00002bb8 <controllerCalculate>:

void controllerCalculate()
{
	CONTROL[ROL] = -calcChannel(ROL);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <calcChannel>
    2bbe:	91 95       	neg	r25
    2bc0:	81 95       	neg	r24
    2bc2:	91 09       	sbc	r25, r1
    2bc4:	90 93 c7 05 	sts	0x05C7, r25
    2bc8:	80 93 c6 05 	sts	0x05C6, r24
	CONTROL[PIT] = calcChannel(PIT);
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <calcChannel>
    2bd2:	90 93 c9 05 	sts	0x05C9, r25
    2bd6:	80 93 c8 05 	sts	0x05C8, r24
	CONTROL[YAW] = -calcChannel(YAW);
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <calcChannel>
    2be0:	91 95       	neg	r25
    2be2:	81 95       	neg	r24
    2be4:	91 09       	sbc	r25, r1
    2be6:	90 93 cb 05 	sts	0x05CB, r25
    2bea:	80 93 ca 05 	sts	0x05CA, r24
	CONTROL[THR] = calcThrottle();
    2bee:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <calcThrottle>
    2bf2:	90 93 cd 05 	sts	0x05CD, r25
    2bf6:	80 93 cc 05 	sts	0x05CC, r24
    2bfa:	08 95       	ret

00002bfc <controllerReset>:
}

void controllerReset()
{
	// reset PIDs
	memset (&PID, 0, sizeof(PID));
    2bfc:	8c e0       	ldi	r24, 0x0C	; 12
    2bfe:	e4 e7       	ldi	r30, 0x74	; 116
    2c00:	f5 e0       	ldi	r31, 0x05	; 5
    2c02:	df 01       	movw	r26, r30
    2c04:	1d 92       	st	X+, r1
    2c06:	8a 95       	dec	r24
    2c08:	e9 f7       	brne	.-6      	; 0x2c04 <controllerReset+0x8>
    2c0a:	08 95       	ret

00002c0c <getAccAngle>:
	69, 72, 76, 80, 90, 
};

static int16_t getAccAngle(int16_t input)
{
	uint8_t index = abs(input) >> 1;
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	97 ff       	sbrs	r25, 7
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <getAccAngle+0xe>
    2c12:	ee 27       	eor	r30, r30
    2c14:	ff 27       	eor	r31, r31
    2c16:	e8 1b       	sub	r30, r24
    2c18:	f9 0b       	sbc	r31, r25
    2c1a:	f5 95       	asr	r31
    2c1c:	e7 95       	ror	r30
    2c1e:	e0 34       	cpi	r30, 0x40	; 64
    2c20:	08 f0       	brcs	.+2      	; 0x2c24 <getAccAngle+0x18>
    2c22:	ef e3       	ldi	r30, 0x3F	; 63
	if (index >= length(convtab))
		index = length(convtab) - 1;
	int16_t conv = pgm_read_byte(&convtab[index]) * 2;
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	ef 55       	subi	r30, 0x5F	; 95
    2c28:	f5 4f       	sbci	r31, 0xF5	; 245
    2c2a:	e4 91       	lpm	r30, Z
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
	if (input & 1) conv++;
    2c32:	80 fd       	sbrc	r24, 0
    2c34:	31 96       	adiw	r30, 0x01	; 1
	if (input < 0) conv = -conv;
    2c36:	97 ff       	sbrs	r25, 7
    2c38:	03 c0       	rjmp	.+6      	; 0x2c40 <getAccAngle+0x34>
    2c3a:	f1 95       	neg	r31
    2c3c:	e1 95       	neg	r30
    2c3e:	f1 09       	sbc	r31, r1
	return conv << 7;
}
    2c40:	cf 01       	movw	r24, r30
    2c42:	96 95       	lsr	r25
    2c44:	98 2f       	mov	r25, r24
    2c46:	88 27       	eor	r24, r24
    2c48:	97 95       	ror	r25
    2c4a:	87 95       	ror	r24
    2c4c:	08 95       	ret

00002c4e <calcComplementaryAngle>:
}

#define ALPHA				1
#define MAXALPHA			256
static int16_t calcComplementaryAngle(uint8_t axis)
{
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
	int32_t r;
	r = (int32_t)(ANGLE[axis] + GYRO_RATE[axis]) * (MAXALPHA - ALPHA);
    2c52:	48 2f       	mov	r20, r24
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	44 0f       	add	r20, r20
    2c58:	55 1f       	adc	r21, r21
    2c5a:	da 01       	movw	r26, r20
    2c5c:	ac 52       	subi	r26, 0x2C	; 44
    2c5e:	ba 4f       	sbci	r27, 0xFA	; 250
    2c60:	fa 01       	movw	r30, r20
    2c62:	e6 52       	subi	r30, 0x26	; 38
    2c64:	fa 4f       	sbci	r31, 0xFA	; 250
    2c66:	0d 90       	ld	r0, X+
    2c68:	bc 91       	ld	r27, X
    2c6a:	a0 2d       	mov	r26, r0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	a8 0f       	add	r26, r24
    2c72:	b9 1f       	adc	r27, r25
    2c74:	2f ef       	ldi	r18, 0xFF	; 255
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	0e 94 4f 24 	call	0x489e	; 0x489e <__usmulhisi3>
	r += (int32_t)ACC_ANGLE[axis] * ALPHA;
    2c7c:	fa 01       	movw	r30, r20
    2c7e:	e2 53       	subi	r30, 0x32	; 50
    2c80:	fa 4f       	sbci	r31, 0xFA	; 250
    2c82:	00 81       	ld	r16, Z
    2c84:	11 81       	ldd	r17, Z+1	; 0x01
    2c86:	22 27       	eor	r18, r18
    2c88:	17 fd       	sbrc	r17, 7
    2c8a:	20 95       	com	r18
    2c8c:	32 2f       	mov	r19, r18
    2c8e:	60 0f       	add	r22, r16
    2c90:	71 1f       	adc	r23, r17
    2c92:	82 1f       	adc	r24, r18
    2c94:	93 1f       	adc	r25, r19
	r >>= 8;
    2c96:	bb 27       	eor	r27, r27
    2c98:	97 fd       	sbrc	r25, 7
    2c9a:	ba 95       	dec	r27
    2c9c:	a9 2f       	mov	r26, r25
    2c9e:	98 2f       	mov	r25, r24
    2ca0:	87 2f       	mov	r24, r23
	if (r < 0) r++;
    2ca2:	b7 ff       	sbrs	r27, 7
    2ca4:	03 c0       	rjmp	.+6      	; 0x2cac <calcComplementaryAngle+0x5e>
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	a1 1d       	adc	r26, r1
    2caa:	b1 1d       	adc	r27, r1
	return r;
}
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	08 95       	ret

00002cb2 <imuCalculate>:
	
	lastCall += dt;
}

void imuCalculate()
{
    2cb2:	8f 92       	push	r8
    2cb4:	9f 92       	push	r9
    2cb6:	af 92       	push	r10
    2cb8:	bf 92       	push	r11
    2cba:	cf 92       	push	r12
    2cbc:	df 92       	push	r13
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
}

static void imuComplementary()
{
	static uint32_t lastCall;
	uint16_t dt = ticks() - lastCall;
    2cc6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
    2cca:	80 90 80 05 	lds	r8, 0x0580
    2cce:	90 90 81 05 	lds	r9, 0x0581
    2cd2:	a0 90 82 05 	lds	r10, 0x0582
    2cd6:	b0 90 83 05 	lds	r11, 0x0583
    2cda:	eb 01       	movw	r28, r22
    2cdc:	c8 19       	sub	r28, r8
    2cde:	d9 09       	sbc	r29, r9
		
	ACC_ANGLE[ROL] = getAccAngle(ACC[ROL]) + (Config.AccTrim[ROL] << 8);
    2ce0:	80 91 11 06 	lds	r24, 0x0611
    2ce4:	90 91 12 06 	lds	r25, 0x0612
    2ce8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <getAccAngle>
    2cec:	20 91 a1 06 	lds	r18, 0x06A1
    2cf0:	33 27       	eor	r19, r19
    2cf2:	27 fd       	sbrc	r18, 7
    2cf4:	30 95       	com	r19
    2cf6:	32 2f       	mov	r19, r18
    2cf8:	22 27       	eor	r18, r18
    2cfa:	28 0f       	add	r18, r24
    2cfc:	39 1f       	adc	r19, r25
    2cfe:	30 93 cf 05 	sts	0x05CF, r19
    2d02:	20 93 ce 05 	sts	0x05CE, r18
	ACC_ANGLE[PIT] = getAccAngle(ACC[PIT]) + (Config.AccTrim[PIT] << 8);
    2d06:	80 91 13 06 	lds	r24, 0x0613
    2d0a:	90 91 14 06 	lds	r25, 0x0614
    2d0e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <getAccAngle>
    2d12:	20 91 a2 06 	lds	r18, 0x06A2
    2d16:	33 27       	eor	r19, r19
    2d18:	27 fd       	sbrc	r18, 7
    2d1a:	30 95       	com	r19
    2d1c:	32 2f       	mov	r19, r18
    2d1e:	22 27       	eor	r18, r18
    2d20:	28 0f       	add	r18, r24
    2d22:	39 1f       	adc	r19, r25
    2d24:	30 93 d1 05 	sts	0x05D1, r19
    2d28:	20 93 d0 05 	sts	0x05D0, r18
	ACC_ANGLE[YAW] = getAccAngle(ACC[YAW]) + (90 << 8);
    2d2c:	80 91 15 06 	lds	r24, 0x0615
    2d30:	90 91 16 06 	lds	r25, 0x0616
    2d34:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <getAccAngle>
    2d38:	96 5a       	subi	r25, 0xA6	; 166
    2d3a:	90 93 d3 05 	sts	0x05D3, r25
    2d3e:	80 93 d2 05 	sts	0x05D2, r24
	return conv << 7;
}

static int16_t calcGyroRate(uint8_t axis, uint16_t dt)
{
	int32_t r = (int32_t)GYRO[axis] * dt >> 16;
    2d42:	a0 91 0b 06 	lds	r26, 0x060B
    2d46:	b0 91 0c 06 	lds	r27, 0x060C
    2d4a:	9e 01       	movw	r18, r28
    2d4c:	0e 94 4f 24 	call	0x489e	; 0x489e <__usmulhisi3>
    2d50:	bb 27       	eor	r27, r27
    2d52:	97 fd       	sbrc	r25, 7
    2d54:	b0 95       	com	r27
    2d56:	ab 2f       	mov	r26, r27
	if (r < 0) r++;	
    2d58:	b7 ff       	sbrs	r27, 7
    2d5a:	03 c0       	rjmp	.+6      	; 0x2d62 <imuCalculate+0xb0>
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	a1 1d       	adc	r26, r1
    2d60:	b1 1d       	adc	r27, r1
	return (int16_t)r;
    2d62:	90 93 db 05 	sts	0x05DB, r25
    2d66:	80 93 da 05 	sts	0x05DA, r24
	return conv << 7;
}

static int16_t calcGyroRate(uint8_t axis, uint16_t dt)
{
	int32_t r = (int32_t)GYRO[axis] * dt >> 16;
    2d6a:	a0 91 0d 06 	lds	r26, 0x060D
    2d6e:	b0 91 0e 06 	lds	r27, 0x060E
    2d72:	9e 01       	movw	r18, r28
    2d74:	0e 94 4f 24 	call	0x489e	; 0x489e <__usmulhisi3>
    2d78:	bb 27       	eor	r27, r27
    2d7a:	97 fd       	sbrc	r25, 7
    2d7c:	b0 95       	com	r27
    2d7e:	ab 2f       	mov	r26, r27
	if (r < 0) r++;	
    2d80:	b7 ff       	sbrs	r27, 7
    2d82:	03 c0       	rjmp	.+6      	; 0x2d8a <imuCalculate+0xd8>
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	a1 1d       	adc	r26, r1
    2d88:	b1 1d       	adc	r27, r1
	return (int16_t)r;
    2d8a:	90 93 dd 05 	sts	0x05DD, r25
    2d8e:	80 93 dc 05 	sts	0x05DC, r24
	return conv << 7;
}

static int16_t calcGyroRate(uint8_t axis, uint16_t dt)
{
	int32_t r = (int32_t)GYRO[axis] * dt >> 16;
    2d92:	a0 91 0f 06 	lds	r26, 0x060F
    2d96:	b0 91 10 06 	lds	r27, 0x0610
    2d9a:	9e 01       	movw	r18, r28
    2d9c:	0e 94 4f 24 	call	0x489e	; 0x489e <__usmulhisi3>
    2da0:	6c 01       	movw	r12, r24
    2da2:	ff 24       	eor	r15, r15
    2da4:	d7 fc       	sbrc	r13, 7
    2da6:	f0 94       	com	r15
    2da8:	ef 2c       	mov	r14, r15
	if (r < 0) r++;	
    2daa:	f7 fe       	sbrs	r15, 7
    2dac:	05 c0       	rjmp	.+10     	; 0x2db8 <imuCalculate+0x106>
    2dae:	8f ef       	ldi	r24, 0xFF	; 255
    2db0:	c8 1a       	sub	r12, r24
    2db2:	d8 0a       	sbc	r13, r24
    2db4:	e8 0a       	sbc	r14, r24
    2db6:	f8 0a       	sbc	r15, r24
	ACC_ANGLE[PIT] = getAccAngle(ACC[PIT]) + (Config.AccTrim[PIT] << 8);
	ACC_ANGLE[YAW] = getAccAngle(ACC[YAW]) + (90 << 8);

	GYRO_RATE[ROL] = calcGyroRate(ROL, dt);
	GYRO_RATE[PIT] = calcGyroRate(PIT, dt);
	GYRO_RATE[YAW] = calcGyroRate(YAW, dt);
    2db8:	d0 92 df 05 	sts	0x05DF, r13
    2dbc:	c0 92 de 05 	sts	0x05DE, r12
	
	ANGLE[ROL] = calcComplementaryAngle(ROL);
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <calcComplementaryAngle>
    2dc6:	90 93 d5 05 	sts	0x05D5, r25
    2dca:	80 93 d4 05 	sts	0x05D4, r24
	ANGLE[PIT] = calcComplementaryAngle(PIT);
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <calcComplementaryAngle>
    2dd4:	90 93 d7 05 	sts	0x05D7, r25
    2dd8:	80 93 d6 05 	sts	0x05D6, r24
}

static int16_t calcYawAngle()
{
	//int32_t r;
	return ANGLE[YAW] + GYRO_RATE[YAW];
    2ddc:	80 91 d8 05 	lds	r24, 0x05D8
    2de0:	90 91 d9 05 	lds	r25, 0x05D9
    2de4:	8c 0d       	add	r24, r12
    2de6:	9d 1d       	adc	r25, r13
	GYRO_RATE[PIT] = calcGyroRate(PIT, dt);
	GYRO_RATE[YAW] = calcGyroRate(YAW, dt);
	
	ANGLE[ROL] = calcComplementaryAngle(ROL);
	ANGLE[PIT] = calcComplementaryAngle(PIT);
	ANGLE[YAW] = calcYawAngle();
    2de8:	90 93 d9 05 	sts	0x05D9, r25
    2dec:	80 93 d8 05 	sts	0x05D8, r24
	
	lastCall += dt;
    2df0:	8c 0e       	add	r8, r28
    2df2:	9d 1e       	adc	r9, r29
    2df4:	a1 1c       	adc	r10, r1
    2df6:	b1 1c       	adc	r11, r1
    2df8:	80 92 80 05 	sts	0x0580, r8
    2dfc:	90 92 81 05 	sts	0x0581, r9
    2e00:	a0 92 82 05 	sts	0x0582, r10
    2e04:	b0 92 83 05 	sts	0x0583, r11
}

void imuCalculate()
{
	imuComplementary();
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	ff 90       	pop	r15
    2e0e:	ef 90       	pop	r14
    2e10:	df 90       	pop	r13
    2e12:	cf 90       	pop	r12
    2e14:	bf 90       	pop	r11
    2e16:	af 90       	pop	r10
    2e18:	9f 90       	pop	r9
    2e1a:	8f 90       	pop	r8
    2e1c:	08 95       	ret

00002e1e <lvaLoop>:
#include "digitals.h"
#include "controller.h"

void lvaLoop()
{
	if (BATT == 0 || Config.LVA == 0)
    2e1e:	20 91 0a 06 	lds	r18, 0x060A
    2e22:	22 23       	and	r18, r18
    2e24:	c9 f0       	breq	.+50     	; 0x2e58 <lvaLoop+0x3a>
    2e26:	80 91 9b 06 	lds	r24, 0x069B
    2e2a:	88 23       	and	r24, r24
    2e2c:	a9 f0       	breq	.+42     	; 0x2e58 <lvaLoop+0x3a>
		return;
		
	if (BATT < Config.LVA)
    2e2e:	28 17       	cp	r18, r24
    2e30:	98 f4       	brcc	.+38     	; 0x2e58 <lvaLoop+0x3a>
		digitalsBuzzInterval(limit(500 - (Config.LVA - BATT) * 6, 20, 500));
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	28 1b       	sub	r18, r24
    2e36:	31 09       	sbc	r19, r1
    2e38:	46 e0       	ldi	r20, 0x06	; 6
    2e3a:	42 9f       	mul	r20, r18
    2e3c:	c0 01       	movw	r24, r0
    2e3e:	43 9f       	mul	r20, r19
    2e40:	90 0d       	add	r25, r0
    2e42:	11 24       	eor	r1, r1
    2e44:	44 ef       	ldi	r20, 0xF4	; 244
    2e46:	51 e0       	ldi	r21, 0x01	; 1
    2e48:	64 e1       	ldi	r22, 0x14	; 20
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	8c 50       	subi	r24, 0x0C	; 12
    2e4e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e50:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <limit>
    2e54:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <digitalsBuzzInterval>
    2e58:	08 95       	ret

00002e5a <write16>:
		ESCCalibration();
}

#ifdef DEBUG
static void write16(int16_t v)
{
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	1f 92       	push	r1
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
	serialWriteChar(v & 0xFF);
    2e64:	99 83       	std	Y+1, r25	; 0x01
    2e66:	0e 94 81 14 	call	0x2902	; 0x2902 <serialWriteChar>
	serialWriteChar(v >> 8);
    2e6a:	99 81       	ldd	r25, Y+1	; 0x01
    2e6c:	89 2f       	mov	r24, r25
}
    2e6e:	0f 90       	pop	r0
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28

#ifdef DEBUG
static void write16(int16_t v)
{
	serialWriteChar(v & 0xFF);
	serialWriteChar(v >> 8);
    2e74:	0c 94 81 14 	jmp	0x2902	; 0x2902 <serialWriteChar>

00002e78 <arm>:
		}				
	}
}

void arm(uint8_t value)
{
    2e78:	90 91 e0 05 	lds	r25, 0x05E0
	if (value && !State.Armed)
    2e7c:	88 23       	and	r24, r24
    2e7e:	61 f0       	breq	.+24     	; 0x2e98 <arm+0x20>
    2e80:	91 11       	cpse	r25, r1
    2e82:	13 c0       	rjmp	.+38     	; 0x2eaa <arm+0x32>
	{
		State.Armed = ON;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 93 e0 05 	sts	0x05E0, r24
		LED = ON;
    2e8a:	2b 9a       	sbi	0x05, 3	; 5
		menuRefresh();
    2e8c:	0e 94 db 23 	call	0x47b6	; 0x47b6 <menuRefresh>
		lcdDisable();
    2e90:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdDisable>
		controllerReset();
    2e94:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <controllerReset>
	}
	else if (!value && State.Armed)
    2e98:	99 23       	and	r25, r25
    2e9a:	39 f0       	breq	.+14     	; 0x2eaa <arm+0x32>
	{
		State.Armed = OFF;
    2e9c:	10 92 e0 05 	sts	0x05E0, r1
		LED = OFF;
    2ea0:	2b 98       	cbi	0x05, 3	; 5
		menuRefresh();
    2ea2:	0e 94 db 23 	call	0x47b6	; 0x47b6 <menuRefresh>
		lcdEnable();
    2ea6:	0c 94 10 13 	jmp	0x2620	; 0x2620 <lcdEnable>
    2eaa:	08 95       	ret

00002eac <main>:
#endif

int main(void)
{
	// setup hardware w/o interrupts
	setup();
    2eac:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <setup>
	
	// enable interrupts
	sei();
    2eb0:	78 94       	sei
	wdt_disable();
}

static void init()
{
	configInit();
    2eb2:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <configInit>
	adcInit();
    2eb6:	0e 94 4a 10 	call	0x2094	; 0x2094 <adcInit>
	
	// rxInit will also call serialInit if mode = RX_MODE_CPPM
	rxInit(Config.ReceiverMode);
    2eba:	80 91 91 06 	lds	r24, 0x0691
    2ebe:	0e 94 b0 13 	call	0x2760	; 0x2760 <rxInit>
	
	mixerInit();
    2ec2:	0e 94 23 19 	call	0x3246	; 0x3246 <mixerInit>
	pwmInit();
    2ec6:	0e 94 84 13 	call	0x2708	; 0x2708 <pwmInit>
	keyboardInit();
    2eca:	0e 94 23 11 	call	0x2246	; 0x2246 <keyboardInit>

#ifndef NO_LCD
	lcdInit();
    2ece:	0e 94 2a 13 	call	0x2654	; 0x2654 <lcdInit>
	menuInit();
    2ed2:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <menuInit>
}

static void startup()
{
#ifndef NO_LCD
	lcdClear();
    2ed6:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
	lcdSetPos(0, 0);
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdSelectFont(&font12x16);
    2ee2:	88 e9       	ldi	r24, 0x98	; 152
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
	lcdWriteString_P(PSTR("KK2-Copter"));
    2eea:	82 ef       	ldi	r24, 0xF2	; 242
    2eec:	9a e0       	ldi	r25, 0x0A	; 10
    2eee:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
	lcdSelectFont(NULL);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
	lcdSetPos(3, 0);
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	83 e0       	ldi	r24, 0x03	; 3
    2efe:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdWriteString_P(versionNum);
    2f02:	8e e0       	ldi	r24, 0x0E	; 14
    2f04:	9b e0       	ldi	r25, 0x0B	; 11
    2f06:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
	lcdSetPos(4, 0);
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	84 e0       	ldi	r24, 0x04	; 4
    2f0e:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdWriteString_P(versionAuthor);
    2f12:	8d ef       	ldi	r24, 0xFD	; 253
    2f14:	9a e0       	ldi	r25, 0x0A	; 10
    2f16:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
#endif
	digitalsBuzzBlocking(500);
    2f1a:	84 ef       	ldi	r24, 0xF4	; 244
    2f1c:	91 e0       	ldi	r25, 0x01	; 1
    2f1e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <digitalsBuzzBlocking>
	WAITMS(700);	

	rxRead();
    2f22:	0e 94 e7 13 	call	0x27ce	; 0x27ce <rxRead>
	if (RX[THR] >= 90 || keyboardState() == (KEY_1 | KEY_4))		// enter ESC Calibration mode?
    2f26:	80 91 ac 05 	lds	r24, 0x05AC
    2f2a:	90 91 ad 05 	lds	r25, 0x05AD
    2f2e:	8a 35       	cpi	r24, 0x5A	; 90
    2f30:	91 05       	cpc	r25, r1
    2f32:	9c f0       	brlt	.+38     	; 0x2f5a <main+0xae>
	State.Error = e;
}

static void ESCCalibration()
{
	State.Mode = MODE_ESC_CAL;
    2f34:	c1 e0       	ldi	r28, 0x01	; 1
    2f36:	c0 93 e8 05 	sts	0x05E8, r28
#ifndef NO_LCD
	lcdClear();
    2f3a:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
	lcdSetPos(3, 18);
    2f3e:	62 e1       	ldi	r22, 0x12	; 18
    2f40:	83 e0       	ldi	r24, 0x03	; 3
    2f42:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdWriteString_P(PSTR("Calibrating ESCs"));
    2f46:	81 ee       	ldi	r24, 0xE1	; 225
    2f48:	9a e0       	ldi	r25, 0x0A	; 10
    2f4a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
#endif
	State.Armed = ON;
    2f4e:	c0 93 e0 05 	sts	0x05E0, r28
	pwmEnable();
    2f52:	0e 94 99 13 	call	0x2732	; 0x2732 <pwmEnable>
	while(1)
	{
		rxRead();
		for (uint8_t i = 0; i < 8; i++)
		{
			if (Config.Mixer[i].IsMotor)
    2f56:	c6 e0       	ldi	r28, 0x06	; 6
    2f58:	29 c0       	rjmp	.+82     	; 0x2fac <main+0x100>
#endif
	digitalsBuzzBlocking(500);
	WAITMS(700);	

	rxRead();
	if (RX[THR] >= 90 || keyboardState() == (KEY_1 | KEY_4))		// enter ESC Calibration mode?
    2f5a:	0e 94 ca 10 	call	0x2194	; 0x2194 <keyboardState>
    2f5e:	80 39       	cpi	r24, 0x90	; 144
    2f60:	49 f3       	breq	.-46     	; 0x2f34 <main+0x88>
	// init hardware
	init();

	startup();
	
	pwmEnable();
    2f62:	0e 94 99 13 	call	0x2732	; 0x2732 <pwmEnable>
	LOOPUS(CYCLE_TIME)
    2f66:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
    2f6a:	6b 01       	movw	r12, r22
    2f6c:	7c 01       	movw	r14, r24
	{
		static uint32_t lastStart;
		State.CycleTime = TICKSTOMICRO(_cycleStart - lastStart);
    2f6e:	84 e1       	ldi	r24, 0x14	; 20
    2f70:	88 2e       	mov	r8, r24
    2f72:	91 2c       	mov	r9, r1
    2f74:	a1 2c       	mov	r10, r1
    2f76:	b1 2c       	mov	r11, r1
#endif
}

static void checkState()
{
	State.ThrottleOff = RX[THR] < THROTTLE_OFF;
    2f78:	c1 e0       	ldi	r28, 0x01	; 1
    2f7a:	58 c0       	rjmp	.+176    	; 0x302c <main+0x180>
	while(1)
	{
		rxRead();
		for (uint8_t i = 0; i < 8; i++)
		{
			if (Config.Mixer[i].IsMotor)
    2f7c:	ce 9d       	mul	r28, r14
    2f7e:	f0 01       	movw	r30, r0
    2f80:	cf 9d       	mul	r28, r15
    2f82:	f0 0d       	add	r31, r0
    2f84:	11 24       	eor	r1, r1
    2f86:	e8 55       	subi	r30, 0x58	; 88
    2f88:	f9 4f       	sbci	r31, 0xF9	; 249
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 ff       	sbrs	r24, 0
    2f8e:	13 c0       	rjmp	.+38     	; 0x2fb6 <main+0x10a>
				pwmWrite(i, RX_raw[THR]);
    2f90:	60 91 bc 05 	lds	r22, 0x05BC
    2f94:	70 91 bd 05 	lds	r23, 0x05BD
			else
				pwmWrite(i, PWM_MID);
    2f98:	8e 2d       	mov	r24, r14
    2f9a:	0e 94 88 13 	call	0x2710	; 0x2710 <pwmWrite>
    2f9e:	2f ef       	ldi	r18, 0xFF	; 255
    2fa0:	e2 1a       	sub	r14, r18
    2fa2:	f2 0a       	sbc	r15, r18
	State.Armed = ON;
	pwmEnable();
	while(1)
	{
		rxRead();
		for (uint8_t i = 0; i < 8; i++)
    2fa4:	38 e0       	ldi	r19, 0x08	; 8
    2fa6:	e3 16       	cp	r14, r19
    2fa8:	f1 04       	cpc	r15, r1
    2faa:	41 f7       	brne	.-48     	; 0x2f7c <main+0xd0>
#endif
	State.Armed = ON;
	pwmEnable();
	while(1)
	{
		rxRead();
    2fac:	0e 94 e7 13 	call	0x27ce	; 0x27ce <rxRead>
    2fb0:	e1 2c       	mov	r14, r1
    2fb2:	f1 2c       	mov	r15, r1
    2fb4:	e3 cf       	rjmp	.-58     	; 0x2f7c <main+0xd0>
		for (uint8_t i = 0; i < 8; i++)
		{
			if (Config.Mixer[i].IsMotor)
				pwmWrite(i, RX_raw[THR]);
			else
				pwmWrite(i, PWM_MID);
    2fb6:	60 ef       	ldi	r22, 0xF0	; 240
    2fb8:	75 e0       	ldi	r23, 0x05	; 5
    2fba:	ee cf       	rjmp	.-36     	; 0x2f98 <main+0xec>
#ifndef NO_LCD
		EVERYMS(25)
			menuLoop();
#endif
	
		lvaLoop();
    2fbc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <lvaLoop>
	 	digitalsLoop();
    2fc0:	0e 94 61 10 	call	0x20c2	; 0x20c2 <digitalsLoop>
	serialWriteChar(v >> 8);
}

static void debug_output()
{
	serialWriteChar(0x1F);
    2fc4:	8f e1       	ldi	r24, 0x1F	; 31
    2fc6:	0e 94 81 14 	call	0x2902	; 0x2902 <serialWriteChar>
	serialWriteChar(0x1E);
    2fca:	8e e1       	ldi	r24, 0x1E	; 30
    2fcc:	0e 94 81 14 	call	0x2902	; 0x2902 <serialWriteChar>
	serialWriteChar(0x1C);
    2fd0:	8c e1       	ldi	r24, 0x1C	; 28
    2fd2:	0e 94 81 14 	call	0x2902	; 0x2902 <serialWriteChar>
	//write16(GYRO[0]);	
	//write16(GYRO[1]);
	//write16(GYRO[2]);
	write16(CONTROL[0]);
    2fd6:	80 91 c6 05 	lds	r24, 0x05C6
    2fda:	90 91 c7 05 	lds	r25, 0x05C7
    2fde:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <write16>
	write16(CONTROL[1]);
    2fe2:	80 91 c8 05 	lds	r24, 0x05C8
    2fe6:	90 91 c9 05 	lds	r25, 0x05C9
    2fea:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <write16>
	write16(CONTROL[2]);
    2fee:	80 91 ca 05 	lds	r24, 0x05CA
    2ff2:	90 91 cb 05 	lds	r25, 0x05CB
    2ff6:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <write16>
	write16(CONTROL[3]);
    2ffa:	80 91 cc 05 	lds	r24, 0x05CC
    2ffe:	90 91 cd 05 	lds	r25, 0x05CD
    3002:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <write16>
	//write16(ANGLE[2] >> 8);
	//write16(MIXER[0]);
	//write16(MIXER[1]);
	//write16(MIXER[2]);
	//write16(MIXER[3]);
	write16(State.CalculationTime);
    3006:	80 91 eb 05 	lds	r24, 0x05EB
    300a:	90 91 ec 05 	lds	r25, 0x05EC
    300e:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <write16>
	while (millis() < ms + __m);
}

static __inline__ void __iWaitForTicks(uint32_t __m, uint32_t t)
{
	while (ticks() < t + __m);
    3012:	30 e4       	ldi	r19, 0x40	; 64
    3014:	c3 0e       	add	r12, r19
    3016:	3c e9       	ldi	r19, 0x9C	; 156
    3018:	d3 1e       	adc	r13, r19
    301a:	e1 1c       	adc	r14, r1
    301c:	f1 1c       	adc	r15, r1
    301e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
    3022:	6c 15       	cp	r22, r12
    3024:	7d 05       	cpc	r23, r13
    3026:	8e 05       	cpc	r24, r14
    3028:	9f 05       	cpc	r25, r15
    302a:	c8 f3       	brcs	.-14     	; 0x301e <main+0x172>
	
	pwmEnable();
	LOOPUS(CYCLE_TIME)
	{
		static uint32_t lastStart;
		State.CycleTime = TICKSTOMICRO(_cycleStart - lastStart);
    302c:	80 91 8a 05 	lds	r24, 0x058A
    3030:	90 91 8b 05 	lds	r25, 0x058B
    3034:	a0 91 8c 05 	lds	r26, 0x058C
    3038:	b0 91 8d 05 	lds	r27, 0x058D
    303c:	a7 01       	movw	r20, r14
    303e:	96 01       	movw	r18, r12
    3040:	28 1b       	sub	r18, r24
    3042:	39 0b       	sbc	r19, r25
    3044:	4a 0b       	sbc	r20, r26
    3046:	5b 0b       	sbc	r21, r27
    3048:	ca 01       	movw	r24, r20
    304a:	b9 01       	movw	r22, r18
    304c:	a5 01       	movw	r20, r10
    304e:	94 01       	movw	r18, r8
    3050:	0e 94 16 24 	call	0x482c	; 0x482c <__udivmodsi4>
    3054:	30 93 ea 05 	sts	0x05EA, r19
    3058:	20 93 e9 05 	sts	0x05E9, r18
		lastStart = _cycleStart;
    305c:	c0 92 8a 05 	sts	0x058A, r12
    3060:	d0 92 8b 05 	sts	0x058B, r13
    3064:	e0 92 8c 05 	sts	0x058C, r14
    3068:	f0 92 8d 05 	sts	0x058D, r15
		
		rxRead();
    306c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <rxRead>
#endif
}

static void checkState()
{
	State.ThrottleOff = RX[THR] < THROTTLE_OFF;
    3070:	21 e0       	ldi	r18, 0x01	; 1
    3072:	80 91 ac 05 	lds	r24, 0x05AC
    3076:	90 91 ad 05 	lds	r25, 0x05AD
    307a:	05 97       	sbiw	r24, 0x05	; 5
    307c:	0c f0       	brlt	.+2      	; 0x3080 <main+0x1d4>
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	20 93 e1 05 	sts	0x05E1, r18
	State.Aux1 = RX[AX1] > 10;
    3084:	21 e0       	ldi	r18, 0x01	; 1
    3086:	80 91 ae 05 	lds	r24, 0x05AE
    308a:	90 91 af 05 	lds	r25, 0x05AF
    308e:	0b 97       	sbiw	r24, 0x0b	; 11
    3090:	0c f4       	brge	.+2      	; 0x3094 <main+0x1e8>
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	20 93 e3 05 	sts	0x05E3, r18
	State.Aux2 = RX[AX2] > 10;
    3098:	31 e0       	ldi	r19, 0x01	; 1
    309a:	80 91 b0 05 	lds	r24, 0x05B0
    309e:	90 91 b1 05 	lds	r25, 0x05B1
    30a2:	0b 97       	sbiw	r24, 0x0b	; 11
    30a4:	0c f4       	brge	.+2      	; 0x30a8 <main+0x1fc>
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	30 93 e4 05 	sts	0x05E4, r19
	State.Aux3 = RX[AX3] > 10;
    30ac:	31 e0       	ldi	r19, 0x01	; 1
    30ae:	80 91 b2 05 	lds	r24, 0x05B2
    30b2:	90 91 b3 05 	lds	r25, 0x05B3
    30b6:	0b 97       	sbiw	r24, 0x0b	; 11
    30b8:	0c f4       	brge	.+2      	; 0x30bc <main+0x210>
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	30 93 e5 05 	sts	0x05E5, r19
	State.Aux4 = RX[AX4] > 10;
    30c0:	31 e0       	ldi	r19, 0x01	; 1
    30c2:	80 91 b4 05 	lds	r24, 0x05B4
    30c6:	90 91 b5 05 	lds	r25, 0x05B5
    30ca:	0b 97       	sbiw	r24, 0x0b	; 11
    30cc:	0c f4       	brge	.+2      	; 0x30d0 <main+0x224>
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	30 93 e6 05 	sts	0x05E6, r19

	if (Config.SelfLevelMode != SELFLEVEL_STICK)
    30d4:	80 91 8d 06 	lds	r24, 0x068D
    30d8:	88 23       	and	r24, r24
    30da:	39 f0       	breq	.+14     	; 0x30ea <main+0x23e>
	{
		if (Config.SelfLevelMode == SELFLEVEL_ON)
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	19 f4       	brne	.+6      	; 0x30e6 <main+0x23a>
			State.SelfLevel = ON;
    30e0:	c0 93 e2 05 	sts	0x05E2, r28
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <main+0x23e>
		else
			State.SelfLevel = State.Aux1;
    30e6:	20 93 e2 05 	sts	0x05E2, r18
	}		
	
	uint8_t e = 0;
	if (!Config.CalibrateFlags)
    30ea:	80 91 80 06 	lds	r24, 0x0680
    30ee:	88 23       	and	r24, r24
    30f0:	11 f0       	breq	.+4      	; 0x30f6 <main+0x24a>
			State.SelfLevel = ON;
		else
			State.SelfLevel = State.Aux1;
	}		
	
	uint8_t e = 0;
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <main+0x24c>
	if (!Config.CalibrateFlags)
		e |= ERR_NOT_CALIBRATED;
    30f6:	90 e8       	ldi	r25, 0x80	; 128
	e |= (~RX_good) & (ERR_NO_PITCH|ERR_NO_ROLL|ERR_NO_THR|ERR_NO_YAW);
    30f8:	80 91 a5 05 	lds	r24, 0x05A5
    30fc:	80 95       	com	r24
    30fe:	8f 70       	andi	r24, 0x0F	; 15
    3100:	89 2b       	or	r24, r25
	
	State.Error = e;
    3102:	80 93 e7 05 	sts	0x05E7, r24

static void armingLoop()
{
	static uint16_t startArm;
	static uint16_t startOff;
	uint16_t t = millis();
    3106:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    310a:	8c 01       	movw	r16, r24
	
	if (menuPage != 0) return;
    310c:	80 91 ed 05 	lds	r24, 0x05ED
    3110:	81 11       	cpse	r24, r1
    3112:	6c c0       	rjmp	.+216    	; 0x31ec <main+0x340>
	if (State.Error != 0) return;
    3114:	80 91 e7 05 	lds	r24, 0x05E7
    3118:	81 11       	cpse	r24, r1
    311a:	68 c0       	rjmp	.+208    	; 0x31ec <main+0x340>
	
	if (startArm == 0)
    311c:	20 91 86 05 	lds	r18, 0x0586
    3120:	30 91 87 05 	lds	r19, 0x0587
    3124:	80 91 e1 05 	lds	r24, 0x05E1
    3128:	21 15       	cp	r18, r1
    312a:	31 05       	cpc	r19, r1
    312c:	99 f4       	brne	.+38     	; 0x3154 <main+0x2a8>
	{
		if (State.ThrottleOff && abs(RX[YAW]) > RX_THRESHOLD)
    312e:	88 23       	and	r24, r24
    3130:	81 f1       	breq	.+96     	; 0x3192 <main+0x2e6>
    3132:	80 91 aa 05 	lds	r24, 0x05AA
    3136:	90 91 ab 05 	lds	r25, 0x05AB
    313a:	97 ff       	sbrs	r25, 7
    313c:	03 c0       	rjmp	.+6      	; 0x3144 <main+0x298>
    313e:	91 95       	neg	r25
    3140:	81 95       	neg	r24
    3142:	91 09       	sbc	r25, r1
    3144:	8c 34       	cpi	r24, 0x4C	; 76
    3146:	91 05       	cpc	r25, r1
    3148:	24 f1       	brlt	.+72     	; 0x3192 <main+0x2e6>
			startArm = t;
    314a:	10 93 87 05 	sts	0x0587, r17
    314e:	00 93 86 05 	sts	0x0586, r16
    3152:	1f c0       	rjmp	.+62     	; 0x3192 <main+0x2e6>
	}
	else if (!State.ThrottleOff || abs(RX[YAW]) < RX_THRESHOLD)
    3154:	88 23       	and	r24, r24
    3156:	c9 f0       	breq	.+50     	; 0x318a <main+0x2de>
    3158:	80 91 aa 05 	lds	r24, 0x05AA
    315c:	90 91 ab 05 	lds	r25, 0x05AB
    3160:	ac 01       	movw	r20, r24
    3162:	46 5b       	subi	r20, 0xB6	; 182
    3164:	5f 4f       	sbci	r21, 0xFF	; 255
    3166:	45 39       	cpi	r20, 0x95	; 149
    3168:	51 05       	cpc	r21, r1
    316a:	78 f0       	brcs	.+30     	; 0x318a <main+0x2de>
		startArm = 0;
	else if (t - startArm >= ARM_DELAY)
    316c:	a8 01       	movw	r20, r16
    316e:	42 1b       	sub	r20, r18
    3170:	53 0b       	sbc	r21, r19
    3172:	9a 01       	movw	r18, r20
    3174:	20 3d       	cpi	r18, 0xD0	; 208
    3176:	37 40       	sbci	r19, 0x07	; 7
    3178:	60 f0       	brcs	.+24     	; 0x3192 <main+0x2e6>
	{
		if (RX[YAW] > RX_THRESHOLD)
    317a:	8c 34       	cpi	r24, 0x4C	; 76
    317c:	91 05       	cpc	r25, r1
    317e:	14 f0       	brlt	.+4      	; 0x3184 <main+0x2d8>
			arm(ON);
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <main+0x2da>
		else
			arm(OFF);
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <arm>
		startArm = 0;
    318a:	10 92 87 05 	sts	0x0587, r1
    318e:	10 92 86 05 	sts	0x0586, r1
	}				
	
	if (Config.AutoDisarm && !Config.ArmingMode)
    3192:	80 91 8f 06 	lds	r24, 0x068F
    3196:	88 23       	and	r24, r24
    3198:	49 f1       	breq	.+82     	; 0x31ec <main+0x340>
    319a:	80 91 8e 06 	lds	r24, 0x068E
    319e:	81 11       	cpse	r24, r1
    31a0:	25 c0       	rjmp	.+74     	; 0x31ec <main+0x340>
	{
		if (startOff == 0)
    31a2:	80 91 84 05 	lds	r24, 0x0584
    31a6:	90 91 85 05 	lds	r25, 0x0585
    31aa:	20 91 e1 05 	lds	r18, 0x05E1
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	59 f4       	brne	.+22     	; 0x31c8 <main+0x31c>
		{
			if (State.ThrottleOff && State.Armed)
    31b2:	22 23       	and	r18, r18
    31b4:	d9 f0       	breq	.+54     	; 0x31ec <main+0x340>
    31b6:	80 91 e0 05 	lds	r24, 0x05E0
    31ba:	88 23       	and	r24, r24
    31bc:	b9 f0       	breq	.+46     	; 0x31ec <main+0x340>
				startOff = t;
    31be:	10 93 85 05 	sts	0x0585, r17
    31c2:	00 93 84 05 	sts	0x0584, r16
    31c6:	12 c0       	rjmp	.+36     	; 0x31ec <main+0x340>
		}
		else if (!State.ThrottleOff || !State.Armed)
    31c8:	22 23       	and	r18, r18
    31ca:	61 f0       	breq	.+24     	; 0x31e4 <main+0x338>
    31cc:	20 91 e0 05 	lds	r18, 0x05E0
    31d0:	22 23       	and	r18, r18
    31d2:	41 f0       	breq	.+16     	; 0x31e4 <main+0x338>
		{
			startOff = 0;
		}
		else if (t - startOff >= DISARM_DELAY)
    31d4:	08 1b       	sub	r16, r24
    31d6:	19 0b       	sbc	r17, r25
    31d8:	00 36       	cpi	r16, 0x60	; 96
    31da:	1a 4e       	sbci	r17, 0xEA	; 234
    31dc:	38 f0       	brcs	.+14     	; 0x31ec <main+0x340>
		{
			arm(OFF);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <arm>
			startOff = 0;
    31e4:	10 92 85 05 	sts	0x0585, r1
    31e8:	10 92 84 05 	sts	0x0584, r1
		lastStart = _cycleStart;
		
		rxRead();
		checkState();
		armingLoop();
		sensorsRead();
    31ec:	0e 94 3b 1a 	call	0x3476	; 0x3476 <sensorsRead>
		imuCalculate();
    31f0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <imuCalculate>
		controllerCalculate();
    31f4:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <controllerCalculate>
		mixerCalculate();
    31f8:	0e 94 46 19 	call	0x328c	; 0x328c <mixerCalculate>
		mixerOutput();
    31fc:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <mixerOutput>

		State.CalculationTime = TICKSTOMICRO(ticks() - _cycleStart);
    3200:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ticks>
    3204:	6c 19       	sub	r22, r12
    3206:	7d 09       	sbc	r23, r13
    3208:	8e 09       	sbc	r24, r14
    320a:	9f 09       	sbc	r25, r15
    320c:	a5 01       	movw	r20, r10
    320e:	94 01       	movw	r18, r8
    3210:	0e 94 16 24 	call	0x482c	; 0x482c <__udivmodsi4>
    3214:	30 93 ec 05 	sts	0x05EC, r19
    3218:	20 93 eb 05 	sts	0x05EB, r18

#ifndef NO_LCD
		EVERYMS(25)
    321c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    3220:	8c 01       	movw	r16, r24
    3222:	80 91 88 05 	lds	r24, 0x0588
    3226:	90 91 89 05 	lds	r25, 0x0589
    322a:	98 01       	movw	r18, r16
    322c:	28 1b       	sub	r18, r24
    322e:	39 0b       	sbc	r19, r25
    3230:	29 31       	cpi	r18, 0x19	; 25
    3232:	31 05       	cpc	r19, r1
    3234:	08 f4       	brcc	.+2      	; 0x3238 <main+0x38c>
    3236:	c2 ce       	rjmp	.-636    	; 0x2fbc <main+0x110>
			menuLoop();
    3238:	0e 94 ac 23 	call	0x4758	; 0x4758 <menuLoop>
		mixerOutput();

		State.CalculationTime = TICKSTOMICRO(ticks() - _cycleStart);

#ifndef NO_LCD
		EVERYMS(25)
    323c:	10 93 89 05 	sts	0x0589, r17
    3240:	00 93 88 05 	sts	0x0588, r16
    3244:	ee cf       	rjmp	.-36     	; 0x3222 <main+0x376>

00003246 <mixerInit>:

uint16_t MIXER[OUTPUTS];
extern int16_t CHANNELS[4];

void mixerInit()
{
    3246:	08 95       	ret

00003248 <mixerLoadModel>:
	
}

void mixerLoadModel(uint8_t index)
{
    3248:	cf 93       	push	r28
    324a:	c8 2f       	mov	r28, r24
	uint8_t channels;
	model_t* pmodel;
	pmodel = (void*)pgm_read_word(&modelTable[index]);
    324c:	e8 2f       	mov	r30, r24
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	ee 0f       	add	r30, r30
    3252:	ff 1f       	adc	r31, r31
    3254:	e5 5e       	subi	r30, 0xE5	; 229
    3256:	f4 4f       	sbci	r31, 0xF4	; 244
    3258:	65 91       	lpm	r22, Z+
    325a:	74 91       	lpm	r23, Z
	channels = (uint8_t)pgm_read_byte(&pmodel->Channels);
    325c:	fb 01       	movw	r30, r22
    325e:	32 96       	adiw	r30, 0x02	; 2
    3260:	e4 91       	lpm	r30, Z
	memset(&Config.Mixer, 0, sizeof(Config.Mixer));
    3262:	80 e3       	ldi	r24, 0x30	; 48
    3264:	23 ea       	ldi	r18, 0xA3	; 163
    3266:	36 e0       	ldi	r19, 0x06	; 6
    3268:	d9 01       	movw	r26, r18
    326a:	1d 92       	st	X+, r1
    326c:	8a 95       	dec	r24
    326e:	e9 f7       	brne	.-6      	; 0x326a <mixerLoadModel+0x22>
	memcpy_P(&Config.Mixer, &pmodel->Channel, (uint8_t)(channels * sizeof(*pmodel->Channel)));
    3270:	4e 2f       	mov	r20, r30
    3272:	44 0f       	add	r20, r20
    3274:	4e 0f       	add	r20, r30
    3276:	44 0f       	add	r20, r20
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	6d 5f       	subi	r22, 0xFD	; 253
    327c:	7f 4f       	sbci	r23, 0xFF	; 255
    327e:	c9 01       	movw	r24, r18
    3280:	0e 94 56 24 	call	0x48ac	; 0x48ac <memcpy_P>
	Config.MixerIndex = index;
    3284:	c0 93 92 06 	sts	0x0692, r28
}
    3288:	cf 91       	pop	r28
    328a:	08 95       	ret

0000328c <mixerCalculate>:

void mixerCalculate()
{
    328c:	4f 92       	push	r4
    328e:	5f 92       	push	r5
    3290:	6f 92       	push	r6
    3292:	7f 92       	push	r7
    3294:	9f 92       	push	r9
    3296:	af 92       	push	r10
    3298:	bf 92       	push	r11
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	c8 ea       	ldi	r28, 0xA8	; 168
    32ac:	d6 e0       	ldi	r29, 0x06	; 6
    32ae:	3e ee       	ldi	r19, 0xEE	; 238
    32b0:	a3 2e       	mov	r10, r19
    32b2:	35 e0       	ldi	r19, 0x05	; 5
    32b4:	b3 2e       	mov	r11, r19
    32b6:	00 e0       	ldi	r16, 0x00	; 0
    32b8:	10 e0       	ldi	r17, 0x00	; 0
	{
 		if (Config.Mixer[i].Flags == FLAG_NONE)
 			MIXER[i] = 0;
 		else
		{
			if (Config.Mixer[i].IsServo)
    32ba:	46 e0       	ldi	r20, 0x06	; 6
    32bc:	94 2e       	mov	r9, r20
{
	int32_t r;
	
	for (uint8_t i = 0; i < OUTPUTS; i++)
	{
 		if (Config.Mixer[i].Flags == FLAG_NONE)
    32be:	88 81       	ld	r24, Y
    32c0:	81 11       	cpse	r24, r1
    32c2:	04 c0       	rjmp	.+8      	; 0x32cc <mixerCalculate+0x40>
 			MIXER[i] = 0;
    32c4:	f5 01       	movw	r30, r10
    32c6:	11 82       	std	Z+1, r1	; 0x01
    32c8:	10 82       	st	Z, r1
    32ca:	73 c0       	rjmp	.+230    	; 0x33b2 <mixerCalculate+0x126>
 		else
		{
			if (Config.Mixer[i].IsServo)
    32cc:	90 9e       	mul	r9, r16
    32ce:	f0 01       	movw	r30, r0
    32d0:	91 9e       	mul	r9, r17
    32d2:	f0 0d       	add	r31, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	e8 55       	subi	r30, 0x58	; 88
    32d8:	f9 4f       	sbci	r31, 0xF9	; 249
    32da:	80 81       	ld	r24, Z
    32dc:	81 ff       	sbrs	r24, 1
    32de:	07 c0       	rjmp	.+14     	; 0x32ee <mixerCalculate+0x62>
				r = PWM_MID - PWM_LOW;
    32e0:	24 ea       	ldi	r18, 0xA4	; 164
    32e2:	42 2e       	mov	r4, r18
    32e4:	55 24       	eor	r5, r5
    32e6:	53 94       	inc	r5
    32e8:	61 2c       	mov	r6, r1
    32ea:	71 2c       	mov	r7, r1
    32ec:	03 c0       	rjmp	.+6      	; 0x32f4 <mixerCalculate+0x68>
			else
				r = 0;
    32ee:	41 2c       	mov	r4, r1
    32f0:	51 2c       	mov	r5, r1
    32f2:	32 01       	movw	r6, r4
				
			r += (int32_t) CONTROL[ROL] * Config.Mixer[i].Aileron;
    32f4:	20 91 c6 05 	lds	r18, 0x05C6
    32f8:	30 91 c7 05 	lds	r19, 0x05C7
    32fc:	fe 01       	movw	r30, r28
    32fe:	34 97       	sbiw	r30, 0x04	; 4
    3300:	a0 81       	ld	r26, Z
    3302:	bb 27       	eor	r27, r27
    3304:	a7 fd       	sbrc	r26, 7
    3306:	b0 95       	com	r27
    3308:	0e 94 38 24 	call	0x4870	; 0x4870 <__mulhisi3>
    330c:	6b 01       	movw	r12, r22
    330e:	7c 01       	movw	r14, r24
    3310:	c4 0c       	add	r12, r4
    3312:	d5 1c       	adc	r13, r5
    3314:	e6 1c       	adc	r14, r6
    3316:	f7 1c       	adc	r15, r7
			r += (int32_t) CONTROL[PIT] * Config.Mixer[i].Elevator;
    3318:	20 91 c8 05 	lds	r18, 0x05C8
    331c:	30 91 c9 05 	lds	r19, 0x05C9
    3320:	31 96       	adiw	r30, 0x01	; 1
    3322:	a0 81       	ld	r26, Z
    3324:	bb 27       	eor	r27, r27
    3326:	a7 fd       	sbrc	r26, 7
    3328:	b0 95       	com	r27
    332a:	0e 94 38 24 	call	0x4870	; 0x4870 <__mulhisi3>
    332e:	c6 0e       	add	r12, r22
    3330:	d7 1e       	adc	r13, r23
    3332:	e8 1e       	adc	r14, r24
    3334:	f9 1e       	adc	r15, r25
			r += (int32_t) CONTROL[YAW] * Config.Mixer[i].Rudder;
    3336:	20 91 ca 05 	lds	r18, 0x05CA
    333a:	30 91 cb 05 	lds	r19, 0x05CB
    333e:	31 96       	adiw	r30, 0x01	; 1
    3340:	a0 81       	ld	r26, Z
    3342:	bb 27       	eor	r27, r27
    3344:	a7 fd       	sbrc	r26, 7
    3346:	b0 95       	com	r27
    3348:	0e 94 38 24 	call	0x4870	; 0x4870 <__mulhisi3>
    334c:	c6 0e       	add	r12, r22
    334e:	d7 1e       	adc	r13, r23
    3350:	e8 1e       	adc	r14, r24
    3352:	f9 1e       	adc	r15, r25
			r += (int32_t) CONTROL[THR] * Config.Mixer[i].Throttle;
    3354:	20 91 cc 05 	lds	r18, 0x05CC
    3358:	30 91 cd 05 	lds	r19, 0x05CD
    335c:	33 97       	sbiw	r30, 0x03	; 3
    335e:	a0 81       	ld	r26, Z
    3360:	bb 27       	eor	r27, r27
    3362:	a7 fd       	sbrc	r26, 7
    3364:	b0 95       	com	r27
    3366:	0e 94 38 24 	call	0x4870	; 0x4870 <__mulhisi3>
    336a:	c6 0e       	add	r12, r22
    336c:	d7 1e       	adc	r13, r23
    336e:	e8 1e       	adc	r14, r24
    3370:	f9 1e       	adc	r15, r25
    3372:	34 96       	adiw	r30, 0x04	; 4
			r += (int32_t) ((PWM_MID - PWM_LOW) * 32 / 50) * Config.Mixer[i].Offset;
    3374:	a0 81       	ld	r26, Z
    3376:	bb 27       	eor	r27, r27
    3378:	a7 fd       	sbrc	r26, 7
    337a:	b0 95       	com	r27
    337c:	2c e0       	ldi	r18, 0x0C	; 12
    337e:	31 e0       	ldi	r19, 0x01	; 1
    3380:	0e 94 4f 24 	call	0x489e	; 0x489e <__usmulhisi3>
    3384:	c6 0e       	add	r12, r22
    3386:	d7 1e       	adc	r13, r23
    3388:	e8 1e       	adc	r14, r24
    338a:	f9 1e       	adc	r15, r25
			MIXER[i] = limit(PWM_LOW + (r >> 5), PWM_MIN, PWM_MAX);
    338c:	95 e0       	ldi	r25, 0x05	; 5
    338e:	f5 94       	asr	r15
    3390:	e7 94       	ror	r14
    3392:	d7 94       	ror	r13
    3394:	c7 94       	ror	r12
    3396:	9a 95       	dec	r25
    3398:	d1 f7       	brne	.-12     	; 0x338e <mixerCalculate+0x102>
    339a:	c6 01       	movw	r24, r12
    339c:	84 5b       	subi	r24, 0xB4	; 180
    339e:	9b 4f       	sbci	r25, 0xFB	; 251
    33a0:	44 e3       	ldi	r20, 0x34	; 52
    33a2:	58 e0       	ldi	r21, 0x08	; 8
    33a4:	64 e8       	ldi	r22, 0x84	; 132
    33a6:	73 e0       	ldi	r23, 0x03	; 3
    33a8:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <limit>
    33ac:	f5 01       	movw	r30, r10
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
    33b2:	0f 5f       	subi	r16, 0xFF	; 255
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	26 96       	adiw	r28, 0x06	; 6
    33b8:	f2 e0       	ldi	r31, 0x02	; 2
    33ba:	af 0e       	add	r10, r31
    33bc:	b1 1c       	adc	r11, r1

void mixerCalculate()
{
	int32_t r;
	
	for (uint8_t i = 0; i < OUTPUTS; i++)
    33be:	08 30       	cpi	r16, 0x08	; 8
    33c0:	11 05       	cpc	r17, r1
    33c2:	09 f0       	breq	.+2      	; 0x33c6 <mixerCalculate+0x13a>
    33c4:	7c cf       	rjmp	.-264    	; 0x32be <mixerCalculate+0x32>
			r += (int32_t) CONTROL[THR] * Config.Mixer[i].Throttle;
			r += (int32_t) ((PWM_MID - PWM_LOW) * 32 / 50) * Config.Mixer[i].Offset;
			MIXER[i] = limit(PWM_LOW + (r >> 5), PWM_MIN, PWM_MAX);
		}
	}
}
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	ff 90       	pop	r15
    33d0:	ef 90       	pop	r14
    33d2:	df 90       	pop	r13
    33d4:	cf 90       	pop	r12
    33d6:	bf 90       	pop	r11
    33d8:	af 90       	pop	r10
    33da:	9f 90       	pop	r9
    33dc:	7f 90       	pop	r7
    33de:	6f 90       	pop	r6
    33e0:	5f 90       	pop	r5
    33e2:	4f 90       	pop	r4
    33e4:	08 95       	ret

000033e6 <mixerOutput>:

void mixerOutput()
{
    33e6:	ff 92       	push	r15
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	0e ee       	ldi	r16, 0xEE	; 238
    33f2:	15 e0       	ldi	r17, 0x05	; 5
    33f4:	c0 e0       	ldi	r28, 0x00	; 0
    33f6:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < OUTPUTS; i++)
	{
		if (Config.Mixer[i].IsServo)
    33f8:	56 e0       	ldi	r21, 0x06	; 6
    33fa:	f5 2e       	mov	r15, r21
    33fc:	8c 2f       	mov	r24, r28
    33fe:	fc 9e       	mul	r15, r28
    3400:	f0 01       	movw	r30, r0
    3402:	fd 9e       	mul	r15, r29
    3404:	f0 0d       	add	r31, r0
    3406:	11 24       	eor	r1, r1
    3408:	e8 55       	subi	r30, 0x58	; 88
    340a:	f9 4f       	sbci	r31, 0xF9	; 249
    340c:	90 81       	ld	r25, Z
    340e:	91 ff       	sbrs	r25, 1
    3410:	04 c0       	rjmp	.+8      	; 0x341a <mixerOutput+0x34>
			pwmWrite(i, MIXER[i]);
    3412:	f8 01       	movw	r30, r16
    3414:	60 81       	ld	r22, Z
    3416:	71 81       	ldd	r23, Z+1	; 0x01
    3418:	20 c0       	rjmp	.+64     	; 0x345a <mixerOutput+0x74>
		else if (Config.Mixer[i].IsMotor)
    341a:	90 ff       	sbrs	r25, 0
    341c:	1b c0       	rjmp	.+54     	; 0x3454 <mixerOutput+0x6e>
		{
			if (State.Armed && !State.ThrottleOff)
    341e:	90 91 e0 05 	lds	r25, 0x05E0
    3422:	99 23       	and	r25, r25
    3424:	a1 f0       	breq	.+40     	; 0x344e <mixerOutput+0x68>
    3426:	90 91 e1 05 	lds	r25, 0x05E1
    342a:	91 11       	cpse	r25, r1
    342c:	10 c0       	rjmp	.+32     	; 0x344e <mixerOutput+0x68>
				pwmWrite(i, max(MIXER[i], PWM_LOW + Config.MinThrottle * 10));
    342e:	20 91 97 06 	lds	r18, 0x0697
    3432:	fa e0       	ldi	r31, 0x0A	; 10
    3434:	2f 9f       	mul	r18, r31
    3436:	90 01       	movw	r18, r0
    3438:	11 24       	eor	r1, r1
    343a:	24 5b       	subi	r18, 0xB4	; 180
    343c:	3b 4f       	sbci	r19, 0xFB	; 251
    343e:	f8 01       	movw	r30, r16
    3440:	60 81       	ld	r22, Z
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	62 17       	cp	r22, r18
    3446:	73 07       	cpc	r23, r19
    3448:	40 f4       	brcc	.+16     	; 0x345a <mixerOutput+0x74>
    344a:	b9 01       	movw	r22, r18
    344c:	06 c0       	rjmp	.+12     	; 0x345a <mixerOutput+0x74>
			else
				pwmWrite(i, PWM_LOW);
    344e:	6c e4       	ldi	r22, 0x4C	; 76
    3450:	74 e0       	ldi	r23, 0x04	; 4
    3452:	03 c0       	rjmp	.+6      	; 0x345a <mixerOutput+0x74>
		}
		else
			pwmWrite(i, 0);
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	8c 2f       	mov	r24, r28
    345a:	0e 94 88 13 	call	0x2710	; 0x2710 <pwmWrite>
    345e:	21 96       	adiw	r28, 0x01	; 1
    3460:	0e 5f       	subi	r16, 0xFE	; 254
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void mixerOutput()
{
	for (uint8_t i = 0; i < OUTPUTS; i++)
    3464:	c8 30       	cpi	r28, 0x08	; 8
    3466:	d1 05       	cpc	r29, r1
    3468:	49 f6       	brne	.-110    	; 0x33fc <mixerOutput+0x16>
				pwmWrite(i, PWM_LOW);
		}
		else
			pwmWrite(i, 0);
	}			
}
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	ff 90       	pop	r15
    3474:	08 95       	ret

00003476 <sensorsRead>:

#define GYRO_DEADBAND	2

void sensorsRead()
{
	GYRO_raw[PIT] = adcGet(ADC_GYR_X);
    3476:	84 e0       	ldi	r24, 0x04	; 4
    3478:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    347c:	90 93 07 06 	sts	0x0607, r25
    3480:	80 93 06 06 	sts	0x0606, r24
	GYRO[PIT] = -(int16_t)(GYRO_raw[PIT] - Config.GYRO_zero[PIT]);
    3484:	20 91 76 06 	lds	r18, 0x0676
    3488:	30 91 77 06 	lds	r19, 0x0677
    348c:	28 1b       	sub	r18, r24
    348e:	39 0b       	sbc	r19, r25
#if GYRO_DEADBAND > 0
	if (abs(GYRO[PIT]) <= GYRO_DEADBAND) GYRO[PIT] = 0;
    3490:	c9 01       	movw	r24, r18
    3492:	02 96       	adiw	r24, 0x02	; 2
    3494:	05 97       	sbiw	r24, 0x05	; 5
    3496:	28 f0       	brcs	.+10     	; 0x34a2 <sensorsRead+0x2c>
#define GYRO_DEADBAND	2

void sensorsRead()
{
	GYRO_raw[PIT] = adcGet(ADC_GYR_X);
	GYRO[PIT] = -(int16_t)(GYRO_raw[PIT] - Config.GYRO_zero[PIT]);
    3498:	30 93 0e 06 	sts	0x060E, r19
    349c:	20 93 0d 06 	sts	0x060D, r18
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <sensorsRead+0x34>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[PIT]) <= GYRO_DEADBAND) GYRO[PIT] = 0;
    34a2:	10 92 0e 06 	sts	0x060E, r1
    34a6:	10 92 0d 06 	sts	0x060D, r1
#endif

	GYRO_raw[ROL] = adcGet(ADC_GYR_Y);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    34b0:	90 93 05 06 	sts	0x0605, r25
    34b4:	80 93 04 06 	sts	0x0604, r24
	GYRO[ROL] = -(int16_t)(GYRO_raw[ROL] - Config.GYRO_zero[ROL]);
    34b8:	20 91 74 06 	lds	r18, 0x0674
    34bc:	30 91 75 06 	lds	r19, 0x0675
    34c0:	28 1b       	sub	r18, r24
    34c2:	39 0b       	sbc	r19, r25
#if GYRO_DEADBAND > 0
	if (abs(GYRO[ROL]) <= GYRO_DEADBAND) GYRO[ROL] = 0;
    34c4:	c9 01       	movw	r24, r18
    34c6:	02 96       	adiw	r24, 0x02	; 2
    34c8:	05 97       	sbiw	r24, 0x05	; 5
    34ca:	28 f0       	brcs	.+10     	; 0x34d6 <sensorsRead+0x60>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[PIT]) <= GYRO_DEADBAND) GYRO[PIT] = 0;
#endif

	GYRO_raw[ROL] = adcGet(ADC_GYR_Y);
	GYRO[ROL] = -(int16_t)(GYRO_raw[ROL] - Config.GYRO_zero[ROL]);
    34cc:	30 93 0c 06 	sts	0x060C, r19
    34d0:	20 93 0b 06 	sts	0x060B, r18
    34d4:	04 c0       	rjmp	.+8      	; 0x34de <sensorsRead+0x68>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[ROL]) <= GYRO_DEADBAND) GYRO[ROL] = 0;
    34d6:	10 92 0c 06 	sts	0x060C, r1
    34da:	10 92 0b 06 	sts	0x060B, r1
#endif

	GYRO_raw[YAW] = adcGet(ADC_GYR_Z);
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    34e4:	90 93 09 06 	sts	0x0609, r25
    34e8:	80 93 08 06 	sts	0x0608, r24
	GYRO[YAW] = (int16_t)(GYRO_raw[YAW] - Config.GYRO_zero[YAW]);
    34ec:	20 91 78 06 	lds	r18, 0x0678
    34f0:	30 91 79 06 	lds	r19, 0x0679
    34f4:	82 1b       	sub	r24, r18
    34f6:	93 0b       	sbc	r25, r19
#if GYRO_DEADBAND > 0
	if (abs(GYRO[YAW]) <= GYRO_DEADBAND) GYRO[YAW] = 0;
    34f8:	9c 01       	movw	r18, r24
    34fa:	2e 5f       	subi	r18, 0xFE	; 254
    34fc:	3f 4f       	sbci	r19, 0xFF	; 255
    34fe:	25 30       	cpi	r18, 0x05	; 5
    3500:	31 05       	cpc	r19, r1
    3502:	28 f0       	brcs	.+10     	; 0x350e <sensorsRead+0x98>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[ROL]) <= GYRO_DEADBAND) GYRO[ROL] = 0;
#endif

	GYRO_raw[YAW] = adcGet(ADC_GYR_Z);
	GYRO[YAW] = (int16_t)(GYRO_raw[YAW] - Config.GYRO_zero[YAW]);
    3504:	90 93 10 06 	sts	0x0610, r25
    3508:	80 93 0f 06 	sts	0x060F, r24
    350c:	04 c0       	rjmp	.+8      	; 0x3516 <sensorsRead+0xa0>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[YAW]) <= GYRO_DEADBAND) GYRO[YAW] = 0;
    350e:	10 92 10 06 	sts	0x0610, r1
    3512:	10 92 0f 06 	sts	0x060F, r1
#endif
	
	ACC_raw[PIT] = adcGet(ADC_ACC_X);
    3516:	85 e0       	ldi	r24, 0x05	; 5
    3518:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    351c:	90 93 01 06 	sts	0x0601, r25
    3520:	80 93 00 06 	sts	0x0600, r24
	ACC[PIT] = (int16_t)(ACC_raw[PIT] - Config.ACC_zero[PIT]);
    3524:	20 91 7c 06 	lds	r18, 0x067C
    3528:	30 91 7d 06 	lds	r19, 0x067D
    352c:	82 1b       	sub	r24, r18
    352e:	93 0b       	sbc	r25, r19
    3530:	90 93 14 06 	sts	0x0614, r25
    3534:	80 93 13 06 	sts	0x0613, r24
	ACC_raw[ROL] = adcGet(ADC_ACC_Y);
    3538:	86 e0       	ldi	r24, 0x06	; 6
    353a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    353e:	90 93 ff 05 	sts	0x05FF, r25
    3542:	80 93 fe 05 	sts	0x05FE, r24
	ACC[ROL] = (int16_t)(ACC_raw[ROL] - Config.ACC_zero[ROL]);
    3546:	20 91 7a 06 	lds	r18, 0x067A
    354a:	30 91 7b 06 	lds	r19, 0x067B
    354e:	82 1b       	sub	r24, r18
    3550:	93 0b       	sbc	r25, r19
    3552:	90 93 12 06 	sts	0x0612, r25
    3556:	80 93 11 06 	sts	0x0611, r24
	ACC_raw[YAW] = adcGet(ADC_ACC_Z);
    355a:	87 e0       	ldi	r24, 0x07	; 7
    355c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    3560:	90 93 03 06 	sts	0x0603, r25
    3564:	80 93 02 06 	sts	0x0602, r24
	ACC[YAW] = (int16_t)(ACC_raw[YAW] - Config.ACC_zero[YAW]);
    3568:	20 91 7e 06 	lds	r18, 0x067E
    356c:	30 91 7f 06 	lds	r19, 0x067F
    3570:	82 1b       	sub	r24, r18
    3572:	93 0b       	sbc	r25, r19
    3574:	90 93 16 06 	sts	0x0616, r25
    3578:	80 93 15 06 	sts	0x0615, r24

	BATT = adcGet(ADC_VBAT) * 100 / 376;
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    3582:	24 e6       	ldi	r18, 0x64	; 100
    3584:	ac 01       	movw	r20, r24
    3586:	24 9f       	mul	r18, r20
    3588:	c0 01       	movw	r24, r0
    358a:	25 9f       	mul	r18, r21
    358c:	90 0d       	add	r25, r0
    358e:	11 24       	eor	r1, r1
    3590:	68 e7       	ldi	r22, 0x78	; 120
    3592:	71 e0       	ldi	r23, 0x01	; 1
    3594:	0e 94 ee 23 	call	0x47dc	; 0x47dc <__udivmodhi4>
    3598:	60 93 0a 06 	sts	0x060A, r22
	
#ifdef SIMULATOR
	GYRO[0] = 0;
    359c:	10 92 0c 06 	sts	0x060C, r1
    35a0:	10 92 0b 06 	sts	0x060B, r1
	GYRO[1] = 0;
    35a4:	10 92 0e 06 	sts	0x060E, r1
    35a8:	10 92 0d 06 	sts	0x060D, r1
	GYRO[2] = 0;
    35ac:	10 92 10 06 	sts	0x0610, r1
    35b0:	10 92 0f 06 	sts	0x060F, r1
	ACC[0] = 0;
    35b4:	10 92 12 06 	sts	0x0612, r1
    35b8:	10 92 11 06 	sts	0x0611, r1
	ACC[1] = 0;
    35bc:	10 92 14 06 	sts	0x0614, r1
    35c0:	10 92 13 06 	sts	0x0613, r1
	ACC[2] = 0;
    35c4:	10 92 16 06 	sts	0x0616, r1
    35c8:	10 92 15 06 	sts	0x0615, r1
    35cc:	08 95       	ret

000035ce <sensorsCalibrate>:
#endif
}

void sensorsCalibrate()
{
	sensorsRead();
    35ce:	0e 94 3b 1a 	call	0x3476	; 0x3476 <sensorsRead>
	memcpy(&Config.GYRO_zero, &GYRO_raw, sizeof(Config.GYRO_zero));
    35d2:	86 e0       	ldi	r24, 0x06	; 6
    35d4:	e4 e0       	ldi	r30, 0x04	; 4
    35d6:	f6 e0       	ldi	r31, 0x06	; 6
    35d8:	a4 e7       	ldi	r26, 0x74	; 116
    35da:	b6 e0       	ldi	r27, 0x06	; 6
    35dc:	01 90       	ld	r0, Z+
    35de:	0d 92       	st	X+, r0
    35e0:	8a 95       	dec	r24
    35e2:	e1 f7       	brne	.-8      	; 0x35dc <sensorsCalibrate+0xe>
	memcpy(&Config.ACC_zero, &ACC_raw, sizeof(Config.ACC_zero));
    35e4:	86 e0       	ldi	r24, 0x06	; 6
    35e6:	ee ef       	ldi	r30, 0xFE	; 254
    35e8:	f5 e0       	ldi	r31, 0x05	; 5
    35ea:	aa e7       	ldi	r26, 0x7A	; 122
    35ec:	b6 e0       	ldi	r27, 0x06	; 6
    35ee:	01 90       	ld	r0, Z+
    35f0:	0d 92       	st	X+, r0
    35f2:	8a 95       	dec	r24
    35f4:	e1 f7       	brne	.-8      	; 0x35ee <sensorsCalibrate+0x20>
	//Config.ACC_zero[ZAXIS] -= 124;
	Config.CalibrateFlags = 1;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	80 93 80 06 	sts	0x0680, r24
    35fc:	08 95       	ret

000035fe <tsmMain>:
	menuLoop();
}

static PGM_P tsmMain(uint8_t index)
{
	return (PGM_P)pgm_read_word(&lstMenu[index]);
    35fe:	e8 2f       	mov	r30, r24
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	e5 5e       	subi	r30, 0xE5	; 229
    3608:	ff 4e       	sbci	r31, 0xEF	; 239
}
    360a:	85 91       	lpm	r24, Z+
    360c:	94 91       	lpm	r25, Z
    360e:	08 95       	ret

00003610 <loadPage>:
	writePadded(s, len);
	lcdReverse(0);
}

static void loadPage(uint8_t pageIndex)
{
    3610:	cf 93       	push	r28
    3612:	c8 2f       	mov	r28, r24
	memcpy_P(&currentPage, &pages[pageIndex], sizeof(currentPage));
    3614:	86 e0       	ldi	r24, 0x06	; 6
    3616:	c8 9f       	mul	r28, r24
    3618:	b0 01       	movw	r22, r0
    361a:	11 24       	eor	r1, r1
    361c:	63 5c       	subi	r22, 0xC3	; 195
    361e:	7f 4e       	sbci	r23, 0xEF	; 239
    3620:	46 e0       	ldi	r20, 0x06	; 6
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	8a e9       	ldi	r24, 0x9A	; 154
    3626:	95 e0       	ldi	r25, 0x05	; 5
    3628:	0e 94 56 24 	call	0x48ac	; 0x48ac <memcpy_P>
	menuPage = pageIndex;
    362c:	c0 93 ed 05 	sts	0x05ED, r28
	keys = KEY_MENU;
    3630:	84 e0       	ldi	r24, 0x04	; 4
    3632:	80 93 a4 05 	sts	0x05A4, r24
	elementIndex = 0;
    3636:	10 92 a3 05 	sts	0x05A3, r1
	subpage = 0;
    363a:	10 92 a2 05 	sts	0x05A2, r1
}
    363e:	cf 91       	pop	r28
    3640:	08 95       	ret

00003642 <tsmLoadModelLayout>:
{
	return (PGM_P)pgm_read_word(&lstMenu[index]);
}

static PGM_P tsmLoadModelLayout(uint8_t index)
{
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	00 d0       	rcall	.+0      	; 0x3648 <tsmLoadModelLayout+0x6>
    3648:	1f 92       	push	r1
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
	model_t model;
	model_t* pmodel = (model_t*)pgm_read_word(&modelTable[index]);
    364e:	e8 2f       	mov	r30, r24
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	ee 0f       	add	r30, r30
    3654:	ff 1f       	adc	r31, r31
    3656:	e5 5e       	subi	r30, 0xE5	; 229
    3658:	f4 4f       	sbci	r31, 0xF4	; 244
    365a:	65 91       	lpm	r22, Z+
    365c:	74 91       	lpm	r23, Z
	memcpy_P(&model, pmodel, sizeof(model));
    365e:	43 e0       	ldi	r20, 0x03	; 3
    3660:	50 e0       	ldi	r21, 0x00	; 0
    3662:	ce 01       	movw	r24, r28
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	0e 94 56 24 	call	0x48ac	; 0x48ac <memcpy_P>
	return (PGM_P)model.Name;
}
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	08 95       	ret

0000367a <writeSpace>:
#define TYPE_UINT8		0
#define TYPE_INT8		1
#define TYPE_INT16		3

static void writeSpace(int8_t len)
{
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	d8 2f       	mov	r29, r24
	for (int8_t i = 0; i < len; i++)
    3680:	c0 e0       	ldi	r28, 0x00	; 0
    3682:	cd 17       	cp	r28, r29
    3684:	2c f4       	brge	.+10     	; 0x3690 <writeSpace+0x16>
		lcdWriteChar(32);
    3686:	80 e2       	ldi	r24, 0x20	; 32
    3688:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
    368c:	cf 5f       	subi	r28, 0xFF	; 255
    368e:	f9 cf       	rjmp	.-14     	; 0x3682 <writeSpace+0x8>
}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	08 95       	ret

00003696 <writePadded_P>:
	lcdWriteString(s);
	writeSpace(len - strlen(s));
}

static void writePadded_P(const char *s, uint8_t len)
{
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	1f 92       	push	r1
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	8c 01       	movw	r16, r24
	lcdWriteString_P(s);
    36a6:	69 83       	std	Y+1, r22	; 0x01
    36a8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    36ac:	c8 01       	movw	r24, r16
    36ae:	0e 94 5f 24 	call	0x48be	; 0x48be <__strlen_P>
	writeSpace(len - strlen_P(s));
    36b2:	69 81       	ldd	r22, Y+1	; 0x01
    36b4:	68 1b       	sub	r22, r24
    36b6:	86 2f       	mov	r24, r22
}
    36b8:	0f 90       	pop	r0
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
}

static void writePadded_P(const char *s, uint8_t len)
{
	lcdWriteString_P(s);
	writeSpace(len - strlen_P(s));
    36c2:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <writeSpace>

000036c6 <writeSoftkeys>:
}

static void writeSoftkeys(const char* sk)
{
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
	if (!sk)
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	31 f4       	brne	.+12     	; 0x36dc <writeSoftkeys+0x16>
		sk = currentPage.softkeys;
    36d0:	c0 91 9a 05 	lds	r28, 0x059A
    36d4:	d0 91 9b 05 	lds	r29, 0x059B
	if (sk)
    36d8:	20 97       	sbiw	r28, 0x00	; 0
    36da:	51 f0       	breq	.+20     	; 0x36f0 <writeSoftkeys+0x2a>
	{
		lcdSetPos(7, 0);
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	87 e0       	ldi	r24, 0x07	; 7
    36e0:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		writePadded_P(sk, 21);
    36e4:	65 e1       	ldi	r22, 0x15	; 21
    36e6:	ce 01       	movw	r24, r28
	}
}
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
	if (!sk)
		sk = currentPage.softkeys;
	if (sk)
	{
		lcdSetPos(7, 0);
		writePadded_P(sk, 21);
    36ec:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <writePadded_P>
	}
}
    36f0:	df 91       	pop	r29
    36f2:	cf 91       	pop	r28
    36f4:	08 95       	ret

000036f6 <writeString_P>:

static void writeString_P(uint8_t x, uint8_t y, PGM_P str, uint8_t len, uint8_t index)
{
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	00 d0       	rcall	.+0      	; 0x3704 <writeString_P+0xe>
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	18 2f       	mov	r17, r24
    370a:	7a 01       	movw	r14, r20
	lcdReverse(index == elementIndex);
    370c:	91 e0       	ldi	r25, 0x01	; 1
    370e:	80 91 a3 05 	lds	r24, 0x05A3
    3712:	08 13       	cpse	r16, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	89 2f       	mov	r24, r25
    3718:	2a 83       	std	Y+2, r18	; 0x02
    371a:	69 83       	std	Y+1, r22	; 0x01
    371c:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
	lcdSetPos(x, y);
    3720:	69 81       	ldd	r22, Y+1	; 0x01
    3722:	81 2f       	mov	r24, r17
    3724:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	writePadded_P(str, len);
    3728:	2a 81       	ldd	r18, Y+2	; 0x02
    372a:	62 2f       	mov	r22, r18
    372c:	c7 01       	movw	r24, r14
    372e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <writePadded_P>
	lcdReverse(0);
    3732:	80 e0       	ldi	r24, 0x00	; 0
}
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	1f 91       	pop	r17
    373e:	0f 91       	pop	r16
    3740:	ff 90       	pop	r15
    3742:	ef 90       	pop	r14
static void writeString_P(uint8_t x, uint8_t y, PGM_P str, uint8_t len, uint8_t index)
{
	lcdReverse(index == elementIndex);
	lcdSetPos(x, y);
	writePadded_P(str, len);
	lcdReverse(0);
    3744:	0c 94 06 13 	jmp	0x260c	; 0x260c <lcdReverse>

00003748 <showMotor>:

#define CENTER_X	96
#define CENTER_Y	32

static void showMotor(uint8_t motor, uint8_t withDir)
{
    3748:	df 92       	push	r13
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	e8 2e       	mov	r14, r24
    3758:	f6 2e       	mov	r15, r22
	uint8_t x, y;
	mixer_channel_t *channel = &Config.Mixer[motor];
    375a:	86 e0       	ldi	r24, 0x06	; 6
    375c:	e8 9e       	mul	r14, r24
    375e:	e0 01       	movw	r28, r0
    3760:	11 24       	eor	r1, r1
    3762:	cd 55       	subi	r28, 0x5D	; 93
    3764:	d9 4f       	sbci	r29, 0xF9	; 249
	
	if (channel->IsMotor)
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	80 ff       	sbrs	r24, 0
    376a:	69 c0       	rjmp	.+210    	; 0x383e <showMotor+0xf6>
	{
		x = CENTER_X + (channel->Aileron / 4);
    376c:	99 81       	ldd	r25, Y+1	; 0x01
    376e:	97 fd       	sbrc	r25, 7
    3770:	9d 5f       	subi	r25, 0xFD	; 253
    3772:	09 2f       	mov	r16, r25
    3774:	05 95       	asr	r16
    3776:	05 95       	asr	r16
		y = CENTER_Y - (channel->Elevator / 4);
    3778:	1a 81       	ldd	r17, Y+2	; 0x02
    377a:	17 fd       	sbrc	r17, 7
    377c:	1d 5f       	subi	r17, 0xFD	; 253
    377e:	15 95       	asr	r17
    3780:	15 95       	asr	r17
    3782:	11 95       	neg	r17
    3784:	60 e2       	ldi	r22, 0x20	; 32
    3786:	61 0f       	add	r22, r17
	
		lcdLine(x, y, CENTER_X, CENTER_Y);
    3788:	20 e2       	ldi	r18, 0x20	; 32
    378a:	40 e6       	ldi	r20, 0x60	; 96
    378c:	80 e6       	ldi	r24, 0x60	; 96
    378e:	80 0f       	add	r24, r16
    3790:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <lcdLine>
		lcdXY(CENTER_X - 2, CENTER_Y - 2);
    3794:	6e e1       	ldi	r22, 0x1E	; 30
    3796:	8e e5       	ldi	r24, 0x5E	; 94
    3798:	0e 94 45 11 	call	0x228a	; 0x228a <lcdXY>
		lcdWriteGlyph_P(&glyFC, ROP_COPY);
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	84 ee       	ldi	r24, 0xE4	; 228
    37a0:	99 e0       	ldi	r25, 0x09	; 9
    37a2:	0e 94 b6 12 	call	0x256c	; 0x256c <lcdWriteGlyph_P>
		lcdXY(x - 4, y - 4);
    37a6:	6c e1       	ldi	r22, 0x1C	; 28
    37a8:	61 0f       	add	r22, r17
    37aa:	2c e5       	ldi	r18, 0x5C	; 92
    37ac:	d2 2e       	mov	r13, r18
    37ae:	d0 0e       	add	r13, r16
    37b0:	8d 2d       	mov	r24, r13
    37b2:	0e 94 45 11 	call	0x228a	; 0x228a <lcdXY>
		lcdWriteGlyph_P(&glyBall, ROP_PAINT);
    37b6:	61 e0       	ldi	r22, 0x01	; 1
    37b8:	8d ef       	ldi	r24, 0xFD	; 253
    37ba:	99 e0       	ldi	r25, 0x09	; 9
    37bc:	0e 94 b6 12 	call	0x256c	; 0x256c <lcdWriteGlyph_P>
		lcdXY(x - 4, y - 7);
    37c0:	69 e1       	ldi	r22, 0x19	; 25
    37c2:	61 0f       	add	r22, r17
    37c4:	8d 2d       	mov	r24, r13
    37c6:	0e 94 45 11 	call	0x228a	; 0x228a <lcdXY>
		if (channel->Rudder >= 0)
    37ca:	8b 81       	ldd	r24, Y+3	; 0x03
			lcdWriteGlyph_P(&glyDirCW, ROP_PAINT);
    37cc:	61 e0       	ldi	r22, 0x01	; 1
		lcdXY(CENTER_X - 2, CENTER_Y - 2);
		lcdWriteGlyph_P(&glyFC, ROP_COPY);
		lcdXY(x - 4, y - 4);
		lcdWriteGlyph_P(&glyBall, ROP_PAINT);
		lcdXY(x - 4, y - 7);
		if (channel->Rudder >= 0)
    37ce:	87 fd       	sbrc	r24, 7
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <showMotor+0x90>
			lcdWriteGlyph_P(&glyDirCW, ROP_PAINT);
    37d2:	82 ef       	ldi	r24, 0xF2	; 242
    37d4:	99 e0       	ldi	r25, 0x09	; 9
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <showMotor+0x94>
		else
			lcdWriteGlyph_P(&glyDirCCW, ROP_PAINT);
    37d8:	8b ee       	ldi	r24, 0xEB	; 235
    37da:	99 e0       	ldi	r25, 0x09	; 9
    37dc:	0e 94 b6 12 	call	0x256c	; 0x256c <lcdWriteGlyph_P>
		
		lcdXY(x - 2, y - 2);
    37e0:	6e e1       	ldi	r22, 0x1E	; 30
    37e2:	61 0f       	add	r22, r17
    37e4:	8e e5       	ldi	r24, 0x5E	; 94
    37e6:	80 0f       	add	r24, r16
    37e8:	0e 94 45 11 	call	0x228a	; 0x228a <lcdXY>
		lcdReverse(1);
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
		lcdSelectFont(&font4x6);
    37f2:	8c e9       	ldi	r24, 0x9C	; 156
    37f4:	96 e0       	ldi	r25, 0x06	; 6
    37f6:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
		lcdWriteChar(motor + '1');
    37fa:	81 e3       	ldi	r24, 0x31	; 49
    37fc:	8e 0d       	add	r24, r14
    37fe:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
		lcdSelectFont(NULL);
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
		lcdReverse(0);
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
		
		if (withDir)
    3810:	ff 20       	and	r15, r15
    3812:	61 f1       	breq	.+88     	; 0x386c <showMotor+0x124>
		{
			lcdSetPos(2, 0);
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(strDirSeen);
    381c:	8f e5       	ldi	r24, 0x5F	; 95
    381e:	98 e1       	ldi	r25, 0x18	; 24
    3820:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			lcdSetPos(5, 0);
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	85 e0       	ldi	r24, 0x05	; 5
    3828:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			if (channel->Rudder >= 0)
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	87 fd       	sbrc	r24, 7
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <showMotor+0xf0>
				lcdWriteString_P(strCW);
    3832:	8c e5       	ldi	r24, 0x5C	; 92
    3834:	98 e1       	ldi	r25, 0x18	; 24
    3836:	11 c0       	rjmp	.+34     	; 0x385a <showMotor+0x112>
			else
				lcdWriteString_P(strCCW);
    3838:	88 e5       	ldi	r24, 0x58	; 88
    383a:	98 e1       	ldi	r25, 0x18	; 24
    383c:	0e c0       	rjmp	.+28     	; 0x385a <showMotor+0x112>
		}
	}
	else if (withDir)
    383e:	66 23       	and	r22, r22
    3840:	a9 f0       	breq	.+42     	; 0x386c <showMotor+0x124>
	{
		lcdSetPos(3, 64);
    3842:	60 e4       	ldi	r22, 0x40	; 64
    3844:	83 e0       	ldi	r24, 0x03	; 3
    3846:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		if (channel->IsServo)
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	81 ff       	sbrs	r24, 1
    384e:	03 c0       	rjmp	.+6      	; 0x3856 <showMotor+0x10e>
			lcdWriteString_P(strServo);
    3850:	84 e0       	ldi	r24, 0x04	; 4
    3852:	99 e1       	ldi	r25, 0x19	; 25
    3854:	02 c0       	rjmp	.+4      	; 0x385a <showMotor+0x112>
		else
			lcdWriteString_P(strUnused);
    3856:	8c e4       	ldi	r24, 0x4C	; 76
    3858:	98 e1       	ldi	r25, 0x18	; 24
	}
}
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	ff 90       	pop	r15
    3864:	ef 90       	pop	r14
    3866:	df 90       	pop	r13
	{
		lcdSetPos(3, 64);
		if (channel->IsServo)
			lcdWriteString_P(strServo);
		else
			lcdWriteString_P(strUnused);
    3868:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <lcdWriteString_P>
	}
}
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	1f 91       	pop	r17
    3872:	0f 91       	pop	r16
    3874:	ff 90       	pop	r15
    3876:	ef 90       	pop	r14
    3878:	df 90       	pop	r13
    387a:	08 95       	ret

0000387c <elementKey>:
	subpage = 0;
}

static void elementKey(uint8_t num)
{
	if (KEY2)	// PREV
    387c:	90 91 a4 05 	lds	r25, 0x05A4
    3880:	96 ff       	sbrs	r25, 6
    3882:	09 c0       	rjmp	.+18     	; 0x3896 <elementKey+0x1a>
		elementIndex = elementIndex == 0 ? num - 1 : elementIndex - 1;
    3884:	60 91 a3 05 	lds	r22, 0x05A3
    3888:	61 11       	cpse	r22, r1
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <elementKey+0x14>
    388c:	81 50       	subi	r24, 0x01	; 1
    388e:	0f c0       	rjmp	.+30     	; 0x38ae <elementKey+0x32>
    3890:	8f ef       	ldi	r24, 0xFF	; 255
    3892:	86 0f       	add	r24, r22
    3894:	0c c0       	rjmp	.+24     	; 0x38ae <elementKey+0x32>
	else if (KEY3) // NEXT
    3896:	95 ff       	sbrs	r25, 5
    3898:	0c c0       	rjmp	.+24     	; 0x38b2 <elementKey+0x36>
		elementIndex = (elementIndex + 1) % num;
    389a:	20 91 a3 05 	lds	r18, 0x05A3
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	2f 5f       	subi	r18, 0xFF	; 255
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	68 2f       	mov	r22, r24
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	c9 01       	movw	r24, r18
    38aa:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    38ae:	80 93 a3 05 	sts	0x05A3, r24
    38b2:	08 95       	ret

000038b4 <_hFactoryReset>:
}
#endif

static void _hFactoryReset()
{
	if (KEYINIT)
    38b4:	80 91 a4 05 	lds	r24, 0x05A4
    38b8:	80 ff       	sbrs	r24, 0
    38ba:	08 c0       	rjmp	.+16     	; 0x38cc <_hFactoryReset+0x18>
	{
		lcdSetPos(3, 18);
    38bc:	62 e1       	ldi	r22, 0x12	; 18
    38be:	83 e0       	ldi	r24, 0x03	; 3
    38c0:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		lcdWriteString_P(strAreYouSure);
    38c4:	82 e8       	ldi	r24, 0x82	; 130
    38c6:	98 e1       	ldi	r25, 0x18	; 24
    38c8:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <lcdWriteString_P>
	}
	else if (KEY4)	// Yes
    38cc:	84 ff       	sbrs	r24, 4
    38ce:	11 c0       	rjmp	.+34     	; 0x38f2 <_hFactoryReset+0x3e>
	{
		configReset();
    38d0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <configReset>
		configSave();
    38d4:	0e 94 66 15 	call	0x2acc	; 0x2acc <configSave>
		
		// force reset by enabling watchdog and enter endless loop
		cli();
    38d8:	f8 94       	cli
		wdt_enable(WDTO_15MS);
    38da:	28 e0       	ldi	r18, 0x08	; 8
    38dc:	88 e1       	ldi	r24, 0x18	; 24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	a8 95       	wdr
    38e6:	80 93 60 00 	sts	0x0060, r24
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	20 93 60 00 	sts	0x0060, r18
    38f0:	ff cf       	rjmp	.-2      	; 0x38f0 <_hFactoryReset+0x3c>
    38f2:	08 95       	ret

000038f4 <_hESCCalibration>:
		loadPage(PAGE_MENU);
}

static void _hESCCalibration()
{
	if (ANYKEY)
    38f4:	80 91 a4 05 	lds	r24, 0x05A4
    38f8:	88 23       	and	r24, r24
    38fa:	e9 f0       	breq	.+58     	; 0x3936 <_hESCCalibration+0x42>
	{
		if (elementIndex >= length(scrESCCal))
    38fc:	80 91 a3 05 	lds	r24, 0x05A3
    3900:	86 30       	cpi	r24, 0x06	; 6
    3902:	18 f0       	brcs	.+6      	; 0x390a <_hESCCalibration+0x16>
			loadPage(PAGE_MENU);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <loadPage>
		else
		{
			lcdClear();
    390a:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
			PGM_P s = (PGM_P)pgm_read_word(&scrESCCal[elementIndex]);
    390e:	e0 91 a3 05 	lds	r30, 0x05A3
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	ee 0f       	add	r30, r30
    3916:	ff 1f       	adc	r31, r31
    3918:	e6 54       	subi	r30, 0x46	; 70
    391a:	fd 4e       	sbci	r31, 0xED	; 237
			lcdWriteString_P(s);
    391c:	85 91       	lpm	r24, Z+
    391e:	94 91       	lpm	r25, Z
    3920:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			writeSoftkeys(NULL);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
			elementIndex++;
    392c:	80 91 a3 05 	lds	r24, 0x05A3
    3930:	8f 5f       	subi	r24, 0xFF	; 255
    3932:	80 93 a3 05 	sts	0x05A3, r24
    3936:	08 95       	ret

00003938 <doMenu>:
	lcdSelectFont(&font12x16);
	editModeHandler();
}

static uint8_t doMenu(menu_t *menu)
{
    3938:	ef 92       	push	r14
    393a:	ff 92       	push	r15
    393c:	0f 93       	push	r16
    393e:	1f 93       	push	r17
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	ec 01       	movw	r28, r24
	if (!keys) return 0;
    3946:	80 91 a4 05 	lds	r24, 0x05A4
    394a:	88 23       	and	r24, r24
    394c:	09 f4       	brne	.+2      	; 0x3950 <doMenu+0x18>
    394e:	6f c0       	rjmp	.+222    	; 0x3a2e <doMenu+0xf6>
	
	// key handling
	if (KEY2)		// UP
    3950:	86 ff       	sbrs	r24, 6
    3952:	06 c0       	rjmp	.+12     	; 0x3960 <doMenu+0x28>
	{
		if (menu->marked > 0) 
    3954:	8c 81       	ldd	r24, Y+4	; 0x04
    3956:	88 23       	and	r24, r24
    3958:	99 f0       	breq	.+38     	; 0x3980 <doMenu+0x48>
			menu->marked--;
    395a:	81 50       	subi	r24, 0x01	; 1
    395c:	8c 83       	std	Y+4, r24	; 0x04
    395e:	10 c0       	rjmp	.+32     	; 0x3980 <doMenu+0x48>
	}
	else if (KEY3)		// DOWN
    3960:	85 ff       	sbrs	r24, 5
    3962:	0c c0       	rjmp	.+24     	; 0x397c <doMenu+0x44>
	{
		if (menu->marked < menu->len - 1) 
    3964:	4c 81       	ldd	r20, Y+4	; 0x04
    3966:	24 2f       	mov	r18, r20
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	88 81       	ld	r24, Y
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	28 17       	cp	r18, r24
    3972:	39 07       	cpc	r19, r25
    3974:	2c f4       	brge	.+10     	; 0x3980 <doMenu+0x48>
			menu->marked++;
    3976:	4f 5f       	subi	r20, 0xFF	; 255
    3978:	4c 83       	std	Y+4, r20	; 0x04
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <doMenu+0x48>
	}
	else if (KEY4)		// ENTER
    397c:	84 fd       	sbrc	r24, 4
    397e:	59 c0       	rjmp	.+178    	; 0x3a32 <doMenu+0xfa>
		return 1;

	if (menu->marked < menu->top)
    3980:	2c 81       	ldd	r18, Y+4	; 0x04
    3982:	3b 81       	ldd	r19, Y+3	; 0x03
    3984:	23 17       	cp	r18, r19
    3986:	38 f0       	brcs	.+14     	; 0x3996 <doMenu+0x5e>
		menu->top = menu->marked;
	else if (menu->marked - menu->top >= 5)
    3988:	82 2f       	mov	r24, r18
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	83 1b       	sub	r24, r19
    398e:	91 09       	sbc	r25, r1
    3990:	05 97       	sbiw	r24, 0x05	; 5
    3992:	14 f0       	brlt	.+4      	; 0x3998 <doMenu+0x60>
		menu->top = menu->marked - 4;
    3994:	24 50       	subi	r18, 0x04	; 4
    3996:	2b 83       	std	Y+3, r18	; 0x03

	// upper arrow
	lcdSetPos(0, 58);
    3998:	6a e3       	ldi	r22, 0x3A	; 58
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdReverse(menu->top == 0);
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	9b 81       	ldd	r25, Y+3	; 0x03
    39a4:	91 11       	cpse	r25, r1
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
	lcdWriteGlyph_P(&glyArrowUp, ROP_PAINT);
    39ac:	61 e0       	ldi	r22, 0x01	; 1
    39ae:	8b e1       	ldi	r24, 0x1B	; 27
    39b0:	9a e0       	ldi	r25, 0x0A	; 10
    39b2:	0e 94 b6 12 	call	0x256c	; 0x256c <lcdWriteGlyph_P>
    39b6:	00 e0       	ldi	r16, 0x00	; 0
    39b8:	10 e0       	ldi	r17, 0x00	; 0
		
	// text output
	for (uint8_t i = 0; i < 5 && i < menu->len; i++)
    39ba:	88 81       	ld	r24, Y
    39bc:	08 17       	cp	r16, r24
    39be:	08 f5       	brcc	.+66     	; 0x3a02 <doMenu+0xca>
	{
		lcdSetPos(i + 1, 0);
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	80 0f       	add	r24, r16
    39c6:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		PGM_P item = menu->textSelector(menu->top + i);
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	e9 81       	ldd	r30, Y+1	; 0x01
    39ce:	fa 81       	ldd	r31, Y+2	; 0x02
    39d0:	80 0f       	add	r24, r16
    39d2:	09 95       	icall
    39d4:	7c 01       	movw	r14, r24
		lcdReverse(menu->top + i == menu->marked);
    39d6:	8b 81       	ldd	r24, Y+3	; 0x03
    39d8:	a8 01       	movw	r20, r16
    39da:	48 0f       	add	r20, r24
    39dc:	51 1d       	adc	r21, r1
    39de:	2c 81       	ldd	r18, Y+4	; 0x04
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	42 17       	cp	r20, r18
    39e6:	53 07       	cpc	r21, r19
    39e8:	09 f0       	breq	.+2      	; 0x39ec <doMenu+0xb4>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
		writePadded_P(item, 21);
    39f0:	65 e1       	ldi	r22, 0x15	; 21
    39f2:	c7 01       	movw	r24, r14
    39f4:	0e 94 4b 1b 	call	0x3696	; 0x3696 <writePadded_P>
    39f8:	0f 5f       	subi	r16, 0xFF	; 255
    39fa:	1f 4f       	sbci	r17, 0xFF	; 255
	lcdSetPos(0, 58);
	lcdReverse(menu->top == 0);
	lcdWriteGlyph_P(&glyArrowUp, ROP_PAINT);
		
	// text output
	for (uint8_t i = 0; i < 5 && i < menu->len; i++)
    39fc:	05 30       	cpi	r16, 0x05	; 5
    39fe:	11 05       	cpc	r17, r1
    3a00:	e1 f6       	brne	.-72     	; 0x39ba <doMenu+0x82>
		lcdReverse(menu->top + i == menu->marked);
		writePadded_P(item, 21);
	}

	// lower arrow
	lcdSetPos(6, 58);
    3a02:	6a e3       	ldi	r22, 0x3A	; 58
    3a04:	86 e0       	ldi	r24, 0x06	; 6
    3a06:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdReverse(menu->top >= menu->len - 5);
    3a0a:	4b 81       	ldd	r20, Y+3	; 0x03
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	28 81       	ld	r18, Y
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	25 50       	subi	r18, 0x05	; 5
    3a14:	31 09       	sbc	r19, r1
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	42 17       	cp	r20, r18
    3a1a:	53 07       	cpc	r21, r19
    3a1c:	0c f4       	brge	.+2      	; 0x3a20 <doMenu+0xe8>
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
	lcdWriteGlyph_P(&glyArrowDown, ROP_PAINT);
    3a24:	61 e0       	ldi	r22, 0x01	; 1
    3a26:	81 e1       	ldi	r24, 0x11	; 17
    3a28:	9a e0       	ldi	r25, 0x0A	; 10
    3a2a:	0e 94 b6 12 	call	0x256c	; 0x256c <lcdWriteGlyph_P>
	editModeHandler();
}

static uint8_t doMenu(menu_t *menu)
{
	if (!keys) return 0;
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	01 c0       	rjmp	.+2      	; 0x3a34 <doMenu+0xfc>
	{
		if (menu->marked < menu->len - 1) 
			menu->marked++;
	}
	else if (KEY4)		// ENTER
		return 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
	lcdSetPos(6, 58);
	lcdReverse(menu->top >= menu->len - 5);
	lcdWriteGlyph_P(&glyArrowDown, ROP_PAINT);
	
	return 0;
}
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	ff 90       	pop	r15
    3a3e:	ef 90       	pop	r14
    3a40:	08 95       	ret

00003a42 <_hLoadModelLayout>:
	}
}

static void _hLoadModelLayout()
{
	if (KEYINIT)
    3a42:	80 91 a4 05 	lds	r24, 0x05A4
    3a46:	80 ff       	sbrs	r24, 0
    3a48:	04 c0       	rjmp	.+8      	; 0x3a52 <_hLoadModelLayout+0x10>
		mnuMLayout.marked = Config.MixerIndex;
    3a4a:	90 91 92 06 	lds	r25, 0x0692
    3a4e:	90 93 04 01 	sts	0x0104, r25

	if (elementIndex == 0)
    3a52:	90 91 a3 05 	lds	r25, 0x05A3
    3a56:	91 11       	cpse	r25, r1
    3a58:	18 c0       	rjmp	.+48     	; 0x3a8a <_hLoadModelLayout+0x48>
	{
		if (doMenu(&mnuMLayout))
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	91 e0       	ldi	r25, 0x01	; 1
    3a5e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <doMenu>
    3a62:	88 23       	and	r24, r24
    3a64:	d9 f0       	breq	.+54     	; 0x3a9c <_hLoadModelLayout+0x5a>
		{
			lcdClear();
    3a66:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
			lcdSetPos(3, 18);
    3a6a:	62 e1       	ldi	r22, 0x12	; 18
    3a6c:	83 e0       	ldi	r24, 0x03	; 3
    3a6e:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(strAreYouSure);
    3a72:	82 e8       	ldi	r24, 0x82	; 130
    3a74:	98 e1       	ldi	r25, 0x18	; 24
    3a76:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			writeSoftkeys(_skCANCELYES);
    3a7a:	8d ee       	ldi	r24, 0xED	; 237
    3a7c:	90 e1       	ldi	r25, 0x10	; 16
    3a7e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
			elementIndex = 1;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	80 93 a3 05 	sts	0x05A3, r24
    3a88:	08 95       	ret
		}
	}		
	else if (KEY4)		// YES
    3a8a:	84 ff       	sbrs	r24, 4
    3a8c:	07 c0       	rjmp	.+14     	; 0x3a9c <_hLoadModelLayout+0x5a>
	{
		mixerLoadModel(mnuMLayout.marked);
    3a8e:	80 91 04 01 	lds	r24, 0x0104
    3a92:	0e 94 24 19 	call	0x3248	; 0x3248 <mixerLoadModel>
		//configSave();
		loadPage(PAGE_SHOW_LAYOUT);
    3a96:	8f e0       	ldi	r24, 0x0F	; 15
    3a98:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <loadPage>
    3a9c:	08 95       	ret

00003a9e <_hMenu>:
	return 0;
}

void _hMenu()
{
	if (doMenu(&mnuMain))
    3a9e:	85 e0       	ldi	r24, 0x05	; 5
    3aa0:	91 e0       	ldi	r25, 0x01	; 1
    3aa2:	0e 94 9c 1c 	call	0x3938	; 0x3938 <doMenu>
    3aa6:	88 23       	and	r24, r24
    3aa8:	29 f0       	breq	.+10     	; 0x3ab4 <_hMenu+0x16>
		loadPage(mnuMain.marked + 2);
    3aaa:	80 91 09 01 	lds	r24, 0x0109
    3aae:	8e 5f       	subi	r24, 0xFE	; 254
    3ab0:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <loadPage>
    3ab4:	08 95       	ret

00003ab6 <_hShowModelLayout>:
			lcdWriteString_P(strUnused);
	}
}

static void _hShowModelLayout()
{
    3ab6:	cf 93       	push	r28
	if (ANYKEY)
    3ab8:	80 91 a4 05 	lds	r24, 0x05A4
    3abc:	88 23       	and	r24, r24
    3abe:	c1 f1       	breq	.+112    	; 0x3b30 <_hShowModelLayout+0x7a>
	{
		if (KEY2)	// NEXT
    3ac0:	86 ff       	sbrs	r24, 6
    3ac2:	0a c0       	rjmp	.+20     	; 0x3ad8 <_hShowModelLayout+0x22>
			elementIndex = (elementIndex + 1) % 9;
    3ac4:	80 91 a3 05 	lds	r24, 0x05A3
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	69 e0       	ldi	r22, 0x09	; 9
    3ace:	70 e0       	ldi	r23, 0x00	; 0
    3ad0:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    3ad4:	80 93 a3 05 	sts	0x05A3, r24
		
		lcdClear();
    3ad8:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
		writeSoftkeys(NULL);
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
		lcdSetPos(0, 0);
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		lcdWriteString_P(strOutput);
    3aec:	8a e7       	ldi	r24, 0x7A	; 122
    3aee:	98 e1       	ldi	r25, 0x18	; 24
    3af0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
		lcdWriteChar(32);
    3af4:	80 e2       	ldi	r24, 0x20	; 32
    3af6:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
		if (elementIndex == 0)
    3afa:	80 91 a3 05 	lds	r24, 0x05A3
    3afe:	81 11       	cpse	r24, r1
    3b00:	0d c0       	rjmp	.+26     	; 0x3b1c <_hShowModelLayout+0x66>
		{
			lcdWriteString_P(strALL);
    3b02:	84 e5       	ldi	r24, 0x54	; 84
    3b04:	98 e1       	ldi	r25, 0x18	; 24
    3b06:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			for (uint8_t i = 0; i < 8; i++)
    3b0a:	c0 e0       	ldi	r28, 0x00	; 0
				showMotor(i, 0);
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	8c 2f       	mov	r24, r28
    3b10:	0e 94 a4 1b 	call	0x3748	; 0x3748 <showMotor>
		lcdWriteString_P(strOutput);
		lcdWriteChar(32);
		if (elementIndex == 0)
		{
			lcdWriteString_P(strALL);
			for (uint8_t i = 0; i < 8; i++)
    3b14:	cf 5f       	subi	r28, 0xFF	; 255
    3b16:	c8 30       	cpi	r28, 0x08	; 8
    3b18:	c9 f7       	brne	.-14     	; 0x3b0c <_hShowModelLayout+0x56>
    3b1a:	0a c0       	rjmp	.+20     	; 0x3b30 <_hShowModelLayout+0x7a>
				showMotor(i, 0);
		}			
		else
		{
			lcdWriteChar(elementIndex + '0');
    3b1c:	80 5d       	subi	r24, 0xD0	; 208
    3b1e:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
			showMotor(elementIndex - 1, 1);
    3b22:	80 91 a3 05 	lds	r24, 0x05A3
    3b26:	61 e0       	ldi	r22, 0x01	; 1
    3b28:	81 50       	subi	r24, 0x01	; 1
		}
	}
}
    3b2a:	cf 91       	pop	r28
				showMotor(i, 0);
		}			
		else
		{
			lcdWriteChar(elementIndex + '0');
			showMotor(elementIndex - 1, 1);
    3b2c:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <showMotor>
		}
	}
}
    3b30:	cf 91       	pop	r28
    3b32:	08 95       	ret

00003b34 <_hStickCentering>:
	}
}

static void _hStickCentering()
{
	if (KEYINIT)
    3b34:	80 91 a4 05 	lds	r24, 0x05A4
    3b38:	80 ff       	sbrs	r24, 0
    3b3a:	15 c0       	rjmp	.+42     	; 0x3b66 <_hStickCentering+0x32>
	{
		if ((RX_good & 0x0F) != 0x0F)
    3b3c:	80 91 a5 05 	lds	r24, 0x05A5
    3b40:	8f 70       	andi	r24, 0x0F	; 15
    3b42:	8f 30       	cpi	r24, 0x0F	; 15
    3b44:	61 f0       	breq	.+24     	; 0x3b5e <_hStickCentering+0x2a>
		{
			lcdWriteString_P(scrRadioCal1);
    3b46:	84 e1       	ldi	r24, 0x14	; 20
    3b48:	92 e1       	ldi	r25, 0x12	; 18
    3b4a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			elementIndex = 1;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	80 93 a3 05 	sts	0x05A3, r24
			writeSoftkeys(_skBACK);
    3b54:	89 e1       	ldi	r24, 0x19	; 25
    3b56:	91 e1       	ldi	r25, 0x11	; 17
    3b58:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
    3b5c:	04 c0       	rjmp	.+8      	; 0x3b66 <_hStickCentering+0x32>
		}
		else
			lcdWriteString_P(scrRadioCal0);
    3b5e:	8f e5       	ldi	r24, 0x5F	; 95
    3b60:	92 e1       	ldi	r25, 0x12	; 18
    3b62:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
	}
	
	if (elementIndex == 0)
    3b66:	90 91 a3 05 	lds	r25, 0x05A3
    3b6a:	80 91 a4 05 	lds	r24, 0x05A4
    3b6e:	91 11       	cpse	r25, r1
    3b70:	1d c0       	rjmp	.+58     	; 0x3bac <_hStickCentering+0x78>
	{
		if (KEY4)
    3b72:	84 ff       	sbrs	r24, 4
    3b74:	20 c0       	rjmp	.+64     	; 0x3bb6 <_hStickCentering+0x82>
		{
			lcdClear();
    3b76:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
			if (rxCalibrate())
    3b7a:	0e 94 2e 14 	call	0x285c	; 0x285c <rxCalibrate>
    3b7e:	88 23       	and	r24, r24
    3b80:	49 f0       	breq	.+18     	; 0x3b94 <_hStickCentering+0x60>
			{
				configSave();
    3b82:	0e 94 66 15 	call	0x2acc	; 0x2acc <configSave>
				lcdSetPos(3, 0);
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	83 e0       	ldi	r24, 0x03	; 3
    3b8a:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
				lcdWriteString_P(strCalSucc);
    3b8e:	80 e9       	ldi	r24, 0x90	; 144
    3b90:	98 e1       	ldi	r25, 0x18	; 24
    3b92:	02 c0       	rjmp	.+4      	; 0x3b98 <_hStickCentering+0x64>
			}
			else
				lcdWriteString_P(scrRadioCal2);
    3b94:	87 ec       	ldi	r24, 0xC7	; 199
    3b96:	91 e1       	ldi	r25, 0x11	; 17
    3b98:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>

			writeSoftkeys(NULL);
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
			elementIndex = 1;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	80 93 a3 05 	sts	0x05A3, r24
    3baa:	08 95       	ret
		}
	}
	else if (KEY4)
    3bac:	84 ff       	sbrs	r24, 4
    3bae:	03 c0       	rjmp	.+6      	; 0x3bb6 <_hStickCentering+0x82>
		loadPage(PAGE_MENU);
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <loadPage>
    3bb6:	08 95       	ret

00003bb8 <_hSensorCalibration>:
		}
	}
}

static void _hSensorCalibration()
{
    3bb8:	cf 93       	push	r28
	if (elementIndex == 0)
    3bba:	80 91 a3 05 	lds	r24, 0x05A3
    3bbe:	81 11       	cpse	r24, r1
    3bc0:	24 c0       	rjmp	.+72     	; 0x3c0a <_hSensorCalibration+0x52>
	{
		if (KEY4)
    3bc2:	80 91 a4 05 	lds	r24, 0x05A4
    3bc6:	84 ff       	sbrs	r24, 4
    3bc8:	55 c0       	rjmp	.+170    	; 0x3c74 <_hSensorCalibration+0xbc>
		{
			elementIndex = 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	80 93 a3 05 	sts	0x05A3, r24
			lcdClear();
    3bd0:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
			lcdSetPos(3, 18);
    3bd4:	62 e1       	ldi	r22, 0x12	; 18
    3bd6:	83 e0       	ldi	r24, 0x03	; 3
    3bd8:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(strWait);
    3bdc:	8a ea       	ldi	r24, 0xAA	; 170
    3bde:	98 e1       	ldi	r25, 0x18	; 24
    3be0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			lcdSetPos(3, 78);
    3be4:	6e e4       	ldi	r22, 0x4E	; 78
    3be6:	83 e0       	ldi	r24, 0x03	; 3
    3be8:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(strSec);
    3bec:	86 ea       	ldi	r24, 0xA6	; 166
    3bee:	98 e1       	ldi	r25, 0x18	; 24
    3bf0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			writeSoftkeys(_skCANCEL);
    3bf4:	8f ea       	ldi	r24, 0xAF	; 175
    3bf6:	90 e1       	ldi	r25, 0x10	; 16
    3bf8:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
			_tStart = millis();
    3bfc:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    3c00:	90 93 a1 05 	sts	0x05A1, r25
    3c04:	80 93 a0 05 	sts	0x05A0, r24
    3c08:	35 c0       	rjmp	.+106    	; 0x3c74 <_hSensorCalibration+0xbc>
		}			
	}
	else if (elementIndex == 1)
    3c0a:	81 30       	cpi	r24, 0x01	; 1
    3c0c:	59 f5       	brne	.+86     	; 0x3c64 <_hSensorCalibration+0xac>
	{
		lcdSetPos(3, 66);
    3c0e:	62 e4       	ldi	r22, 0x42	; 66
    3c10:	83 e0       	ldi	r24, 0x03	; 3
    3c12:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		uint8_t sec = (millis() - _tStart) / 1000;
    3c16:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <millis>
    3c1a:	20 91 a0 05 	lds	r18, 0x05A0
    3c1e:	30 91 a1 05 	lds	r19, 0x05A1
    3c22:	82 1b       	sub	r24, r18
    3c24:	93 0b       	sbc	r25, r19
    3c26:	68 ee       	ldi	r22, 0xE8	; 232
    3c28:	73 e0       	ldi	r23, 0x03	; 3
    3c2a:	0e 94 ee 23 	call	0x47dc	; 0x47dc <__udivmodhi4>
    3c2e:	c6 2f       	mov	r28, r22
		lcdWriteChar((5-sec) + 48);
    3c30:	85 e3       	ldi	r24, 0x35	; 53
    3c32:	86 1b       	sub	r24, r22
    3c34:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
		if (sec >= 5)
    3c38:	c5 30       	cpi	r28, 0x05	; 5
    3c3a:	e0 f0       	brcs	.+56     	; 0x3c74 <_hSensorCalibration+0xbc>
		{
			sensorsCalibrate();
    3c3c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <sensorsCalibrate>
			configSave();
    3c40:	0e 94 66 15 	call	0x2acc	; 0x2acc <configSave>
			lcdSetPos(3, 0);
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	83 e0       	ldi	r24, 0x03	; 3
    3c48:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(strCalSucc);
    3c4c:	80 e9       	ldi	r24, 0x90	; 144
    3c4e:	98 e1       	ldi	r25, 0x18	; 24
    3c50:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			writeSoftkeys(NULL);
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
			elementIndex = 2;
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	80 93 a3 05 	sts	0x05A3, r24
    3c62:	08 c0       	rjmp	.+16     	; 0x3c74 <_hSensorCalibration+0xbc>
		}
	}
	else if (KEY4)
    3c64:	80 91 a4 05 	lds	r24, 0x05A4
    3c68:	84 ff       	sbrs	r24, 4
    3c6a:	04 c0       	rjmp	.+8      	; 0x3c74 <_hSensorCalibration+0xbc>
		loadPage(PAGE_MENU);
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
}
    3c6e:	cf 91       	pop	r28
			writeSoftkeys(NULL);
			elementIndex = 2;
		}
	}
	else if (KEY4)
		loadPage(PAGE_MENU);
    3c70:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <loadPage>
}
    3c74:	cf 91       	pop	r28
    3c76:	08 95       	ret

00003c78 <_hModeSettings>:
		for(;;);
	}
}

static void _hModeSettings()
{
    3c78:	0f 93       	push	r16
    3c7a:	cf 93       	push	r28
	NOKEYRETURN;
    3c7c:	c0 91 a4 05 	lds	r28, 0x05A4
    3c80:	cc 23       	and	r28, r28
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <_hModeSettings+0xe>
    3c84:	8c c0       	rjmp	.+280    	; 0x3d9e <_hModeSettings+0x126>
	elementKey(5);
    3c86:	85 e0       	ldi	r24, 0x05	; 5
    3c88:	0e 94 3e 1c 	call	0x387c	; 0x387c <elementKey>
	if (KEY4)	// CHANGE?
    3c8c:	c4 ff       	sbrs	r28, 4
    3c8e:	37 c0       	rjmp	.+110    	; 0x3cfe <_hModeSettings+0x86>
	{
		if (elementIndex == 0) Config.SelfLevelMode = (Config.SelfLevelMode + 1) % 3;
    3c90:	80 91 a3 05 	lds	r24, 0x05A3
    3c94:	81 11       	cpse	r24, r1
    3c96:	0b c0       	rjmp	.+22     	; 0x3cae <_hModeSettings+0x36>
    3c98:	80 91 8d 06 	lds	r24, 0x068D
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	01 96       	adiw	r24, 0x01	; 1
    3ca0:	63 e0       	ldi	r22, 0x03	; 3
    3ca2:	70 e0       	ldi	r23, 0x00	; 0
    3ca4:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    3ca8:	80 93 8d 06 	sts	0x068D, r24
    3cac:	24 c0       	rjmp	.+72     	; 0x3cf6 <_hModeSettings+0x7e>
		else if (elementIndex == 1) Config.ArmingMode = !Config.ArmingMode;
    3cae:	81 30       	cpi	r24, 0x01	; 1
    3cb0:	39 f4       	brne	.+14     	; 0x3cc0 <_hModeSettings+0x48>
    3cb2:	90 91 8e 06 	lds	r25, 0x068E
    3cb6:	91 11       	cpse	r25, r1
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	80 93 8e 06 	sts	0x068E, r24
    3cbe:	1b c0       	rjmp	.+54     	; 0x3cf6 <_hModeSettings+0x7e>
		else if (elementIndex == 2) Config.LinkRollPitch = !Config.LinkRollPitch;
    3cc0:	82 30       	cpi	r24, 0x02	; 2
    3cc2:	41 f4       	brne	.+16     	; 0x3cd4 <_hModeSettings+0x5c>
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	90 91 90 06 	lds	r25, 0x0690
    3cca:	91 11       	cpse	r25, r1
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	80 93 90 06 	sts	0x0690, r24
    3cd2:	11 c0       	rjmp	.+34     	; 0x3cf6 <_hModeSettings+0x7e>
		else if (elementIndex == 3) Config.AutoDisarm = !Config.AutoDisarm;
    3cd4:	83 30       	cpi	r24, 0x03	; 3
    3cd6:	41 f4       	brne	.+16     	; 0x3ce8 <_hModeSettings+0x70>
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	90 91 8f 06 	lds	r25, 0x068F
    3cde:	91 11       	cpse	r25, r1
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	80 93 8f 06 	sts	0x068F, r24
    3ce6:	07 c0       	rjmp	.+14     	; 0x3cf6 <_hModeSettings+0x7e>
		else Config.ReceiverMode = !Config.ReceiverMode; rxInit(Config.ReceiverMode);
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	90 91 91 06 	lds	r25, 0x0691
    3cee:	91 11       	cpse	r25, r1
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	80 93 91 06 	sts	0x0691, r24
    3cf6:	80 91 91 06 	lds	r24, 0x0691
    3cfa:	0e 94 b0 13 	call	0x2760	; 0x2760 <rxInit>
		//configSave();
	}
	
	const char* str;
	if (Config.SelfLevelMode == SELFLEVEL_ON) str = strOn;
    3cfe:	80 91 8d 06 	lds	r24, 0x068D
    3d02:	82 30       	cpi	r24, 0x02	; 2
    3d04:	29 f0       	breq	.+10     	; 0x3d10 <_hModeSettings+0x98>
	else if (Config.SelfLevelMode == SELFLEVEL_AUX) str = strAUX;
    3d06:	81 30       	cpi	r24, 0x01	; 1
    3d08:	31 f4       	brne	.+12     	; 0x3d16 <_hModeSettings+0x9e>
    3d0a:	45 e1       	ldi	r20, 0x15	; 21
    3d0c:	59 e1       	ldi	r21, 0x19	; 25
    3d0e:	05 c0       	rjmp	.+10     	; 0x3d1a <_hModeSettings+0xa2>
		else Config.ReceiverMode = !Config.ReceiverMode; rxInit(Config.ReceiverMode);
		//configSave();
	}
	
	const char* str;
	if (Config.SelfLevelMode == SELFLEVEL_ON) str = strOn;
    3d10:	41 ed       	ldi	r20, 0xD1	; 209
    3d12:	58 e1       	ldi	r21, 0x18	; 24
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <_hModeSettings+0xa2>
	else if (Config.SelfLevelMode == SELFLEVEL_AUX) str = strAUX;
	else str = strStick;
    3d16:	49 e1       	ldi	r20, 0x19	; 25
    3d18:	59 e1       	ldi	r21, 0x19	; 25
	
	writeString_P(0, 84, str, 5, 0);
    3d1a:	00 e0       	ldi	r16, 0x00	; 0
    3d1c:	25 e0       	ldi	r18, 0x05	; 5
    3d1e:	64 e5       	ldi	r22, 0x54	; 84
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
	writeString_P(1, 84, Config.ArmingMode ? strOn : strStick, 5, 1);
    3d26:	80 91 8e 06 	lds	r24, 0x068E
    3d2a:	88 23       	and	r24, r24
    3d2c:	19 f0       	breq	.+6      	; 0x3d34 <_hModeSettings+0xbc>
    3d2e:	41 ed       	ldi	r20, 0xD1	; 209
    3d30:	58 e1       	ldi	r21, 0x18	; 24
    3d32:	02 c0       	rjmp	.+4      	; 0x3d38 <_hModeSettings+0xc0>
    3d34:	49 e1       	ldi	r20, 0x19	; 25
    3d36:	59 e1       	ldi	r21, 0x19	; 25
    3d38:	01 e0       	ldi	r16, 0x01	; 1
    3d3a:	25 e0       	ldi	r18, 0x05	; 5
    3d3c:	64 e5       	ldi	r22, 0x54	; 84
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
	writeString_P(2, 102, Config.LinkRollPitch ? strYes : strNo, 3, 2);
    3d44:	80 91 90 06 	lds	r24, 0x0690
    3d48:	88 23       	and	r24, r24
    3d4a:	19 f0       	breq	.+6      	; 0x3d52 <_hModeSettings+0xda>
    3d4c:	41 e1       	ldi	r20, 0x11	; 17
    3d4e:	59 e1       	ldi	r21, 0x19	; 25
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <_hModeSettings+0xde>
    3d52:	4e e0       	ldi	r20, 0x0E	; 14
    3d54:	59 e1       	ldi	r21, 0x19	; 25
    3d56:	02 e0       	ldi	r16, 0x02	; 2
    3d58:	23 e0       	ldi	r18, 0x03	; 3
    3d5a:	66 e6       	ldi	r22, 0x66	; 102
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
	writeString_P(3, 84, Config.AutoDisarm ? strYes : strNo, 3, 3);
    3d62:	80 91 8f 06 	lds	r24, 0x068F
    3d66:	88 23       	and	r24, r24
    3d68:	19 f0       	breq	.+6      	; 0x3d70 <_hModeSettings+0xf8>
    3d6a:	41 e1       	ldi	r20, 0x11	; 17
    3d6c:	59 e1       	ldi	r21, 0x19	; 25
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <_hModeSettings+0xfc>
    3d70:	4e e0       	ldi	r20, 0x0E	; 14
    3d72:	59 e1       	ldi	r21, 0x19	; 25
    3d74:	03 e0       	ldi	r16, 0x03	; 3
    3d76:	23 e0       	ldi	r18, 0x03	; 3
    3d78:	64 e5       	ldi	r22, 0x54	; 84
    3d7a:	83 e0       	ldi	r24, 0x03	; 3
    3d7c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
	writeString_P(4, 84, Config.ReceiverMode ? strYes : strNo, 3, 4);
    3d80:	80 91 91 06 	lds	r24, 0x0691
    3d84:	88 23       	and	r24, r24
    3d86:	19 f0       	breq	.+6      	; 0x3d8e <_hModeSettings+0x116>
    3d88:	41 e1       	ldi	r20, 0x11	; 17
    3d8a:	59 e1       	ldi	r21, 0x19	; 25
    3d8c:	02 c0       	rjmp	.+4      	; 0x3d92 <_hModeSettings+0x11a>
    3d8e:	4e e0       	ldi	r20, 0x0E	; 14
    3d90:	59 e1       	ldi	r21, 0x19	; 25
    3d92:	04 e0       	ldi	r16, 0x04	; 4
    3d94:	23 e0       	ldi	r18, 0x03	; 3
    3d96:	64 e5       	ldi	r22, 0x54	; 84
    3d98:	84 e0       	ldi	r24, 0x04	; 4
    3d9a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
}
    3d9e:	cf 91       	pop	r28
    3da0:	0f 91       	pop	r16
    3da2:	08 95       	ret

00003da4 <writeValue>:
	writePadded_P(str, len);
	lcdReverse(0);
}

static void writeValue(uint8_t x, uint8_t y, int16_t value, uint8_t len, uint8_t index)
{
    3da4:	cf 92       	push	r12
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	27 97       	sbiw	r28, 0x07	; 7
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	18 2f       	mov	r17, r24
    3dc6:	d6 2e       	mov	r13, r22
    3dc8:	ca 01       	movw	r24, r20
    3dca:	c2 2e       	mov	r12, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3dcc:	4a e0       	ldi	r20, 0x0A	; 10
    3dce:	9e 01       	movw	r18, r28
    3dd0:	2f 5f       	subi	r18, 0xFF	; 255
    3dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd4:	79 01       	movw	r14, r18
    3dd6:	b9 01       	movw	r22, r18
    3dd8:	0e 94 68 24 	call	0x48d0	; 0x48d0 <__itoa_ncheck>
	char s[7];
	itoa(value, s, 10);
	lcdReverse(index == elementIndex);
    3ddc:	91 e0       	ldi	r25, 0x01	; 1
    3dde:	80 91 a3 05 	lds	r24, 0x05A3
    3de2:	08 13       	cpse	r16, r24
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	89 2f       	mov	r24, r25
    3de8:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
	lcdSetPos(x, y);
    3dec:	6d 2d       	mov	r22, r13
    3dee:	81 2f       	mov	r24, r17
    3df0:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		lcdWriteChar(32);
}

static void writePadded(char *s, uint8_t len)
{
	lcdWriteString(s);
    3df4:	c7 01       	movw	r24, r14
    3df6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <lcdWriteString>
	writeSpace(len - strlen(s));
    3dfa:	f7 01       	movw	r30, r14
    3dfc:	01 90       	ld	r0, Z+
    3dfe:	00 20       	and	r0, r0
    3e00:	e9 f7       	brne	.-6      	; 0x3dfc <writeValue+0x58>
    3e02:	31 97       	sbiw	r30, 0x01	; 1
    3e04:	ee 19       	sub	r30, r14
    3e06:	ff 09       	sbc	r31, r15
    3e08:	8c 2d       	mov	r24, r12
    3e0a:	8e 1b       	sub	r24, r30
    3e0c:	0e 94 3d 1b 	call	0x367a	; 0x367a <writeSpace>
	char s[7];
	itoa(value, s, 10);
	lcdReverse(index == elementIndex);
	lcdSetPos(x, y);
	writePadded(s, len);
	lcdReverse(0);
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
}
    3e16:	27 96       	adiw	r28, 0x07	; 7
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	1f 91       	pop	r17
    3e28:	0f 91       	pop	r16
    3e2a:	ff 90       	pop	r15
    3e2c:	ef 90       	pop	r14
    3e2e:	df 90       	pop	r13
    3e30:	cf 90       	pop	r12
    3e32:	08 95       	ret

00003e34 <_hDebug>:
		loadPage(PAGE_MENU);
}

#ifdef DEBUG
static void _hDebug()
{
    3e34:	0f 93       	push	r16
	writeValue(0, 66, Config.MixerIndex, 2, -1);
    3e36:	40 91 92 06 	lds	r20, 0x0692
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	0f ef       	ldi	r16, 0xFF	; 255
    3e3e:	22 e0       	ldi	r18, 0x02	; 2
    3e40:	62 e4       	ldi	r22, 0x42	; 66
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	writeValue(1, 66, CONTROL[0], 6, -1);
    3e48:	40 91 c6 05 	lds	r20, 0x05C6
    3e4c:	50 91 c7 05 	lds	r21, 0x05C7
    3e50:	26 e0       	ldi	r18, 0x06	; 6
    3e52:	62 e4       	ldi	r22, 0x42	; 66
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	writeValue(2, 66, CONTROL[1], 6, -1);
    3e5a:	40 91 c8 05 	lds	r20, 0x05C8
    3e5e:	50 91 c9 05 	lds	r21, 0x05C9
    3e62:	26 e0       	ldi	r18, 0x06	; 6
    3e64:	62 e4       	ldi	r22, 0x42	; 66
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	writeValue(3, 66, CONTROL[2], 6, -1);
    3e6c:	40 91 ca 05 	lds	r20, 0x05CA
    3e70:	50 91 cb 05 	lds	r21, 0x05CB
    3e74:	26 e0       	ldi	r18, 0x06	; 6
    3e76:	62 e4       	ldi	r22, 0x42	; 66
    3e78:	83 e0       	ldi	r24, 0x03	; 3
    3e7a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	writeValue(4, 66, CONTROL[3], 6, -1);
    3e7e:	40 91 cc 05 	lds	r20, 0x05CC
    3e82:	50 91 cd 05 	lds	r21, 0x05CD
    3e86:	26 e0       	ldi	r18, 0x06	; 6
    3e88:	62 e4       	ldi	r22, 0x42	; 66
    3e8a:	84 e0       	ldi	r24, 0x04	; 4
    3e8c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
}
    3e90:	0f 91       	pop	r16
    3e92:	08 95       	ret

00003e94 <_hSensorTest>:
		writeValue(6, 13*6, (int16_t)ANGLE[PIT] >> 8, 7, -1);
	}	
}

static void _hSensorTest()
{
    3e94:	ef 92       	push	r14
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	4b e0       	ldi	r20, 0x0B	; 11
    3ea2:	e4 2e       	mov	r14, r20
    3ea4:	46 e0       	ldi	r20, 0x06	; 6
    3ea6:	f4 2e       	mov	r15, r20
    3ea8:	c1 e1       	ldi	r28, 0x11	; 17
    3eaa:	d6 e0       	ldi	r29, 0x06	; 6
	for (uint8_t i = 0; i < 3; i++)
    3eac:	10 e0       	ldi	r17, 0x00	; 0
	{
		writeValue(i, 48, GYRO[i], 5, -1);
    3eae:	f7 01       	movw	r30, r14
    3eb0:	41 91       	ld	r20, Z+
    3eb2:	51 91       	ld	r21, Z+
    3eb4:	7f 01       	movw	r14, r30
    3eb6:	0f ef       	ldi	r16, 0xFF	; 255
    3eb8:	25 e0       	ldi	r18, 0x05	; 5
    3eba:	60 e3       	ldi	r22, 0x30	; 48
    3ebc:	81 2f       	mov	r24, r17
    3ebe:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
		writeValue(i + 3, 48, ACC[i], 5, -1);
    3ec2:	49 91       	ld	r20, Y+
    3ec4:	59 91       	ld	r21, Y+
    3ec6:	25 e0       	ldi	r18, 0x05	; 5
    3ec8:	60 e3       	ldi	r22, 0x30	; 48
    3eca:	83 e0       	ldi	r24, 0x03	; 3
    3ecc:	81 0f       	add	r24, r17
    3ece:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	}	
}

static void _hSensorTest()
{
	for (uint8_t i = 0; i < 3; i++)
    3ed2:	1f 5f       	subi	r17, 0xFF	; 255
    3ed4:	13 30       	cpi	r17, 0x03	; 3
    3ed6:	59 f7       	brne	.-42     	; 0x3eae <_hSensorTest+0x1a>
	{
		writeValue(i, 48, GYRO[i], 5, -1);
		writeValue(i + 3, 48, ACC[i], 5, -1);
	}	
	writeValue(6, 48, BATT, 5, -1);
    3ed8:	40 91 0a 06 	lds	r20, 0x060A
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	25 e0       	ldi	r18, 0x05	; 5
    3ee0:	60 e3       	ldi	r22, 0x30	; 48
    3ee2:	86 e0       	ldi	r24, 0x06	; 6
    3ee4:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
}
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	1f 91       	pop	r17
    3eee:	0f 91       	pop	r16
    3ef0:	ff 90       	pop	r15
    3ef2:	ef 90       	pop	r14
    3ef4:	08 95       	ret

00003ef6 <_hReceiverTest>:

static void _hReceiverTest()
{
    3ef6:	ef 92       	push	r14
    3ef8:	ff 92       	push	r15
    3efa:	0f 93       	push	r16
    3efc:	1f 93       	push	r17
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	76 ea       	ldi	r23, 0xA6	; 166
    3f04:	e7 2e       	mov	r14, r23
    3f06:	75 e0       	ldi	r23, 0x05	; 5
    3f08:	f7 2e       	mov	r15, r23
    3f0a:	c0 e0       	ldi	r28, 0x00	; 0
    3f0c:	d0 e0       	ldi	r29, 0x00	; 0
		{ strOff, strOn },
	};
	
	for (uint8_t i = 0; i < 6; i++)
	{
		if (RX_good & _BV(i))
    3f0e:	80 91 a5 05 	lds	r24, 0x05A5
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0c 2e       	mov	r0, r28
    3f16:	02 c0       	rjmp	.+4      	; 0x3f1c <_hReceiverTest+0x26>
    3f18:	95 95       	asr	r25
    3f1a:	87 95       	ror	r24
    3f1c:	0a 94       	dec	r0
    3f1e:	e2 f7       	brpl	.-8      	; 0x3f18 <_hReceiverTest+0x22>
    3f20:	80 ff       	sbrs	r24, 0
    3f22:	49 c0       	rjmp	.+146    	; 0x3fb6 <_hReceiverTest+0xc0>
		{
			writeValue(i, 66, RX[i], 4, -1);
    3f24:	f7 01       	movw	r30, r14
    3f26:	40 81       	ld	r20, Z
    3f28:	51 81       	ldd	r21, Z+1	; 0x01
    3f2a:	0f ef       	ldi	r16, 0xFF	; 255
    3f2c:	24 e0       	ldi	r18, 0x04	; 4
    3f2e:	62 e4       	ldi	r22, 0x42	; 66
    3f30:	8c 2f       	mov	r24, r28
    3f32:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
			lcdSetPos(i, 96);
    3f36:	60 e6       	ldi	r22, 0x60	; 96
    3f38:	8c 2f       	mov	r24, r28
    3f3a:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			if (i == THR)
    3f3e:	c3 30       	cpi	r28, 0x03	; 3
    3f40:	a9 f4       	brne	.+42     	; 0x3f6c <_hReceiverTest+0x76>
			{
				if (State.ThrottleOff)
    3f42:	80 91 e1 05 	lds	r24, 0x05E1
    3f46:	88 23       	and	r24, r24
    3f48:	21 f0       	breq	.+8      	; 0x3f52 <_hReceiverTest+0x5c>
					writePadded_P(strIdle, 5);
    3f4a:	65 e0       	ldi	r22, 0x05	; 5
    3f4c:	89 ed       	ldi	r24, 0xD9	; 217
    3f4e:	98 e1       	ldi	r25, 0x18	; 24
    3f50:	0a c0       	rjmp	.+20     	; 0x3f66 <_hReceiverTest+0x70>
				else if (RX[THR] >= RX_THRESHOLD)
    3f52:	80 91 ac 05 	lds	r24, 0x05AC
    3f56:	90 91 ad 05 	lds	r25, 0x05AD
    3f5a:	8b 34       	cpi	r24, 0x4B	; 75
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	9c f0       	brlt	.+38     	; 0x3f86 <_hReceiverTest+0x90>
					writePadded_P(strFull, 5);
    3f60:	65 e0       	ldi	r22, 0x05	; 5
    3f62:	84 ed       	ldi	r24, 0xD4	; 212
    3f64:	98 e1       	ldi	r25, 0x18	; 24
    3f66:	0e 94 4b 1b 	call	0x3696	; 0x3696 <writePadded_P>
    3f6a:	2d c0       	rjmp	.+90     	; 0x3fc6 <_hReceiverTest+0xd0>
				else
					writeSpace(5);
			}
			else
			{
				if (abs(RX[i]) > (RX_THRESHOLD / 2))
    3f6c:	f7 01       	movw	r30, r14
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	9c 01       	movw	r18, r24
    3f74:	97 ff       	sbrs	r25, 7
    3f76:	04 c0       	rjmp	.+8      	; 0x3f80 <_hReceiverTest+0x8a>
    3f78:	22 27       	eor	r18, r18
    3f7a:	33 27       	eor	r19, r19
    3f7c:	28 1b       	sub	r18, r24
    3f7e:	39 0b       	sbc	r19, r25
    3f80:	26 32       	cpi	r18, 0x26	; 38
    3f82:	31 05       	cpc	r19, r1
    3f84:	24 f4       	brge	.+8      	; 0x3f8e <_hReceiverTest+0x98>
				if (State.ThrottleOff)
					writePadded_P(strIdle, 5);
				else if (RX[THR] >= RX_THRESHOLD)
					writePadded_P(strFull, 5);
				else
					writeSpace(5);
    3f86:	85 e0       	ldi	r24, 0x05	; 5
    3f88:	0e 94 3d 1b 	call	0x367a	; 0x367a <writeSpace>
    3f8c:	1c c0       	rjmp	.+56     	; 0x3fc6 <_hReceiverTest+0xd0>
			}
			else
			{
				if (abs(RX[i]) > (RX_THRESHOLD / 2))
					writePadded_P((PGM_P)pgm_read_word(&info[i][RX[i] > 0]), 5);
    3f8e:	21 e0       	ldi	r18, 0x01	; 1
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	18 16       	cp	r1, r24
    3f94:	19 06       	cpc	r1, r25
    3f96:	14 f0       	brlt	.+4      	; 0x3f9c <_hReceiverTest+0xa6>
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ee 0f       	add	r30, r30
    3fa0:	ff 1f       	adc	r31, r31
    3fa2:	e2 0f       	add	r30, r18
    3fa4:	f3 1f       	adc	r31, r19
    3fa6:	ee 0f       	add	r30, r30
    3fa8:	ff 1f       	adc	r31, r31
    3faa:	e6 59       	subi	r30, 0x96	; 150
    3fac:	f0 4f       	sbci	r31, 0xF0	; 240
    3fae:	85 91       	lpm	r24, Z+
    3fb0:	94 91       	lpm	r25, Z
    3fb2:	65 e0       	ldi	r22, 0x05	; 5
    3fb4:	d8 cf       	rjmp	.-80     	; 0x3f66 <_hReceiverTest+0x70>
					writeSpace(5);
			}
		}
		else
		{
			lcdSetPos(i, 66);
    3fb6:	62 e4       	ldi	r22, 0x42	; 66
    3fb8:	8c 2f       	mov	r24, r28
    3fba:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(strNoSignal);
    3fbe:	84 ef       	ldi	r24, 0xF4	; 244
    3fc0:	98 e1       	ldi	r25, 0x18	; 24
    3fc2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
    3fc6:	21 96       	adiw	r28, 0x01	; 1
    3fc8:	f2 e0       	ldi	r31, 0x02	; 2
    3fca:	ef 0e       	add	r14, r31
    3fcc:	f1 1c       	adc	r15, r1
		{ strIdle, strFull },
		{ strOff, strOn },
		{ strOff, strOn },
	};
	
	for (uint8_t i = 0; i < 6; i++)
    3fce:	c6 30       	cpi	r28, 0x06	; 6
    3fd0:	d1 05       	cpc	r29, r1
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <_hReceiverTest+0xe0>
    3fd4:	9c cf       	rjmp	.-200    	; 0x3f0e <_hReceiverTest+0x18>
		{
			lcdSetPos(i, 66);
			lcdWriteString_P(strNoSignal);
		}
	}
}
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	ef 90       	pop	r14
    3fe2:	08 95       	ret

00003fe4 <editModeHandler>:
		
	}
}

static void editModeHandler()
{
    3fe4:	0f 93       	push	r16
	if (KEY4)	// DONE;
    3fe6:	80 91 a4 05 	lds	r24, 0x05A4
    3fea:	84 ff       	sbrs	r24, 4
    3fec:	19 c0       	rjmp	.+50     	; 0x4020 <editModeHandler+0x3c>
	{
		editMode = OFF;
    3fee:	10 92 91 05 	sts	0x0591, r1
		
		if (editValueType == TYPE_UINT8)
    3ff2:	80 91 90 05 	lds	r24, 0x0590
    3ff6:	88 23       	and	r24, r24
    3ff8:	11 f0       	breq	.+4      	; 0x3ffe <editModeHandler+0x1a>
			*(uint8_t*)editValuePtr = editValue;
		else if (editValueType == TYPE_INT8)
    3ffa:	81 30       	cpi	r24, 0x01	; 1
    3ffc:	39 f4       	brne	.+14     	; 0x400c <editModeHandler+0x28>
			*(int8_t*)editValuePtr = editValue;
    3ffe:	e0 91 8e 05 	lds	r30, 0x058E
    4002:	f0 91 8f 05 	lds	r31, 0x058F
    4006:	80 91 98 05 	lds	r24, 0x0598
    400a:	80 83       	st	Z, r24
		
		//configSave();
		lcdSelectFont(NULL);
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
		keys = KEY_REFRESH;
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	80 93 a4 05 	sts	0x05A4, r24
		else if (KEY1)	// CLR?
			editValue = editInitialValue;
			
		writeValue(2, 34, editValue, 5, -1);
	}
}
    401a:	0f 91       	pop	r16
		
		//configSave();
		lcdSelectFont(NULL);
		keys = KEY_REFRESH;
		// call defaultHandler to refresh the screen
		defaultHandler();
    401c:	0c 94 46 20 	jmp	0x408c	; 0x408c <defaultHandler>
		return;
	}
	if (ANYKEY)
    4020:	88 23       	and	r24, r24
    4022:	91 f1       	breq	.+100    	; 0x4088 <editModeHandler+0xa4>
	{
		if (KEY2)	// DOWN?
    4024:	86 ff       	sbrs	r24, 6
    4026:	0d c0       	rjmp	.+26     	; 0x4042 <editModeHandler+0x5e>
		{
			if (editValue > editLoLimit)
    4028:	80 91 98 05 	lds	r24, 0x0598
    402c:	90 91 99 05 	lds	r25, 0x0599
    4030:	20 91 96 05 	lds	r18, 0x0596
    4034:	30 91 97 05 	lds	r19, 0x0597
    4038:	28 17       	cp	r18, r24
    403a:	39 07       	cpc	r19, r25
    403c:	dc f4       	brge	.+54     	; 0x4074 <editModeHandler+0x90>
				editValue--;
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	15 c0       	rjmp	.+42     	; 0x406c <editModeHandler+0x88>
		}
		else if (KEY3)	// UP?
    4042:	85 ff       	sbrs	r24, 5
    4044:	0d c0       	rjmp	.+26     	; 0x4060 <editModeHandler+0x7c>
		{
			if (editValue < editHiLimit)
    4046:	80 91 98 05 	lds	r24, 0x0598
    404a:	90 91 99 05 	lds	r25, 0x0599
    404e:	20 91 94 05 	lds	r18, 0x0594
    4052:	30 91 95 05 	lds	r19, 0x0595
    4056:	82 17       	cp	r24, r18
    4058:	93 07       	cpc	r25, r19
    405a:	64 f4       	brge	.+24     	; 0x4074 <editModeHandler+0x90>
				editValue++;
    405c:	01 96       	adiw	r24, 0x01	; 1
    405e:	06 c0       	rjmp	.+12     	; 0x406c <editModeHandler+0x88>
		}
		else if (KEY1)	// CLR?
    4060:	87 ff       	sbrs	r24, 7
    4062:	08 c0       	rjmp	.+16     	; 0x4074 <editModeHandler+0x90>
			editValue = editInitialValue;
    4064:	80 91 92 05 	lds	r24, 0x0592
    4068:	90 91 93 05 	lds	r25, 0x0593
    406c:	90 93 99 05 	sts	0x0599, r25
    4070:	80 93 98 05 	sts	0x0598, r24
			
		writeValue(2, 34, editValue, 5, -1);
    4074:	40 91 98 05 	lds	r20, 0x0598
    4078:	50 91 99 05 	lds	r21, 0x0599
    407c:	0f ef       	ldi	r16, 0xFF	; 255
    407e:	25 e0       	ldi	r18, 0x05	; 5
    4080:	62 e2       	ldi	r22, 0x22	; 34
    4082:	82 e0       	ldi	r24, 0x02	; 2
    4084:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	}
}
    4088:	0f 91       	pop	r16
    408a:	08 95       	ret

0000408c <defaultHandler>:
}

static void editModeHandler();
static void defaultHandler()
{
	if (editMode)		// edit mode?
    408c:	80 91 91 05 	lds	r24, 0x0591
    4090:	81 11       	cpse	r24, r1
		editModeHandler();
    4092:	0c 94 f2 1f 	jmp	0x3fe4	; 0x3fe4 <editModeHandler>
	else
	{
		if (KEYINIT | KEYREFRESH)
    4096:	80 91 a4 05 	lds	r24, 0x05A4
    409a:	83 70       	andi	r24, 0x03	; 3
    409c:	91 f0       	breq	.+36     	; 0x40c2 <defaultHandler+0x36>
		{
			lcdClear();
    409e:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
			if (currentPage.screen)
    40a2:	80 91 9e 05 	lds	r24, 0x059E
    40a6:	90 91 9f 05 	lds	r25, 0x059F
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	11 f0       	breq	.+4      	; 0x40b2 <defaultHandler+0x26>
				lcdWriteString_P(currentPage.screen);
    40ae:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			writeSoftkeys(NULL);
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
			lcdSetPos(0, 0);
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		}
		
		if (currentPage.handler)
    40c2:	e0 91 9c 05 	lds	r30, 0x059C
    40c6:	f0 91 9d 05 	lds	r31, 0x059D
    40ca:	30 97       	sbiw	r30, 0x00	; 0
    40cc:	09 f0       	breq	.+2      	; 0x40d0 <defaultHandler+0x44>
			currentPage.handler();
    40ce:	09 94       	ijmp
    40d0:	08 95       	ret

000040d2 <startEditMode>:
		writeValue(2, 34, editValue, 5, -1);
	}
}

static void startEditMode(void* valuePtr, int16_t loLimit, int16_t hiLimit, uint8_t valueType)
{
    40d2:	0f 93       	push	r16
	editMode = ON;
    40d4:	31 e0       	ldi	r19, 0x01	; 1
    40d6:	30 93 91 05 	sts	0x0591, r19
	keys = KEY_INIT;
    40da:	30 93 a4 05 	sts	0x05A4, r19
	editValuePtr = valuePtr;
    40de:	90 93 8f 05 	sts	0x058F, r25
    40e2:	80 93 8e 05 	sts	0x058E, r24
	editValueType = valueType;
    40e6:	20 93 90 05 	sts	0x0590, r18
	
	if (valueType == TYPE_UINT8)
    40ea:	21 11       	cpse	r18, r1
    40ec:	04 c0       	rjmp	.+8      	; 0x40f6 <startEditMode+0x24>
		editValue = *(uint8_t*)valuePtr;
    40ee:	fc 01       	movw	r30, r24
    40f0:	80 81       	ld	r24, Z
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	07 c0       	rjmp	.+14     	; 0x4104 <startEditMode+0x32>
	else if (valueType == TYPE_INT8)
    40f6:	21 30       	cpi	r18, 0x01	; 1
    40f8:	49 f4       	brne	.+18     	; 0x410c <startEditMode+0x3a>
		editValue = *(int8_t*)valuePtr;
    40fa:	fc 01       	movw	r30, r24
    40fc:	80 81       	ld	r24, Z
    40fe:	99 27       	eor	r25, r25
    4100:	87 fd       	sbrc	r24, 7
    4102:	90 95       	com	r25
    4104:	90 93 99 05 	sts	0x0599, r25
    4108:	80 93 98 05 	sts	0x0598, r24
// 	else if (valueType == TYPE_INT16)
// 		editValue = *(int16_t*)valuePtr;
	
	editLoLimit = loLimit;
    410c:	70 93 97 05 	sts	0x0597, r23
    4110:	60 93 96 05 	sts	0x0596, r22
	editHiLimit = hiLimit;
    4114:	50 93 95 05 	sts	0x0595, r21
    4118:	40 93 94 05 	sts	0x0594, r20
	editInitialValue = editValue;
    411c:	80 91 98 05 	lds	r24, 0x0598
    4120:	90 91 99 05 	lds	r25, 0x0599
    4124:	90 93 93 05 	sts	0x0593, r25
    4128:	80 93 92 05 	sts	0x0592, r24
	
	lcdFillRectangle(30, 11, 98, 34, 0);
    412c:	00 e0       	ldi	r16, 0x00	; 0
    412e:	22 e2       	ldi	r18, 0x22	; 34
    4130:	42 e6       	ldi	r20, 0x62	; 98
    4132:	6b e0       	ldi	r22, 0x0B	; 11
    4134:	8e e1       	ldi	r24, 0x1E	; 30
    4136:	0e 94 0b 12 	call	0x2416	; 0x2416 <lcdFillRectangle>
	lcdRectangle(30, 11, 98, 34, 1);
    413a:	01 e0       	ldi	r16, 0x01	; 1
    413c:	22 e2       	ldi	r18, 0x22	; 34
    413e:	42 e6       	ldi	r20, 0x62	; 98
    4140:	6b e0       	ldi	r22, 0x0B	; 11
    4142:	8e e1       	ldi	r24, 0x1E	; 30
    4144:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <lcdRectangle>
	lcdRectangle(31, 12, 97, 33, 1);
    4148:	21 e2       	ldi	r18, 0x21	; 33
    414a:	41 e6       	ldi	r20, 0x61	; 97
    414c:	6c e0       	ldi	r22, 0x0C	; 12
    414e:	8f e1       	ldi	r24, 0x1F	; 31
    4150:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <lcdRectangle>
	writeSoftkeys(_skEDIT);
    4154:	81 ec       	ldi	r24, 0xC1	; 193
    4156:	90 e1       	ldi	r25, 0x10	; 16
    4158:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
	lcdSelectFont(&font12x16);
    415c:	88 e9       	ldi	r24, 0x98	; 152
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
	editModeHandler();
}
    4164:	0f 91       	pop	r16
	lcdFillRectangle(30, 11, 98, 34, 0);
	lcdRectangle(30, 11, 98, 34, 1);
	lcdRectangle(31, 12, 97, 33, 1);
	writeSoftkeys(_skEDIT);
	lcdSelectFont(&font12x16);
	editModeHandler();
    4166:	0c 94 f2 1f 	jmp	0x3fe4	; 0x3fe4 <editModeHandler>

0000416a <_hMixerEditor>:
	for (uint8_t i = 0; i < 4; i++)
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
}

static void _hMixerEditor()
{
    416a:	0f 93       	push	r16
    416c:	1f 93       	push	r17
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
	NOKEYRETURN;
    4172:	80 91 a4 05 	lds	r24, 0x05A4
    4176:	88 23       	and	r24, r24
    4178:	09 f4       	brne	.+2      	; 0x417c <_hMixerEditor+0x12>
    417a:	9f c0       	rjmp	.+318    	; 0x42ba <_hMixerEditor+0x150>
		
	if (KEY4)	// CHANGE?
    417c:	84 ff       	sbrs	r24, 4
    417e:	41 c0       	rjmp	.+130    	; 0x4202 <_hMixerEditor+0x98>
	{
		if (elementIndex == 0)
    4180:	80 91 a3 05 	lds	r24, 0x05A3
    4184:	e0 91 a2 05 	lds	r30, 0x05A2
    4188:	81 11       	cpse	r24, r1
    418a:	05 c0       	rjmp	.+10     	; 0x4196 <_hMixerEditor+0x2c>
			subpage = (subpage + 1) % length(Config.Mixer);
    418c:	ef 5f       	subi	r30, 0xFF	; 255
    418e:	e7 70       	andi	r30, 0x07	; 7
    4190:	e0 93 a2 05 	sts	0x05A2, r30
    4194:	36 c0       	rjmp	.+108    	; 0x4202 <_hMixerEditor+0x98>
		else if (elementIndex <= 5)
    4196:	86 30       	cpi	r24, 0x06	; 6
    4198:	98 f4       	brcc	.+38     	; 0x41c0 <_hMixerEditor+0x56>
		{
			startEditMode(&Config.Mixer[subpage].I8[elementIndex - 1], -127, 127, TYPE_INT8); 
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	26 e0       	ldi	r18, 0x06	; 6
    419e:	e2 9f       	mul	r30, r18
    41a0:	80 0d       	add	r24, r0
    41a2:	91 1d       	adc	r25, r1
    41a4:	11 24       	eor	r1, r1
    41a6:	21 e0       	ldi	r18, 0x01	; 1
    41a8:	4f e7       	ldi	r20, 0x7F	; 127
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	61 e8       	ldi	r22, 0x81	; 129
    41ae:	7f ef       	ldi	r23, 0xFF	; 255
    41b0:	8e 55       	subi	r24, 0x5E	; 94
    41b2:	99 4f       	sbci	r25, 0xF9	; 249
	else
		s = strOff;
		
	writeString_P(5, 36, s, 5, 6);
	writeString_P(5, 108, Config.Mixer[subpage].IsMotor || Config.Mixer[subpage].IsHiRate ? strHigh : strLow, 3, 7);
}
    41b4:	df 91       	pop	r29
    41b6:	cf 91       	pop	r28
    41b8:	1f 91       	pop	r17
    41ba:	0f 91       	pop	r16
	{
		if (elementIndex == 0)
			subpage = (subpage + 1) % length(Config.Mixer);
		else if (elementIndex <= 5)
		{
			startEditMode(&Config.Mixer[subpage].I8[elementIndex - 1], -127, 127, TYPE_INT8); 
    41bc:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <startEditMode>
			return;
		}						
		else if (elementIndex == 6)		// type
    41c0:	86 30       	cpi	r24, 0x06	; 6
    41c2:	a9 f4       	brne	.+42     	; 0x41ee <_hMixerEditor+0x84>
		{
			if (Config.Mixer[subpage].Flags == 0)
    41c4:	8e 9f       	mul	r24, r30
    41c6:	f0 01       	movw	r30, r0
    41c8:	11 24       	eor	r1, r1
    41ca:	df 01       	movw	r26, r30
    41cc:	a8 55       	subi	r26, 0x58	; 88
    41ce:	b9 4f       	sbci	r27, 0xF9	; 249
    41d0:	8c 91       	ld	r24, X
    41d2:	81 11       	cpse	r24, r1
    41d4:	02 c0       	rjmp	.+4      	; 0x41da <_hMixerEditor+0x70>
				Config.Mixer[subpage].Flags = FLAG_ESC | FLAG_HIGH;
    41d6:	85 e0       	ldi	r24, 0x05	; 5
    41d8:	06 c0       	rjmp	.+12     	; 0x41e6 <_hMixerEditor+0x7c>
			else if (Config.Mixer[subpage].IsMotor)
    41da:	e8 55       	subi	r30, 0x58	; 88
    41dc:	f9 4f       	sbci	r31, 0xF9	; 249
    41de:	80 81       	ld	r24, Z
    41e0:	80 ff       	sbrs	r24, 0
    41e2:	03 c0       	rjmp	.+6      	; 0x41ea <_hMixerEditor+0x80>
				Config.Mixer[subpage].Flags = FLAG_SERVO;
    41e4:	82 e0       	ldi	r24, 0x02	; 2
    41e6:	8c 93       	st	X, r24
    41e8:	0c c0       	rjmp	.+24     	; 0x4202 <_hMixerEditor+0x98>
			else 
				Config.Mixer[subpage].Flags = FLAG_NONE;
    41ea:	1c 92       	st	X, r1
    41ec:	0a c0       	rjmp	.+20     	; 0x4202 <_hMixerEditor+0x98>
		}		
		else
			Config.Mixer[subpage].Flags ^= FLAG_HIGH;
    41ee:	86 e0       	ldi	r24, 0x06	; 6
    41f0:	e8 9f       	mul	r30, r24
    41f2:	f0 01       	movw	r30, r0
    41f4:	11 24       	eor	r1, r1
    41f6:	e8 55       	subi	r30, 0x58	; 88
    41f8:	f9 4f       	sbci	r31, 0xF9	; 249
    41fa:	80 81       	ld	r24, Z
    41fc:	94 e0       	ldi	r25, 0x04	; 4
    41fe:	89 27       	eor	r24, r25
    4200:	80 83       	st	Z, r24
	}
	
	elementKey(8);
    4202:	88 e0       	ldi	r24, 0x08	; 8
    4204:	0e 94 3e 1c 	call	0x387c	; 0x387c <elementKey>
	writeValue(0, 120, subpage + 1, 1, 0);
    4208:	40 91 a2 05 	lds	r20, 0x05A2
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	4f 5f       	subi	r20, 0xFF	; 255
    4210:	5f 4f       	sbci	r21, 0xFF	; 255
    4212:	00 e0       	ldi	r16, 0x00	; 0
    4214:	21 e0       	ldi	r18, 0x01	; 1
    4216:	68 e7       	ldi	r22, 0x78	; 120
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
    421e:	c0 e0       	ldi	r28, 0x00	; 0
    4220:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 5; i++)
		writeValue(i, 60, Config.Mixer[subpage].I8[i], 4, i + 1);
    4222:	16 e0       	ldi	r17, 0x06	; 6
    4224:	0c 2f       	mov	r16, r28
    4226:	0f 5f       	subi	r16, 0xFF	; 255
    4228:	80 91 a2 05 	lds	r24, 0x05A2
    422c:	fe 01       	movw	r30, r28
    422e:	18 9f       	mul	r17, r24
    4230:	e0 0d       	add	r30, r0
    4232:	f1 1d       	adc	r31, r1
    4234:	11 24       	eor	r1, r1
    4236:	ed 55       	subi	r30, 0x5D	; 93
    4238:	f9 4f       	sbci	r31, 0xF9	; 249
    423a:	40 81       	ld	r20, Z
    423c:	55 27       	eor	r21, r21
    423e:	47 fd       	sbrc	r20, 7
    4240:	50 95       	com	r21
    4242:	24 e0       	ldi	r18, 0x04	; 4
    4244:	6c e3       	ldi	r22, 0x3C	; 60
    4246:	8c 2f       	mov	r24, r28
    4248:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
    424c:	21 96       	adiw	r28, 0x01	; 1
			Config.Mixer[subpage].Flags ^= FLAG_HIGH;
	}
	
	elementKey(8);
	writeValue(0, 120, subpage + 1, 1, 0);
	for (uint8_t i = 0; i < 5; i++)
    424e:	c5 30       	cpi	r28, 0x05	; 5
    4250:	d1 05       	cpc	r29, r1
    4252:	41 f7       	brne	.-48     	; 0x4224 <_hMixerEditor+0xba>
		writeValue(i, 60, Config.Mixer[subpage].I8[i], 4, i + 1);
	const char *s;
	
	if (Config.Mixer[subpage].IsMotor)
    4254:	e0 91 a2 05 	lds	r30, 0x05A2
    4258:	26 e0       	ldi	r18, 0x06	; 6
    425a:	e2 9f       	mul	r30, r18
    425c:	f0 01       	movw	r30, r0
    425e:	11 24       	eor	r1, r1
    4260:	e8 55       	subi	r30, 0x58	; 88
    4262:	f9 4f       	sbci	r31, 0xF9	; 249
    4264:	80 81       	ld	r24, Z
    4266:	80 fd       	sbrc	r24, 0
    4268:	05 c0       	rjmp	.+10     	; 0x4274 <_hMixerEditor+0x10a>
		s = strESC;
	else if (Config.Mixer[subpage].IsServo)
    426a:	81 ff       	sbrs	r24, 1
    426c:	06 c0       	rjmp	.+12     	; 0x427a <_hMixerEditor+0x110>
		s = strServo;
    426e:	44 e0       	ldi	r20, 0x04	; 4
    4270:	59 e1       	ldi	r21, 0x19	; 25
    4272:	05 c0       	rjmp	.+10     	; 0x427e <_hMixerEditor+0x114>
	for (uint8_t i = 0; i < 5; i++)
		writeValue(i, 60, Config.Mixer[subpage].I8[i], 4, i + 1);
	const char *s;
	
	if (Config.Mixer[subpage].IsMotor)
		s = strESC;
    4274:	4a e0       	ldi	r20, 0x0A	; 10
    4276:	59 e1       	ldi	r21, 0x19	; 25
    4278:	02 c0       	rjmp	.+4      	; 0x427e <_hMixerEditor+0x114>
	else if (Config.Mixer[subpage].IsServo)
		s = strServo;
	else
		s = strOff;
    427a:	4d ec       	ldi	r20, 0xCD	; 205
    427c:	58 e1       	ldi	r21, 0x18	; 24
		
	writeString_P(5, 36, s, 5, 6);
    427e:	06 e0       	ldi	r16, 0x06	; 6
    4280:	25 e0       	ldi	r18, 0x05	; 5
    4282:	64 e2       	ldi	r22, 0x24	; 36
    4284:	85 e0       	ldi	r24, 0x05	; 5
    4286:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
	writeString_P(5, 108, Config.Mixer[subpage].IsMotor || Config.Mixer[subpage].IsHiRate ? strHigh : strLow, 3, 7);
    428a:	e0 91 a2 05 	lds	r30, 0x05A2
    428e:	86 e0       	ldi	r24, 0x06	; 6
    4290:	e8 9f       	mul	r30, r24
    4292:	f0 01       	movw	r30, r0
    4294:	11 24       	eor	r1, r1
    4296:	e8 55       	subi	r30, 0x58	; 88
    4298:	f9 4f       	sbci	r31, 0xF9	; 249
    429a:	80 81       	ld	r24, Z
    429c:	80 ff       	sbrs	r24, 0
    429e:	03 c0       	rjmp	.+6      	; 0x42a6 <_hMixerEditor+0x13c>
    42a0:	41 e0       	ldi	r20, 0x01	; 1
    42a2:	59 e1       	ldi	r21, 0x19	; 25
    42a4:	04 c0       	rjmp	.+8      	; 0x42ae <_hMixerEditor+0x144>
    42a6:	82 fd       	sbrc	r24, 2
    42a8:	fb cf       	rjmp	.-10     	; 0x42a0 <_hMixerEditor+0x136>
    42aa:	4e ef       	ldi	r20, 0xFE	; 254
    42ac:	58 e1       	ldi	r21, 0x18	; 24
    42ae:	07 e0       	ldi	r16, 0x07	; 7
    42b0:	23 e0       	ldi	r18, 0x03	; 3
    42b2:	6c e6       	ldi	r22, 0x6C	; 108
    42b4:	85 e0       	ldi	r24, 0x05	; 5
    42b6:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <writeString_P>
}
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	08 95       	ret

000042c4 <_hCPPMSettings>:
		lcdWriteString_P(scrCPPMSettings2);
	writeSoftkeys(NULL);
}

static void _hCPPMSettings()
{
    42c4:	ef 92       	push	r14
    42c6:	ff 92       	push	r15
    42c8:	0f 93       	push	r16
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
	NOKEYRETURN;
    42d0:	d0 91 a4 05 	lds	r29, 0x05A4
    42d4:	dd 23       	and	r29, r29
    42d6:	09 f4       	brne	.+2      	; 0x42da <_hCPPMSettings+0x16>
    42d8:	62 c0       	rjmp	.+196    	; 0x439e <_hCPPMSettings+0xda>
	uint8_t oldsubpage = elementIndex / 4;
    42da:	10 91 a3 05 	lds	r17, 0x05A3
	elementKey(8);
    42de:	88 e0       	ldi	r24, 0x08	; 8
    42e0:	0e 94 3e 1c 	call	0x387c	; 0x387c <elementKey>
	uint8_t subpage = elementIndex / 4;
    42e4:	c0 91 a3 05 	lds	r28, 0x05A3
    42e8:	c6 95       	lsr	r28
    42ea:	c6 95       	lsr	r28
    42ec:	d3 70       	andi	r29, 0x03	; 3
	
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
    42ee:	21 f4       	brne	.+8      	; 0x42f8 <_hCPPMSettings+0x34>
}

static void _hCPPMSettings()
{
	NOKEYRETURN;
	uint8_t oldsubpage = elementIndex / 4;
    42f0:	16 95       	lsr	r17
    42f2:	16 95       	lsr	r17
	elementKey(8);
	uint8_t subpage = elementIndex / 4;
	
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
    42f4:	1c 17       	cp	r17, r28
    42f6:	b9 f0       	breq	.+46     	; 0x4326 <_hCPPMSettings+0x62>
	simplePageHandler(elements, length(elements));
}

static void writeCPPMScreen(uint8_t index)
{
	lcdClear();
    42f8:	0e 94 3a 12 	call	0x2474	; 0x2474 <lcdClear>
	lcdWriteString_P(strCPPMSettings);
    42fc:	81 eb       	ldi	r24, 0xB1	; 177
    42fe:	99 e1       	ldi	r25, 0x19	; 25
    4300:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
	lcdSetPos(2, 0);
    4304:	60 e0       	ldi	r22, 0x00	; 0
    4306:	82 e0       	ldi	r24, 0x02	; 2
    4308:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	if (index == 0)
    430c:	c1 11       	cpse	r28, r1
    430e:	03 c0       	rjmp	.+6      	; 0x4316 <_hCPPMSettings+0x52>
		lcdWriteString_P(scrCPPMSettings1);
    4310:	85 e0       	ldi	r24, 0x05	; 5
    4312:	96 e1       	ldi	r25, 0x16	; 22
    4314:	02 c0       	rjmp	.+4      	; 0x431a <_hCPPMSettings+0x56>
	else
		lcdWriteString_P(scrCPPMSettings2);
    4316:	8d ee       	ldi	r24, 0xED	; 237
    4318:	95 e1       	ldi	r25, 0x15	; 21
    431a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
	writeSoftkeys(NULL);
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <writeSoftkeys>
	uint8_t subpage = elementIndex / 4;
	
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
		writeCPPMScreen(subpage);
	
	if (KEY4)	// CHANGE?
    4326:	80 91 a4 05 	lds	r24, 0x05A4
    432a:	ec 2e       	mov	r14, r28
    432c:	f1 2c       	mov	r15, r1
    432e:	84 ff       	sbrs	r24, 4
    4330:	18 c0       	rjmp	.+48     	; 0x4362 <_hCPPMSettings+0x9e>
	{
		startEditMode(&Config.RX_chmap[subpage * 4 + elementIndex - 1], 1, 8, TYPE_UINT8);
    4332:	c7 01       	movw	r24, r14
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	88 0f       	add	r24, r24
    433a:	99 1f       	adc	r25, r25
    433c:	20 91 a3 05 	lds	r18, 0x05A3
    4340:	82 0f       	add	r24, r18
    4342:	91 1d       	adc	r25, r1
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	48 e0       	ldi	r20, 0x08	; 8
    4348:	50 e0       	ldi	r21, 0x00	; 0
    434a:	61 e0       	ldi	r22, 0x01	; 1
    434c:	70 e0       	ldi	r23, 0x00	; 0
    434e:	85 59       	subi	r24, 0x95	; 149
    4350:	99 4f       	sbci	r25, 0xF9	; 249
		return;
	}
	
	for (int i = 0; i < 4; i++)
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
}
    4352:	df 91       	pop	r29
    4354:	cf 91       	pop	r28
    4356:	1f 91       	pop	r17
    4358:	0f 91       	pop	r16
    435a:	ff 90       	pop	r15
    435c:	ef 90       	pop	r14
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
		writeCPPMScreen(subpage);
	
	if (KEY4)	// CHANGE?
	{
		startEditMode(&Config.RX_chmap[subpage * 4 + elementIndex - 1], 1, 8, TYPE_UINT8);
    435e:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <startEditMode>
		return;
	}
	
	for (int i = 0; i < 4; i++)
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
    4362:	1c 2f       	mov	r17, r28
    4364:	11 0f       	add	r17, r17
    4366:	11 0f       	add	r17, r17
    4368:	ee 0c       	add	r14, r14
    436a:	ff 1c       	adc	r15, r15
    436c:	ee 0c       	add	r14, r14
    436e:	ff 1c       	adc	r15, r15
    4370:	c0 e0       	ldi	r28, 0x00	; 0
    4372:	d0 e0       	ldi	r29, 0x00	; 0
    4374:	c7 01       	movw	r24, r14
    4376:	85 5a       	subi	r24, 0xA5	; 165
    4378:	99 4f       	sbci	r25, 0xF9	; 249
    437a:	7c 01       	movw	r14, r24
    437c:	0c 2f       	mov	r16, r28
    437e:	01 0f       	add	r16, r17
    4380:	f7 01       	movw	r30, r14
    4382:	ec 0f       	add	r30, r28
    4384:	fd 1f       	adc	r31, r29
    4386:	41 89       	ldd	r20, Z+17	; 0x11
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	21 e0       	ldi	r18, 0x01	; 1
    438c:	6e e4       	ldi	r22, 0x4E	; 78
    438e:	8c 2f       	mov	r24, r28
    4390:	8e 5f       	subi	r24, 0xFE	; 254
    4392:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	{
		startEditMode(&Config.RX_chmap[subpage * 4 + elementIndex - 1], 1, 8, TYPE_UINT8);
		return;
	}
	
	for (int i = 0; i < 4; i++)
    4396:	21 96       	adiw	r28, 0x01	; 1
    4398:	c4 30       	cpi	r28, 0x04	; 4
    439a:	d1 05       	cpc	r29, r1
    439c:	79 f7       	brne	.-34     	; 0x437c <_hCPPMSettings+0xb8>
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
}
    439e:	df 91       	pop	r29
    43a0:	cf 91       	pop	r28
    43a2:	1f 91       	pop	r17
    43a4:	0f 91       	pop	r16
    43a6:	ff 90       	pop	r15
    43a8:	ef 90       	pop	r14
    43aa:	08 95       	ret

000043ac <simplePageHandler>:
	writeString_P(5, 36, s, 5, 6);
	writeString_P(5, 108, Config.Mixer[subpage].IsMotor || Config.Mixer[subpage].IsHiRate ? strHigh : strLow, 3, 7);
}

static void simplePageHandler(const edit_element_t *elements, uint8_t len)
{
    43ac:	df 92       	push	r13
    43ae:	ef 92       	push	r14
    43b0:	ff 92       	push	r15
    43b2:	0f 93       	push	r16
    43b4:	1f 93       	push	r17
    43b6:	cf 93       	push	r28
    43b8:	df 93       	push	r29
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
    43be:	29 97       	sbiw	r28, 0x09	; 9
    43c0:	0f b6       	in	r0, 0x3f	; 63
    43c2:	f8 94       	cli
    43c4:	de bf       	out	0x3e, r29	; 62
    43c6:	0f be       	out	0x3f, r0	; 63
    43c8:	cd bf       	out	0x3d, r28	; 61
    43ca:	7c 01       	movw	r14, r24
    43cc:	d6 2e       	mov	r13, r22
	NOKEYRETURN;
    43ce:	10 91 a4 05 	lds	r17, 0x05A4
    43d2:	11 23       	and	r17, r17
    43d4:	a9 f1       	breq	.+106    	; 0x4440 <simplePageHandler+0x94>
	edit_element_t element;
	elementKey(len);
    43d6:	86 2f       	mov	r24, r22
    43d8:	0e 94 3e 1c 	call	0x387c	; 0x387c <elementKey>
	if (KEY4)	// CHANGE?
    43dc:	14 fd       	sbrc	r17, 4
    43de:	19 c0       	rjmp	.+50     	; 0x4412 <simplePageHandler+0x66>
    43e0:	10 e0       	ldi	r17, 0x00	; 0
	{
		memcpy_P(&element, &elements[elementIndex], sizeof(element));
		startEditMode(element.valuePtr, element.loLimit, element.hiLimit, TYPE_UINT8);
		return;
	}
	for (uint8_t i = 0; i < len; i++)
    43e2:	1d 15       	cp	r17, r13
    43e4:	69 f1       	breq	.+90     	; 0x4440 <simplePageHandler+0x94>
	{
		memcpy_P(&element, &elements[i], sizeof(element));
    43e6:	49 e0       	ldi	r20, 0x09	; 9
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	b7 01       	movw	r22, r14
    43ec:	ce 01       	movw	r24, r28
    43ee:	01 96       	adiw	r24, 0x01	; 1
    43f0:	0e 94 56 24 	call	0x48ac	; 0x48ac <memcpy_P>
		writeValue(element.X, element.Y, *(uint8_t*)element.valuePtr, element.len, i);
    43f4:	eb 81       	ldd	r30, Y+3	; 0x03
    43f6:	fc 81       	ldd	r31, Y+4	; 0x04
    43f8:	40 81       	ld	r20, Z
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	01 2f       	mov	r16, r17
    43fe:	29 85       	ldd	r18, Y+9	; 0x09
    4400:	6a 81       	ldd	r22, Y+2	; 0x02
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	{
		memcpy_P(&element, &elements[elementIndex], sizeof(element));
		startEditMode(element.valuePtr, element.loLimit, element.hiLimit, TYPE_UINT8);
		return;
	}
	for (uint8_t i = 0; i < len; i++)
    4408:	1f 5f       	subi	r17, 0xFF	; 255
    440a:	89 e0       	ldi	r24, 0x09	; 9
    440c:	e8 0e       	add	r14, r24
    440e:	f1 1c       	adc	r15, r1
    4410:	e8 cf       	rjmp	.-48     	; 0x43e2 <simplePageHandler+0x36>
	NOKEYRETURN;
	edit_element_t element;
	elementKey(len);
	if (KEY4)	// CHANGE?
	{
		memcpy_P(&element, &elements[elementIndex], sizeof(element));
    4412:	80 91 a3 05 	lds	r24, 0x05A3
    4416:	b7 01       	movw	r22, r14
    4418:	99 e0       	ldi	r25, 0x09	; 9
    441a:	89 9f       	mul	r24, r25
    441c:	60 0d       	add	r22, r0
    441e:	71 1d       	adc	r23, r1
    4420:	11 24       	eor	r1, r1
    4422:	49 e0       	ldi	r20, 0x09	; 9
    4424:	50 e0       	ldi	r21, 0x00	; 0
    4426:	ce 01       	movw	r24, r28
    4428:	01 96       	adiw	r24, 0x01	; 1
    442a:	0e 94 56 24 	call	0x48ac	; 0x48ac <memcpy_P>
		startEditMode(element.valuePtr, element.loLimit, element.hiLimit, TYPE_UINT8);
    442e:	4f 81       	ldd	r20, Y+7	; 0x07
    4430:	58 85       	ldd	r21, Y+8	; 0x08
    4432:	6d 81       	ldd	r22, Y+5	; 0x05
    4434:	7e 81       	ldd	r23, Y+6	; 0x06
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	8b 81       	ldd	r24, Y+3	; 0x03
    443a:	9c 81       	ldd	r25, Y+4	; 0x04
    443c:	0e 94 69 20 	call	0x40d2	; 0x40d2 <startEditMode>
	for (uint8_t i = 0; i < len; i++)
	{
		memcpy_P(&element, &elements[i], sizeof(element));
		writeValue(element.X, element.Y, *(uint8_t*)element.valuePtr, element.len, i);
	}
}
    4440:	29 96       	adiw	r28, 0x09	; 9
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	0f 91       	pop	r16
    4454:	ff 90       	pop	r15
    4456:	ef 90       	pop	r14
    4458:	df 90       	pop	r13
    445a:	08 95       	ret

0000445c <_hCameraStabSettings>:
		{ 2, 84, &Config.Camera.RollGain, -128, 127, 5 },
		{ 3, 84, &Config.Camera.RollOffset, -128, 127, 5 },
		{ 4, 84, &Config.Camera.PitchGain, -128, 127, 5 },
		{ 5, 84, &Config.Camera.PitchOffset, -128, 127, 5 },
	};
	simplePageHandler(elements, length(elements));
    445c:	64 e0       	ldi	r22, 0x04	; 4
    445e:	87 ef       	ldi	r24, 0xF7	; 247
    4460:	9f e0       	ldi	r25, 0x0F	; 15
    4462:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <simplePageHandler>

00004466 <_hSelflevelSettings>:
		{ 0, 54, &Config.PID_SelfLevel.PGain, 0, 250, 5 },
		{ 1, 54, &Config.PID_SelfLevel.PLimit, 0, 250, 5 },
		{ 3, 96, &Config.AccTrim[ROL], -45, 45, 5 },
		{ 4, 96, &Config.AccTrim[PIT], -45, 45, 5 },
	};
	simplePageHandler(elements, length(elements));
    4466:	64 e0       	ldi	r22, 0x04	; 4
    4468:	83 ed       	ldi	r24, 0xD3	; 211
    446a:	9f e0       	ldi	r25, 0x0F	; 15
    446c:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <simplePageHandler>

00004470 <_hMiscSettings>:
		{ 1, 102, &Config.HeightDampening, 0, 250, 4 },
		{ 2, 102, &Config.HeightDampeningLimit, 0, 30, 4 },
		{ 3, 102, &Config.LVA, 0, 250, 4 },
		{ 4, 102, &Config.ServoFilter, 0, 100, 4 },
	};
	simplePageHandler(elements, length(elements));
    4470:	65 e0       	ldi	r22, 0x05	; 5
    4472:	86 ea       	ldi	r24, 0xA6	; 166
    4474:	9f e0       	ldi	r25, 0x0F	; 15
    4476:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <simplePageHandler>

0000447a <_hStickScaling>:
		{ 2, 78, &Config.StickScaling[AIL], 0, 200, 5 },
		{ 3, 78, &Config.StickScaling[ELE], 0, 200, 5 },
		{ 4, 78, &Config.StickScaling[RUD], 0, 200, 5 },
		{ 5, 78, &Config.StickScaling[THR], 0, 200, 5 },
	};
	simplePageHandler(elements, length(elements));
    447a:	64 e0       	ldi	r22, 0x04	; 4
    447c:	82 e8       	ldi	r24, 0x82	; 130
    447e:	9f e0       	ldi	r25, 0x0F	; 15
    4480:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <simplePageHandler>

00004484 <_hPIEditor>:
	writeString_P(3, 84, Config.AutoDisarm ? strYes : strNo, 3, 3);
	writeString_P(4, 84, Config.ReceiverMode ? strYes : strNo, 3, 4);
}

static void _hPIEditor()
{
    4484:	ef 92       	push	r14
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
	NOKEYRETURN;
    448e:	d0 91 a4 05 	lds	r29, 0x05A4
    4492:	dd 23       	and	r29, r29
    4494:	09 f4       	brne	.+2      	; 0x4498 <_hPIEditor+0x14>
    4496:	6b c0       	rjmp	.+214    	; 0x456e <_hPIEditor+0xea>
	
	elementKey(5);
    4498:	85 e0       	ldi	r24, 0x05	; 5
    449a:	0e 94 3e 1c 	call	0x387c	; 0x387c <elementKey>

	uint8_t index = subpage;
    449e:	80 91 a2 05 	lds	r24, 0x05A2
	if (Config.LinkRollPitch) index = subpage & 0xFE; 
    44a2:	20 91 90 06 	lds	r18, 0x0690
    44a6:	c8 2f       	mov	r28, r24
    44a8:	21 11       	cpse	r18, r1
    44aa:	ce 7f       	andi	r28, 0xFE	; 254
	
	if (KEY4) // CHANGE
    44ac:	d4 ff       	sbrs	r29, 4
    44ae:	26 c0       	rjmp	.+76     	; 0x44fc <_hPIEditor+0x78>
	{
		if (elementIndex == 0)
    44b0:	90 91 a3 05 	lds	r25, 0x05A3
    44b4:	91 11       	cpse	r25, r1
    44b6:	0d c0       	rjmp	.+26     	; 0x44d2 <_hPIEditor+0x4e>
		{
			subpage = (subpage + 1) % 3;
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	01 96       	adiw	r24, 0x01	; 1
    44bc:	63 e0       	ldi	r22, 0x03	; 3
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	0e 94 02 24 	call	0x4804	; 0x4804 <__divmodhi4>
    44c4:	c8 2f       	mov	r28, r24
    44c6:	80 93 a2 05 	sts	0x05A2, r24
			index = subpage;
			if (Config.LinkRollPitch) index = subpage & 0xFE;
    44ca:	22 23       	and	r18, r18
    44cc:	b9 f0       	breq	.+46     	; 0x44fc <_hPIEditor+0x78>
    44ce:	ce 7f       	andi	r28, 0xFE	; 254
    44d0:	15 c0       	rjmp	.+42     	; 0x44fc <_hPIEditor+0x78>
		}			
		else
		{
			startEditMode(&Config.PID[index].UI8[elementIndex - 1], 0, 200, TYPE_UINT8);
    44d2:	89 2f       	mov	r24, r25
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	24 e0       	ldi	r18, 0x04	; 4
    44d8:	c2 9f       	mul	r28, r18
    44da:	80 0d       	add	r24, r0
    44dc:	91 1d       	adc	r25, r1
    44de:	11 24       	eor	r1, r1
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	48 ec       	ldi	r20, 0xC8	; 200
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	60 e0       	ldi	r22, 0x00	; 0
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	80 58       	subi	r24, 0x80	; 128
    44ec:	99 4f       	sbci	r25, 0xF9	; 249
		default: writePadded_P(strYawRud, 16); break;
	}
	
	for (uint8_t i = 0; i < 4; i++)
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
}
    44ee:	df 91       	pop	r29
    44f0:	cf 91       	pop	r28
    44f2:	0f 91       	pop	r16
    44f4:	ff 90       	pop	r15
    44f6:	ef 90       	pop	r14
			index = subpage;
			if (Config.LinkRollPitch) index = subpage & 0xFE;
		}			
		else
		{
			startEditMode(&Config.PID[index].UI8[elementIndex - 1], 0, 200, TYPE_UINT8);
    44f8:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <startEditMode>
			return;
		}
	}
	
	lcdSetPos(0, 30);
    44fc:	6e e1       	ldi	r22, 0x1E	; 30
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
	lcdReverse(elementIndex == 0);
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	90 91 a3 05 	lds	r25, 0x05A3
    450a:	91 11       	cpse	r25, r1
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	0e 94 06 13 	call	0x260c	; 0x260c <lcdReverse>
	switch (subpage)
    4512:	80 91 a2 05 	lds	r24, 0x05A2
    4516:	88 23       	and	r24, r24
    4518:	31 f0       	breq	.+12     	; 0x4526 <_hPIEditor+0xa2>
    451a:	81 30       	cpi	r24, 0x01	; 1
    451c:	41 f4       	brne	.+16     	; 0x452e <_hPIEditor+0xaa>
	{
		case 0: writePadded_P(strRollAil, 16); break;
		case 1: writePadded_P(strPitchEle, 16); break;
    451e:	60 e1       	ldi	r22, 0x10	; 16
    4520:	8c e2       	ldi	r24, 0x2C	; 44
    4522:	99 e1       	ldi	r25, 0x19	; 25
    4524:	07 c0       	rjmp	.+14     	; 0x4534 <_hPIEditor+0xb0>
	
	lcdSetPos(0, 30);
	lcdReverse(elementIndex == 0);
	switch (subpage)
	{
		case 0: writePadded_P(strRollAil, 16); break;
    4526:	60 e1       	ldi	r22, 0x10	; 16
    4528:	8d e3       	ldi	r24, 0x3D	; 61
    452a:	99 e1       	ldi	r25, 0x19	; 25
    452c:	03 c0       	rjmp	.+6      	; 0x4534 <_hPIEditor+0xb0>
		case 1: writePadded_P(strPitchEle, 16); break;
		default: writePadded_P(strYawRud, 16); break;
    452e:	60 e1       	ldi	r22, 0x10	; 16
    4530:	8f e1       	ldi	r24, 0x1F	; 31
    4532:	99 e1       	ldi	r25, 0x19	; 25
    4534:	0e 94 4b 1b 	call	0x3696	; 0x3696 <writePadded_P>
    4538:	84 e0       	ldi	r24, 0x04	; 4
    453a:	c8 9f       	mul	r28, r24
    453c:	70 01       	movw	r14, r0
    453e:	11 24       	eor	r1, r1
    4540:	c7 01       	movw	r24, r14
    4542:	85 5a       	subi	r24, 0xA5	; 165
    4544:	99 4f       	sbci	r25, 0xF9	; 249
    4546:	7c 01       	movw	r14, r24
{
	NOKEYRETURN;
	
	elementKey(5);

	uint8_t index = subpage;
    4548:	c0 e0       	ldi	r28, 0x00	; 0
    454a:	d0 e0       	ldi	r29, 0x00	; 0
    454c:	0c 2f       	mov	r16, r28
    454e:	0f 5f       	subi	r16, 0xFF	; 255
    4550:	f7 01       	movw	r30, r14
    4552:	ec 0f       	add	r30, r28
    4554:	fd 1f       	adc	r31, r29
		case 1: writePadded_P(strPitchEle, 16); break;
		default: writePadded_P(strYawRud, 16); break;
	}
	
	for (uint8_t i = 0; i < 4; i++)
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
    4556:	46 a1       	ldd	r20, Z+38	; 0x26
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	25 e0       	ldi	r18, 0x05	; 5
    455c:	6c e3       	ldi	r22, 0x3C	; 60
    455e:	8c 2f       	mov	r24, r28
    4560:	8e 5f       	subi	r24, 0xFE	; 254
    4562:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
    4566:	21 96       	adiw	r28, 0x01	; 1
		case 0: writePadded_P(strRollAil, 16); break;
		case 1: writePadded_P(strPitchEle, 16); break;
		default: writePadded_P(strYawRud, 16); break;
	}
	
	for (uint8_t i = 0; i < 4; i++)
    4568:	c4 30       	cpi	r28, 0x04	; 4
    456a:	d1 05       	cpc	r29, r1
    456c:	79 f7       	brne	.-34     	; 0x454c <_hPIEditor+0xc8>
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
}
    456e:	df 91       	pop	r29
    4570:	cf 91       	pop	r28
    4572:	0f 91       	pop	r16
    4574:	ff 90       	pop	r15
    4576:	ef 90       	pop	r14
    4578:	08 95       	ret

0000457a <_hStart>:
		loadPage(PAGE_SHOW_LAYOUT);
	}
}

static void _hStart()
{
    457a:	ff 92       	push	r15
    457c:	0f 93       	push	r16
    457e:	1f 93       	push	r17
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	27 97       	sbiw	r28, 0x07	; 7
    458a:	0f b6       	in	r0, 0x3f	; 63
    458c:	f8 94       	cli
    458e:	de bf       	out	0x3e, r29	; 62
    4590:	0f be       	out	0x3f, r0	; 63
    4592:	cd bf       	out	0x3d, r28	; 61
	char s[7];
	if (KEY4)	// MENU
    4594:	80 91 a4 05 	lds	r24, 0x05A4
    4598:	84 ff       	sbrs	r24, 4
    459a:	07 c0       	rjmp	.+14     	; 0x45aa <_hStart+0x30>
	{
		arm(OFF);
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <arm>
		loadPage(PAGE_MENU);
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	0e 94 08 1b 	call	0x3610	; 0x3610 <loadPage>
		return;
    45a8:	cb c0       	rjmp	.+406    	; 0x4740 <_hStart+0x1c6>
    45aa:	83 70       	andi	r24, 0x03	; 3
	}
	
	if (KEYINIT || KEYREFRESH)
    45ac:	99 f1       	breq	.+102    	; 0x4614 <_hStart+0x9a>
	{
		if (Config.ArmingMode)
    45ae:	80 91 8e 06 	lds	r24, 0x068E
    45b2:	88 23       	and	r24, r24
    45b4:	19 f0       	breq	.+6      	; 0x45bc <_hStart+0x42>
			arm(ON);
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <arm>
		
		if (State.Armed)
    45bc:	80 91 e0 05 	lds	r24, 0x05E0
		{
			lcdSetPos(3, 36);
    45c0:	64 e2       	ldi	r22, 0x24	; 36
	if (KEYINIT || KEYREFRESH)
	{
		if (Config.ArmingMode)
			arm(ON);
		
		if (State.Armed)
    45c2:	88 23       	and	r24, r24
    45c4:	81 f0       	breq	.+32     	; 0x45e6 <_hStart+0x6c>
		{
			lcdSetPos(3, 36);
    45c6:	83 e0       	ldi	r24, 0x03	; 3
    45c8:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdSelectFont(&font12x16);
    45cc:	88 e9       	ldi	r24, 0x98	; 152
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
			lcdWriteString_P(strARMED);
    45d4:	81 e5       	ldi	r24, 0x51	; 81
    45d6:	9a e1       	ldi	r25, 0x1A	; 26
    45d8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			lcdSelectFont(NULL);
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
			return;
    45e4:	ad c0       	rjmp	.+346    	; 0x4740 <_hStart+0x1c6>
		}
		else
		{
			lcdSetPos(0, 36);
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdSelectFont(&font12x16);
    45ec:	88 e9       	ldi	r24, 0x98	; 152
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
			lcdWriteString_P(strSAFE);
    45f4:	87 e5       	ldi	r24, 0x57	; 87
    45f6:	9a e1       	ldi	r25, 0x1A	; 26
    45f8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			lcdSelectFont(NULL);
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	0e 94 1f 13 	call	0x263e	; 0x263e <lcdSelectFont>
			lcdSetPos(2, 0);
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
			lcdWriteString_P(scrStart);
    460c:	8c e0       	ldi	r24, 0x0C	; 12
    460e:	98 e1       	ldi	r25, 0x18	; 24
    4610:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
		}
	}
	
	if (!State.Armed)
    4614:	80 91 e0 05 	lds	r24, 0x05E0
    4618:	81 11       	cpse	r24, r1
    461a:	92 c0       	rjmp	.+292    	; 0x4740 <_hStart+0x1c6>
	{
		lcdSetPos(2, 84);
    461c:	64 e5       	ldi	r22, 0x54	; 84
    461e:	82 e0       	ldi	r24, 0x02	; 2
    4620:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		if (State.SelfLevel)
    4624:	80 91 e2 05 	lds	r24, 0x05E2
			writePadded_P(strON, 3);
    4628:	63 e0       	ldi	r22, 0x03	; 3
	}
	
	if (!State.Armed)
	{
		lcdSetPos(2, 84);
		if (State.SelfLevel)
    462a:	88 23       	and	r24, r24
    462c:	19 f0       	breq	.+6      	; 0x4634 <_hStart+0xba>
			writePadded_P(strON, 3);
    462e:	8a e4       	ldi	r24, 0x4A	; 74
    4630:	9a e1       	ldi	r25, 0x1A	; 26
    4632:	02 c0       	rjmp	.+4      	; 0x4638 <_hStart+0xbe>
		else		
			writePadded_P(strOFF, 3);
    4634:	8d e4       	ldi	r24, 0x4D	; 77
    4636:	9a e1       	ldi	r25, 0x1A	; 26
    4638:	0e 94 4b 1b 	call	0x3696	; 0x3696 <writePadded_P>
	
		lcdSetPos(3, 0);
    463c:	60 e0       	ldi	r22, 0x00	; 0
    463e:	83 e0       	ldi	r24, 0x03	; 3
    4640:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		if (State.Error)
    4644:	80 91 e7 05 	lds	r24, 0x05E7
    4648:	88 23       	and	r24, r24
    464a:	89 f1       	breq	.+98     	; 0x46ae <_hStart+0x134>
		{
			lcdWriteString_P(strError);
    464c:	86 ec       	ldi	r24, 0xC6	; 198
    464e:	98 e1       	ldi	r25, 0x18	; 24
    4650:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
			lcdWriteChar(32);
    4654:	80 e2       	ldi	r24, 0x20	; 32
    4656:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
			if (State.Error & ERR_NOT_CALIBRATED)
    465a:	80 91 e7 05 	lds	r24, 0x05E7
    465e:	87 ff       	sbrs	r24, 7
    4660:	03 c0       	rjmp	.+6      	; 0x4668 <_hStart+0xee>
				lcdWriteString_P(strSensorNotCal);
    4662:	8d e3       	ldi	r24, 0x3D	; 61
    4664:	98 e1       	ldi	r25, 0x18	; 24
    4666:	25 c0       	rjmp	.+74     	; 0x46b2 <_hStart+0x138>
			else 
			{
				lcdWriteString_P(PSTR("no "));
    4668:	86 e6       	ldi	r24, 0x66	; 102
    466a:	9f e0       	ldi	r25, 0x0F	; 15
    466c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
				const char* s;
				if ((State.Error & ERR_NO_RX) == ERR_NO_RX)
    4670:	80 91 e7 05 	lds	r24, 0x05E7
    4674:	98 2f       	mov	r25, r24
    4676:	9f 70       	andi	r25, 0x0F	; 15
    4678:	9f 30       	cpi	r25, 0x0F	; 15
    467a:	49 f0       	breq	.+18     	; 0x468e <_hStart+0x114>
					s = PSTR("RX");
				else if (State.Error & ERR_NO_ROLL)
    467c:	80 fd       	sbrc	r24, 0
    467e:	0a c0       	rjmp	.+20     	; 0x4694 <_hStart+0x11a>
					s = strRoll;
				else if (State.Error & ERR_NO_PITCH)
    4680:	81 fd       	sbrc	r24, 1
    4682:	0b c0       	rjmp	.+22     	; 0x469a <_hStart+0x120>
					s = strPitch;
				else if (State.Error & ERR_NO_YAW)
    4684:	82 ff       	sbrs	r24, 2
    4686:	0c c0       	rjmp	.+24     	; 0x46a0 <_hStart+0x126>
					s = strYaw;
    4688:	87 eb       	ldi	r24, 0xB7	; 183
    468a:	98 e1       	ldi	r25, 0x18	; 24
    468c:	0b c0       	rjmp	.+22     	; 0x46a4 <_hStart+0x12a>
			else 
			{
				lcdWriteString_P(PSTR("no "));
				const char* s;
				if ((State.Error & ERR_NO_RX) == ERR_NO_RX)
					s = PSTR("RX");
    468e:	83 e6       	ldi	r24, 0x63	; 99
    4690:	9f e0       	ldi	r25, 0x0F	; 15
    4692:	08 c0       	rjmp	.+16     	; 0x46a4 <_hStart+0x12a>
				else if (State.Error & ERR_NO_ROLL)
					s = strRoll;
    4694:	81 ec       	ldi	r24, 0xC1	; 193
    4696:	98 e1       	ldi	r25, 0x18	; 24
    4698:	05 c0       	rjmp	.+10     	; 0x46a4 <_hStart+0x12a>
				else if (State.Error & ERR_NO_PITCH)
					s = strPitch;
    469a:	8b eb       	ldi	r24, 0xBB	; 187
    469c:	98 e1       	ldi	r25, 0x18	; 24
    469e:	02 c0       	rjmp	.+4      	; 0x46a4 <_hStart+0x12a>
				else if (State.Error & ERR_NO_YAW)
					s = strYaw;
				else 
					s = strThro;
    46a0:	82 eb       	ldi	r24, 0xB2	; 178
    46a2:	98 e1       	ldi	r25, 0x18	; 24
				lcdWriteString_P(s);
    46a4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
				lcdWriteString_P(PSTR(" input"));
    46a8:	8c e5       	ldi	r24, 0x5C	; 92
    46aa:	9f e0       	ldi	r25, 0x0F	; 15
    46ac:	02 c0       	rjmp	.+4      	; 0x46b2 <_hStart+0x138>
			}
		}	
		else
			lcdWriteString_P(PSTR("Ready for departure!"));
    46ae:	87 e4       	ldi	r24, 0x47	; 71
    46b0:	9f e0       	ldi	r25, 0x0F	; 15
    46b2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <lcdWriteString_P>
	
		// battery level
		lcdSetPos(4, 13*6);
    46b6:	6e e4       	ldi	r22, 0x4E	; 78
    46b8:	84 e0       	ldi	r24, 0x04	; 4
    46ba:	0e 94 3c 11 	call	0x2278	; 0x2278 <lcdSetPos>
		utoa(BATT / 10, s, 10);
    46be:	80 91 0a 06 	lds	r24, 0x060A
    46c2:	aa e0       	ldi	r26, 0x0A	; 10
    46c4:	fa 2e       	mov	r15, r26
    46c6:	6f 2d       	mov	r22, r15
    46c8:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__udivmodqi4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    46cc:	4a e0       	ldi	r20, 0x0A	; 10
    46ce:	8e 01       	movw	r16, r28
    46d0:	0f 5f       	subi	r16, 0xFF	; 255
    46d2:	1f 4f       	sbci	r17, 0xFF	; 255
    46d4:	b8 01       	movw	r22, r16
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__utoa_ncheck>
		lcdWriteString(s);
    46dc:	c8 01       	movw	r24, r16
    46de:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <lcdWriteString>
		lcdWriteChar('.');
    46e2:	8e e2       	ldi	r24, 0x2E	; 46
    46e4:	0e 94 be 12 	call	0x257c	; 0x257c <lcdWriteChar>
		utoa(BATT % 10, s, 10);
    46e8:	80 91 0a 06 	lds	r24, 0x060A
    46ec:	6f 2d       	mov	r22, r15
    46ee:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__udivmodqi4>
    46f2:	4a e0       	ldi	r20, 0x0A	; 10
    46f4:	b8 01       	movw	r22, r16
    46f6:	89 2f       	mov	r24, r25
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__utoa_ncheck>
		lcdWriteChar(32);
}

static void writePadded(char *s, uint8_t len)
{
	lcdWriteString(s);
    46fe:	c8 01       	movw	r24, r16
    4700:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <lcdWriteString>
	writeSpace(len - strlen(s));
    4704:	f8 01       	movw	r30, r16
    4706:	01 90       	ld	r0, Z+
    4708:	00 20       	and	r0, r0
    470a:	e9 f7       	brne	.-6      	; 0x4706 <_hStart+0x18c>
    470c:	80 2f       	mov	r24, r16
    470e:	8e 1b       	sub	r24, r30
    4710:	8c 5f       	subi	r24, 0xFC	; 252
    4712:	0e 94 3d 1b 	call	0x367a	; 0x367a <writeSpace>
		lcdWriteChar('.');
		utoa(BATT % 10, s, 10);
		writePadded(s, 3);
	
		// roll angle
		writeValue(5, 13*6, (int16_t)ANGLE[ROL] >> 8, 7, -1);
    4716:	40 91 d5 05 	lds	r20, 0x05D5
    471a:	54 2f       	mov	r21, r20
    471c:	55 0f       	add	r21, r21
    471e:	55 0b       	sbc	r21, r21
    4720:	0f ef       	ldi	r16, 0xFF	; 255
    4722:	27 e0       	ldi	r18, 0x07	; 7
    4724:	6e e4       	ldi	r22, 0x4E	; 78
    4726:	85 e0       	ldi	r24, 0x05	; 5
    4728:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	
		// pitch angle
		writeValue(6, 13*6, (int16_t)ANGLE[PIT] >> 8, 7, -1);
    472c:	40 91 d7 05 	lds	r20, 0x05D7
    4730:	54 2f       	mov	r21, r20
    4732:	55 0f       	add	r21, r21
    4734:	55 0b       	sbc	r21, r21
    4736:	27 e0       	ldi	r18, 0x07	; 7
    4738:	6e e4       	ldi	r22, 0x4E	; 78
    473a:	86 e0       	ldi	r24, 0x06	; 6
    473c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <writeValue>
	}	
}
    4740:	27 96       	adiw	r28, 0x07	; 7
    4742:	0f b6       	in	r0, 0x3f	; 63
    4744:	f8 94       	cli
    4746:	de bf       	out	0x3e, r29	; 62
    4748:	0f be       	out	0x3f, r0	; 63
    474a:	cd bf       	out	0x3d, r28	; 61
    474c:	df 91       	pop	r29
    474e:	cf 91       	pop	r28
    4750:	1f 91       	pop	r17
    4752:	0f 91       	pop	r16
    4754:	ff 90       	pop	r15
    4756:	08 95       	ret

00004758 <menuLoop>:
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
}

void menuLoop()
{
	if (keys == 0)
    4758:	80 91 a4 05 	lds	r24, 0x05A4
    475c:	81 11       	cpse	r24, r1
    475e:	04 c0       	rjmp	.+8      	; 0x4768 <menuLoop+0x10>
		keys = keyboardRead();
    4760:	0e 94 ce 10 	call	0x219c	; 0x219c <keyboardRead>
    4764:	80 93 a4 05 	sts	0x05A4, r24
		
	if (KEY1 && !editMode)	// BACK
    4768:	80 91 a4 05 	lds	r24, 0x05A4
    476c:	87 ff       	sbrs	r24, 7
    476e:	11 c0       	rjmp	.+34     	; 0x4792 <menuLoop+0x3a>
    4770:	80 91 91 05 	lds	r24, 0x0591
    4774:	81 11       	cpse	r24, r1
    4776:	0d c0       	rjmp	.+26     	; 0x4792 <menuLoop+0x3a>
	{
		if (menuPage > PAGE_MENU)
    4778:	80 91 ed 05 	lds	r24, 0x05ED
    477c:	82 30       	cpi	r24, 0x02	; 2
    477e:	10 f0       	brcs	.+4      	; 0x4784 <menuLoop+0x2c>
			loadPage(PAGE_MENU);
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	05 c0       	rjmp	.+10     	; 0x478e <menuLoop+0x36>
		else if (menuPage == PAGE_MENU)
    4784:	81 30       	cpi	r24, 0x01	; 1
    4786:	29 f4       	brne	.+10     	; 0x4792 <menuLoop+0x3a>
		{
			configSave();
    4788:	0e 94 66 15 	call	0x2acc	; 0x2acc <configSave>
			loadPage(PAGE_START);
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	0e 94 08 1b 	call	0x3610	; 0x3610 <loadPage>
		}			
	}
	
	if (KEYMENU)
    4792:	80 91 a4 05 	lds	r24, 0x05A4
    4796:	82 ff       	sbrs	r24, 2
    4798:	03 c0       	rjmp	.+6      	; 0x47a0 <menuLoop+0x48>
		keys = KEY_INIT;
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	80 93 a4 05 	sts	0x05A4, r24
	defaultHandler();
    47a0:	0e 94 46 20 	call	0x408c	; 0x408c <defaultHandler>
	keys &= KEY_MENU;
    47a4:	80 91 a4 05 	lds	r24, 0x05A4
    47a8:	84 70       	andi	r24, 0x04	; 4
    47aa:	80 93 a4 05 	sts	0x05A4, r24
    47ae:	08 95       	ret

000047b0 <menuInit>:
}

void menuInit()
{
	loadPage(PAGE_START);
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <loadPage>

000047b6 <menuRefresh>:
}

void menuRefresh()
{
	keys |= KEY_REFRESH;
    47b6:	80 91 a4 05 	lds	r24, 0x05A4
    47ba:	82 60       	ori	r24, 0x02	; 2
    47bc:	80 93 a4 05 	sts	0x05A4, r24
	menuLoop();
    47c0:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <menuLoop>

000047c4 <__udivmodqi4>:
    47c4:	99 1b       	sub	r25, r25
    47c6:	79 e0       	ldi	r23, 0x09	; 9
    47c8:	04 c0       	rjmp	.+8      	; 0x47d2 <__udivmodqi4_ep>

000047ca <__udivmodqi4_loop>:
    47ca:	99 1f       	adc	r25, r25
    47cc:	96 17       	cp	r25, r22
    47ce:	08 f0       	brcs	.+2      	; 0x47d2 <__udivmodqi4_ep>
    47d0:	96 1b       	sub	r25, r22

000047d2 <__udivmodqi4_ep>:
    47d2:	88 1f       	adc	r24, r24
    47d4:	7a 95       	dec	r23
    47d6:	c9 f7       	brne	.-14     	; 0x47ca <__udivmodqi4_loop>
    47d8:	80 95       	com	r24
    47da:	08 95       	ret

000047dc <__udivmodhi4>:
    47dc:	aa 1b       	sub	r26, r26
    47de:	bb 1b       	sub	r27, r27
    47e0:	51 e1       	ldi	r21, 0x11	; 17
    47e2:	07 c0       	rjmp	.+14     	; 0x47f2 <__udivmodhi4_ep>

000047e4 <__udivmodhi4_loop>:
    47e4:	aa 1f       	adc	r26, r26
    47e6:	bb 1f       	adc	r27, r27
    47e8:	a6 17       	cp	r26, r22
    47ea:	b7 07       	cpc	r27, r23
    47ec:	10 f0       	brcs	.+4      	; 0x47f2 <__udivmodhi4_ep>
    47ee:	a6 1b       	sub	r26, r22
    47f0:	b7 0b       	sbc	r27, r23

000047f2 <__udivmodhi4_ep>:
    47f2:	88 1f       	adc	r24, r24
    47f4:	99 1f       	adc	r25, r25
    47f6:	5a 95       	dec	r21
    47f8:	a9 f7       	brne	.-22     	; 0x47e4 <__udivmodhi4_loop>
    47fa:	80 95       	com	r24
    47fc:	90 95       	com	r25
    47fe:	bc 01       	movw	r22, r24
    4800:	cd 01       	movw	r24, r26
    4802:	08 95       	ret

00004804 <__divmodhi4>:
    4804:	97 fb       	bst	r25, 7
    4806:	07 2e       	mov	r0, r23
    4808:	16 f4       	brtc	.+4      	; 0x480e <__divmodhi4+0xa>
    480a:	00 94       	com	r0
    480c:	07 d0       	rcall	.+14     	; 0x481c <__divmodhi4_neg1>
    480e:	77 fd       	sbrc	r23, 7
    4810:	09 d0       	rcall	.+18     	; 0x4824 <__divmodhi4_neg2>
    4812:	0e 94 ee 23 	call	0x47dc	; 0x47dc <__udivmodhi4>
    4816:	07 fc       	sbrc	r0, 7
    4818:	05 d0       	rcall	.+10     	; 0x4824 <__divmodhi4_neg2>
    481a:	3e f4       	brtc	.+14     	; 0x482a <__divmodhi4_exit>

0000481c <__divmodhi4_neg1>:
    481c:	90 95       	com	r25
    481e:	81 95       	neg	r24
    4820:	9f 4f       	sbci	r25, 0xFF	; 255
    4822:	08 95       	ret

00004824 <__divmodhi4_neg2>:
    4824:	70 95       	com	r23
    4826:	61 95       	neg	r22
    4828:	7f 4f       	sbci	r23, 0xFF	; 255

0000482a <__divmodhi4_exit>:
    482a:	08 95       	ret

0000482c <__udivmodsi4>:
    482c:	a1 e2       	ldi	r26, 0x21	; 33
    482e:	1a 2e       	mov	r1, r26
    4830:	aa 1b       	sub	r26, r26
    4832:	bb 1b       	sub	r27, r27
    4834:	fd 01       	movw	r30, r26
    4836:	0d c0       	rjmp	.+26     	; 0x4852 <__udivmodsi4_ep>

00004838 <__udivmodsi4_loop>:
    4838:	aa 1f       	adc	r26, r26
    483a:	bb 1f       	adc	r27, r27
    483c:	ee 1f       	adc	r30, r30
    483e:	ff 1f       	adc	r31, r31
    4840:	a2 17       	cp	r26, r18
    4842:	b3 07       	cpc	r27, r19
    4844:	e4 07       	cpc	r30, r20
    4846:	f5 07       	cpc	r31, r21
    4848:	20 f0       	brcs	.+8      	; 0x4852 <__udivmodsi4_ep>
    484a:	a2 1b       	sub	r26, r18
    484c:	b3 0b       	sbc	r27, r19
    484e:	e4 0b       	sbc	r30, r20
    4850:	f5 0b       	sbc	r31, r21

00004852 <__udivmodsi4_ep>:
    4852:	66 1f       	adc	r22, r22
    4854:	77 1f       	adc	r23, r23
    4856:	88 1f       	adc	r24, r24
    4858:	99 1f       	adc	r25, r25
    485a:	1a 94       	dec	r1
    485c:	69 f7       	brne	.-38     	; 0x4838 <__udivmodsi4_loop>
    485e:	60 95       	com	r22
    4860:	70 95       	com	r23
    4862:	80 95       	com	r24
    4864:	90 95       	com	r25
    4866:	9b 01       	movw	r18, r22
    4868:	ac 01       	movw	r20, r24
    486a:	bd 01       	movw	r22, r26
    486c:	cf 01       	movw	r24, r30
    486e:	08 95       	ret

00004870 <__mulhisi3>:
    4870:	0e 94 40 24 	call	0x4880	; 0x4880 <__umulhisi3>
    4874:	33 23       	and	r19, r19
    4876:	12 f4       	brpl	.+4      	; 0x487c <__mulhisi3+0xc>
    4878:	8a 1b       	sub	r24, r26
    487a:	9b 0b       	sbc	r25, r27
    487c:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__usmulhisi3_tail>

00004880 <__umulhisi3>:
    4880:	a2 9f       	mul	r26, r18
    4882:	b0 01       	movw	r22, r0
    4884:	b3 9f       	mul	r27, r19
    4886:	c0 01       	movw	r24, r0
    4888:	a3 9f       	mul	r26, r19
    488a:	70 0d       	add	r23, r0
    488c:	81 1d       	adc	r24, r1
    488e:	11 24       	eor	r1, r1
    4890:	91 1d       	adc	r25, r1
    4892:	b2 9f       	mul	r27, r18
    4894:	70 0d       	add	r23, r0
    4896:	81 1d       	adc	r24, r1
    4898:	11 24       	eor	r1, r1
    489a:	91 1d       	adc	r25, r1
    489c:	08 95       	ret

0000489e <__usmulhisi3>:
    489e:	0e 94 40 24 	call	0x4880	; 0x4880 <__umulhisi3>

000048a2 <__usmulhisi3_tail>:
    48a2:	b7 ff       	sbrs	r27, 7
    48a4:	08 95       	ret
    48a6:	82 1b       	sub	r24, r18
    48a8:	93 0b       	sbc	r25, r19
    48aa:	08 95       	ret

000048ac <memcpy_P>:
    48ac:	fb 01       	movw	r30, r22
    48ae:	dc 01       	movw	r26, r24
    48b0:	02 c0       	rjmp	.+4      	; 0x48b6 <memcpy_P+0xa>
    48b2:	05 90       	lpm	r0, Z+
    48b4:	0d 92       	st	X+, r0
    48b6:	41 50       	subi	r20, 0x01	; 1
    48b8:	50 40       	sbci	r21, 0x00	; 0
    48ba:	d8 f7       	brcc	.-10     	; 0x48b2 <memcpy_P+0x6>
    48bc:	08 95       	ret

000048be <__strlen_P>:
    48be:	fc 01       	movw	r30, r24
    48c0:	05 90       	lpm	r0, Z+
    48c2:	00 20       	and	r0, r0
    48c4:	e9 f7       	brne	.-6      	; 0x48c0 <__strlen_P+0x2>
    48c6:	80 95       	com	r24
    48c8:	90 95       	com	r25
    48ca:	8e 0f       	add	r24, r30
    48cc:	9f 1f       	adc	r25, r31
    48ce:	08 95       	ret

000048d0 <__itoa_ncheck>:
    48d0:	bb 27       	eor	r27, r27
    48d2:	4a 30       	cpi	r20, 0x0A	; 10
    48d4:	31 f4       	brne	.+12     	; 0x48e2 <__itoa_ncheck+0x12>
    48d6:	99 23       	and	r25, r25
    48d8:	22 f4       	brpl	.+8      	; 0x48e2 <__itoa_ncheck+0x12>
    48da:	bd e2       	ldi	r27, 0x2D	; 45
    48dc:	90 95       	com	r25
    48de:	81 95       	neg	r24
    48e0:	9f 4f       	sbci	r25, 0xFF	; 255
    48e2:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__utoa_common>

000048e6 <__utoa_ncheck>:
    48e6:	bb 27       	eor	r27, r27

000048e8 <__utoa_common>:
    48e8:	fb 01       	movw	r30, r22
    48ea:	55 27       	eor	r21, r21
    48ec:	aa 27       	eor	r26, r26
    48ee:	88 0f       	add	r24, r24
    48f0:	99 1f       	adc	r25, r25
    48f2:	aa 1f       	adc	r26, r26
    48f4:	a4 17       	cp	r26, r20
    48f6:	10 f0       	brcs	.+4      	; 0x48fc <__utoa_common+0x14>
    48f8:	a4 1b       	sub	r26, r20
    48fa:	83 95       	inc	r24
    48fc:	50 51       	subi	r21, 0x10	; 16
    48fe:	b9 f7       	brne	.-18     	; 0x48ee <__utoa_common+0x6>
    4900:	a0 5d       	subi	r26, 0xD0	; 208
    4902:	aa 33       	cpi	r26, 0x3A	; 58
    4904:	08 f0       	brcs	.+2      	; 0x4908 <__utoa_common+0x20>
    4906:	a9 5d       	subi	r26, 0xD9	; 217
    4908:	a1 93       	st	Z+, r26
    490a:	00 97       	sbiw	r24, 0x00	; 0
    490c:	79 f7       	brne	.-34     	; 0x48ec <__utoa_common+0x4>
    490e:	b1 11       	cpse	r27, r1
    4910:	b1 93       	st	Z+, r27
    4912:	11 92       	st	Z+, r1
    4914:	cb 01       	movw	r24, r22
    4916:	0c 94 bf 24 	jmp	0x497e	; 0x497e <strrev>

0000491a <__eerd_block_m324pa>:
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22

0000491e <__eerd_blraw_m324pa>:
    491e:	fc 01       	movw	r30, r24
    4920:	f9 99       	sbic	0x1f, 1	; 31
    4922:	fe cf       	rjmp	.-4      	; 0x4920 <__eerd_blraw_m324pa+0x2>
    4924:	06 c0       	rjmp	.+12     	; 0x4932 <__eerd_blraw_m324pa+0x14>
    4926:	f2 bd       	out	0x22, r31	; 34
    4928:	e1 bd       	out	0x21, r30	; 33
    492a:	f8 9a       	sbi	0x1f, 0	; 31
    492c:	31 96       	adiw	r30, 0x01	; 1
    492e:	00 b4       	in	r0, 0x20	; 32
    4930:	0d 92       	st	X+, r0
    4932:	41 50       	subi	r20, 0x01	; 1
    4934:	50 40       	sbci	r21, 0x00	; 0
    4936:	b8 f7       	brcc	.-18     	; 0x4926 <__eerd_blraw_m324pa+0x8>
    4938:	08 95       	ret

0000493a <__eeupd_block_m324pa>:
    493a:	dc 01       	movw	r26, r24
    493c:	a4 0f       	add	r26, r20
    493e:	b5 1f       	adc	r27, r21
    4940:	41 50       	subi	r20, 0x01	; 1
    4942:	50 40       	sbci	r21, 0x00	; 0
    4944:	48 f0       	brcs	.+18     	; 0x4958 <__eeupd_block_m324pa+0x1e>
    4946:	cb 01       	movw	r24, r22
    4948:	84 0f       	add	r24, r20
    494a:	95 1f       	adc	r25, r21
    494c:	2e 91       	ld	r18, -X
    494e:	0e 94 ae 24 	call	0x495c	; 0x495c <__eeupd_r18_m324pa>
    4952:	41 50       	subi	r20, 0x01	; 1
    4954:	50 40       	sbci	r21, 0x00	; 0
    4956:	d0 f7       	brcc	.-12     	; 0x494c <__eeupd_block_m324pa+0x12>
    4958:	08 95       	ret

0000495a <__eeupd_byte_m324pa>:
    495a:	26 2f       	mov	r18, r22

0000495c <__eeupd_r18_m324pa>:
    495c:	f9 99       	sbic	0x1f, 1	; 31
    495e:	fe cf       	rjmp	.-4      	; 0x495c <__eeupd_r18_m324pa>
    4960:	92 bd       	out	0x22, r25	; 34
    4962:	81 bd       	out	0x21, r24	; 33
    4964:	f8 9a       	sbi	0x1f, 0	; 31
    4966:	01 97       	sbiw	r24, 0x01	; 1
    4968:	00 b4       	in	r0, 0x20	; 32
    496a:	02 16       	cp	r0, r18
    496c:	39 f0       	breq	.+14     	; 0x497c <__eeupd_r18_m324pa+0x20>
    496e:	1f ba       	out	0x1f, r1	; 31
    4970:	20 bd       	out	0x20, r18	; 32
    4972:	0f b6       	in	r0, 0x3f	; 63
    4974:	f8 94       	cli
    4976:	fa 9a       	sbi	0x1f, 2	; 31
    4978:	f9 9a       	sbi	0x1f, 1	; 31
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	08 95       	ret

0000497e <strrev>:
    497e:	dc 01       	movw	r26, r24
    4980:	fc 01       	movw	r30, r24
    4982:	67 2f       	mov	r22, r23
    4984:	71 91       	ld	r23, Z+
    4986:	77 23       	and	r23, r23
    4988:	e1 f7       	brne	.-8      	; 0x4982 <strrev+0x4>
    498a:	32 97       	sbiw	r30, 0x02	; 2
    498c:	04 c0       	rjmp	.+8      	; 0x4996 <strrev+0x18>
    498e:	7c 91       	ld	r23, X
    4990:	6d 93       	st	X+, r22
    4992:	70 83       	st	Z, r23
    4994:	62 91       	ld	r22, -Z
    4996:	ae 17       	cp	r26, r30
    4998:	bf 07       	cpc	r27, r31
    499a:	c8 f3       	brcs	.-14     	; 0x498e <strrev+0x10>
    499c:	08 95       	ret

0000499e <_exit>:
    499e:	f8 94       	cli

000049a0 <__stop_program>:
    49a0:	ff cf       	rjmp	.-2      	; 0x49a0 <__stop_program>
