
KK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00004f3e  00004ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f3e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051b  0080010a  0080010a  00004ffc  2**0
                  ALLOC
  3 .noinit       000000c0  00800625  00800625  00004ffc  2**0
                  ALLOC
  4 .eeprom       0000007c  00810000  00810000  00004ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      00000030  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e0  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ab95  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ab0  00000000  00000000  0001031d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b6a  00000000  00000000  00012dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001440  00000000  00000000  00015938  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001942  00000000  00000000  00016d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004aba  00000000  00000000  000186ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000690  00000000  00000000  0001d174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__ctors_end>
       4:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_1>
       8:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_2>
       c:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__vector_3>
      10:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      14:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_5>
      18:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      1c:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_7>
      20:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      24:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      28:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      2c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      30:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      34:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__vector_13>
      38:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_14>
      3c:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__vector_15>
      40:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      44:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      48:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_18>
      4c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      50:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      54:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      58:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      5c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      60:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_24>
      64:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      68:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      6c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>
      70:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_28>
      74:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__vector_29>
      78:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	01 02       	muls	r16, r17
      7e:	04 08       	sbc	r0, r4
      80:	10 20       	and	r1, r0
      82:	40 80       	ld	r4, Z

00000084 <_initSeq>:
      84:	a2 a0 c8 40 a6 a4 2f 24 81 20 af 00                 ...@../$. ..

00000090 <masktable>:
      90:	40 10 04 08 02 01 20 80                             @..... .

00000098 <font12x16>:
      98:	0c 10 92 15                                         ....

0000009c <_font12x16map>:
	...
      bc:	7c 00 ff 33 ff 33 7c 00 00 00 00 00 00 00 00 00     |..3.3|.........
      cc:	00 00 00 00 00 00 3c 00 3c 00 00 00 00 00 3c 00     ......<.<.....<.
      dc:	3c 00 00 00 00 00 00 00 00 00 00 02 10 1e 90 1f     <...............
      ec:	f0 03 7e 02 1e 1e 90 1f f0 03 7e 02 1e 00 10 00     ..~.......~.....
      fc:	00 00 00 00 78 04 fc 0c cc 0c ff 3f ff 3f cc 0c     ....x......?.?..
     10c:	cc 0f 88 07 00 00 00 00 00 00 00 30 38 38 38 1c     ...........0888.
     11c:	38 0e 00 07 80 03 c0 01 e0 38 70 38 38 38 1c 00     8........8p888..
     12c:	00 00 00 00 00 1f b8 3f fc 31 c6 21 e2 37 3e 1e     .......?.1.!.7>.
     13c:	1c 1c 00 36 00 22 00 00 00 00 00 00 00 00 00 00     ...6."..........
     14c:	27 00 3f 00 1f 00 00 00 00 00 00 00 00 00 00 00     '.?.............
     15c:	00 00 00 00 00 00 f0 03 fc 0f fe 1f 07 38 01 20     .............8. 
     16c:	01 20 00 00 00 00 00 00 00 00 00 00 00 00 01 20     . ............. 
     17c:	01 20 07 38 fe 1f fc 0f f0 03 00 00 00 00 00 00     . .8............
     18c:	00 00 00 00 98 0c b8 0e e0 03 f8 0f f8 0f e0 03     ................
     19c:	b8 0e 98 0c 00 00 00 00 00 00 00 00 80 01 80 01     ................
     1ac:	80 01 f0 0f f0 0f 80 01 80 01 80 01 00 00 00 00     ................
	...
     1c4:	00 b8 00 f8 00 78 00 00 00 00 00 00 00 00 00 00     .....x..........
     1d4:	00 00 00 00 80 01 80 01 80 01 80 01 80 01 80 01     ................
     1e4:	80 01 80 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1f4:	00 38 00 38 00 38 00 00 00 00 00 00 00 00 00 00     .8.8.8..........
     204:	00 00 00 18 00 1c 00 0e 00 07 80 03 c0 01 e0 00     ................
     214:	70 00 38 00 1c 00 0e 00 00 00 f8 07 fe 1f 06 1e     p.8.............
     224:	03 33 83 31 c3 30 63 30 33 30 1e 18 fe 1f f8 07     .3.1.0c030......
     234:	00 00 00 00 00 00 0c 30 0c 30 0e 30 ff 3f ff 3f     .......0.0.0.?.?
     244:	00 30 00 30 00 30 00 00 00 00 1c 30 1e 38 07 3c     .0.0.0.....0.8.<
     254:	03 3e 03 37 83 33 c3 31 e3 30 77 30 3e 30 1c 30     .>.7.3.1.0w0>0.0
     264:	00 00 0c 0c 0e 1c 07 38 c3 30 c3 30 c3 30 c3 30     .......8.0.0.0.0
     274:	c3 30 e7 39 7e 1f 3c 0e 00 00 c0 03 e0 03 70 03     .0.9~.<.......p.
     284:	38 03 1c 03 0e 03 07 03 ff 3f ff 3f 00 03 00 03     8........?.?....
     294:	00 00 3f 0c 7f 1c 63 38 63 30 63 30 63 30 63 30     ..?...c8c0c0c0c0
     2a4:	63 30 e3 38 c3 1f 83 0f 00 00 c0 0f f0 1f f8 39     c0.8...........9
     2b4:	dc 30 ce 30 c7 30 c3 30 c3 30 c3 39 80 1f 00 0f     .0.0.0.0.0.9....
     2c4:	00 00 03 00 03 00 03 00 03 30 03 3c 03 0f c3 03     .........0.<....
     2d4:	f3 00 3f 00 0f 00 03 00 00 00 00 0f bc 1f fe 39     ..?............9
     2e4:	e7 30 c3 30 c3 30 c3 30 e7 30 fe 39 bc 1f 00 0f     .0.0.0.0.0.9....
     2f4:	00 00 3c 00 7e 00 e7 30 c3 30 c3 30 c3 38 c3 1c     ..<.~..0.0.0.8..
     304:	c3 0e e7 07 fe 03 fc 00 00 00 00 00 00 00 00 00     ................
     314:	70 1c 70 1c 70 1c 00 00 00 00 00 00 00 00 00 00     p.p.p...........
	...
     32c:	70 9c 70 fc 70 7c 00 00 00 00 00 00 00 00 00 00     p.p.p|..........
     33c:	00 00 00 00 c0 00 e0 01 f0 03 38 07 1c 0e 0e 1c     ..........8.....
     34c:	07 38 03 30 00 00 00 00 00 00 00 00 60 06 60 06     .8.0........`.`.
     35c:	60 06 60 06 60 06 60 06 60 06 60 06 60 06 00 00     `.`.`.`.`.`.`...
     36c:	00 00 00 00 03 30 07 38 0e 1c 1c 0e 38 07 f0 03     .....0.8....8...
     37c:	e0 01 c0 00 00 00 00 00 00 00 1c 00 1e 00 07 00     ................
     38c:	03 00 83 37 c3 37 e3 00 77 00 3e 00 1c 00 00 00     ...7.7..w.>.....
     39c:	00 00 f8 0f fe 1f 07 18 f3 33 fb 37 1b 36 fb 37     .........3.7.6.7
     3ac:	fb 37 07 36 fe 03 f8 01 00 00 00 38 00 3f e0 07     .7.6.......8.?..
     3bc:	fc 06 1f 06 1f 06 fc 06 e0 07 00 3f 00 38 00 00     ...........?.8..
     3cc:	00 00 ff 3f ff 3f c3 30 c3 30 c3 30 c3 30 e7 30     ...?.?.0.0.0.0.0
     3dc:	fe 39 bc 1f 00 0f 00 00 00 00 f0 03 fc 0f 0e 1c     .9..............
     3ec:	07 38 03 30 03 30 03 30 07 38 0e 1c 0c 0c 00 00     .8.0.0.0.8......
     3fc:	00 00 ff 3f ff 3f 03 30 03 30 03 30 03 30 07 38     ...?.?.0.0.0.0.8
     40c:	0e 1c fc 0f f0 03 00 00 00 00 ff 3f ff 3f c3 30     ...........?.?.0
     41c:	c3 30 c3 30 c3 30 c3 30 c3 30 03 30 03 30 00 00     .0.0.0.0.0.0.0..
     42c:	00 00 ff 3f ff 3f c3 00 c3 00 c3 00 c3 00 c3 00     ...?.?..........
     43c:	c3 00 03 00 03 00 00 00 00 00 f0 03 fc 0f 0e 1c     ................
     44c:	07 38 03 30 c3 30 c3 30 c3 30 c7 3f c6 3f 00 00     .8.0.0.0.0.?.?..
     45c:	00 00 ff 3f ff 3f c0 00 c0 00 c0 00 c0 00 c0 00     ...?.?..........
     46c:	c0 00 ff 3f ff 3f 00 00 00 00 00 00 00 00 03 30     ...?.?.........0
     47c:	03 30 ff 3f ff 3f 03 30 03 30 00 00 00 00 00 00     .0.?.?.0.0......
     48c:	00 00 00 0e 00 1e 00 38 00 30 00 30 00 30 00 30     .......8.0.0.0.0
     49c:	00 38 ff 1f ff 07 00 00 00 00 ff 3f ff 3f c0 00     .8.........?.?..
     4ac:	e0 01 f0 03 38 07 1c 0e 0e 1c 07 38 03 30 00 00     ....8......8.0..
     4bc:	00 00 ff 3f ff 3f 00 30 00 30 00 30 00 30 00 30     ...?.?.0.0.0.0.0
     4cc:	00 30 00 30 00 30 00 00 00 00 ff 3f ff 3f 1e 00     .0.0.0.....?.?..
     4dc:	78 00 e0 01 e0 01 78 00 1e 00 ff 3f ff 3f 00 00     x.....x....?.?..
     4ec:	00 00 ff 3f ff 3f 0e 00 38 00 f0 00 c0 03 00 07     ...?.?..8.......
     4fc:	00 1c ff 3f ff 3f 00 00 00 00 f0 03 fc 0f 0e 1c     ...?.?..........
     50c:	07 38 03 30 03 30 07 38 0e 1c fc 0f f0 03 00 00     .8.0.0.8........
     51c:	00 00 ff 3f ff 3f 83 01 83 01 83 01 83 01 83 01     ...?.?..........
     52c:	c7 01 fe 00 7c 00 00 00 00 00 f0 03 fc 0f 0e 1c     ....|...........
     53c:	07 38 03 30 03 36 07 3e 0e 1c fc 3f f0 33 00 00     .8.0.6.>...?.3..
     54c:	00 00 ff 3f ff 3f 83 01 83 01 83 03 83 07 83 0f     ...?.?..........
     55c:	c7 1d fe 38 7c 30 00 00 00 00 3c 0c 7e 1c e7 38     ...8|0....<.~..8
     56c:	c3 30 c3 30 c3 30 c3 30 c7 39 8e 1f 0c 0f 00 00     .0.0.0.0.9......
     57c:	00 00 00 00 03 00 03 00 03 00 ff 3f ff 3f 03 00     ...........?.?..
     58c:	03 00 03 00 00 00 00 00 00 00 ff 07 ff 1f 00 38     ...............8
     59c:	00 30 00 30 00 30 00 30 00 38 ff 1f ff 07 00 00     .0.0.0.0.8......
     5ac:	00 00 07 00 3f 00 f8 01 c0 0f 00 3e 00 3e c0 0f     ....?......>.>..
     5bc:	f8 01 3f 00 07 00 00 00 00 00 ff 3f ff 3f 00 1c     ..?........?.?..
     5cc:	00 06 80 03 80 03 00 06 00 1c ff 3f ff 3f 00 00     ...........?.?..
     5dc:	00 00 03 30 0f 3c 1c 0e 30 03 e0 01 e0 01 30 03     ...0.<..0.....0.
     5ec:	1c 0e 0f 3c 03 30 00 00 00 00 03 00 0f 00 3c 00     ...<.0........<.
     5fc:	f0 00 c0 3f c0 3f f0 00 3c 00 0f 00 03 00 00 00     ...?.?..<.......
     60c:	00 00 03 30 03 3c 03 3e 03 33 c3 31 e3 30 33 30     ...0.<.>.3.1.030
     61c:	1f 30 0f 30 03 30 00 00 00 00 00 00 00 00 ff 3f     .0.0.0.........?
     62c:	ff 3f 03 30 03 30 03 30 03 30 00 00 00 00 00 00     .?.0.0.0.0......
     63c:	00 00 0e 00 1c 00 38 00 70 00 e0 00 c0 01 80 03     ......8.p.......
     64c:	00 07 00 0e 00 1c 00 18 00 00 00 00 00 00 03 30     ...............0
     65c:	03 30 03 30 03 30 ff 3f ff 3f 00 00 00 00 00 00     .0.0.0.?.?......
     66c:	00 00 60 00 70 00 38 00 1c 00 0e 00 07 00 0e 00     ..`.p.8.........
     67c:	1c 00 38 00 70 00 60 00 00 00 00 c0 00 c0 00 c0     ..8.p.`.........
     68c:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0     ................

0000069c <font4x6>:
     69c:	04 06 a4 15                                         ....

000006a0 <_font4x6map>:
     6a0:	00 00 00 00 00 00 17 00 00 03 00 03 00 1f 0a 1f     ................
     6b0:	00 14 3f 0a 00 09 04 12 00 1a 15 1e 00 03 01 00     ..?.............
     6c0:	00 0e 11 00 00 11 0e 00 00 15 0e 15 00 04 0e 04     ................
     6d0:	00 30 10 00 00 04 04 04 00 00 10 00 00 18 04 03     .0..............
     6e0:	00 1e 11 0f 00 12 1f 10 00 19 15 12 00 11 15 0a     ................
     6f0:	00 06 04 1f 00 17 15 09 00 0e 15 08 00 01 1d 07     ................
     700:	00 0a 15 0a 00 02 15 0e 00 00 14 00 00 30 14 00     .............0..
     710:	00 04 0a 11 00 14 14 14 00 11 0a 04 00 01 15 02     ................
     720:	00 1f 11 17 00 1e 05 1e 00 1f 15 0a 00 0e 11 11     ................
     730:	00 1f 11 0e 00 1f 15 11 00 1f 05 01 00 0e 11 1d     ................
     740:	00 1f 04 1f 00 11 1f 11 00 08 10 0f 00 1f 04 1b     ................
     750:	00 1f 10 10 00 1f 06 1f 00 1f 02 1f 00 0e 11 0e     ................
     760:	00 1f 05 02 00 0e 19 1e 00 1f 05 1a 00 16 15 0d     ................
     770:	00 01 1f 01 00 1f 10 1f 00 0f 10 0f 00 1f 0c 1f     ................
     780:	00 1b 04 1b 00 03 1c 03 00 19 15 13 00 1f 11 00     ................
     790:	00 03 04 18 00 11 1f 00 00 02 01 02 20 20 20 20     ............    

000007a0 <font6x8>:
     7a0:	06 08 ab 15                                         ....

000007a4 <_font6x8map>:
	...
     7ac:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     7bc:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     7cc:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     7dc:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     7ec:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     7fc:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     80c:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     81c:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     82c:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     83c:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     84c:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     85c:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     86c:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     87c:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     88c:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     89c:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     8ac:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     8bc:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     8cc:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     8dc:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     8ec:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     8fc:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     90c:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     91c:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     92c:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     93c:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     94c:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     95c:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     96c:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     97c:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     98c:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     99c:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     9ac:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     9bc:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     9cc:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     9dc:	01 00 00 3c 26 23 26 3c                             ...<&#&<

000009e4 <glyFC>:
     9e4:	05 05 1f 11 11 11 1f                                .......

000009eb <glyDirCCW>:
     9eb:	05 03 02 07 02 02 02                                .......

000009f2 <glyDirCW>:
     9f2:	09 03 00 00 00 00 02 02 02 07 02                    ...........

000009fd <glyBall>:
     9fd:	09 09 38 00 fe 00 fe 00 ff 01 ff 01 ff 01 fe 00     ..8.............
     a0d:	fe 00 38 00                                         ..8.

00000a11 <glyArrowDown>:
     a11:	08 08 06 0e 1e 3e 3e 1e 0e 06                       .....>>...

00000a1b <glyArrowUp>:
     a1b:	08 08 30 38 3c 3e 3e 3c 38 30                       ..08<>><80

00000a25 <defaultConfig>:
     a25:	60 f0 05 f0 05 f0 05 4c 04 f0 05 f0 05 f0 05 f0     `......L........
     a35:	05 01 02 04 03 05 06 07 08 18 02 24 02 35 02 63     ...........$.5.c
     a45:	02 6c 02 fe 02 00 32 64 19 14 32 64 19 14 32 14     .l....2d..2d..2.
     a55:	32 0a 02 00 01 01 01 00 1e 1e 32 5a 0a 20 00 1e     2.........2Z. ..
     a65:	00 32 64 14 00 00 00 00 00 00 00 00 00 00 00 00     .2d.............
	...
     a9d:	00 32 00 32                                         .2.2

00000aa1 <convtab>:
     aa1:	00 01 02 03 04 05 05 06 07 08 09 0a 0b 0c 0d 0e     ................
     ab1:	0f 10 11 12 13 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
     ac1:	1f 20 21 22 23 24 25 26 27 29 2a 2b 2c 2e 2f 30     . !"#$%&')*+,./0
     ad1:	32 33 35 36 38 39 3b 3d 3f 41 43 45 48 4c 50 5a     235689;=?ACEHLPZ

00000ae1 <__c.2247>:
     ae1:	43 61 6c 69 62 72 61 74 69 6e 67 20 45 53 43 73     Calibrating ESCs
	...

00000af2 <__c.2264>:
     af2:	4b 4b 32 2d 43 6f 70 74 65 72 00                    KK2-Copter.

00000afd <versionAuthor>:
     afd:	62 79 20 4f 6c 69 76 65 72 20 53 63 68 75 6c 7a     by Oliver Schulz
	...

00000b0e <versionNum>:
     b0e:	56 65 72 73 69 6f 6e 20 30 2e 32 62 00              Version 0.2b.

00000b1b <modelTable>:
     b1b:	50 0e 2f 0e 14 0e f9 0d d2 0d b7 0d 9c 0d 69 0d     P./...........i.
     b2b:	36 0d 0f 0d e8 0c b5 0c 82 0c 5b 0c 28 0c 01 0c     6.........[.(...
     b3b:	ce 0b b3 0b 92 0b 7d 0b 62 0b 47 0b                 ......}.b.G.

00000b47 <model22>:
     b47:	6b 0e 04 64 b9 47 00 00 01 64 47 47 00 00 01 78     k..d.G...dGG...x
     b57:	00 a6 64 00 01 78 00 a6 9c 00 01                    ..d..x.....

00000b62 <model21>:
     b62:	72 0e 04 64 b9 47 64 00 01 64 47 47 9c 00 01 64     r..d.Gd..dGG...d
     b72:	00 9c 64 00 01 64 00 9c 9c 00 01                    ..d..d.....

00000b7d <model20>:
     b7d:	75 0e 03 64 00 00 00 00 01 00 32 32 00 00 02 00     u..d......22....
     b8d:	32 ce 00 00 02                                      2....

00000b92 <model19>:
     b92:	81 0e 05 64 00 00 00 00 01 00 64 00 00 00 02 00     ...d......d.....
     ba2:	64 00 00 00 02 00 00 64 00 00 02 00 00 00 64 00     d......d......d.
     bb2:	02                                                  .

00000bb3 <model18>:
     bb3:	91 0e 04 64 00 00 00 00 01 00 64 00 00 00 02 00     ...d......d.....
     bc3:	00 64 00 00 02 00 00 00 64 00 02                    .d......d..

00000bce <model17>:
     bce:	a1 0e 08 64 64 47 64 00 01 64 51 18 9c 00 01 64     ...ddGd..dQ....d
     bde:	3d e8 64 00 01 64 2a b9 9c 00 01 64 d6 b9 64 00     =.d..d*....d..d.
     bee:	01 64 c3 e8 9c 00 01 64 af 18 64 00 01 64 9c 47     .d.....d..d..d.G
     bfe:	9c 00 01                                            ...

00000c01 <model16>:
     c01:	a4 0e 06 64 64 47 64 00 01 64 47 00 9c 00 01 64     ...ddGd..dG....d
     c11:	2a b9 64 00 01 64 d6 b9 9c 00 01 64 b9 00 64 00     *.d..d.....d..d.
     c21:	01 64 9c 47 9c 00 01                                .d.G...

00000c28 <model15>:
     c28:	a7 0e 08 64 47 47 64 00 01 64 47 18 9c 00 01 64     ...dGGd..dG....d
     c38:	47 e8 64 00 01 64 47 b9 9c 00 01 64 b9 b9 64 00     G.d..dG....d..d.
     c48:	01 64 b9 e8 9c 00 01 64 b9 18 64 00 01 64 b9 47     .d.....d..d..d.G
     c58:	9c 00 01                                            ...

00000c5b <model14>:
     c5b:	aa 0e 06 64 47 47 64 00 01 64 47 00 9c 00 01 64     ...dGGd..dG....d
     c6b:	47 b9 64 00 01 64 b9 b9 9c 00 01 64 b9 00 64 00     G.d..d.....d..d.
     c7b:	01 64 b9 47 9c 00 01                                .d.G...

00000c82 <model13>:
     c82:	ad 0e 08 64 26 5c 64 00 01 64 5c 26 9c 00 01 64     ...d&\d..d\&...d
     c92:	5c da 64 00 01 64 26 a4 9c 00 01 64 da a4 64 00     \.d..d&....d..d.
     ca2:	01 64 a4 da 9c 00 01 64 a4 26 64 00 01 64 da 5c     .d.....d.&d..d.\
     cb2:	9c 00 01                                            ...

00000cb5 <model12>:
     cb5:	ba 0e 08 64 00 64 64 00 01 64 47 47 9c 00 01 64     ...d.dd..dGG...d
     cc5:	64 00 64 00 01 64 47 b9 9c 00 01 64 00 9c 64 00     d.d..dG....d..d.
     cd5:	01 64 b9 b9 9c 00 01 64 9c 00 64 00 01 64 b9 47     .d.....d..d..d.G
     ce5:	9c 00 01                                            ...

00000ce8 <model11>:
     ce8:	c7 0e 06 64 32 57 64 00 01 64 64 00 9c 00 01 64     ...d2Wd..dd....d
     cf8:	32 a9 64 00 01 64 ce a9 9c 00 01 64 9c 00 64 00     2.d..d.....d..d.
     d08:	01 64 ce 57 9c 00 01                                .d.W...

00000d0f <model10>:
     d0f:	d4 0e 06 64 00 64 64 00 01 64 57 32 9c 00 01 64     ...d.dd..dW2...d
     d1f:	57 ce 64 00 01 64 00 9c 9c 00 01 64 a9 ce 64 00     W.d..d.....d..d.
     d2f:	01 64 a9 32 9c 00 01                                .d.2...

00000d36 <model09>:
     d36:	e1 0e 08 64 b9 47 64 00 01 64 b9 47 9c 00 01 64     ...d.Gd..d.G...d
     d46:	47 47 64 00 01 64 47 47 9c 00 01 64 47 b9 64 00     GGd..dGG...dG.d.
     d56:	01 64 47 b9 9c 00 01 64 b9 b9 64 00 01 64 b9 b9     .dG....d..d..d..
     d66:	9c 00 01                                            ...

00000d69 <model08>:
     d69:	e6 0e 08 64 00 64 64 00 01 64 00 64 9c 00 01 64     ...d.dd..d.d...d
     d79:	64 00 64 00 01 64 64 00 9c 00 01 64 00 9c 64 00     d.d..dd....d..d.
     d89:	01 64 00 9c 9c 00 01 64 9c 00 64 00 01 64 9c 00     .d.....d..d..d..
     d99:	9c 00 01                                            ...

00000d9c <model07>:
     d9c:	eb 0e 04 64 b9 47 64 00 01 64 47 47 9c 00 01 64     ...d.Gd..dGG...d
     dac:	47 b9 64 00 01 64 b9 b9 9c 00 01                    G.d..d.....

00000db7 <model06>:
     db7:	fa 0e 04 64 00 64 64 00 01 64 64 00 9c 00 01 64     ...d.dd..dd....d
     dc7:	00 9c 64 00 01 64 9c 00 9c 00 01                    ..d..d.....

00000dd2 <model05>:
     dd2:	09 0f 06 64 a9 32 64 00 01 64 a9 32 9c 00 01 64     ...d.2d..d.2...d
     de2:	57 32 64 00 01 64 57 32 9c 00 01 64 00 9c 64 00     W2d..dW2...d..d.
     df2:	01 64 00 9c 9c 00 01                                .d.....

00000df9 <model04>:
     df9:	0c 0f 04 64 a9 32 00 00 01 64 57 32 00 00 01 64     ...d.2...dW2...d
     e09:	00 9c 00 00 01 00 00 00 64 00 02                    ........d..

00000e14 <model03>:
     e14:	16 0f 04 64 64 00 00 00 01 64 9c 00 00 00 01 00     ...dd....d......
     e24:	00 64 64 00 02 00 00 9c 64 00 02                    .dd.....d..

00000e2f <model02>:
     e2f:	21 0f 05 64 00 00 00 00 01 00 64 00 64 00 02 00     !..d......d.d...
     e3f:	00 64 64 00 02 00 9c 00 64 00 02 00 00 9c 64 00     .dd.....d.....d.
     e4f:	02                                                  .

00000e50 <model01>:
     e50:	34 0f 04 64 00 00 64 00 01 64 00 00 9c 00 01 00     4..d..d..d......
     e60:	64 00 00 00 02 00 00 64 00 00 02                    d......d...

00000e6b <strModel22>:
     e6b:	56 2d 54 61 69 6c 00                                V-Tail.

00000e72 <strModel21>:
     e72:	59 34 00                                            Y4.

00000e75 <strModel20>:
     e75:	46 6c 79 69 6e 67 20 57 69 6e 67 00                 Flying Wing.

00000e81 <strModel19>:
     e81:	41 69 72 70 6c 61 6e 65 20 32 53 20 41 69 6c 00     Airplane 2S Ail.

00000e91 <strModel18>:
     e91:	41 69 72 70 6c 61 6e 65 20 31 53 20 41 69 6c 00     Airplane 1S Ail.

00000ea1 <strModel17>:
     ea1:	56 38 00                                            V8.

00000ea4 <strModel16>:
     ea4:	56 36 00                                            V6.

00000ea7 <strModel15>:
     ea7:	48 38 00                                            H8.

00000eaa <strModel14>:
     eaa:	48 36 00                                            H6.

00000ead <strModel13>:
     ead:	4f 63 74 6f 43 6f 70 74 65 72 20 78 00              OctoCopter x.

00000eba <strModel12>:
     eba:	4f 63 74 6f 43 6f 70 74 65 72 20 2b 00              OctoCopter +.

00000ec7 <strModel11>:
     ec7:	48 65 78 61 43 6f 70 74 65 72 20 78 00              HexaCopter x.

00000ed4 <strModel10>:
     ed4:	48 65 78 61 43 6f 70 74 65 72 20 2b 00              HexaCopter +.

00000ee1 <strModel09>:
     ee1:	58 38 20 78 00                                      X8 x.

00000ee6 <strModel08>:
     ee6:	58 38 20 2b 00                                      X8 +.

00000eeb <strModel07>:
     eeb:	51 75 61 64 72 6f 43 6f 70 74 65 72 20 78 00        QuadroCopter x.

00000efa <strModel06>:
     efa:	51 75 61 64 72 6f 43 6f 70 74 65 72 20 2b 00        QuadroCopter +.

00000f09 <strModel05>:
     f09:	59 36 00                                            Y6.

00000f0c <strModel04>:
     f0c:	54 72 69 43 6f 70 74 65 72 00                       TriCopter.

00000f16 <strModel03>:
     f16:	44 75 61 6c 43 6f 70 74 65 72 00                    DualCopter.

00000f21 <strModel02>:
     f21:	53 69 6e 67 6c 65 43 6f 70 74 65 72 20 31 4d 20     SingleCopter 1M 
     f31:	34 53 00                                            4S.

00000f34 <strModel01>:
     f34:	53 69 6e 67 6c 65 43 6f 70 74 65 72 20 32 4d 20     SingleCopter 2M 
     f44:	32 53 00                                            2S.

00000f47 <__c.2393>:
     f47:	52 65 61 64 79 20 66 6f 72 20 64 65 70 61 72 74     Ready for depart
     f57:	75 72 65 21 00                                      ure!.

00000f5c <__c.2391>:
     f5c:	20 69 6e 70 75 74 00                                 input.

00000f63 <__c.2389>:
     f63:	52 58 00                                            RX.

00000f66 <__c.2386>:
     f66:	6e 6f 20 00                                         no .

00000f6a <info.2403>:
     f6a:	ef 18 e9 18 de 18 e4 18 e9 18 ef 18 d9 18 d4 18     ................
     f7a:	cd 18 d1 18 cd 18 d1 18                             ........

00000f82 <elements.2459>:
     f82:	02 4e a1 06 00 00 c8 00 05 03 4e a2 06 00 00 c8     .N........N.....
     f92:	00 05 04 4e a3 06 00 00 c8 00 05 05 4e a4 06 00     ...N........N...
     fa2:	00 c8 00 05                                         ....

00000fa6 <elements.2462>:
     fa6:	00 66 a5 06 00 00 14 00 04 01 66 a7 06 00 00 fa     .f........f.....
     fb6:	00 04 02 66 a8 06 00 00 1e 00 04 03 66 a9 06 00     ...f........f...
     fc6:	00 fa 00 04 04 66 aa 06 00 00 64 00 04              .....f....d..

00000fd3 <elements.2465>:
     fd3:	00 36 ab 06 00 00 fa 00 05 01 36 ac 06 00 00 fa     .6........6.....
     fe3:	00 05 03 60 af 06 d3 ff 2d 00 05 04 60 b0 06 d3     ...`....-...`...
     ff3:	ff 2d 00 05                                         .-..

00000ff7 <elements.2468>:
     ff7:	02 54 e1 06 80 ff 7f 00 05 03 54 e2 06 80 ff 7f     .T........T.....
    1007:	00 05 04 54 e3 06 80 ff 7f 00 05 05 54 e4 06 80     ...T........T...
    1017:	ff 7f 00 05                                         ....

0000101b <lstMenu>:
    101b:	40 1a 32 1a 24 1a 16 1a 07 1a f3 19 de 19 d2 19     @.2.$...........
    102b:	bf 19 a1 19 b1 19 91 19 84 19 72 19 60 19 4c 19     ..........r.`.L.
    103b:	5a 19                                               Z.

0000103d <pages>:
    103d:	34 11 8b 25 00 00 1e 11 1e 20 00 00 d7 10 10 25     4..%..... .....%
    104d:	e3 17 19 11 4a 22 b2 17 d7 10 0b 21 3c 17 d7 10     ....J".....!<...
    105d:	0b 25 ff 16 d7 10 06 25 aa 16 d7 10 01 25 79 16     .%.....%.....%y.
    106d:	d7 10 fc 24 33 16 19 11 19 22 7c 17 03 11 ab 20     ...$3...."|.... 
    107d:	76 15 03 11 49 1f 00 15 d7 10 30 24 00 00 03 11     v...I.....0$....
    108d:	69 20 00 00 d7 10 83 23 7e 11 b6 10 2a 20 00 00     i .....#~...* ..
    109d:	1e 11 f0 1f 00 00 ed 10 29 1f 00 00 19 11 e9 21     ........)......!
    10ad:	4a 11                                               J.

000010af <_skCANCEL>:
    10af:	43 41 4e 43 45 4c 00                                CANCEL.

000010b6 <_skBACKNEXT>:
    10b6:	42 41 43 4b 20 20 4e 45 58 54 00                    BACK  NEXT.

000010c1 <_skEDIT>:
    10c1:	43 4c 52 20 20 44 4f 57 4e 20 20 20 55 50 20 20     CLR  DOWN   UP  
    10d1:	20 44 4f 4e 45 00                                    DONE.

000010d7 <_skPAGE>:
    10d7:	42 41 43 4b 20 50 52 45 56 20 4e 45 58 54 20 43     BACK PREV NEXT C
    10e7:	48 41 4e 47 45 00                                   HANGE.

000010ed <_skCANCELYES>:
    10ed:	43 41 4e 43 45 4c 20 20 20 20 20 20 20 20 20 20     CANCEL          
    10fd:	20 20 59 45 53 00                                     YES.

00001103 <_skCONTINUE>:
    1103:	42 41 43 4b 20 20 20 20 20 20 20 20 20 43 4f 4e     BACK         CON
    1113:	54 49 4e 55 45 00                                   TINUE.

00001119 <_skBACK>:
    1119:	42 41 43 4b 00                                      BACK.

0000111e <_skMENU>:
    111e:	42 41 43 4b 20 20 55 50 20 20 20 44 4f 57 4e 20     BACK  UP   DOWN 
    112e:	45 4e 54 45 52 00                                   ENTER.

00001134 <_skSTART>:
    1134:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1144:	20 4d 45 4e 55 00                                    MENU.

0000114a <scrDebug>:
    114a:	4d 69 78 65 72 49 6e 64 65 78 3a 0a 43 68 61 6e     MixerIndex:.Chan
    115a:	6e 65 6c 30 3a 0a 43 68 61 6e 6e 65 6c 31 3a 0a     nel0:.Channel1:.
    116a:	43 68 61 6e 6e 65 6c 32 3a 0a 43 68 61 6e 6e 65     Channel2:.Channe
    117a:	6c 33 3a 00                                         l3:.

0000117e <scrMixerEditor>:
    117e:	54 68 72 6f 74 74 6c 65 3a 20 20 20 20 20 20 20     Throttle:       
    118e:	43 68 3a 0a 41 69 6c 65 72 6f 6e 3a 0a 45 6c 65     Ch:.Aileron:.Ele
    119e:	76 61 74 6f 72 3a 0a 52 75 64 64 65 72 3a 0a 4f     vator:.Rudder:.O
    11ae:	66 66 73 65 74 3a 0a 54 79 70 65 3a 20 20 20 20     ffset:.Type:    
    11be:	20 20 20 52 61 74 65 3a 00                             Rate:.

000011c7 <scrRadioCal2>:
    11c7:	43 61 6c 69 62 72 61 74 69 6f 6e 20 66 61 69 6c     Calibration fail
    11d7:	65 64 2e 0a 0a 4d 61 6b 65 20 73 75 72 65 20 74     ed...Make sure t
    11e7:	68 65 20 73 74 69 63 6b 73 0a 61 72 65 20 72 65     he sticks.are re
    11f7:	6c 65 61 73 65 64 20 61 6e 64 0a 74 68 72 6f 74     leased and.throt
    1207:	74 6c 65 20 69 73 20 69 64 6c 65 2e 00              tle is idle..

00001214 <scrRadioCal1>:
    1214:	0a 43 68 65 63 6b 20 74 68 65 20 63 6f 72 72 65     .Check the corre
    1224:	63 74 0a 73 69 67 6e 61 6c 73 20 66 72 6f 6d 0a     ct.signals from.
    1234:	72 65 63 65 69 76 65 72 2e 0a 4f 6e 65 20 6f 72     receiver..One or
    1244:	20 6d 6f 72 65 20 73 69 67 6e 61 6c 73 0a 61 72      more signals.ar
    1254:	65 20 6d 69 73 73 69 6e 67 2e 00                    e missing..

0000125f <scrRadioCal0>:
    125f:	52 65 6c 65 61 73 65 20 73 74 69 63 6b 73 20 6f     Release sticks o
    126f:	6e 20 74 68 65 0a 74 72 61 6e 73 6d 69 74 74 65     n the.transmitte
    127f:	72 20 61 6e 64 20 73 65 74 20 0a 74 68 72 6f 74     r and set .throt
    128f:	74 6c 65 20 74 6f 20 69 64 6c 65 2e 0a 0a 50 72     tle to idle...Pr
    129f:	65 73 73 20 43 4f 4e 54 49 4e 55 45 20 74 6f 0a     ess CONTINUE to.
    12af:	63 61 6c 69 62 72 61 74 65 2e 00                    calibrate..

000012ba <scrESCCal>:
    12ba:	00 15 75 14 fb 13 8c 13 13 13 c6 12                 ..u.........

000012c6 <scrESCCal5>:
    12c6:	20 20 27 4d 69 6e 69 6d 75 6d 20 74 68 72 6f 74       'Minimum throt
    12d6:	74 6c 65 27 0a 20 20 69 6e 20 74 68 65 20 27 4d     tle'.  in the 'M
    12e6:	69 73 63 2e 20 53 65 74 2d 0a 20 20 74 69 6e 67     isc. Set-.  ting
    12f6:	73 20 6d 65 6e 75 2e 0a 0a 20 20 59 6f 75 20 61     s menu...  You a
    1306:	72 65 20 6e 6f 77 20 64 6f 6e 65 21 00              re now done!.

00001313 <scrESCCal4>:
    1313:	20 20 63 61 6c 69 62 72 61 74 69 6f 6e 20 73 6f       calibration so
    1323:	75 6e 64 2e 0a 31 32 20 52 65 6c 65 61 73 65 20     und..12 Release 
    1333:	74 68 65 0a 20 20 62 75 74 74 6f 6e 73 2e 0a 31     the.  buttons..1
    1343:	33 20 43 68 65 63 6b 20 69 66 20 74 68 65 20 6d     3 Check if the m
    1353:	6f 74 2d 0a 20 20 6f 72 73 20 73 74 61 72 74 20     ot-.  ors start 
    1363:	61 74 20 74 68 65 0a 20 20 73 61 6d 65 20 74 69     at the.  same ti
    1373:	6d 65 2e 20 49 66 20 6e 6f 74 2c 0a 20 20 61 64     me. If not,.  ad
    1383:	6a 75 73 74 20 74 68 65 00                          just the.

0000138c <scrESCCal3>:
    138c:	39 20 57 61 69 74 20 66 6f 72 20 74 68 65 20 45     9 Wait for the E
    139c:	53 43 73 0a 20 20 66 75 6c 6c 2d 74 68 72 6f 74     SCs.  full-throt
    13ac:	74 6c 65 20 63 61 6c 69 2d 0a 20 20 62 72 61 74     tle cali-.  brat
    13bc:	69 6f 6e 20 73 6f 75 6e 64 2e 0a 31 30 20 53 65     ion sound..10 Se
    13cc:	74 20 74 68 65 20 74 68 72 6f 74 74 6c 65 0a 20     t the throttle. 
    13dc:	20 74 6f 20 69 64 6c 65 2e 0a 31 31 20 57 61 69      to idle..11 Wai
    13ec:	74 20 66 6f 72 20 74 68 65 20 69 64 6c 65 00        t for the idle.

000013fb <scrESCCal2>:
    13fb:	36 20 53 65 74 20 74 68 65 20 74 68 72 6f 74 74     6 Set the thrott
    140b:	6c 65 20 74 6f 0a 20 20 66 75 6c 6c 2e 0a 37 20     le to.  full..7 
    141b:	50 72 65 73 73 20 64 6f 77 6e 20 62 75 74 74 6f     Press down butto
    142b:	6e 73 0a 20 20 31 20 61 6e 64 20 34 20 61 6e 64     ns.  1 and 4 and
    143b:	20 6b 65 65 70 0a 20 20 74 68 65 6d 20 64 6f 77      keep.  them dow
    144b:	6e 20 75 6e 74 69 6c 20 74 68 65 0a 20 20 6c 61     n until the.  la
    145b:	73 74 20 73 74 65 70 2e 0a 38 20 54 75 72 6e 20     st step..8 Turn 
    146b:	6f 6e 20 70 6f 77 65 72 2e 00                       on power..

00001475 <scrESCCal1>:
    1475:	33 20 4d 65 6d 6f 72 69 7a 65 20 74 68 65 20 72     3 Memorize the r
    1485:	65 73 74 0a 20 20 6f 66 20 74 68 65 20 69 6e 73     est.  of the ins
    1495:	74 72 75 63 74 69 6f 6e 73 0a 20 20 62 65 63 61     tructions.  beca
    14a5:	75 73 65 20 74 68 65 20 6e 65 78 74 0a 20 20 73     use the next.  s
    14b5:	74 65 70 20 69 73 20 74 6f 20 74 75 72 6e 20 6f     tep is to turn o
    14c5:	66 66 0a 20 20 74 68 65 20 70 6f 77 65 72 2e 0a     ff.  the power..
    14d5:	34 20 54 75 72 6e 20 6f 66 66 20 74 68 65 20 70     4 Turn off the p
    14e5:	6f 77 65 72 2e 0a 35 20 54 75 72 6e 20 6f 6e 20     ower..5 Turn on 
    14f5:	74 68 65 20 72 61 64 69 6f 2e 00                    the radio..

00001500 <scrESCCal0>:
    1500:	31 20 54 41 4b 45 20 4f 46 46 20 54 48 45 0a 20     1 TAKE OFF THE. 
    1510:	20 50 52 4f 50 45 4c 4c 45 52 53 21 21 0a 32 20      PROPELLERS!!.2 
    1520:	43 68 65 63 6b 20 74 68 65 20 74 68 72 6f 74 74     Check the thrott
    1530:	6c 65 0a 20 20 64 69 72 65 63 74 69 6f 6e 20 69     le.  direction i
    1540:	6e 20 74 68 65 0a 20 20 72 65 63 65 69 76 65 72     n the.  receiver
    1550:	20 74 65 73 74 20 6d 65 6e 75 2e 0a 20 20 52 65      test menu..  Re
    1560:	76 65 72 73 65 20 69 66 0a 20 20 6e 65 63 65 73     verse if.  neces
    1570:	73 61 72 79 2e 00                                   sary..

00001576 <scrSensorCal0>:
    1576:	50 6c 61 63 65 20 74 68 65 20 61 69 72 63 72 61     Place the aircra
    1586:	66 74 20 6f 6e 0a 61 20 6c 65 76 65 6c 20 73 75     ft on.a level su
    1596:	72 66 61 63 65 20 61 6e 64 0a 70 72 65 73 73 20     rface and.press 
    15a6:	43 4f 4e 54 49 4e 55 45 2e 0a 54 68 65 20 46 43     CONTINUE..The FC
    15b6:	20 77 69 6c 6c 20 74 68 65 6e 20 77 61 69 74 0a      will then wait.
    15c6:	35 20 73 65 63 20 74 6f 20 6c 65 74 20 74 68 65     5 sec to let the
    15d6:	0a 61 69 72 63 72 61 66 74 20 73 65 74 74 6c 65     .aircraft settle
    15e6:	20 64 6f 77 6e 2e 00                                 down..

000015ed <scrCPPMSettings2>:
    15ed:	41 75 78 31 3a 0a 41 75 78 32 3a 0a 41 75 78 33     Aux1:.Aux2:.Aux3
    15fd:	3a 0a 41 75 78 34 3a 00                             :.Aux4:.

00001605 <scrCPPMSettings1>:
    1605:	52 6f 6c 6c 20 28 41 69 6c 29 3a 0a 50 69 74 63     Roll (Ail):.Pitc
    1615:	68 20 28 45 6c 65 29 3a 0a 59 61 77 20 28 52 75     h (Ele):.Yaw (Ru
    1625:	64 29 3a 0a 54 68 72 6f 74 74 6c 65 3a 00           d):.Throttle:.

00001633 <scrCameraStabSettings>:
    1633:	43 61 6d 65 72 61 20 53 74 61 62 20 53 65 74 75     Camera Stab Setu
    1643:	70 0a 0a 52 6f 6c 6c 20 67 61 69 6e 3a 0a 52 6f     p..Roll gain:.Ro
    1653:	6c 6c 20 6f 66 66 73 65 74 3a 0a 50 69 74 63 68     ll offset:.Pitch
    1663:	20 67 61 69 6e 3a 0a 50 69 74 63 68 20 6f 66 66      gain:.Pitch off
    1673:	73 65 74 3a 0a 00                                   set:..

00001679 <scrSelflevelSettings>:
    1679:	50 20 47 61 69 6e 3a 0a 50 20 4c 69 6d 69 74 3a     P Gain:.P Limit:
    1689:	0a 0a 41 63 63 20 54 72 69 6d 20 52 6f 6c 6c 3a     ..Acc Trim Roll:
    1699:	0a 41 63 63 20 54 72 69 6d 20 50 69 74 63 68 3a     .Acc Trim Pitch:
	...

000016aa <scrMiscSettings>:
    16aa:	4d 69 6e 69 6d 75 6d 20 74 68 72 6f 74 74 6c 65     Minimum throttle
    16ba:	3a 0a 48 65 69 67 68 74 20 44 61 6d 70 65 6e 69     :.Height Dampeni
    16ca:	6e 67 3a 0a 48 65 69 67 68 74 20 44 2e 20 4c 69     ng:.Height D. Li
    16da:	6d 69 74 3a 0a 41 6c 61 72 6d 20 31 2f 31 30 20     mit:.Alarm 1/10 
    16ea:	76 6f 6c 74 73 3a 0a 53 65 72 76 6f 20 66 69 6c     volts:.Servo fil
    16fa:	74 65 72 3a 00                                      ter:.

000016ff <scrStickScaling>:
    16ff:	53 74 69 63 6b 20 53 63 61 6c 69 6e 67 0a 0a 52     Stick Scaling..R
    170f:	6f 6c 6c 20 28 41 69 6c 29 3a 0a 50 69 74 63 68     oll (Ail):.Pitch
    171f:	20 28 45 6c 65 29 3a 0a 59 61 77 20 28 52 75 64      (Ele):.Yaw (Rud
    172f:	29 3a 0a 54 68 72 6f 74 74 6c 65 3a 00              ):.Throttle:.

0000173c <scrModeSettings>:
    173c:	53 65 6c 66 2d 4c 65 76 65 6c 3a 0a 41 72 6d 69     Self-Level:.Armi
    174c:	6e 67 3a 0a 4c 69 6e 6b 20 52 6f 6c 6c 20 50 69     ng:.Link Roll Pi
    175c:	74 63 68 3a 0a 41 75 74 6f 20 44 69 73 61 72 6d     tch:.Auto Disarm
    176c:	3a 0a 43 50 50 4d 20 45 6e 61 62 6c 65 64 3a 00     :.CPPM Enabled:.

0000177c <scrSensorTest>:
    177c:	47 79 72 6f 20 58 3a 0a 47 79 72 6f 20 59 3a 0a     Gyro X:.Gyro Y:.
    178c:	47 79 72 6f 20 5a 3a 0a 41 63 63 20 20 58 3a 0a     Gyro Z:.Acc  X:.
    179c:	41 63 63 20 20 59 3a 0a 41 63 63 20 20 5a 3a 0a     Acc  Y:.Acc  Z:.
    17ac:	42 61 74 74 3a 00                                   Batt:.

000017b2 <scrReceiverTest>:
    17b2:	41 69 6c 65 72 6f 6e 3a 0a 45 6c 65 76 61 74 6f     Aileron:.Elevato
    17c2:	72 3a 0a 52 75 64 64 65 72 3a 0a 54 68 72 6f 74     r:.Rudder:.Throt
    17d2:	74 6c 65 3a 0a 41 75 78 31 3a 0a 41 75 78 32 3a     tle:.Aux1:.Aux2:
	...

000017e3 <scrPIEditor>:
    17e3:	41 78 69 73 3a 0a 0a 50 20 47 61 69 6e 3a 0a 50     Axis:..P Gain:.P
    17f3:	20 4c 69 6d 69 74 3a 0a 49 20 47 61 69 6e 3a 0a      Limit:.I Gain:.
    1803:	49 20 4c 69 6d 69 74 3a 00                          I Limit:.

0000180c <scrStart>:
    180c:	53 65 6c 66 2d 6c 65 76 65 6c 20 69 73 0a 0a 42     Self-level is..B
    181c:	61 74 74 65 72 79 3a 0a 52 6f 6c 6c 20 61 6e 67     attery:.Roll ang
    182c:	6c 65 3a 0a 50 69 74 63 68 20 61 6e 67 6c 65 3a     le:.Pitch angle:
	...

0000183d <strSensorNotCal>:
    183d:	6e 6f 20 63 61 6c 69 62 72 61 74 69 6f 6e 00        no calibration.

0000184c <strUnused>:
    184c:	55 6e 75 73 65 64 2e 00                             Unused..

00001854 <strALL>:
    1854:	41 4c 4c 00                                         ALL.

00001858 <strCCW>:
    1858:	43 43 57 00                                         CCW.

0000185c <strCW>:
    185c:	43 57 00                                            CW.

0000185f <strDirSeen>:
    185f:	44 69 72 65 63 74 69 6f 6e 0a 73 65 65 6e 20 66     Direction.seen f
    186f:	72 6f 6d 0a 61 62 6f 76 65 3a 00                    rom.above:.

0000187a <strOutput>:
    187a:	4f 75 74 70 75 74 3a 00                             Output:.

00001882 <strAreYouSure>:
    1882:	41 72 65 20 79 6f 75 20 73 75 72 65 3f 00           Are you sure?.

00001890 <strCalSucc>:
    1890:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 75 63 63     Calibration succ
    18a0:	65 65 64 65 64 00                                   eeded.

000018a6 <strSec>:
    18a6:	73 65 63 00                                         sec.

000018aa <strWait>:
    18aa:	57 61 69 74 69 6e 67 00                             Waiting.

000018b2 <strThro>:
    18b2:	54 68 72 6f 00                                      Thro.

000018b7 <strYaw>:
    18b7:	59 61 77 00                                         Yaw.

000018bb <strPitch>:
    18bb:	50 69 74 63 68 00                                   Pitch.

000018c1 <strRoll>:
    18c1:	52 6f 6c 6c 00                                      Roll.

000018c6 <strError>:
    18c6:	45 72 72 6f 72 3a 00                                Error:.

000018cd <strOff>:
    18cd:	4f 66 66 00                                         Off.

000018d1 <strOn>:
    18d1:	4f 6e 00                                            On.

000018d4 <strFull>:
    18d4:	46 75 6c 6c 00                                      Full.

000018d9 <strIdle>:
    18d9:	49 64 6c 65 00                                      Idle.

000018de <strForward>:
    18de:	46 72 77 72 64 00                                   Frwrd.

000018e4 <strBack>:
    18e4:	42 61 63 6b 00                                      Back.

000018e9 <strRight>:
    18e9:	52 69 67 68 74 00                                   Right.

000018ef <strLeft>:
    18ef:	4c 65 66 74 00                                      Left.

000018f4 <strNoSignal>:
    18f4:	4e 6f 20 73 69 67 6e 61 6c 00                       No signal.

000018fe <strLow>:
    18fe:	4c 6f 00                                            Lo.

00001901 <strHigh>:
    1901:	48 69 00                                            Hi.

00001904 <strServo>:
    1904:	53 65 72 76 6f 00                                   Servo.

0000190a <strESC>:
    190a:	45 53 43 00                                         ESC.

0000190e <strNo>:
    190e:	4e 6f 00                                            No.

00001911 <strYes>:
    1911:	59 65 73 00                                         Yes.

00001915 <strAUX>:
    1915:	41 55 58 00                                         AUX.

00001919 <strStick>:
    1919:	53 74 69 63 6b 00                                   Stick.

0000191f <strYawRud>:
    191f:	59 61 77 20 28 52 75 64 64 65 72 29 00              Yaw (Rudder).

0000192c <strPitchEle>:
    192c:	50 69 74 63 68 20 28 45 6c 65 76 61 74 6f 72 29     Pitch (Elevator)
	...

0000193d <strRollAil>:
    193d:	52 6f 6c 6c 20 28 41 69 6c 65 72 6f 6e 29 00        Roll (Aileron).

0000194c <strFactoryReset>:
    194c:	46 61 63 74 6f 72 79 20 52 65 73 65 74 00           Factory Reset.

0000195a <strDebug>:
    195a:	44 65 62 75 67 00                                   Debug.

00001960 <strLoadMotorLayout>:
    1960:	4c 6f 61 64 20 4d 6f 64 65 6c 20 4c 61 79 6f 75     Load Model Layou
    1970:	74 00                                               t.

00001972 <strShowMotorLayout>:
    1972:	53 68 6f 77 20 4d 6f 64 65 6c 20 4c 61 79 6f 75     Show Model Layou
    1982:	74 00                                               t.

00001984 <strMixerEditor>:
    1984:	4d 69 78 65 72 20 45 64 69 74 6f 72 00              Mixer Editor.

00001991 <strRadioCalibration>:
    1991:	53 74 69 63 6b 20 43 65 6e 74 65 72 69 6e 67 00     Stick Centering.

000019a1 <strESCCalibration>:
    19a1:	45 53 43 20 43 61 6c 69 62 72 61 74 69 6f 6e 00     ESC Calibration.

000019b1 <strCPPMSettings>:
    19b1:	43 50 50 4d 20 53 65 74 74 69 6e 67 73 00           CPPM Settings.

000019bf <strSensorCalibration>:
    19bf:	53 65 6e 73 6f 72 20 43 61 6c 69 62 72 61 74 69     Sensor Calibrati
    19cf:	6f 6e 00                                            on.

000019d2 <strSensorTest>:
    19d2:	53 65 6e 73 6f 72 20 54 65 73 74 00                 Sensor Test.

000019de <strCameraStabSerrings>:
    19de:	43 61 6d 65 72 61 20 53 74 61 62 20 53 65 74 74     Camera Stab Sett
    19ee:	69 6e 67 73 00                                      ings.

000019f3 <strSelflevelSettings>:
    19f3:	53 65 6c 66 2d 6c 65 76 65 6c 20 53 65 74 74 69     Self-level Setti
    1a03:	6e 67 73 00                                         ngs.

00001a07 <strMiscSettings>:
    1a07:	4d 69 73 63 2e 20 53 65 74 74 69 6e 67 73 00        Misc. Settings.

00001a16 <strStickScaling>:
    1a16:	53 74 69 63 6b 20 53 63 61 6c 69 6e 67 00           Stick Scaling.

00001a24 <strModeSettings>:
    1a24:	4d 6f 64 65 20 53 65 74 74 69 6e 67 73 00           Mode Settings.

00001a32 <strReceiverTest>:
    1a32:	52 65 63 65 69 76 65 72 20 54 65 73 74 00           Receiver Test.

00001a40 <strPIEditor>:
    1a40:	50 49 20 45 64 69 74 6f 72 00                       PI Editor.

00001a4a <strON>:
    1a4a:	4f 4e 00                                            ON.

00001a4d <strOFF>:
    1a4d:	4f 46 46 00                                         OFF.

00001a51 <strARMED>:
    1a51:	41 52 4d 45 44 00                                   ARMED.

00001a57 <strSAFE>:
    1a57:	53 41 46 45 00                                      SAFE.

00001a5c <__vector_24>:

static uint16_t _adc[8];

__attribute__ ((section(".lowtext")))
ISR(ADC_vect, ISR_NOBLOCK)
{
    1a5c:	78 94       	sei
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
	static uint8_t _index;
	_adc[_index] = ADC;
    1a72:	20 91 0a 01 	lds	r18, 0x010A
    1a76:	80 91 78 00 	lds	r24, 0x0078
    1a7a:	90 91 79 00 	lds	r25, 0x0079
    1a7e:	e2 2f       	mov	r30, r18
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	e5 5f       	subi	r30, 0xF5	; 245
    1a88:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
	_index = (_index + 1) % 8U;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	82 0f       	add	r24, r18
    1a92:	87 70       	andi	r24, 0x07	; 7
    1a94:	80 93 0a 01 	sts	0x010A, r24
	ADMUX = _index;
    1a98:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADSC);
    1a9c:	ea e7       	ldi	r30, 0x7A	; 122
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	80 83       	st	Z, r24
}
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_18>:
	sendCommand(CMD_SET_COLUMN_LOWER | (column & 0x0f));
}

__attribute__ ((section(".lowtext")))
ISR(TIMER0_OVF_vect, ISR_NOBLOCK)
{
    1aba:	78 94       	sei
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	0f 92       	push	r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
	static uint16_t offset;
	
	if (offset % LCDWIDTH == 0)
    1ae2:	c0 91 27 01 	lds	r28, 0x0127
    1ae6:	d0 91 28 01 	lds	r29, 0x0128
    1aea:	ce 01       	movw	r24, r28
    1aec:	8f 77       	andi	r24, 0x7F	; 127
    1aee:	99 27       	eor	r25, r25
    1af0:	89 2b       	or	r24, r25
    1af2:	81 f4       	brne	.+32     	; 0x1b14 <__vector_18+0x5a>
		setPos(offset / LCDWIDTH, 0);
    1af4:	ce 01       	movw	r24, r28
    1af6:	88 0f       	add	r24, r24
    1af8:	89 2f       	mov	r24, r25
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	91 95       	neg	r25
	LCD_CS = 1;
}

static void setPos(uint8_t line, uint8_t column)
{
	sendCommand(CMD_SET_PAGE | (line & 0x07));
    1b00:	87 70       	andi	r24, 0x07	; 7
    1b02:	80 6b       	ori	r24, 0xB0	; 176
    1b04:	0e 94 49 11 	call	0x2292	; 0x2292 <sendCommand>
	sendCommand(CMD_SET_COLUMN_UPPER | (column / 16));
    1b08:	80 e1       	ldi	r24, 0x10	; 16
    1b0a:	0e 94 49 11 	call	0x2292	; 0x2292 <sendCommand>
	sendCommand(CMD_SET_COLUMN_LOWER | (column & 0x0f));
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	0e 94 49 11 	call	0x2292	; 0x2292 <sendCommand>
	static uint16_t offset;
	
	if (offset % LCDWIDTH == 0)
		setPos(offset / LCDWIDTH, 0);
		
	sendData(*(_screen + offset++));
    1b14:	fe 01       	movw	r30, r28
    1b16:	e1 5d       	subi	r30, 0xD1	; 209
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	80 81       	ld	r24, Z
	LCD_CS = 1;
}

static void sendData(uint8_t data)
{
	LCD_CS = 0;
    1b1c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_A0 = 1;
    1b1e:	5f 9a       	sbi	0x0b, 7	; 11
	sendByte(data);
    1b20:	0e 94 3d 11 	call	0x227a	; 0x227a <sendByte>
	LCD_CS = 1;
    1b24:	5d 9a       	sbi	0x0b, 5	; 11
	static uint16_t offset;
	
	if (offset % LCDWIDTH == 0)
		setPos(offset / LCDWIDTH, 0);
		
	sendData(*(_screen + offset++));
    1b26:	21 96       	adiw	r28, 0x01	; 1
	offset %= sizeof(_screen);
    1b28:	d3 70       	andi	r29, 0x03	; 3
    1b2a:	d0 93 28 01 	sts	0x0128, r29
    1b2e:	c0 93 27 01 	sts	0x0127, r28
}
    1b32:	ff 91       	pop	r31
    1b34:	ef 91       	pop	r30
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <__vector_13>:
}

// for odd output numbers
__attribute__ ((section(".lowtext")))
ISR(TIMER1_COMPA_vect)
{
    1b58:	1f 92       	push	r1
    1b5a:	0f 92       	push	r0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	0f 92       	push	r0
    1b60:	11 24       	eor	r1, r1
    1b62:	2f 93       	push	r18
    1b64:	3f 93       	push	r19
    1b66:	4f 93       	push	r20
    1b68:	5f 93       	push	r21
    1b6a:	6f 93       	push	r22
    1b6c:	7f 93       	push	r23
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	af 93       	push	r26
    1b74:	bf 93       	push	r27
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31
	static uint8_t index;
	static uint8_t loActive;
	static uint16_t lastLoStart;
	
	OUT_PORT &= ~(_BV(OUT1_BIT) | _BV(OUT3_BIT) | _BV(OUT5_BIT) | _BV(OUT7_BIT));
    1b7a:	88 b1       	in	r24, 0x08	; 8
    1b7c:	89 79       	andi	r24, 0x99	; 153
    1b7e:	88 b9       	out	0x08, r24	; 8
	sei();
    1b80:	78 94       	sei
	
	if (index == 0)
    1b82:	80 91 37 05 	lds	r24, 0x0537
    1b86:	81 11       	cpse	r24, r1
    1b88:	15 c0       	rjmp	.+42     	; 0x1bb4 <__vector_13+0x5c>

#define USE_2_OC

static uint8_t checkLoRate(uint16_t* lastStart)
{
	uint16_t t = millis();
    1b8a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
	if (t - *lastStart >= LO_RATE_CYCLE)
    1b8e:	20 91 35 05 	lds	r18, 0x0535
    1b92:	30 91 36 05 	lds	r19, 0x0536
    1b96:	ac 01       	movw	r20, r24
    1b98:	42 1b       	sub	r20, r18
    1b9a:	53 0b       	sbc	r21, r19
    1b9c:	44 31       	cpi	r20, 0x14	; 20
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	30 f0       	brcs	.+12     	; 0x1bae <__vector_13+0x56>
	{
		*lastStart = t;
    1ba2:	90 93 36 05 	sts	0x0536, r25
    1ba6:	80 93 35 05 	sts	0x0535, r24
		return ON;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <__vector_13+0x58>
	}
	else
		return OFF;
    1bae:	80 e0       	ldi	r24, 0x00	; 0
	
	OUT_PORT &= ~(_BV(OUT1_BIT) | _BV(OUT3_BIT) | _BV(OUT5_BIT) | _BV(OUT7_BIT));
	sei();
	
	if (index == 0)
		loActive = checkLoRate(&lastLoStart);
    1bb0:	80 93 34 05 	sts	0x0534, r24

	OCR1A = doOutput(index * 2, loActive);
    1bb4:	80 91 37 05 	lds	r24, 0x0537
    1bb8:	60 91 34 05 	lds	r22, 0x0534
    1bbc:	88 0f       	add	r24, r24
    1bbe:	0e 94 8d 13 	call	0x271a	; 0x271a <doOutput>
    1bc2:	90 93 89 00 	sts	0x0089, r25
    1bc6:	80 93 88 00 	sts	0x0088, r24
	sei();
    1bca:	78 94       	sei
	index = (index + 1) % 4;
    1bcc:	80 91 37 05 	lds	r24, 0x0537
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	83 70       	andi	r24, 0x03	; 3
    1bd6:	99 27       	eor	r25, r25
    1bd8:	80 93 37 05 	sts	0x0537, r24
}
    1bdc:	ff 91       	pop	r31
    1bde:	ef 91       	pop	r30
    1be0:	bf 91       	pop	r27
    1be2:	af 91       	pop	r26
    1be4:	9f 91       	pop	r25
    1be6:	8f 91       	pop	r24
    1be8:	7f 91       	pop	r23
    1bea:	6f 91       	pop	r22
    1bec:	5f 91       	pop	r21
    1bee:	4f 91       	pop	r20
    1bf0:	3f 91       	pop	r19
    1bf2:	2f 91       	pop	r18
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <__vector_14>:

// for even output numbers
__attribute__ ((section(".lowtext")))
ISR(TIMER1_COMPB_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
	static uint8_t index;
	static uint8_t loActive;
	static uint16_t lastLoStart;
	
	OUT_PORT &= ~(_BV(OUT2_BIT) | _BV(OUT4_BIT) | _BV(OUT6_BIT) | _BV(OUT8_BIT));
    1c20:	88 b1       	in	r24, 0x08	; 8
    1c22:	86 76       	andi	r24, 0x66	; 102
    1c24:	88 b9       	out	0x08, r24	; 8
	sei();
    1c26:	78 94       	sei
	
	if (index == 0)
    1c28:	80 91 33 05 	lds	r24, 0x0533
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	15 c0       	rjmp	.+42     	; 0x1c5a <__vector_14+0x5c>

#define USE_2_OC

static uint8_t checkLoRate(uint16_t* lastStart)
{
	uint16_t t = millis();
    1c30:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
	if (t - *lastStart >= LO_RATE_CYCLE)
    1c34:	20 91 31 05 	lds	r18, 0x0531
    1c38:	30 91 32 05 	lds	r19, 0x0532
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	42 1b       	sub	r20, r18
    1c40:	53 0b       	sbc	r21, r19
    1c42:	44 31       	cpi	r20, 0x14	; 20
    1c44:	51 05       	cpc	r21, r1
    1c46:	30 f0       	brcs	.+12     	; 0x1c54 <__vector_14+0x56>
	{
		*lastStart = t;
    1c48:	90 93 32 05 	sts	0x0532, r25
    1c4c:	80 93 31 05 	sts	0x0531, r24
		return ON;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <__vector_14+0x58>
	}
	else
		return OFF;
    1c54:	80 e0       	ldi	r24, 0x00	; 0
	
	OUT_PORT &= ~(_BV(OUT2_BIT) | _BV(OUT4_BIT) | _BV(OUT6_BIT) | _BV(OUT8_BIT));
	sei();
	
	if (index == 0)
		loActive = checkLoRate(&lastLoStart);
    1c56:	80 93 30 05 	sts	0x0530, r24
	
	OCR1B = doOutput(index * 2 + 1, loActive);
    1c5a:	80 91 33 05 	lds	r24, 0x0533
    1c5e:	88 0f       	add	r24, r24
    1c60:	60 91 30 05 	lds	r22, 0x0530
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	0e 94 8d 13 	call	0x271a	; 0x271a <doOutput>
    1c6a:	90 93 8b 00 	sts	0x008B, r25
    1c6e:	80 93 8a 00 	sts	0x008A, r24
	sei();
    1c72:	78 94       	sei
	index = (index + 1) % 4;
    1c74:	80 91 33 05 	lds	r24, 0x0533
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	83 70       	andi	r24, 0x03	; 3
    1c7e:	99 27       	eor	r25, r25
    1c80:	80 93 33 05 	sts	0x0533, r24
}
    1c84:	ff 91       	pop	r31
    1c86:	ef 91       	pop	r30
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_2>:


// ISR for vector INT1. Handles PWM signal for AIL in PWM mode
__attribute__ ((section(".lowtext")))
ISR(INT1_vect)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
	static uint32_t _start;
	uint32_t t = ticks();
    1cc8:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
	sei();
    1ccc:	78 94       	sei
	
	if (RX_AIL)
    1cce:	4b 9b       	sbis	0x09, 3	; 9
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <__vector_2+0x3e>
		_start = t;
    1cd2:	60 93 58 05 	sts	0x0558, r22
    1cd6:	70 93 59 05 	sts	0x0559, r23
    1cda:	80 93 5a 05 	sts	0x055A, r24
    1cde:	90 93 5b 05 	sts	0x055B, r25
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <__vector_2+0x5c>
	else
	{
		RX_isr[AIL] = t - _start;
    1ce4:	20 91 58 05 	lds	r18, 0x0558
    1ce8:	30 91 59 05 	lds	r19, 0x0559
    1cec:	62 1b       	sub	r22, r18
    1cee:	73 0b       	sbc	r23, r19
    1cf0:	70 93 5f 05 	sts	0x055F, r23
    1cf4:	60 93 5e 05 	sts	0x055E, r22
		_RX_good |= _BV(AIL);
    1cf8:	80 91 5c 05 	lds	r24, 0x055C
    1cfc:	81 60       	ori	r24, 0x01	; 1
    1cfe:	80 93 5c 05 	sts	0x055C, r24
	}			
}
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_1>:

// ISR for vector INT0. Handles PWM signal for ELE in PWM mode
__attribute__ ((section(".lowtext")))
ISR(INT0_vect)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
	static uint32_t _start;
	uint32_t t = ticks();
    1d46:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
	sei();
    1d4a:	78 94       	sei
	
	if (RX_ELE)
    1d4c:	4a 9b       	sbis	0x09, 2	; 9
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <__vector_1+0x3e>
	_start = t;
    1d50:	60 93 54 05 	sts	0x0554, r22
    1d54:	70 93 55 05 	sts	0x0555, r23
    1d58:	80 93 56 05 	sts	0x0556, r24
    1d5c:	90 93 57 05 	sts	0x0557, r25
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <__vector_1+0x5c>
	else
	{
		RX_isr[ELE] = t - _start;
    1d62:	20 91 54 05 	lds	r18, 0x0554
    1d66:	30 91 55 05 	lds	r19, 0x0555
    1d6a:	62 1b       	sub	r22, r18
    1d6c:	73 0b       	sbc	r23, r19
    1d6e:	70 93 61 05 	sts	0x0561, r23
    1d72:	60 93 60 05 	sts	0x0560, r22
		_RX_good |= _BV(ELE);
    1d76:	80 91 5c 05 	lds	r24, 0x055C
    1d7a:	82 60       	ori	r24, 0x02	; 2
    1d7c:	80 93 5c 05 	sts	0x055C, r24
	}
}
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0
    1d9e:	1f 90       	pop	r1
    1da0:	18 95       	reti

00001da2 <__vector_3>:

// ISR for vector INT2. Handles CPPM signal in CPPM mode, or PWM signal for RUD in PWM mode
__attribute__ ((section(".lowtext")))
ISR(INT2_vect)
{
    1da2:	1f 92       	push	r1
    1da4:	0f 92       	push	r0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	0f 92       	push	r0
    1daa:	11 24       	eor	r1, r1
    1dac:	cf 92       	push	r12
    1dae:	df 92       	push	r13
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
	static uint32_t _start;
	static uint8_t _index;
	static uint8_t _mask;

	uint32_t t = ticks();
    1dd0:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
	sei();
    1dd4:	78 94       	sei
	
	if (_mode != RX_MODE_PWM)
    1dd6:	20 91 5d 05 	lds	r18, 0x055D
    1dda:	22 23       	and	r18, r18
    1ddc:	c1 f1       	breq	.+112    	; 0x1e4e <__vector_3+0xac>
	{
		if ((t - _start) > MICROTOTICKS(PPM_SYNC_LENGTH))
    1dde:	00 91 50 05 	lds	r16, 0x0550
    1de2:	10 91 51 05 	lds	r17, 0x0551
    1de6:	20 91 52 05 	lds	r18, 0x0552
    1dea:	30 91 53 05 	lds	r19, 0x0553
    1dee:	6b 01       	movw	r12, r22
    1df0:	7c 01       	movw	r14, r24
    1df2:	c0 1a       	sub	r12, r16
    1df4:	d1 0a       	sbc	r13, r17
    1df6:	e2 0a       	sbc	r14, r18
    1df8:	f3 0a       	sbc	r15, r19
    1dfa:	41 e6       	ldi	r20, 0x61	; 97
    1dfc:	c4 16       	cp	r12, r20
    1dfe:	4a ee       	ldi	r20, 0xEA	; 234
    1e00:	d4 06       	cpc	r13, r20
    1e02:	e1 04       	cpc	r14, r1
    1e04:	f1 04       	cpc	r15, r1
    1e06:	30 f0       	brcs	.+12     	; 0x1e14 <__vector_3+0x72>
		{
			_index = 0;
    1e08:	10 92 4f 05 	sts	0x054F, r1
			_mask = 1;
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	20 93 4e 05 	sts	0x054E, r18
    1e12:	1f c0       	rjmp	.+62     	; 0x1e52 <__vector_3+0xb0>
		}
		else if (_index >= 0 && _index < 8)
    1e14:	40 91 4f 05 	lds	r20, 0x054F
    1e18:	48 30       	cpi	r20, 0x08	; 8
    1e1a:	d8 f4       	brcc	.+54     	; 0x1e52 <__vector_3+0xb0>
		{
			RX_isr[_index] = t - _start;
    1e1c:	e4 2f       	mov	r30, r20
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e2 5a       	subi	r30, 0xA2	; 162
    1e26:	fa 4f       	sbci	r31, 0xFA	; 250
    1e28:	9b 01       	movw	r18, r22
    1e2a:	20 1b       	sub	r18, r16
    1e2c:	31 0b       	sbc	r19, r17
    1e2e:	31 83       	std	Z+1, r19	; 0x01
    1e30:	20 83       	st	Z, r18
			_index++;
    1e32:	4f 5f       	subi	r20, 0xFF	; 255
    1e34:	40 93 4f 05 	sts	0x054F, r20
			_RX_good |= _mask;
    1e38:	30 91 4e 05 	lds	r19, 0x054E
    1e3c:	20 91 5c 05 	lds	r18, 0x055C
    1e40:	23 2b       	or	r18, r19
    1e42:	20 93 5c 05 	sts	0x055C, r18
			_mask <<= 1;
    1e46:	33 0f       	add	r19, r19
    1e48:	30 93 4e 05 	sts	0x054E, r19
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <__vector_3+0xb0>
		}
		_start = t;
	}
	else
	{
		if (RX_RUD)
    1e4e:	1a 9b       	sbis	0x03, 2	; 3
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <__vector_3+0xc2>
			_start = t;
    1e52:	60 93 50 05 	sts	0x0550, r22
    1e56:	70 93 51 05 	sts	0x0551, r23
    1e5a:	80 93 52 05 	sts	0x0552, r24
    1e5e:	90 93 53 05 	sts	0x0553, r25
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <__vector_3+0xe0>
		else
		{
			RX_isr[RUD] = t - _start;
    1e64:	20 91 50 05 	lds	r18, 0x0550
    1e68:	30 91 51 05 	lds	r19, 0x0551
    1e6c:	62 1b       	sub	r22, r18
    1e6e:	73 0b       	sbc	r23, r19
    1e70:	70 93 63 05 	sts	0x0563, r23
    1e74:	60 93 62 05 	sts	0x0562, r22
			_RX_good |= _BV(RUD);
    1e78:	80 91 5c 05 	lds	r24, 0x055C
    1e7c:	84 60       	ori	r24, 0x04	; 4
    1e7e:	80 93 5c 05 	sts	0x055C, r24
		}
	}	
}
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti

00001eb0 <__vector_7>:

// ISR for vector PCI3. Handles PWM signal for THR in PWM mode
__attribute__ ((section(".lowtext")))
ISR(PCINT3_vect)
{
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	2f 93       	push	r18
    1ebc:	3f 93       	push	r19
    1ebe:	4f 93       	push	r20
    1ec0:	5f 93       	push	r21
    1ec2:	6f 93       	push	r22
    1ec4:	7f 93       	push	r23
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
	static uint16_t _start;
	uint16_t t = ticks();
    1ed2:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
	sei();
    1ed6:	78 94       	sei
	
	if (RX_THR)
    1ed8:	48 9b       	sbis	0x09, 0	; 9
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <__vector_7+0x36>
		_start = t;
    1edc:	70 93 4d 05 	sts	0x054D, r23
    1ee0:	60 93 4c 05 	sts	0x054C, r22
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <__vector_7+0x54>
	else
	{
		RX_isr[THR] = t - _start;	
    1ee6:	20 91 4c 05 	lds	r18, 0x054C
    1eea:	30 91 4d 05 	lds	r19, 0x054D
    1eee:	62 1b       	sub	r22, r18
    1ef0:	73 0b       	sbc	r23, r19
    1ef2:	70 93 65 05 	sts	0x0565, r23
    1ef6:	60 93 64 05 	sts	0x0564, r22
		_RX_good |= _BV(THR);
    1efa:	80 91 5c 05 	lds	r24, 0x055C
    1efe:	88 60       	ori	r24, 0x08	; 8
    1f00:	80 93 5c 05 	sts	0x055C, r24
	}		
}
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <__vector_5>:

// ISR for vector PCI1. Handles PWM signal for AX1 in PWM mode
__attribute__ ((section(".lowtext")))
ISR(PCINT1_vect)
{
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
	static uint16_t _start;
	uint16_t t = ticks();
    1f48:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
	sei();
    1f4c:	78 94       	sei
	
	if (RX_AUX)
    1f4e:	18 9b       	sbis	0x03, 0	; 3
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <__vector_5+0x36>
		_start = t;
    1f52:	70 93 4b 05 	sts	0x054B, r23
    1f56:	60 93 4a 05 	sts	0x054A, r22
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <__vector_5+0x54>
	else
	{
		RX_isr[AX1] = t - _start;	
    1f5c:	20 91 4a 05 	lds	r18, 0x054A
    1f60:	30 91 4b 05 	lds	r19, 0x054B
    1f64:	62 1b       	sub	r22, r18
    1f66:	73 0b       	sbc	r23, r19
    1f68:	70 93 67 05 	sts	0x0567, r23
    1f6c:	60 93 66 05 	sts	0x0566, r22
		_RX_good |= _BV(AX1);
    1f70:	80 91 5c 05 	lds	r24, 0x055C
    1f74:	80 61       	ori	r24, 0x10	; 16
    1f76:	80 93 5c 05 	sts	0x055C, r24
	}		
}
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <__vector_29>:
	return -1;
}

__attribute__((section(".lowtext")))
ISR(USART1_UDRE_vect)
{
    1f9c:	1f 92       	push	r1
    1f9e:	0f 92       	push	r0
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	0f 92       	push	r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	8f 93       	push	r24
    1fa8:	9f 93       	push	r25
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
	}
}

static int16_t Dequeue(struct FifoBuffer* buf)
{
	if (buf->ReadPtr != buf->WritePtr)
    1fae:	90 91 67 06 	lds	r25, 0x0667
    1fb2:	80 91 68 06 	lds	r24, 0x0668
    1fb6:	98 17       	cp	r25, r24
    1fb8:	79 f0       	breq	.+30     	; 0x1fd8 <__vector_29+0x3c>
	{
		uint8_t c = buf->Buffer[buf->ReadPtr];
    1fba:	e0 91 67 06 	lds	r30, 0x0667
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	e9 5b       	subi	r30, 0xB9	; 185
    1fc2:	f9 4f       	sbci	r31, 0xF9	; 249
    1fc4:	90 81       	ld	r25, Z
		buf->ReadPtr = (uint8_t)(buf->ReadPtr + 1) % BUFFER_SIZE;
    1fc6:	80 91 67 06 	lds	r24, 0x0667
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	8f 71       	andi	r24, 0x1F	; 31
    1fce:	80 93 67 06 	sts	0x0667, r24
__attribute__((section(".lowtext")))
ISR(USART1_UDRE_vect)
{
	int16_t c = Dequeue(&TX_Buf);
	if (c >= 0)
		UDR1 = c;
    1fd2:	90 93 ce 00 	sts	0x00CE, r25
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <__vector_29+0x46>
	else	// buffer empty -> switch off interrupt
		UCSR1B &= ~_BV(UDRIE1);
    1fd8:	80 91 c9 00 	lds	r24, 0x00C9
    1fdc:	8f 7d       	andi	r24, 0xDF	; 223
    1fde:	80 93 c9 00 	sts	0x00C9, r24
}
    1fe2:	ff 91       	pop	r31
    1fe4:	ef 91       	pop	r30
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <__vector_28>:

__attribute__((section(".lowtext")))
ISR(USART1_RX_vect)
{
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	2f 93       	push	r18
    2000:	3f 93       	push	r19
    2002:	4f 93       	push	r20
    2004:	5f 93       	push	r21
    2006:	6f 93       	push	r22
    2008:	7f 93       	push	r23
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	ef 93       	push	r30
    2014:	ff 93       	push	r31
	Enqueue(&RX_Buf, UDR1);
    2016:	60 91 ce 00 	lds	r22, 0x00CE
    201a:	85 e2       	ldi	r24, 0x25	; 37
    201c:	96 e0       	ldi	r25, 0x06	; 6
    201e:	0e 94 c8 14 	call	0x2990	; 0x2990 <Enqueue>
}
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <__ctors_end>:
    2044:	11 24       	eor	r1, r1
    2046:	1f be       	out	0x3f, r1	; 63
    2048:	cf ef       	ldi	r28, 0xFF	; 255
    204a:	d8 e0       	ldi	r29, 0x08	; 8
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	cd bf       	out	0x3d, r28	; 61

00002050 <stop_wdt>:
__attribute__((section(".init3")))
__attribute__((used))
static void stop_wdt()
{
	// clear watchdog reset flag!!
	MCUSR = 0;
    2050:	14 be       	out	0x34, r1	; 52
	// and stop watchdog
	wdt_disable();
    2052:	88 e1       	ldi	r24, 0x18	; 24
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	80 93 60 00 	sts	0x0060, r24
    205c:	10 92 60 00 	sts	0x0060, r1
    2060:	0f be       	out	0x3f, r0	; 63

00002062 <__do_copy_data>:
    2062:	11 e0       	ldi	r17, 0x01	; 1
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	b1 e0       	ldi	r27, 0x01	; 1
    2068:	ee e3       	ldi	r30, 0x3E	; 62
    206a:	ff e4       	ldi	r31, 0x4F	; 79
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <__do_copy_data+0x10>
    206e:	05 90       	lpm	r0, Z+
    2070:	0d 92       	st	X+, r0
    2072:	aa 30       	cpi	r26, 0x0A	; 10
    2074:	b1 07       	cpc	r27, r17
    2076:	d9 f7       	brne	.-10     	; 0x206e <__do_copy_data+0xc>

00002078 <__do_clear_bss>:
    2078:	26 e0       	ldi	r18, 0x06	; 6
    207a:	aa e0       	ldi	r26, 0x0A	; 10
    207c:	b1 e0       	ldi	r27, 0x01	; 1
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <.do_clear_bss_start>

00002080 <.do_clear_bss_loop>:
    2080:	1d 92       	st	X+, r1

00002082 <.do_clear_bss_start>:
    2082:	a5 32       	cpi	r26, 0x25	; 37
    2084:	b2 07       	cpc	r27, r18
    2086:	e1 f7       	brne	.-8      	; 0x2080 <.do_clear_bss_loop>
    2088:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <main>
    208c:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <_exit>

00002090 <__bad_interrupt>:
    2090:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002094 <adcInit>:
void adcInit()
{
	// enable hardware
	//PRR0 |= PRADC;
	
	DIDR0 = 0xFF;			// disable all digital inputs on Port A
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	80 93 7e 00 	sts	0x007E, r24
	ADMUX = 0;
    209a:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0b11011111;	// ADEN, ADSC, ADIE, 
    209e:	8f ed       	ldi	r24, 0xDF	; 223
    20a0:	80 93 7a 00 	sts	0x007A, r24
    20a4:	08 95       	ret

000020a6 <adcGet>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20a6:	f8 94       	cli

uint16_t adcGet(uint8_t channel)
{
	uint16_t r;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
		r = _adc[channel];
    20a8:	e8 2f       	mov	r30, r24
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	e5 5f       	subi	r30, 0xF5	; 245
    20b2:	fe 4f       	sbci	r31, 0xFE	; 254
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    20b8:	78 94       	sei
	return r;
    20ba:	08 95       	ret

000020bc <digitalsBuzzBlocking>:
	BUZZER_DIR = OUTPUT;
	LED_DIR = OUTPUT;
}

void digitalsBuzzBlocking(uint16_t ms)
{
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	ec 01       	movw	r28, r24
	BUZZER = ON;
    20c6:	29 9a       	sbi	0x05, 1	; 5
	WAITMS(ms);
    20c8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    20cc:	8c 01       	movw	r16, r24
    20ce:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    20d2:	80 1b       	sub	r24, r16
    20d4:	91 0b       	sbc	r25, r17
    20d6:	8c 17       	cp	r24, r28
    20d8:	9d 07       	cpc	r25, r29
    20da:	c8 f3       	brcs	.-14     	; 0x20ce <digitalsBuzzBlocking+0x12>
	BUZZER = OFF;
    20dc:	29 98       	cbi	0x05, 1	; 5
}
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	08 95       	ret

000020e8 <digitalsLoop>:
		if (m >= a.end)				\
			toggle;

void digitalsLoop()
{
	uint16_t m = millis();
    20e8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
	_digDev(digBUZZER, BUZZER, BUZZER_TOGGLE)
    20ec:	40 91 1d 01 	lds	r20, 0x011D
    20f0:	50 91 1e 01 	lds	r21, 0x011E
    20f4:	20 91 1b 01 	lds	r18, 0x011B
    20f8:	30 91 1c 01 	lds	r19, 0x011C
    20fc:	41 15       	cp	r20, r1
    20fe:	51 05       	cpc	r21, r1
    2100:	59 f0       	breq	.+22     	; 0x2118 <digitalsLoop+0x30>
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	88 f0       	brcs	.+34     	; 0x212a <digitalsLoop+0x42>
    2108:	19 9a       	sbi	0x03, 1	; 3
    210a:	48 0f       	add	r20, r24
    210c:	59 1f       	adc	r21, r25
    210e:	50 93 1c 01 	sts	0x011C, r21
    2112:	40 93 1b 01 	sts	0x011B, r20
    2116:	09 c0       	rjmp	.+18     	; 0x212a <digitalsLoop+0x42>
    2118:	21 15       	cp	r18, r1
    211a:	31 05       	cpc	r19, r1
    211c:	31 f0       	breq	.+12     	; 0x212a <digitalsLoop+0x42>
    211e:	29 9b       	sbis	0x05, 1	; 5
    2120:	04 c0       	rjmp	.+8      	; 0x212a <digitalsLoop+0x42>
    2122:	82 17       	cp	r24, r18
    2124:	93 07       	cpc	r25, r19
    2126:	08 f0       	brcs	.+2      	; 0x212a <digitalsLoop+0x42>
    2128:	19 9a       	sbi	0x03, 1	; 3
	_digDev(digLED, LED, LED_TOGGLE);
    212a:	40 91 21 01 	lds	r20, 0x0121
    212e:	50 91 22 01 	lds	r21, 0x0122
    2132:	20 91 1f 01 	lds	r18, 0x011F
    2136:	30 91 20 01 	lds	r19, 0x0120
    213a:	41 15       	cp	r20, r1
    213c:	51 05       	cpc	r21, r1
    213e:	59 f0       	breq	.+22     	; 0x2156 <digitalsLoop+0x6e>
    2140:	82 17       	cp	r24, r18
    2142:	93 07       	cpc	r25, r19
    2144:	88 f0       	brcs	.+34     	; 0x2168 <digitalsLoop+0x80>
    2146:	1b 9a       	sbi	0x03, 3	; 3
    2148:	84 0f       	add	r24, r20
    214a:	95 1f       	adc	r25, r21
    214c:	90 93 20 01 	sts	0x0120, r25
    2150:	80 93 1f 01 	sts	0x011F, r24
    2154:	08 95       	ret
    2156:	21 15       	cp	r18, r1
    2158:	31 05       	cpc	r19, r1
    215a:	31 f0       	breq	.+12     	; 0x2168 <digitalsLoop+0x80>
    215c:	2b 9b       	sbis	0x05, 3	; 5
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <digitalsLoop+0x80>
    2160:	82 17       	cp	r24, r18
    2162:	93 07       	cpc	r25, r19
    2164:	08 f0       	brcs	.+2      	; 0x2168 <digitalsLoop+0x80>
    2166:	1b 9a       	sbi	0x03, 3	; 3
    2168:	08 95       	ret

0000216a <digitalsBuzz>:
}

void digitalsBuzz(uint16_t ms)
{
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	ec 01       	movw	r28, r24
	digBUZZER.end = millis() + ms;
    2170:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    2174:	8c 0f       	add	r24, r28
    2176:	9d 1f       	adc	r25, r29
    2178:	90 93 1c 01 	sts	0x011C, r25
    217c:	80 93 1b 01 	sts	0x011B, r24
	BUZZER = ON;
    2180:	29 9a       	sbi	0x05, 1	; 5
}
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <digitalsBuzzInterval>:

void digitalsBuzzInterval(uint16_t ms)
{
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
	if (!digBUZZER.interval)
    218e:	80 91 1d 01 	lds	r24, 0x011D
    2192:	90 91 1e 01 	lds	r25, 0x011E
    2196:	89 2b       	or	r24, r25
    2198:	31 f4       	brne	.+12     	; 0x21a6 <digitalsBuzzInterval+0x1e>
		digBUZZER.end = millis();
    219a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    219e:	90 93 1c 01 	sts	0x011C, r25
    21a2:	80 93 1b 01 	sts	0x011B, r24
	digBUZZER.interval = ms;
    21a6:	d0 93 1e 01 	sts	0x011E, r29
    21aa:	c0 93 1d 01 	sts	0x011D, r28
	if (!ms)
    21ae:	cd 2b       	or	r28, r29
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <digitalsBuzzInterval+0x2c>
		BUZZER = OFF;
    21b2:	29 98       	cbi	0x05, 1	; 5
}
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <keyboardState>:
static uint16_t keyDown;
static uint8_t repeat;

uint8_t keyboardState()
{
	return ~KEYBOARD_PIN & ALLKEYS;
    21ba:	83 b1       	in	r24, 0x03	; 3
    21bc:	80 95       	com	r24
}
    21be:	80 7f       	andi	r24, 0xF0	; 240
    21c0:	08 95       	ret

000021c2 <keyboardRead>:

uint8_t keyboardRead()
{
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
	uint16_t m = millis();
    21ca:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    21ce:	ec 01       	movw	r28, r24
	uint8_t keys = keyboardState();
    21d0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <keyboardState>
    21d4:	18 2f       	mov	r17, r24
	uint8_t newkeys = keys & ~lastKeys;
    21d6:	80 91 26 01 	lds	r24, 0x0126
    21da:	08 2f       	mov	r16, r24
    21dc:	00 95       	com	r16
    21de:	01 23       	and	r16, r17
	if (keys)
    21e0:	11 23       	and	r17, r17
    21e2:	e1 f1       	breq	.+120    	; 0x225c <keyboardRead+0x9a>
	{
		if (lastKeys != keys)
    21e4:	81 17       	cp	r24, r17
    21e6:	51 f0       	breq	.+20     	; 0x21fc <keyboardRead+0x3a>
		{
			keyDown = m;
    21e8:	d0 93 25 01 	sts	0x0125, r29
    21ec:	c0 93 24 01 	sts	0x0124, r28
			repeat = 0;
    21f0:	10 92 23 01 	sts	0x0123, r1
			digitalsBuzz(5);
    21f4:	85 e0       	ldi	r24, 0x05	; 5
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 b5 10 	call	0x216a	; 0x216a <digitalsBuzz>
		}			
		if (repeat > 15 && m - keyDown >= 20)
    21fc:	80 91 23 01 	lds	r24, 0x0123
    2200:	20 91 24 01 	lds	r18, 0x0124
    2204:	30 91 25 01 	lds	r19, 0x0125
    2208:	80 31       	cpi	r24, 0x10	; 16
    220a:	58 f0       	brcs	.+22     	; 0x2222 <keyboardRead+0x60>
    220c:	ae 01       	movw	r20, r28
    220e:	42 1b       	sub	r20, r18
    2210:	53 0b       	sbc	r21, r19
    2212:	44 31       	cpi	r20, 0x14	; 20
    2214:	51 05       	cpc	r21, r1
    2216:	38 f0       	brcs	.+14     	; 0x2226 <keyboardRead+0x64>
		{
			newkeys = keys;
			keyDown = m;
    2218:	d0 93 25 01 	sts	0x0125, r29
    221c:	c0 93 24 01 	sts	0x0124, r28
    2220:	1c c0       	rjmp	.+56     	; 0x225a <keyboardRead+0x98>
		}
		else if (repeat && m - keyDown >= 100)
    2222:	88 23       	and	r24, r24
    2224:	61 f0       	breq	.+24     	; 0x223e <keyboardRead+0x7c>
    2226:	ae 01       	movw	r20, r28
    2228:	42 1b       	sub	r20, r18
    222a:	53 0b       	sbc	r21, r19
    222c:	44 36       	cpi	r20, 0x64	; 100
    222e:	51 05       	cpc	r21, r1
    2230:	a8 f0       	brcs	.+42     	; 0x225c <keyboardRead+0x9a>
		{
			newkeys = keys;
			keyDown = m;
    2232:	d0 93 25 01 	sts	0x0125, r29
    2236:	c0 93 24 01 	sts	0x0124, r28
			repeat++;
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	0c c0       	rjmp	.+24     	; 0x2256 <keyboardRead+0x94>
		}
		else if (!repeat && m - keyDown >= 500)
    223e:	ce 01       	movw	r24, r28
    2240:	82 1b       	sub	r24, r18
    2242:	93 0b       	sbc	r25, r19
    2244:	9c 01       	movw	r18, r24
    2246:	24 3f       	cpi	r18, 0xF4	; 244
    2248:	31 40       	sbci	r19, 0x01	; 1
    224a:	40 f0       	brcs	.+16     	; 0x225c <keyboardRead+0x9a>
		{
			newkeys = keys;
			keyDown = m;
    224c:	d0 93 25 01 	sts	0x0125, r29
    2250:	c0 93 24 01 	sts	0x0124, r28
			repeat = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	80 93 23 01 	sts	0x0123, r24
    225a:	01 2f       	mov	r16, r17
		}
	}		
	lastKeys = keys;
    225c:	10 93 26 01 	sts	0x0126, r17
	return newkeys;
}
    2260:	80 2f       	mov	r24, r16
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	08 95       	ret

0000226c <keyboardInit>:

void keyboardInit()
{
	// key pins to input
	KEYBOARD_DDR |= ALLKEYS;
    226c:	84 b1       	in	r24, 0x04	; 4
    226e:	80 6f       	ori	r24, 0xF0	; 240
    2270:	84 b9       	out	0x04, r24	; 4
	// pull up resistors on
	KEYBOARD_PORT |= ALLKEYS;
    2272:	85 b1       	in	r24, 0x05	; 5
    2274:	80 6f       	ori	r24, 0xF0	; 240
    2276:	85 b9       	out	0x05, r24	; 5
    2278:	08 95       	ret

0000227a <sendByte>:
static uint8_t _screen[LCDWIDTH * LCDHEIGHT / 8];
static uint8_t _curx, _cury;
static fontdescriptor_t _font;

static void sendByte(uint8_t byte)
{
    227a:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 8; i; i--)
	{
		LCD_SCL = 0;
    227c:	5c 98       	cbi	0x0b, 4	; 11
		if (byte & 0x80)
    227e:	87 ff       	sbrs	r24, 7
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <sendByte+0xc>
			LCD_SDA = 1;
    2282:	59 9a       	sbi	0x0b, 1	; 11
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <sendByte+0xe>
		else
			LCD_SDA = 0;
    2286:	59 98       	cbi	0x0b, 1	; 11
		LCD_SCL = 1;
    2288:	5c 9a       	sbi	0x0b, 4	; 11
		byte <<= 1;
    228a:	88 0f       	add	r24, r24
    228c:	91 50       	subi	r25, 0x01	; 1
static uint8_t _curx, _cury;
static fontdescriptor_t _font;

static void sendByte(uint8_t byte)
{
	for (uint8_t i = 8; i; i--)
    228e:	b1 f7       	brne	.-20     	; 0x227c <sendByte+0x2>
		else
			LCD_SDA = 0;
		LCD_SCL = 1;
		byte <<= 1;
	}
}
    2290:	08 95       	ret

00002292 <sendCommand>:

static void sendCommand(uint8_t command)
{
	LCD_CS = 0;
    2292:	5d 98       	cbi	0x0b, 5	; 11
	LCD_A0 = 0;
    2294:	5f 98       	cbi	0x0b, 7	; 11
	sendByte(command);
    2296:	0e 94 3d 11 	call	0x227a	; 0x227a <sendByte>
	LCD_CS = 1;
    229a:	5d 9a       	sbi	0x0b, 5	; 11
    229c:	08 95       	ret

0000229e <lcdSetPos>:
	offset %= sizeof(_screen);
}

void lcdSetPos(uint8_t line, uint8_t column)
{
	_curx = column % LCDWIDTH;
    229e:	6f 77       	andi	r22, 0x7F	; 127
    22a0:	60 93 2e 01 	sts	0x012E, r22
	_cury = line * 8;
    22a4:	88 0f       	add	r24, r24
    22a6:	88 0f       	add	r24, r24
    22a8:	88 0f       	add	r24, r24
    22aa:	80 93 2d 01 	sts	0x012D, r24
    22ae:	08 95       	ret

000022b0 <lcdXY>:
}

void lcdXY(uint8_t x, uint8_t y)
{
	_curx = x;
    22b0:	80 93 2e 01 	sts	0x012E, r24
	_cury = y;
    22b4:	60 93 2d 01 	sts	0x012D, r22
    22b8:	08 95       	ret

000022ba <lcdSetPixel>:
}

void lcdSetPixel(uint8_t x, uint8_t y, uint8_t color)
{
	static const char PROGMEM masks[8] = {0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80};
	uint8_t *scr = _screen + x + (y / 8 * LCDWIDTH); 
    22ba:	96 2f       	mov	r25, r22
    22bc:	96 95       	lsr	r25
    22be:	96 95       	lsr	r25
    22c0:	96 95       	lsr	r25
    22c2:	a8 2f       	mov	r26, r24
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	80 e8       	ldi	r24, 0x80	; 128
    22c8:	98 9f       	mul	r25, r24
    22ca:	a0 0d       	add	r26, r0
    22cc:	b1 1d       	adc	r27, r1
    22ce:	11 24       	eor	r1, r1
    22d0:	a1 5d       	subi	r26, 0xD1	; 209
    22d2:	be 4f       	sbci	r27, 0xFE	; 254
	uint8_t mask = pgm_read_byte(&masks[y % 8]);
    22d4:	67 70       	andi	r22, 0x07	; 7
    22d6:	e6 2f       	mov	r30, r22
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	e4 58       	subi	r30, 0x84	; 132
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	e4 91       	lpm	r30, Z
	if ((_flags & REVERSED) ^ !color)
    22e0:	21 e0       	ldi	r18, 0x01	; 1
    22e2:	41 11       	cpse	r20, r1
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	80 91 2f 05 	lds	r24, 0x052F
    22ea:	81 70       	andi	r24, 0x01	; 1
    22ec:	9c 91       	ld	r25, X
    22ee:	28 17       	cp	r18, r24
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <lcdSetPixel+0x3e>
		*scr = *scr & ~mask;
    22f2:	e0 95       	com	r30
    22f4:	e9 23       	and	r30, r25
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <lcdSetPixel+0x40>
	else
		*scr = *scr | mask;
    22f8:	e9 2b       	or	r30, r25
    22fa:	ec 93       	st	X, r30
    22fc:	08 95       	ret

000022fe <lcdLine>:
	}
	
}

void lcdLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
    22fe:	8f 92       	push	r8
    2300:	9f 92       	push	r9
    2302:	bf 92       	push	r11
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	00 d0       	rcall	.+0      	; 0x2316 <lcdLine+0x18>
    2316:	1f 92       	push	r1
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	c8 2e       	mov	r12, r24
    231e:	d6 2e       	mov	r13, r22
    2320:	b4 2e       	mov	r11, r20
	// simple optimized bresenham algorithm
	int8_t dx =  abs(x1 - x0);
    2322:	e4 2f       	mov	r30, r20
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	e8 1b       	sub	r30, r24
    2328:	f1 09       	sbc	r31, r1
    232a:	f7 ff       	sbrs	r31, 7
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <lcdLine+0x36>
    232e:	f1 95       	neg	r31
    2330:	e1 95       	neg	r30
    2332:	f1 09       	sbc	r31, r1
    2334:	0e 2f       	mov	r16, r30
	int8_t sx = x0 < x1 ? 1 : -1;
    2336:	cb 14       	cp	r12, r11
    2338:	10 f4       	brcc	.+4      	; 0x233e <lcdLine+0x40>
    233a:	31 e0       	ldi	r19, 0x01	; 1
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <lcdLine+0x42>
    233e:	3f ef       	ldi	r19, 0xFF	; 255
	int8_t dy = -abs(y1 - y0);
    2340:	e2 2f       	mov	r30, r18
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	ed 19       	sub	r30, r13
    2346:	f1 09       	sbc	r31, r1
    2348:	f7 ff       	sbrs	r31, 7
    234a:	03 c0       	rjmp	.+6      	; 0x2352 <lcdLine+0x54>
    234c:	f1 95       	neg	r31
    234e:	e1 95       	neg	r30
    2350:	f1 09       	sbc	r31, r1
    2352:	ee 2e       	mov	r14, r30
    2354:	e1 94       	neg	r14
	int8_t sy = y0 < y1 ? 1 : -1; 
    2356:	d2 16       	cp	r13, r18
    2358:	10 f4       	brcc	.+4      	; 0x235e <lcdLine+0x60>
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <lcdLine+0x62>
    235e:	9f ef       	ldi	r25, 0xFF	; 255
	int16_t err = dx + dy, e2; /* error value e_xy */
    2360:	11 27       	eor	r17, r17
    2362:	07 fd       	sbrc	r16, 7
    2364:	10 95       	com	r17
    2366:	ff 24       	eor	r15, r15
    2368:	e7 fc       	sbrc	r14, 7
    236a:	f0 94       	com	r15
    236c:	48 01       	movw	r8, r16
    236e:	8e 0c       	add	r8, r14
    2370:	9f 1c       	adc	r9, r15
 
	for(;;)
	{
		lcdSetPixel(x0, y0, 1);
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	6d 2d       	mov	r22, r13
    2376:	8c 2d       	mov	r24, r12
    2378:	2b 83       	std	Y+3, r18	; 0x03
    237a:	39 83       	std	Y+1, r19	; 0x01
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
		
		if (x0 == x1 && y0 == y1)
    2382:	2b 81       	ldd	r18, Y+3	; 0x03
    2384:	39 81       	ldd	r19, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	cb 10       	cpse	r12, r11
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <lcdLine+0x92>
    238c:	d2 16       	cp	r13, r18
    238e:	81 f0       	breq	.+32     	; 0x23b0 <lcdLine+0xb2>
			break;
			
		e2 = 2 * err;
    2390:	f4 01       	movw	r30, r8
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
		if (e2 > dy) { err += dy; x0 += sx; } /* e_xy + e_x > 0 */
    2396:	ee 16       	cp	r14, r30
    2398:	ff 06       	cpc	r15, r31
    239a:	1c f4       	brge	.+6      	; 0x23a2 <lcdLine+0xa4>
    239c:	8e 0c       	add	r8, r14
    239e:	9f 1c       	adc	r9, r15
    23a0:	c3 0e       	add	r12, r19
		if (e2 < dx) { err += dx; y0 += sy; } /* e_xy + e_y < 0 */
    23a2:	e0 17       	cp	r30, r16
    23a4:	f1 07       	cpc	r31, r17
    23a6:	2c f7       	brge	.-54     	; 0x2372 <lcdLine+0x74>
    23a8:	80 0e       	add	r8, r16
    23aa:	91 1e       	adc	r9, r17
    23ac:	d9 0e       	add	r13, r25
    23ae:	e1 cf       	rjmp	.-62     	; 0x2372 <lcdLine+0x74>
	}
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	9f 90       	pop	r9
    23ca:	8f 90       	pop	r8
    23cc:	08 95       	ret

000023ce <lcdRectangle>:

void lcdRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color)
{
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	d8 2f       	mov	r29, r24
    23dc:	c6 2f       	mov	r28, r22
    23de:	14 2f       	mov	r17, r20
    23e0:	f2 2e       	mov	r15, r18
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
    23e2:	48 17       	cp	r20, r24
    23e4:	10 f4       	brcc	.+4      	; 0x23ea <lcdRectangle+0x1c>
    23e6:	d4 2f       	mov	r29, r20
    23e8:	18 2f       	mov	r17, r24
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
    23ea:	fc 16       	cp	r15, r28
    23ec:	18 f4       	brcc	.+6      	; 0x23f4 <lcdRectangle+0x26>
    23ee:	8c 2f       	mov	r24, r28
    23f0:	cf 2d       	mov	r28, r15
    23f2:	f8 2e       	mov	r15, r24
	for (a = x0; a <= x1; a++)
    23f4:	ed 2e       	mov	r14, r29
    23f6:	1e 15       	cp	r17, r14
    23f8:	60 f0       	brcs	.+24     	; 0x2412 <lcdRectangle+0x44>
	{
		lcdSetPixel(a, y0, color);
    23fa:	40 2f       	mov	r20, r16
    23fc:	6c 2f       	mov	r22, r28
    23fe:	8e 2d       	mov	r24, r14
    2400:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
		lcdSetPixel(a, y1, color);
    2404:	40 2f       	mov	r20, r16
    2406:	6f 2d       	mov	r22, r15
    2408:	8e 2d       	mov	r24, r14
    240a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
void lcdRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color)
{
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
	for (a = x0; a <= x1; a++)
    240e:	e3 94       	inc	r14
    2410:	f2 cf       	rjmp	.-28     	; 0x23f6 <lcdRectangle+0x28>
	{
		lcdSetPixel(a, y0, color);
		lcdSetPixel(a, y1, color);
	}
	for (a = y0; a <= y1; a++)
    2412:	fc 16       	cp	r15, r28
    2414:	60 f0       	brcs	.+24     	; 0x242e <lcdRectangle+0x60>
	{
		lcdSetPixel(x0, a, color);
    2416:	40 2f       	mov	r20, r16
    2418:	6c 2f       	mov	r22, r28
    241a:	8d 2f       	mov	r24, r29
    241c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
		lcdSetPixel(x1, a, color);
    2420:	40 2f       	mov	r20, r16
    2422:	6c 2f       	mov	r22, r28
    2424:	81 2f       	mov	r24, r17
    2426:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
	for (a = x0; a <= x1; a++)
	{
		lcdSetPixel(a, y0, color);
		lcdSetPixel(a, y1, color);
	}
	for (a = y0; a <= y1; a++)
    242a:	cf 5f       	subi	r28, 0xFF	; 255
    242c:	f2 cf       	rjmp	.-28     	; 0x2412 <lcdRectangle+0x44>
	{
		lcdSetPixel(x0, a, color);
		lcdSetPixel(x1, a, color);
	}
}
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	08 95       	ret

0000243c <lcdFillRectangle>:

void lcdFillRectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color)
{
    243c:	df 92       	push	r13
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	1f 92       	push	r1
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	d8 2e       	mov	r13, r24
    2452:	e6 2e       	mov	r14, r22
    2454:	14 2f       	mov	r17, r20
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
    2456:	48 17       	cp	r20, r24
    2458:	10 f4       	brcc	.+4      	; 0x245e <lcdFillRectangle+0x22>
    245a:	d4 2e       	mov	r13, r20
    245c:	18 2f       	mov	r17, r24
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
    245e:	2e 15       	cp	r18, r14
    2460:	28 f4       	brcc	.+10     	; 0x246c <lcdFillRectangle+0x30>
    2462:	8e 2d       	mov	r24, r14
    2464:	e2 2e       	mov	r14, r18
    2466:	28 2f       	mov	r18, r24
	for (a = y0; a <= y1; a++)
    2468:	01 c0       	rjmp	.+2      	; 0x246c <lcdFillRectangle+0x30>
    246a:	e3 94       	inc	r14
    246c:	2e 15       	cp	r18, r14
    246e:	60 f0       	brcs	.+24     	; 0x2488 <lcdFillRectangle+0x4c>
    2470:	fd 2c       	mov	r15, r13
		for(uint8_t i = x0; i <= x1; i++)
    2472:	1f 15       	cp	r17, r15
    2474:	d0 f3       	brcs	.-12     	; 0x246a <lcdFillRectangle+0x2e>
			lcdSetPixel(i, a, color);
    2476:	40 2f       	mov	r20, r16
    2478:	6e 2d       	mov	r22, r14
    247a:	8f 2d       	mov	r24, r15
    247c:	29 83       	std	Y+1, r18	; 0x01
    247e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
{
	uint8_t a;
	if (x0 > x1) { a = x0; x0 = x1; x1 = a;}
	if (y0 > y1) { a = y0; y0 = y1; y1 = a;}
	for (a = y0; a <= y1; a++)
		for(uint8_t i = x0; i <= x1; i++)
    2482:	f3 94       	inc	r15
    2484:	29 81       	ldd	r18, Y+1	; 0x01
    2486:	f5 cf       	rjmp	.-22     	; 0x2472 <lcdFillRectangle+0x36>
			lcdSetPixel(i, a, color);
}
    2488:	0f 90       	pop	r0
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	ef 90       	pop	r14
    2496:	df 90       	pop	r13
    2498:	08 95       	ret

0000249a <lcdClear>:

void lcdClear()
{
	memset(_screen, 0, sizeof(_screen));
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	94 e0       	ldi	r25, 0x04	; 4
    249e:	ef e2       	ldi	r30, 0x2F	; 47
    24a0:	f1 e0       	ldi	r31, 0x01	; 1
    24a2:	df 01       	movw	r26, r30
    24a4:	9c 01       	movw	r18, r24
    24a6:	1d 92       	st	X+, r1
    24a8:	21 50       	subi	r18, 0x01	; 1
    24aa:	30 40       	sbci	r19, 0x00	; 0
    24ac:	e1 f7       	brne	.-8      	; 0x24a6 <lcdClear+0xc>
	offset %= sizeof(_screen);
}

void lcdSetPos(uint8_t line, uint8_t column)
{
	_curx = column % LCDWIDTH;
    24ae:	10 92 2e 01 	sts	0x012E, r1
	_cury = line * 8;
    24b2:	10 92 2d 01 	sts	0x012D, r1

void lcdClear()
{
	memset(_screen, 0, sizeof(_screen));
	lcdSetPos(0, 0);
	_flags = 0;
    24b6:	10 92 2f 05 	sts	0x052F, r1
    24ba:	08 95       	ret

000024bc <lcdWriteSprite_P>:
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
    24bc:	af 92       	push	r10
    24be:	bf 92       	push	r11
    24c0:	cf 92       	push	r12
    24c2:	df 92       	push	r13
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	ec 01       	movw	r28, r24
    24d2:	a6 2e       	mov	r10, r22
    24d4:	c4 2e       	mov	r12, r20
    24d6:	b2 2e       	mov	r11, r18
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
    24d8:	d1 2c       	mov	r13, r1
	_flags = 0;
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
    24da:	e1 2c       	mov	r14, r1
			if (j % 8 == 0)
					b = pgm_read_byte(sprite++);
					
			if (mode == ROP_COPY)
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
    24dc:	04 2f       	mov	r16, r20
    24de:	10 e0       	ldi	r17, 0x00	; 0
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
    24e0:	da 14       	cp	r13, r10
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <lcdWriteSprite_P+0x2a>
    24e4:	4b c0       	rjmp	.+150    	; 0x257c <lcdWriteSprite_P+0xc0>
    24e6:	f1 2c       	mov	r15, r1
	{
		for (uint8_t j = 0; j < sizeY; j++)
    24e8:	fc 14       	cp	r15, r12
    24ea:	08 f0       	brcs	.+2      	; 0x24ee <lcdWriteSprite_P+0x32>
    24ec:	45 c0       	rjmp	.+138    	; 0x2578 <lcdWriteSprite_P+0xbc>
		{
			if (j % 8 == 0)
    24ee:	8f 2d       	mov	r24, r15
    24f0:	87 70       	andi	r24, 0x07	; 7
    24f2:	29 f4       	brne	.+10     	; 0x24fe <lcdWriteSprite_P+0x42>
					b = pgm_read_byte(sprite++);
    24f4:	ce 01       	movw	r24, r28
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	fe 01       	movw	r30, r28
    24fa:	e4 90       	lpm	r14, Z
    24fc:	ec 01       	movw	r28, r24
					
			if (mode == ROP_COPY)
    24fe:	b1 10       	cpse	r11, r1
    2500:	2a c0       	rjmp	.+84     	; 0x2556 <lcdWriteSprite_P+0x9a>
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
    2502:	60 91 2d 01 	lds	r22, 0x012D
    2506:	96 2f       	mov	r25, r22
    2508:	97 70       	andi	r25, 0x07	; 7
    250a:	6f 0d       	add	r22, r15
    250c:	80 91 2e 01 	lds	r24, 0x012E
    2510:	91 11       	cpse	r25, r1
    2512:	1e c0       	rjmp	.+60     	; 0x2550 <lcdWriteSprite_P+0x94>
    2514:	f8 01       	movw	r30, r16
    2516:	ef 19       	sub	r30, r15
    2518:	f1 09       	sbc	r31, r1
    251a:	38 97       	sbiw	r30, 0x08	; 8
    251c:	cc f0       	brlt	.+50     	; 0x2550 <lcdWriteSprite_P+0x94>
		*scr = *scr | mask;
}

static void lcdSetByte(uint8_t x, uint8_t y, uint8_t b)
{
	uint8_t *scr = _screen + x + (y / 8 * LCDWIDTH); 
    251e:	66 95       	lsr	r22
    2520:	66 95       	lsr	r22
    2522:	66 95       	lsr	r22
					
			if (mode == ROP_COPY)
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
				{
					lcdSetByte(_curx + i, _cury + j, b);
    2524:	8d 0d       	add	r24, r13
		*scr = *scr | mask;
}

static void lcdSetByte(uint8_t x, uint8_t y, uint8_t b)
{
	uint8_t *scr = _screen + x + (y / 8 * LCDWIDTH); 
    2526:	a8 2f       	mov	r26, r24
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	f0 e8       	ldi	r31, 0x80	; 128
    252c:	6f 9f       	mul	r22, r31
    252e:	a0 0d       	add	r26, r0
    2530:	b1 1d       	adc	r27, r1
    2532:	11 24       	eor	r1, r1
    2534:	a1 5d       	subi	r26, 0xD1	; 209
    2536:	be 4f       	sbci	r27, 0xFE	; 254
	if (_flags & REVERSED)
    2538:	80 91 2f 05 	lds	r24, 0x052F
    253c:	80 ff       	sbrs	r24, 0
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <lcdWriteSprite_P+0x8c>
		*scr = ~b;
    2540:	8e 2d       	mov	r24, r14
    2542:	80 95       	com	r24
    2544:	8c 93       	st	X, r24
    2546:	01 c0       	rjmp	.+2      	; 0x254a <lcdWriteSprite_P+0x8e>
	else
		*scr = b;
    2548:	ec 92       	st	X, r14
			if (mode == ROP_COPY)
			{
				if ((_cury % 8 == 0) && (sizeY - j >= 8))
				{
					lcdSetByte(_curx + i, _cury + j, b);
					j += 7; // just +7 b/c the loop increments anyway
    254a:	87 e0       	ldi	r24, 0x07	; 7
    254c:	f8 0e       	add	r15, r24
    254e:	11 c0       	rjmp	.+34     	; 0x2572 <lcdWriteSprite_P+0xb6>
				}
				else
					lcdSetPixel(_curx + i, _cury + j, b & 0x01);
    2550:	4e 2d       	mov	r20, r14
    2552:	41 70       	andi	r20, 0x01	; 1
    2554:	0b c0       	rjmp	.+22     	; 0x256c <lcdWriteSprite_P+0xb0>
			}				
			else if (mode == ROP_PAINT)
    2556:	e1 e0       	ldi	r30, 0x01	; 1
    2558:	be 12       	cpse	r11, r30
    255a:	0b c0       	rjmp	.+22     	; 0x2572 <lcdWriteSprite_P+0xb6>
			{
				if (b & 0x01)
    255c:	e0 fe       	sbrs	r14, 0
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <lcdWriteSprite_P+0xb6>
					lcdSetPixel(_curx + i, _cury + j, 1);
    2560:	60 91 2d 01 	lds	r22, 0x012D
    2564:	6f 0d       	add	r22, r15
    2566:	80 91 2e 01 	lds	r24, 0x012E
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	8d 0d       	add	r24, r13
    256e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <lcdSetPixel>
			}			
			b >>= 1;
    2572:	e6 94       	lsr	r14
void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
	{
		for (uint8_t j = 0; j < sizeY; j++)
    2574:	f3 94       	inc	r15
    2576:	b8 cf       	rjmp	.-144    	; 0x24e8 <lcdWriteSprite_P+0x2c>
}

void lcdWriteSprite_P(PGM_P sprite, uint8_t sizeX, uint8_t sizeY, uint8_t mode)
{
	uint8_t b = 0;
	for (uint8_t i = 0; i < sizeX; i++)
    2578:	d3 94       	inc	r13
    257a:	b2 cf       	rjmp	.-156    	; 0x24e0 <lcdWriteSprite_P+0x24>
					lcdSetPixel(_curx + i, _cury + j, 1);
			}			
			b >>= 1;
		}
	}	
}
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	bf 90       	pop	r11
    258e:	af 90       	pop	r10
    2590:	08 95       	ret

00002592 <lcdWriteGlyph_P>:

void lcdWriteGlyph_P(const glyph_t *glyph, uint8_t mode)
{
    2592:	26 2f       	mov	r18, r22
	uint8_t sizeX = pgm_read_byte(&glyph->sizeX);
    2594:	fc 01       	movw	r30, r24
    2596:	64 91       	lpm	r22, Z
	uint8_t sizeY = pgm_read_byte(&glyph->sizeY);
    2598:	31 96       	adiw	r30, 0x01	; 1
    259a:	44 91       	lpm	r20, Z
	lcdWriteSprite_P((PGM_P)&glyph->glyph, sizeX, sizeY, mode);
    259c:	02 96       	adiw	r24, 0x02	; 2
    259e:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <lcdWriteSprite_P>

000025a2 <lcdWriteChar>:
}

void lcdWriteChar(char c)
{
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <lcdWriteChar+0x6>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	40 91 2a 01 	lds	r20, 0x012A
	if (c == '\n')
    25b0:	8a 30       	cpi	r24, 0x0A	; 10
    25b2:	41 f4       	brne	.+16     	; 0x25c4 <lcdWriteChar+0x22>
	{
		_cury += _font.sizeY;
    25b4:	80 91 2d 01 	lds	r24, 0x012D
    25b8:	84 0f       	add	r24, r20
    25ba:	80 93 2d 01 	sts	0x012D, r24
		_curx = 0;
    25be:	10 92 2e 01 	sts	0x012E, r1
    25c2:	15 c0       	rjmp	.+42     	; 0x25ee <lcdWriteChar+0x4c>
	}
	else
	{
		lcdWriteSprite_P(_font.selector(c), _font.sizeX, _font.sizeY, ROP_COPY);
    25c4:	60 91 29 01 	lds	r22, 0x0129
    25c8:	e0 91 2b 01 	lds	r30, 0x012B
    25cc:	f0 91 2c 01 	lds	r31, 0x012C
    25d0:	4a 83       	std	Y+2, r20	; 0x02
    25d2:	69 83       	std	Y+1, r22	; 0x01
    25d4:	09 95       	icall
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	4a 81       	ldd	r20, Y+2	; 0x02
    25da:	69 81       	ldd	r22, Y+1	; 0x01
    25dc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <lcdWriteSprite_P>
		_curx += _font.sizeX;
    25e0:	80 91 2e 01 	lds	r24, 0x012E
    25e4:	90 91 29 01 	lds	r25, 0x0129
    25e8:	89 0f       	add	r24, r25
    25ea:	80 93 2e 01 	sts	0x012E, r24
	}
}
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <lcdWriteString>:

void lcdWriteString(char *s)
{
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	ec 01       	movw	r28, r24
	char c;
	while ((c = *s++))
    25fe:	89 91       	ld	r24, Y+
    2600:	88 23       	and	r24, r24
    2602:	19 f0       	breq	.+6      	; 0x260a <lcdWriteString+0x12>
		lcdWriteChar(c);
    2604:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
    2608:	fa cf       	rjmp	.-12     	; 0x25fe <lcdWriteString+0x6>
}
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <lcdWriteString_P>:

void lcdWriteString_P(PGM_P s)
{
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
	char c;
	if (s == NULL) return;
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	51 f0       	breq	.+20     	; 0x262c <lcdWriteString_P+0x1c>
    2618:	fc 01       	movw	r30, r24
	while ((c = pgm_read_byte(s++)))
    261a:	84 91       	lpm	r24, Z
    261c:	ef 01       	movw	r28, r30
    261e:	21 96       	adiw	r28, 0x01	; 1
    2620:	88 23       	and	r24, r24
    2622:	21 f0       	breq	.+8      	; 0x262c <lcdWriteString_P+0x1c>
		lcdWriteChar(c);
    2624:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
    2628:	fe 01       	movw	r30, r28
    262a:	f7 cf       	rjmp	.-18     	; 0x261a <lcdWriteString_P+0xa>
}
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	08 95       	ret

00002632 <lcdReverse>:

void lcdReverse(uint8_t reversed)
{
    2632:	90 91 2f 05 	lds	r25, 0x052F
	if (reversed)
    2636:	88 23       	and	r24, r24
    2638:	11 f0       	breq	.+4      	; 0x263e <lcdReverse+0xc>
		_flags |= REVERSED;
    263a:	91 60       	ori	r25, 0x01	; 1
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <lcdReverse+0xe>
	else
		_flags &= ~REVERSED;
    263e:	9e 7f       	andi	r25, 0xFE	; 254
    2640:	90 93 2f 05 	sts	0x052F, r25
    2644:	08 95       	ret

00002646 <lcdEnable>:
}

void lcdEnable()
{
	// reset timer0 to avoid re-entrant call of ISR b/c it is non blocking
	TCNT0 = 0;
    2646:	16 bc       	out	0x26, r1	; 38
	TIFR0 = _BV(TOV0);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	85 bb       	out	0x15, r24	; 21
	TIMSK0 |= _BV(TOIE0);	// enable interrupt on overflow
    264c:	ee e6       	ldi	r30, 0x6E	; 110
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	81 60       	ori	r24, 0x01	; 1
    2654:	80 83       	st	Z, r24
    2656:	08 95       	ret

00002658 <lcdDisable>:
}

void lcdDisable()
{
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
	WAITMS(110);
    265c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    2660:	ec 01       	movw	r28, r24
    2662:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    2666:	8c 1b       	sub	r24, r28
    2668:	9d 0b       	sbc	r25, r29
    266a:	8e 36       	cpi	r24, 0x6E	; 110
    266c:	91 05       	cpc	r25, r1
    266e:	c8 f3       	brcs	.-14     	; 0x2662 <lcdDisable+0xa>
	TIMSK0 &= ~_BV(TOIE0);	// disable overflow interrupt
    2670:	80 91 6e 00 	lds	r24, 0x006E
    2674:	8e 7f       	andi	r24, 0xFE	; 254
    2676:	80 93 6e 00 	sts	0x006E, r24
}
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <lcdSelectFont>:

void lcdSelectFont(const fontdescriptor_t *font)
{
	if (font == NULL)
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	11 f4       	brne	.+4      	; 0x2688 <lcdSelectFont+0x8>
		font = &font6x8;
    2684:	80 ea       	ldi	r24, 0xA0	; 160
    2686:	97 e0       	ldi	r25, 0x07	; 7
	memcpy_P(&_font, font, sizeof(_font));
    2688:	44 e0       	ldi	r20, 0x04	; 4
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	bc 01       	movw	r22, r24
    268e:	89 e2       	ldi	r24, 0x29	; 41
    2690:	91 e0       	ldi	r25, 0x01	; 1
    2692:	0c 94 24 27 	jmp	0x4e48	; 0x4e48 <memcpy_P>

00002696 <lcdInit>:
	CMD_DISPLAY_ON,				// Display on
	0x00,						// (terminator)
};

void lcdInit()
{
    2696:	cf 92       	push	r12
    2698:	df 92       	push	r13
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
	// pins
	LCD_CS_DIR = OUTPUT;
    269e:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RST_DIR = OUTPUT;
    26a0:	56 9a       	sbi	0x0a, 6	; 10
	LCD_A0_DIR = OUTPUT;
    26a2:	57 9a       	sbi	0x0a, 7	; 10
	LCD_SCL_DIR = OUTPUT;
    26a4:	54 9a       	sbi	0x0a, 4	; 10
	LCD_SDA_DIR = OUTPUT;
    26a6:	51 9a       	sbi	0x0a, 1	; 10

	// init display
	LCD_RST = 0;
    26a8:	5e 98       	cbi	0x0b, 6	; 11
	WAITUS(2000);
    26aa:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    26ae:	6b 01       	movw	r12, r22
    26b0:	7c 01       	movw	r14, r24
    26b2:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    26b6:	6c 19       	sub	r22, r12
    26b8:	7d 09       	sbc	r23, r13
    26ba:	8e 09       	sbc	r24, r14
    26bc:	9f 09       	sbc	r25, r15
    26be:	60 34       	cpi	r22, 0x40	; 64
    26c0:	7c 49       	sbci	r23, 0x9C	; 156
    26c2:	81 05       	cpc	r24, r1
    26c4:	91 05       	cpc	r25, r1
    26c6:	a8 f3       	brcs	.-22     	; 0x26b2 <lcdInit+0x1c>
	LCD_RST = 1;
    26c8:	5e 9a       	sbi	0x0b, 6	; 11
	WAITUS(2000);
    26ca:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    26ce:	6b 01       	movw	r12, r22
    26d0:	7c 01       	movw	r14, r24
    26d2:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    26d6:	6c 19       	sub	r22, r12
    26d8:	7d 09       	sbc	r23, r13
    26da:	8e 09       	sbc	r24, r14
    26dc:	9f 09       	sbc	r25, r15
    26de:	60 34       	cpi	r22, 0x40	; 64
    26e0:	7c 49       	sbci	r23, 0x9C	; 156
    26e2:	81 05       	cpc	r24, r1
    26e4:	91 05       	cpc	r25, r1
    26e6:	a8 f3       	brcs	.-22     	; 0x26d2 <lcdInit+0x3c>
    26e8:	e4 e8       	ldi	r30, 0x84	; 132
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
	
	const unsigned char* ptr = _initSeq;
	uint8_t c;
	while ((c = pgm_read_byte(ptr++)))
    26ec:	84 91       	lpm	r24, Z
    26ee:	7f 01       	movw	r14, r30
    26f0:	9f ef       	ldi	r25, 0xFF	; 255
    26f2:	e9 1a       	sub	r14, r25
    26f4:	f9 0a       	sbc	r15, r25
    26f6:	88 23       	and	r24, r24
    26f8:	21 f0       	breq	.+8      	; 0x2702 <lcdInit+0x6c>
		sendCommand(c);
    26fa:	0e 94 49 11 	call	0x2292	; 0x2292 <sendCommand>
    26fe:	f7 01       	movw	r30, r14
    2700:	f5 cf       	rjmp	.-22     	; 0x26ec <lcdInit+0x56>
	
	lcdSelectFont(NULL);		// select default font
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
	
	// use timer0 with clk/8 and overflow
	// at 256 as interrupt based output of data bytes
	// ie every 1024us one byte is send to display. whole screen takes about 105ms
	//PRR0 |= PRTIM0;			// enable hardware
	TCCR0B = _BV(CS01);		// clk/8
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	85 bd       	out	0x25, r24	; 37
	lcdEnable();
}
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
	// use timer0 with clk/8 and overflow
	// at 256 as interrupt based output of data bytes
	// ie every 1024us one byte is send to display. whole screen takes about 105ms
	//PRR0 |= PRTIM0;			// enable hardware
	TCCR0B = _BV(CS01);		// clk/8
	lcdEnable();
    2716:	0c 94 23 13 	jmp	0x2646	; 0x2646 <lcdEnable>

0000271a <doOutput>:
	else
		return OFF;
}

static uint16_t doOutput(uint8_t index, uint8_t loActive)
{
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
	if (PWM[index] && Config.Mixer[index].Flags && (Config.Mixer[index].IsMotor || loActive || Config.Mixer[index].IsHiRate))
    271e:	e8 2f       	mov	r30, r24
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	9f 01       	movw	r18, r30
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	d9 01       	movw	r26, r18
    272a:	a8 5c       	subi	r26, 0xC8	; 200
    272c:	ba 4f       	sbci	r27, 0xFA	; 250
    272e:	8d 91       	ld	r24, X+
    2730:	9c 91       	ld	r25, X
    2732:	89 2b       	or	r24, r25
    2734:	29 f1       	breq	.+74     	; 0x2780 <doOutput+0x66>
    2736:	86 e0       	ldi	r24, 0x06	; 6
    2738:	8e 9f       	mul	r24, r30
    273a:	d0 01       	movw	r26, r0
    273c:	8f 9f       	mul	r24, r31
    273e:	b0 0d       	add	r27, r0
    2740:	11 24       	eor	r1, r1
    2742:	ed 01       	movw	r28, r26
    2744:	ca 54       	subi	r28, 0x4A	; 74
    2746:	d9 4f       	sbci	r29, 0xF9	; 249
    2748:	88 81       	ld	r24, Y
    274a:	88 23       	and	r24, r24
    274c:	c9 f0       	breq	.+50     	; 0x2780 <doOutput+0x66>
    274e:	80 fd       	sbrc	r24, 0
    2750:	04 c0       	rjmp	.+8      	; 0x275a <doOutput+0x40>
    2752:	61 11       	cpse	r22, r1
    2754:	02 c0       	rjmp	.+4      	; 0x275a <doOutput+0x40>
    2756:	82 ff       	sbrs	r24, 2
    2758:	13 c0       	rjmp	.+38     	; 0x2780 <doOutput+0x66>
	{
		cli();
    275a:	f8 94       	cli
		OUT_PORT |= pgm_read_byte(&masktable[index]);
    275c:	88 b1       	in	r24, 0x08	; 8
    275e:	e0 57       	subi	r30, 0x70	; 112
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	e4 91       	lpm	r30, Z
    2764:	e8 2b       	or	r30, r24
    2766:	e8 b9       	out	0x08, r30	; 8
		return (uint16_t)(TCNT1 + (PWM[index]));
    2768:	80 91 84 00 	lds	r24, 0x0084
    276c:	90 91 85 00 	lds	r25, 0x0085
    2770:	f9 01       	movw	r30, r18
    2772:	e8 5c       	subi	r30, 0xC8	; 200
    2774:	fa 4f       	sbci	r31, 0xFA	; 250
    2776:	20 81       	ld	r18, Z
    2778:	31 81       	ldd	r19, Z+1	; 0x01
    277a:	82 0f       	add	r24, r18
    277c:	93 1f       	adc	r25, r19
    277e:	06 c0       	rjmp	.+12     	; 0x278c <doOutput+0x72>
	}
	else
		return (uint16_t)(TCNT1 + MICROTOTICKS(100));	
    2780:	80 91 84 00 	lds	r24, 0x0084
    2784:	90 91 85 00 	lds	r25, 0x0085
    2788:	80 53       	subi	r24, 0x30	; 48
    278a:	98 4f       	sbci	r25, 0xF8	; 248
}
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	08 95       	ret

00002792 <pwmInit>:
}


void pwmInit()
{
	OUT_DDR = 0xFF;			// all pins to output mode
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	87 b9       	out	0x07, r24	; 7
	OUT_PORT = 0x00;		// all OFF
    2796:	18 b8       	out	0x08, r1	; 8
    2798:	08 95       	ret

0000279a <pwmWrite>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    279a:	f8 94       	cli
}

void pwmWrite(uint8_t channel, uint16_t value)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
		PWM[channel] = (uint16_t) MICROTOTICKS(value);
    279c:	e8 2f       	mov	r30, r24
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	e8 5c       	subi	r30, 0xC8	; 200
    27a6:	fa 4f       	sbci	r31, 0xFA	; 250
    27a8:	24 e1       	ldi	r18, 0x14	; 20
    27aa:	26 9f       	mul	r18, r22
    27ac:	c0 01       	movw	r24, r0
    27ae:	27 9f       	mul	r18, r23
    27b0:	90 0d       	add	r25, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    27b8:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    27ba:	08 95       	ret

000027bc <pwmEnable>:
}

void pwmEnable()
{
	OCR1A = TCNT1;
    27bc:	e4 e8       	ldi	r30, 0x84	; 132
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	90 93 89 00 	sts	0x0089, r25
    27c8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = TCNT1;
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	90 93 8b 00 	sts	0x008B, r25
    27d4:	80 93 8a 00 	sts	0x008A, r24
	TIFR1 |= _BV(OCF1A) | _BV(OCF1B);		// clear OCA and OCB interrupt
    27d8:	86 b3       	in	r24, 0x16	; 22
    27da:	86 60       	ori	r24, 0x06	; 6
    27dc:	86 bb       	out	0x16, r24	; 22
	TIMSK1 |= _BV(OCIE1A) | _BV(OCIE1B);	// enable OCA and OCB interrupt on timer1
    27de:	ef e6       	ldi	r30, 0x6F	; 111
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	86 60       	ori	r24, 0x06	; 6
    27e6:	80 83       	st	Z, r24
    27e8:	08 95       	ret

000027ea <rxInit>:

void rxInit(uint8_t mode)
{
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    27f0:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27f2:	f8 94       	cli
	{
		if (mode != RX_MODE_PWM)
    27f4:	88 23       	and	r24, r24
    27f6:	79 f0       	breq	.+30     	; 0x2816 <rxInit+0x2c>
		{
			serialInit();
    27f8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <serialInit>
			// set pin direction
			RX_AIL_DIR = INPUT;
    27fc:	53 98       	cbi	0x0a, 3	; 10

			// enable interrupt INT2 for CPPM signal on PB2
			EICRA  = _BV(ISC21);				// falling edge on PB2 (INT2) 
    27fe:	80 e2       	ldi	r24, 0x20	; 32
    2800:	80 93 69 00 	sts	0x0069, r24
			EIFR   = _BV(INTF0) | _BV(INTF1) | _BV(INTF2);	// clear interrupts
    2804:	87 e0       	ldi	r24, 0x07	; 7
    2806:	8c bb       	out	0x1c, r24	; 28
			EIMSK  = _BV(INT2);					// enable interrupt for INT2
    2808:	84 e0       	ldi	r24, 0x04	; 4
    280a:	8d bb       	out	0x1d, r24	; 29
			PCICR  = 0;							// disable all PCIs
    280c:	10 92 68 00 	sts	0x0068, r1
			PCIFR  = _BV(PCIF1) | _BV(PCIF3);	// clear interrupts
    2810:	8a e0       	ldi	r24, 0x0A	; 10
    2812:	8b bb       	out	0x1b, r24	; 27
    2814:	19 c0       	rjmp	.+50     	; 0x2848 <rxInit+0x5e>
		}
		else
		{
			serialTerminate();
    2816:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <serialTerminate>
			// set pins direction
			RX_AIL_DIR = INPUT;
    281a:	53 98       	cbi	0x0a, 3	; 10
			RX_ELE_DIR = INPUT;
    281c:	52 98       	cbi	0x0a, 2	; 10
			RX_THR_DIR = INPUT;
    281e:	50 98       	cbi	0x0a, 0	; 10
			RX_RUD_DIR = INPUT;
    2820:	22 98       	cbi	0x04, 2	; 4
			RX_AUX_DIR = INPUT;
    2822:	20 98       	cbi	0x04, 0	; 4
			
			// enable interrupts
			EICRA  = _BV(ISC00) | _BV(ISC10) | _BV(ISC20);	// any edge on INT0, INT1 and INT2
    2824:	85 e1       	ldi	r24, 0x15	; 21
    2826:	80 93 69 00 	sts	0x0069, r24
			EIFR   = _BV(INTF0) | _BV(INTF1) | _BV(INTF2);	// clear interrupts
    282a:	87 e0       	ldi	r24, 0x07	; 7
    282c:	8c bb       	out	0x1c, r24	; 28
			EIMSK  = _BV(INT0)  | _BV(INT1)  | _BV(INT2);	// enable interrupt for INT0, INT1 and INT2
    282e:	8d bb       	out	0x1d, r24	; 29
			PCMSK1 = _BV(PCINT8);							// enable PCINT8 (AUX) -> PCI1
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 = _BV(PCINT24);							// enable PCINT24 (THR) -> PCI3
    2836:	80 93 73 00 	sts	0x0073, r24
			PCIFR  = _BV(PCIF1) | _BV(PCIF3);				// clear interrupts
    283a:	8a e0       	ldi	r24, 0x0A	; 10
    283c:	8b bb       	out	0x1b, r24	; 27
			PCICR |= _BV(PCIE1) | _BV(PCIE3);				// enable PCI1 and PCI3
    283e:	90 91 68 00 	lds	r25, 0x0068
    2842:	9a 60       	ori	r25, 0x0A	; 10
    2844:	90 93 68 00 	sts	0x0068, r25
		}	
		_mode = mode;	
    2848:	c0 93 5d 05 	sts	0x055D, r28
		RX_good = 0;
    284c:	10 92 a5 05 	sts	0x05A5, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2850:	df bf       	out	0x3f, r29	; 63
	}
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <rxRead>:

void rxRead()
{
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
	uint16_t b;
	uint8_t index;
	
	EVERYMS(50)
    2864:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    2868:	60 91 5c 05 	lds	r22, 0x055C
    286c:	70 91 a5 05 	lds	r23, 0x05A5
    2870:	20 91 48 05 	lds	r18, 0x0548
    2874:	30 91 49 05 	lds	r19, 0x0549
    2878:	ac 01       	movw	r20, r24
    287a:	42 1b       	sub	r20, r18
    287c:	53 0b       	sbc	r21, r19
    287e:	42 33       	cpi	r20, 0x32	; 50
    2880:	51 05       	cpc	r21, r1
    2882:	20 f0       	brcs	.+8      	; 0x288c <rxRead+0x34>
	{
		RX_good = _RX_good;
    2884:	76 2f       	mov	r23, r22
void rxRead()
{
	uint16_t b;
	uint8_t index;
	
	EVERYMS(50)
    2886:	9c 01       	movw	r18, r24
	{
		RX_good = _RX_good;
		_RX_good = 0;
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	f6 cf       	rjmp	.-20     	; 0x2878 <rxRead+0x20>
    288c:	60 93 5c 05 	sts	0x055C, r22
    2890:	70 93 a5 05 	sts	0x05A5, r23
    2894:	30 93 49 05 	sts	0x0549, r19
    2898:	20 93 48 05 	sts	0x0548, r18
    289c:	0a e7       	ldi	r16, 0x7A	; 122
    289e:	16 e0       	ldi	r17, 0x06	; 6
void rxRead()
{
	uint16_t b;
	uint8_t index;
	
	EVERYMS(50)
    28a0:	e8 01       	movw	r28, r16
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
			index = Config.RX_chmap[i] - 1;
			
		ATOMIC_BLOCK(ATOMIC_FORCEON)
			b = RX_isr[index];

		b = TICKSTOMICRO(b);
    28a6:	64 e1       	ldi	r22, 0x14	; 20
    28a8:	e6 2e       	mov	r14, r22
    28aa:	f1 2c       	mov	r15, r1
    28ac:	ec 2f       	mov	r30, r28
    28ae:	e0 1b       	sub	r30, r16
		_RX_good = 0;
	}	
	
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
	{
		if (_mode == RX_MODE_PWM)
    28b0:	80 91 5d 05 	lds	r24, 0x055D
    28b4:	88 23       	and	r24, r24
    28b6:	11 f0       	breq	.+4      	; 0x28bc <rxRead+0x64>
			index = i;
		else
			index = Config.RX_chmap[i] - 1;
    28b8:	e8 81       	ld	r30, Y
    28ba:	e1 50       	subi	r30, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28bc:	f8 94       	cli
			
		ATOMIC_BLOCK(ATOMIC_FORCEON)
			b = RX_isr[index];
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	ee 0f       	add	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	e2 5a       	subi	r30, 0xA2	; 162
    28c6:	fa 4f       	sbci	r31, 0xFA	; 250
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    28cc:	78 94       	sei

		b = TICKSTOMICRO(b);
    28ce:	b7 01       	movw	r22, r14
    28d0:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__udivmodhi4>
		
		#ifdef SIMULATOR
		b = PWM_MID;
		#endif
		
		if (b >= PWM_MIN && b <= PWM_MAX)
    28d4:	ab 01       	movw	r20, r22
    28d6:	44 58       	subi	r20, 0x84	; 132
    28d8:	53 40       	sbci	r21, 0x03	; 3
    28da:	41 3b       	cpi	r20, 0xB1	; 177
    28dc:	54 40       	sbci	r21, 0x04	; 4
    28de:	b0 f4       	brcc	.+44     	; 0x290c <rxRead+0xb4>
    28e0:	f9 01       	movw	r30, r18
    28e2:	ea 54       	subi	r30, 0x4A	; 74
    28e4:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			RX_raw[i] = b; 
    28e6:	71 83       	std	Z+1, r23	; 0x01
    28e8:	60 83       	st	Z, r22
    28ea:	f9 01       	movw	r30, r18
    28ec:	e7 59       	subi	r30, 0x97	; 151
    28ee:	f9 4f       	sbci	r31, 0xF9	; 249
			RX[i] = (int16_t)(RX_raw[i] - Config.RX_zero[i]) >> 2;
    28f0:	41 81       	ldd	r20, Z+1	; 0x01
    28f2:	52 81       	ldd	r21, Z+2	; 0x02
    28f4:	cb 01       	movw	r24, r22
    28f6:	84 1b       	sub	r24, r20
    28f8:	95 0b       	sbc	r25, r21
    28fa:	95 95       	asr	r25
    28fc:	87 95       	ror	r24
    28fe:	95 95       	asr	r25
    2900:	87 95       	ror	r24
    2902:	f9 01       	movw	r30, r18
    2904:	ea 55       	subi	r30, 0x5A	; 90
    2906:	fa 4f       	sbci	r31, 0xFA	; 250
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
    290c:	2e 5f       	subi	r18, 0xFE	; 254
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	21 96       	adiw	r28, 0x01	; 1
	{
		RX_good = _RX_good;
		_RX_good = 0;
	}	
	
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
    2912:	20 31       	cpi	r18, 0x10	; 16
    2914:	31 05       	cpc	r19, r1
    2916:	51 f6       	brne	.-108    	; 0x28ac <rxRead+0x54>
			RX[i] = (int16_t)(RX_raw[i] - Config.RX_zero[i]) >> 2;
		}
	}
	
	// divide throttle by 2
	RX[THR]	>>= 1;
    2918:	80 91 ac 05 	lds	r24, 0x05AC
    291c:	90 91 ad 05 	lds	r25, 0x05AD
    2920:	95 95       	asr	r25
    2922:	87 95       	ror	r24
    2924:	90 93 ad 05 	sts	0x05AD, r25
    2928:	80 93 ac 05 	sts	0x05AC, r24
}
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	08 95       	ret

0000293a <rxCalibrate>:

uint8_t rxCalibrate()
{
	rxRead();
    293a:	0e 94 2c 14 	call	0x2858	; 0x2858 <rxRead>
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
	{
		if (i == THR)
		{
			if (RX_raw[THR] < PWM_LOW - 50 || RX_raw[THR] > PWM_LOW + 50)
    293e:	20 91 bc 05 	lds	r18, 0x05BC
    2942:	30 91 bd 05 	lds	r19, 0x05BD
    2946:	2a 51       	subi	r18, 0x1A	; 26
    2948:	34 40       	sbci	r19, 0x04	; 4
    294a:	e6 eb       	ldi	r30, 0xB6	; 182
    294c:	f5 e0       	ldi	r31, 0x05	; 5
}

uint8_t rxCalibrate()
{
	rxRead();
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
    294e:	40 e0       	ldi	r20, 0x00	; 0
	{
		if (i == THR)
    2950:	43 30       	cpi	r20, 0x03	; 3
    2952:	21 f4       	brne	.+8      	; 0x295c <rxCalibrate+0x22>
		{
			if (RX_raw[THR] < PWM_LOW - 50 || RX_raw[THR] > PWM_LOW + 50)
    2954:	25 36       	cpi	r18, 0x65	; 101
    2956:	31 05       	cpc	r19, r1
    2958:	50 f0       	brcs	.+20     	; 0x296e <rxCalibrate+0x34>
    295a:	18 c0       	rjmp	.+48     	; 0x298c <rxCalibrate+0x52>
				return 0;
		}
		else if ((RX_raw[i] != 0) && (RX_raw[i] < PWM_MID - 50 || RX_raw[i] > PWM_MID + 50))
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	29 f0       	breq	.+10     	; 0x296e <rxCalibrate+0x34>
    2964:	8e 5b       	subi	r24, 0xBE	; 190
    2966:	95 40       	sbci	r25, 0x05	; 5
    2968:	85 36       	cpi	r24, 0x65	; 101
    296a:	91 05       	cpc	r25, r1
    296c:	78 f4       	brcc	.+30     	; 0x298c <rxCalibrate+0x52>
}

uint8_t rxCalibrate()
{
	rxRead();
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
    296e:	4f 5f       	subi	r20, 0xFF	; 255
    2970:	32 96       	adiw	r30, 0x02	; 2
    2972:	48 30       	cpi	r20, 0x08	; 8
    2974:	69 f7       	brne	.-38     	; 0x2950 <rxCalibrate+0x16>
				return 0;
		}
		else if ((RX_raw[i] != 0) && (RX_raw[i] < PWM_MID - 50 || RX_raw[i] > PWM_MID + 50))
			return 0;
	}
	memcpy(&Config.RX_zero, &RX_raw, sizeof(Config.RX_zero));
    2976:	80 e1       	ldi	r24, 0x10	; 16
    2978:	e6 eb       	ldi	r30, 0xB6	; 182
    297a:	f5 e0       	ldi	r31, 0x05	; 5
    297c:	aa e6       	ldi	r26, 0x6A	; 106
    297e:	b6 e0       	ldi	r27, 0x06	; 6
    2980:	01 90       	ld	r0, Z+
    2982:	0d 92       	st	X+, r0
    2984:	8a 95       	dec	r24
    2986:	e1 f7       	brne	.-8      	; 0x2980 <rxCalibrate+0x46>
	return 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	08 95       	ret
	for (uint8_t i = 0; i < RX_CHANNELS; i++)
	{
		if (i == THR)
		{
			if (RX_raw[THR] < PWM_LOW - 50 || RX_raw[THR] > PWM_LOW + 50)
				return 0;
    298c:	80 e0       	ldi	r24, 0x00	; 0
		else if ((RX_raw[i] != 0) && (RX_raw[i] < PWM_MID - 50 || RX_raw[i] > PWM_MID + 50))
			return 0;
	}
	memcpy(&Config.RX_zero, &RX_raw, sizeof(Config.RX_zero));
	return 1;
    298e:	08 95       	ret

00002990 <Enqueue>:
{
	return (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE == buf->ReadPtr;
}

static void Enqueue(struct FifoBuffer* buf, uint8_t c)
{
    2990:	fc 01       	movw	r30, r24
static noinit struct FifoBuffer TX_Buf;
static noinit struct FifoBuffer RX_Buf;

static uint8_t IsFull(struct FifoBuffer* buf)
{
	return (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE == buf->ReadPtr;
    2992:	81 a1       	ldd	r24, Z+33	; 0x21
    2994:	90 a1       	ldd	r25, Z+32	; 0x20
    2996:	8f 5f       	subi	r24, 0xFF	; 255
    2998:	8f 71       	andi	r24, 0x1F	; 31
}

static void Enqueue(struct FifoBuffer* buf, uint8_t c)
{
	if (!IsFull(buf))
    299a:	89 17       	cp	r24, r25
    299c:	49 f0       	breq	.+18     	; 0x29b0 <Enqueue+0x20>
	{
		buf->Buffer[buf->WritePtr] = c;
    299e:	81 a1       	ldd	r24, Z+33	; 0x21
    29a0:	df 01       	movw	r26, r30
    29a2:	a8 0f       	add	r26, r24
    29a4:	b1 1d       	adc	r27, r1
    29a6:	6c 93       	st	X, r22
		buf->WritePtr = (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE;
    29a8:	81 a1       	ldd	r24, Z+33	; 0x21
    29aa:	8f 5f       	subi	r24, 0xFF	; 255
    29ac:	8f 71       	andi	r24, 0x1F	; 31
    29ae:	81 a3       	std	Z+33, r24	; 0x21
    29b0:	08 95       	ret

000029b2 <serialInit>:
{
	// enable hardware
	//PRR0 |= PRUSART1;
	
	// reset pointers
	TX_Buf.WritePtr = 0;
    29b2:	10 92 68 06 	sts	0x0668, r1
	TX_Buf.ReadPtr = 0;
    29b6:	10 92 67 06 	sts	0x0667, r1
	RX_Buf.ReadPtr = 0;
    29ba:	10 92 45 06 	sts	0x0645, r1
	RX_Buf.WritePtr = 0;
    29be:	10 92 46 06 	sts	0x0646, r1
		
	// using USART1 with TXD on PD3 and RXD on PD2. Running with 115.2 kbaud
	UBRR1 = 10;
    29c2:	8a e0       	ldi	r24, 0x0A	; 10
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	90 93 cd 00 	sts	0x00CD, r25
    29ca:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A = 0;
    29ce:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = _BV(TXEN1) | _BV(RXEN1) | _BV(RXCIE1);
    29d2:	88 e9       	ldi	r24, 0x98	; 152
    29d4:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
    29d8:	86 e0       	ldi	r24, 0x06	; 6
    29da:	80 93 ca 00 	sts	0x00CA, r24
    29de:	08 95       	ret

000029e0 <serialWriteChar>:
}

void serialWriteChar(char c)
{
	if (UCSR1B == 0)
    29e0:	90 91 c9 00 	lds	r25, 0x00C9
    29e4:	99 23       	and	r25, r25
    29e6:	c9 f0       	breq	.+50     	; 0x2a1a <serialWriteChar+0x3a>
		return;
		
	// if data register empty put byte in that register
	if (UCSR1A & _BV(UDRE1))
    29e8:	90 91 c8 00 	lds	r25, 0x00C8
    29ec:	95 ff       	sbrs	r25, 5
    29ee:	08 c0       	rjmp	.+16     	; 0x2a00 <serialWriteChar+0x20>
	{
		UDR1 = c;
    29f0:	80 93 ce 00 	sts	0x00CE, r24
		UCSR1B |= _BV(UDRIE1);
    29f4:	80 91 c9 00 	lds	r24, 0x00C9
    29f8:	80 62       	ori	r24, 0x20	; 32
    29fa:	80 93 c9 00 	sts	0x00C9, r24
    29fe:	08 95       	ret
static noinit struct FifoBuffer TX_Buf;
static noinit struct FifoBuffer RX_Buf;

static uint8_t IsFull(struct FifoBuffer* buf)
{
	return (uint8_t)(buf->WritePtr + 1) % BUFFER_SIZE == buf->ReadPtr;
    2a00:	90 91 68 06 	lds	r25, 0x0668
    2a04:	20 91 67 06 	lds	r18, 0x0667
    2a08:	9f 5f       	subi	r25, 0xFF	; 255
    2a0a:	9f 71       	andi	r25, 0x1F	; 31
		UCSR1B |= _BV(UDRIE1);
	}
	else
	{
		// wait for free space in buffer
		while (IsFull(&TX_Buf));
    2a0c:	92 17       	cp	r25, r18
    2a0e:	c1 f3       	breq	.-16     	; 0x2a00 <serialWriteChar+0x20>
		Enqueue(&TX_Buf, c);
    2a10:	68 2f       	mov	r22, r24
    2a12:	87 e4       	ldi	r24, 0x47	; 71
    2a14:	96 e0       	ldi	r25, 0x06	; 6
    2a16:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <Enqueue>
    2a1a:	08 95       	ret

00002a1c <serialTerminate>:
	return Dequeue(&RX_Buf);
}

void serialTerminate()
{
	UCSR1A = 0;
    2a1c:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1B = 0;	
    2a20:	10 92 c9 00 	sts	0x00C9, r1
    2a24:	08 95       	ret

00002a26 <__vector_15>:
#include "global.h"

static uint16_t t1_millis, t1_millis_fract, t1_ovf;

ISR(TIMER1_OVF_vect)
{
    2a26:	1f 92       	push	r1
    2a28:	0f 92       	push	r0
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	0f 92       	push	r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	2f 93       	push	r18
    2a32:	3f 93       	push	r19
    2a34:	4f 93       	push	r20
    2a36:	5f 93       	push	r21
    2a38:	6f 93       	push	r22
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
	t1_ovf++;
    2a3e:	80 91 6e 05 	lds	r24, 0x056E
    2a42:	90 91 6f 05 	lds	r25, 0x056F
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	90 93 6f 05 	sts	0x056F, r25
    2a4c:	80 93 6e 05 	sts	0x056E, r24

	t1_millis += 3;
    2a50:	80 91 72 05 	lds	r24, 0x0572
    2a54:	90 91 73 05 	lds	r25, 0x0573
    2a58:	9c 01       	movw	r18, r24
    2a5a:	2d 5f       	subi	r18, 0xFD	; 253
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	30 93 73 05 	sts	0x0573, r19
    2a62:	20 93 72 05 	sts	0x0572, r18
	t1_millis_fract += 2768;
    2a66:	20 91 70 05 	lds	r18, 0x0570
    2a6a:	30 91 71 05 	lds	r19, 0x0571
    2a6e:	a9 01       	movw	r20, r18
    2a70:	40 53       	subi	r20, 0x30	; 48
    2a72:	55 4f       	sbci	r21, 0xF5	; 245
	if (t1_millis_fract >= 10000)
    2a74:	40 31       	cpi	r20, 0x10	; 16
    2a76:	67 e2       	ldi	r22, 0x27	; 39
    2a78:	56 07       	cpc	r21, r22
    2a7a:	28 f4       	brcc	.+10     	; 0x2a86 <__vector_15+0x60>
ISR(TIMER1_OVF_vect)
{
	t1_ovf++;

	t1_millis += 3;
	t1_millis_fract += 2768;
    2a7c:	50 93 71 05 	sts	0x0571, r21
    2a80:	40 93 70 05 	sts	0x0570, r20
    2a84:	0b c0       	rjmp	.+22     	; 0x2a9c <__vector_15+0x76>
	if (t1_millis_fract >= 10000)
	{
		t1_millis_fract -= 10000;
    2a86:	20 54       	subi	r18, 0x40	; 64
    2a88:	3c 41       	sbci	r19, 0x1C	; 28
    2a8a:	30 93 71 05 	sts	0x0571, r19
    2a8e:	20 93 70 05 	sts	0x0570, r18
		t1_millis++;
    2a92:	04 96       	adiw	r24, 0x04	; 4
    2a94:	90 93 73 05 	sts	0x0573, r25
    2a98:	80 93 72 05 	sts	0x0572, r24
	}
}
    2a9c:	9f 91       	pop	r25
    2a9e:	8f 91       	pop	r24
    2aa0:	6f 91       	pop	r22
    2aa2:	5f 91       	pop	r21
    2aa4:	4f 91       	pop	r20
    2aa6:	3f 91       	pop	r19
    2aa8:	2f 91       	pop	r18
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <ticks>:

uint32_t ticks()
{
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
	uint16_t t1, t2;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2ab8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2aba:	f8 94       	cli
	{
		t1 = t1_ovf;
    2abc:	60 91 6e 05 	lds	r22, 0x056E
    2ac0:	70 91 6f 05 	lds	r23, 0x056F
		t2 = TCNT1;
    2ac4:	00 91 84 00 	lds	r16, 0x0084
    2ac8:	10 91 85 00 	lds	r17, 0x0085
		if ((TIFR1 & _BV(TOV1)) && (t2 < 65533))
    2acc:	b0 9b       	sbis	0x16, 0	; 22
    2ace:	06 c0       	rjmp	.+12     	; 0x2adc <ticks+0x28>
    2ad0:	0d 3f       	cpi	r16, 0xFD	; 253
    2ad2:	9f ef       	ldi	r25, 0xFF	; 255
    2ad4:	19 07       	cpc	r17, r25
    2ad6:	10 f4       	brcc	.+4      	; 0x2adc <ticks+0x28>
			t1++;
    2ad8:	6f 5f       	subi	r22, 0xFF	; 255
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2adc:	8f bf       	out	0x3f, r24	; 63
	}
	return ((uint32_t)t1 << 16) | t2;
    2ade:	cb 01       	movw	r24, r22
    2ae0:	a0 e0       	ldi	r26, 0x00	; 0
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	77 27       	eor	r23, r23
    2ae6:	66 27       	eor	r22, r22
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	60 2b       	or	r22, r16
    2aee:	71 2b       	or	r23, r17
    2af0:	82 2b       	or	r24, r18
    2af2:	93 2b       	or	r25, r19
}
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	08 95       	ret

00002afa <millis>:

// accuracy is 3ms
uint16_t millis()
{
	uint16_t t;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2afa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2afc:	f8 94       	cli
		t = t1_millis;
    2afe:	80 91 72 05 	lds	r24, 0x0572
    2b02:	90 91 73 05 	lds	r25, 0x0573
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b06:	2f bf       	out	0x3f, r18	; 63
	return t;
}
    2b08:	08 95       	ret

00002b0a <setup>:

void setup()
{
	// disable JTAG port
	MCUCR |= _BV(JTD);
    2b0a:	85 b7       	in	r24, 0x35	; 53
    2b0c:	80 68       	ori	r24, 0x80	; 128
    2b0e:	85 bf       	out	0x35, r24	; 53
	MCUCR |= _BV(JTD);
    2b10:	85 b7       	in	r24, 0x35	; 53
    2b12:	80 68       	ori	r24, 0x80	; 128
    2b14:	85 bf       	out	0x35, r24	; 53
	
	// disable all hardware but Timer1
	//PRR0 = 0xFF & ~PRTIM1;
	//PRR1 = 0xFF;
	
	LED_DIR = OUTPUT;
    2b16:	23 9a       	sbi	0x04, 3	; 4
	
	// Timer1 @20MHz with overflow interrupt
	TCCR1B = _BV(CS10);
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = _BV(TOIE1);
    2b1e:	80 93 6f 00 	sts	0x006F, r24
    2b22:	08 95       	ret

00002b24 <_font12x16selector>:
	*/
};

static PGM_P _font12x16selector(unsigned char c)
{
	if (c >= 'a' && c <= 'z')
    2b24:	9f e9       	ldi	r25, 0x9F	; 159
    2b26:	98 0f       	add	r25, r24
    2b28:	9a 31       	cpi	r25, 0x1A	; 26
    2b2a:	08 f4       	brcc	.+2      	; 0x2b2e <_font12x16selector+0xa>
		c -= 'a' - 'A';
    2b2c:	80 52       	subi	r24, 0x20	; 32
		
	return (PGM_P) _font12x16map + (c - 0x20) * BYTESPERCHAR;
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	20 52       	subi	r18, 0x20	; 32
    2b34:	31 09       	sbc	r19, r1
    2b36:	48 e1       	ldi	r20, 0x18	; 24
    2b38:	42 9f       	mul	r20, r18
    2b3a:	c0 01       	movw	r24, r0
    2b3c:	43 9f       	mul	r20, r19
    2b3e:	90 0d       	add	r25, r0
    2b40:	11 24       	eor	r1, r1
}
    2b42:	84 56       	subi	r24, 0x64	; 100
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	08 95       	ret

00002b48 <_font4x6selector>:
};

static PGM_P _font4x6selector(unsigned char c)
{
	//return (PGM_P) _font4x6map + (c % 0x30) * BYTESPERCHAR;
	return (PGM_P) _font4x6map + (c - 0x20) * BYTESPERCHAR;
    2b48:	24 e0       	ldi	r18, 0x04	; 4
    2b4a:	82 9f       	mul	r24, r18
    2b4c:	c0 01       	movw	r24, r0
    2b4e:	11 24       	eor	r1, r1
}
    2b50:	80 5e       	subi	r24, 0xE0	; 224
    2b52:	99 4f       	sbci	r25, 0xF9	; 249
    2b54:	08 95       	ret

00002b56 <_font6x8selector>:
	*/
};

static PGM_P _font6x8selector(unsigned char c)
{
	return (PGM_P) _font6x8map + (c - 0x20) * BYTESPERCHAR;
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	20 52       	subi	r18, 0x20	; 32
    2b5c:	31 09       	sbc	r19, r1
    2b5e:	46 e0       	ldi	r20, 0x06	; 6
    2b60:	42 9f       	mul	r20, r18
    2b62:	c0 01       	movw	r24, r0
    2b64:	43 9f       	mul	r20, r19
    2b66:	90 0d       	add	r25, r0
    2b68:	11 24       	eor	r1, r1
}
    2b6a:	8c 55       	subi	r24, 0x5C	; 92
    2b6c:	98 4f       	sbci	r25, 0xF8	; 248
    2b6e:	08 95       	ret

00002b70 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2b70:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2b74:	8c e0       	ldi	r24, 0x0C	; 12
    2b76:	80 93 b8 00 	sts	0x00B8, r24
    2b7a:	08 95       	ret

00002b7c <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2b7c:	94 ea       	ldi	r25, 0xA4	; 164
    2b7e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    2b82:	4f ef       	ldi	r20, 0xFF	; 255
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2b8a:	90 91 bc 00 	lds	r25, 0x00BC
    2b8e:	97 fd       	sbrc	r25, 7
    2b90:	06 c0       	rjmp	.+12     	; 0x2b9e <i2c_start+0x22>
    2b92:	41 50       	subi	r20, 0x01	; 1
    2b94:	51 09       	sbc	r21, r1
    2b96:	61 09       	sbc	r22, r1
    2b98:	71 09       	sbc	r23, r1
    2b9a:	b8 f7       	brcc	.-18     	; 0x2b8a <i2c_start+0xe>
    2b9c:	06 c0       	rjmp	.+12     	; 0x2baa <i2c_start+0x2e>
	if(i2c_timer == 0)
    2b9e:	45 2b       	or	r20, r21
    2ba0:	46 2b       	or	r20, r22
    2ba2:	47 2b       	or	r20, r23
    2ba4:	11 f4       	brne	.+4      	; 0x2baa <i2c_start+0x2e>
		return 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2baa:	90 91 b9 00 	lds	r25, 0x00B9
    2bae:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2bb0:	98 30       	cpi	r25, 0x08	; 8
    2bb2:	11 f0       	breq	.+4      	; 0x2bb8 <i2c_start+0x3c>
    2bb4:	90 31       	cpi	r25, 0x10	; 16
    2bb6:	b9 f7       	brne	.-18     	; 0x2ba6 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    2bb8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bbc:	84 e8       	ldi	r24, 0x84	; 132
    2bbe:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    2bc2:	8f ef       	ldi	r24, 0xFF	; 255
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2bca:	20 91 bc 00 	lds	r18, 0x00BC
    2bce:	27 fd       	sbrc	r18, 7
    2bd0:	05 c0       	rjmp	.+10     	; 0x2bdc <i2c_start+0x60>
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	a1 09       	sbc	r26, r1
    2bd6:	b1 09       	sbc	r27, r1
    2bd8:	c0 f7       	brcc	.-16     	; 0x2bca <i2c_start+0x4e>
    2bda:	04 c0       	rjmp	.+8      	; 0x2be4 <i2c_start+0x68>
	if(i2c_timer == 0)
    2bdc:	89 2b       	or	r24, r25
    2bde:	8a 2b       	or	r24, r26
    2be0:	8b 2b       	or	r24, r27
    2be2:	09 f3       	breq	.-62     	; 0x2ba6 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2be4:	80 91 b9 00 	lds	r24, 0x00B9
    2be8:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2bea:	88 31       	cpi	r24, 0x18	; 24
    2bec:	11 f0       	breq	.+4      	; 0x2bf2 <i2c_start+0x76>
    2bee:	80 34       	cpi	r24, 0x40	; 64
    2bf0:	d1 f6       	brne	.-76     	; 0x2ba6 <i2c_start+0x2a>

	return 0;
    2bf2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2bf4:	08 95       	ret

00002bf6 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2bf6:	84 e9       	ldi	r24, 0x94	; 148
    2bf8:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	20 91 bc 00 	lds	r18, 0x00BC
    2c04:	24 ff       	sbrs	r18, 4
    2c06:	05 c0       	rjmp	.+10     	; 0x2c12 <i2c_stop+0x1c>
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	81 15       	cp	r24, r1
    2c0c:	21 e0       	ldi	r18, 0x01	; 1
    2c0e:	92 07       	cpc	r25, r18
    2c10:	b9 f7       	brne	.-18     	; 0x2c00 <i2c_stop+0xa>
    2c12:	08 95       	ret

00002c14 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2c14:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2c18:	84 e8       	ldi	r24, 0x84	; 132
    2c1a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    2c1e:	8f ef       	ldi	r24, 0xFF	; 255
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e0       	ldi	r26, 0x00	; 0
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2c26:	20 91 bc 00 	lds	r18, 0x00BC
    2c2a:	27 fd       	sbrc	r18, 7
    2c2c:	05 c0       	rjmp	.+10     	; 0x2c38 <i2c_write+0x24>
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	a1 09       	sbc	r26, r1
    2c32:	b1 09       	sbc	r27, r1
    2c34:	c0 f7       	brcc	.-16     	; 0x2c26 <i2c_write+0x12>
    2c36:	04 c0       	rjmp	.+8      	; 0x2c40 <i2c_write+0x2c>
	if(i2c_timer == 0)
    2c38:	89 2b       	or	r24, r25
    2c3a:	8a 2b       	or	r24, r26
    2c3c:	8b 2b       	or	r24, r27
    2c3e:	41 f0       	breq	.+16     	; 0x2c50 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2c40:	90 91 b9 00 	lds	r25, 0x00B9
    2c44:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	98 32       	cpi	r25, 0x28	; 40
    2c4a:	19 f4       	brne	.+6      	; 0x2c52 <i2c_write+0x3e>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    2c52:	08 95       	ret

00002c54 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2c54:	84 ec       	ldi	r24, 0xC4	; 196
    2c56:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a0 e0       	ldi	r26, 0x00	; 0
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2c62:	20 91 bc 00 	lds	r18, 0x00BC
    2c66:	27 fd       	sbrc	r18, 7
    2c68:	05 c0       	rjmp	.+10     	; 0x2c74 <i2c_readAck+0x20>
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	a1 09       	sbc	r26, r1
    2c6e:	b1 09       	sbc	r27, r1
    2c70:	c0 f7       	brcc	.-16     	; 0x2c62 <i2c_readAck+0xe>
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <i2c_readAck+0x28>
	if(i2c_timer == 0)
    2c74:	89 2b       	or	r24, r25
    2c76:	8a 2b       	or	r24, r26
    2c78:	8b 2b       	or	r24, r27
    2c7a:	19 f0       	breq	.+6      	; 0x2c82 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    2c7c:	80 91 bb 00 	lds	r24, 0x00BB
    2c80:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    2c82:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    2c84:	08 95       	ret

00002c86 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    2c86:	84 e8       	ldi	r24, 0x84	; 132
    2c88:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    2c8c:	8f ef       	ldi	r24, 0xFF	; 255
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e0       	ldi	r26, 0x00	; 0
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    2c94:	20 91 bc 00 	lds	r18, 0x00BC
    2c98:	27 fd       	sbrc	r18, 7
    2c9a:	05 c0       	rjmp	.+10     	; 0x2ca6 <i2c_readNak+0x20>
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	a1 09       	sbc	r26, r1
    2ca0:	b1 09       	sbc	r27, r1
    2ca2:	c0 f7       	brcc	.-16     	; 0x2c94 <i2c_readNak+0xe>
    2ca4:	04 c0       	rjmp	.+8      	; 0x2cae <i2c_readNak+0x28>
	if(i2c_timer == 0)
    2ca6:	89 2b       	or	r24, r25
    2ca8:	8a 2b       	or	r24, r26
    2caa:	8b 2b       	or	r24, r27
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    2cae:	80 91 bb 00 	lds	r24, 0x00BB
    2cb2:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    2cb6:	08 95       	ret

00002cb8 <mpu6050_readBytes.part.0>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
    2cb8:	af 92       	push	r10
    2cba:	bf 92       	push	r11
    2cbc:	df 92       	push	r13
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <mpu6050_readBytes.part.0+0x14>
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	18 2f       	mov	r17, r24
    2cd2:	d6 2e       	mov	r13, r22
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    2cd4:	80 ed       	ldi	r24, 0xD0	; 208
    2cd6:	49 83       	std	Y+1, r20	; 0x01
    2cd8:	5a 83       	std	Y+2, r21	; 0x02
    2cda:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <i2c_start>
		i2c_write(regAddr);
    2cde:	81 2f       	mov	r24, r17
    2ce0:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ce4:	82 e4       	ldi	r24, 0x42	; 66
    2ce6:	8a 95       	dec	r24
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <mpu6050_readBytes.part.0+0x2e>
    2cea:	00 c0       	rjmp	.+0      	; 0x2cec <mpu6050_readBytes.part.0+0x34>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
    2cec:	81 ed       	ldi	r24, 0xD1	; 209
    2cee:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <i2c_start>
    2cf2:	49 81       	ldd	r20, Y+1	; 0x01
    2cf4:	a4 2e       	mov	r10, r20
    2cf6:	5a 81       	ldd	r21, Y+2	; 0x02
    2cf8:	b5 2e       	mov	r11, r21
    2cfa:	00 e0       	ldi	r16, 0x00	; 0
    2cfc:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
    2cfe:	ed 2c       	mov	r14, r13
    2d00:	f1 2c       	mov	r15, r1
    2d02:	e1 e0       	ldi	r30, 0x01	; 1
    2d04:	ee 1a       	sub	r14, r30
    2d06:	f1 08       	sbc	r15, r1
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
    2d08:	0d 15       	cp	r16, r13
    2d0a:	80 f4       	brcc	.+32     	; 0x2d2c <mpu6050_readBytes.part.0+0x74>
			count++;
			if(i==length-1)
    2d0c:	0e 15       	cp	r16, r14
    2d0e:	1f 05       	cpc	r17, r15
    2d10:	19 f4       	brne	.+6      	; 0x2d18 <mpu6050_readBytes.part.0+0x60>
				data[i] = i2c_readNak();
    2d12:	0e 94 43 16 	call	0x2c86	; 0x2c86 <i2c_readNak>
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <mpu6050_readBytes.part.0+0x64>
			else
				data[i] = i2c_readAck();
    2d18:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <i2c_readAck>
    2d1c:	f5 01       	movw	r30, r10
    2d1e:	80 83       	st	Z, r24
    2d20:	0f 5f       	subi	r16, 0xFF	; 255
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	ff ef       	ldi	r31, 0xFF	; 255
    2d26:	af 1a       	sub	r10, r31
    2d28:	bf 0a       	sbc	r11, r31
    2d2a:	ee cf       	rjmp	.-36     	; 0x2d08 <mpu6050_readBytes.part.0+0x50>
		}
		i2c_stop();
    2d2c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <i2c_stop>
	}
	return count;
}
    2d30:	8d 2d       	mov	r24, r13
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	df 90       	pop	r13
    2d44:	bf 90       	pop	r11
    2d46:	af 90       	pop	r10
    2d48:	08 95       	ret

00002d4a <mpu6050_readBytes>:
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
    2d4a:	61 11       	cpse	r22, r1
    2d4c:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <mpu6050_readBytes.part.0>
				data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	08 95       	ret

00002d54 <mpu6050_readByte>:

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    2d54:	ab 01       	movw	r20, r22
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <mpu6050_readBytes.part.0>

00002d5c <mpu6050_writeBytes>:
}

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
    2d5c:	ef 92       	push	r14
    2d5e:	ff 92       	push	r15
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <mpu6050_writeBytes+0xe>
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	08 2f       	mov	r16, r24
    2d70:	16 2f       	mov	r17, r22
	if(length > 0) {
    2d72:	66 23       	and	r22, r22
    2d74:	09 f1       	breq	.+66     	; 0x2db8 <mpu6050_writeBytes+0x5c>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    2d76:	80 ed       	ldi	r24, 0xD0	; 208
    2d78:	49 83       	std	Y+1, r20	; 0x01
    2d7a:	5a 83       	std	Y+2, r21	; 0x02
    2d7c:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <i2c_start>
		i2c_write(regAddr); //reg
    2d80:	80 2f       	mov	r24, r16
    2d82:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <i2c_write>
    2d86:	49 81       	ldd	r20, Y+1	; 0x01
    2d88:	04 2f       	mov	r16, r20
		for (uint8_t i = 0; i < length; i++) {
    2d8a:	e4 2e       	mov	r14, r20
    2d8c:	5a 81       	ldd	r21, Y+2	; 0x02
    2d8e:	f5 2e       	mov	r15, r21
    2d90:	8e 2d       	mov	r24, r14
    2d92:	80 1b       	sub	r24, r16
    2d94:	81 17       	cp	r24, r17
    2d96:	30 f4       	brcc	.+12     	; 0x2da4 <mpu6050_writeBytes+0x48>
			i2c_write((uint8_t) data[i]);
    2d98:	f7 01       	movw	r30, r14
    2d9a:	81 91       	ld	r24, Z+
    2d9c:	7f 01       	movw	r14, r30
    2d9e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <i2c_write>
    2da2:	f6 cf       	rjmp	.-20     	; 0x2d90 <mpu6050_writeBytes+0x34>
		}
		i2c_stop();
	}
}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
    2db4:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <i2c_stop>
	}
}
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	08 95       	ret

00002dca <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	1f 92       	push	r1
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
    2dd6:	ae 01       	movw	r20, r28
    2dd8:	4f 5f       	subi	r20, 0xFF	; 255
    2dda:	5f 4f       	sbci	r21, 0xFF	; 255
    2ddc:	61 e0       	ldi	r22, 0x01	; 1
    2dde:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <mpu6050_writeBytes>
}
    2de2:	0f 90       	pop	r0
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	08 95       	ret

00002dea <mpu6050_writeBits.part.1>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <mpu6050_writeBits.part.1+0xa>
    2df4:	1f 92       	push	r1
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	18 2f       	mov	r17, r24
    2dfc:	06 2f       	mov	r16, r22
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
		uint8_t b = 0;
    2dfe:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    2e00:	be 01       	movw	r22, r28
    2e02:	6f 5f       	subi	r22, 0xFF	; 255
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255
    2e06:	2b 83       	std	Y+3, r18	; 0x03
    2e08:	4a 83       	std	Y+2, r20	; 0x02
    2e0a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <mpu6050_readByte>
    2e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e10:	4a 81       	ldd	r20, Y+2	; 0x02
    2e12:	88 23       	and	r24, r24
    2e14:	09 f1       	breq	.+66     	; 0x2e58 <mpu6050_writeBits.part.1+0x6e>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    2e16:	60 2f       	mov	r22, r16
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	64 1b       	sub	r22, r20
    2e1c:	71 09       	sbc	r23, r1
    2e1e:	6f 5f       	subi	r22, 0xFF	; 255
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255
    2e22:	e1 e0       	ldi	r30, 0x01	; 1
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <mpu6050_writeBits.part.1+0x42>
    2e28:	ee 0f       	add	r30, r30
    2e2a:	ff 1f       	adc	r31, r31
    2e2c:	4a 95       	dec	r20
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <mpu6050_writeBits.part.1+0x3e>
    2e30:	31 97       	sbiw	r30, 0x01	; 1
    2e32:	06 2e       	mov	r0, r22
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <mpu6050_writeBits.part.1+0x4e>
    2e36:	ee 0f       	add	r30, r30
    2e38:	0a 94       	dec	r0
    2e3a:	ea f7       	brpl	.-6      	; 0x2e36 <mpu6050_writeBits.part.1+0x4c>
			data <<= (bitStart - length + 1); // shift data into correct position
    2e3c:	01 c0       	rjmp	.+2      	; 0x2e40 <mpu6050_writeBits.part.1+0x56>
    2e3e:	22 0f       	add	r18, r18
    2e40:	6a 95       	dec	r22
    2e42:	ea f7       	brpl	.-6      	; 0x2e3e <mpu6050_writeBits.part.1+0x54>
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
    2e44:	6e 2f       	mov	r22, r30
    2e46:	60 95       	com	r22
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	68 23       	and	r22, r24
	if(length > 0) {
		uint8_t b = 0;
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
			data <<= (bitStart - length + 1); // shift data into correct position
			data &= mask; // zero all non-important bits in data
    2e4c:	e2 23       	and	r30, r18
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    2e4e:	6e 2b       	or	r22, r30
    2e50:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    2e52:	81 2f       	mov	r24, r17
    2e54:	0e 94 e5 16 	call	0x2dca	; 0x2dca <mpu6050_writeByte>
		}
	}
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <mpu6050_writeBit>:

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <mpu6050_writeBit+0xa>
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	18 2f       	mov	r17, r24
    2e78:	06 2f       	mov	r16, r22
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    2e7a:	be 01       	movw	r22, r28
    2e7c:	6f 5f       	subi	r22, 0xFF	; 255
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	4a 83       	std	Y+2, r20	; 0x02
    2e82:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <mpu6050_readByte>
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    2e88:	4a 81       	ldd	r20, Y+2	; 0x02
    2e8a:	21 e0       	ldi	r18, 0x01	; 1
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	00 2e       	mov	r0, r16
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <mpu6050_writeBit+0x2c>
    2e92:	22 0f       	add	r18, r18
    2e94:	0a 94       	dec	r0
    2e96:	ea f7       	brpl	.-6      	; 0x2e92 <mpu6050_writeBit+0x2a>
    2e98:	44 23       	and	r20, r20
    2e9a:	19 f0       	breq	.+6      	; 0x2ea2 <mpu6050_writeBit+0x3a>
    2e9c:	68 2f       	mov	r22, r24
    2e9e:	62 2b       	or	r22, r18
    2ea0:	03 c0       	rjmp	.+6      	; 0x2ea8 <mpu6050_writeBit+0x40>
    2ea2:	62 2f       	mov	r22, r18
    2ea4:	60 95       	com	r22
    2ea6:	68 23       	and	r22, r24
    2ea8:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    2eaa:	81 2f       	mov	r24, r17
    2eac:	0e 94 e5 16 	call	0x2dca	; 0x2dca <mpu6050_writeByte>
}
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	08 95       	ret

00002ebe <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	66 e0       	ldi	r22, 0x06	; 6
    2ec2:	8b e6       	ldi	r24, 0x6B	; 107
    2ec4:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <mpu6050_writeBit>

00002ec8 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    2ec8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <i2c_init>
    2ecc:	22 e4       	ldi	r18, 0x42	; 66
    2ece:	2a 95       	dec	r18
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <mpu6050_init+0x6>
    2ed2:	00 c0       	rjmp	.+0      	; 0x2ed4 <mpu6050_init+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ed4:	8f e7       	ldi	r24, 0x7F	; 127
    2ed6:	9a e1       	ldi	r25, 0x1A	; 26
    2ed8:	26 e0       	ldi	r18, 0x06	; 6
    2eda:	81 50       	subi	r24, 0x01	; 1
    2edc:	90 40       	sbci	r25, 0x00	; 0
    2ede:	20 40       	sbci	r18, 0x00	; 0
    2ee0:	e1 f7       	brne	.-8      	; 0x2eda <mpu6050_init+0x12>
    2ee2:	00 c0       	rjmp	.+0      	; 0x2ee4 <mpu6050_init+0x1c>
    2ee4:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    2ee6:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <mpu6050_setSleepDisabled>
    2eea:	8f e4       	ldi	r24, 0x4F	; 79
    2eec:	93 ec       	ldi	r25, 0xC3	; 195
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <mpu6050_init+0x26>
    2ef2:	00 c0       	rjmp	.+0      	; 0x2ef4 <mpu6050_init+0x2c>
    2ef4:	00 00       	nop
    2ef6:	21 e0       	ldi	r18, 0x01	; 1
    2ef8:	43 e0       	ldi	r20, 0x03	; 3
    2efa:	62 e0       	ldi	r22, 0x02	; 2
    2efc:	8b e6       	ldi	r24, 0x6B	; 107
    2efe:	0e 94 f5 16 	call	0x2dea	; 0x2dea <mpu6050_writeBits.part.1>
    2f02:	23 e0       	ldi	r18, 0x03	; 3
    2f04:	43 e0       	ldi	r20, 0x03	; 3
    2f06:	62 e0       	ldi	r22, 0x02	; 2
    2f08:	8a e1       	ldi	r24, 0x1A	; 26
    2f0a:	0e 94 f5 16 	call	0x2dea	; 0x2dea <mpu6050_writeBits.part.1>
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    2f0e:	64 e0       	ldi	r22, 0x04	; 4
    2f10:	89 e1       	ldi	r24, 0x19	; 25
    2f12:	0e 94 e5 16 	call	0x2dca	; 0x2dca <mpu6050_writeByte>
    2f16:	23 e0       	ldi	r18, 0x03	; 3
    2f18:	42 e0       	ldi	r20, 0x02	; 2
    2f1a:	64 e0       	ldi	r22, 0x04	; 4
    2f1c:	8b e1       	ldi	r24, 0x1B	; 27
    2f1e:	0e 94 f5 16 	call	0x2dea	; 0x2dea <mpu6050_writeBits.part.1>
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	42 e0       	ldi	r20, 0x02	; 2
    2f26:	64 e0       	ldi	r22, 0x04	; 4
    2f28:	8c e1       	ldi	r24, 0x1C	; 28
    2f2a:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <mpu6050_writeBits.part.1>

00002f2e <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    2f2e:	8f 92       	push	r8
    2f30:	9f 92       	push	r9
    2f32:	af 92       	push	r10
    2f34:	bf 92       	push	r11
    2f36:	cf 92       	push	r12
    2f38:	df 92       	push	r13
    2f3a:	ef 92       	push	r14
    2f3c:	ff 92       	push	r15
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	ec 01       	movw	r28, r24
    2f48:	5b 01       	movw	r10, r22
    2f4a:	6a 01       	movw	r12, r20
    2f4c:	49 01       	movw	r8, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    2f4e:	46 ec       	ldi	r20, 0xC6	; 198
    2f50:	55 e0       	ldi	r21, 0x05	; 5
    2f52:	6e e0       	ldi	r22, 0x0E	; 14
    2f54:	8b e3       	ldi	r24, 0x3B	; 59
    2f56:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    2f5a:	20 91 c6 05 	lds	r18, 0x05C6
    2f5e:	80 91 c7 05 	lds	r24, 0x05C7
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	92 2b       	or	r25, r18
    2f66:	99 83       	std	Y+1, r25	; 0x01
    2f68:	88 83       	st	Y, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    2f6a:	20 91 c8 05 	lds	r18, 0x05C8
    2f6e:	80 91 c9 05 	lds	r24, 0x05C9
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	92 2b       	or	r25, r18
    2f76:	f5 01       	movw	r30, r10
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    2f7c:	20 91 ca 05 	lds	r18, 0x05CA
    2f80:	80 91 cb 05 	lds	r24, 0x05CB
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	92 2b       	or	r25, r18
    2f88:	f6 01       	movw	r30, r12
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    2f8e:	20 91 ce 05 	lds	r18, 0x05CE
    2f92:	80 91 cf 05 	lds	r24, 0x05CF
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	92 2b       	or	r25, r18
    2f9a:	f4 01       	movw	r30, r8
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    2fa0:	20 91 d0 05 	lds	r18, 0x05D0
    2fa4:	80 91 d1 05 	lds	r24, 0x05D1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	92 2b       	or	r25, r18
    2fac:	f8 01       	movw	r30, r16
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    2fb2:	20 91 d2 05 	lds	r18, 0x05D2
    2fb6:	80 91 d3 05 	lds	r24, 0x05D3
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	92 2b       	or	r25, r18
    2fbe:	f7 01       	movw	r30, r14
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
}
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	cf 90       	pop	r12
    2fd4:	bf 90       	pop	r11
    2fd6:	af 90       	pop	r10
    2fd8:	9f 90       	pop	r9
    2fda:	8f 90       	pop	r8
    2fdc:	08 95       	ret

00002fde <_initConfig>:
	
};

static void _initConfig()
{
	memcpy_P(&Config, &defaultConfig, sizeof(Config));
    2fde:	4c e7       	ldi	r20, 0x7C	; 124
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	65 e2       	ldi	r22, 0x25	; 37
    2fe4:	7a e0       	ldi	r23, 0x0A	; 10
    2fe6:	89 e6       	ldi	r24, 0x69	; 105
    2fe8:	96 e0       	ldi	r25, 0x06	; 6
    2fea:	0e 94 24 27 	call	0x4e48	; 0x4e48 <memcpy_P>
	mixerLoadModel(Config.MixerIndex);
    2fee:	80 91 a0 06 	lds	r24, 0x06A0
    2ff2:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <mixerLoadModel>

00002ff6 <configLoad>:
}

void configLoad()
{
	eeprom_read_block(&Config, &EEConfig, sizeof(Config));
    2ff6:	4c e7       	ldi	r20, 0x7C	; 124
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	89 e6       	ldi	r24, 0x69	; 105
    3000:	96 e0       	ldi	r25, 0x06	; 6
    3002:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__eerd_block_m324pa>
	if (Config.signature != SIGNATURE)
    3006:	80 91 69 06 	lds	r24, 0x0669
    300a:	80 36       	cpi	r24, 0x60	; 96
    300c:	11 f0       	breq	.+4      	; 0x3012 <configLoad+0x1c>
		_initConfig();
    300e:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <_initConfig>
    3012:	08 95       	ret

00003014 <configInit>:
}

void configInit()
{
	configLoad();
    3014:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <configLoad>

00003018 <configSave>:
}

void configSave()
{
	eeprom_update_block(&Config, &EEConfig, sizeof(Config));
    3018:	4c e7       	ldi	r20, 0x7C	; 124
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	89 e6       	ldi	r24, 0x69	; 105
    3022:	96 e0       	ldi	r25, 0x06	; 6
    3024:	0c 94 6b 27 	jmp	0x4ed6	; 0x4ed6 <__eeupd_block_m324pa>

00003028 <configReset>:
}

void configReset()
{
	_initConfig();
    3028:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <_initConfig>

0000302c <limit>:

static pid_state_t PID[3];

int16_t limit(int16_t value, int16_t low, int16_t high)
{
	if (value < low) return low;
    302c:	86 17       	cp	r24, r22
    302e:	97 07       	cpc	r25, r23
    3030:	2c f0       	brlt	.+10     	; 0x303c <limit+0x10>
    3032:	48 17       	cp	r20, r24
    3034:	59 07       	cpc	r21, r25
    3036:	1c f4       	brge	.+6      	; 0x303e <limit+0x12>
    3038:	ca 01       	movw	r24, r20
    303a:	08 95       	ret
    303c:	cb 01       	movw	r24, r22
	else if (value > high) return high;
	else return value;
}
    303e:	08 95       	ret

00003040 <calcChannel>:
	int32_t r;
	
	// RX = -140..+140
	// StickScaling = 0..+200
	// ==> -28000..+28000 -> 16bit
	err = RX[index] * Config.StickScaling[index];
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	a9 01       	movw	r20, r18
    3046:	44 0f       	add	r20, r20
    3048:	55 1f       	adc	r21, r21
    304a:	fa 01       	movw	r30, r20
    304c:	ea 55       	subi	r30, 0x5A	; 90
    304e:	fa 4f       	sbci	r31, 0xFA	; 250
    3050:	d9 01       	movw	r26, r18
    3052:	a7 59       	subi	r26, 0x97	; 151
    3054:	b9 4f       	sbci	r27, 0xF9	; 249
    3056:	d8 96       	adiw	r26, 0x38	; 56
    3058:	9c 91       	ld	r25, X
    305a:	01 90       	ld	r0, Z+
    305c:	f0 81       	ld	r31, Z
    305e:	e0 2d       	mov	r30, r0
    3060:	9e 9f       	mul	r25, r30
    3062:	b0 01       	movw	r22, r0
    3064:	9f 9f       	mul	r25, r31
    3066:	70 0d       	add	r23, r0
    3068:	11 24       	eor	r1, r1
	
	if (index == YAW)
    306a:	82 30       	cpi	r24, 0x02	; 2
    306c:	29 f4       	brne	.+10     	; 0x3078 <calcChannel+0x38>
		err += GYRO_RATE[YAW];
    306e:	40 91 ec 05 	lds	r20, 0x05EC
    3072:	50 91 ed 05 	lds	r21, 0x05ED
    3076:	05 c0       	rjmp	.+10     	; 0x3082 <calcChannel+0x42>
	else
		err += ANGLE[index];
    3078:	fa 01       	movw	r30, r20
    307a:	ee 51       	subi	r30, 0x1E	; 30
    307c:	fa 4f       	sbci	r31, 0xFA	; 250
    307e:	40 81       	ld	r20, Z
    3080:	51 81       	ldd	r21, Z+1	; 0x01
    3082:	46 0f       	add	r20, r22
    3084:	57 1f       	adc	r21, r23
		
	r = (int32_t)err * Config.PID[index].PGain;
    3086:	f9 01       	movw	r30, r18
    3088:	ee 0f       	add	r30, r30
    308a:	ff 1f       	adc	r31, r31
    308c:	ee 0f       	add	r30, r30
    308e:	ff 1f       	adc	r31, r31
    3090:	df 01       	movw	r26, r30
    3092:	a7 59       	subi	r26, 0x97	; 151
    3094:	b9 4f       	sbci	r27, 0xF9	; 249
    3096:	96 96       	adiw	r26, 0x26	; 38
    3098:	2c 91       	ld	r18, X
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	da 01       	movw	r26, r20
    309e:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__usmulhisi3>
	
	PID[index].Integral += err >> 8;
    30a2:	ec 58       	subi	r30, 0x8C	; 140
    30a4:	fa 4f       	sbci	r31, 0xFA	; 250
    30a6:	45 2f       	mov	r20, r21
    30a8:	55 0f       	add	r21, r21
    30aa:	55 0b       	sbc	r21, r21
    30ac:	20 81       	ld	r18, Z
    30ae:	31 81       	ldd	r19, Z+1	; 0x01
    30b0:	24 0f       	add	r18, r20
    30b2:	35 1f       	adc	r19, r21
    30b4:	31 83       	std	Z+1, r19	; 0x01
    30b6:	20 83       	st	Z, r18
	//r += PID[index].Integral * Config.PID[index].IGain;
	
	//r += (PID[index].Error - err) * Config.PID[index].DGain;
	//PID[index].Error = err;
	
	r >>= 12;
    30b8:	3c e0       	ldi	r19, 0x0C	; 12
    30ba:	95 95       	asr	r25
    30bc:	87 95       	ror	r24
    30be:	77 95       	ror	r23
    30c0:	67 95       	ror	r22
    30c2:	3a 95       	dec	r19
    30c4:	d1 f7       	brne	.-12     	; 0x30ba <calcChannel+0x7a>
	if (r < 0) r++;
    30c6:	97 ff       	sbrs	r25, 7
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <calcChannel+0x92>
    30ca:	6f 5f       	subi	r22, 0xFF	; 255
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	8f 4f       	sbci	r24, 0xFF	; 255
    30d0:	9f 4f       	sbci	r25, 0xFF	; 255
	return r;
}
    30d2:	cb 01       	movw	r24, r22
    30d4:	08 95       	ret

000030d6 <calcThrottle>:

uint16_t calcThrottle()
{
	int32_t r;
	r = RX[THR] * Config.StickScaling[THR];
    30d6:	40 91 a4 06 	lds	r20, 0x06A4
    30da:	20 91 ac 05 	lds	r18, 0x05AC
    30de:	30 91 ad 05 	lds	r19, 0x05AD
    30e2:	42 9f       	mul	r20, r18
    30e4:	c0 01       	movw	r24, r0
    30e6:	43 9f       	mul	r20, r19
    30e8:	90 0d       	add	r25, r0
    30ea:	11 24       	eor	r1, r1
    30ec:	aa 27       	eor	r26, r26
    30ee:	97 fd       	sbrc	r25, 7
    30f0:	a0 95       	com	r26
    30f2:	ba 2f       	mov	r27, r26
	return r >> 5;
    30f4:	75 e0       	ldi	r23, 0x05	; 5
    30f6:	b5 95       	asr	r27
    30f8:	a7 95       	ror	r26
    30fa:	97 95       	ror	r25
    30fc:	87 95       	ror	r24
    30fe:	7a 95       	dec	r23
    3100:	d1 f7       	brne	.-12     	; 0x30f6 <calcThrottle+0x20>
}
    3102:	08 95       	ret

00003104 <controllerCalculate>:

void controllerCalculate()
{
	CONTROL[ROL] = -calcChannel(ROL);
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	0e 94 20 18 	call	0x3040	; 0x3040 <calcChannel>
    310a:	91 95       	neg	r25
    310c:	81 95       	neg	r24
    310e:	91 09       	sbc	r25, r1
    3110:	90 93 d5 05 	sts	0x05D5, r25
    3114:	80 93 d4 05 	sts	0x05D4, r24
	CONTROL[PIT] = calcChannel(PIT);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	0e 94 20 18 	call	0x3040	; 0x3040 <calcChannel>
    311e:	90 93 d7 05 	sts	0x05D7, r25
    3122:	80 93 d6 05 	sts	0x05D6, r24
	CONTROL[YAW] = -calcChannel(YAW);
    3126:	82 e0       	ldi	r24, 0x02	; 2
    3128:	0e 94 20 18 	call	0x3040	; 0x3040 <calcChannel>
    312c:	91 95       	neg	r25
    312e:	81 95       	neg	r24
    3130:	91 09       	sbc	r25, r1
    3132:	90 93 d9 05 	sts	0x05D9, r25
    3136:	80 93 d8 05 	sts	0x05D8, r24
	CONTROL[THR] = calcThrottle();
    313a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <calcThrottle>
    313e:	90 93 db 05 	sts	0x05DB, r25
    3142:	80 93 da 05 	sts	0x05DA, r24
    3146:	08 95       	ret

00003148 <controllerReset>:
}

void controllerReset()
{
	// reset PIDs
	memset (&PID, 0, sizeof(PID));
    3148:	8c e0       	ldi	r24, 0x0C	; 12
    314a:	e4 e7       	ldi	r30, 0x74	; 116
    314c:	f5 e0       	ldi	r31, 0x05	; 5
    314e:	df 01       	movw	r26, r30
    3150:	1d 92       	st	X+, r1
    3152:	8a 95       	dec	r24
    3154:	e9 f7       	brne	.-6      	; 0x3150 <controllerReset+0x8>
    3156:	08 95       	ret

00003158 <getAccAngle>:
	69, 72, 76, 80, 90, 
};

static int16_t getAccAngle(int16_t input)
{
	uint8_t index = abs(input) >> 1;
    3158:	fc 01       	movw	r30, r24
    315a:	97 ff       	sbrs	r25, 7
    315c:	04 c0       	rjmp	.+8      	; 0x3166 <getAccAngle+0xe>
    315e:	ee 27       	eor	r30, r30
    3160:	ff 27       	eor	r31, r31
    3162:	e8 1b       	sub	r30, r24
    3164:	f9 0b       	sbc	r31, r25
    3166:	f5 95       	asr	r31
    3168:	e7 95       	ror	r30
    316a:	e0 34       	cpi	r30, 0x40	; 64
    316c:	08 f0       	brcs	.+2      	; 0x3170 <getAccAngle+0x18>
    316e:	ef e3       	ldi	r30, 0x3F	; 63
	if (index >= length(convtab))
		index = length(convtab) - 1;
	int16_t conv = pgm_read_byte(&convtab[index]) * 2;
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	ef 55       	subi	r30, 0x5F	; 95
    3174:	f5 4f       	sbci	r31, 0xF5	; 245
    3176:	e4 91       	lpm	r30, Z
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	ee 0f       	add	r30, r30
    317c:	ff 1f       	adc	r31, r31
	if (input & 1) conv++;
    317e:	80 fd       	sbrc	r24, 0
    3180:	31 96       	adiw	r30, 0x01	; 1
	if (input < 0) conv = -conv;
    3182:	97 ff       	sbrs	r25, 7
    3184:	03 c0       	rjmp	.+6      	; 0x318c <getAccAngle+0x34>
    3186:	f1 95       	neg	r31
    3188:	e1 95       	neg	r30
    318a:	f1 09       	sbc	r31, r1
	return conv << 7;
}
    318c:	cf 01       	movw	r24, r30
    318e:	96 95       	lsr	r25
    3190:	98 2f       	mov	r25, r24
    3192:	88 27       	eor	r24, r24
    3194:	97 95       	ror	r25
    3196:	87 95       	ror	r24
    3198:	08 95       	ret

0000319a <calcComplementaryAngle>:
}

#define ALPHA				1
#define MAXALPHA			256
static int16_t calcComplementaryAngle(uint8_t axis)
{
    319a:	0f 93       	push	r16
    319c:	1f 93       	push	r17
	int32_t r;
	r = (int32_t)(ANGLE[axis] + GYRO_RATE[axis]) * (MAXALPHA - ALPHA);
    319e:	48 2f       	mov	r20, r24
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	44 0f       	add	r20, r20
    31a4:	55 1f       	adc	r21, r21
    31a6:	da 01       	movw	r26, r20
    31a8:	ae 51       	subi	r26, 0x1E	; 30
    31aa:	ba 4f       	sbci	r27, 0xFA	; 250
    31ac:	fa 01       	movw	r30, r20
    31ae:	e8 51       	subi	r30, 0x18	; 24
    31b0:	fa 4f       	sbci	r31, 0xFA	; 250
    31b2:	0d 90       	ld	r0, X+
    31b4:	bc 91       	ld	r27, X
    31b6:	a0 2d       	mov	r26, r0
    31b8:	80 81       	ld	r24, Z
    31ba:	91 81       	ldd	r25, Z+1	; 0x01
    31bc:	a8 0f       	add	r26, r24
    31be:	b9 1f       	adc	r27, r25
    31c0:	2f ef       	ldi	r18, 0xFF	; 255
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__usmulhisi3>
	r += (int32_t)ACC_ANGLE[axis] * ALPHA;
    31c8:	fa 01       	movw	r30, r20
    31ca:	e4 52       	subi	r30, 0x24	; 36
    31cc:	fa 4f       	sbci	r31, 0xFA	; 250
    31ce:	00 81       	ld	r16, Z
    31d0:	11 81       	ldd	r17, Z+1	; 0x01
    31d2:	22 27       	eor	r18, r18
    31d4:	17 fd       	sbrc	r17, 7
    31d6:	20 95       	com	r18
    31d8:	32 2f       	mov	r19, r18
    31da:	60 0f       	add	r22, r16
    31dc:	71 1f       	adc	r23, r17
    31de:	82 1f       	adc	r24, r18
    31e0:	93 1f       	adc	r25, r19
	r >>= 8;
    31e2:	bb 27       	eor	r27, r27
    31e4:	97 fd       	sbrc	r25, 7
    31e6:	ba 95       	dec	r27
    31e8:	a9 2f       	mov	r26, r25
    31ea:	98 2f       	mov	r25, r24
    31ec:	87 2f       	mov	r24, r23
	if (r < 0) r++;
    31ee:	b7 ff       	sbrs	r27, 7
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <calcComplementaryAngle+0x5e>
    31f2:	01 96       	adiw	r24, 0x01	; 1
    31f4:	a1 1d       	adc	r26, r1
    31f6:	b1 1d       	adc	r27, r1
	return r;
}
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	08 95       	ret

000031fe <imuCalculate>:
	
	lastCall += dt;
}

void imuCalculate()
{
    31fe:	8f 92       	push	r8
    3200:	9f 92       	push	r9
    3202:	af 92       	push	r10
    3204:	bf 92       	push	r11
    3206:	cf 92       	push	r12
    3208:	df 92       	push	r13
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
}

static void imuComplementary()
{
	static uint32_t lastCall;
	uint16_t dt = ticks() - lastCall;
    3212:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    3216:	80 90 80 05 	lds	r8, 0x0580
    321a:	90 90 81 05 	lds	r9, 0x0581
    321e:	a0 90 82 05 	lds	r10, 0x0582
    3222:	b0 90 83 05 	lds	r11, 0x0583
    3226:	eb 01       	movw	r28, r22
    3228:	c8 19       	sub	r28, r8
    322a:	d9 09       	sbc	r29, r9
		
	ACC_ANGLE[ROL] = getAccAngle(ACC[ROL]) + (Config.AccTrim[ROL] << 8);
    322c:	80 91 1f 06 	lds	r24, 0x061F
    3230:	90 91 20 06 	lds	r25, 0x0620
    3234:	0e 94 ac 18 	call	0x3158	; 0x3158 <getAccAngle>
    3238:	20 91 af 06 	lds	r18, 0x06AF
    323c:	33 27       	eor	r19, r19
    323e:	27 fd       	sbrc	r18, 7
    3240:	30 95       	com	r19
    3242:	32 2f       	mov	r19, r18
    3244:	22 27       	eor	r18, r18
    3246:	28 0f       	add	r18, r24
    3248:	39 1f       	adc	r19, r25
    324a:	30 93 dd 05 	sts	0x05DD, r19
    324e:	20 93 dc 05 	sts	0x05DC, r18
	ACC_ANGLE[PIT] = getAccAngle(ACC[PIT]) + (Config.AccTrim[PIT] << 8);
    3252:	80 91 21 06 	lds	r24, 0x0621
    3256:	90 91 22 06 	lds	r25, 0x0622
    325a:	0e 94 ac 18 	call	0x3158	; 0x3158 <getAccAngle>
    325e:	20 91 b0 06 	lds	r18, 0x06B0
    3262:	33 27       	eor	r19, r19
    3264:	27 fd       	sbrc	r18, 7
    3266:	30 95       	com	r19
    3268:	32 2f       	mov	r19, r18
    326a:	22 27       	eor	r18, r18
    326c:	28 0f       	add	r18, r24
    326e:	39 1f       	adc	r19, r25
    3270:	30 93 df 05 	sts	0x05DF, r19
    3274:	20 93 de 05 	sts	0x05DE, r18
	ACC_ANGLE[YAW] = getAccAngle(ACC[YAW]) + (90 << 8);
    3278:	80 91 23 06 	lds	r24, 0x0623
    327c:	90 91 24 06 	lds	r25, 0x0624
    3280:	0e 94 ac 18 	call	0x3158	; 0x3158 <getAccAngle>
    3284:	96 5a       	subi	r25, 0xA6	; 166
    3286:	90 93 e1 05 	sts	0x05E1, r25
    328a:	80 93 e0 05 	sts	0x05E0, r24
	return conv << 7;
}

static int16_t calcGyroRate(uint8_t axis, uint16_t dt)
{
	int32_t r = (int32_t)GYRO[axis] * dt >> 16;
    328e:	a0 91 19 06 	lds	r26, 0x0619
    3292:	b0 91 1a 06 	lds	r27, 0x061A
    3296:	9e 01       	movw	r18, r28
    3298:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__usmulhisi3>
    329c:	bb 27       	eor	r27, r27
    329e:	97 fd       	sbrc	r25, 7
    32a0:	b0 95       	com	r27
    32a2:	ab 2f       	mov	r26, r27
	if (r < 0) r++;	
    32a4:	b7 ff       	sbrs	r27, 7
    32a6:	03 c0       	rjmp	.+6      	; 0x32ae <imuCalculate+0xb0>
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	a1 1d       	adc	r26, r1
    32ac:	b1 1d       	adc	r27, r1
	return (int16_t)r;
    32ae:	90 93 e9 05 	sts	0x05E9, r25
    32b2:	80 93 e8 05 	sts	0x05E8, r24
	return conv << 7;
}

static int16_t calcGyroRate(uint8_t axis, uint16_t dt)
{
	int32_t r = (int32_t)GYRO[axis] * dt >> 16;
    32b6:	a0 91 1b 06 	lds	r26, 0x061B
    32ba:	b0 91 1c 06 	lds	r27, 0x061C
    32be:	9e 01       	movw	r18, r28
    32c0:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__usmulhisi3>
    32c4:	bb 27       	eor	r27, r27
    32c6:	97 fd       	sbrc	r25, 7
    32c8:	b0 95       	com	r27
    32ca:	ab 2f       	mov	r26, r27
	if (r < 0) r++;	
    32cc:	b7 ff       	sbrs	r27, 7
    32ce:	03 c0       	rjmp	.+6      	; 0x32d6 <imuCalculate+0xd8>
    32d0:	01 96       	adiw	r24, 0x01	; 1
    32d2:	a1 1d       	adc	r26, r1
    32d4:	b1 1d       	adc	r27, r1
	return (int16_t)r;
    32d6:	90 93 eb 05 	sts	0x05EB, r25
    32da:	80 93 ea 05 	sts	0x05EA, r24
	return conv << 7;
}

static int16_t calcGyroRate(uint8_t axis, uint16_t dt)
{
	int32_t r = (int32_t)GYRO[axis] * dt >> 16;
    32de:	a0 91 1d 06 	lds	r26, 0x061D
    32e2:	b0 91 1e 06 	lds	r27, 0x061E
    32e6:	9e 01       	movw	r18, r28
    32e8:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__usmulhisi3>
    32ec:	6c 01       	movw	r12, r24
    32ee:	ff 24       	eor	r15, r15
    32f0:	d7 fc       	sbrc	r13, 7
    32f2:	f0 94       	com	r15
    32f4:	ef 2c       	mov	r14, r15
	if (r < 0) r++;	
    32f6:	f7 fe       	sbrs	r15, 7
    32f8:	05 c0       	rjmp	.+10     	; 0x3304 <imuCalculate+0x106>
    32fa:	8f ef       	ldi	r24, 0xFF	; 255
    32fc:	c8 1a       	sub	r12, r24
    32fe:	d8 0a       	sbc	r13, r24
    3300:	e8 0a       	sbc	r14, r24
    3302:	f8 0a       	sbc	r15, r24
	ACC_ANGLE[PIT] = getAccAngle(ACC[PIT]) + (Config.AccTrim[PIT] << 8);
	ACC_ANGLE[YAW] = getAccAngle(ACC[YAW]) + (90 << 8);

	GYRO_RATE[ROL] = calcGyroRate(ROL, dt);
	GYRO_RATE[PIT] = calcGyroRate(PIT, dt);
	GYRO_RATE[YAW] = calcGyroRate(YAW, dt);
    3304:	d0 92 ed 05 	sts	0x05ED, r13
    3308:	c0 92 ec 05 	sts	0x05EC, r12
	
	ANGLE[ROL] = calcComplementaryAngle(ROL);
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	0e 94 cd 18 	call	0x319a	; 0x319a <calcComplementaryAngle>
    3312:	90 93 e3 05 	sts	0x05E3, r25
    3316:	80 93 e2 05 	sts	0x05E2, r24
	ANGLE[PIT] = calcComplementaryAngle(PIT);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	0e 94 cd 18 	call	0x319a	; 0x319a <calcComplementaryAngle>
    3320:	90 93 e5 05 	sts	0x05E5, r25
    3324:	80 93 e4 05 	sts	0x05E4, r24
}

static int16_t calcYawAngle()
{
	//int32_t r;
	return ANGLE[YAW] + GYRO_RATE[YAW];
    3328:	80 91 e6 05 	lds	r24, 0x05E6
    332c:	90 91 e7 05 	lds	r25, 0x05E7
    3330:	8c 0d       	add	r24, r12
    3332:	9d 1d       	adc	r25, r13
	GYRO_RATE[PIT] = calcGyroRate(PIT, dt);
	GYRO_RATE[YAW] = calcGyroRate(YAW, dt);
	
	ANGLE[ROL] = calcComplementaryAngle(ROL);
	ANGLE[PIT] = calcComplementaryAngle(PIT);
	ANGLE[YAW] = calcYawAngle();
    3334:	90 93 e7 05 	sts	0x05E7, r25
    3338:	80 93 e6 05 	sts	0x05E6, r24
	
	lastCall += dt;
    333c:	8c 0e       	add	r8, r28
    333e:	9d 1e       	adc	r9, r29
    3340:	a1 1c       	adc	r10, r1
    3342:	b1 1c       	adc	r11, r1
    3344:	80 92 80 05 	sts	0x0580, r8
    3348:	90 92 81 05 	sts	0x0581, r9
    334c:	a0 92 82 05 	sts	0x0582, r10
    3350:	b0 92 83 05 	sts	0x0583, r11
}

void imuCalculate()
{
	imuComplementary();
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	ff 90       	pop	r15
    335a:	ef 90       	pop	r14
    335c:	df 90       	pop	r13
    335e:	cf 90       	pop	r12
    3360:	bf 90       	pop	r11
    3362:	af 90       	pop	r10
    3364:	9f 90       	pop	r9
    3366:	8f 90       	pop	r8
    3368:	08 95       	ret

0000336a <lvaLoop>:
#include "digitals.h"
#include "controller.h"

void lvaLoop()
{
	if (BATT == 0 || Config.LVA == 0)
    336a:	20 91 18 06 	lds	r18, 0x0618
    336e:	22 23       	and	r18, r18
    3370:	c9 f0       	breq	.+50     	; 0x33a4 <lvaLoop+0x3a>
    3372:	80 91 a9 06 	lds	r24, 0x06A9
    3376:	88 23       	and	r24, r24
    3378:	a9 f0       	breq	.+42     	; 0x33a4 <lvaLoop+0x3a>
		return;
		
	if (BATT < Config.LVA)
    337a:	28 17       	cp	r18, r24
    337c:	98 f4       	brcc	.+38     	; 0x33a4 <lvaLoop+0x3a>
		digitalsBuzzInterval(limit(500 - (Config.LVA - BATT) * 6, 20, 500));
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	28 1b       	sub	r18, r24
    3382:	31 09       	sbc	r19, r1
    3384:	46 e0       	ldi	r20, 0x06	; 6
    3386:	42 9f       	mul	r20, r18
    3388:	c0 01       	movw	r24, r0
    338a:	43 9f       	mul	r20, r19
    338c:	90 0d       	add	r25, r0
    338e:	11 24       	eor	r1, r1
    3390:	44 ef       	ldi	r20, 0xF4	; 244
    3392:	51 e0       	ldi	r21, 0x01	; 1
    3394:	64 e1       	ldi	r22, 0x14	; 20
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	8c 50       	subi	r24, 0x0C	; 12
    339a:	9e 4f       	sbci	r25, 0xFE	; 254
    339c:	0e 94 16 18 	call	0x302c	; 0x302c <limit>
    33a0:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <digitalsBuzzInterval>
    33a4:	08 95       	ret

000033a6 <write16>:
		ESCCalibration();
}

#ifdef DEBUG
static void write16(int16_t v)
{
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	1f 92       	push	r1
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
	serialWriteChar(v & 0xFF);
    33b0:	99 83       	std	Y+1, r25	; 0x01
    33b2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialWriteChar>
	serialWriteChar(v >> 8);
    33b6:	99 81       	ldd	r25, Y+1	; 0x01
    33b8:	89 2f       	mov	r24, r25
}
    33ba:	0f 90       	pop	r0
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28

#ifdef DEBUG
static void write16(int16_t v)
{
	serialWriteChar(v & 0xFF);
	serialWriteChar(v >> 8);
    33c0:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <serialWriteChar>

000033c4 <arm>:
		}				
	}
}

void arm(uint8_t value)
{
    33c4:	90 91 ee 05 	lds	r25, 0x05EE
	if (value && !State.Armed)
    33c8:	88 23       	and	r24, r24
    33ca:	61 f0       	breq	.+24     	; 0x33e4 <arm+0x20>
    33cc:	91 11       	cpse	r25, r1
    33ce:	13 c0       	rjmp	.+38     	; 0x33f6 <arm+0x32>
	{
		State.Armed = ON;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	80 93 ee 05 	sts	0x05EE, r24
		LED = ON;
    33d6:	2b 9a       	sbi	0x05, 3	; 5
		menuRefresh();
    33d8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <menuRefresh>
		lcdDisable();
    33dc:	0e 94 2c 13 	call	0x2658	; 0x2658 <lcdDisable>
		controllerReset();
    33e0:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <controllerReset>
	}
	else if (!value && State.Armed)
    33e4:	99 23       	and	r25, r25
    33e6:	39 f0       	breq	.+14     	; 0x33f6 <arm+0x32>
	{
		State.Armed = OFF;
    33e8:	10 92 ee 05 	sts	0x05EE, r1
		LED = OFF;
    33ec:	2b 98       	cbi	0x05, 3	; 5
		menuRefresh();
    33ee:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <menuRefresh>
		lcdEnable();
    33f2:	0c 94 23 13 	jmp	0x2646	; 0x2646 <lcdEnable>
    33f6:	08 95       	ret

000033f8 <main>:
#endif

int main(void)
{
	// setup hardware w/o interrupts
	setup();
    33f8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <setup>
	
	// enable interrupts
	sei();
    33fc:	78 94       	sei
	wdt_disable();
}

static void init()
{
	configInit();
    33fe:	0e 94 0a 18 	call	0x3014	; 0x3014 <configInit>
	adcInit();
    3402:	0e 94 4a 10 	call	0x2094	; 0x2094 <adcInit>
	
	// rxInit will also call serialInit if mode = RX_MODE_CPPM
	rxInit(Config.ReceiverMode);
    3406:	80 91 9f 06 	lds	r24, 0x069F
    340a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <rxInit>
	
	mixerInit();
    340e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <mixerInit>
	pwmInit();
    3412:	0e 94 c9 13 	call	0x2792	; 0x2792 <pwmInit>
	keyboardInit();
    3416:	0e 94 36 11 	call	0x226c	; 0x226c <keyboardInit>
	
	// InitMPU6050 [10/14/2015 QuocTuanIT]
	mpu6050_init();
    341a:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <mpu6050_init>
	//_delay_ms(50);

#ifndef NO_LCD
	lcdInit();
    341e:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcdInit>
	menuInit();
    3422:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <menuInit>
}

static void startup()
{
#ifndef NO_LCD
	lcdClear();
    3426:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
	lcdSetPos(0, 0);
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdSelectFont(&font12x16);
    3432:	88 e9       	ldi	r24, 0x98	; 152
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
	lcdWriteString_P(PSTR("KK2-Copter"));
    343a:	82 ef       	ldi	r24, 0xF2	; 242
    343c:	9a e0       	ldi	r25, 0x0A	; 10
    343e:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
	lcdSelectFont(NULL);
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
	lcdSetPos(3, 0);
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	83 e0       	ldi	r24, 0x03	; 3
    344e:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdWriteString_P(versionNum);
    3452:	8e e0       	ldi	r24, 0x0E	; 14
    3454:	9b e0       	ldi	r25, 0x0B	; 11
    3456:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
	lcdSetPos(4, 0);
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	84 e0       	ldi	r24, 0x04	; 4
    345e:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdWriteString_P(versionAuthor);
    3462:	8d ef       	ldi	r24, 0xFD	; 253
    3464:	9a e0       	ldi	r25, 0x0A	; 10
    3466:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
#endif
	digitalsBuzzBlocking(500);
    346a:	84 ef       	ldi	r24, 0xF4	; 244
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <digitalsBuzzBlocking>
	WAITMS(700);	
    3472:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    3476:	8c 01       	movw	r16, r24
    3478:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    347c:	80 1b       	sub	r24, r16
    347e:	91 0b       	sbc	r25, r17
    3480:	8c 3b       	cpi	r24, 0xBC	; 188
    3482:	92 40       	sbci	r25, 0x02	; 2
    3484:	c8 f3       	brcs	.-14     	; 0x3478 <main+0x80>

	rxRead();
    3486:	0e 94 2c 14 	call	0x2858	; 0x2858 <rxRead>
	if (RX[THR] >= 90 || keyboardState() == (KEY_1 | KEY_4))		// enter ESC Calibration mode?
    348a:	80 91 ac 05 	lds	r24, 0x05AC
    348e:	90 91 ad 05 	lds	r25, 0x05AD
    3492:	8a 35       	cpi	r24, 0x5A	; 90
    3494:	91 05       	cpc	r25, r1
    3496:	9c f0       	brlt	.+38     	; 0x34be <main+0xc6>
	State.Error = e;
}

static void ESCCalibration()
{
	State.Mode = MODE_ESC_CAL;
    3498:	c1 e0       	ldi	r28, 0x01	; 1
    349a:	c0 93 f6 05 	sts	0x05F6, r28
#ifndef NO_LCD
	lcdClear();
    349e:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
	lcdSetPos(3, 18);
    34a2:	62 e1       	ldi	r22, 0x12	; 18
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdWriteString_P(PSTR("Calibrating ESCs"));
    34aa:	81 ee       	ldi	r24, 0xE1	; 225
    34ac:	9a e0       	ldi	r25, 0x0A	; 10
    34ae:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
#endif
	State.Armed = ON;
    34b2:	c0 93 ee 05 	sts	0x05EE, r28
	pwmEnable();
    34b6:	0e 94 de 13 	call	0x27bc	; 0x27bc <pwmEnable>
	while(1)
	{
		rxRead();
		for (uint8_t i = 0; i < 8; i++)
		{
			if (Config.Mixer[i].IsMotor)
    34ba:	c6 e0       	ldi	r28, 0x06	; 6
    34bc:	29 c0       	rjmp	.+82     	; 0x3510 <main+0x118>
#endif
	digitalsBuzzBlocking(500);
	WAITMS(700);	

	rxRead();
	if (RX[THR] >= 90 || keyboardState() == (KEY_1 | KEY_4))		// enter ESC Calibration mode?
    34be:	0e 94 dd 10 	call	0x21ba	; 0x21ba <keyboardState>
    34c2:	80 39       	cpi	r24, 0x90	; 144
    34c4:	49 f3       	breq	.-46     	; 0x3498 <main+0xa0>
	// init hardware
	init();

	startup();
	
	pwmEnable();
    34c6:	0e 94 de 13 	call	0x27bc	; 0x27bc <pwmEnable>
	LOOPUS(CYCLE_TIME)
    34ca:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    34ce:	6b 01       	movw	r12, r22
    34d0:	7c 01       	movw	r14, r24
	{
		static uint32_t lastStart;
		State.CycleTime = TICKSTOMICRO(_cycleStart - lastStart);
    34d2:	84 e1       	ldi	r24, 0x14	; 20
    34d4:	88 2e       	mov	r8, r24
    34d6:	91 2c       	mov	r9, r1
    34d8:	a1 2c       	mov	r10, r1
    34da:	b1 2c       	mov	r11, r1
#endif
}

static void checkState()
{
	State.ThrottleOff = RX[THR] < THROTTLE_OFF;
    34dc:	c1 e0       	ldi	r28, 0x01	; 1
    34de:	58 c0       	rjmp	.+176    	; 0x3590 <main+0x198>
	while(1)
	{
		rxRead();
		for (uint8_t i = 0; i < 8; i++)
		{
			if (Config.Mixer[i].IsMotor)
    34e0:	ce 9d       	mul	r28, r14
    34e2:	f0 01       	movw	r30, r0
    34e4:	cf 9d       	mul	r28, r15
    34e6:	f0 0d       	add	r31, r0
    34e8:	11 24       	eor	r1, r1
    34ea:	ea 54       	subi	r30, 0x4A	; 74
    34ec:	f9 4f       	sbci	r31, 0xF9	; 249
    34ee:	80 81       	ld	r24, Z
    34f0:	80 ff       	sbrs	r24, 0
    34f2:	13 c0       	rjmp	.+38     	; 0x351a <main+0x122>
				pwmWrite(i, RX_raw[THR]);
    34f4:	60 91 bc 05 	lds	r22, 0x05BC
    34f8:	70 91 bd 05 	lds	r23, 0x05BD
			else
				pwmWrite(i, PWM_MID);
    34fc:	8e 2d       	mov	r24, r14
    34fe:	0e 94 cd 13 	call	0x279a	; 0x279a <pwmWrite>
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	e3 1a       	sub	r14, r19
    3506:	f3 0a       	sbc	r15, r19
	State.Armed = ON;
	pwmEnable();
	while(1)
	{
		rxRead();
		for (uint8_t i = 0; i < 8; i++)
    3508:	48 e0       	ldi	r20, 0x08	; 8
    350a:	e4 16       	cp	r14, r20
    350c:	f1 04       	cpc	r15, r1
    350e:	41 f7       	brne	.-48     	; 0x34e0 <main+0xe8>
#endif
	State.Armed = ON;
	pwmEnable();
	while(1)
	{
		rxRead();
    3510:	0e 94 2c 14 	call	0x2858	; 0x2858 <rxRead>
    3514:	e1 2c       	mov	r14, r1
    3516:	f1 2c       	mov	r15, r1
    3518:	e3 cf       	rjmp	.-58     	; 0x34e0 <main+0xe8>
		for (uint8_t i = 0; i < 8; i++)
		{
			if (Config.Mixer[i].IsMotor)
				pwmWrite(i, RX_raw[THR]);
			else
				pwmWrite(i, PWM_MID);
    351a:	60 ef       	ldi	r22, 0xF0	; 240
    351c:	75 e0       	ldi	r23, 0x05	; 5
    351e:	ee cf       	rjmp	.-36     	; 0x34fc <main+0x104>
#ifndef NO_LCD
		EVERYMS(25)
			menuLoop();
#endif
	
		lvaLoop();
    3520:	0e 94 b5 19 	call	0x336a	; 0x336a <lvaLoop>
	 	digitalsLoop();
    3524:	0e 94 74 10 	call	0x20e8	; 0x20e8 <digitalsLoop>
	serialWriteChar(v >> 8);
}

static void debug_output()
{
	serialWriteChar(0x1F);
    3528:	8f e1       	ldi	r24, 0x1F	; 31
    352a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialWriteChar>
	serialWriteChar(0x1E);
    352e:	8e e1       	ldi	r24, 0x1E	; 30
    3530:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialWriteChar>
	serialWriteChar(0x1C);
    3534:	8c e1       	ldi	r24, 0x1C	; 28
    3536:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialWriteChar>
	//write16(GYRO[0]);	
	//write16(GYRO[1]);
	//write16(GYRO[2]);
	write16(CONTROL[0]);
    353a:	80 91 d4 05 	lds	r24, 0x05D4
    353e:	90 91 d5 05 	lds	r25, 0x05D5
    3542:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <write16>
	write16(CONTROL[1]);
    3546:	80 91 d6 05 	lds	r24, 0x05D6
    354a:	90 91 d7 05 	lds	r25, 0x05D7
    354e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <write16>
	write16(CONTROL[2]);
    3552:	80 91 d8 05 	lds	r24, 0x05D8
    3556:	90 91 d9 05 	lds	r25, 0x05D9
    355a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <write16>
	write16(CONTROL[3]);
    355e:	80 91 da 05 	lds	r24, 0x05DA
    3562:	90 91 db 05 	lds	r25, 0x05DB
    3566:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <write16>
	//write16(ANGLE[2] >> 8);
	//write16(MIXER[0]);
	//write16(MIXER[1]);
	//write16(MIXER[2]);
	//write16(MIXER[3]);
	write16(State.CalculationTime);
    356a:	80 91 f9 05 	lds	r24, 0x05F9
    356e:	90 91 fa 05 	lds	r25, 0x05FA
    3572:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <write16>
	while (millis() < ms + __m);
}

static __inline__ void __iWaitForTicks(uint32_t __m, uint32_t t)
{
	while (ticks() < t + __m);
    3576:	30 e4       	ldi	r19, 0x40	; 64
    3578:	c3 0e       	add	r12, r19
    357a:	3c e9       	ldi	r19, 0x9C	; 156
    357c:	d3 1e       	adc	r13, r19
    357e:	e1 1c       	adc	r14, r1
    3580:	f1 1c       	adc	r15, r1
    3582:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    3586:	6c 15       	cp	r22, r12
    3588:	7d 05       	cpc	r23, r13
    358a:	8e 05       	cpc	r24, r14
    358c:	9f 05       	cpc	r25, r15
    358e:	c8 f3       	brcs	.-14     	; 0x3582 <main+0x18a>
	
	pwmEnable();
	LOOPUS(CYCLE_TIME)
	{
		static uint32_t lastStart;
		State.CycleTime = TICKSTOMICRO(_cycleStart - lastStart);
    3590:	80 91 8a 05 	lds	r24, 0x058A
    3594:	90 91 8b 05 	lds	r25, 0x058B
    3598:	a0 91 8c 05 	lds	r26, 0x058C
    359c:	b0 91 8d 05 	lds	r27, 0x058D
    35a0:	a7 01       	movw	r20, r14
    35a2:	96 01       	movw	r18, r12
    35a4:	28 1b       	sub	r18, r24
    35a6:	39 0b       	sbc	r19, r25
    35a8:	4a 0b       	sbc	r20, r26
    35aa:	5b 0b       	sbc	r21, r27
    35ac:	ca 01       	movw	r24, r20
    35ae:	b9 01       	movw	r22, r18
    35b0:	a5 01       	movw	r20, r10
    35b2:	94 01       	movw	r18, r8
    35b4:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__udivmodsi4>
    35b8:	30 93 f8 05 	sts	0x05F8, r19
    35bc:	20 93 f7 05 	sts	0x05F7, r18
		lastStart = _cycleStart;
    35c0:	c0 92 8a 05 	sts	0x058A, r12
    35c4:	d0 92 8b 05 	sts	0x058B, r13
    35c8:	e0 92 8c 05 	sts	0x058C, r14
    35cc:	f0 92 8d 05 	sts	0x058D, r15
		
		rxRead();
    35d0:	0e 94 2c 14 	call	0x2858	; 0x2858 <rxRead>
#endif
}

static void checkState()
{
	State.ThrottleOff = RX[THR] < THROTTLE_OFF;
    35d4:	21 e0       	ldi	r18, 0x01	; 1
    35d6:	80 91 ac 05 	lds	r24, 0x05AC
    35da:	90 91 ad 05 	lds	r25, 0x05AD
    35de:	05 97       	sbiw	r24, 0x05	; 5
    35e0:	0c f0       	brlt	.+2      	; 0x35e4 <main+0x1ec>
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	20 93 ef 05 	sts	0x05EF, r18
	State.Aux1 = RX[AX1] > 10;
    35e8:	21 e0       	ldi	r18, 0x01	; 1
    35ea:	80 91 ae 05 	lds	r24, 0x05AE
    35ee:	90 91 af 05 	lds	r25, 0x05AF
    35f2:	0b 97       	sbiw	r24, 0x0b	; 11
    35f4:	0c f4       	brge	.+2      	; 0x35f8 <main+0x200>
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	20 93 f1 05 	sts	0x05F1, r18
	State.Aux2 = RX[AX2] > 10;
    35fc:	31 e0       	ldi	r19, 0x01	; 1
    35fe:	80 91 b0 05 	lds	r24, 0x05B0
    3602:	90 91 b1 05 	lds	r25, 0x05B1
    3606:	0b 97       	sbiw	r24, 0x0b	; 11
    3608:	0c f4       	brge	.+2      	; 0x360c <main+0x214>
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	30 93 f2 05 	sts	0x05F2, r19
	State.Aux3 = RX[AX3] > 10;
    3610:	31 e0       	ldi	r19, 0x01	; 1
    3612:	80 91 b2 05 	lds	r24, 0x05B2
    3616:	90 91 b3 05 	lds	r25, 0x05B3
    361a:	0b 97       	sbiw	r24, 0x0b	; 11
    361c:	0c f4       	brge	.+2      	; 0x3620 <main+0x228>
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	30 93 f3 05 	sts	0x05F3, r19
	State.Aux4 = RX[AX4] > 10;
    3624:	31 e0       	ldi	r19, 0x01	; 1
    3626:	80 91 b4 05 	lds	r24, 0x05B4
    362a:	90 91 b5 05 	lds	r25, 0x05B5
    362e:	0b 97       	sbiw	r24, 0x0b	; 11
    3630:	0c f4       	brge	.+2      	; 0x3634 <main+0x23c>
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	30 93 f4 05 	sts	0x05F4, r19

	if (Config.SelfLevelMode != SELFLEVEL_STICK)
    3638:	80 91 9b 06 	lds	r24, 0x069B
    363c:	88 23       	and	r24, r24
    363e:	39 f0       	breq	.+14     	; 0x364e <main+0x256>
	{
		if (Config.SelfLevelMode == SELFLEVEL_ON)
    3640:	82 30       	cpi	r24, 0x02	; 2
    3642:	19 f4       	brne	.+6      	; 0x364a <main+0x252>
			State.SelfLevel = ON;
    3644:	c0 93 f0 05 	sts	0x05F0, r28
    3648:	02 c0       	rjmp	.+4      	; 0x364e <main+0x256>
		else
			State.SelfLevel = State.Aux1;
    364a:	20 93 f0 05 	sts	0x05F0, r18
	}		
	
	uint8_t e = 0;
	if (!Config.CalibrateFlags)
    364e:	80 91 8e 06 	lds	r24, 0x068E
    3652:	88 23       	and	r24, r24
    3654:	11 f0       	breq	.+4      	; 0x365a <main+0x262>
			State.SelfLevel = ON;
		else
			State.SelfLevel = State.Aux1;
	}		
	
	uint8_t e = 0;
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	01 c0       	rjmp	.+2      	; 0x365c <main+0x264>
	if (!Config.CalibrateFlags)
		e |= ERR_NOT_CALIBRATED;
    365a:	90 e8       	ldi	r25, 0x80	; 128
	e |= (~RX_good) & (ERR_NO_PITCH|ERR_NO_ROLL|ERR_NO_THR|ERR_NO_YAW);
    365c:	80 91 a5 05 	lds	r24, 0x05A5
    3660:	80 95       	com	r24
    3662:	8f 70       	andi	r24, 0x0F	; 15
    3664:	89 2b       	or	r24, r25
	
	State.Error = e;
    3666:	80 93 f5 05 	sts	0x05F5, r24

static void armingLoop()
{
	static uint16_t startArm;
	static uint16_t startOff;
	uint16_t t = millis();
    366a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    366e:	8c 01       	movw	r16, r24
	
	if (menuPage != 0) return;
    3670:	80 91 fb 05 	lds	r24, 0x05FB
    3674:	81 11       	cpse	r24, r1
    3676:	6a c0       	rjmp	.+212    	; 0x374c <main+0x354>
	if (State.Error != 0) return;
    3678:	80 91 f5 05 	lds	r24, 0x05F5
    367c:	81 11       	cpse	r24, r1
    367e:	66 c0       	rjmp	.+204    	; 0x374c <main+0x354>
	
	if (startArm == 0)
    3680:	20 91 86 05 	lds	r18, 0x0586
    3684:	30 91 87 05 	lds	r19, 0x0587
    3688:	80 91 ef 05 	lds	r24, 0x05EF
    368c:	21 15       	cp	r18, r1
    368e:	31 05       	cpc	r19, r1
    3690:	91 f4       	brne	.+36     	; 0x36b6 <main+0x2be>
	{
		if (State.ThrottleOff && abs(RX[YAW]) > RX_THRESHOLD)
    3692:	88 23       	and	r24, r24
    3694:	71 f1       	breq	.+92     	; 0x36f2 <main+0x2fa>
    3696:	80 91 aa 05 	lds	r24, 0x05AA
    369a:	90 91 ab 05 	lds	r25, 0x05AB
    369e:	97 ff       	sbrs	r25, 7
    36a0:	03 c0       	rjmp	.+6      	; 0x36a8 <main+0x2b0>
    36a2:	91 95       	neg	r25
    36a4:	81 95       	neg	r24
    36a6:	91 09       	sbc	r25, r1
    36a8:	c3 97       	sbiw	r24, 0x33	; 51
    36aa:	1c f1       	brlt	.+70     	; 0x36f2 <main+0x2fa>
			startArm = t;
    36ac:	10 93 87 05 	sts	0x0587, r17
    36b0:	00 93 86 05 	sts	0x0586, r16
    36b4:	1e c0       	rjmp	.+60     	; 0x36f2 <main+0x2fa>
	}
	else if (!State.ThrottleOff || abs(RX[YAW]) < RX_THRESHOLD)
    36b6:	88 23       	and	r24, r24
    36b8:	c1 f0       	breq	.+48     	; 0x36ea <main+0x2f2>
    36ba:	80 91 aa 05 	lds	r24, 0x05AA
    36be:	90 91 ab 05 	lds	r25, 0x05AB
    36c2:	ac 01       	movw	r20, r24
    36c4:	4f 5c       	subi	r20, 0xCF	; 207
    36c6:	5f 4f       	sbci	r21, 0xFF	; 255
    36c8:	43 36       	cpi	r20, 0x63	; 99
    36ca:	51 05       	cpc	r21, r1
    36cc:	70 f0       	brcs	.+28     	; 0x36ea <main+0x2f2>
		startArm = 0;
	else if (t - startArm >= ARM_DELAY)
    36ce:	a8 01       	movw	r20, r16
    36d0:	42 1b       	sub	r20, r18
    36d2:	53 0b       	sbc	r21, r19
    36d4:	9a 01       	movw	r18, r20
    36d6:	20 3d       	cpi	r18, 0xD0	; 208
    36d8:	37 40       	sbci	r19, 0x07	; 7
    36da:	58 f0       	brcs	.+22     	; 0x36f2 <main+0x2fa>
	{
		if (RX[YAW] > RX_THRESHOLD)
    36dc:	c3 97       	sbiw	r24, 0x33	; 51
    36de:	14 f0       	brlt	.+4      	; 0x36e4 <main+0x2ec>
			arm(ON);
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	01 c0       	rjmp	.+2      	; 0x36e6 <main+0x2ee>
		else
			arm(OFF);
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <arm>
		startArm = 0;
    36ea:	10 92 87 05 	sts	0x0587, r1
    36ee:	10 92 86 05 	sts	0x0586, r1
	}				
	
	if (Config.AutoDisarm && !Config.ArmingMode)
    36f2:	80 91 9d 06 	lds	r24, 0x069D
    36f6:	88 23       	and	r24, r24
    36f8:	49 f1       	breq	.+82     	; 0x374c <main+0x354>
    36fa:	80 91 9c 06 	lds	r24, 0x069C
    36fe:	81 11       	cpse	r24, r1
    3700:	25 c0       	rjmp	.+74     	; 0x374c <main+0x354>
	{
		if (startOff == 0)
    3702:	80 91 84 05 	lds	r24, 0x0584
    3706:	90 91 85 05 	lds	r25, 0x0585
    370a:	20 91 ef 05 	lds	r18, 0x05EF
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	59 f4       	brne	.+22     	; 0x3728 <main+0x330>
		{
			if (State.ThrottleOff && State.Armed)
    3712:	22 23       	and	r18, r18
    3714:	d9 f0       	breq	.+54     	; 0x374c <main+0x354>
    3716:	80 91 ee 05 	lds	r24, 0x05EE
    371a:	88 23       	and	r24, r24
    371c:	b9 f0       	breq	.+46     	; 0x374c <main+0x354>
				startOff = t;
    371e:	10 93 85 05 	sts	0x0585, r17
    3722:	00 93 84 05 	sts	0x0584, r16
    3726:	12 c0       	rjmp	.+36     	; 0x374c <main+0x354>
		}
		else if (!State.ThrottleOff || !State.Armed)
    3728:	22 23       	and	r18, r18
    372a:	61 f0       	breq	.+24     	; 0x3744 <main+0x34c>
    372c:	20 91 ee 05 	lds	r18, 0x05EE
    3730:	22 23       	and	r18, r18
    3732:	41 f0       	breq	.+16     	; 0x3744 <main+0x34c>
		{
			startOff = 0;
		}
		else if (t - startOff >= DISARM_DELAY)
    3734:	08 1b       	sub	r16, r24
    3736:	19 0b       	sbc	r17, r25
    3738:	00 36       	cpi	r16, 0x60	; 96
    373a:	1a 4e       	sbci	r17, 0xEA	; 234
    373c:	38 f0       	brcs	.+14     	; 0x374c <main+0x354>
		{
			arm(OFF);
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <arm>
			startOff = 0;
    3744:	10 92 85 05 	sts	0x0585, r1
    3748:	10 92 84 05 	sts	0x0584, r1
		lastStart = _cycleStart;
		
		rxRead();
		checkState();
		armingLoop();
		sensorsRead();
    374c:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <sensorsRead>
		imuCalculate();
    3750:	0e 94 ff 18 	call	0x31fe	; 0x31fe <imuCalculate>
		controllerCalculate();
    3754:	0e 94 82 18 	call	0x3104	; 0x3104 <controllerCalculate>
		mixerCalculate();
    3758:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <mixerCalculate>
		mixerOutput();
    375c:	0e 94 a3 1c 	call	0x3946	; 0x3946 <mixerOutput>

		State.CalculationTime = TICKSTOMICRO(ticks() - _cycleStart);
    3760:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ticks>
    3764:	6c 19       	sub	r22, r12
    3766:	7d 09       	sbc	r23, r13
    3768:	8e 09       	sbc	r24, r14
    376a:	9f 09       	sbc	r25, r15
    376c:	a5 01       	movw	r20, r10
    376e:	94 01       	movw	r18, r8
    3770:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__udivmodsi4>
    3774:	30 93 fa 05 	sts	0x05FA, r19
    3778:	20 93 f9 05 	sts	0x05F9, r18

#ifndef NO_LCD
		EVERYMS(25)
    377c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    3780:	8c 01       	movw	r16, r24
    3782:	80 91 88 05 	lds	r24, 0x0588
    3786:	90 91 89 05 	lds	r25, 0x0589
    378a:	98 01       	movw	r18, r16
    378c:	28 1b       	sub	r18, r24
    378e:	39 0b       	sbc	r19, r25
    3790:	29 31       	cpi	r18, 0x19	; 25
    3792:	31 05       	cpc	r19, r1
    3794:	08 f4       	brcc	.+2      	; 0x3798 <main+0x3a0>
    3796:	c4 ce       	rjmp	.-632    	; 0x3520 <main+0x128>
			menuLoop();
    3798:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <menuLoop>
		mixerOutput();

		State.CalculationTime = TICKSTOMICRO(ticks() - _cycleStart);

#ifndef NO_LCD
		EVERYMS(25)
    379c:	10 93 89 05 	sts	0x0589, r17
    37a0:	00 93 88 05 	sts	0x0588, r16
    37a4:	ee cf       	rjmp	.-36     	; 0x3782 <main+0x38a>

000037a6 <mixerInit>:

uint16_t MIXER[OUTPUTS];
extern int16_t CHANNELS[4];

void mixerInit()
{
    37a6:	08 95       	ret

000037a8 <mixerLoadModel>:
	
}

void mixerLoadModel(uint8_t index)
{
    37a8:	cf 93       	push	r28
    37aa:	c8 2f       	mov	r28, r24
	uint8_t channels;
	model_t* pmodel;
	pmodel = (void*)pgm_read_word(&modelTable[index]);
    37ac:	e8 2f       	mov	r30, r24
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	ee 0f       	add	r30, r30
    37b2:	ff 1f       	adc	r31, r31
    37b4:	e5 5e       	subi	r30, 0xE5	; 229
    37b6:	f4 4f       	sbci	r31, 0xF4	; 244
    37b8:	65 91       	lpm	r22, Z+
    37ba:	74 91       	lpm	r23, Z
	channels = (uint8_t)pgm_read_byte(&pmodel->Channels);
    37bc:	fb 01       	movw	r30, r22
    37be:	32 96       	adiw	r30, 0x02	; 2
    37c0:	e4 91       	lpm	r30, Z
	memset(&Config.Mixer, 0, sizeof(Config.Mixer));
    37c2:	80 e3       	ldi	r24, 0x30	; 48
    37c4:	21 eb       	ldi	r18, 0xB1	; 177
    37c6:	36 e0       	ldi	r19, 0x06	; 6
    37c8:	d9 01       	movw	r26, r18
    37ca:	1d 92       	st	X+, r1
    37cc:	8a 95       	dec	r24
    37ce:	e9 f7       	brne	.-6      	; 0x37ca <mixerLoadModel+0x22>
	memcpy_P(&Config.Mixer, &pmodel->Channel, (uint8_t)(channels * sizeof(*pmodel->Channel)));
    37d0:	4e 2f       	mov	r20, r30
    37d2:	44 0f       	add	r20, r20
    37d4:	4e 0f       	add	r20, r30
    37d6:	44 0f       	add	r20, r20
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	6d 5f       	subi	r22, 0xFD	; 253
    37dc:	7f 4f       	sbci	r23, 0xFF	; 255
    37de:	c9 01       	movw	r24, r18
    37e0:	0e 94 24 27 	call	0x4e48	; 0x4e48 <memcpy_P>
	Config.MixerIndex = index;
    37e4:	c0 93 a0 06 	sts	0x06A0, r28
}
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <mixerCalculate>:

void mixerCalculate()
{
    37ec:	4f 92       	push	r4
    37ee:	5f 92       	push	r5
    37f0:	6f 92       	push	r6
    37f2:	7f 92       	push	r7
    37f4:	9f 92       	push	r9
    37f6:	af 92       	push	r10
    37f8:	bf 92       	push	r11
    37fa:	cf 92       	push	r12
    37fc:	df 92       	push	r13
    37fe:	ef 92       	push	r14
    3800:	ff 92       	push	r15
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	c6 eb       	ldi	r28, 0xB6	; 182
    380c:	d6 e0       	ldi	r29, 0x06	; 6
    380e:	3c ef       	ldi	r19, 0xFC	; 252
    3810:	a3 2e       	mov	r10, r19
    3812:	35 e0       	ldi	r19, 0x05	; 5
    3814:	b3 2e       	mov	r11, r19
    3816:	00 e0       	ldi	r16, 0x00	; 0
    3818:	10 e0       	ldi	r17, 0x00	; 0
	{
 		if (Config.Mixer[i].Flags == FLAG_NONE)
 			MIXER[i] = 0;
 		else
		{
			if (Config.Mixer[i].IsServo)
    381a:	46 e0       	ldi	r20, 0x06	; 6
    381c:	94 2e       	mov	r9, r20
{
	int32_t r;
	
	for (uint8_t i = 0; i < OUTPUTS; i++)
	{
 		if (Config.Mixer[i].Flags == FLAG_NONE)
    381e:	88 81       	ld	r24, Y
    3820:	81 11       	cpse	r24, r1
    3822:	04 c0       	rjmp	.+8      	; 0x382c <mixerCalculate+0x40>
 			MIXER[i] = 0;
    3824:	f5 01       	movw	r30, r10
    3826:	11 82       	std	Z+1, r1	; 0x01
    3828:	10 82       	st	Z, r1
    382a:	73 c0       	rjmp	.+230    	; 0x3912 <mixerCalculate+0x126>
 		else
		{
			if (Config.Mixer[i].IsServo)
    382c:	90 9e       	mul	r9, r16
    382e:	f0 01       	movw	r30, r0
    3830:	91 9e       	mul	r9, r17
    3832:	f0 0d       	add	r31, r0
    3834:	11 24       	eor	r1, r1
    3836:	ea 54       	subi	r30, 0x4A	; 74
    3838:	f9 4f       	sbci	r31, 0xF9	; 249
    383a:	80 81       	ld	r24, Z
    383c:	81 ff       	sbrs	r24, 1
    383e:	07 c0       	rjmp	.+14     	; 0x384e <mixerCalculate+0x62>
				r = PWM_MID - PWM_LOW;
    3840:	24 ea       	ldi	r18, 0xA4	; 164
    3842:	42 2e       	mov	r4, r18
    3844:	55 24       	eor	r5, r5
    3846:	53 94       	inc	r5
    3848:	61 2c       	mov	r6, r1
    384a:	71 2c       	mov	r7, r1
    384c:	03 c0       	rjmp	.+6      	; 0x3854 <mixerCalculate+0x68>
			else
				r = 0;
    384e:	41 2c       	mov	r4, r1
    3850:	51 2c       	mov	r5, r1
    3852:	32 01       	movw	r6, r4
				
			r += (int32_t) CONTROL[ROL] * Config.Mixer[i].Aileron;
    3854:	20 91 d4 05 	lds	r18, 0x05D4
    3858:	30 91 d5 05 	lds	r19, 0x05D5
    385c:	fe 01       	movw	r30, r28
    385e:	34 97       	sbiw	r30, 0x04	; 4
    3860:	a0 81       	ld	r26, Z
    3862:	bb 27       	eor	r27, r27
    3864:	a7 fd       	sbrc	r26, 7
    3866:	b0 95       	com	r27
    3868:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__mulhisi3>
    386c:	6b 01       	movw	r12, r22
    386e:	7c 01       	movw	r14, r24
    3870:	c4 0c       	add	r12, r4
    3872:	d5 1c       	adc	r13, r5
    3874:	e6 1c       	adc	r14, r6
    3876:	f7 1c       	adc	r15, r7
			r += (int32_t) CONTROL[PIT] * Config.Mixer[i].Elevator;
    3878:	20 91 d6 05 	lds	r18, 0x05D6
    387c:	30 91 d7 05 	lds	r19, 0x05D7
    3880:	31 96       	adiw	r30, 0x01	; 1
    3882:	a0 81       	ld	r26, Z
    3884:	bb 27       	eor	r27, r27
    3886:	a7 fd       	sbrc	r26, 7
    3888:	b0 95       	com	r27
    388a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__mulhisi3>
    388e:	c6 0e       	add	r12, r22
    3890:	d7 1e       	adc	r13, r23
    3892:	e8 1e       	adc	r14, r24
    3894:	f9 1e       	adc	r15, r25
			r += (int32_t) CONTROL[YAW] * Config.Mixer[i].Rudder;
    3896:	20 91 d8 05 	lds	r18, 0x05D8
    389a:	30 91 d9 05 	lds	r19, 0x05D9
    389e:	31 96       	adiw	r30, 0x01	; 1
    38a0:	a0 81       	ld	r26, Z
    38a2:	bb 27       	eor	r27, r27
    38a4:	a7 fd       	sbrc	r26, 7
    38a6:	b0 95       	com	r27
    38a8:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__mulhisi3>
    38ac:	c6 0e       	add	r12, r22
    38ae:	d7 1e       	adc	r13, r23
    38b0:	e8 1e       	adc	r14, r24
    38b2:	f9 1e       	adc	r15, r25
			r += (int32_t) CONTROL[THR] * Config.Mixer[i].Throttle;
    38b4:	20 91 da 05 	lds	r18, 0x05DA
    38b8:	30 91 db 05 	lds	r19, 0x05DB
    38bc:	33 97       	sbiw	r30, 0x03	; 3
    38be:	a0 81       	ld	r26, Z
    38c0:	bb 27       	eor	r27, r27
    38c2:	a7 fd       	sbrc	r26, 7
    38c4:	b0 95       	com	r27
    38c6:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__mulhisi3>
    38ca:	c6 0e       	add	r12, r22
    38cc:	d7 1e       	adc	r13, r23
    38ce:	e8 1e       	adc	r14, r24
    38d0:	f9 1e       	adc	r15, r25
    38d2:	34 96       	adiw	r30, 0x04	; 4
			r += (int32_t) ((PWM_MID - PWM_LOW) * 32 / 50) * Config.Mixer[i].Offset;
    38d4:	a0 81       	ld	r26, Z
    38d6:	bb 27       	eor	r27, r27
    38d8:	a7 fd       	sbrc	r26, 7
    38da:	b0 95       	com	r27
    38dc:	2c e0       	ldi	r18, 0x0C	; 12
    38de:	31 e0       	ldi	r19, 0x01	; 1
    38e0:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__usmulhisi3>
    38e4:	c6 0e       	add	r12, r22
    38e6:	d7 1e       	adc	r13, r23
    38e8:	e8 1e       	adc	r14, r24
    38ea:	f9 1e       	adc	r15, r25
			MIXER[i] = limit(PWM_LOW + (r >> 5), PWM_MIN, PWM_MAX);
    38ec:	95 e0       	ldi	r25, 0x05	; 5
    38ee:	f5 94       	asr	r15
    38f0:	e7 94       	ror	r14
    38f2:	d7 94       	ror	r13
    38f4:	c7 94       	ror	r12
    38f6:	9a 95       	dec	r25
    38f8:	d1 f7       	brne	.-12     	; 0x38ee <mixerCalculate+0x102>
    38fa:	c6 01       	movw	r24, r12
    38fc:	84 5b       	subi	r24, 0xB4	; 180
    38fe:	9b 4f       	sbci	r25, 0xFB	; 251
    3900:	44 e3       	ldi	r20, 0x34	; 52
    3902:	58 e0       	ldi	r21, 0x08	; 8
    3904:	64 e8       	ldi	r22, 0x84	; 132
    3906:	73 e0       	ldi	r23, 0x03	; 3
    3908:	0e 94 16 18 	call	0x302c	; 0x302c <limit>
    390c:	f5 01       	movw	r30, r10
    390e:	91 83       	std	Z+1, r25	; 0x01
    3910:	80 83       	st	Z, r24
    3912:	0f 5f       	subi	r16, 0xFF	; 255
    3914:	1f 4f       	sbci	r17, 0xFF	; 255
    3916:	26 96       	adiw	r28, 0x06	; 6
    3918:	f2 e0       	ldi	r31, 0x02	; 2
    391a:	af 0e       	add	r10, r31
    391c:	b1 1c       	adc	r11, r1

void mixerCalculate()
{
	int32_t r;
	
	for (uint8_t i = 0; i < OUTPUTS; i++)
    391e:	08 30       	cpi	r16, 0x08	; 8
    3920:	11 05       	cpc	r17, r1
    3922:	09 f0       	breq	.+2      	; 0x3926 <mixerCalculate+0x13a>
    3924:	7c cf       	rjmp	.-264    	; 0x381e <mixerCalculate+0x32>
			r += (int32_t) CONTROL[THR] * Config.Mixer[i].Throttle;
			r += (int32_t) ((PWM_MID - PWM_LOW) * 32 / 50) * Config.Mixer[i].Offset;
			MIXER[i] = limit(PWM_LOW + (r >> 5), PWM_MIN, PWM_MAX);
		}
	}
}
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	ff 90       	pop	r15
    3930:	ef 90       	pop	r14
    3932:	df 90       	pop	r13
    3934:	cf 90       	pop	r12
    3936:	bf 90       	pop	r11
    3938:	af 90       	pop	r10
    393a:	9f 90       	pop	r9
    393c:	7f 90       	pop	r7
    393e:	6f 90       	pop	r6
    3940:	5f 90       	pop	r5
    3942:	4f 90       	pop	r4
    3944:	08 95       	ret

00003946 <mixerOutput>:

void mixerOutput()
{
    3946:	ff 92       	push	r15
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	0c ef       	ldi	r16, 0xFC	; 252
    3952:	15 e0       	ldi	r17, 0x05	; 5
    3954:	c0 e0       	ldi	r28, 0x00	; 0
    3956:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < OUTPUTS; i++)
	{
		if (Config.Mixer[i].IsServo)
    3958:	56 e0       	ldi	r21, 0x06	; 6
    395a:	f5 2e       	mov	r15, r21
    395c:	8c 2f       	mov	r24, r28
    395e:	fc 9e       	mul	r15, r28
    3960:	f0 01       	movw	r30, r0
    3962:	fd 9e       	mul	r15, r29
    3964:	f0 0d       	add	r31, r0
    3966:	11 24       	eor	r1, r1
    3968:	ea 54       	subi	r30, 0x4A	; 74
    396a:	f9 4f       	sbci	r31, 0xF9	; 249
    396c:	90 81       	ld	r25, Z
    396e:	91 ff       	sbrs	r25, 1
    3970:	04 c0       	rjmp	.+8      	; 0x397a <mixerOutput+0x34>
			pwmWrite(i, MIXER[i]);
    3972:	f8 01       	movw	r30, r16
    3974:	60 81       	ld	r22, Z
    3976:	71 81       	ldd	r23, Z+1	; 0x01
    3978:	20 c0       	rjmp	.+64     	; 0x39ba <mixerOutput+0x74>
		else if (Config.Mixer[i].IsMotor)
    397a:	90 ff       	sbrs	r25, 0
    397c:	1b c0       	rjmp	.+54     	; 0x39b4 <mixerOutput+0x6e>
		{
			if (State.Armed && !State.ThrottleOff)
    397e:	90 91 ee 05 	lds	r25, 0x05EE
    3982:	99 23       	and	r25, r25
    3984:	a1 f0       	breq	.+40     	; 0x39ae <mixerOutput+0x68>
    3986:	90 91 ef 05 	lds	r25, 0x05EF
    398a:	91 11       	cpse	r25, r1
    398c:	10 c0       	rjmp	.+32     	; 0x39ae <mixerOutput+0x68>
				pwmWrite(i, max(MIXER[i], PWM_LOW + Config.MinThrottle * 10));
    398e:	20 91 a5 06 	lds	r18, 0x06A5
    3992:	fa e0       	ldi	r31, 0x0A	; 10
    3994:	2f 9f       	mul	r18, r31
    3996:	90 01       	movw	r18, r0
    3998:	11 24       	eor	r1, r1
    399a:	24 5b       	subi	r18, 0xB4	; 180
    399c:	3b 4f       	sbci	r19, 0xFB	; 251
    399e:	f8 01       	movw	r30, r16
    39a0:	60 81       	ld	r22, Z
    39a2:	71 81       	ldd	r23, Z+1	; 0x01
    39a4:	62 17       	cp	r22, r18
    39a6:	73 07       	cpc	r23, r19
    39a8:	40 f4       	brcc	.+16     	; 0x39ba <mixerOutput+0x74>
    39aa:	b9 01       	movw	r22, r18
    39ac:	06 c0       	rjmp	.+12     	; 0x39ba <mixerOutput+0x74>
			else
				pwmWrite(i, PWM_LOW);
    39ae:	6c e4       	ldi	r22, 0x4C	; 76
    39b0:	74 e0       	ldi	r23, 0x04	; 4
    39b2:	03 c0       	rjmp	.+6      	; 0x39ba <mixerOutput+0x74>
		}
		else
			pwmWrite(i, 0);
    39b4:	60 e0       	ldi	r22, 0x00	; 0
    39b6:	70 e0       	ldi	r23, 0x00	; 0
    39b8:	8c 2f       	mov	r24, r28
    39ba:	0e 94 cd 13 	call	0x279a	; 0x279a <pwmWrite>
    39be:	21 96       	adiw	r28, 0x01	; 1
    39c0:	0e 5f       	subi	r16, 0xFE	; 254
    39c2:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void mixerOutput()
{
	for (uint8_t i = 0; i < OUTPUTS; i++)
    39c4:	c8 30       	cpi	r28, 0x08	; 8
    39c6:	d1 05       	cpc	r29, r1
    39c8:	49 f6       	brne	.-110    	; 0x395c <mixerOutput+0x16>
				pwmWrite(i, PWM_LOW);
		}
		else
			pwmWrite(i, 0);
	}			
}
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	08 95       	ret

000039d6 <sensorsRead>:
#define GYRO_DEADBAND	2


// Edit do read data from MPU6050 [10/14/2015 QuocTuanIT]
void sensorsRead()
{
    39d6:	ef 92       	push	r14
    39d8:	ff 92       	push	r15
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	2c 97       	sbiw	r28, 0x0c	; 12
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	f8 94       	cli
    39ec:	de bf       	out	0x3e, r29	; 62
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	cd bf       	out	0x3d, r28	; 61
	int16_t ax = 0;
    39f2:	1c 86       	std	Y+12, r1	; 0x0c
    39f4:	1b 86       	std	Y+11, r1	; 0x0b
	int16_t ay = 0;
    39f6:	1a 86       	std	Y+10, r1	; 0x0a
    39f8:	19 86       	std	Y+9, r1	; 0x09
	int16_t az = 0;
    39fa:	18 86       	std	Y+8, r1	; 0x08
    39fc:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gx = 0;
    39fe:	1e 82       	std	Y+6, r1	; 0x06
    3a00:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gy = 0;
    3a02:	1c 82       	std	Y+4, r1	; 0x04
    3a04:	1b 82       	std	Y+3, r1	; 0x03
	int16_t gz = 0;
    3a06:	1a 82       	std	Y+2, r1	; 0x02
    3a08:	19 82       	std	Y+1, r1	; 0x01
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    3a0a:	ae 01       	movw	r20, r28
    3a0c:	4f 5f       	subi	r20, 0xFF	; 255
    3a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a10:	7a 01       	movw	r14, r20
    3a12:	8e 01       	movw	r16, r28
    3a14:	0d 5f       	subi	r16, 0xFD	; 253
    3a16:	1f 4f       	sbci	r17, 0xFF	; 255
    3a18:	9e 01       	movw	r18, r28
    3a1a:	2b 5f       	subi	r18, 0xFB	; 251
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	4a 5f       	subi	r20, 0xFA	; 250
    3a20:	5f 4f       	sbci	r21, 0xFF	; 255
    3a22:	be 01       	movw	r22, r28
    3a24:	67 5f       	subi	r22, 0xF7	; 247
    3a26:	7f 4f       	sbci	r23, 0xFF	; 255
    3a28:	ce 01       	movw	r24, r28
    3a2a:	0b 96       	adiw	r24, 0x0b	; 11
    3a2c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <mpu6050_getRawData>

	GYRO_raw[PIT] = gx;//adcGet(ADC_GYR_X);
    3a30:	2d 81       	ldd	r18, Y+5	; 0x05
    3a32:	3e 81       	ldd	r19, Y+6	; 0x06
    3a34:	30 93 15 06 	sts	0x0615, r19
    3a38:	20 93 14 06 	sts	0x0614, r18
	GYRO[PIT] = -(int16_t)(GYRO_raw[PIT] - Config.GYRO_zero[PIT]);
    3a3c:	80 91 84 06 	lds	r24, 0x0684
    3a40:	90 91 85 06 	lds	r25, 0x0685
    3a44:	82 1b       	sub	r24, r18
    3a46:	93 0b       	sbc	r25, r19
#if GYRO_DEADBAND > 0
	if (abs(GYRO[PIT]) <= GYRO_DEADBAND) GYRO[PIT] = 0;
    3a48:	9c 01       	movw	r18, r24
    3a4a:	2e 5f       	subi	r18, 0xFE	; 254
    3a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4e:	25 30       	cpi	r18, 0x05	; 5
    3a50:	31 05       	cpc	r19, r1
    3a52:	28 f0       	brcs	.+10     	; 0x3a5e <sensorsRead+0x88>
	int16_t gy = 0;
	int16_t gz = 0;
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);

	GYRO_raw[PIT] = gx;//adcGet(ADC_GYR_X);
	GYRO[PIT] = -(int16_t)(GYRO_raw[PIT] - Config.GYRO_zero[PIT]);
    3a54:	90 93 1c 06 	sts	0x061C, r25
    3a58:	80 93 1b 06 	sts	0x061B, r24
    3a5c:	04 c0       	rjmp	.+8      	; 0x3a66 <sensorsRead+0x90>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[PIT]) <= GYRO_DEADBAND) GYRO[PIT] = 0;
    3a5e:	10 92 1c 06 	sts	0x061C, r1
    3a62:	10 92 1b 06 	sts	0x061B, r1
#endif

	GYRO_raw[ROL] = gy;//adcGet(ADC_GYR_Y);
    3a66:	2b 81       	ldd	r18, Y+3	; 0x03
    3a68:	3c 81       	ldd	r19, Y+4	; 0x04
    3a6a:	30 93 13 06 	sts	0x0613, r19
    3a6e:	20 93 12 06 	sts	0x0612, r18
	GYRO[ROL] = -(int16_t)(GYRO_raw[ROL] - Config.GYRO_zero[ROL]);
    3a72:	80 91 82 06 	lds	r24, 0x0682
    3a76:	90 91 83 06 	lds	r25, 0x0683
    3a7a:	82 1b       	sub	r24, r18
    3a7c:	93 0b       	sbc	r25, r19
#if GYRO_DEADBAND > 0
	if (abs(GYRO[ROL]) <= GYRO_DEADBAND) GYRO[ROL] = 0;
    3a7e:	9c 01       	movw	r18, r24
    3a80:	2e 5f       	subi	r18, 0xFE	; 254
    3a82:	3f 4f       	sbci	r19, 0xFF	; 255
    3a84:	25 30       	cpi	r18, 0x05	; 5
    3a86:	31 05       	cpc	r19, r1
    3a88:	28 f0       	brcs	.+10     	; 0x3a94 <sensorsRead+0xbe>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[PIT]) <= GYRO_DEADBAND) GYRO[PIT] = 0;
#endif

	GYRO_raw[ROL] = gy;//adcGet(ADC_GYR_Y);
	GYRO[ROL] = -(int16_t)(GYRO_raw[ROL] - Config.GYRO_zero[ROL]);
    3a8a:	90 93 1a 06 	sts	0x061A, r25
    3a8e:	80 93 19 06 	sts	0x0619, r24
    3a92:	04 c0       	rjmp	.+8      	; 0x3a9c <sensorsRead+0xc6>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[ROL]) <= GYRO_DEADBAND) GYRO[ROL] = 0;
    3a94:	10 92 1a 06 	sts	0x061A, r1
    3a98:	10 92 19 06 	sts	0x0619, r1
#endif

	GYRO_raw[YAW] = gz;//adcGet(ADC_GYR_Z);
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	90 93 17 06 	sts	0x0617, r25
    3aa4:	80 93 16 06 	sts	0x0616, r24
	GYRO[YAW] = (int16_t)(GYRO_raw[YAW] - Config.GYRO_zero[YAW]);
    3aa8:	20 91 86 06 	lds	r18, 0x0686
    3aac:	30 91 87 06 	lds	r19, 0x0687
    3ab0:	82 1b       	sub	r24, r18
    3ab2:	93 0b       	sbc	r25, r19
#if GYRO_DEADBAND > 0
	if (abs(GYRO[YAW]) <= GYRO_DEADBAND) GYRO[YAW] = 0;
    3ab4:	9c 01       	movw	r18, r24
    3ab6:	2e 5f       	subi	r18, 0xFE	; 254
    3ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aba:	25 30       	cpi	r18, 0x05	; 5
    3abc:	31 05       	cpc	r19, r1
    3abe:	28 f0       	brcs	.+10     	; 0x3aca <sensorsRead+0xf4>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[ROL]) <= GYRO_DEADBAND) GYRO[ROL] = 0;
#endif

	GYRO_raw[YAW] = gz;//adcGet(ADC_GYR_Z);
	GYRO[YAW] = (int16_t)(GYRO_raw[YAW] - Config.GYRO_zero[YAW]);
    3ac0:	90 93 1e 06 	sts	0x061E, r25
    3ac4:	80 93 1d 06 	sts	0x061D, r24
    3ac8:	04 c0       	rjmp	.+8      	; 0x3ad2 <sensorsRead+0xfc>
#if GYRO_DEADBAND > 0
	if (abs(GYRO[YAW]) <= GYRO_DEADBAND) GYRO[YAW] = 0;
    3aca:	10 92 1e 06 	sts	0x061E, r1
    3ace:	10 92 1d 06 	sts	0x061D, r1
#endif
	
	ACC_raw[PIT] = ax;//adcGet(ADC_ACC_X);
    3ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ad6:	90 93 0f 06 	sts	0x060F, r25
    3ada:	80 93 0e 06 	sts	0x060E, r24
	ACC[PIT] = (int16_t)(ACC_raw[PIT] - Config.ACC_zero[PIT]);
    3ade:	20 91 8a 06 	lds	r18, 0x068A
    3ae2:	30 91 8b 06 	lds	r19, 0x068B
    3ae6:	82 1b       	sub	r24, r18
    3ae8:	93 0b       	sbc	r25, r19
    3aea:	90 93 22 06 	sts	0x0622, r25
    3aee:	80 93 21 06 	sts	0x0621, r24
	ACC_raw[ROL] = ay;//adcGet(ADC_ACC_Y);
    3af2:	89 85       	ldd	r24, Y+9	; 0x09
    3af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af6:	90 93 0d 06 	sts	0x060D, r25
    3afa:	80 93 0c 06 	sts	0x060C, r24
	ACC[ROL] = (int16_t)(ACC_raw[ROL] - Config.ACC_zero[ROL]);
    3afe:	20 91 88 06 	lds	r18, 0x0688
    3b02:	30 91 89 06 	lds	r19, 0x0689
    3b06:	82 1b       	sub	r24, r18
    3b08:	93 0b       	sbc	r25, r19
    3b0a:	90 93 20 06 	sts	0x0620, r25
    3b0e:	80 93 1f 06 	sts	0x061F, r24
	ACC_raw[YAW] = az;//adcGet(ADC_ACC_Z);
    3b12:	8f 81       	ldd	r24, Y+7	; 0x07
    3b14:	98 85       	ldd	r25, Y+8	; 0x08
    3b16:	90 93 11 06 	sts	0x0611, r25
    3b1a:	80 93 10 06 	sts	0x0610, r24
	ACC[YAW] = (int16_t)(ACC_raw[YAW] - Config.ACC_zero[YAW]);
    3b1e:	20 91 8c 06 	lds	r18, 0x068C
    3b22:	30 91 8d 06 	lds	r19, 0x068D
    3b26:	82 1b       	sub	r24, r18
    3b28:	93 0b       	sbc	r25, r19
    3b2a:	90 93 24 06 	sts	0x0624, r25
    3b2e:	80 93 23 06 	sts	0x0623, r24

	BATT = adcGet(ADC_VBAT) * 100 / 376;
    3b32:	83 e0       	ldi	r24, 0x03	; 3
    3b34:	0e 94 53 10 	call	0x20a6	; 0x20a6 <adcGet>
    3b38:	24 e6       	ldi	r18, 0x64	; 100
    3b3a:	ac 01       	movw	r20, r24
    3b3c:	24 9f       	mul	r18, r20
    3b3e:	c0 01       	movw	r24, r0
    3b40:	25 9f       	mul	r18, r21
    3b42:	90 0d       	add	r25, r0
    3b44:	11 24       	eor	r1, r1
    3b46:	68 e7       	ldi	r22, 0x78	; 120
    3b48:	71 e0       	ldi	r23, 0x01	; 1
    3b4a:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__udivmodhi4>
    3b4e:	60 93 18 06 	sts	0x0618, r22
	GYRO[2] = 100;
	ACC[0] = 100;
	ACC[1] = 100;
	ACC[2] = 100;
#endif
}
    3b52:	2c 96       	adiw	r28, 0x0c	; 12
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	08 95       	ret

00003b6c <sensorsCalibrate>:

void sensorsCalibrate()
{
	sensorsRead();
    3b6c:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <sensorsRead>
	memcpy(&Config.GYRO_zero, &GYRO_raw, sizeof(Config.GYRO_zero));
    3b70:	86 e0       	ldi	r24, 0x06	; 6
    3b72:	e2 e1       	ldi	r30, 0x12	; 18
    3b74:	f6 e0       	ldi	r31, 0x06	; 6
    3b76:	a2 e8       	ldi	r26, 0x82	; 130
    3b78:	b6 e0       	ldi	r27, 0x06	; 6
    3b7a:	01 90       	ld	r0, Z+
    3b7c:	0d 92       	st	X+, r0
    3b7e:	8a 95       	dec	r24
    3b80:	e1 f7       	brne	.-8      	; 0x3b7a <sensorsCalibrate+0xe>
	memcpy(&Config.ACC_zero, &ACC_raw, sizeof(Config.ACC_zero));
    3b82:	86 e0       	ldi	r24, 0x06	; 6
    3b84:	ec e0       	ldi	r30, 0x0C	; 12
    3b86:	f6 e0       	ldi	r31, 0x06	; 6
    3b88:	a8 e8       	ldi	r26, 0x88	; 136
    3b8a:	b6 e0       	ldi	r27, 0x06	; 6
    3b8c:	01 90       	ld	r0, Z+
    3b8e:	0d 92       	st	X+, r0
    3b90:	8a 95       	dec	r24
    3b92:	e1 f7       	brne	.-8      	; 0x3b8c <sensorsCalibrate+0x20>
	//Config.ACC_zero[ZAXIS] -= 124;
	Config.CalibrateFlags = 1;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	80 93 8e 06 	sts	0x068E, r24
    3b9a:	08 95       	ret

00003b9c <tsmMain>:
	menuLoop();
}

static PGM_P tsmMain(uint8_t index)
{
	return (PGM_P)pgm_read_word(&lstMenu[index]);
    3b9c:	e8 2f       	mov	r30, r24
    3b9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ba0:	ee 0f       	add	r30, r30
    3ba2:	ff 1f       	adc	r31, r31
    3ba4:	e5 5e       	subi	r30, 0xE5	; 229
    3ba6:	ff 4e       	sbci	r31, 0xEF	; 239
}
    3ba8:	85 91       	lpm	r24, Z+
    3baa:	94 91       	lpm	r25, Z
    3bac:	08 95       	ret

00003bae <loadPage>:
	writePadded(s, len);
	lcdReverse(0);
}

static void loadPage(uint8_t pageIndex)
{
    3bae:	cf 93       	push	r28
    3bb0:	c8 2f       	mov	r28, r24
	memcpy_P(&currentPage, &pages[pageIndex], sizeof(currentPage));
    3bb2:	86 e0       	ldi	r24, 0x06	; 6
    3bb4:	c8 9f       	mul	r28, r24
    3bb6:	b0 01       	movw	r22, r0
    3bb8:	11 24       	eor	r1, r1
    3bba:	63 5c       	subi	r22, 0xC3	; 195
    3bbc:	7f 4e       	sbci	r23, 0xEF	; 239
    3bbe:	46 e0       	ldi	r20, 0x06	; 6
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	8a e9       	ldi	r24, 0x9A	; 154
    3bc4:	95 e0       	ldi	r25, 0x05	; 5
    3bc6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <memcpy_P>
	menuPage = pageIndex;
    3bca:	c0 93 fb 05 	sts	0x05FB, r28
	keys = KEY_MENU;
    3bce:	84 e0       	ldi	r24, 0x04	; 4
    3bd0:	80 93 a4 05 	sts	0x05A4, r24
	elementIndex = 0;
    3bd4:	10 92 a3 05 	sts	0x05A3, r1
	subpage = 0;
    3bd8:	10 92 a2 05 	sts	0x05A2, r1
}
    3bdc:	cf 91       	pop	r28
    3bde:	08 95       	ret

00003be0 <tsmLoadModelLayout>:
{
	return (PGM_P)pgm_read_word(&lstMenu[index]);
}

static PGM_P tsmLoadModelLayout(uint8_t index)
{
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <tsmLoadModelLayout+0x6>
    3be6:	1f 92       	push	r1
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
	model_t model;
	model_t* pmodel = (model_t*)pgm_read_word(&modelTable[index]);
    3bec:	e8 2f       	mov	r30, r24
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	ee 0f       	add	r30, r30
    3bf2:	ff 1f       	adc	r31, r31
    3bf4:	e5 5e       	subi	r30, 0xE5	; 229
    3bf6:	f4 4f       	sbci	r31, 0xF4	; 244
    3bf8:	65 91       	lpm	r22, Z+
    3bfa:	74 91       	lpm	r23, Z
	memcpy_P(&model, pmodel, sizeof(model));
    3bfc:	43 e0       	ldi	r20, 0x03	; 3
    3bfe:	50 e0       	ldi	r21, 0x00	; 0
    3c00:	ce 01       	movw	r24, r28
    3c02:	01 96       	adiw	r24, 0x01	; 1
    3c04:	0e 94 24 27 	call	0x4e48	; 0x4e48 <memcpy_P>
	return (PGM_P)model.Name;
}
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	df 91       	pop	r29
    3c14:	cf 91       	pop	r28
    3c16:	08 95       	ret

00003c18 <writeSpace>:
#define TYPE_UINT8		0
#define TYPE_INT8		1
#define TYPE_INT16		3

static void writeSpace(int8_t len)
{
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	d8 2f       	mov	r29, r24
	for (int8_t i = 0; i < len; i++)
    3c1e:	c0 e0       	ldi	r28, 0x00	; 0
    3c20:	cd 17       	cp	r28, r29
    3c22:	2c f4       	brge	.+10     	; 0x3c2e <writeSpace+0x16>
		lcdWriteChar(32);
    3c24:	80 e2       	ldi	r24, 0x20	; 32
    3c26:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
    3c2a:	cf 5f       	subi	r28, 0xFF	; 255
    3c2c:	f9 cf       	rjmp	.-14     	; 0x3c20 <writeSpace+0x8>
}
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	08 95       	ret

00003c34 <writePadded_P>:
	lcdWriteString(s);
	writeSpace(len - strlen(s));
}

static void writePadded_P(const char *s, uint8_t len)
{
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	1f 92       	push	r1
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	8c 01       	movw	r16, r24
	lcdWriteString_P(s);
    3c44:	69 83       	std	Y+1, r22	; 0x01
    3c46:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    3c4a:	c8 01       	movw	r24, r16
    3c4c:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <__strlen_P>
	writeSpace(len - strlen_P(s));
    3c50:	69 81       	ldd	r22, Y+1	; 0x01
    3c52:	68 1b       	sub	r22, r24
    3c54:	86 2f       	mov	r24, r22
}
    3c56:	0f 90       	pop	r0
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
}

static void writePadded_P(const char *s, uint8_t len)
{
	lcdWriteString_P(s);
	writeSpace(len - strlen_P(s));
    3c60:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <writeSpace>

00003c64 <writeSoftkeys>:
}

static void writeSoftkeys(const char* sk)
{
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	ec 01       	movw	r28, r24
	if (!sk)
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	31 f4       	brne	.+12     	; 0x3c7a <writeSoftkeys+0x16>
		sk = currentPage.softkeys;
    3c6e:	c0 91 9a 05 	lds	r28, 0x059A
    3c72:	d0 91 9b 05 	lds	r29, 0x059B
	if (sk)
    3c76:	20 97       	sbiw	r28, 0x00	; 0
    3c78:	51 f0       	breq	.+20     	; 0x3c8e <writeSoftkeys+0x2a>
	{
		lcdSetPos(7, 0);
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	87 e0       	ldi	r24, 0x07	; 7
    3c7e:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		writePadded_P(sk, 21);
    3c82:	65 e1       	ldi	r22, 0x15	; 21
    3c84:	ce 01       	movw	r24, r28
	}
}
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
	if (!sk)
		sk = currentPage.softkeys;
	if (sk)
	{
		lcdSetPos(7, 0);
		writePadded_P(sk, 21);
    3c8a:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <writePadded_P>
	}
}
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	08 95       	ret

00003c94 <writeString_P>:

static void writeString_P(uint8_t x, uint8_t y, PGM_P str, uint8_t len, uint8_t index)
{
    3c94:	ef 92       	push	r14
    3c96:	ff 92       	push	r15
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <writeString_P+0xe>
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	18 2f       	mov	r17, r24
    3ca8:	7a 01       	movw	r14, r20
	lcdReverse(index == elementIndex);
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	80 91 a3 05 	lds	r24, 0x05A3
    3cb0:	08 13       	cpse	r16, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	89 2f       	mov	r24, r25
    3cb6:	2a 83       	std	Y+2, r18	; 0x02
    3cb8:	69 83       	std	Y+1, r22	; 0x01
    3cba:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
	lcdSetPos(x, y);
    3cbe:	69 81       	ldd	r22, Y+1	; 0x01
    3cc0:	81 2f       	mov	r24, r17
    3cc2:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	writePadded_P(str, len);
    3cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3cc8:	62 2f       	mov	r22, r18
    3cca:	c7 01       	movw	r24, r14
    3ccc:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <writePadded_P>
	lcdReverse(0);
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
}
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	ff 90       	pop	r15
    3ce0:	ef 90       	pop	r14
static void writeString_P(uint8_t x, uint8_t y, PGM_P str, uint8_t len, uint8_t index)
{
	lcdReverse(index == elementIndex);
	lcdSetPos(x, y);
	writePadded_P(str, len);
	lcdReverse(0);
    3ce2:	0c 94 19 13 	jmp	0x2632	; 0x2632 <lcdReverse>

00003ce6 <showMotor>:

#define CENTER_X	96
#define CENTER_Y	32

static void showMotor(uint8_t motor, uint8_t withDir)
{
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    3cf4:	e8 2e       	mov	r14, r24
    3cf6:	f6 2e       	mov	r15, r22
	uint8_t x, y;
	mixer_channel_t *channel = &Config.Mixer[motor];
    3cf8:	86 e0       	ldi	r24, 0x06	; 6
    3cfa:	e8 9e       	mul	r14, r24
    3cfc:	e0 01       	movw	r28, r0
    3cfe:	11 24       	eor	r1, r1
    3d00:	cf 54       	subi	r28, 0x4F	; 79
    3d02:	d9 4f       	sbci	r29, 0xF9	; 249
	
	if (channel->IsMotor)
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	80 ff       	sbrs	r24, 0
    3d08:	69 c0       	rjmp	.+210    	; 0x3ddc <showMotor+0xf6>
	{
		x = CENTER_X + (channel->Aileron / 4);
    3d0a:	99 81       	ldd	r25, Y+1	; 0x01
    3d0c:	97 fd       	sbrc	r25, 7
    3d0e:	9d 5f       	subi	r25, 0xFD	; 253
    3d10:	09 2f       	mov	r16, r25
    3d12:	05 95       	asr	r16
    3d14:	05 95       	asr	r16
		y = CENTER_Y - (channel->Elevator / 4);
    3d16:	1a 81       	ldd	r17, Y+2	; 0x02
    3d18:	17 fd       	sbrc	r17, 7
    3d1a:	1d 5f       	subi	r17, 0xFD	; 253
    3d1c:	15 95       	asr	r17
    3d1e:	15 95       	asr	r17
    3d20:	11 95       	neg	r17
    3d22:	60 e2       	ldi	r22, 0x20	; 32
    3d24:	61 0f       	add	r22, r17
	
		lcdLine(x, y, CENTER_X, CENTER_Y);
    3d26:	20 e2       	ldi	r18, 0x20	; 32
    3d28:	40 e6       	ldi	r20, 0x60	; 96
    3d2a:	80 e6       	ldi	r24, 0x60	; 96
    3d2c:	80 0f       	add	r24, r16
    3d2e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <lcdLine>
		lcdXY(CENTER_X - 2, CENTER_Y - 2);
    3d32:	6e e1       	ldi	r22, 0x1E	; 30
    3d34:	8e e5       	ldi	r24, 0x5E	; 94
    3d36:	0e 94 58 11 	call	0x22b0	; 0x22b0 <lcdXY>
		lcdWriteGlyph_P(&glyFC, ROP_COPY);
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	84 ee       	ldi	r24, 0xE4	; 228
    3d3e:	99 e0       	ldi	r25, 0x09	; 9
    3d40:	0e 94 c9 12 	call	0x2592	; 0x2592 <lcdWriteGlyph_P>
		lcdXY(x - 4, y - 4);
    3d44:	6c e1       	ldi	r22, 0x1C	; 28
    3d46:	61 0f       	add	r22, r17
    3d48:	2c e5       	ldi	r18, 0x5C	; 92
    3d4a:	d2 2e       	mov	r13, r18
    3d4c:	d0 0e       	add	r13, r16
    3d4e:	8d 2d       	mov	r24, r13
    3d50:	0e 94 58 11 	call	0x22b0	; 0x22b0 <lcdXY>
		lcdWriteGlyph_P(&glyBall, ROP_PAINT);
    3d54:	61 e0       	ldi	r22, 0x01	; 1
    3d56:	8d ef       	ldi	r24, 0xFD	; 253
    3d58:	99 e0       	ldi	r25, 0x09	; 9
    3d5a:	0e 94 c9 12 	call	0x2592	; 0x2592 <lcdWriteGlyph_P>
		lcdXY(x - 4, y - 7);
    3d5e:	69 e1       	ldi	r22, 0x19	; 25
    3d60:	61 0f       	add	r22, r17
    3d62:	8d 2d       	mov	r24, r13
    3d64:	0e 94 58 11 	call	0x22b0	; 0x22b0 <lcdXY>
		if (channel->Rudder >= 0)
    3d68:	8b 81       	ldd	r24, Y+3	; 0x03
			lcdWriteGlyph_P(&glyDirCW, ROP_PAINT);
    3d6a:	61 e0       	ldi	r22, 0x01	; 1
		lcdXY(CENTER_X - 2, CENTER_Y - 2);
		lcdWriteGlyph_P(&glyFC, ROP_COPY);
		lcdXY(x - 4, y - 4);
		lcdWriteGlyph_P(&glyBall, ROP_PAINT);
		lcdXY(x - 4, y - 7);
		if (channel->Rudder >= 0)
    3d6c:	87 fd       	sbrc	r24, 7
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <showMotor+0x90>
			lcdWriteGlyph_P(&glyDirCW, ROP_PAINT);
    3d70:	82 ef       	ldi	r24, 0xF2	; 242
    3d72:	99 e0       	ldi	r25, 0x09	; 9
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <showMotor+0x94>
		else
			lcdWriteGlyph_P(&glyDirCCW, ROP_PAINT);
    3d76:	8b ee       	ldi	r24, 0xEB	; 235
    3d78:	99 e0       	ldi	r25, 0x09	; 9
    3d7a:	0e 94 c9 12 	call	0x2592	; 0x2592 <lcdWriteGlyph_P>
		
		lcdXY(x - 2, y - 2);
    3d7e:	6e e1       	ldi	r22, 0x1E	; 30
    3d80:	61 0f       	add	r22, r17
    3d82:	8e e5       	ldi	r24, 0x5E	; 94
    3d84:	80 0f       	add	r24, r16
    3d86:	0e 94 58 11 	call	0x22b0	; 0x22b0 <lcdXY>
		lcdReverse(1);
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
		lcdSelectFont(&font4x6);
    3d90:	8c e9       	ldi	r24, 0x9C	; 156
    3d92:	96 e0       	ldi	r25, 0x06	; 6
    3d94:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
		lcdWriteChar(motor + '1');
    3d98:	81 e3       	ldi	r24, 0x31	; 49
    3d9a:	8e 0d       	add	r24, r14
    3d9c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
		lcdSelectFont(NULL);
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
		lcdReverse(0);
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
		
		if (withDir)
    3dae:	ff 20       	and	r15, r15
    3db0:	61 f1       	breq	.+88     	; 0x3e0a <showMotor+0x124>
		{
			lcdSetPos(2, 0);
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(strDirSeen);
    3dba:	8f e5       	ldi	r24, 0x5F	; 95
    3dbc:	98 e1       	ldi	r25, 0x18	; 24
    3dbe:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			lcdSetPos(5, 0);
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	85 e0       	ldi	r24, 0x05	; 5
    3dc6:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			if (channel->Rudder >= 0)
    3dca:	8b 81       	ldd	r24, Y+3	; 0x03
    3dcc:	87 fd       	sbrc	r24, 7
    3dce:	03 c0       	rjmp	.+6      	; 0x3dd6 <showMotor+0xf0>
				lcdWriteString_P(strCW);
    3dd0:	8c e5       	ldi	r24, 0x5C	; 92
    3dd2:	98 e1       	ldi	r25, 0x18	; 24
    3dd4:	11 c0       	rjmp	.+34     	; 0x3df8 <showMotor+0x112>
			else
				lcdWriteString_P(strCCW);
    3dd6:	88 e5       	ldi	r24, 0x58	; 88
    3dd8:	98 e1       	ldi	r25, 0x18	; 24
    3dda:	0e c0       	rjmp	.+28     	; 0x3df8 <showMotor+0x112>
		}
	}
	else if (withDir)
    3ddc:	66 23       	and	r22, r22
    3dde:	a9 f0       	breq	.+42     	; 0x3e0a <showMotor+0x124>
	{
		lcdSetPos(3, 64);
    3de0:	60 e4       	ldi	r22, 0x40	; 64
    3de2:	83 e0       	ldi	r24, 0x03	; 3
    3de4:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		if (channel->IsServo)
    3de8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dea:	81 ff       	sbrs	r24, 1
    3dec:	03 c0       	rjmp	.+6      	; 0x3df4 <showMotor+0x10e>
			lcdWriteString_P(strServo);
    3dee:	84 e0       	ldi	r24, 0x04	; 4
    3df0:	99 e1       	ldi	r25, 0x19	; 25
    3df2:	02 c0       	rjmp	.+4      	; 0x3df8 <showMotor+0x112>
		else
			lcdWriteString_P(strUnused);
    3df4:	8c e4       	ldi	r24, 0x4C	; 76
    3df6:	98 e1       	ldi	r25, 0x18	; 24
	}
}
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	1f 91       	pop	r17
    3dfe:	0f 91       	pop	r16
    3e00:	ff 90       	pop	r15
    3e02:	ef 90       	pop	r14
    3e04:	df 90       	pop	r13
	{
		lcdSetPos(3, 64);
		if (channel->IsServo)
			lcdWriteString_P(strServo);
		else
			lcdWriteString_P(strUnused);
    3e06:	0c 94 08 13 	jmp	0x2610	; 0x2610 <lcdWriteString_P>
	}
}
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	df 90       	pop	r13
    3e18:	08 95       	ret

00003e1a <elementKey>:
	subpage = 0;
}

static void elementKey(uint8_t num)
{
	if (KEY2)	// PREV
    3e1a:	90 91 a4 05 	lds	r25, 0x05A4
    3e1e:	96 ff       	sbrs	r25, 6
    3e20:	09 c0       	rjmp	.+18     	; 0x3e34 <elementKey+0x1a>
		elementIndex = elementIndex == 0 ? num - 1 : elementIndex - 1;
    3e22:	60 91 a3 05 	lds	r22, 0x05A3
    3e26:	61 11       	cpse	r22, r1
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <elementKey+0x14>
    3e2a:	81 50       	subi	r24, 0x01	; 1
    3e2c:	0f c0       	rjmp	.+30     	; 0x3e4c <elementKey+0x32>
    3e2e:	8f ef       	ldi	r24, 0xFF	; 255
    3e30:	86 0f       	add	r24, r22
    3e32:	0c c0       	rjmp	.+24     	; 0x3e4c <elementKey+0x32>
	else if (KEY3) // NEXT
    3e34:	95 ff       	sbrs	r25, 5
    3e36:	0c c0       	rjmp	.+24     	; 0x3e50 <elementKey+0x36>
		elementIndex = (elementIndex + 1) % num;
    3e38:	20 91 a3 05 	lds	r18, 0x05A3
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	2f 5f       	subi	r18, 0xFF	; 255
    3e40:	3f 4f       	sbci	r19, 0xFF	; 255
    3e42:	68 2f       	mov	r22, r24
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	c9 01       	movw	r24, r18
    3e48:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__divmodhi4>
    3e4c:	80 93 a3 05 	sts	0x05A3, r24
    3e50:	08 95       	ret

00003e52 <_hFactoryReset>:
}
#endif

static void _hFactoryReset()
{
	if (KEYINIT)
    3e52:	80 91 a4 05 	lds	r24, 0x05A4
    3e56:	80 ff       	sbrs	r24, 0
    3e58:	08 c0       	rjmp	.+16     	; 0x3e6a <_hFactoryReset+0x18>
	{
		lcdSetPos(3, 18);
    3e5a:	62 e1       	ldi	r22, 0x12	; 18
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		lcdWriteString_P(strAreYouSure);
    3e62:	82 e8       	ldi	r24, 0x82	; 130
    3e64:	98 e1       	ldi	r25, 0x18	; 24
    3e66:	0c 94 08 13 	jmp	0x2610	; 0x2610 <lcdWriteString_P>
	}
	else if (KEY4)	// Yes
    3e6a:	84 ff       	sbrs	r24, 4
    3e6c:	11 c0       	rjmp	.+34     	; 0x3e90 <_hFactoryReset+0x3e>
	{
		configReset();
    3e6e:	0e 94 14 18 	call	0x3028	; 0x3028 <configReset>
		configSave();
    3e72:	0e 94 0c 18 	call	0x3018	; 0x3018 <configSave>
		
		// force reset by enabling watchdog and enter endless loop
		cli();
    3e76:	f8 94       	cli
		wdt_enable(WDTO_15MS);
    3e78:	28 e0       	ldi	r18, 0x08	; 8
    3e7a:	88 e1       	ldi	r24, 0x18	; 24
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	a8 95       	wdr
    3e84:	80 93 60 00 	sts	0x0060, r24
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	20 93 60 00 	sts	0x0060, r18
    3e8e:	ff cf       	rjmp	.-2      	; 0x3e8e <_hFactoryReset+0x3c>
    3e90:	08 95       	ret

00003e92 <_hESCCalibration>:
		loadPage(PAGE_MENU);
}

static void _hESCCalibration()
{
	if (ANYKEY)
    3e92:	80 91 a4 05 	lds	r24, 0x05A4
    3e96:	88 23       	and	r24, r24
    3e98:	e9 f0       	breq	.+58     	; 0x3ed4 <_hESCCalibration+0x42>
	{
		if (elementIndex >= length(scrESCCal))
    3e9a:	80 91 a3 05 	lds	r24, 0x05A3
    3e9e:	86 30       	cpi	r24, 0x06	; 6
    3ea0:	18 f0       	brcs	.+6      	; 0x3ea8 <_hESCCalibration+0x16>
			loadPage(PAGE_MENU);
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <loadPage>
		else
		{
			lcdClear();
    3ea8:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
			PGM_P s = (PGM_P)pgm_read_word(&scrESCCal[elementIndex]);
    3eac:	e0 91 a3 05 	lds	r30, 0x05A3
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	ee 0f       	add	r30, r30
    3eb4:	ff 1f       	adc	r31, r31
    3eb6:	e6 54       	subi	r30, 0x46	; 70
    3eb8:	fd 4e       	sbci	r31, 0xED	; 237
			lcdWriteString_P(s);
    3eba:	85 91       	lpm	r24, Z+
    3ebc:	94 91       	lpm	r25, Z
    3ebe:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			writeSoftkeys(NULL);
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
			elementIndex++;
    3eca:	80 91 a3 05 	lds	r24, 0x05A3
    3ece:	8f 5f       	subi	r24, 0xFF	; 255
    3ed0:	80 93 a3 05 	sts	0x05A3, r24
    3ed4:	08 95       	ret

00003ed6 <doMenu>:
	lcdSelectFont(&font12x16);
	editModeHandler();
}

static uint8_t doMenu(menu_t *menu)
{
    3ed6:	ef 92       	push	r14
    3ed8:	ff 92       	push	r15
    3eda:	0f 93       	push	r16
    3edc:	1f 93       	push	r17
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	ec 01       	movw	r28, r24
	if (!keys) return 0;
    3ee4:	80 91 a4 05 	lds	r24, 0x05A4
    3ee8:	88 23       	and	r24, r24
    3eea:	09 f4       	brne	.+2      	; 0x3eee <doMenu+0x18>
    3eec:	6f c0       	rjmp	.+222    	; 0x3fcc <doMenu+0xf6>
	
	// key handling
	if (KEY2)		// UP
    3eee:	86 ff       	sbrs	r24, 6
    3ef0:	06 c0       	rjmp	.+12     	; 0x3efe <doMenu+0x28>
	{
		if (menu->marked > 0) 
    3ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ef4:	88 23       	and	r24, r24
    3ef6:	99 f0       	breq	.+38     	; 0x3f1e <doMenu+0x48>
			menu->marked--;
    3ef8:	81 50       	subi	r24, 0x01	; 1
    3efa:	8c 83       	std	Y+4, r24	; 0x04
    3efc:	10 c0       	rjmp	.+32     	; 0x3f1e <doMenu+0x48>
	}
	else if (KEY3)		// DOWN
    3efe:	85 ff       	sbrs	r24, 5
    3f00:	0c c0       	rjmp	.+24     	; 0x3f1a <doMenu+0x44>
	{
		if (menu->marked < menu->len - 1) 
    3f02:	4c 81       	ldd	r20, Y+4	; 0x04
    3f04:	24 2f       	mov	r18, r20
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	88 81       	ld	r24, Y
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	28 17       	cp	r18, r24
    3f10:	39 07       	cpc	r19, r25
    3f12:	2c f4       	brge	.+10     	; 0x3f1e <doMenu+0x48>
			menu->marked++;
    3f14:	4f 5f       	subi	r20, 0xFF	; 255
    3f16:	4c 83       	std	Y+4, r20	; 0x04
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <doMenu+0x48>
	}
	else if (KEY4)		// ENTER
    3f1a:	84 fd       	sbrc	r24, 4
    3f1c:	59 c0       	rjmp	.+178    	; 0x3fd0 <doMenu+0xfa>
		return 1;

	if (menu->marked < menu->top)
    3f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3f20:	3b 81       	ldd	r19, Y+3	; 0x03
    3f22:	23 17       	cp	r18, r19
    3f24:	38 f0       	brcs	.+14     	; 0x3f34 <doMenu+0x5e>
		menu->top = menu->marked;
	else if (menu->marked - menu->top >= 5)
    3f26:	82 2f       	mov	r24, r18
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	83 1b       	sub	r24, r19
    3f2c:	91 09       	sbc	r25, r1
    3f2e:	05 97       	sbiw	r24, 0x05	; 5
    3f30:	14 f0       	brlt	.+4      	; 0x3f36 <doMenu+0x60>
		menu->top = menu->marked - 4;
    3f32:	24 50       	subi	r18, 0x04	; 4
    3f34:	2b 83       	std	Y+3, r18	; 0x03

	// upper arrow
	lcdSetPos(0, 58);
    3f36:	6a e3       	ldi	r22, 0x3A	; 58
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdReverse(menu->top == 0);
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	9b 81       	ldd	r25, Y+3	; 0x03
    3f42:	91 11       	cpse	r25, r1
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
	lcdWriteGlyph_P(&glyArrowUp, ROP_PAINT);
    3f4a:	61 e0       	ldi	r22, 0x01	; 1
    3f4c:	8b e1       	ldi	r24, 0x1B	; 27
    3f4e:	9a e0       	ldi	r25, 0x0A	; 10
    3f50:	0e 94 c9 12 	call	0x2592	; 0x2592 <lcdWriteGlyph_P>
    3f54:	00 e0       	ldi	r16, 0x00	; 0
    3f56:	10 e0       	ldi	r17, 0x00	; 0
		
	// text output
	for (uint8_t i = 0; i < 5 && i < menu->len; i++)
    3f58:	88 81       	ld	r24, Y
    3f5a:	08 17       	cp	r16, r24
    3f5c:	08 f5       	brcc	.+66     	; 0x3fa0 <doMenu+0xca>
	{
		lcdSetPos(i + 1, 0);
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 0f       	add	r24, r16
    3f64:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		PGM_P item = menu->textSelector(menu->top + i);
    3f68:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f6e:	80 0f       	add	r24, r16
    3f70:	09 95       	icall
    3f72:	7c 01       	movw	r14, r24
		lcdReverse(menu->top + i == menu->marked);
    3f74:	8b 81       	ldd	r24, Y+3	; 0x03
    3f76:	a8 01       	movw	r20, r16
    3f78:	48 0f       	add	r20, r24
    3f7a:	51 1d       	adc	r21, r1
    3f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	42 17       	cp	r20, r18
    3f84:	53 07       	cpc	r21, r19
    3f86:	09 f0       	breq	.+2      	; 0x3f8a <doMenu+0xb4>
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
		writePadded_P(item, 21);
    3f8e:	65 e1       	ldi	r22, 0x15	; 21
    3f90:	c7 01       	movw	r24, r14
    3f92:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <writePadded_P>
    3f96:	0f 5f       	subi	r16, 0xFF	; 255
    3f98:	1f 4f       	sbci	r17, 0xFF	; 255
	lcdSetPos(0, 58);
	lcdReverse(menu->top == 0);
	lcdWriteGlyph_P(&glyArrowUp, ROP_PAINT);
		
	// text output
	for (uint8_t i = 0; i < 5 && i < menu->len; i++)
    3f9a:	05 30       	cpi	r16, 0x05	; 5
    3f9c:	11 05       	cpc	r17, r1
    3f9e:	e1 f6       	brne	.-72     	; 0x3f58 <doMenu+0x82>
		lcdReverse(menu->top + i == menu->marked);
		writePadded_P(item, 21);
	}

	// lower arrow
	lcdSetPos(6, 58);
    3fa0:	6a e3       	ldi	r22, 0x3A	; 58
    3fa2:	86 e0       	ldi	r24, 0x06	; 6
    3fa4:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdReverse(menu->top >= menu->len - 5);
    3fa8:	4b 81       	ldd	r20, Y+3	; 0x03
    3faa:	50 e0       	ldi	r21, 0x00	; 0
    3fac:	28 81       	ld	r18, Y
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	25 50       	subi	r18, 0x05	; 5
    3fb2:	31 09       	sbc	r19, r1
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	42 17       	cp	r20, r18
    3fb8:	53 07       	cpc	r21, r19
    3fba:	0c f4       	brge	.+2      	; 0x3fbe <doMenu+0xe8>
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
	lcdWriteGlyph_P(&glyArrowDown, ROP_PAINT);
    3fc2:	61 e0       	ldi	r22, 0x01	; 1
    3fc4:	81 e1       	ldi	r24, 0x11	; 17
    3fc6:	9a e0       	ldi	r25, 0x0A	; 10
    3fc8:	0e 94 c9 12 	call	0x2592	; 0x2592 <lcdWriteGlyph_P>
	editModeHandler();
}

static uint8_t doMenu(menu_t *menu)
{
	if (!keys) return 0;
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	01 c0       	rjmp	.+2      	; 0x3fd2 <doMenu+0xfc>
	{
		if (menu->marked < menu->len - 1) 
			menu->marked++;
	}
	else if (KEY4)		// ENTER
		return 1;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
	lcdSetPos(6, 58);
	lcdReverse(menu->top >= menu->len - 5);
	lcdWriteGlyph_P(&glyArrowDown, ROP_PAINT);
	
	return 0;
}
    3fd2:	df 91       	pop	r29
    3fd4:	cf 91       	pop	r28
    3fd6:	1f 91       	pop	r17
    3fd8:	0f 91       	pop	r16
    3fda:	ff 90       	pop	r15
    3fdc:	ef 90       	pop	r14
    3fde:	08 95       	ret

00003fe0 <_hLoadModelLayout>:
	}
}

static void _hLoadModelLayout()
{
	if (KEYINIT)
    3fe0:	80 91 a4 05 	lds	r24, 0x05A4
    3fe4:	80 ff       	sbrs	r24, 0
    3fe6:	04 c0       	rjmp	.+8      	; 0x3ff0 <_hLoadModelLayout+0x10>
		mnuMLayout.marked = Config.MixerIndex;
    3fe8:	90 91 a0 06 	lds	r25, 0x06A0
    3fec:	90 93 04 01 	sts	0x0104, r25

	if (elementIndex == 0)
    3ff0:	90 91 a3 05 	lds	r25, 0x05A3
    3ff4:	91 11       	cpse	r25, r1
    3ff6:	18 c0       	rjmp	.+48     	; 0x4028 <_hLoadModelLayout+0x48>
	{
		if (doMenu(&mnuMLayout))
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	91 e0       	ldi	r25, 0x01	; 1
    3ffc:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <doMenu>
    4000:	88 23       	and	r24, r24
    4002:	d9 f0       	breq	.+54     	; 0x403a <_hLoadModelLayout+0x5a>
		{
			lcdClear();
    4004:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
			lcdSetPos(3, 18);
    4008:	62 e1       	ldi	r22, 0x12	; 18
    400a:	83 e0       	ldi	r24, 0x03	; 3
    400c:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(strAreYouSure);
    4010:	82 e8       	ldi	r24, 0x82	; 130
    4012:	98 e1       	ldi	r25, 0x18	; 24
    4014:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			writeSoftkeys(_skCANCELYES);
    4018:	8d ee       	ldi	r24, 0xED	; 237
    401a:	90 e1       	ldi	r25, 0x10	; 16
    401c:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
			elementIndex = 1;
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	80 93 a3 05 	sts	0x05A3, r24
    4026:	08 95       	ret
		}
	}		
	else if (KEY4)		// YES
    4028:	84 ff       	sbrs	r24, 4
    402a:	07 c0       	rjmp	.+14     	; 0x403a <_hLoadModelLayout+0x5a>
	{
		mixerLoadModel(mnuMLayout.marked);
    402c:	80 91 04 01 	lds	r24, 0x0104
    4030:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <mixerLoadModel>
		//configSave();
		loadPage(PAGE_SHOW_LAYOUT);
    4034:	8f e0       	ldi	r24, 0x0F	; 15
    4036:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <loadPage>
    403a:	08 95       	ret

0000403c <_hMenu>:
	return 0;
}

void _hMenu()
{
	if (doMenu(&mnuMain))
    403c:	85 e0       	ldi	r24, 0x05	; 5
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <doMenu>
    4044:	88 23       	and	r24, r24
    4046:	29 f0       	breq	.+10     	; 0x4052 <_hMenu+0x16>
		loadPage(mnuMain.marked + 2);
    4048:	80 91 09 01 	lds	r24, 0x0109
    404c:	8e 5f       	subi	r24, 0xFE	; 254
    404e:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <loadPage>
    4052:	08 95       	ret

00004054 <_hShowModelLayout>:
			lcdWriteString_P(strUnused);
	}
}

static void _hShowModelLayout()
{
    4054:	cf 93       	push	r28
	if (ANYKEY)
    4056:	80 91 a4 05 	lds	r24, 0x05A4
    405a:	88 23       	and	r24, r24
    405c:	c1 f1       	breq	.+112    	; 0x40ce <_hShowModelLayout+0x7a>
	{
		if (KEY2)	// NEXT
    405e:	86 ff       	sbrs	r24, 6
    4060:	0a c0       	rjmp	.+20     	; 0x4076 <_hShowModelLayout+0x22>
			elementIndex = (elementIndex + 1) % 9;
    4062:	80 91 a3 05 	lds	r24, 0x05A3
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	01 96       	adiw	r24, 0x01	; 1
    406a:	69 e0       	ldi	r22, 0x09	; 9
    406c:	70 e0       	ldi	r23, 0x00	; 0
    406e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__divmodhi4>
    4072:	80 93 a3 05 	sts	0x05A3, r24
		
		lcdClear();
    4076:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
		writeSoftkeys(NULL);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
		lcdSetPos(0, 0);
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		lcdWriteString_P(strOutput);
    408a:	8a e7       	ldi	r24, 0x7A	; 122
    408c:	98 e1       	ldi	r25, 0x18	; 24
    408e:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
		lcdWriteChar(32);
    4092:	80 e2       	ldi	r24, 0x20	; 32
    4094:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
		if (elementIndex == 0)
    4098:	80 91 a3 05 	lds	r24, 0x05A3
    409c:	81 11       	cpse	r24, r1
    409e:	0d c0       	rjmp	.+26     	; 0x40ba <_hShowModelLayout+0x66>
		{
			lcdWriteString_P(strALL);
    40a0:	84 e5       	ldi	r24, 0x54	; 84
    40a2:	98 e1       	ldi	r25, 0x18	; 24
    40a4:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			for (uint8_t i = 0; i < 8; i++)
    40a8:	c0 e0       	ldi	r28, 0x00	; 0
				showMotor(i, 0);
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	8c 2f       	mov	r24, r28
    40ae:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <showMotor>
		lcdWriteString_P(strOutput);
		lcdWriteChar(32);
		if (elementIndex == 0)
		{
			lcdWriteString_P(strALL);
			for (uint8_t i = 0; i < 8; i++)
    40b2:	cf 5f       	subi	r28, 0xFF	; 255
    40b4:	c8 30       	cpi	r28, 0x08	; 8
    40b6:	c9 f7       	brne	.-14     	; 0x40aa <_hShowModelLayout+0x56>
    40b8:	0a c0       	rjmp	.+20     	; 0x40ce <_hShowModelLayout+0x7a>
				showMotor(i, 0);
		}			
		else
		{
			lcdWriteChar(elementIndex + '0');
    40ba:	80 5d       	subi	r24, 0xD0	; 208
    40bc:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
			showMotor(elementIndex - 1, 1);
    40c0:	80 91 a3 05 	lds	r24, 0x05A3
    40c4:	61 e0       	ldi	r22, 0x01	; 1
    40c6:	81 50       	subi	r24, 0x01	; 1
		}
	}
}
    40c8:	cf 91       	pop	r28
				showMotor(i, 0);
		}			
		else
		{
			lcdWriteChar(elementIndex + '0');
			showMotor(elementIndex - 1, 1);
    40ca:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <showMotor>
		}
	}
}
    40ce:	cf 91       	pop	r28
    40d0:	08 95       	ret

000040d2 <_hStickCentering>:
	}
}

static void _hStickCentering()
{
	if (KEYINIT)
    40d2:	80 91 a4 05 	lds	r24, 0x05A4
    40d6:	80 ff       	sbrs	r24, 0
    40d8:	15 c0       	rjmp	.+42     	; 0x4104 <_hStickCentering+0x32>
	{
		if ((RX_good & 0x0F) != 0x0F)
    40da:	80 91 a5 05 	lds	r24, 0x05A5
    40de:	8f 70       	andi	r24, 0x0F	; 15
    40e0:	8f 30       	cpi	r24, 0x0F	; 15
    40e2:	61 f0       	breq	.+24     	; 0x40fc <_hStickCentering+0x2a>
		{
			lcdWriteString_P(scrRadioCal1);
    40e4:	84 e1       	ldi	r24, 0x14	; 20
    40e6:	92 e1       	ldi	r25, 0x12	; 18
    40e8:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			elementIndex = 1;
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	80 93 a3 05 	sts	0x05A3, r24
			writeSoftkeys(_skBACK);
    40f2:	89 e1       	ldi	r24, 0x19	; 25
    40f4:	91 e1       	ldi	r25, 0x11	; 17
    40f6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
    40fa:	04 c0       	rjmp	.+8      	; 0x4104 <_hStickCentering+0x32>
		}
		else
			lcdWriteString_P(scrRadioCal0);
    40fc:	8f e5       	ldi	r24, 0x5F	; 95
    40fe:	92 e1       	ldi	r25, 0x12	; 18
    4100:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
	}
	
	if (elementIndex == 0)
    4104:	90 91 a3 05 	lds	r25, 0x05A3
    4108:	80 91 a4 05 	lds	r24, 0x05A4
    410c:	91 11       	cpse	r25, r1
    410e:	1d c0       	rjmp	.+58     	; 0x414a <_hStickCentering+0x78>
	{
		if (KEY4)
    4110:	84 ff       	sbrs	r24, 4
    4112:	20 c0       	rjmp	.+64     	; 0x4154 <_hStickCentering+0x82>
		{
			lcdClear();
    4114:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
			if (rxCalibrate())
    4118:	0e 94 9d 14 	call	0x293a	; 0x293a <rxCalibrate>
    411c:	88 23       	and	r24, r24
    411e:	49 f0       	breq	.+18     	; 0x4132 <_hStickCentering+0x60>
			{
				configSave();
    4120:	0e 94 0c 18 	call	0x3018	; 0x3018 <configSave>
				lcdSetPos(3, 0);
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	83 e0       	ldi	r24, 0x03	; 3
    4128:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
				lcdWriteString_P(strCalSucc);
    412c:	80 e9       	ldi	r24, 0x90	; 144
    412e:	98 e1       	ldi	r25, 0x18	; 24
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <_hStickCentering+0x64>
			}
			else
				lcdWriteString_P(scrRadioCal2);
    4132:	87 ec       	ldi	r24, 0xC7	; 199
    4134:	91 e1       	ldi	r25, 0x11	; 17
    4136:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>

			writeSoftkeys(NULL);
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
			elementIndex = 1;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	80 93 a3 05 	sts	0x05A3, r24
    4148:	08 95       	ret
		}
	}
	else if (KEY4)
    414a:	84 ff       	sbrs	r24, 4
    414c:	03 c0       	rjmp	.+6      	; 0x4154 <_hStickCentering+0x82>
		loadPage(PAGE_MENU);
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <loadPage>
    4154:	08 95       	ret

00004156 <_hSensorCalibration>:
		}
	}
}

static void _hSensorCalibration()
{
    4156:	cf 93       	push	r28
	if (elementIndex == 0)
    4158:	80 91 a3 05 	lds	r24, 0x05A3
    415c:	81 11       	cpse	r24, r1
    415e:	24 c0       	rjmp	.+72     	; 0x41a8 <_hSensorCalibration+0x52>
	{
		if (KEY4)
    4160:	80 91 a4 05 	lds	r24, 0x05A4
    4164:	84 ff       	sbrs	r24, 4
    4166:	55 c0       	rjmp	.+170    	; 0x4212 <_hSensorCalibration+0xbc>
		{
			elementIndex = 1;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	80 93 a3 05 	sts	0x05A3, r24
			lcdClear();
    416e:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
			lcdSetPos(3, 18);
    4172:	62 e1       	ldi	r22, 0x12	; 18
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(strWait);
    417a:	8a ea       	ldi	r24, 0xAA	; 170
    417c:	98 e1       	ldi	r25, 0x18	; 24
    417e:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			lcdSetPos(3, 78);
    4182:	6e e4       	ldi	r22, 0x4E	; 78
    4184:	83 e0       	ldi	r24, 0x03	; 3
    4186:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(strSec);
    418a:	86 ea       	ldi	r24, 0xA6	; 166
    418c:	98 e1       	ldi	r25, 0x18	; 24
    418e:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			writeSoftkeys(_skCANCEL);
    4192:	8f ea       	ldi	r24, 0xAF	; 175
    4194:	90 e1       	ldi	r25, 0x10	; 16
    4196:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
			_tStart = millis();
    419a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    419e:	90 93 a1 05 	sts	0x05A1, r25
    41a2:	80 93 a0 05 	sts	0x05A0, r24
    41a6:	35 c0       	rjmp	.+106    	; 0x4212 <_hSensorCalibration+0xbc>
		}			
	}
	else if (elementIndex == 1)
    41a8:	81 30       	cpi	r24, 0x01	; 1
    41aa:	59 f5       	brne	.+86     	; 0x4202 <_hSensorCalibration+0xac>
	{
		lcdSetPos(3, 66);
    41ac:	62 e4       	ldi	r22, 0x42	; 66
    41ae:	83 e0       	ldi	r24, 0x03	; 3
    41b0:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		uint8_t sec = (millis() - _tStart) / 1000;
    41b4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <millis>
    41b8:	20 91 a0 05 	lds	r18, 0x05A0
    41bc:	30 91 a1 05 	lds	r19, 0x05A1
    41c0:	82 1b       	sub	r24, r18
    41c2:	93 0b       	sbc	r25, r19
    41c4:	68 ee       	ldi	r22, 0xE8	; 232
    41c6:	73 e0       	ldi	r23, 0x03	; 3
    41c8:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__udivmodhi4>
    41cc:	c6 2f       	mov	r28, r22
		lcdWriteChar((5-sec) + 48);
    41ce:	85 e3       	ldi	r24, 0x35	; 53
    41d0:	86 1b       	sub	r24, r22
    41d2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
		if (sec >= 5)
    41d6:	c5 30       	cpi	r28, 0x05	; 5
    41d8:	e0 f0       	brcs	.+56     	; 0x4212 <_hSensorCalibration+0xbc>
		{
			sensorsCalibrate();
    41da:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <sensorsCalibrate>
			configSave();
    41de:	0e 94 0c 18 	call	0x3018	; 0x3018 <configSave>
			lcdSetPos(3, 0);
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	83 e0       	ldi	r24, 0x03	; 3
    41e6:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(strCalSucc);
    41ea:	80 e9       	ldi	r24, 0x90	; 144
    41ec:	98 e1       	ldi	r25, 0x18	; 24
    41ee:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			writeSoftkeys(NULL);
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
			elementIndex = 2;
    41fa:	82 e0       	ldi	r24, 0x02	; 2
    41fc:	80 93 a3 05 	sts	0x05A3, r24
    4200:	08 c0       	rjmp	.+16     	; 0x4212 <_hSensorCalibration+0xbc>
		}
	}
	else if (KEY4)
    4202:	80 91 a4 05 	lds	r24, 0x05A4
    4206:	84 ff       	sbrs	r24, 4
    4208:	04 c0       	rjmp	.+8      	; 0x4212 <_hSensorCalibration+0xbc>
		loadPage(PAGE_MENU);
    420a:	81 e0       	ldi	r24, 0x01	; 1
}
    420c:	cf 91       	pop	r28
			writeSoftkeys(NULL);
			elementIndex = 2;
		}
	}
	else if (KEY4)
		loadPage(PAGE_MENU);
    420e:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <loadPage>
}
    4212:	cf 91       	pop	r28
    4214:	08 95       	ret

00004216 <_hModeSettings>:
		for(;;);
	}
}

static void _hModeSettings()
{
    4216:	0f 93       	push	r16
    4218:	cf 93       	push	r28
	NOKEYRETURN;
    421a:	c0 91 a4 05 	lds	r28, 0x05A4
    421e:	cc 23       	and	r28, r28
    4220:	09 f4       	brne	.+2      	; 0x4224 <_hModeSettings+0xe>
    4222:	8c c0       	rjmp	.+280    	; 0x433c <_hModeSettings+0x126>
	elementKey(5);
    4224:	85 e0       	ldi	r24, 0x05	; 5
    4226:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <elementKey>
	if (KEY4)	// CHANGE?
    422a:	c4 ff       	sbrs	r28, 4
    422c:	37 c0       	rjmp	.+110    	; 0x429c <_hModeSettings+0x86>
	{
		if (elementIndex == 0) Config.SelfLevelMode = (Config.SelfLevelMode + 1) % 3;
    422e:	80 91 a3 05 	lds	r24, 0x05A3
    4232:	81 11       	cpse	r24, r1
    4234:	0b c0       	rjmp	.+22     	; 0x424c <_hModeSettings+0x36>
    4236:	80 91 9b 06 	lds	r24, 0x069B
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	01 96       	adiw	r24, 0x01	; 1
    423e:	63 e0       	ldi	r22, 0x03	; 3
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__divmodhi4>
    4246:	80 93 9b 06 	sts	0x069B, r24
    424a:	24 c0       	rjmp	.+72     	; 0x4294 <_hModeSettings+0x7e>
		else if (elementIndex == 1) Config.ArmingMode = !Config.ArmingMode;
    424c:	81 30       	cpi	r24, 0x01	; 1
    424e:	39 f4       	brne	.+14     	; 0x425e <_hModeSettings+0x48>
    4250:	90 91 9c 06 	lds	r25, 0x069C
    4254:	91 11       	cpse	r25, r1
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	80 93 9c 06 	sts	0x069C, r24
    425c:	1b c0       	rjmp	.+54     	; 0x4294 <_hModeSettings+0x7e>
		else if (elementIndex == 2) Config.LinkRollPitch = !Config.LinkRollPitch;
    425e:	82 30       	cpi	r24, 0x02	; 2
    4260:	41 f4       	brne	.+16     	; 0x4272 <_hModeSettings+0x5c>
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 91 9e 06 	lds	r25, 0x069E
    4268:	91 11       	cpse	r25, r1
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	80 93 9e 06 	sts	0x069E, r24
    4270:	11 c0       	rjmp	.+34     	; 0x4294 <_hModeSettings+0x7e>
		else if (elementIndex == 3) Config.AutoDisarm = !Config.AutoDisarm;
    4272:	83 30       	cpi	r24, 0x03	; 3
    4274:	41 f4       	brne	.+16     	; 0x4286 <_hModeSettings+0x70>
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	90 91 9d 06 	lds	r25, 0x069D
    427c:	91 11       	cpse	r25, r1
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	80 93 9d 06 	sts	0x069D, r24
    4284:	07 c0       	rjmp	.+14     	; 0x4294 <_hModeSettings+0x7e>
		else Config.ReceiverMode = !Config.ReceiverMode; rxInit(Config.ReceiverMode);
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	90 91 9f 06 	lds	r25, 0x069F
    428c:	91 11       	cpse	r25, r1
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	80 93 9f 06 	sts	0x069F, r24
    4294:	80 91 9f 06 	lds	r24, 0x069F
    4298:	0e 94 f5 13 	call	0x27ea	; 0x27ea <rxInit>
		//configSave();
	}
	
	const char* str;
	if (Config.SelfLevelMode == SELFLEVEL_ON) str = strOn;
    429c:	80 91 9b 06 	lds	r24, 0x069B
    42a0:	82 30       	cpi	r24, 0x02	; 2
    42a2:	29 f0       	breq	.+10     	; 0x42ae <_hModeSettings+0x98>
	else if (Config.SelfLevelMode == SELFLEVEL_AUX) str = strAUX;
    42a4:	81 30       	cpi	r24, 0x01	; 1
    42a6:	31 f4       	brne	.+12     	; 0x42b4 <_hModeSettings+0x9e>
    42a8:	45 e1       	ldi	r20, 0x15	; 21
    42aa:	59 e1       	ldi	r21, 0x19	; 25
    42ac:	05 c0       	rjmp	.+10     	; 0x42b8 <_hModeSettings+0xa2>
		else Config.ReceiverMode = !Config.ReceiverMode; rxInit(Config.ReceiverMode);
		//configSave();
	}
	
	const char* str;
	if (Config.SelfLevelMode == SELFLEVEL_ON) str = strOn;
    42ae:	41 ed       	ldi	r20, 0xD1	; 209
    42b0:	58 e1       	ldi	r21, 0x18	; 24
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <_hModeSettings+0xa2>
	else if (Config.SelfLevelMode == SELFLEVEL_AUX) str = strAUX;
	else str = strStick;
    42b4:	49 e1       	ldi	r20, 0x19	; 25
    42b6:	59 e1       	ldi	r21, 0x19	; 25
	
	writeString_P(0, 84, str, 5, 0);
    42b8:	00 e0       	ldi	r16, 0x00	; 0
    42ba:	25 e0       	ldi	r18, 0x05	; 5
    42bc:	64 e5       	ldi	r22, 0x54	; 84
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
	writeString_P(1, 84, Config.ArmingMode ? strOn : strStick, 5, 1);
    42c4:	80 91 9c 06 	lds	r24, 0x069C
    42c8:	88 23       	and	r24, r24
    42ca:	19 f0       	breq	.+6      	; 0x42d2 <_hModeSettings+0xbc>
    42cc:	41 ed       	ldi	r20, 0xD1	; 209
    42ce:	58 e1       	ldi	r21, 0x18	; 24
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <_hModeSettings+0xc0>
    42d2:	49 e1       	ldi	r20, 0x19	; 25
    42d4:	59 e1       	ldi	r21, 0x19	; 25
    42d6:	01 e0       	ldi	r16, 0x01	; 1
    42d8:	25 e0       	ldi	r18, 0x05	; 5
    42da:	64 e5       	ldi	r22, 0x54	; 84
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
	writeString_P(2, 102, Config.LinkRollPitch ? strYes : strNo, 3, 2);
    42e2:	80 91 9e 06 	lds	r24, 0x069E
    42e6:	88 23       	and	r24, r24
    42e8:	19 f0       	breq	.+6      	; 0x42f0 <_hModeSettings+0xda>
    42ea:	41 e1       	ldi	r20, 0x11	; 17
    42ec:	59 e1       	ldi	r21, 0x19	; 25
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <_hModeSettings+0xde>
    42f0:	4e e0       	ldi	r20, 0x0E	; 14
    42f2:	59 e1       	ldi	r21, 0x19	; 25
    42f4:	02 e0       	ldi	r16, 0x02	; 2
    42f6:	23 e0       	ldi	r18, 0x03	; 3
    42f8:	66 e6       	ldi	r22, 0x66	; 102
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
	writeString_P(3, 84, Config.AutoDisarm ? strYes : strNo, 3, 3);
    4300:	80 91 9d 06 	lds	r24, 0x069D
    4304:	88 23       	and	r24, r24
    4306:	19 f0       	breq	.+6      	; 0x430e <_hModeSettings+0xf8>
    4308:	41 e1       	ldi	r20, 0x11	; 17
    430a:	59 e1       	ldi	r21, 0x19	; 25
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <_hModeSettings+0xfc>
    430e:	4e e0       	ldi	r20, 0x0E	; 14
    4310:	59 e1       	ldi	r21, 0x19	; 25
    4312:	03 e0       	ldi	r16, 0x03	; 3
    4314:	23 e0       	ldi	r18, 0x03	; 3
    4316:	64 e5       	ldi	r22, 0x54	; 84
    4318:	83 e0       	ldi	r24, 0x03	; 3
    431a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
	writeString_P(4, 84, Config.ReceiverMode ? strYes : strNo, 3, 4);
    431e:	80 91 9f 06 	lds	r24, 0x069F
    4322:	88 23       	and	r24, r24
    4324:	19 f0       	breq	.+6      	; 0x432c <_hModeSettings+0x116>
    4326:	41 e1       	ldi	r20, 0x11	; 17
    4328:	59 e1       	ldi	r21, 0x19	; 25
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <_hModeSettings+0x11a>
    432c:	4e e0       	ldi	r20, 0x0E	; 14
    432e:	59 e1       	ldi	r21, 0x19	; 25
    4330:	04 e0       	ldi	r16, 0x04	; 4
    4332:	23 e0       	ldi	r18, 0x03	; 3
    4334:	64 e5       	ldi	r22, 0x54	; 84
    4336:	84 e0       	ldi	r24, 0x04	; 4
    4338:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
}
    433c:	cf 91       	pop	r28
    433e:	0f 91       	pop	r16
    4340:	08 95       	ret

00004342 <writeValue>:
	writePadded_P(str, len);
	lcdReverse(0);
}

static void writeValue(uint8_t x, uint8_t y, int16_t value, uint8_t len, uint8_t index)
{
    4342:	cf 92       	push	r12
    4344:	df 92       	push	r13
    4346:	ef 92       	push	r14
    4348:	ff 92       	push	r15
    434a:	0f 93       	push	r16
    434c:	1f 93       	push	r17
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
    4352:	cd b7       	in	r28, 0x3d	; 61
    4354:	de b7       	in	r29, 0x3e	; 62
    4356:	27 97       	sbiw	r28, 0x07	; 7
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	f8 94       	cli
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	cd bf       	out	0x3d, r28	; 61
    4362:	18 2f       	mov	r17, r24
    4364:	d6 2e       	mov	r13, r22
    4366:	ca 01       	movw	r24, r20
    4368:	c2 2e       	mov	r12, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    436a:	4a e0       	ldi	r20, 0x0A	; 10
    436c:	9e 01       	movw	r18, r28
    436e:	2f 5f       	subi	r18, 0xFF	; 255
    4370:	3f 4f       	sbci	r19, 0xFF	; 255
    4372:	79 01       	movw	r14, r18
    4374:	b9 01       	movw	r22, r18
    4376:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <__itoa_ncheck>
	char s[7];
	itoa(value, s, 10);
	lcdReverse(index == elementIndex);
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	80 91 a3 05 	lds	r24, 0x05A3
    4380:	08 13       	cpse	r16, r24
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	89 2f       	mov	r24, r25
    4386:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
	lcdSetPos(x, y);
    438a:	6d 2d       	mov	r22, r13
    438c:	81 2f       	mov	r24, r17
    438e:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		lcdWriteChar(32);
}

static void writePadded(char *s, uint8_t len)
{
	lcdWriteString(s);
    4392:	c7 01       	movw	r24, r14
    4394:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <lcdWriteString>
	writeSpace(len - strlen(s));
    4398:	f7 01       	movw	r30, r14
    439a:	01 90       	ld	r0, Z+
    439c:	00 20       	and	r0, r0
    439e:	e9 f7       	brne	.-6      	; 0x439a <writeValue+0x58>
    43a0:	31 97       	sbiw	r30, 0x01	; 1
    43a2:	ee 19       	sub	r30, r14
    43a4:	ff 09       	sbc	r31, r15
    43a6:	8c 2d       	mov	r24, r12
    43a8:	8e 1b       	sub	r24, r30
    43aa:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <writeSpace>
	char s[7];
	itoa(value, s, 10);
	lcdReverse(index == elementIndex);
	lcdSetPos(x, y);
	writePadded(s, len);
	lcdReverse(0);
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
}
    43b4:	27 96       	adiw	r28, 0x07	; 7
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	1f 91       	pop	r17
    43c6:	0f 91       	pop	r16
    43c8:	ff 90       	pop	r15
    43ca:	ef 90       	pop	r14
    43cc:	df 90       	pop	r13
    43ce:	cf 90       	pop	r12
    43d0:	08 95       	ret

000043d2 <_hDebug>:
		loadPage(PAGE_MENU);
}

#ifdef DEBUG
static void _hDebug()
{
    43d2:	0f 93       	push	r16
	writeValue(0, 66, Config.MixerIndex, 2, -1);
    43d4:	40 91 a0 06 	lds	r20, 0x06A0
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    43da:	0f ef       	ldi	r16, 0xFF	; 255
    43dc:	22 e0       	ldi	r18, 0x02	; 2
    43de:	62 e4       	ldi	r22, 0x42	; 66
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	writeValue(1, 66, CONTROL[0], 6, -1);
    43e6:	40 91 d4 05 	lds	r20, 0x05D4
    43ea:	50 91 d5 05 	lds	r21, 0x05D5
    43ee:	26 e0       	ldi	r18, 0x06	; 6
    43f0:	62 e4       	ldi	r22, 0x42	; 66
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	writeValue(2, 66, CONTROL[1], 6, -1);
    43f8:	40 91 d6 05 	lds	r20, 0x05D6
    43fc:	50 91 d7 05 	lds	r21, 0x05D7
    4400:	26 e0       	ldi	r18, 0x06	; 6
    4402:	62 e4       	ldi	r22, 0x42	; 66
    4404:	82 e0       	ldi	r24, 0x02	; 2
    4406:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	writeValue(3, 66, CONTROL[2], 6, -1);
    440a:	40 91 d8 05 	lds	r20, 0x05D8
    440e:	50 91 d9 05 	lds	r21, 0x05D9
    4412:	26 e0       	ldi	r18, 0x06	; 6
    4414:	62 e4       	ldi	r22, 0x42	; 66
    4416:	83 e0       	ldi	r24, 0x03	; 3
    4418:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	writeValue(4, 66, CONTROL[3], 6, -1);
    441c:	40 91 da 05 	lds	r20, 0x05DA
    4420:	50 91 db 05 	lds	r21, 0x05DB
    4424:	26 e0       	ldi	r18, 0x06	; 6
    4426:	62 e4       	ldi	r22, 0x42	; 66
    4428:	84 e0       	ldi	r24, 0x04	; 4
    442a:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
}
    442e:	0f 91       	pop	r16
    4430:	08 95       	ret

00004432 <_hSensorTest>:
		writeValue(6, 13*6, (int16_t)ANGLE[PIT] >> 8, 7, -1);
	}	
}

static void _hSensorTest()
{
    4432:	ef 92       	push	r14
    4434:	ff 92       	push	r15
    4436:	0f 93       	push	r16
    4438:	1f 93       	push	r17
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	49 e1       	ldi	r20, 0x19	; 25
    4440:	e4 2e       	mov	r14, r20
    4442:	46 e0       	ldi	r20, 0x06	; 6
    4444:	f4 2e       	mov	r15, r20
    4446:	cf e1       	ldi	r28, 0x1F	; 31
    4448:	d6 e0       	ldi	r29, 0x06	; 6
	for (uint8_t i = 0; i < 3; i++)
    444a:	10 e0       	ldi	r17, 0x00	; 0
	{
		writeValue(i, 48, GYRO[i], 5, -1);
    444c:	f7 01       	movw	r30, r14
    444e:	41 91       	ld	r20, Z+
    4450:	51 91       	ld	r21, Z+
    4452:	7f 01       	movw	r14, r30
    4454:	0f ef       	ldi	r16, 0xFF	; 255
    4456:	25 e0       	ldi	r18, 0x05	; 5
    4458:	60 e3       	ldi	r22, 0x30	; 48
    445a:	81 2f       	mov	r24, r17
    445c:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
		writeValue(i + 3, 48, ACC[i], 5, -1);
    4460:	49 91       	ld	r20, Y+
    4462:	59 91       	ld	r21, Y+
    4464:	25 e0       	ldi	r18, 0x05	; 5
    4466:	60 e3       	ldi	r22, 0x30	; 48
    4468:	83 e0       	ldi	r24, 0x03	; 3
    446a:	81 0f       	add	r24, r17
    446c:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	}	
}

static void _hSensorTest()
{
	for (uint8_t i = 0; i < 3; i++)
    4470:	1f 5f       	subi	r17, 0xFF	; 255
    4472:	13 30       	cpi	r17, 0x03	; 3
    4474:	59 f7       	brne	.-42     	; 0x444c <_hSensorTest+0x1a>
	{
		writeValue(i, 48, GYRO[i], 5, -1);
		writeValue(i + 3, 48, ACC[i], 5, -1);
	}	
	writeValue(6, 48, BATT, 5, -1);
    4476:	40 91 18 06 	lds	r20, 0x0618
    447a:	50 e0       	ldi	r21, 0x00	; 0
    447c:	25 e0       	ldi	r18, 0x05	; 5
    447e:	60 e3       	ldi	r22, 0x30	; 48
    4480:	86 e0       	ldi	r24, 0x06	; 6
    4482:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
}
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	1f 91       	pop	r17
    448c:	0f 91       	pop	r16
    448e:	ff 90       	pop	r15
    4490:	ef 90       	pop	r14
    4492:	08 95       	ret

00004494 <_hReceiverTest>:

static void _hReceiverTest()
{
    4494:	ef 92       	push	r14
    4496:	ff 92       	push	r15
    4498:	0f 93       	push	r16
    449a:	1f 93       	push	r17
    449c:	cf 93       	push	r28
    449e:	df 93       	push	r29
    44a0:	76 ea       	ldi	r23, 0xA6	; 166
    44a2:	e7 2e       	mov	r14, r23
    44a4:	75 e0       	ldi	r23, 0x05	; 5
    44a6:	f7 2e       	mov	r15, r23
    44a8:	c0 e0       	ldi	r28, 0x00	; 0
    44aa:	d0 e0       	ldi	r29, 0x00	; 0
		{ strOff, strOn },
	};
	
	for (uint8_t i = 0; i < 6; i++)
	{
		if (RX_good & _BV(i))
    44ac:	80 91 a5 05 	lds	r24, 0x05A5
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0c 2e       	mov	r0, r28
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <_hReceiverTest+0x26>
    44b6:	95 95       	asr	r25
    44b8:	87 95       	ror	r24
    44ba:	0a 94       	dec	r0
    44bc:	e2 f7       	brpl	.-8      	; 0x44b6 <_hReceiverTest+0x22>
    44be:	80 ff       	sbrs	r24, 0
    44c0:	48 c0       	rjmp	.+144    	; 0x4552 <_hReceiverTest+0xbe>
		{
			writeValue(i, 66, RX[i], 4, -1);
    44c2:	f7 01       	movw	r30, r14
    44c4:	40 81       	ld	r20, Z
    44c6:	51 81       	ldd	r21, Z+1	; 0x01
    44c8:	0f ef       	ldi	r16, 0xFF	; 255
    44ca:	24 e0       	ldi	r18, 0x04	; 4
    44cc:	62 e4       	ldi	r22, 0x42	; 66
    44ce:	8c 2f       	mov	r24, r28
    44d0:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
			lcdSetPos(i, 96);
    44d4:	60 e6       	ldi	r22, 0x60	; 96
    44d6:	8c 2f       	mov	r24, r28
    44d8:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			if (i == THR)
    44dc:	c3 30       	cpi	r28, 0x03	; 3
    44de:	a1 f4       	brne	.+40     	; 0x4508 <_hReceiverTest+0x74>
			{
				if (State.ThrottleOff)
    44e0:	80 91 ef 05 	lds	r24, 0x05EF
    44e4:	88 23       	and	r24, r24
    44e6:	21 f0       	breq	.+8      	; 0x44f0 <_hReceiverTest+0x5c>
					writePadded_P(strIdle, 5);
    44e8:	65 e0       	ldi	r22, 0x05	; 5
    44ea:	89 ed       	ldi	r24, 0xD9	; 217
    44ec:	98 e1       	ldi	r25, 0x18	; 24
    44ee:	09 c0       	rjmp	.+18     	; 0x4502 <_hReceiverTest+0x6e>
				else if (RX[THR] >= RX_THRESHOLD)
    44f0:	80 91 ac 05 	lds	r24, 0x05AC
    44f4:	90 91 ad 05 	lds	r25, 0x05AD
    44f8:	c2 97       	sbiw	r24, 0x32	; 50
    44fa:	9c f0       	brlt	.+38     	; 0x4522 <_hReceiverTest+0x8e>
					writePadded_P(strFull, 5);
    44fc:	65 e0       	ldi	r22, 0x05	; 5
    44fe:	84 ed       	ldi	r24, 0xD4	; 212
    4500:	98 e1       	ldi	r25, 0x18	; 24
    4502:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <writePadded_P>
    4506:	2d c0       	rjmp	.+90     	; 0x4562 <_hReceiverTest+0xce>
				else
					writeSpace(5);
			}
			else
			{
				if (abs(RX[i]) > (RX_THRESHOLD / 2))
    4508:	f7 01       	movw	r30, r14
    450a:	80 81       	ld	r24, Z
    450c:	91 81       	ldd	r25, Z+1	; 0x01
    450e:	9c 01       	movw	r18, r24
    4510:	97 ff       	sbrs	r25, 7
    4512:	04 c0       	rjmp	.+8      	; 0x451c <_hReceiverTest+0x88>
    4514:	22 27       	eor	r18, r18
    4516:	33 27       	eor	r19, r19
    4518:	28 1b       	sub	r18, r24
    451a:	39 0b       	sbc	r19, r25
    451c:	2a 31       	cpi	r18, 0x1A	; 26
    451e:	31 05       	cpc	r19, r1
    4520:	24 f4       	brge	.+8      	; 0x452a <_hReceiverTest+0x96>
				if (State.ThrottleOff)
					writePadded_P(strIdle, 5);
				else if (RX[THR] >= RX_THRESHOLD)
					writePadded_P(strFull, 5);
				else
					writeSpace(5);
    4522:	85 e0       	ldi	r24, 0x05	; 5
    4524:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <writeSpace>
    4528:	1c c0       	rjmp	.+56     	; 0x4562 <_hReceiverTest+0xce>
			}
			else
			{
				if (abs(RX[i]) > (RX_THRESHOLD / 2))
					writePadded_P((PGM_P)pgm_read_word(&info[i][RX[i] > 0]), 5);
    452a:	21 e0       	ldi	r18, 0x01	; 1
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	18 16       	cp	r1, r24
    4530:	19 06       	cpc	r1, r25
    4532:	14 f0       	brlt	.+4      	; 0x4538 <_hReceiverTest+0xa4>
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	fe 01       	movw	r30, r28
    453a:	ee 0f       	add	r30, r30
    453c:	ff 1f       	adc	r31, r31
    453e:	e2 0f       	add	r30, r18
    4540:	f3 1f       	adc	r31, r19
    4542:	ee 0f       	add	r30, r30
    4544:	ff 1f       	adc	r31, r31
    4546:	e6 59       	subi	r30, 0x96	; 150
    4548:	f0 4f       	sbci	r31, 0xF0	; 240
    454a:	85 91       	lpm	r24, Z+
    454c:	94 91       	lpm	r25, Z
    454e:	65 e0       	ldi	r22, 0x05	; 5
    4550:	d8 cf       	rjmp	.-80     	; 0x4502 <_hReceiverTest+0x6e>
					writeSpace(5);
			}
		}
		else
		{
			lcdSetPos(i, 66);
    4552:	62 e4       	ldi	r22, 0x42	; 66
    4554:	8c 2f       	mov	r24, r28
    4556:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(strNoSignal);
    455a:	84 ef       	ldi	r24, 0xF4	; 244
    455c:	98 e1       	ldi	r25, 0x18	; 24
    455e:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
    4562:	21 96       	adiw	r28, 0x01	; 1
    4564:	f2 e0       	ldi	r31, 0x02	; 2
    4566:	ef 0e       	add	r14, r31
    4568:	f1 1c       	adc	r15, r1
		{ strIdle, strFull },
		{ strOff, strOn },
		{ strOff, strOn },
	};
	
	for (uint8_t i = 0; i < 6; i++)
    456a:	c6 30       	cpi	r28, 0x06	; 6
    456c:	d1 05       	cpc	r29, r1
    456e:	09 f0       	breq	.+2      	; 0x4572 <_hReceiverTest+0xde>
    4570:	9d cf       	rjmp	.-198    	; 0x44ac <_hReceiverTest+0x18>
		{
			lcdSetPos(i, 66);
			lcdWriteString_P(strNoSignal);
		}
	}
}
    4572:	df 91       	pop	r29
    4574:	cf 91       	pop	r28
    4576:	1f 91       	pop	r17
    4578:	0f 91       	pop	r16
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	08 95       	ret

00004580 <editModeHandler>:
		
	}
}

static void editModeHandler()
{
    4580:	0f 93       	push	r16
	if (KEY4)	// DONE;
    4582:	80 91 a4 05 	lds	r24, 0x05A4
    4586:	84 ff       	sbrs	r24, 4
    4588:	19 c0       	rjmp	.+50     	; 0x45bc <editModeHandler+0x3c>
	{
		editMode = OFF;
    458a:	10 92 91 05 	sts	0x0591, r1
		
		if (editValueType == TYPE_UINT8)
    458e:	80 91 90 05 	lds	r24, 0x0590
    4592:	88 23       	and	r24, r24
    4594:	11 f0       	breq	.+4      	; 0x459a <editModeHandler+0x1a>
			*(uint8_t*)editValuePtr = editValue;
		else if (editValueType == TYPE_INT8)
    4596:	81 30       	cpi	r24, 0x01	; 1
    4598:	39 f4       	brne	.+14     	; 0x45a8 <editModeHandler+0x28>
			*(int8_t*)editValuePtr = editValue;
    459a:	e0 91 8e 05 	lds	r30, 0x058E
    459e:	f0 91 8f 05 	lds	r31, 0x058F
    45a2:	80 91 98 05 	lds	r24, 0x0598
    45a6:	80 83       	st	Z, r24
		
		//configSave();
		lcdSelectFont(NULL);
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
		keys = KEY_REFRESH;
    45b0:	82 e0       	ldi	r24, 0x02	; 2
    45b2:	80 93 a4 05 	sts	0x05A4, r24
		else if (KEY1)	// CLR?
			editValue = editInitialValue;
			
		writeValue(2, 34, editValue, 5, -1);
	}
}
    45b6:	0f 91       	pop	r16
		
		//configSave();
		lcdSelectFont(NULL);
		keys = KEY_REFRESH;
		// call defaultHandler to refresh the screen
		defaultHandler();
    45b8:	0c 94 14 23 	jmp	0x4628	; 0x4628 <defaultHandler>
		return;
	}
	if (ANYKEY)
    45bc:	88 23       	and	r24, r24
    45be:	91 f1       	breq	.+100    	; 0x4624 <editModeHandler+0xa4>
	{
		if (KEY2)	// DOWN?
    45c0:	86 ff       	sbrs	r24, 6
    45c2:	0d c0       	rjmp	.+26     	; 0x45de <editModeHandler+0x5e>
		{
			if (editValue > editLoLimit)
    45c4:	80 91 98 05 	lds	r24, 0x0598
    45c8:	90 91 99 05 	lds	r25, 0x0599
    45cc:	20 91 96 05 	lds	r18, 0x0596
    45d0:	30 91 97 05 	lds	r19, 0x0597
    45d4:	28 17       	cp	r18, r24
    45d6:	39 07       	cpc	r19, r25
    45d8:	dc f4       	brge	.+54     	; 0x4610 <editModeHandler+0x90>
				editValue--;
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	15 c0       	rjmp	.+42     	; 0x4608 <editModeHandler+0x88>
		}
		else if (KEY3)	// UP?
    45de:	85 ff       	sbrs	r24, 5
    45e0:	0d c0       	rjmp	.+26     	; 0x45fc <editModeHandler+0x7c>
		{
			if (editValue < editHiLimit)
    45e2:	80 91 98 05 	lds	r24, 0x0598
    45e6:	90 91 99 05 	lds	r25, 0x0599
    45ea:	20 91 94 05 	lds	r18, 0x0594
    45ee:	30 91 95 05 	lds	r19, 0x0595
    45f2:	82 17       	cp	r24, r18
    45f4:	93 07       	cpc	r25, r19
    45f6:	64 f4       	brge	.+24     	; 0x4610 <editModeHandler+0x90>
				editValue++;
    45f8:	01 96       	adiw	r24, 0x01	; 1
    45fa:	06 c0       	rjmp	.+12     	; 0x4608 <editModeHandler+0x88>
		}
		else if (KEY1)	// CLR?
    45fc:	87 ff       	sbrs	r24, 7
    45fe:	08 c0       	rjmp	.+16     	; 0x4610 <editModeHandler+0x90>
			editValue = editInitialValue;
    4600:	80 91 92 05 	lds	r24, 0x0592
    4604:	90 91 93 05 	lds	r25, 0x0593
    4608:	90 93 99 05 	sts	0x0599, r25
    460c:	80 93 98 05 	sts	0x0598, r24
			
		writeValue(2, 34, editValue, 5, -1);
    4610:	40 91 98 05 	lds	r20, 0x0598
    4614:	50 91 99 05 	lds	r21, 0x0599
    4618:	0f ef       	ldi	r16, 0xFF	; 255
    461a:	25 e0       	ldi	r18, 0x05	; 5
    461c:	62 e2       	ldi	r22, 0x22	; 34
    461e:	82 e0       	ldi	r24, 0x02	; 2
    4620:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	}
}
    4624:	0f 91       	pop	r16
    4626:	08 95       	ret

00004628 <defaultHandler>:
}

static void editModeHandler();
static void defaultHandler()
{
	if (editMode)		// edit mode?
    4628:	80 91 91 05 	lds	r24, 0x0591
    462c:	81 11       	cpse	r24, r1
		editModeHandler();
    462e:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <editModeHandler>
	else
	{
		if (KEYINIT | KEYREFRESH)
    4632:	80 91 a4 05 	lds	r24, 0x05A4
    4636:	83 70       	andi	r24, 0x03	; 3
    4638:	91 f0       	breq	.+36     	; 0x465e <defaultHandler+0x36>
		{
			lcdClear();
    463a:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
			if (currentPage.screen)
    463e:	80 91 9e 05 	lds	r24, 0x059E
    4642:	90 91 9f 05 	lds	r25, 0x059F
    4646:	00 97       	sbiw	r24, 0x00	; 0
    4648:	11 f0       	breq	.+4      	; 0x464e <defaultHandler+0x26>
				lcdWriteString_P(currentPage.screen);
    464a:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			writeSoftkeys(NULL);
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
			lcdSetPos(0, 0);
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		}
		
		if (currentPage.handler)
    465e:	e0 91 9c 05 	lds	r30, 0x059C
    4662:	f0 91 9d 05 	lds	r31, 0x059D
    4666:	30 97       	sbiw	r30, 0x00	; 0
    4668:	09 f0       	breq	.+2      	; 0x466c <defaultHandler+0x44>
			currentPage.handler();
    466a:	09 94       	ijmp
    466c:	08 95       	ret

0000466e <startEditMode>:
		writeValue(2, 34, editValue, 5, -1);
	}
}

static void startEditMode(void* valuePtr, int16_t loLimit, int16_t hiLimit, uint8_t valueType)
{
    466e:	0f 93       	push	r16
	editMode = ON;
    4670:	31 e0       	ldi	r19, 0x01	; 1
    4672:	30 93 91 05 	sts	0x0591, r19
	keys = KEY_INIT;
    4676:	30 93 a4 05 	sts	0x05A4, r19
	editValuePtr = valuePtr;
    467a:	90 93 8f 05 	sts	0x058F, r25
    467e:	80 93 8e 05 	sts	0x058E, r24
	editValueType = valueType;
    4682:	20 93 90 05 	sts	0x0590, r18
	
	if (valueType == TYPE_UINT8)
    4686:	21 11       	cpse	r18, r1
    4688:	04 c0       	rjmp	.+8      	; 0x4692 <startEditMode+0x24>
		editValue = *(uint8_t*)valuePtr;
    468a:	fc 01       	movw	r30, r24
    468c:	80 81       	ld	r24, Z
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	07 c0       	rjmp	.+14     	; 0x46a0 <startEditMode+0x32>
	else if (valueType == TYPE_INT8)
    4692:	21 30       	cpi	r18, 0x01	; 1
    4694:	49 f4       	brne	.+18     	; 0x46a8 <startEditMode+0x3a>
		editValue = *(int8_t*)valuePtr;
    4696:	fc 01       	movw	r30, r24
    4698:	80 81       	ld	r24, Z
    469a:	99 27       	eor	r25, r25
    469c:	87 fd       	sbrc	r24, 7
    469e:	90 95       	com	r25
    46a0:	90 93 99 05 	sts	0x0599, r25
    46a4:	80 93 98 05 	sts	0x0598, r24
// 	else if (valueType == TYPE_INT16)
// 		editValue = *(int16_t*)valuePtr;
	
	editLoLimit = loLimit;
    46a8:	70 93 97 05 	sts	0x0597, r23
    46ac:	60 93 96 05 	sts	0x0596, r22
	editHiLimit = hiLimit;
    46b0:	50 93 95 05 	sts	0x0595, r21
    46b4:	40 93 94 05 	sts	0x0594, r20
	editInitialValue = editValue;
    46b8:	80 91 98 05 	lds	r24, 0x0598
    46bc:	90 91 99 05 	lds	r25, 0x0599
    46c0:	90 93 93 05 	sts	0x0593, r25
    46c4:	80 93 92 05 	sts	0x0592, r24
	
	lcdFillRectangle(30, 11, 98, 34, 0);
    46c8:	00 e0       	ldi	r16, 0x00	; 0
    46ca:	22 e2       	ldi	r18, 0x22	; 34
    46cc:	42 e6       	ldi	r20, 0x62	; 98
    46ce:	6b e0       	ldi	r22, 0x0B	; 11
    46d0:	8e e1       	ldi	r24, 0x1E	; 30
    46d2:	0e 94 1e 12 	call	0x243c	; 0x243c <lcdFillRectangle>
	lcdRectangle(30, 11, 98, 34, 1);
    46d6:	01 e0       	ldi	r16, 0x01	; 1
    46d8:	22 e2       	ldi	r18, 0x22	; 34
    46da:	42 e6       	ldi	r20, 0x62	; 98
    46dc:	6b e0       	ldi	r22, 0x0B	; 11
    46de:	8e e1       	ldi	r24, 0x1E	; 30
    46e0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <lcdRectangle>
	lcdRectangle(31, 12, 97, 33, 1);
    46e4:	21 e2       	ldi	r18, 0x21	; 33
    46e6:	41 e6       	ldi	r20, 0x61	; 97
    46e8:	6c e0       	ldi	r22, 0x0C	; 12
    46ea:	8f e1       	ldi	r24, 0x1F	; 31
    46ec:	0e 94 e7 11 	call	0x23ce	; 0x23ce <lcdRectangle>
	writeSoftkeys(_skEDIT);
    46f0:	81 ec       	ldi	r24, 0xC1	; 193
    46f2:	90 e1       	ldi	r25, 0x10	; 16
    46f4:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
	lcdSelectFont(&font12x16);
    46f8:	88 e9       	ldi	r24, 0x98	; 152
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
	editModeHandler();
}
    4700:	0f 91       	pop	r16
	lcdFillRectangle(30, 11, 98, 34, 0);
	lcdRectangle(30, 11, 98, 34, 1);
	lcdRectangle(31, 12, 97, 33, 1);
	writeSoftkeys(_skEDIT);
	lcdSelectFont(&font12x16);
	editModeHandler();
    4702:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <editModeHandler>

00004706 <_hMixerEditor>:
	for (uint8_t i = 0; i < 4; i++)
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
}

static void _hMixerEditor()
{
    4706:	0f 93       	push	r16
    4708:	1f 93       	push	r17
    470a:	cf 93       	push	r28
    470c:	df 93       	push	r29
	NOKEYRETURN;
    470e:	80 91 a4 05 	lds	r24, 0x05A4
    4712:	88 23       	and	r24, r24
    4714:	09 f4       	brne	.+2      	; 0x4718 <_hMixerEditor+0x12>
    4716:	9f c0       	rjmp	.+318    	; 0x4856 <_hMixerEditor+0x150>
		
	if (KEY4)	// CHANGE?
    4718:	84 ff       	sbrs	r24, 4
    471a:	41 c0       	rjmp	.+130    	; 0x479e <_hMixerEditor+0x98>
	{
		if (elementIndex == 0)
    471c:	80 91 a3 05 	lds	r24, 0x05A3
    4720:	e0 91 a2 05 	lds	r30, 0x05A2
    4724:	81 11       	cpse	r24, r1
    4726:	05 c0       	rjmp	.+10     	; 0x4732 <_hMixerEditor+0x2c>
			subpage = (subpage + 1) % length(Config.Mixer);
    4728:	ef 5f       	subi	r30, 0xFF	; 255
    472a:	e7 70       	andi	r30, 0x07	; 7
    472c:	e0 93 a2 05 	sts	0x05A2, r30
    4730:	36 c0       	rjmp	.+108    	; 0x479e <_hMixerEditor+0x98>
		else if (elementIndex <= 5)
    4732:	86 30       	cpi	r24, 0x06	; 6
    4734:	98 f4       	brcc	.+38     	; 0x475c <_hMixerEditor+0x56>
		{
			startEditMode(&Config.Mixer[subpage].I8[elementIndex - 1], -127, 127, TYPE_INT8); 
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	26 e0       	ldi	r18, 0x06	; 6
    473a:	e2 9f       	mul	r30, r18
    473c:	80 0d       	add	r24, r0
    473e:	91 1d       	adc	r25, r1
    4740:	11 24       	eor	r1, r1
    4742:	21 e0       	ldi	r18, 0x01	; 1
    4744:	4f e7       	ldi	r20, 0x7F	; 127
    4746:	50 e0       	ldi	r21, 0x00	; 0
    4748:	61 e8       	ldi	r22, 0x81	; 129
    474a:	7f ef       	ldi	r23, 0xFF	; 255
    474c:	80 55       	subi	r24, 0x50	; 80
    474e:	99 4f       	sbci	r25, 0xF9	; 249
	else
		s = strOff;
		
	writeString_P(5, 36, s, 5, 6);
	writeString_P(5, 108, Config.Mixer[subpage].IsMotor || Config.Mixer[subpage].IsHiRate ? strHigh : strLow, 3, 7);
}
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	1f 91       	pop	r17
    4756:	0f 91       	pop	r16
	{
		if (elementIndex == 0)
			subpage = (subpage + 1) % length(Config.Mixer);
		else if (elementIndex <= 5)
		{
			startEditMode(&Config.Mixer[subpage].I8[elementIndex - 1], -127, 127, TYPE_INT8); 
    4758:	0c 94 37 23 	jmp	0x466e	; 0x466e <startEditMode>
			return;
		}						
		else if (elementIndex == 6)		// type
    475c:	86 30       	cpi	r24, 0x06	; 6
    475e:	a9 f4       	brne	.+42     	; 0x478a <_hMixerEditor+0x84>
		{
			if (Config.Mixer[subpage].Flags == 0)
    4760:	8e 9f       	mul	r24, r30
    4762:	f0 01       	movw	r30, r0
    4764:	11 24       	eor	r1, r1
    4766:	df 01       	movw	r26, r30
    4768:	aa 54       	subi	r26, 0x4A	; 74
    476a:	b9 4f       	sbci	r27, 0xF9	; 249
    476c:	8c 91       	ld	r24, X
    476e:	81 11       	cpse	r24, r1
    4770:	02 c0       	rjmp	.+4      	; 0x4776 <_hMixerEditor+0x70>
				Config.Mixer[subpage].Flags = FLAG_ESC | FLAG_HIGH;
    4772:	85 e0       	ldi	r24, 0x05	; 5
    4774:	06 c0       	rjmp	.+12     	; 0x4782 <_hMixerEditor+0x7c>
			else if (Config.Mixer[subpage].IsMotor)
    4776:	ea 54       	subi	r30, 0x4A	; 74
    4778:	f9 4f       	sbci	r31, 0xF9	; 249
    477a:	80 81       	ld	r24, Z
    477c:	80 ff       	sbrs	r24, 0
    477e:	03 c0       	rjmp	.+6      	; 0x4786 <_hMixerEditor+0x80>
				Config.Mixer[subpage].Flags = FLAG_SERVO;
    4780:	82 e0       	ldi	r24, 0x02	; 2
    4782:	8c 93       	st	X, r24
    4784:	0c c0       	rjmp	.+24     	; 0x479e <_hMixerEditor+0x98>
			else 
				Config.Mixer[subpage].Flags = FLAG_NONE;
    4786:	1c 92       	st	X, r1
    4788:	0a c0       	rjmp	.+20     	; 0x479e <_hMixerEditor+0x98>
		}		
		else
			Config.Mixer[subpage].Flags ^= FLAG_HIGH;
    478a:	86 e0       	ldi	r24, 0x06	; 6
    478c:	e8 9f       	mul	r30, r24
    478e:	f0 01       	movw	r30, r0
    4790:	11 24       	eor	r1, r1
    4792:	ea 54       	subi	r30, 0x4A	; 74
    4794:	f9 4f       	sbci	r31, 0xF9	; 249
    4796:	80 81       	ld	r24, Z
    4798:	94 e0       	ldi	r25, 0x04	; 4
    479a:	89 27       	eor	r24, r25
    479c:	80 83       	st	Z, r24
	}
	
	elementKey(8);
    479e:	88 e0       	ldi	r24, 0x08	; 8
    47a0:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <elementKey>
	writeValue(0, 120, subpage + 1, 1, 0);
    47a4:	40 91 a2 05 	lds	r20, 0x05A2
    47a8:	50 e0       	ldi	r21, 0x00	; 0
    47aa:	4f 5f       	subi	r20, 0xFF	; 255
    47ac:	5f 4f       	sbci	r21, 0xFF	; 255
    47ae:	00 e0       	ldi	r16, 0x00	; 0
    47b0:	21 e0       	ldi	r18, 0x01	; 1
    47b2:	68 e7       	ldi	r22, 0x78	; 120
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
    47ba:	c0 e0       	ldi	r28, 0x00	; 0
    47bc:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 5; i++)
		writeValue(i, 60, Config.Mixer[subpage].I8[i], 4, i + 1);
    47be:	16 e0       	ldi	r17, 0x06	; 6
    47c0:	0c 2f       	mov	r16, r28
    47c2:	0f 5f       	subi	r16, 0xFF	; 255
    47c4:	80 91 a2 05 	lds	r24, 0x05A2
    47c8:	fe 01       	movw	r30, r28
    47ca:	18 9f       	mul	r17, r24
    47cc:	e0 0d       	add	r30, r0
    47ce:	f1 1d       	adc	r31, r1
    47d0:	11 24       	eor	r1, r1
    47d2:	ef 54       	subi	r30, 0x4F	; 79
    47d4:	f9 4f       	sbci	r31, 0xF9	; 249
    47d6:	40 81       	ld	r20, Z
    47d8:	55 27       	eor	r21, r21
    47da:	47 fd       	sbrc	r20, 7
    47dc:	50 95       	com	r21
    47de:	24 e0       	ldi	r18, 0x04	; 4
    47e0:	6c e3       	ldi	r22, 0x3C	; 60
    47e2:	8c 2f       	mov	r24, r28
    47e4:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
    47e8:	21 96       	adiw	r28, 0x01	; 1
			Config.Mixer[subpage].Flags ^= FLAG_HIGH;
	}
	
	elementKey(8);
	writeValue(0, 120, subpage + 1, 1, 0);
	for (uint8_t i = 0; i < 5; i++)
    47ea:	c5 30       	cpi	r28, 0x05	; 5
    47ec:	d1 05       	cpc	r29, r1
    47ee:	41 f7       	brne	.-48     	; 0x47c0 <_hMixerEditor+0xba>
		writeValue(i, 60, Config.Mixer[subpage].I8[i], 4, i + 1);
	const char *s;
	
	if (Config.Mixer[subpage].IsMotor)
    47f0:	e0 91 a2 05 	lds	r30, 0x05A2
    47f4:	26 e0       	ldi	r18, 0x06	; 6
    47f6:	e2 9f       	mul	r30, r18
    47f8:	f0 01       	movw	r30, r0
    47fa:	11 24       	eor	r1, r1
    47fc:	ea 54       	subi	r30, 0x4A	; 74
    47fe:	f9 4f       	sbci	r31, 0xF9	; 249
    4800:	80 81       	ld	r24, Z
    4802:	80 fd       	sbrc	r24, 0
    4804:	05 c0       	rjmp	.+10     	; 0x4810 <_hMixerEditor+0x10a>
		s = strESC;
	else if (Config.Mixer[subpage].IsServo)
    4806:	81 ff       	sbrs	r24, 1
    4808:	06 c0       	rjmp	.+12     	; 0x4816 <_hMixerEditor+0x110>
		s = strServo;
    480a:	44 e0       	ldi	r20, 0x04	; 4
    480c:	59 e1       	ldi	r21, 0x19	; 25
    480e:	05 c0       	rjmp	.+10     	; 0x481a <_hMixerEditor+0x114>
	for (uint8_t i = 0; i < 5; i++)
		writeValue(i, 60, Config.Mixer[subpage].I8[i], 4, i + 1);
	const char *s;
	
	if (Config.Mixer[subpage].IsMotor)
		s = strESC;
    4810:	4a e0       	ldi	r20, 0x0A	; 10
    4812:	59 e1       	ldi	r21, 0x19	; 25
    4814:	02 c0       	rjmp	.+4      	; 0x481a <_hMixerEditor+0x114>
	else if (Config.Mixer[subpage].IsServo)
		s = strServo;
	else
		s = strOff;
    4816:	4d ec       	ldi	r20, 0xCD	; 205
    4818:	58 e1       	ldi	r21, 0x18	; 24
		
	writeString_P(5, 36, s, 5, 6);
    481a:	06 e0       	ldi	r16, 0x06	; 6
    481c:	25 e0       	ldi	r18, 0x05	; 5
    481e:	64 e2       	ldi	r22, 0x24	; 36
    4820:	85 e0       	ldi	r24, 0x05	; 5
    4822:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
	writeString_P(5, 108, Config.Mixer[subpage].IsMotor || Config.Mixer[subpage].IsHiRate ? strHigh : strLow, 3, 7);
    4826:	e0 91 a2 05 	lds	r30, 0x05A2
    482a:	86 e0       	ldi	r24, 0x06	; 6
    482c:	e8 9f       	mul	r30, r24
    482e:	f0 01       	movw	r30, r0
    4830:	11 24       	eor	r1, r1
    4832:	ea 54       	subi	r30, 0x4A	; 74
    4834:	f9 4f       	sbci	r31, 0xF9	; 249
    4836:	80 81       	ld	r24, Z
    4838:	80 ff       	sbrs	r24, 0
    483a:	03 c0       	rjmp	.+6      	; 0x4842 <_hMixerEditor+0x13c>
    483c:	41 e0       	ldi	r20, 0x01	; 1
    483e:	59 e1       	ldi	r21, 0x19	; 25
    4840:	04 c0       	rjmp	.+8      	; 0x484a <_hMixerEditor+0x144>
    4842:	82 fd       	sbrc	r24, 2
    4844:	fb cf       	rjmp	.-10     	; 0x483c <_hMixerEditor+0x136>
    4846:	4e ef       	ldi	r20, 0xFE	; 254
    4848:	58 e1       	ldi	r21, 0x18	; 24
    484a:	07 e0       	ldi	r16, 0x07	; 7
    484c:	23 e0       	ldi	r18, 0x03	; 3
    484e:	6c e6       	ldi	r22, 0x6C	; 108
    4850:	85 e0       	ldi	r24, 0x05	; 5
    4852:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <writeString_P>
}
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	1f 91       	pop	r17
    485c:	0f 91       	pop	r16
    485e:	08 95       	ret

00004860 <_hCPPMSettings>:
		lcdWriteString_P(scrCPPMSettings2);
	writeSoftkeys(NULL);
}

static void _hCPPMSettings()
{
    4860:	ef 92       	push	r14
    4862:	ff 92       	push	r15
    4864:	0f 93       	push	r16
    4866:	1f 93       	push	r17
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
	NOKEYRETURN;
    486c:	d0 91 a4 05 	lds	r29, 0x05A4
    4870:	dd 23       	and	r29, r29
    4872:	09 f4       	brne	.+2      	; 0x4876 <_hCPPMSettings+0x16>
    4874:	62 c0       	rjmp	.+196    	; 0x493a <_hCPPMSettings+0xda>
	uint8_t oldsubpage = elementIndex / 4;
    4876:	10 91 a3 05 	lds	r17, 0x05A3
	elementKey(8);
    487a:	88 e0       	ldi	r24, 0x08	; 8
    487c:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <elementKey>
	uint8_t subpage = elementIndex / 4;
    4880:	c0 91 a3 05 	lds	r28, 0x05A3
    4884:	c6 95       	lsr	r28
    4886:	c6 95       	lsr	r28
    4888:	d3 70       	andi	r29, 0x03	; 3
	
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
    488a:	21 f4       	brne	.+8      	; 0x4894 <_hCPPMSettings+0x34>
}

static void _hCPPMSettings()
{
	NOKEYRETURN;
	uint8_t oldsubpage = elementIndex / 4;
    488c:	16 95       	lsr	r17
    488e:	16 95       	lsr	r17
	elementKey(8);
	uint8_t subpage = elementIndex / 4;
	
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
    4890:	1c 17       	cp	r17, r28
    4892:	b9 f0       	breq	.+46     	; 0x48c2 <_hCPPMSettings+0x62>
	simplePageHandler(elements, length(elements));
}

static void writeCPPMScreen(uint8_t index)
{
	lcdClear();
    4894:	0e 94 4d 12 	call	0x249a	; 0x249a <lcdClear>
	lcdWriteString_P(strCPPMSettings);
    4898:	81 eb       	ldi	r24, 0xB1	; 177
    489a:	99 e1       	ldi	r25, 0x19	; 25
    489c:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
	lcdSetPos(2, 0);
    48a0:	60 e0       	ldi	r22, 0x00	; 0
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	if (index == 0)
    48a8:	c1 11       	cpse	r28, r1
    48aa:	03 c0       	rjmp	.+6      	; 0x48b2 <_hCPPMSettings+0x52>
		lcdWriteString_P(scrCPPMSettings1);
    48ac:	85 e0       	ldi	r24, 0x05	; 5
    48ae:	96 e1       	ldi	r25, 0x16	; 22
    48b0:	02 c0       	rjmp	.+4      	; 0x48b6 <_hCPPMSettings+0x56>
	else
		lcdWriteString_P(scrCPPMSettings2);
    48b2:	8d ee       	ldi	r24, 0xED	; 237
    48b4:	95 e1       	ldi	r25, 0x15	; 21
    48b6:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
	writeSoftkeys(NULL);
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <writeSoftkeys>
	uint8_t subpage = elementIndex / 4;
	
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
		writeCPPMScreen(subpage);
	
	if (KEY4)	// CHANGE?
    48c2:	80 91 a4 05 	lds	r24, 0x05A4
    48c6:	ec 2e       	mov	r14, r28
    48c8:	f1 2c       	mov	r15, r1
    48ca:	84 ff       	sbrs	r24, 4
    48cc:	18 c0       	rjmp	.+48     	; 0x48fe <_hCPPMSettings+0x9e>
	{
		startEditMode(&Config.RX_chmap[subpage * 4 + elementIndex - 1], 1, 8, TYPE_UINT8);
    48ce:	c7 01       	movw	r24, r14
    48d0:	88 0f       	add	r24, r24
    48d2:	99 1f       	adc	r25, r25
    48d4:	88 0f       	add	r24, r24
    48d6:	99 1f       	adc	r25, r25
    48d8:	20 91 a3 05 	lds	r18, 0x05A3
    48dc:	82 0f       	add	r24, r18
    48de:	91 1d       	adc	r25, r1
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	48 e0       	ldi	r20, 0x08	; 8
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	61 e0       	ldi	r22, 0x01	; 1
    48e8:	70 e0       	ldi	r23, 0x00	; 0
    48ea:	87 58       	subi	r24, 0x87	; 135
    48ec:	99 4f       	sbci	r25, 0xF9	; 249
		return;
	}
	
	for (int i = 0; i < 4; i++)
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
}
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	1f 91       	pop	r17
    48f4:	0f 91       	pop	r16
    48f6:	ff 90       	pop	r15
    48f8:	ef 90       	pop	r14
	if (KEYINIT || KEYREFRESH || oldsubpage != subpage)
		writeCPPMScreen(subpage);
	
	if (KEY4)	// CHANGE?
	{
		startEditMode(&Config.RX_chmap[subpage * 4 + elementIndex - 1], 1, 8, TYPE_UINT8);
    48fa:	0c 94 37 23 	jmp	0x466e	; 0x466e <startEditMode>
		return;
	}
	
	for (int i = 0; i < 4; i++)
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
    48fe:	1c 2f       	mov	r17, r28
    4900:	11 0f       	add	r17, r17
    4902:	11 0f       	add	r17, r17
    4904:	ee 0c       	add	r14, r14
    4906:	ff 1c       	adc	r15, r15
    4908:	ee 0c       	add	r14, r14
    490a:	ff 1c       	adc	r15, r15
    490c:	c0 e0       	ldi	r28, 0x00	; 0
    490e:	d0 e0       	ldi	r29, 0x00	; 0
    4910:	c7 01       	movw	r24, r14
    4912:	87 59       	subi	r24, 0x97	; 151
    4914:	99 4f       	sbci	r25, 0xF9	; 249
    4916:	7c 01       	movw	r14, r24
    4918:	0c 2f       	mov	r16, r28
    491a:	01 0f       	add	r16, r17
    491c:	f7 01       	movw	r30, r14
    491e:	ec 0f       	add	r30, r28
    4920:	fd 1f       	adc	r31, r29
    4922:	41 89       	ldd	r20, Z+17	; 0x11
    4924:	50 e0       	ldi	r21, 0x00	; 0
    4926:	21 e0       	ldi	r18, 0x01	; 1
    4928:	6e e4       	ldi	r22, 0x4E	; 78
    492a:	8c 2f       	mov	r24, r28
    492c:	8e 5f       	subi	r24, 0xFE	; 254
    492e:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	{
		startEditMode(&Config.RX_chmap[subpage * 4 + elementIndex - 1], 1, 8, TYPE_UINT8);
		return;
	}
	
	for (int i = 0; i < 4; i++)
    4932:	21 96       	adiw	r28, 0x01	; 1
    4934:	c4 30       	cpi	r28, 0x04	; 4
    4936:	d1 05       	cpc	r29, r1
    4938:	79 f7       	brne	.-34     	; 0x4918 <_hCPPMSettings+0xb8>
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
}
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	1f 91       	pop	r17
    4940:	0f 91       	pop	r16
    4942:	ff 90       	pop	r15
    4944:	ef 90       	pop	r14
    4946:	08 95       	ret

00004948 <simplePageHandler>:
	writeString_P(5, 36, s, 5, 6);
	writeString_P(5, 108, Config.Mixer[subpage].IsMotor || Config.Mixer[subpage].IsHiRate ? strHigh : strLow, 3, 7);
}

static void simplePageHandler(const edit_element_t *elements, uint8_t len)
{
    4948:	df 92       	push	r13
    494a:	ef 92       	push	r14
    494c:	ff 92       	push	r15
    494e:	0f 93       	push	r16
    4950:	1f 93       	push	r17
    4952:	cf 93       	push	r28
    4954:	df 93       	push	r29
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	29 97       	sbiw	r28, 0x09	; 9
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	f8 94       	cli
    4960:	de bf       	out	0x3e, r29	; 62
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	7c 01       	movw	r14, r24
    4968:	d6 2e       	mov	r13, r22
	NOKEYRETURN;
    496a:	10 91 a4 05 	lds	r17, 0x05A4
    496e:	11 23       	and	r17, r17
    4970:	a9 f1       	breq	.+106    	; 0x49dc <simplePageHandler+0x94>
	edit_element_t element;
	elementKey(len);
    4972:	86 2f       	mov	r24, r22
    4974:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <elementKey>
	if (KEY4)	// CHANGE?
    4978:	14 fd       	sbrc	r17, 4
    497a:	19 c0       	rjmp	.+50     	; 0x49ae <simplePageHandler+0x66>
    497c:	10 e0       	ldi	r17, 0x00	; 0
	{
		memcpy_P(&element, &elements[elementIndex], sizeof(element));
		startEditMode(element.valuePtr, element.loLimit, element.hiLimit, TYPE_UINT8);
		return;
	}
	for (uint8_t i = 0; i < len; i++)
    497e:	1d 15       	cp	r17, r13
    4980:	69 f1       	breq	.+90     	; 0x49dc <simplePageHandler+0x94>
	{
		memcpy_P(&element, &elements[i], sizeof(element));
    4982:	49 e0       	ldi	r20, 0x09	; 9
    4984:	50 e0       	ldi	r21, 0x00	; 0
    4986:	b7 01       	movw	r22, r14
    4988:	ce 01       	movw	r24, r28
    498a:	01 96       	adiw	r24, 0x01	; 1
    498c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <memcpy_P>
		writeValue(element.X, element.Y, *(uint8_t*)element.valuePtr, element.len, i);
    4990:	eb 81       	ldd	r30, Y+3	; 0x03
    4992:	fc 81       	ldd	r31, Y+4	; 0x04
    4994:	40 81       	ld	r20, Z
    4996:	50 e0       	ldi	r21, 0x00	; 0
    4998:	01 2f       	mov	r16, r17
    499a:	29 85       	ldd	r18, Y+9	; 0x09
    499c:	6a 81       	ldd	r22, Y+2	; 0x02
    499e:	89 81       	ldd	r24, Y+1	; 0x01
    49a0:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	{
		memcpy_P(&element, &elements[elementIndex], sizeof(element));
		startEditMode(element.valuePtr, element.loLimit, element.hiLimit, TYPE_UINT8);
		return;
	}
	for (uint8_t i = 0; i < len; i++)
    49a4:	1f 5f       	subi	r17, 0xFF	; 255
    49a6:	89 e0       	ldi	r24, 0x09	; 9
    49a8:	e8 0e       	add	r14, r24
    49aa:	f1 1c       	adc	r15, r1
    49ac:	e8 cf       	rjmp	.-48     	; 0x497e <simplePageHandler+0x36>
	NOKEYRETURN;
	edit_element_t element;
	elementKey(len);
	if (KEY4)	// CHANGE?
	{
		memcpy_P(&element, &elements[elementIndex], sizeof(element));
    49ae:	80 91 a3 05 	lds	r24, 0x05A3
    49b2:	b7 01       	movw	r22, r14
    49b4:	99 e0       	ldi	r25, 0x09	; 9
    49b6:	89 9f       	mul	r24, r25
    49b8:	60 0d       	add	r22, r0
    49ba:	71 1d       	adc	r23, r1
    49bc:	11 24       	eor	r1, r1
    49be:	49 e0       	ldi	r20, 0x09	; 9
    49c0:	50 e0       	ldi	r21, 0x00	; 0
    49c2:	ce 01       	movw	r24, r28
    49c4:	01 96       	adiw	r24, 0x01	; 1
    49c6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <memcpy_P>
		startEditMode(element.valuePtr, element.loLimit, element.hiLimit, TYPE_UINT8);
    49ca:	4f 81       	ldd	r20, Y+7	; 0x07
    49cc:	58 85       	ldd	r21, Y+8	; 0x08
    49ce:	6d 81       	ldd	r22, Y+5	; 0x05
    49d0:	7e 81       	ldd	r23, Y+6	; 0x06
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	8b 81       	ldd	r24, Y+3	; 0x03
    49d6:	9c 81       	ldd	r25, Y+4	; 0x04
    49d8:	0e 94 37 23 	call	0x466e	; 0x466e <startEditMode>
	for (uint8_t i = 0; i < len; i++)
	{
		memcpy_P(&element, &elements[i], sizeof(element));
		writeValue(element.X, element.Y, *(uint8_t*)element.valuePtr, element.len, i);
	}
}
    49dc:	29 96       	adiw	r28, 0x09	; 9
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	1f 91       	pop	r17
    49ee:	0f 91       	pop	r16
    49f0:	ff 90       	pop	r15
    49f2:	ef 90       	pop	r14
    49f4:	df 90       	pop	r13
    49f6:	08 95       	ret

000049f8 <_hCameraStabSettings>:
		{ 2, 84, &Config.Camera.RollGain, -128, 127, 5 },
		{ 3, 84, &Config.Camera.RollOffset, -128, 127, 5 },
		{ 4, 84, &Config.Camera.PitchGain, -128, 127, 5 },
		{ 5, 84, &Config.Camera.PitchOffset, -128, 127, 5 },
	};
	simplePageHandler(elements, length(elements));
    49f8:	64 e0       	ldi	r22, 0x04	; 4
    49fa:	87 ef       	ldi	r24, 0xF7	; 247
    49fc:	9f e0       	ldi	r25, 0x0F	; 15
    49fe:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <simplePageHandler>

00004a02 <_hSelflevelSettings>:
		{ 0, 54, &Config.PID_SelfLevel.PGain, 0, 250, 5 },
		{ 1, 54, &Config.PID_SelfLevel.PLimit, 0, 250, 5 },
		{ 3, 96, &Config.AccTrim[ROL], -45, 45, 5 },
		{ 4, 96, &Config.AccTrim[PIT], -45, 45, 5 },
	};
	simplePageHandler(elements, length(elements));
    4a02:	64 e0       	ldi	r22, 0x04	; 4
    4a04:	83 ed       	ldi	r24, 0xD3	; 211
    4a06:	9f e0       	ldi	r25, 0x0F	; 15
    4a08:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <simplePageHandler>

00004a0c <_hMiscSettings>:
		{ 1, 102, &Config.HeightDampening, 0, 250, 4 },
		{ 2, 102, &Config.HeightDampeningLimit, 0, 30, 4 },
		{ 3, 102, &Config.LVA, 0, 250, 4 },
		{ 4, 102, &Config.ServoFilter, 0, 100, 4 },
	};
	simplePageHandler(elements, length(elements));
    4a0c:	65 e0       	ldi	r22, 0x05	; 5
    4a0e:	86 ea       	ldi	r24, 0xA6	; 166
    4a10:	9f e0       	ldi	r25, 0x0F	; 15
    4a12:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <simplePageHandler>

00004a16 <_hStickScaling>:
		{ 2, 78, &Config.StickScaling[AIL], 0, 200, 5 },
		{ 3, 78, &Config.StickScaling[ELE], 0, 200, 5 },
		{ 4, 78, &Config.StickScaling[RUD], 0, 200, 5 },
		{ 5, 78, &Config.StickScaling[THR], 0, 200, 5 },
	};
	simplePageHandler(elements, length(elements));
    4a16:	64 e0       	ldi	r22, 0x04	; 4
    4a18:	82 e8       	ldi	r24, 0x82	; 130
    4a1a:	9f e0       	ldi	r25, 0x0F	; 15
    4a1c:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <simplePageHandler>

00004a20 <_hPIEditor>:
	writeString_P(3, 84, Config.AutoDisarm ? strYes : strNo, 3, 3);
	writeString_P(4, 84, Config.ReceiverMode ? strYes : strNo, 3, 4);
}

static void _hPIEditor()
{
    4a20:	ef 92       	push	r14
    4a22:	ff 92       	push	r15
    4a24:	0f 93       	push	r16
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
	NOKEYRETURN;
    4a2a:	d0 91 a4 05 	lds	r29, 0x05A4
    4a2e:	dd 23       	and	r29, r29
    4a30:	09 f4       	brne	.+2      	; 0x4a34 <_hPIEditor+0x14>
    4a32:	6b c0       	rjmp	.+214    	; 0x4b0a <_hPIEditor+0xea>
	
	elementKey(5);
    4a34:	85 e0       	ldi	r24, 0x05	; 5
    4a36:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <elementKey>

	uint8_t index = subpage;
    4a3a:	80 91 a2 05 	lds	r24, 0x05A2
	if (Config.LinkRollPitch) index = subpage & 0xFE; 
    4a3e:	20 91 9e 06 	lds	r18, 0x069E
    4a42:	c8 2f       	mov	r28, r24
    4a44:	21 11       	cpse	r18, r1
    4a46:	ce 7f       	andi	r28, 0xFE	; 254
	
	if (KEY4) // CHANGE
    4a48:	d4 ff       	sbrs	r29, 4
    4a4a:	26 c0       	rjmp	.+76     	; 0x4a98 <_hPIEditor+0x78>
	{
		if (elementIndex == 0)
    4a4c:	90 91 a3 05 	lds	r25, 0x05A3
    4a50:	91 11       	cpse	r25, r1
    4a52:	0d c0       	rjmp	.+26     	; 0x4a6e <_hPIEditor+0x4e>
		{
			subpage = (subpage + 1) % 3;
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	01 96       	adiw	r24, 0x01	; 1
    4a58:	63 e0       	ldi	r22, 0x03	; 3
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__divmodhi4>
    4a60:	c8 2f       	mov	r28, r24
    4a62:	80 93 a2 05 	sts	0x05A2, r24
			index = subpage;
			if (Config.LinkRollPitch) index = subpage & 0xFE;
    4a66:	22 23       	and	r18, r18
    4a68:	b9 f0       	breq	.+46     	; 0x4a98 <_hPIEditor+0x78>
    4a6a:	ce 7f       	andi	r28, 0xFE	; 254
    4a6c:	15 c0       	rjmp	.+42     	; 0x4a98 <_hPIEditor+0x78>
		}			
		else
		{
			startEditMode(&Config.PID[index].UI8[elementIndex - 1], 0, 200, TYPE_UINT8);
    4a6e:	89 2f       	mov	r24, r25
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	24 e0       	ldi	r18, 0x04	; 4
    4a74:	c2 9f       	mul	r28, r18
    4a76:	80 0d       	add	r24, r0
    4a78:	91 1d       	adc	r25, r1
    4a7a:	11 24       	eor	r1, r1
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	48 ec       	ldi	r20, 0xC8	; 200
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	60 e0       	ldi	r22, 0x00	; 0
    4a84:	70 e0       	ldi	r23, 0x00	; 0
    4a86:	82 57       	subi	r24, 0x72	; 114
    4a88:	99 4f       	sbci	r25, 0xF9	; 249
		default: writePadded_P(strYawRud, 16); break;
	}
	
	for (uint8_t i = 0; i < 4; i++)
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
}
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	0f 91       	pop	r16
    4a90:	ff 90       	pop	r15
    4a92:	ef 90       	pop	r14
			index = subpage;
			if (Config.LinkRollPitch) index = subpage & 0xFE;
		}			
		else
		{
			startEditMode(&Config.PID[index].UI8[elementIndex - 1], 0, 200, TYPE_UINT8);
    4a94:	0c 94 37 23 	jmp	0x466e	; 0x466e <startEditMode>
			return;
		}
	}
	
	lcdSetPos(0, 30);
    4a98:	6e e1       	ldi	r22, 0x1E	; 30
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
	lcdReverse(elementIndex == 0);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	90 91 a3 05 	lds	r25, 0x05A3
    4aa6:	91 11       	cpse	r25, r1
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	0e 94 19 13 	call	0x2632	; 0x2632 <lcdReverse>
	switch (subpage)
    4aae:	80 91 a2 05 	lds	r24, 0x05A2
    4ab2:	88 23       	and	r24, r24
    4ab4:	31 f0       	breq	.+12     	; 0x4ac2 <_hPIEditor+0xa2>
    4ab6:	81 30       	cpi	r24, 0x01	; 1
    4ab8:	41 f4       	brne	.+16     	; 0x4aca <_hPIEditor+0xaa>
	{
		case 0: writePadded_P(strRollAil, 16); break;
		case 1: writePadded_P(strPitchEle, 16); break;
    4aba:	60 e1       	ldi	r22, 0x10	; 16
    4abc:	8c e2       	ldi	r24, 0x2C	; 44
    4abe:	99 e1       	ldi	r25, 0x19	; 25
    4ac0:	07 c0       	rjmp	.+14     	; 0x4ad0 <_hPIEditor+0xb0>
	
	lcdSetPos(0, 30);
	lcdReverse(elementIndex == 0);
	switch (subpage)
	{
		case 0: writePadded_P(strRollAil, 16); break;
    4ac2:	60 e1       	ldi	r22, 0x10	; 16
    4ac4:	8d e3       	ldi	r24, 0x3D	; 61
    4ac6:	99 e1       	ldi	r25, 0x19	; 25
    4ac8:	03 c0       	rjmp	.+6      	; 0x4ad0 <_hPIEditor+0xb0>
		case 1: writePadded_P(strPitchEle, 16); break;
		default: writePadded_P(strYawRud, 16); break;
    4aca:	60 e1       	ldi	r22, 0x10	; 16
    4acc:	8f e1       	ldi	r24, 0x1F	; 31
    4ace:	99 e1       	ldi	r25, 0x19	; 25
    4ad0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <writePadded_P>
    4ad4:	84 e0       	ldi	r24, 0x04	; 4
    4ad6:	c8 9f       	mul	r28, r24
    4ad8:	70 01       	movw	r14, r0
    4ada:	11 24       	eor	r1, r1
    4adc:	c7 01       	movw	r24, r14
    4ade:	87 59       	subi	r24, 0x97	; 151
    4ae0:	99 4f       	sbci	r25, 0xF9	; 249
    4ae2:	7c 01       	movw	r14, r24
{
	NOKEYRETURN;
	
	elementKey(5);

	uint8_t index = subpage;
    4ae4:	c0 e0       	ldi	r28, 0x00	; 0
    4ae6:	d0 e0       	ldi	r29, 0x00	; 0
    4ae8:	0c 2f       	mov	r16, r28
    4aea:	0f 5f       	subi	r16, 0xFF	; 255
    4aec:	f7 01       	movw	r30, r14
    4aee:	ec 0f       	add	r30, r28
    4af0:	fd 1f       	adc	r31, r29
		case 1: writePadded_P(strPitchEle, 16); break;
		default: writePadded_P(strYawRud, 16); break;
	}
	
	for (uint8_t i = 0; i < 4; i++)
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
    4af2:	46 a1       	ldd	r20, Z+38	; 0x26
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	25 e0       	ldi	r18, 0x05	; 5
    4af8:	6c e3       	ldi	r22, 0x3C	; 60
    4afa:	8c 2f       	mov	r24, r28
    4afc:	8e 5f       	subi	r24, 0xFE	; 254
    4afe:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
    4b02:	21 96       	adiw	r28, 0x01	; 1
		case 0: writePadded_P(strRollAil, 16); break;
		case 1: writePadded_P(strPitchEle, 16); break;
		default: writePadded_P(strYawRud, 16); break;
	}
	
	for (uint8_t i = 0; i < 4; i++)
    4b04:	c4 30       	cpi	r28, 0x04	; 4
    4b06:	d1 05       	cpc	r29, r1
    4b08:	79 f7       	brne	.-34     	; 0x4ae8 <_hPIEditor+0xc8>
		writeValue(i + 2, 60, Config.PID[index].UI8[i], 5, i + 1);
}
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	0f 91       	pop	r16
    4b10:	ff 90       	pop	r15
    4b12:	ef 90       	pop	r14
    4b14:	08 95       	ret

00004b16 <_hStart>:
		loadPage(PAGE_SHOW_LAYOUT);
	}
}

static void _hStart()
{
    4b16:	ff 92       	push	r15
    4b18:	0f 93       	push	r16
    4b1a:	1f 93       	push	r17
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	cd b7       	in	r28, 0x3d	; 61
    4b22:	de b7       	in	r29, 0x3e	; 62
    4b24:	27 97       	sbiw	r28, 0x07	; 7
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
	char s[7];
	if (KEY4)	// MENU
    4b30:	80 91 a4 05 	lds	r24, 0x05A4
    4b34:	84 ff       	sbrs	r24, 4
    4b36:	07 c0       	rjmp	.+14     	; 0x4b46 <_hStart+0x30>
	{
		arm(OFF);
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <arm>
		loadPage(PAGE_MENU);
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <loadPage>
		return;
    4b44:	cb c0       	rjmp	.+406    	; 0x4cdc <_hStart+0x1c6>
    4b46:	83 70       	andi	r24, 0x03	; 3
	}
	
	if (KEYINIT || KEYREFRESH)
    4b48:	99 f1       	breq	.+102    	; 0x4bb0 <_hStart+0x9a>
	{
		if (Config.ArmingMode)
    4b4a:	80 91 9c 06 	lds	r24, 0x069C
    4b4e:	88 23       	and	r24, r24
    4b50:	19 f0       	breq	.+6      	; 0x4b58 <_hStart+0x42>
			arm(ON);
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <arm>
		
		if (State.Armed)
    4b58:	80 91 ee 05 	lds	r24, 0x05EE
		{
			lcdSetPos(3, 36);
    4b5c:	64 e2       	ldi	r22, 0x24	; 36
	if (KEYINIT || KEYREFRESH)
	{
		if (Config.ArmingMode)
			arm(ON);
		
		if (State.Armed)
    4b5e:	88 23       	and	r24, r24
    4b60:	81 f0       	breq	.+32     	; 0x4b82 <_hStart+0x6c>
		{
			lcdSetPos(3, 36);
    4b62:	83 e0       	ldi	r24, 0x03	; 3
    4b64:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdSelectFont(&font12x16);
    4b68:	88 e9       	ldi	r24, 0x98	; 152
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
			lcdWriteString_P(strARMED);
    4b70:	81 e5       	ldi	r24, 0x51	; 81
    4b72:	9a e1       	ldi	r25, 0x1A	; 26
    4b74:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			lcdSelectFont(NULL);
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
			return;
    4b80:	ad c0       	rjmp	.+346    	; 0x4cdc <_hStart+0x1c6>
		}
		else
		{
			lcdSetPos(0, 36);
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdSelectFont(&font12x16);
    4b88:	88 e9       	ldi	r24, 0x98	; 152
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
			lcdWriteString_P(strSAFE);
    4b90:	87 e5       	ldi	r24, 0x57	; 87
    4b92:	9a e1       	ldi	r25, 0x1A	; 26
    4b94:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			lcdSelectFont(NULL);
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	0e 94 40 13 	call	0x2680	; 0x2680 <lcdSelectFont>
			lcdSetPos(2, 0);
    4ba0:	60 e0       	ldi	r22, 0x00	; 0
    4ba2:	82 e0       	ldi	r24, 0x02	; 2
    4ba4:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
			lcdWriteString_P(scrStart);
    4ba8:	8c e0       	ldi	r24, 0x0C	; 12
    4baa:	98 e1       	ldi	r25, 0x18	; 24
    4bac:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
		}
	}
	
	if (!State.Armed)
    4bb0:	80 91 ee 05 	lds	r24, 0x05EE
    4bb4:	81 11       	cpse	r24, r1
    4bb6:	92 c0       	rjmp	.+292    	; 0x4cdc <_hStart+0x1c6>
	{
		lcdSetPos(2, 84);
    4bb8:	64 e5       	ldi	r22, 0x54	; 84
    4bba:	82 e0       	ldi	r24, 0x02	; 2
    4bbc:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		if (State.SelfLevel)
    4bc0:	80 91 f0 05 	lds	r24, 0x05F0
			writePadded_P(strON, 3);
    4bc4:	63 e0       	ldi	r22, 0x03	; 3
	}
	
	if (!State.Armed)
	{
		lcdSetPos(2, 84);
		if (State.SelfLevel)
    4bc6:	88 23       	and	r24, r24
    4bc8:	19 f0       	breq	.+6      	; 0x4bd0 <_hStart+0xba>
			writePadded_P(strON, 3);
    4bca:	8a e4       	ldi	r24, 0x4A	; 74
    4bcc:	9a e1       	ldi	r25, 0x1A	; 26
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <_hStart+0xbe>
		else		
			writePadded_P(strOFF, 3);
    4bd0:	8d e4       	ldi	r24, 0x4D	; 77
    4bd2:	9a e1       	ldi	r25, 0x1A	; 26
    4bd4:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <writePadded_P>
	
		lcdSetPos(3, 0);
    4bd8:	60 e0       	ldi	r22, 0x00	; 0
    4bda:	83 e0       	ldi	r24, 0x03	; 3
    4bdc:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		if (State.Error)
    4be0:	80 91 f5 05 	lds	r24, 0x05F5
    4be4:	88 23       	and	r24, r24
    4be6:	89 f1       	breq	.+98     	; 0x4c4a <_hStart+0x134>
		{
			lcdWriteString_P(strError);
    4be8:	86 ec       	ldi	r24, 0xC6	; 198
    4bea:	98 e1       	ldi	r25, 0x18	; 24
    4bec:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
			lcdWriteChar(32);
    4bf0:	80 e2       	ldi	r24, 0x20	; 32
    4bf2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
			if (State.Error & ERR_NOT_CALIBRATED)
    4bf6:	80 91 f5 05 	lds	r24, 0x05F5
    4bfa:	87 ff       	sbrs	r24, 7
    4bfc:	03 c0       	rjmp	.+6      	; 0x4c04 <_hStart+0xee>
				lcdWriteString_P(strSensorNotCal);
    4bfe:	8d e3       	ldi	r24, 0x3D	; 61
    4c00:	98 e1       	ldi	r25, 0x18	; 24
    4c02:	25 c0       	rjmp	.+74     	; 0x4c4e <_hStart+0x138>
			else 
			{
				lcdWriteString_P(PSTR("no "));
    4c04:	86 e6       	ldi	r24, 0x66	; 102
    4c06:	9f e0       	ldi	r25, 0x0F	; 15
    4c08:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
				const char* s;
				if ((State.Error & ERR_NO_RX) == ERR_NO_RX)
    4c0c:	80 91 f5 05 	lds	r24, 0x05F5
    4c10:	98 2f       	mov	r25, r24
    4c12:	9f 70       	andi	r25, 0x0F	; 15
    4c14:	9f 30       	cpi	r25, 0x0F	; 15
    4c16:	49 f0       	breq	.+18     	; 0x4c2a <_hStart+0x114>
					s = PSTR("RX");
				else if (State.Error & ERR_NO_ROLL)
    4c18:	80 fd       	sbrc	r24, 0
    4c1a:	0a c0       	rjmp	.+20     	; 0x4c30 <_hStart+0x11a>
					s = strRoll;
				else if (State.Error & ERR_NO_PITCH)
    4c1c:	81 fd       	sbrc	r24, 1
    4c1e:	0b c0       	rjmp	.+22     	; 0x4c36 <_hStart+0x120>
					s = strPitch;
				else if (State.Error & ERR_NO_YAW)
    4c20:	82 ff       	sbrs	r24, 2
    4c22:	0c c0       	rjmp	.+24     	; 0x4c3c <_hStart+0x126>
					s = strYaw;
    4c24:	87 eb       	ldi	r24, 0xB7	; 183
    4c26:	98 e1       	ldi	r25, 0x18	; 24
    4c28:	0b c0       	rjmp	.+22     	; 0x4c40 <_hStart+0x12a>
			else 
			{
				lcdWriteString_P(PSTR("no "));
				const char* s;
				if ((State.Error & ERR_NO_RX) == ERR_NO_RX)
					s = PSTR("RX");
    4c2a:	83 e6       	ldi	r24, 0x63	; 99
    4c2c:	9f e0       	ldi	r25, 0x0F	; 15
    4c2e:	08 c0       	rjmp	.+16     	; 0x4c40 <_hStart+0x12a>
				else if (State.Error & ERR_NO_ROLL)
					s = strRoll;
    4c30:	81 ec       	ldi	r24, 0xC1	; 193
    4c32:	98 e1       	ldi	r25, 0x18	; 24
    4c34:	05 c0       	rjmp	.+10     	; 0x4c40 <_hStart+0x12a>
				else if (State.Error & ERR_NO_PITCH)
					s = strPitch;
    4c36:	8b eb       	ldi	r24, 0xBB	; 187
    4c38:	98 e1       	ldi	r25, 0x18	; 24
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <_hStart+0x12a>
				else if (State.Error & ERR_NO_YAW)
					s = strYaw;
				else 
					s = strThro;
    4c3c:	82 eb       	ldi	r24, 0xB2	; 178
    4c3e:	98 e1       	ldi	r25, 0x18	; 24
				lcdWriteString_P(s);
    4c40:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
				lcdWriteString_P(PSTR(" input"));
    4c44:	8c e5       	ldi	r24, 0x5C	; 92
    4c46:	9f e0       	ldi	r25, 0x0F	; 15
    4c48:	02 c0       	rjmp	.+4      	; 0x4c4e <_hStart+0x138>
			}
		}	
		else
			lcdWriteString_P(PSTR("Ready for departure!"));
    4c4a:	87 e4       	ldi	r24, 0x47	; 71
    4c4c:	9f e0       	ldi	r25, 0x0F	; 15
    4c4e:	0e 94 08 13 	call	0x2610	; 0x2610 <lcdWriteString_P>
	
		// battery level
		lcdSetPos(4, 13*6);
    4c52:	6e e4       	ldi	r22, 0x4E	; 78
    4c54:	84 e0       	ldi	r24, 0x04	; 4
    4c56:	0e 94 4f 11 	call	0x229e	; 0x229e <lcdSetPos>
		utoa(BATT / 10, s, 10);
    4c5a:	80 91 18 06 	lds	r24, 0x0618
    4c5e:	aa e0       	ldi	r26, 0x0A	; 10
    4c60:	fa 2e       	mov	r15, r26
    4c62:	6f 2d       	mov	r22, r15
    4c64:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__udivmodqi4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    4c68:	4a e0       	ldi	r20, 0x0A	; 10
    4c6a:	8e 01       	movw	r16, r28
    4c6c:	0f 5f       	subi	r16, 0xFF	; 255
    4c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c70:	b8 01       	movw	r22, r16
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	0e 94 41 27 	call	0x4e82	; 0x4e82 <__utoa_ncheck>
		lcdWriteString(s);
    4c78:	c8 01       	movw	r24, r16
    4c7a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <lcdWriteString>
		lcdWriteChar('.');
    4c7e:	8e e2       	ldi	r24, 0x2E	; 46
    4c80:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <lcdWriteChar>
		utoa(BATT % 10, s, 10);
    4c84:	80 91 18 06 	lds	r24, 0x0618
    4c88:	6f 2d       	mov	r22, r15
    4c8a:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__udivmodqi4>
    4c8e:	4a e0       	ldi	r20, 0x0A	; 10
    4c90:	b8 01       	movw	r22, r16
    4c92:	89 2f       	mov	r24, r25
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	0e 94 41 27 	call	0x4e82	; 0x4e82 <__utoa_ncheck>
		lcdWriteChar(32);
}

static void writePadded(char *s, uint8_t len)
{
	lcdWriteString(s);
    4c9a:	c8 01       	movw	r24, r16
    4c9c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <lcdWriteString>
	writeSpace(len - strlen(s));
    4ca0:	f8 01       	movw	r30, r16
    4ca2:	01 90       	ld	r0, Z+
    4ca4:	00 20       	and	r0, r0
    4ca6:	e9 f7       	brne	.-6      	; 0x4ca2 <_hStart+0x18c>
    4ca8:	80 2f       	mov	r24, r16
    4caa:	8e 1b       	sub	r24, r30
    4cac:	8c 5f       	subi	r24, 0xFC	; 252
    4cae:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <writeSpace>
		lcdWriteChar('.');
		utoa(BATT % 10, s, 10);
		writePadded(s, 3);
	
		// roll angle
		writeValue(5, 13*6, (int16_t)ANGLE[ROL] >> 8, 7, -1);
    4cb2:	40 91 e3 05 	lds	r20, 0x05E3
    4cb6:	54 2f       	mov	r21, r20
    4cb8:	55 0f       	add	r21, r21
    4cba:	55 0b       	sbc	r21, r21
    4cbc:	0f ef       	ldi	r16, 0xFF	; 255
    4cbe:	27 e0       	ldi	r18, 0x07	; 7
    4cc0:	6e e4       	ldi	r22, 0x4E	; 78
    4cc2:	85 e0       	ldi	r24, 0x05	; 5
    4cc4:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	
		// pitch angle
		writeValue(6, 13*6, (int16_t)ANGLE[PIT] >> 8, 7, -1);
    4cc8:	40 91 e5 05 	lds	r20, 0x05E5
    4ccc:	54 2f       	mov	r21, r20
    4cce:	55 0f       	add	r21, r21
    4cd0:	55 0b       	sbc	r21, r21
    4cd2:	27 e0       	ldi	r18, 0x07	; 7
    4cd4:	6e e4       	ldi	r22, 0x4E	; 78
    4cd6:	86 e0       	ldi	r24, 0x06	; 6
    4cd8:	0e 94 a1 21 	call	0x4342	; 0x4342 <writeValue>
	}	
}
    4cdc:	27 96       	adiw	r28, 0x07	; 7
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	ff 90       	pop	r15
    4cf2:	08 95       	ret

00004cf4 <menuLoop>:
		writeValue(2 + i, 13*6, Config.RX_chmap[subpage * 4 + i], 1, i + subpage * 4);
}

void menuLoop()
{
	if (keys == 0)
    4cf4:	80 91 a4 05 	lds	r24, 0x05A4
    4cf8:	81 11       	cpse	r24, r1
    4cfa:	04 c0       	rjmp	.+8      	; 0x4d04 <menuLoop+0x10>
		keys = keyboardRead();
    4cfc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <keyboardRead>
    4d00:	80 93 a4 05 	sts	0x05A4, r24
		
	if (KEY1 && !editMode)	// BACK
    4d04:	80 91 a4 05 	lds	r24, 0x05A4
    4d08:	87 ff       	sbrs	r24, 7
    4d0a:	11 c0       	rjmp	.+34     	; 0x4d2e <menuLoop+0x3a>
    4d0c:	80 91 91 05 	lds	r24, 0x0591
    4d10:	81 11       	cpse	r24, r1
    4d12:	0d c0       	rjmp	.+26     	; 0x4d2e <menuLoop+0x3a>
	{
		if (menuPage > PAGE_MENU)
    4d14:	80 91 fb 05 	lds	r24, 0x05FB
    4d18:	82 30       	cpi	r24, 0x02	; 2
    4d1a:	10 f0       	brcs	.+4      	; 0x4d20 <menuLoop+0x2c>
			loadPage(PAGE_MENU);
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	05 c0       	rjmp	.+10     	; 0x4d2a <menuLoop+0x36>
		else if (menuPage == PAGE_MENU)
    4d20:	81 30       	cpi	r24, 0x01	; 1
    4d22:	29 f4       	brne	.+10     	; 0x4d2e <menuLoop+0x3a>
		{
			configSave();
    4d24:	0e 94 0c 18 	call	0x3018	; 0x3018 <configSave>
			loadPage(PAGE_START);
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <loadPage>
		}			
	}
	
	if (KEYMENU)
    4d2e:	80 91 a4 05 	lds	r24, 0x05A4
    4d32:	82 ff       	sbrs	r24, 2
    4d34:	03 c0       	rjmp	.+6      	; 0x4d3c <menuLoop+0x48>
		keys = KEY_INIT;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	80 93 a4 05 	sts	0x05A4, r24
	defaultHandler();
    4d3c:	0e 94 14 23 	call	0x4628	; 0x4628 <defaultHandler>
	keys &= KEY_MENU;
    4d40:	80 91 a4 05 	lds	r24, 0x05A4
    4d44:	84 70       	andi	r24, 0x04	; 4
    4d46:	80 93 a4 05 	sts	0x05A4, r24
    4d4a:	08 95       	ret

00004d4c <menuInit>:
}

void menuInit()
{
	loadPage(PAGE_START);
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <loadPage>

00004d52 <menuRefresh>:
}

void menuRefresh()
{
	keys |= KEY_REFRESH;
    4d52:	80 91 a4 05 	lds	r24, 0x05A4
    4d56:	82 60       	ori	r24, 0x02	; 2
    4d58:	80 93 a4 05 	sts	0x05A4, r24
	menuLoop();
    4d5c:	0c 94 7a 26 	jmp	0x4cf4	; 0x4cf4 <menuLoop>

00004d60 <__udivmodqi4>:
    4d60:	99 1b       	sub	r25, r25
    4d62:	79 e0       	ldi	r23, 0x09	; 9
    4d64:	04 c0       	rjmp	.+8      	; 0x4d6e <__udivmodqi4_ep>

00004d66 <__udivmodqi4_loop>:
    4d66:	99 1f       	adc	r25, r25
    4d68:	96 17       	cp	r25, r22
    4d6a:	08 f0       	brcs	.+2      	; 0x4d6e <__udivmodqi4_ep>
    4d6c:	96 1b       	sub	r25, r22

00004d6e <__udivmodqi4_ep>:
    4d6e:	88 1f       	adc	r24, r24
    4d70:	7a 95       	dec	r23
    4d72:	c9 f7       	brne	.-14     	; 0x4d66 <__udivmodqi4_loop>
    4d74:	80 95       	com	r24
    4d76:	08 95       	ret

00004d78 <__udivmodhi4>:
    4d78:	aa 1b       	sub	r26, r26
    4d7a:	bb 1b       	sub	r27, r27
    4d7c:	51 e1       	ldi	r21, 0x11	; 17
    4d7e:	07 c0       	rjmp	.+14     	; 0x4d8e <__udivmodhi4_ep>

00004d80 <__udivmodhi4_loop>:
    4d80:	aa 1f       	adc	r26, r26
    4d82:	bb 1f       	adc	r27, r27
    4d84:	a6 17       	cp	r26, r22
    4d86:	b7 07       	cpc	r27, r23
    4d88:	10 f0       	brcs	.+4      	; 0x4d8e <__udivmodhi4_ep>
    4d8a:	a6 1b       	sub	r26, r22
    4d8c:	b7 0b       	sbc	r27, r23

00004d8e <__udivmodhi4_ep>:
    4d8e:	88 1f       	adc	r24, r24
    4d90:	99 1f       	adc	r25, r25
    4d92:	5a 95       	dec	r21
    4d94:	a9 f7       	brne	.-22     	; 0x4d80 <__udivmodhi4_loop>
    4d96:	80 95       	com	r24
    4d98:	90 95       	com	r25
    4d9a:	bc 01       	movw	r22, r24
    4d9c:	cd 01       	movw	r24, r26
    4d9e:	08 95       	ret

00004da0 <__divmodhi4>:
    4da0:	97 fb       	bst	r25, 7
    4da2:	07 2e       	mov	r0, r23
    4da4:	16 f4       	brtc	.+4      	; 0x4daa <__divmodhi4+0xa>
    4da6:	00 94       	com	r0
    4da8:	07 d0       	rcall	.+14     	; 0x4db8 <__divmodhi4_neg1>
    4daa:	77 fd       	sbrc	r23, 7
    4dac:	09 d0       	rcall	.+18     	; 0x4dc0 <__divmodhi4_neg2>
    4dae:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__udivmodhi4>
    4db2:	07 fc       	sbrc	r0, 7
    4db4:	05 d0       	rcall	.+10     	; 0x4dc0 <__divmodhi4_neg2>
    4db6:	3e f4       	brtc	.+14     	; 0x4dc6 <__divmodhi4_exit>

00004db8 <__divmodhi4_neg1>:
    4db8:	90 95       	com	r25
    4dba:	81 95       	neg	r24
    4dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dbe:	08 95       	ret

00004dc0 <__divmodhi4_neg2>:
    4dc0:	70 95       	com	r23
    4dc2:	61 95       	neg	r22
    4dc4:	7f 4f       	sbci	r23, 0xFF	; 255

00004dc6 <__divmodhi4_exit>:
    4dc6:	08 95       	ret

00004dc8 <__udivmodsi4>:
    4dc8:	a1 e2       	ldi	r26, 0x21	; 33
    4dca:	1a 2e       	mov	r1, r26
    4dcc:	aa 1b       	sub	r26, r26
    4dce:	bb 1b       	sub	r27, r27
    4dd0:	fd 01       	movw	r30, r26
    4dd2:	0d c0       	rjmp	.+26     	; 0x4dee <__udivmodsi4_ep>

00004dd4 <__udivmodsi4_loop>:
    4dd4:	aa 1f       	adc	r26, r26
    4dd6:	bb 1f       	adc	r27, r27
    4dd8:	ee 1f       	adc	r30, r30
    4dda:	ff 1f       	adc	r31, r31
    4ddc:	a2 17       	cp	r26, r18
    4dde:	b3 07       	cpc	r27, r19
    4de0:	e4 07       	cpc	r30, r20
    4de2:	f5 07       	cpc	r31, r21
    4de4:	20 f0       	brcs	.+8      	; 0x4dee <__udivmodsi4_ep>
    4de6:	a2 1b       	sub	r26, r18
    4de8:	b3 0b       	sbc	r27, r19
    4dea:	e4 0b       	sbc	r30, r20
    4dec:	f5 0b       	sbc	r31, r21

00004dee <__udivmodsi4_ep>:
    4dee:	66 1f       	adc	r22, r22
    4df0:	77 1f       	adc	r23, r23
    4df2:	88 1f       	adc	r24, r24
    4df4:	99 1f       	adc	r25, r25
    4df6:	1a 94       	dec	r1
    4df8:	69 f7       	brne	.-38     	; 0x4dd4 <__udivmodsi4_loop>
    4dfa:	60 95       	com	r22
    4dfc:	70 95       	com	r23
    4dfe:	80 95       	com	r24
    4e00:	90 95       	com	r25
    4e02:	9b 01       	movw	r18, r22
    4e04:	ac 01       	movw	r20, r24
    4e06:	bd 01       	movw	r22, r26
    4e08:	cf 01       	movw	r24, r30
    4e0a:	08 95       	ret

00004e0c <__mulhisi3>:
    4e0c:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__umulhisi3>
    4e10:	33 23       	and	r19, r19
    4e12:	12 f4       	brpl	.+4      	; 0x4e18 <__mulhisi3+0xc>
    4e14:	8a 1b       	sub	r24, r26
    4e16:	9b 0b       	sbc	r25, r27
    4e18:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__usmulhisi3_tail>

00004e1c <__umulhisi3>:
    4e1c:	a2 9f       	mul	r26, r18
    4e1e:	b0 01       	movw	r22, r0
    4e20:	b3 9f       	mul	r27, r19
    4e22:	c0 01       	movw	r24, r0
    4e24:	a3 9f       	mul	r26, r19
    4e26:	70 0d       	add	r23, r0
    4e28:	81 1d       	adc	r24, r1
    4e2a:	11 24       	eor	r1, r1
    4e2c:	91 1d       	adc	r25, r1
    4e2e:	b2 9f       	mul	r27, r18
    4e30:	70 0d       	add	r23, r0
    4e32:	81 1d       	adc	r24, r1
    4e34:	11 24       	eor	r1, r1
    4e36:	91 1d       	adc	r25, r1
    4e38:	08 95       	ret

00004e3a <__usmulhisi3>:
    4e3a:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__umulhisi3>

00004e3e <__usmulhisi3_tail>:
    4e3e:	b7 ff       	sbrs	r27, 7
    4e40:	08 95       	ret
    4e42:	82 1b       	sub	r24, r18
    4e44:	93 0b       	sbc	r25, r19
    4e46:	08 95       	ret

00004e48 <memcpy_P>:
    4e48:	fb 01       	movw	r30, r22
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <memcpy_P+0xa>
    4e4e:	05 90       	lpm	r0, Z+
    4e50:	0d 92       	st	X+, r0
    4e52:	41 50       	subi	r20, 0x01	; 1
    4e54:	50 40       	sbci	r21, 0x00	; 0
    4e56:	d8 f7       	brcc	.-10     	; 0x4e4e <memcpy_P+0x6>
    4e58:	08 95       	ret

00004e5a <__strlen_P>:
    4e5a:	fc 01       	movw	r30, r24
    4e5c:	05 90       	lpm	r0, Z+
    4e5e:	00 20       	and	r0, r0
    4e60:	e9 f7       	brne	.-6      	; 0x4e5c <__strlen_P+0x2>
    4e62:	80 95       	com	r24
    4e64:	90 95       	com	r25
    4e66:	8e 0f       	add	r24, r30
    4e68:	9f 1f       	adc	r25, r31
    4e6a:	08 95       	ret

00004e6c <__itoa_ncheck>:
    4e6c:	bb 27       	eor	r27, r27
    4e6e:	4a 30       	cpi	r20, 0x0A	; 10
    4e70:	31 f4       	brne	.+12     	; 0x4e7e <__itoa_ncheck+0x12>
    4e72:	99 23       	and	r25, r25
    4e74:	22 f4       	brpl	.+8      	; 0x4e7e <__itoa_ncheck+0x12>
    4e76:	bd e2       	ldi	r27, 0x2D	; 45
    4e78:	90 95       	com	r25
    4e7a:	81 95       	neg	r24
    4e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e7e:	0c 94 42 27 	jmp	0x4e84	; 0x4e84 <__utoa_common>

00004e82 <__utoa_ncheck>:
    4e82:	bb 27       	eor	r27, r27

00004e84 <__utoa_common>:
    4e84:	fb 01       	movw	r30, r22
    4e86:	55 27       	eor	r21, r21
    4e88:	aa 27       	eor	r26, r26
    4e8a:	88 0f       	add	r24, r24
    4e8c:	99 1f       	adc	r25, r25
    4e8e:	aa 1f       	adc	r26, r26
    4e90:	a4 17       	cp	r26, r20
    4e92:	10 f0       	brcs	.+4      	; 0x4e98 <__utoa_common+0x14>
    4e94:	a4 1b       	sub	r26, r20
    4e96:	83 95       	inc	r24
    4e98:	50 51       	subi	r21, 0x10	; 16
    4e9a:	b9 f7       	brne	.-18     	; 0x4e8a <__utoa_common+0x6>
    4e9c:	a0 5d       	subi	r26, 0xD0	; 208
    4e9e:	aa 33       	cpi	r26, 0x3A	; 58
    4ea0:	08 f0       	brcs	.+2      	; 0x4ea4 <__utoa_common+0x20>
    4ea2:	a9 5d       	subi	r26, 0xD9	; 217
    4ea4:	a1 93       	st	Z+, r26
    4ea6:	00 97       	sbiw	r24, 0x00	; 0
    4ea8:	79 f7       	brne	.-34     	; 0x4e88 <__utoa_common+0x4>
    4eaa:	b1 11       	cpse	r27, r1
    4eac:	b1 93       	st	Z+, r27
    4eae:	11 92       	st	Z+, r1
    4eb0:	cb 01       	movw	r24, r22
    4eb2:	0c 94 8d 27 	jmp	0x4f1a	; 0x4f1a <strrev>

00004eb6 <__eerd_block_m324pa>:
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22

00004eba <__eerd_blraw_m324pa>:
    4eba:	fc 01       	movw	r30, r24
    4ebc:	f9 99       	sbic	0x1f, 1	; 31
    4ebe:	fe cf       	rjmp	.-4      	; 0x4ebc <__eerd_blraw_m324pa+0x2>
    4ec0:	06 c0       	rjmp	.+12     	; 0x4ece <__eerd_blraw_m324pa+0x14>
    4ec2:	f2 bd       	out	0x22, r31	; 34
    4ec4:	e1 bd       	out	0x21, r30	; 33
    4ec6:	f8 9a       	sbi	0x1f, 0	; 31
    4ec8:	31 96       	adiw	r30, 0x01	; 1
    4eca:	00 b4       	in	r0, 0x20	; 32
    4ecc:	0d 92       	st	X+, r0
    4ece:	41 50       	subi	r20, 0x01	; 1
    4ed0:	50 40       	sbci	r21, 0x00	; 0
    4ed2:	b8 f7       	brcc	.-18     	; 0x4ec2 <__eerd_blraw_m324pa+0x8>
    4ed4:	08 95       	ret

00004ed6 <__eeupd_block_m324pa>:
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	a4 0f       	add	r26, r20
    4eda:	b5 1f       	adc	r27, r21
    4edc:	41 50       	subi	r20, 0x01	; 1
    4ede:	50 40       	sbci	r21, 0x00	; 0
    4ee0:	48 f0       	brcs	.+18     	; 0x4ef4 <__eeupd_block_m324pa+0x1e>
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	84 0f       	add	r24, r20
    4ee6:	95 1f       	adc	r25, r21
    4ee8:	2e 91       	ld	r18, -X
    4eea:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <__eeupd_r18_m324pa>
    4eee:	41 50       	subi	r20, 0x01	; 1
    4ef0:	50 40       	sbci	r21, 0x00	; 0
    4ef2:	d0 f7       	brcc	.-12     	; 0x4ee8 <__eeupd_block_m324pa+0x12>
    4ef4:	08 95       	ret

00004ef6 <__eeupd_byte_m324pa>:
    4ef6:	26 2f       	mov	r18, r22

00004ef8 <__eeupd_r18_m324pa>:
    4ef8:	f9 99       	sbic	0x1f, 1	; 31
    4efa:	fe cf       	rjmp	.-4      	; 0x4ef8 <__eeupd_r18_m324pa>
    4efc:	92 bd       	out	0x22, r25	; 34
    4efe:	81 bd       	out	0x21, r24	; 33
    4f00:	f8 9a       	sbi	0x1f, 0	; 31
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	00 b4       	in	r0, 0x20	; 32
    4f06:	02 16       	cp	r0, r18
    4f08:	39 f0       	breq	.+14     	; 0x4f18 <__eeupd_r18_m324pa+0x20>
    4f0a:	1f ba       	out	0x1f, r1	; 31
    4f0c:	20 bd       	out	0x20, r18	; 32
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	fa 9a       	sbi	0x1f, 2	; 31
    4f14:	f9 9a       	sbi	0x1f, 1	; 31
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	08 95       	ret

00004f1a <strrev>:
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	67 2f       	mov	r22, r23
    4f20:	71 91       	ld	r23, Z+
    4f22:	77 23       	and	r23, r23
    4f24:	e1 f7       	brne	.-8      	; 0x4f1e <strrev+0x4>
    4f26:	32 97       	sbiw	r30, 0x02	; 2
    4f28:	04 c0       	rjmp	.+8      	; 0x4f32 <strrev+0x18>
    4f2a:	7c 91       	ld	r23, X
    4f2c:	6d 93       	st	X+, r22
    4f2e:	70 83       	st	Z, r23
    4f30:	62 91       	ld	r22, -Z
    4f32:	ae 17       	cp	r26, r30
    4f34:	bf 07       	cpc	r27, r31
    4f36:	c8 f3       	brcs	.-14     	; 0x4f2a <strrev+0x10>
    4f38:	08 95       	ret

00004f3a <_exit>:
    4f3a:	f8 94       	cli

00004f3c <__stop_program>:
    4f3c:	ff cf       	rjmp	.-2      	; 0x4f3c <__stop_program>
